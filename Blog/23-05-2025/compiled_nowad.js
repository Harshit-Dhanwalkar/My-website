var Module = {};
var lines = [];
var js_buffer = [];
var pressed_keys = {};
var key_queue = [];

function print_msg(msg) {
  lines.push(msg);
  if (lines.length > 25) 
    lines.shift();
  
  for (var i = 0; i < lines.length; i++) {
    var row = lines[i];
    globalThis.getField("console_"+(25-i-1)).value = row;
  }
}

Module.print = function(msg) {
  let max_len = 80;
  let num_lines = Math.ceil(msg.length / max_len);
  
  for (let i = 0, o = 0; i < num_lines; ++i, o += max_len) {
    print_msg(msg.substr(o, max_len));
  }
}
Module.printErr = function(msg) {
  print_msg(msg);
}

function key_pressed(key_str) {
  if ("WASD".includes(key_str)) {
    key_str = key_str.toLowerCase();
    key_pressed("_") //placeholder for shift;
  }
  let keycode = key_str.charCodeAt(0);
  let doomkey = _key_to_doomkey(keycode);
  print_msg("pressed: " + key_str + " " + keycode + " ");
  if (doomkey === -1) 
    return;

  pressed_keys[doomkey] = 2;
}

function key_down(key_str) {
  let keycode = key_str.charCodeAt(0);
  let doomkey = _key_to_doomkey(keycode);
  print_msg("key down: " + key_str + " " + keycode + " ");
  if (doomkey === -1) 
    return;
  pressed_keys[doomkey] = 1;
}

function key_up(key_str) {
  let keycode = key_str.charCodeAt(0);
  let doomkey = _key_to_doomkey(keycode);
  print_msg("key up: " + key_str + " " + keycode + " ");
  if (doomkey === -1) 
    return;
  pressed_keys[doomkey] = 0;
}

function reset_input_box() {
  globalThis.getField("key_input").value = "Type here for keyboard controls.";
}
app.setInterval("reset_input_box()", 1000);

function write_file(filename, data) {
  let stream = FS.open("/"+filename, "w+");
  FS.write(stream, data, 0, data.length, 0);
  FS.close(stream);
}

function create_framebuffer(width, height) {
  js_buffer = [];
  for (let y=0; y < height; y++) {
    let row = Array(width);
    for (let x=0; x < width; x++) {
      row[x] = "_";
    }
    js_buffer.push(row);
  }
}

function update_framebuffer(framebuffer_ptr, framebuffer_len, width, height) {
  let framebuffer = Module.HEAPU8.subarray(framebuffer_ptr, framebuffer_ptr + framebuffer_len);
  for (let y=0; y < height; y++) {
    let row = js_buffer[y];
    let old_row = row.join("");
    for (let x=0; x < width; x++) {
      let index = (y * width + x) * 4;
      let r = framebuffer[index];
      let g = framebuffer[index+1];
      let b = framebuffer[index+2];
      let avg = (r + g + b) / 3;
      //let avg = (x/width) * 255; // (uncomment for a gradient test)

      //note - these ascii characters were all picked because they have the same width in the sans-serif font that chrome decided to use for text fields
      if (avg > 200)
        row[x] = "_";
      else if (avg > 150)
        row[x] = "::";
      else if (avg > 100)
        row[x] = "?";
      else if (avg > 50)
        row[x] = "//";
      else if (avg > 25)
        row[x] = "b";
      else
        row[x] = "#";
    }
    let row_str = row.join("");
    if (row_str !== old_row)
      globalThis.getField("field_"+(height-y-1)).value = row_str;
  }
}//https://stackoverflow.com/a/62364519
function b64_to_uint8array(str) {
  const abc = [..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"]; // base64 alphabet
  let result = [];

  for(let i=0; i<str.length/4; i++) {
    let chunk = [...str.slice(4*i,4*i+4)]
    let bin = chunk.map(x=> abc.indexOf(x).toString(2).padStart(6,0)).join(''); 
    let bytes = bin.match(/.{1,8}/g).map(x=> +('0b'+x));
    result.push(...bytes.slice(0,3 - (str[4*i+2]=="=") - (str[4*i+3]=="=")));
  }
  return new Uint8Array(result);
}

var file_data = b64_to_uint8array("__iwad_file__");
var file_name = "__iwad_filename__"
var file2_data = b64_to_uint8array("__wad_file__");
var file2_name = "__wad_filename__"

if (file_data.length <= 9) {
  throw "Error: IWAD not found.";
}
if (file2_data.length <= 9) {
  file2_data = null;
}
else {
  Module.arguments = ["-file", file2_name];
}

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};



// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }




  read_ = function shell_read(filename, binary) {
    var ret = tryParseAsDataURI(filename);
    if (ret) {
      return binary ? ret : ret.toString();
    }
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };



} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }


} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {




  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';






// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  assert(end <= HEAP8.length, 'failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};






var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}



var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}







function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

/** @param {Array=} args */
function dynCall(sig, ptr, args) {
  if (args && args.length) {
    // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
    assert(args.length === sig.substring(1).replace(/j/g, '--').length);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;





// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });






// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}






// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}





// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0 || i == maxBytesToRead / 2) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 8,
    STACK_BASE = 400384,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5643264,
    DYNAMIC_BASE = 5643264,
    DYNAMICTOP_PTR = 400176;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');


var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) Object.defineProperty(Module, 'INITIAL_MEMORY', { configurable: true, get: function() { abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

assert(INITIAL_INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');








// In non-standalone/normal mode, we create the memory here.



// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['buffer']) {
    buffer = Module['buffer'];
  }
  else {
    buffer = new ArrayBuffer(INITIAL_INITIAL_MEMORY);
  }


// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_INITIAL_MEMORY = buffer.byteLength;
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;






// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x2135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)-1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)-2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}





// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback(Module); // Pass the module as the first argument.
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

/** @param {number|boolean=} ignore */
function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
/** @param {number|boolean=} ignore */
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}




// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  var e = what;

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}


var memoryInitializer = null;












function hasPrefix(str, prefix) {
  return String.prototype.startsWith ?
      str.startsWith(prefix) :
      str.indexOf(prefix) === 0;
}

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return hasPrefix(filename, dataURIPrefix);
}

var fileURIPrefix = "file://";

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return hasPrefix(filename, fileURIPrefix);
}



function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    if (name[0] == '_') {
      displayName = name.substr(1);
    }
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}



// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = [function() { return Date.now(); },
 function() { if (key_queue.length === 0) return 0; let key_data = key_queue.shift(); let key = key_data[0]; let pressed = key_data[1]; return (pressed << 8) | key; },
 function() { for (let key of Object.keys(pressed_keys)) { key_queue.push([key, !!pressed_keys[key]]); if (pressed_keys[key] === 0) delete pressed_keys[key]; if (pressed_keys[key] === 2) pressed_keys[key] = 0; } },
 function($0, $1, $2, $3) { update_framebuffer($0, $1, $2, $3); },
 function($0, $1) { create_framebuffer($0, $1); },
 function() { write_file(file_name, file_data); if (file2_data) { write_file(file2_name, file2_data); } },
 function() { app.setInterval("_doomjs_tick()", 0); }];

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iiiii(code, a0, a1, a2, a3) {
  return ASM_CONSTS[code](a0, a1, a2, a3);
}




// STATICTOP = STATIC_BASE + 400376;
/* global initializers */  __ATINIT__.push({ func: function() { ___emscripten_environ_constructor() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 400368;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  
   function abortStackOverflow(allocSize) {
      abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b__Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

   

   


  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  
  var ___environ=400208;
  
  var ENV={};
  
  function __getExecutableName() {
      return thisProgram || './this.program';
    }function ___buildEnvironment(environ) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        // Browser language detection #8751
        ENV['LANG'] = ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        ENV['_'] = __getExecutableName();
        // Allocate memory.
        poolPtr = getMemory(TOTAL_ENV_SIZE);
        ___environ = getMemory(MAX_ENV_VALUES * 4);
        HEAP32[((___environ)>>2)]=poolPtr;
        HEAP32[((environ)>>2)]=___environ;
      } else {
        ___environ = HEAP32[((environ)>>2)];
        poolPtr = HEAP32[((___environ)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in ENV) {
        if (typeof ENV[key] === 'string') {
          var line = key + '=' + ENV[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((___environ)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((___environ)+(strings.length * ptrSize))>>2)]=0;
    }

  
  
   
  
   
  
     

  
    

  
  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)]=value;
      return value;
    }
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, address, length, position, prot, flags) {
          // We don't currently support location hints for the address of the mapping
          assert(address === 0);
  
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = FS.mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, address, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },mmapAlloc:function(size) {
        var alignedSize = alignMemory(size, 16384);
        var ptr = _malloc(alignedSize);
        while (size < alignedSize) HEAP8[ptr + size++] = 0;
        return ptr;
      }};var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};function ___sys_unlink(path) {try {
  
      path = SYSCALLS.getStr(path);
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall10(a0
  ) {
  return ___sys_unlink(a0);
  }

  
  function ___sys_fcntl64(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall221(a0,a1,a2
  ) {
  return ___sys_fcntl64(a0,a1,a2);
  }

  
  function ___sys_rename(old_path, new_path) {try {
  
      old_path = SYSCALLS.getStr(old_path);
      new_path = SYSCALLS.getStr(new_path);
      FS.rename(old_path, new_path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall38(a0,a1
  ) {
  return ___sys_rename(a0,a1);
  }

  
  function ___sys_mkdir(path, mode) {try {
  
      path = SYSCALLS.getStr(path);
      return SYSCALLS.doMkdir(path, mode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall39(a0,a1
  ) {
  return ___sys_mkdir(a0,a1);
  }

  
  function ___sys_rmdir(path) {try {
  
      path = SYSCALLS.getStr(path);
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall40(a0
  ) {
  return ___sys_rmdir(a0);
  }

  
  function ___sys_open(path, flags, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var pathname = SYSCALLS.getStr(path);
      var mode = SYSCALLS.get();
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall5(a0,a1,a2
  ) {
  return ___sys_open(a0,a1,a2);
  }

  
  function ___sys_ioctl(fd, op, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall54(a0,a1,a2
  ) {
  return ___sys_ioctl(a0,a1,a2);
  }

   

  
  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_close(a0
  ) {
  return _fd_close(a0);
  }

  
  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_read(a0,a1,a2,a3
  ) {
  return _fd_read(a0,a1,a2,a3);
  }

  
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_seek(a0,a1,a2,a3,a4
  ) {
  return _fd_seek(a0,a1,a2,a3,a4);
  }

  
  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_write(a0,a1,a2,a3
  ) {
  return _fd_write(a0,a1,a2,a3);
  }

   

   

  function _emscripten_asm_const_int() {}

  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }

   

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s INITIAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }



   

   

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }
  
   

   

  function _system(command) {
      if (ENVIRONMENT_IS_NODE) {
        if (!command) return 1; // shell is available
  
        var cmdstr = UTF8ToString(command);
        if (!cmdstr.length) return 0; // this is what glibc seems to do (shell works test?)
  
        var cp = require('child_process');
        var ret = cp.spawnSync(cmdstr, [], {shell:true, stdio:'inherit'});
  
        var _W_EXITCODE = function(ret, sig) {
          return ((ret) << 8 | (sig));
        }
  
        // this really only can happen if process is killed by signal
        if (ret.status === null) {
          // sadly node doesn't expose such function
          var signalToNumber = function(sig) {
            // implement only the most common ones, and fallback to SIGINT
            switch (sig) {
              case 'SIGHUP': return 1;
              case 'SIGINT': return 2;
              case 'SIGQUIT': return 3;
              case 'SIGFPE': return 8;
              case 'SIGKILL': return 9;
              case 'SIGALRM': return 14;
              case 'SIGTERM': return 15;
            }
            return 2; // SIGINT
          }
          return _W_EXITCODE(0, signalToNumber(ret.signal));
        }
  
        return _W_EXITCODE(ret.status, 0);
      }
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      if (!command) return 0; // no shell available
      setErrNo(6);
      return -1;
    }

  
  var __readAsmConstArgsArray=[];function readAsmConstArgs(sigPtr, buf) {
      // Nobody should have mutated _readAsmConstArgsArray underneath us to be something else than an array.
      assert(Array.isArray( __readAsmConstArgsArray));
      // The input buffer is allocated on the stack, so it must be stack-aligned.
      assert(buf % 16 == 0);
      __readAsmConstArgsArray.length = 0;
      var ch;
      // Most arguments are i32s, so shift the buffer pointer so it is a plain
      // index into HEAP32.
      buf >>= 2;
      while (ch = HEAPU8[sigPtr++]) {
        assert(ch === 100/*'d'*/ || ch === 102/*'f'*/ || ch === 105 /*'i'*/);
        // A double takes two 32-bit slots, and must also be aligned - the backend
        // will emit padding to avoid that.
        var double = ch < 105;
        if (double && (buf & 1)) buf++;
        __readAsmConstArgsArray.push(double ? HEAPF64[buf++ >> 1] : HEAP32[buf]);
        ++buf;
      }
      return __readAsmConstArgsArray;
    }
var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();;
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      // TODO: Update Node.js externs, Closure does not recognize the following Buffer.from()
      /**@suppress{checkTypes}*/
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_clz32,Math_imul,Int8Array,Int32Array

function nullFunc_i(x) { abortFnPtrError(x, 'i'); }
function nullFunc_ii(x) { abortFnPtrError(x, 'ii'); }
function nullFunc_iidiiii(x) { abortFnPtrError(x, 'iidiiii'); }
function nullFunc_iiii(x) { abortFnPtrError(x, 'iiii'); }
function nullFunc_iiiii(x) { abortFnPtrError(x, 'iiiii'); }
function nullFunc_v(x) { abortFnPtrError(x, 'v'); }
function nullFunc_vi(x) { abortFnPtrError(x, 'vi'); }
function nullFunc_vii(x) { abortFnPtrError(x, 'vii'); }

var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

var asmLibraryArg = { "___buildEnvironment": ___buildEnvironment, "___sys_fcntl64": ___sys_fcntl64, "___sys_ioctl": ___sys_ioctl, "___sys_mkdir": ___sys_mkdir, "___sys_open": ___sys_open, "___sys_rename": ___sys_rename, "___sys_rmdir": ___sys_rmdir, "___sys_unlink": ___sys_unlink, "___syscall10": ___syscall10, "___syscall221": ___syscall221, "___syscall38": ___syscall38, "___syscall39": ___syscall39, "___syscall40": ___syscall40, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___wasi_fd_close": ___wasi_fd_close, "___wasi_fd_read": ___wasi_fd_read, "___wasi_fd_seek": ___wasi_fd_seek, "___wasi_fd_write": ___wasi_fd_write, "__getExecutableName": __getExecutableName, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiiii": _emscripten_asm_const_iiiii, "_emscripten_asm_const_int": _emscripten_asm_const_int, "_emscripten_get_heap_size": _emscripten_get_heap_size, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_resize_heap": _emscripten_resize_heap, "_exit": _exit, "_fd_close": _fd_close, "_fd_read": _fd_read, "_fd_seek": _fd_seek, "_fd_write": _fd_write, "_system": _system, "abort": abort, "abortStackOverflow": abortStackOverflow, "getTempRet0": getTempRet0, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iidiiii": nullFunc_iidiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "setTempRet0": setTempRet0, "tempDoublePtr": tempDoublePtr };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  nan = global.NaN,
  inf = global.Infinity,
  Math_abs=global.Math.abs,
  Math_imul=global.Math.imul,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  nullFunc_i=env.nullFunc_i,
  nullFunc_ii=env.nullFunc_ii,
  nullFunc_iidiiii=env.nullFunc_iidiiii,
  nullFunc_iiii=env.nullFunc_iiii,
  nullFunc_iiiii=env.nullFunc_iiiii,
  nullFunc_v=env.nullFunc_v,
  nullFunc_vi=env.nullFunc_vi,
  nullFunc_vii=env.nullFunc_vii,
  ___buildEnvironment=env.___buildEnvironment,
  ___sys_fcntl64=env.___sys_fcntl64,
  ___sys_ioctl=env.___sys_ioctl,
  ___sys_mkdir=env.___sys_mkdir,
  ___sys_open=env.___sys_open,
  ___sys_rename=env.___sys_rename,
  ___sys_rmdir=env.___sys_rmdir,
  ___sys_unlink=env.___sys_unlink,
  ___syscall10=env.___syscall10,
  ___syscall221=env.___syscall221,
  ___syscall38=env.___syscall38,
  ___syscall39=env.___syscall39,
  ___syscall40=env.___syscall40,
  ___syscall5=env.___syscall5,
  ___syscall54=env.___syscall54,
  ___wasi_fd_close=env.___wasi_fd_close,
  ___wasi_fd_read=env.___wasi_fd_read,
  ___wasi_fd_seek=env.___wasi_fd_seek,
  ___wasi_fd_write=env.___wasi_fd_write,
  __getExecutableName=env.__getExecutableName,
  _emscripten_asm_const_i=env._emscripten_asm_const_i,
  _emscripten_asm_const_iii=env._emscripten_asm_const_iii,
  _emscripten_asm_const_iiiii=env._emscripten_asm_const_iiiii,
  _emscripten_asm_const_int=env._emscripten_asm_const_int,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  _exit=env._exit,
  _fd_close=env._fd_close,
  _fd_read=env._fd_read,
  _fd_seek=env._fd_seek,
  _fd_write=env._fd_write,
  _system=env._system,
  abortStackOverflow=env.abortStackOverflow,
  STACKTOP = 400384,
  STACK_MAX = 5643264,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function _AM_findMinMaxBoundaries() {
 var $$ph = 0, $$ph21 = 0, $$ph22 = 0, $$ph23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call27 = 0, $call30 = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp13 = 0, $cmp19 = 0, $cmp28 = 0, $cmp6 = 0, $cond = 0, $i$014 = 0, $inc = 0, $max_x$sink = 0, $min_y$sink = 0, $shl = 0;
 var $shl26 = 0, $shl29 = 0, $sub = 0, $sub25 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[98988] = 2147483647;
 HEAP32[98989] = 2147483647;
 HEAP32[98990] = -2147483647;
 HEAP32[98991] = -2147483647;
 $0 = HEAP32[99496]|0;
 $cmp13 = ($0|0)>(0);
 if ($cmp13) {
  $1 = HEAP32[99497]|0;
  $3 = 2147483647;$4 = -2147483647;$6 = 2147483647;$7 = -2147483647;$i$014 = 0;
  while(1) {
   $x = (($1) + ($i$014<<3)|0);
   $2 = HEAP32[$x>>2]|0;
   $cmp1 = ($2|0)<($3|0);
   if ($cmp1) {
    $$ph = $4;$$ph21 = $2;$max_x$sink = 395956;
    label = 5;
   } else {
    $cmp6 = ($2|0)>($4|0);
    if ($cmp6) {
     $$ph = $2;$$ph21 = $3;$max_x$sink = 395964;
     label = 5;
    } else {
     $16 = $4;$17 = $3;
    }
   }
   if ((label|0) == 5) {
    label = 0;
    HEAP32[$max_x$sink>>2] = $2;
    $16 = $$ph;$17 = $$ph21;
   }
   $y = (((($1) + ($i$014<<3)|0)) + 4|0);
   $5 = HEAP32[$y>>2]|0;
   $cmp12 = ($5|0)<($6|0);
   if ($cmp12) {
    $$ph22 = $7;$$ph23 = $5;$min_y$sink = 395952;
    label = 8;
   } else {
    $cmp19 = ($5|0)>($7|0);
    if ($cmp19) {
     $$ph22 = $5;$$ph23 = $6;$min_y$sink = 395960;
     label = 8;
    } else {
     $18 = $7;$19 = $6;
    }
   }
   if ((label|0) == 8) {
    label = 0;
    HEAP32[$min_y$sink>>2] = $5;
    $18 = $$ph22;$19 = $$ph23;
   }
   $inc = (($i$014) + 1)|0;
   $cmp = ($inc|0)<($0|0);
   if ($cmp) {
    $3 = $17;$4 = $16;$6 = $19;$7 = $18;$i$014 = $inc;
   } else {
    $10 = $18;$11 = $19;$8 = $16;$9 = $17;
    break;
   }
  }
 } else {
  $10 = -2147483647;$11 = 2147483647;$8 = -2147483647;$9 = 2147483647;
 }
 $sub = (($8) - ($9))|0;
 $sub25 = (($10) - ($11))|0;
 HEAP32[98992] = $sub25;
 $12 = HEAP32[98977]|0;
 $shl = $12 << 16;
 $call = (_FixedDiv($shl,$sub)|0);
 $13 = HEAP32[98979]|0;
 $shl26 = $13 << 16;
 $14 = HEAP32[98992]|0;
 $call27 = (_FixedDiv($shl26,$14)|0);
 $cmp28 = ($call|0)<($call27|0);
 $cond = $cmp28 ? $call : $call27;
 HEAP32[98993] = $cond;
 $15 = HEAP32[98979]|0;
 $shl29 = $15 << 16;
 $call30 = (_FixedDiv($shl29,2097152)|0);
 HEAP32[98994] = $call30;
 return;
}
function _AM_initVariables() {
 var $$pn = 0, $$pn9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add15$i = 0, $add2$i = 0, $add29$i = 0, $add3$i = 0, $add30$i = 0, $arrayidx = 0, $arrayidx3 = 0, $arrayidx7 = 0, $arrayidx7$sink = 0, $call = 0, $call2 = 0;
 var $cmp$i = 0, $cmp16$i = 0, $cmp23$i = 0, $cmp8$i = 0, $div = 0, $div10 = 0, $pnum$05$lcssa = 0, $shl = 0, $shl1 = 0, $sub = 0, $sub11 = 0, $sub11$i$sink = 0, $sub19$i$sink = 0, $tobool = 0, $tobool5 = 0, $tobool5$1 = 0, $tobool5$2 = 0, $tobool5$3 = 0, $x = 0, $y = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[98972] = 1;
 $0 = HEAP32[99853]|0;
 HEAP32[98998] = $0;
 HEAP32[98997] = 2147483647;
 HEAP32[98999] = 0;
 HEAP32[98996] = 0;
 HEAP32[98995] = 0;
 HEAP32[99000] = 65536;
 HEAP32[99001] = 65536;
 $1 = HEAP32[98977]|0;
 $shl = $1 << 16;
 $2 = HEAP32[98978]|0;
 $call = (_FixedMul($shl,$2)|0);
 HEAP32[98973] = $call;
 $3 = HEAP32[98979]|0;
 $shl1 = $3 << 16;
 $4 = HEAP32[98978]|0;
 $call2 = (_FixedMul($shl1,$4)|0);
 HEAP32[98975] = $call2;
 $5 = HEAP32[99076]|0;
 $arrayidx = (181664 + ($5<<2)|0);
 $6 = HEAP32[$arrayidx>>2]|0;
 $tobool = ($6|0)==(0);
 do {
  if ($tobool) {
   HEAP32[98986] = 181680;
   $7 = HEAP32[45416]|0;
   $tobool5 = ($7|0)==(0);
   if ($tobool5) {
    $8 = HEAP32[(181668)>>2]|0;
    $tobool5$1 = ($8|0)==(0);
    if ($tobool5$1) {
     $24 = HEAP32[(181672)>>2]|0;
     $tobool5$2 = ($24|0)==(0);
     if ($tobool5$2) {
      $25 = HEAP32[(181676)>>2]|0;
      $tobool5$3 = ($25|0)==(0);
      if ($tobool5$3) {
       $10 = 181680;
       break;
      } else {
       $pnum$05$lcssa = 3;
      }
     } else {
      $pnum$05$lcssa = 2;
     }
    } else {
     $pnum$05$lcssa = 1;
    }
   } else {
    $pnum$05$lcssa = 0;
   }
   $arrayidx7 = (181680 + (($pnum$05$lcssa*288)|0)|0);
   $arrayidx7$sink = $arrayidx7;
   label = 6;
  } else {
   $arrayidx3 = (181680 + (($5*288)|0)|0);
   $arrayidx7$sink = $arrayidx3;
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  HEAP32[98986] = $arrayidx7$sink;
  $10 = $arrayidx7$sink;
 }
 $9 = HEAP32[$10>>2]|0;
 $x = ((($9)) + 12|0);
 $11 = HEAP32[$x>>2]|0;
 $12 = HEAP32[98973]|0;
 $div = (($12|0) / 2)&-1;
 $sub = (($11) - ($div))|0;
 HEAP32[98974] = $sub;
 $y = ((($9)) + 16|0);
 $13 = HEAP32[$y>>2]|0;
 $div10 = (($call2|0) / 2)&-1;
 $sub11 = (($13) - ($div10))|0;
 HEAP32[98976] = $sub11;
 $14 = HEAP32[98995]|0;
 $15 = HEAP32[98996]|0;
 $16 = $15 | $14;
 $17 = ($16|0)==(0);
 if (!($17)) {
  HEAP32[32125] = 0;
  HEAP32[98997] = 2147483647;
 }
 $add$i = (($14) + ($sub))|0;
 HEAP32[98974] = $add$i;
 $add2$i = (($15) + ($sub11))|0;
 HEAP32[98976] = $add2$i;
 $add3$i = (($14) + ($11))|0;
 $18 = HEAP32[98991]|0;
 $cmp$i = ($add3$i|0)>($18|0);
 if ($cmp$i) {
  $$pn9 = $18;
  label = 11;
 } else {
  $19 = HEAP32[98989]|0;
  $cmp8$i = ($add3$i|0)<($19|0);
  if ($cmp8$i) {
   $$pn9 = $19;
   label = 11;
  } else {
   $22 = $add$i;
  }
 }
 if ((label|0) == 11) {
  $sub11$i$sink = (($$pn9) - ($div))|0;
  HEAP32[98974] = $sub11$i$sink;
  $22 = $sub11$i$sink;
 }
 $add15$i = (($15) + ($13))|0;
 $20 = HEAP32[98990]|0;
 $cmp16$i = ($add15$i|0)>($20|0);
 if ($cmp16$i) {
  $$pn = $20;
 } else {
  $21 = HEAP32[98988]|0;
  $cmp23$i = ($add15$i|0)<($21|0);
  if ($cmp23$i) {
   $$pn = $21;
  } else {
   $23 = $add2$i;
   $add29$i = (($22) + ($12))|0;
   HEAP32[98980] = $add29$i;
   $add30$i = (($23) + ($call2))|0;
   HEAP32[98981] = $add30$i;
   HEAP32[98982] = $22;
   HEAP32[98983] = $23;
   HEAP32[98984] = $12;
   HEAP32[98985] = $call2;
   (_ST_Responder(128508)|0);
   return;
  }
 }
 $sub19$i$sink = (($$pn) - ($div10))|0;
 HEAP32[98976] = $sub19$i$sink;
 $23 = $sub19$i$sink;
 $add29$i = (($22) + ($12))|0;
 HEAP32[98980] = $add29$i;
 $add30$i = (($23) + ($call2))|0;
 HEAP32[98981] = $add30$i;
 HEAP32[98982] = $22;
 HEAP32[98983] = $23;
 HEAP32[98984] = $12;
 HEAP32[98985] = $call2;
 (_ST_Responder(128508)|0);
 return;
}
function _AM_loadPics() {
 var $call2 = 0, $call2$1 = 0, $call2$2 = 0, $call2$3 = 0, $call2$4 = 0, $call2$5 = 0, $call2$6 = 0, $call2$7 = 0, $call2$8 = 0, $call2$9 = 0, $namebuf = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer4 = 0;
 var $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $namebuf = sp + 76|0;
 HEAP32[$vararg_buffer>>2] = 0;
 (_snprintf($namebuf,9,130008,$vararg_buffer)|0);
 $call2 = (_W_CacheLumpName($namebuf,1)|0);
 HEAP32[39664] = $call2;
 HEAP32[$vararg_buffer1>>2] = 1;
 (_snprintf($namebuf,9,130008,$vararg_buffer1)|0);
 $call2$1 = (_W_CacheLumpName($namebuf,1)|0);
 HEAP32[(158660)>>2] = $call2$1;
 HEAP32[$vararg_buffer4>>2] = 2;
 (_snprintf($namebuf,9,130008,$vararg_buffer4)|0);
 $call2$2 = (_W_CacheLumpName($namebuf,1)|0);
 HEAP32[(158664)>>2] = $call2$2;
 HEAP32[$vararg_buffer7>>2] = 3;
 (_snprintf($namebuf,9,130008,$vararg_buffer7)|0);
 $call2$3 = (_W_CacheLumpName($namebuf,1)|0);
 HEAP32[(158668)>>2] = $call2$3;
 HEAP32[$vararg_buffer10>>2] = 4;
 (_snprintf($namebuf,9,130008,$vararg_buffer10)|0);
 $call2$4 = (_W_CacheLumpName($namebuf,1)|0);
 HEAP32[(158672)>>2] = $call2$4;
 HEAP32[$vararg_buffer13>>2] = 5;
 (_snprintf($namebuf,9,130008,$vararg_buffer13)|0);
 $call2$5 = (_W_CacheLumpName($namebuf,1)|0);
 HEAP32[(158676)>>2] = $call2$5;
 HEAP32[$vararg_buffer16>>2] = 6;
 (_snprintf($namebuf,9,130008,$vararg_buffer16)|0);
 $call2$6 = (_W_CacheLumpName($namebuf,1)|0);
 HEAP32[(158680)>>2] = $call2$6;
 HEAP32[$vararg_buffer19>>2] = 7;
 (_snprintf($namebuf,9,130008,$vararg_buffer19)|0);
 $call2$7 = (_W_CacheLumpName($namebuf,1)|0);
 HEAP32[(158684)>>2] = $call2$7;
 HEAP32[$vararg_buffer22>>2] = 8;
 (_snprintf($namebuf,9,130008,$vararg_buffer22)|0);
 $call2$8 = (_W_CacheLumpName($namebuf,1)|0);
 HEAP32[(158688)>>2] = $call2$8;
 HEAP32[$vararg_buffer25>>2] = 9;
 (_snprintf($namebuf,9,130008,$vararg_buffer25)|0);
 $call2$9 = (_W_CacheLumpName($namebuf,1)|0);
 HEAP32[(158692)>>2] = $call2$9;
 STACKTOP = sp;return;
}
function _AM_unloadPics() {
 var $namebuf = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $namebuf = sp + 76|0;
 HEAP32[$vararg_buffer>>2] = 0;
 (_snprintf($namebuf,9,130008,$vararg_buffer)|0);
 _W_ReleaseLumpName($namebuf);
 HEAP32[$vararg_buffer1>>2] = 1;
 (_snprintf($namebuf,9,130008,$vararg_buffer1)|0);
 _W_ReleaseLumpName($namebuf);
 HEAP32[$vararg_buffer4>>2] = 2;
 (_snprintf($namebuf,9,130008,$vararg_buffer4)|0);
 _W_ReleaseLumpName($namebuf);
 HEAP32[$vararg_buffer7>>2] = 3;
 (_snprintf($namebuf,9,130008,$vararg_buffer7)|0);
 _W_ReleaseLumpName($namebuf);
 HEAP32[$vararg_buffer10>>2] = 4;
 (_snprintf($namebuf,9,130008,$vararg_buffer10)|0);
 _W_ReleaseLumpName($namebuf);
 HEAP32[$vararg_buffer13>>2] = 5;
 (_snprintf($namebuf,9,130008,$vararg_buffer13)|0);
 _W_ReleaseLumpName($namebuf);
 HEAP32[$vararg_buffer16>>2] = 6;
 (_snprintf($namebuf,9,130008,$vararg_buffer16)|0);
 _W_ReleaseLumpName($namebuf);
 HEAP32[$vararg_buffer19>>2] = 7;
 (_snprintf($namebuf,9,130008,$vararg_buffer19)|0);
 _W_ReleaseLumpName($namebuf);
 HEAP32[$vararg_buffer22>>2] = 8;
 (_snprintf($namebuf,9,130008,$vararg_buffer22)|0);
 _W_ReleaseLumpName($namebuf);
 HEAP32[$vararg_buffer25>>2] = 9;
 (_snprintf($namebuf,9,130008,$vararg_buffer25)|0);
 _W_ReleaseLumpName($namebuf);
 STACKTOP = sp;return;
}
function _AM_Stop() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _AM_unloadPics();
 HEAP32[98972] = 0;
 (_ST_Responder(128528)|0);
 HEAP32[32137] = 1;
 return;
}
function _AM_Start() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call$i1 = 0, $call1$i = 0, $cmp = 0, $cmp$i = 0, $cmp1 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32137]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  _AM_unloadPics();
  HEAP32[98972] = 0;
  (_ST_Responder(128528)|0);
  HEAP32[32137] = 1;
 }
 HEAP32[32137] = 0;
 $1 = HEAP32[32138]|0;
 $2 = HEAP32[99084]|0;
 $cmp = ($1|0)==($2|0);
 if ($cmp) {
  $3 = HEAP32[32139]|0;
  $4 = HEAP32[99085]|0;
  $cmp1 = ($3|0)==($4|0);
  if ($cmp1) {
   _AM_initVariables();
   _AM_loadPics();
   return;
  }
 }
 HEAP32[98977] = 320;
 HEAP32[98979] = 168;
 HEAP32[39644] = -1;
 HEAP32[(158584)>>2] = -1;
 HEAP32[(158592)>>2] = -1;
 HEAP32[(158600)>>2] = -1;
 HEAP32[(158608)>>2] = -1;
 HEAP32[(158616)>>2] = -1;
 HEAP32[(158624)>>2] = -1;
 HEAP32[(158632)>>2] = -1;
 HEAP32[(158640)>>2] = -1;
 HEAP32[(158648)>>2] = -1;
 HEAP32[98987] = 0;
 _AM_findMinMaxBoundaries();
 $5 = HEAP32[98993]|0;
 $call$i1 = (_FixedDiv($5,45875)|0);
 HEAP32[32126] = $call$i1;
 $6 = HEAP32[98994]|0;
 $cmp$i = ($call$i1|0)>($6|0);
 if ($cmp$i) {
  $7 = HEAP32[98993]|0;
  HEAP32[32126] = $7;
  $8 = $7;
 } else {
  $8 = $call$i1;
 }
 $call1$i = (_FixedDiv(65536,$8)|0);
 HEAP32[98978] = $call1$i;
 $9 = HEAP32[99084]|0;
 HEAP32[32138] = $9;
 $10 = HEAP32[99085]|0;
 HEAP32[32139] = $10;
 _AM_initVariables();
 _AM_loadPics();
 return;
}
function _AM_Responder($ev) {
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0;
 var $add$i$i = 0, $add$i28 = 0, $add2$i = 0, $add2$i$i = 0, $add4$i = 0, $add4$i31 = 0, $add8$i$i = 0, $add9$i$i = 0, $call = 0, $call$i$i = 0, $call$i25 = 0, $call$i26 = 0, $call102 = 0, $call18 = 0, $call26 = 0, $call34 = 0, $call4$i$i = 0, $call5$i = 0, $cmp1 = 0, $cmp108 = 0;
 var $cmp112 = 0, $cmp119 = 0, $cmp126 = 0, $cmp133 = 0, $cmp14 = 0, $cmp140 = 0, $cmp142 = 0, $cmp22 = 0, $cmp30 = 0, $cmp39 = 0, $cmp4 = 0, $cmp42 = 0, $cmp45 = 0, $cmp48 = 0, $cmp56 = 0, $cmp67 = 0, $cmp7 = 0, $cmp79 = 0, $cmp84 = 0, $conv = 0;
 var $data1 = 0, $data1111 = 0, $data16 = 0, $data2 = 0, $div$i = 0, $div$i$i = 0, $div$i27 = 0, $div1$i = 0, $div1$i$i = 0, $div2$i = 0, $div5$i$i = 0, $div6$i$i = 0, $lnot$ext = 0, $lnot$ext60 = 0, $lnot$ext71 = 0, $message = 0, $message74 = 0, $message82 = 0, $message86 = 0, $or$cond = 0;
 var $rc$0 = 0, $rc$1 = 0, $rem = 0, $rem$i = 0, $shl$i = 0, $shl$i$i = 0, $shl3$i$i = 0, $storemerge$i = 0, $sub = 0, $sub$i = 0, $sub$i$i = 0, $sub3$i = 0, $sub35 = 0, $sub7$i$i = 0, $tobool = 0, $tobool$i = 0, $tobool100 = 0, $tobool103 = 0, $tobool115 = 0, $tobool122 = 0;
 var $tobool129 = 0, $tobool136 = 0, $tobool16 = 0, $tobool24 = 0, $tobool32 = 0, $tobool50 = 0, $tobool58 = 0, $tobool69 = 0, $tobool9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $x$i = 0, $x$i29 = 0, $y$i = 0, $y$i30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[98972]|0;
 $tobool = ($0|0)==(0);
 $1 = HEAP32[$ev>>2]|0;
 $cmp4 = ($1|0)==(0);
 if ($tobool) {
  if (!($cmp4)) {
   $rc$1 = 0;
   STACKTOP = sp;return ($rc$1|0);
  }
  $data1 = ((($ev)) + 4|0);
  $2 = HEAP32[$data1>>2]|0;
  $3 = HEAP32[32208]|0;
  $cmp1 = ($2|0)==($3|0);
  if (!($cmp1)) {
   $rc$1 = 0;
   STACKTOP = sp;return ($rc$1|0);
  }
  _AM_Start();
  HEAP32[99152] = 0;
  $rc$1 = 1;
  STACKTOP = sp;return ($rc$1|0);
 }
 if (!($cmp4)) {
  $cmp108 = ($1|0)==(1);
  if (!($cmp108)) {
   $rc$1 = 0;
   STACKTOP = sp;return ($rc$1|0);
  }
  $data1111 = ((($ev)) + 4|0);
  $67 = HEAP32[$data1111>>2]|0;
  $68 = HEAP32[32204]|0;
  $cmp112 = ($67|0)==($68|0);
  if ($cmp112) {
   $69 = HEAP32[32125]|0;
   $tobool115 = ($69|0)==(0);
   if (!($tobool115)) {
    $rc$1 = 0;
    STACKTOP = sp;return ($rc$1|0);
   }
   HEAP32[98995] = 0;
   $rc$1 = 0;
   STACKTOP = sp;return ($rc$1|0);
  }
  $70 = HEAP32[32205]|0;
  $cmp119 = ($67|0)==($70|0);
  if ($cmp119) {
   $71 = HEAP32[32125]|0;
   $tobool122 = ($71|0)==(0);
   if (!($tobool122)) {
    $rc$1 = 0;
    STACKTOP = sp;return ($rc$1|0);
   }
   HEAP32[98995] = 0;
   $rc$1 = 0;
   STACKTOP = sp;return ($rc$1|0);
  }
  $72 = HEAP32[32202]|0;
  $cmp126 = ($67|0)==($72|0);
  if ($cmp126) {
   $73 = HEAP32[32125]|0;
   $tobool129 = ($73|0)==(0);
   if (!($tobool129)) {
    $rc$1 = 0;
    STACKTOP = sp;return ($rc$1|0);
   }
   HEAP32[98996] = 0;
   $rc$1 = 0;
   STACKTOP = sp;return ($rc$1|0);
  }
  $74 = HEAP32[32203]|0;
  $cmp133 = ($67|0)==($74|0);
  if ($cmp133) {
   $75 = HEAP32[32125]|0;
   $tobool136 = ($75|0)==(0);
   if (!($tobool136)) {
    $rc$1 = 0;
    STACKTOP = sp;return ($rc$1|0);
   }
   HEAP32[98996] = 0;
   $rc$1 = 0;
   STACKTOP = sp;return ($rc$1|0);
  } else {
   $76 = HEAP32[32207]|0;
   $cmp140 = ($67|0)==($76|0);
   $77 = HEAP32[32206]|0;
   $cmp142 = ($67|0)==($77|0);
   $or$cond = $cmp140 | $cmp142;
   if (!($or$cond)) {
    $rc$1 = 0;
    STACKTOP = sp;return ($rc$1|0);
   }
   HEAP32[99001] = 65536;
   HEAP32[99000] = 65536;
   $rc$1 = 0;
   STACKTOP = sp;return ($rc$1|0);
  }
 }
 $data16 = ((($ev)) + 4|0);
 $4 = HEAP32[$data16>>2]|0;
 $5 = HEAP32[32204]|0;
 $cmp7 = ($4|0)==($5|0);
 do {
  if ($cmp7) {
   $6 = HEAP32[32125]|0;
   $tobool9 = ($6|0)==(0);
   if ($tobool9) {
    $7 = HEAP32[98978]|0;
    $call = (_FixedMul(262144,$7)|0);
    HEAP32[98995] = $call;
    $rc$0 = 1;
   } else {
    $rc$0 = 0;
   }
  } else {
   $8 = HEAP32[32205]|0;
   $cmp14 = ($4|0)==($8|0);
   if ($cmp14) {
    $9 = HEAP32[32125]|0;
    $tobool16 = ($9|0)==(0);
    if (!($tobool16)) {
     $rc$0 = 0;
     break;
    }
    $10 = HEAP32[98978]|0;
    $call18 = (_FixedMul(262144,$10)|0);
    $sub = (0 - ($call18))|0;
    HEAP32[98995] = $sub;
    $rc$0 = 1;
    break;
   }
   $11 = HEAP32[32202]|0;
   $cmp22 = ($4|0)==($11|0);
   if ($cmp22) {
    $12 = HEAP32[32125]|0;
    $tobool24 = ($12|0)==(0);
    if (!($tobool24)) {
     $rc$0 = 0;
     break;
    }
    $13 = HEAP32[98978]|0;
    $call26 = (_FixedMul(262144,$13)|0);
    HEAP32[98996] = $call26;
    $rc$0 = 1;
    break;
   }
   $14 = HEAP32[32203]|0;
   $cmp30 = ($4|0)==($14|0);
   if ($cmp30) {
    $15 = HEAP32[32125]|0;
    $tobool32 = ($15|0)==(0);
    if (!($tobool32)) {
     $rc$0 = 0;
     break;
    }
    $16 = HEAP32[98978]|0;
    $call34 = (_FixedMul(262144,$16)|0);
    $sub35 = (0 - ($call34))|0;
    HEAP32[98996] = $sub35;
    $rc$0 = 1;
    break;
   }
   $17 = HEAP32[32207]|0;
   $cmp39 = ($4|0)==($17|0);
   if ($cmp39) {
    HEAP32[99001] = 64250;
    HEAP32[99000] = 66846;
    $rc$0 = 1;
    break;
   }
   $18 = HEAP32[32206]|0;
   $cmp42 = ($4|0)==($18|0);
   if ($cmp42) {
    HEAP32[99001] = 66846;
    HEAP32[99000] = 64250;
    $rc$0 = 1;
    break;
   }
   $19 = HEAP32[32208]|0;
   $cmp45 = ($4|0)==($19|0);
   if ($cmp45) {
    HEAP32[99002] = 0;
    HEAP32[99152] = 1;
    _AM_unloadPics();
    HEAP32[98972] = 0;
    (_ST_Responder(128528)|0);
    HEAP32[32137] = 1;
    $rc$0 = 1;
    break;
   }
   $20 = HEAP32[32209]|0;
   $cmp48 = ($4|0)==($20|0);
   if ($cmp48) {
    $21 = HEAP32[99002]|0;
    $tobool50 = ($21|0)==(0);
    $lnot$ext = $tobool50&1;
    HEAP32[99002] = $lnot$ext;
    if ($tobool50) {
     $22 = HEAP32[98974]|0;
     HEAP32[98982] = $22;
     $23 = HEAP32[98976]|0;
     HEAP32[98983] = $23;
     $24 = HEAP32[98973]|0;
     HEAP32[98984] = $24;
     $25 = HEAP32[98975]|0;
     HEAP32[98985] = $25;
     $26 = HEAP32[98993]|0;
     HEAP32[32126] = $26;
     $call$i25 = (_FixedDiv(65536,$26)|0);
     HEAP32[98978] = $call$i25;
     $27 = HEAP32[98973]|0;
     $div$i$i = (($27|0) / 2)&-1;
     $28 = HEAP32[98974]|0;
     $add$i$i = (($28) + ($div$i$i))|0;
     HEAP32[98974] = $add$i$i;
     $29 = HEAP32[98975]|0;
     $div1$i$i = (($29|0) / 2)&-1;
     $30 = HEAP32[98976]|0;
     $add2$i$i = (($30) + ($div1$i$i))|0;
     HEAP32[98976] = $add2$i$i;
     $31 = HEAP32[98977]|0;
     $shl$i$i = $31 << 16;
     $call$i$i = (_FixedMul($shl$i$i,$call$i25)|0);
     HEAP32[98973] = $call$i$i;
     $32 = HEAP32[98979]|0;
     $shl3$i$i = $32 << 16;
     $33 = HEAP32[98978]|0;
     $call4$i$i = (_FixedMul($shl3$i$i,$33)|0);
     HEAP32[98975] = $call4$i$i;
     $34 = HEAP32[98973]|0;
     $div5$i$i = (($34|0) / 2)&-1;
     $35 = HEAP32[98974]|0;
     $sub$i$i = (($35) - ($div5$i$i))|0;
     HEAP32[98974] = $sub$i$i;
     $div6$i$i = (($call4$i$i|0) / 2)&-1;
     $36 = HEAP32[98976]|0;
     $sub7$i$i = (($36) - ($div6$i$i))|0;
     HEAP32[98976] = $sub7$i$i;
     $add8$i$i = (($sub$i$i) + ($34))|0;
     HEAP32[98980] = $add8$i$i;
     $add9$i$i = (($sub7$i$i) + ($call4$i$i))|0;
     HEAP32[98981] = $add9$i$i;
     $rc$0 = 1;
     break;
    }
    $37 = HEAP32[98984]|0;
    HEAP32[98973] = $37;
    $38 = HEAP32[98985]|0;
    HEAP32[98975] = $38;
    $39 = HEAP32[32125]|0;
    $tobool$i = ($39|0)==(0);
    if ($tobool$i) {
     $40 = HEAP32[98982]|0;
     HEAP32[98974] = $40;
     $41 = HEAP32[98983]|0;
     $46 = $40;$storemerge$i = $41;
    } else {
     $42 = HEAP32[98986]|0;
     $43 = HEAP32[$42>>2]|0;
     $x$i = ((($43)) + 12|0);
     $44 = HEAP32[$x$i>>2]|0;
     $div$i = (($37|0) / 2)&-1;
     $sub$i = (($44) - ($div$i))|0;
     HEAP32[98974] = $sub$i;
     $y$i = ((($43)) + 16|0);
     $45 = HEAP32[$y$i>>2]|0;
     $div2$i = (($38|0) / 2)&-1;
     $sub3$i = (($45) - ($div2$i))|0;
     $46 = $sub$i;$storemerge$i = $sub3$i;
    }
    HEAP32[98976] = $storemerge$i;
    $add$i = (($46) + ($37))|0;
    HEAP32[98980] = $add$i;
    $add4$i = (($storemerge$i) + ($38))|0;
    HEAP32[98981] = $add4$i;
    $47 = HEAP32[98977]|0;
    $shl$i = $47 << 16;
    $call$i26 = (_FixedDiv($shl$i,$37)|0);
    HEAP32[32126] = $call$i26;
    $call5$i = (_FixedDiv(65536,$call$i26)|0);
    HEAP32[98978] = $call5$i;
    $rc$0 = 1;
    break;
   }
   $48 = HEAP32[32210]|0;
   $cmp56 = ($4|0)==($48|0);
   if ($cmp56) {
    $49 = HEAP32[32125]|0;
    $tobool58 = ($49|0)==(0);
    $lnot$ext60 = $tobool58&1;
    HEAP32[32125] = $lnot$ext60;
    HEAP32[98997] = 2147483647;
    $50 = HEAP32[98986]|0;
    $message = ((($50)) + 224|0);
    if ($tobool58) {
     HEAP32[$message>>2] = 130017;
     $rc$0 = 1;
     break;
    } else {
     HEAP32[$message>>2] = 130032;
     $rc$0 = 1;
     break;
    }
   }
   $51 = HEAP32[32211]|0;
   $cmp67 = ($4|0)==($51|0);
   if ($cmp67) {
    $52 = HEAP32[99003]|0;
    $tobool69 = ($52|0)==(0);
    $lnot$ext71 = $tobool69&1;
    HEAP32[99003] = $lnot$ext71;
    $53 = HEAP32[98986]|0;
    $message74 = ((($53)) + 224|0);
    if ($tobool69) {
     HEAP32[$message74>>2] = 130048;
     $rc$0 = 1;
     break;
    } else {
     HEAP32[$message74>>2] = 130056;
     $rc$0 = 1;
     break;
    }
   }
   $54 = HEAP32[32212]|0;
   $cmp79 = ($4|0)==($54|0);
   if ($cmp79) {
    $55 = HEAP32[98987]|0;
    HEAP32[$vararg_buffer>>2] = 130071;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $55;
    (_M_snprintf(158704,20,130065,$vararg_buffer)|0);
    $56 = HEAP32[98986]|0;
    $message82 = ((($56)) + 224|0);
    HEAP32[$message82>>2] = 158704;
    $57 = HEAP32[98974]|0;
    $58 = HEAP32[98973]|0;
    $div$i27 = (($58|0) / 2)&-1;
    $add$i28 = (($div$i27) + ($57))|0;
    $59 = HEAP32[98987]|0;
    $x$i29 = (158576 + ($59<<3)|0);
    HEAP32[$x$i29>>2] = $add$i28;
    $60 = HEAP32[98976]|0;
    $61 = HEAP32[98975]|0;
    $div1$i = (($61|0) / 2)&-1;
    $add2$i = (($div1$i) + ($60))|0;
    $y$i30 = (((158576 + ($59<<3)|0)) + 4|0);
    HEAP32[$y$i30>>2] = $add2$i;
    $add4$i31 = (($59) + 1)|0;
    $rem$i = (($add4$i31|0) % 10)&-1;
    HEAP32[98987] = $rem$i;
    $rc$0 = 1;
    break;
   }
   $62 = HEAP32[32213]|0;
   $cmp84 = ($4|0)==($62|0);
   if ($cmp84) {
    HEAP32[39644] = -1;
    HEAP32[(158584)>>2] = -1;
    HEAP32[(158592)>>2] = -1;
    HEAP32[(158600)>>2] = -1;
    HEAP32[(158608)>>2] = -1;
    HEAP32[(158616)>>2] = -1;
    HEAP32[(158624)>>2] = -1;
    HEAP32[(158632)>>2] = -1;
    HEAP32[(158640)>>2] = -1;
    HEAP32[(158648)>>2] = -1;
    HEAP32[98987] = 0;
    $63 = HEAP32[98986]|0;
    $message86 = ((($63)) + 224|0);
    HEAP32[$message86>>2] = 130083;
    $rc$0 = 1;
   } else {
    $rc$0 = 0;
   }
  }
 } while(0);
 $64 = HEAP32[99091]|0;
 $tobool100 = ($64|0)==(0);
 if (!($tobool100)) {
  $rc$1 = $rc$0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $data2 = ((($ev)) + 8|0);
 $65 = HEAP32[$data2>>2]|0;
 $conv = $65&255;
 $call102 = (_cht_CheckCheat(128448,$conv)|0);
 $tobool103 = ($call102|0)==(0);
 if ($tobool103) {
  $rc$1 = $rc$0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $66 = HEAP32[99004]|0;
 $add = (($66) + 1)|0;
 $rem = (($add|0) % 3)&-1;
 HEAP32[99004] = $rem;
 $rc$1 = 0;
 STACKTOP = sp;return ($rc$1|0);
}
function _AM_changeWindowScale() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add$i$i = 0, $add$i$i3 = 0, $add2$i = 0, $add2$i$i = 0;
 var $add2$i$i5 = 0, $add8$i = 0, $add8$i$i = 0, $add8$i$i14 = 0, $add9$i = 0, $add9$i$i = 0, $add9$i$i15 = 0, $add9$i$i15$sink = 0, $call = 0, $call$i = 0, $call$i$i = 0, $call$i$i7 = 0, $call$i1 = 0, $call$i16 = 0, $call1 = 0, $call4$i = 0, $call4$i$i = 0, $call4$i$i9 = 0, $cmp = 0, $cmp2 = 0;
 var $div$i = 0, $div$i$i = 0, $div$i$i2 = 0, $div1$i = 0, $div1$i$i = 0, $div1$i$i4 = 0, $div5$i = 0, $div5$i$i = 0, $div5$i$i10 = 0, $div6$i = 0, $div6$i$i = 0, $div6$i$i12 = 0, $shl$i = 0, $shl$i$i = 0, $shl$i$i6 = 0, $shl3$i = 0, $shl3$i$i = 0, $shl3$i$i8 = 0, $sub$i = 0, $sub$i$i = 0;
 var $sub$i$i11 = 0, $sub7$i = 0, $sub7$i$i = 0, $sub7$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32126]|0;
 $1 = HEAP32[99001]|0;
 $call = (_FixedMul($0,$1)|0);
 HEAP32[32126] = $call;
 $call1 = (_FixedDiv(65536,$call)|0);
 HEAP32[98978] = $call1;
 $2 = HEAP32[32126]|0;
 $3 = HEAP32[98993]|0;
 $cmp = ($2|0)<($3|0);
 if ($cmp) {
  HEAP32[32126] = $3;
  $call$i = (_FixedDiv(65536,$3)|0);
  HEAP32[98978] = $call$i;
  $4 = HEAP32[98973]|0;
  $div$i$i = (($4|0) / 2)&-1;
  $5 = HEAP32[98974]|0;
  $add$i$i = (($5) + ($div$i$i))|0;
  HEAP32[98974] = $add$i$i;
  $6 = HEAP32[98975]|0;
  $div1$i$i = (($6|0) / 2)&-1;
  $7 = HEAP32[98976]|0;
  $add2$i$i = (($7) + ($div1$i$i))|0;
  HEAP32[98976] = $add2$i$i;
  $8 = HEAP32[98977]|0;
  $shl$i$i = $8 << 16;
  $call$i$i = (_FixedMul($shl$i$i,$call$i)|0);
  HEAP32[98973] = $call$i$i;
  $9 = HEAP32[98979]|0;
  $shl3$i$i = $9 << 16;
  $10 = HEAP32[98978]|0;
  $call4$i$i = (_FixedMul($shl3$i$i,$10)|0);
  HEAP32[98975] = $call4$i$i;
  $11 = HEAP32[98973]|0;
  $div5$i$i = (($11|0) / 2)&-1;
  $12 = HEAP32[98974]|0;
  $sub$i$i = (($12) - ($div5$i$i))|0;
  HEAP32[98974] = $sub$i$i;
  $div6$i$i = (($call4$i$i|0) / 2)&-1;
  $13 = HEAP32[98976]|0;
  $sub7$i$i = (($13) - ($div6$i$i))|0;
  HEAP32[98976] = $sub7$i$i;
  $add8$i$i = (($sub$i$i) + ($11))|0;
  HEAP32[98980] = $add8$i$i;
  $add9$i$i = (($sub7$i$i) + ($call4$i$i))|0;
  $add9$i$i15$sink = $add9$i$i;
  HEAP32[98981] = $add9$i$i15$sink;
  return;
 }
 $14 = HEAP32[98994]|0;
 $cmp2 = ($2|0)>($14|0);
 if ($cmp2) {
  HEAP32[32126] = $14;
  $call$i1 = (_FixedDiv(65536,$14)|0);
  HEAP32[98978] = $call$i1;
  $15 = HEAP32[98973]|0;
  $div$i$i2 = (($15|0) / 2)&-1;
  $16 = HEAP32[98974]|0;
  $add$i$i3 = (($16) + ($div$i$i2))|0;
  HEAP32[98974] = $add$i$i3;
  $17 = HEAP32[98975]|0;
  $div1$i$i4 = (($17|0) / 2)&-1;
  $18 = HEAP32[98976]|0;
  $add2$i$i5 = (($18) + ($div1$i$i4))|0;
  HEAP32[98976] = $add2$i$i5;
  $19 = HEAP32[98977]|0;
  $shl$i$i6 = $19 << 16;
  $call$i$i7 = (_FixedMul($shl$i$i6,$call$i1)|0);
  HEAP32[98973] = $call$i$i7;
  $20 = HEAP32[98979]|0;
  $shl3$i$i8 = $20 << 16;
  $21 = HEAP32[98978]|0;
  $call4$i$i9 = (_FixedMul($shl3$i$i8,$21)|0);
  HEAP32[98975] = $call4$i$i9;
  $22 = HEAP32[98973]|0;
  $div5$i$i10 = (($22|0) / 2)&-1;
  $23 = HEAP32[98974]|0;
  $sub$i$i11 = (($23) - ($div5$i$i10))|0;
  HEAP32[98974] = $sub$i$i11;
  $div6$i$i12 = (($call4$i$i9|0) / 2)&-1;
  $24 = HEAP32[98976]|0;
  $sub7$i$i13 = (($24) - ($div6$i$i12))|0;
  HEAP32[98976] = $sub7$i$i13;
  $add8$i$i14 = (($sub$i$i11) + ($22))|0;
  HEAP32[98980] = $add8$i$i14;
  $add9$i$i15 = (($sub7$i$i13) + ($call4$i$i9))|0;
  $add9$i$i15$sink = $add9$i$i15;
  HEAP32[98981] = $add9$i$i15$sink;
  return;
 } else {
  $25 = HEAP32[98973]|0;
  $div$i = (($25|0) / 2)&-1;
  $26 = HEAP32[98974]|0;
  $add$i = (($26) + ($div$i))|0;
  HEAP32[98974] = $add$i;
  $27 = HEAP32[98975]|0;
  $div1$i = (($27|0) / 2)&-1;
  $28 = HEAP32[98976]|0;
  $add2$i = (($28) + ($div1$i))|0;
  HEAP32[98976] = $add2$i;
  $29 = HEAP32[98977]|0;
  $shl$i = $29 << 16;
  $call$i16 = (_FixedMul($shl$i,$call1)|0);
  HEAP32[98973] = $call$i16;
  $30 = HEAP32[98979]|0;
  $shl3$i = $30 << 16;
  $31 = HEAP32[98978]|0;
  $call4$i = (_FixedMul($shl3$i,$31)|0);
  HEAP32[98975] = $call4$i;
  $32 = HEAP32[98973]|0;
  $div5$i = (($32|0) / 2)&-1;
  $33 = HEAP32[98974]|0;
  $sub$i = (($33) - ($div5$i))|0;
  HEAP32[98974] = $sub$i;
  $div6$i = (($call4$i|0) / 2)&-1;
  $34 = HEAP32[98976]|0;
  $sub7$i = (($34) - ($div6$i))|0;
  HEAP32[98976] = $sub7$i;
  $add8$i = (($sub$i) + ($32))|0;
  HEAP32[98980] = $add8$i;
  $add9$i = (($sub7$i) + ($call4$i))|0;
  $add9$i$i15$sink = $add9$i;
  HEAP32[98981] = $add9$i$i15$sink;
  return;
 }
}
function _AM_doFollowPlayer() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $add14 = 0, $call = 0, $call11 = 0, $call5 = 0, $call8 = 0, $cmp = 0, $cmp2 = 0, $div = 0, $div12 = 0, $sub = 0, $sub13 = 0, $x = 0, $x16 = 0, $y = 0, $y18 = 0, $y7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[98997]|0;
 $1 = HEAP32[98986]|0;
 $2 = HEAP32[$1>>2]|0;
 $x = ((($2)) + 12|0);
 $3 = HEAP32[$x>>2]|0;
 $cmp = ($0|0)==($3|0);
 if ($cmp) {
  $4 = HEAP32[99005]|0;
  $y = ((($2)) + 16|0);
  $5 = HEAP32[$y>>2]|0;
  $cmp2 = ($4|0)==($5|0);
  if ($cmp2) {
   return;
  }
 }
 $6 = HEAP32[32126]|0;
 $call = (_FixedMul($3,$6)|0);
 $7 = $call & -65536;
 $8 = HEAP32[98978]|0;
 $call5 = (_FixedMul($7,$8)|0);
 $9 = HEAP32[98973]|0;
 $div = (($9|0) / 2)&-1;
 $sub = (($call5) - ($div))|0;
 HEAP32[98974] = $sub;
 $10 = HEAP32[98986]|0;
 $11 = HEAP32[$10>>2]|0;
 $y7 = ((($11)) + 16|0);
 $12 = HEAP32[$y7>>2]|0;
 $13 = HEAP32[32126]|0;
 $call8 = (_FixedMul($12,$13)|0);
 $14 = $call8 & -65536;
 $15 = HEAP32[98978]|0;
 $call11 = (_FixedMul($14,$15)|0);
 $16 = HEAP32[98975]|0;
 $div12 = (($16|0) / 2)&-1;
 $sub13 = (($call11) - ($div12))|0;
 HEAP32[98976] = $sub13;
 $17 = HEAP32[98974]|0;
 $18 = HEAP32[98973]|0;
 $add = (($18) + ($17))|0;
 HEAP32[98980] = $add;
 $add14 = (($sub13) + ($16))|0;
 HEAP32[98981] = $add14;
 $19 = HEAP32[98986]|0;
 $20 = HEAP32[$19>>2]|0;
 $x16 = ((($20)) + 12|0);
 $21 = HEAP32[$x16>>2]|0;
 HEAP32[98997] = $21;
 $y18 = ((($20)) + 16|0);
 $22 = HEAP32[$y18>>2]|0;
 HEAP32[99005] = $22;
 return;
}
function _AM_Ticker() {
 var $$pn = 0, $$pn2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add$i = 0, $add15$i = 0, $add2$i = 0, $add29$i = 0, $add3$i = 0, $add30$i = 0, $cmp = 0, $cmp$i = 0, $cmp16$i = 0, $cmp23$i = 0, $cmp8$i = 0, $div$i = 0, $div14$i = 0, $inc = 0, $sub11$i$sink = 0, $sub19$i$sink = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[98972]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  return;
 }
 $1 = HEAP32[98999]|0;
 $inc = (($1) + 1)|0;
 HEAP32[98999] = $inc;
 $2 = HEAP32[32125]|0;
 $tobool1 = ($2|0)==(0);
 if (!($tobool1)) {
  _AM_doFollowPlayer();
 }
 $3 = HEAP32[99000]|0;
 $cmp = ($3|0)==(65536);
 if (!($cmp)) {
  _AM_changeWindowScale();
 }
 $4 = HEAP32[98995]|0;
 $5 = HEAP32[98996]|0;
 $6 = $5 | $4;
 $7 = ($6|0)==(0);
 if ($7) {
  return;
 }
 HEAP32[32125] = 0;
 HEAP32[98997] = 2147483647;
 $8 = HEAP32[98974]|0;
 $add$i = (($8) + ($4))|0;
 HEAP32[98974] = $add$i;
 $9 = HEAP32[98976]|0;
 $add2$i = (($9) + ($5))|0;
 HEAP32[98976] = $add2$i;
 $10 = HEAP32[98973]|0;
 $div$i = (($10|0) / 2)&-1;
 $add3$i = (($div$i) + ($add$i))|0;
 $11 = HEAP32[98991]|0;
 $cmp$i = ($add3$i|0)>($11|0);
 if ($cmp$i) {
  $$pn2 = $11;
  label = 9;
 } else {
  $12 = HEAP32[98989]|0;
  $cmp8$i = ($add3$i|0)<($12|0);
  if ($cmp8$i) {
   $$pn2 = $12;
   label = 9;
  } else {
   $16 = $add$i;
  }
 }
 if ((label|0) == 9) {
  $sub11$i$sink = (($$pn2) - ($div$i))|0;
  HEAP32[98974] = $sub11$i$sink;
  $16 = $sub11$i$sink;
 }
 $13 = HEAP32[98975]|0;
 $div14$i = (($13|0) / 2)&-1;
 $add15$i = (($div14$i) + ($add2$i))|0;
 $14 = HEAP32[98990]|0;
 $cmp16$i = ($add15$i|0)>($14|0);
 if ($cmp16$i) {
  $$pn = $14;
  label = 12;
 } else {
  $15 = HEAP32[98988]|0;
  $cmp23$i = ($add15$i|0)<($15|0);
  if ($cmp23$i) {
   $$pn = $15;
   label = 12;
  } else {
   $17 = $add2$i;
  }
 }
 if ((label|0) == 12) {
  $sub19$i$sink = (($$pn) - ($div14$i))|0;
  HEAP32[98976] = $sub19$i$sink;
  $17 = $sub19$i$sink;
 }
 $add29$i = (($16) + ($10))|0;
 HEAP32[98980] = $add29$i;
 $add30$i = (($17) + ($13))|0;
 HEAP32[98981] = $add30$i;
 return;
}
function _AM_clipMline($ml,$fl) {
 $ml = $ml|0;
 $fl = $fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add155 = 0;
 var $add179 = 0, $add205 = 0, $add230 = 0, $and = 0, $and128 = 0, $and138 = 0, $and159 = 0, $and184 = 0, $and210 = 0, $and298 = 0, $and42 = 0, $call = 0, $call53 = 0, $call62 = 0, $call70 = 0, $cmp = 0, $cmp104 = 0, $cmp110 = 0, $cmp117 = 0, $cmp12 = 0;
 var $cmp123 = 0, $cmp19 = 0, $cmp24 = 0, $cmp240 = 0, $cmp245 = 0, $cmp251 = 0, $cmp258 = 0, $cmp264 = 0, $cmp273 = 0, $cmp279 = 0, $cmp286 = 0, $cmp292 = 0, $cmp3 = 0, $cmp31 = 0, $cmp37 = 0, $cmp7 = 0, $cmp78 = 0, $cmp84 = 0, $cmp91 = 0, $cmp97 = 0;
 var $div = 0, $div178 = 0, $div204 = 0, $div229 = 0, $mul = 0, $mul177 = 0, $mul203 = 0, $mul228 = 0, $or = 0, $or119 = 0, $or125 = 0, $or132 = 0, $or132121 = 0, $or26 = 0, $or260 = 0, $or266 = 0, $or288 = 0, $or294 = 0, $or33 = 0, $or39 = 0;
 var $or93 = 0, $or99 = 0, $outcode1$0 = 0, $outcode1$1 = 0, $outcode1$2 = 0, $outcode1$3 = 0, $outcode1$4123 = 0, $outcode1$5 = 0, $outcode1$6 = 0, $outcode2$0 = 0, $outcode2$1 = 0, $outcode2$2 = 0, $outcode2$3 = 0, $outcode2$4$outcode1$4 = 0, $outcode2$4124 = 0, $outcode2$5 = 0, $outcode2$6 = 0, $retval$0 = 0, $shr = 0, $shr54 = 0;
 var $shr63 = 0, $shr71 = 0, $spec$select = 0, $spec$select110 = 0, $spec$select111 = 0, $spec$select112 = 0, $spec$select113 = 0, $spec$select114 = 0, $spec$select115 = 0, $spec$select116 = 0, $spec$select117 = 0, $spec$select118 = 0, $spec$select119 = 0, $spec$select120 = 0, $sub = 0, $sub145 = 0, $sub150 = 0, $sub166 = 0, $sub171 = 0, $sub176 = 0;
 var $sub181 = 0, $sub191 = 0, $sub196 = 0, $sub199 = 0, $sub202 = 0, $sub217126 = 0, $sub222 = 0, $sub52 = 0, $sub55 = 0, $sub61 = 0, $sub69 = 0, $sub72 = 0, $tmp$sroa$0$0 = 0, $tmp$sroa$9$0 = 0, $tobool = 0, $tobool129 = 0, $tobool133 = 0, $tobool133122 = 0, $tobool134 = 0, $tobool139 = 0;
 var $tobool160 = 0, $tobool185 = 0, $tobool211 = 0, $tobool299 = 0, $tobool43 = 0, $x30 = 0, $x66 = 0, $y = 0, $y58 = 0, $y6 = 0, $y75 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $y = ((($ml)) + 4|0);
 $0 = HEAP32[$y>>2]|0;
 $1 = HEAP32[98981]|0;
 $cmp = ($0|0)>($1|0);
 if ($cmp) {
  $outcode1$0 = 8;
 } else {
  $2 = HEAP32[98976]|0;
  $cmp3 = ($0|0)<($2|0);
  $spec$select = $cmp3 ? 4 : 0;
  $outcode1$0 = $spec$select;
 }
 $y6 = ((($ml)) + 12|0);
 $3 = HEAP32[$y6>>2]|0;
 $cmp7 = ($3|0)>($1|0);
 if ($cmp7) {
  $outcode2$0 = 8;
 } else {
  $4 = HEAP32[98976]|0;
  $cmp12 = ($3|0)<($4|0);
  $spec$select110 = $cmp12 ? 4 : 0;
  $outcode2$0 = $spec$select110;
 }
 $and = $outcode2$0 & $outcode1$0;
 $tobool = ($and|0)==(0);
 if (!($tobool)) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $5 = HEAP32[$ml>>2]|0;
 $6 = HEAP32[98974]|0;
 $cmp19 = ($5|0)<($6|0);
 if ($cmp19) {
  $or = $outcode1$0 | 1;
  $outcode1$1 = $or;
 } else {
  $7 = HEAP32[98980]|0;
  $cmp24 = ($5|0)>($7|0);
  $or26 = $outcode1$0 | 2;
  $spec$select111 = $cmp24 ? $or26 : $outcode1$0;
  $outcode1$1 = $spec$select111;
 }
 $x30 = ((($ml)) + 8|0);
 $8 = HEAP32[$x30>>2]|0;
 $cmp31 = ($8|0)<($6|0);
 if ($cmp31) {
  $or33 = $outcode2$0 | 1;
  $outcode2$1 = $or33;
 } else {
  $9 = HEAP32[98980]|0;
  $cmp37 = ($8|0)>($9|0);
  $or39 = $outcode2$0 | 2;
  $spec$select112 = $cmp37 ? $or39 : $outcode2$0;
  $outcode2$1 = $spec$select112;
 }
 $and42 = $outcode2$1 & $outcode1$1;
 $tobool43 = ($and42|0)==(0);
 if (!($tobool43)) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $sub = (($5) - ($6))|0;
 $10 = HEAP32[32126]|0;
 $call = (_FixedMul($sub,$10)|0);
 $shr = $call >> 16;
 HEAP32[$fl>>2] = $shr;
 $11 = HEAP32[98979]|0;
 $12 = HEAP32[$y>>2]|0;
 $13 = HEAP32[98976]|0;
 $sub52 = (($12) - ($13))|0;
 $14 = HEAP32[32126]|0;
 $call53 = (_FixedMul($sub52,$14)|0);
 $shr54 = $call53 >> 16;
 $sub55 = (($11) - ($shr54))|0;
 $y58 = ((($fl)) + 4|0);
 HEAP32[$y58>>2] = $sub55;
 $15 = HEAP32[$x30>>2]|0;
 $16 = HEAP32[98974]|0;
 $sub61 = (($15) - ($16))|0;
 $17 = HEAP32[32126]|0;
 $call62 = (_FixedMul($sub61,$17)|0);
 $shr63 = $call62 >> 16;
 $x66 = ((($fl)) + 8|0);
 HEAP32[$x66>>2] = $shr63;
 $18 = HEAP32[98979]|0;
 $19 = HEAP32[$y6>>2]|0;
 $20 = HEAP32[98976]|0;
 $sub69 = (($19) - ($20))|0;
 $21 = HEAP32[32126]|0;
 $call70 = (_FixedMul($sub69,$21)|0);
 $shr71 = $call70 >> 16;
 $sub72 = (($18) - ($shr71))|0;
 $y75 = ((($fl)) + 12|0);
 HEAP32[$y75>>2] = $sub72;
 $22 = HEAP32[$y58>>2]|0;
 $cmp78 = ($22|0)<(0);
 if ($cmp78) {
  $outcode1$2 = 8;
 } else {
  $23 = HEAP32[98979]|0;
  $cmp84 = ($22|0)<($23|0);
  $spec$select113 = $cmp84 ? 0 : 4;
  $outcode1$2 = $spec$select113;
 }
 $24 = HEAP32[$fl>>2]|0;
 $cmp91 = ($24|0)<(0);
 if ($cmp91) {
  $or93 = $outcode1$2 | 1;
  $outcode1$3 = $or93;
 } else {
  $25 = HEAP32[98977]|0;
  $cmp97 = ($24|0)<($25|0);
  $or99 = $outcode1$2 | 2;
  $spec$select114 = $cmp97 ? $outcode1$2 : $or99;
  $outcode1$3 = $spec$select114;
 }
 $cmp104 = ($sub72|0)<(0);
 if ($cmp104) {
  $outcode2$2 = 8;
 } else {
  $26 = HEAP32[98979]|0;
  $cmp110 = ($sub72|0)<($26|0);
  $spec$select115 = $cmp110 ? 0 : 4;
  $outcode2$2 = $spec$select115;
 }
 $27 = HEAP32[$x66>>2]|0;
 $cmp117 = ($27|0)<(0);
 if ($cmp117) {
  $or119 = $outcode2$2 | 1;
  $outcode2$3 = $or119;
 } else {
  $28 = HEAP32[98977]|0;
  $cmp123 = ($27|0)<($28|0);
  $or125 = $outcode2$2 | 2;
  $spec$select116 = $cmp123 ? $outcode2$2 : $or125;
  $outcode2$3 = $spec$select116;
 }
 $and128 = $outcode2$3 & $outcode1$3;
 $tobool129 = ($and128|0)==(0);
 if (!($tobool129)) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $or132121 = $outcode2$3 | $outcode1$3;
 $tobool133122 = ($or132121|0)==(0);
 if ($tobool133122) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $29 = HEAP32[98979]|0;
 $sub181 = (($29) + -1)|0;
 $30 = HEAP32[98977]|0;
 $sub199 = (($30) + -1)|0;
 $31 = $22;$32 = $sub72;$33 = $27;$34 = $24;$outcode1$4123 = $outcode1$3;$outcode2$4124 = $outcode2$3;
 while(1) {
  $tobool134 = ($outcode1$4123|0)==(0);
  $outcode2$4$outcode1$4 = $tobool134 ? $outcode2$4124 : $outcode1$4123;
  $and138 = $outcode2$4$outcode1$4 & 8;
  $tobool139 = ($and138|0)==(0);
  do {
   if ($tobool139) {
    $and159 = $outcode2$4$outcode1$4 & 4;
    $tobool160 = ($and159|0)==(0);
    if (!($tobool160)) {
     $sub166 = (($31) - ($32))|0;
     $sub171 = (($33) - ($34))|0;
     $sub176 = (($31) - ($29))|0;
     $mul177 = Math_imul($sub176, $sub171)|0;
     $div178 = (($mul177|0) / ($sub166|0))&-1;
     $add179 = (($div178) + ($34))|0;
     $tmp$sroa$0$0 = $add179;$tmp$sroa$9$0 = $sub181;
     break;
    }
    $and184 = $outcode2$4$outcode1$4 & 2;
    $tobool185 = ($and184|0)==(0);
    if (!($tobool185)) {
     $sub191 = (($32) - ($31))|0;
     $sub196 = (($33) - ($34))|0;
     $sub202 = (($sub199) - ($34))|0;
     $mul203 = Math_imul($sub202, $sub191)|0;
     $div204 = (($mul203|0) / ($sub196|0))&-1;
     $add205 = (($div204) + ($31))|0;
     $tmp$sroa$0$0 = $sub199;$tmp$sroa$9$0 = $add205;
     break;
    }
    $and210 = $outcode2$4$outcode1$4 & 1;
    $tobool211 = ($and210|0)==(0);
    if ($tobool211) {
     $tmp$sroa$0$0 = 0;$tmp$sroa$9$0 = 0;
    } else {
     $sub222 = (($33) - ($34))|0;
     $sub217126 = (($31) - ($32))|0;
     $mul228 = Math_imul($sub217126, $34)|0;
     $div229 = (($mul228|0) / ($sub222|0))&-1;
     $add230 = (($div229) + ($31))|0;
     $tmp$sroa$0$0 = 0;$tmp$sroa$9$0 = $add230;
    }
   } else {
    $sub145 = (($31) - ($32))|0;
    $sub150 = (($33) - ($34))|0;
    $mul = Math_imul($sub150, $31)|0;
    $div = (($mul|0) / ($sub145|0))&-1;
    $add155 = (($div) + ($34))|0;
    $tmp$sroa$0$0 = $add155;$tmp$sroa$9$0 = 0;
   }
  } while(0);
  $cmp240 = ($outcode2$4$outcode1$4|0)==($outcode1$4123|0);
  do {
   if ($cmp240) {
    HEAP32[$fl>>2] = $tmp$sroa$0$0;
    HEAP32[$y58>>2] = $tmp$sroa$9$0;
    $cmp245 = ($tmp$sroa$9$0|0)<(0);
    $cmp251 = ($tmp$sroa$9$0|0)<($29|0);
    $spec$select117 = $cmp251 ? 0 : 4;
    $outcode1$5 = $cmp245 ? 8 : $spec$select117;
    $cmp258 = ($tmp$sroa$0$0|0)<(0);
    if ($cmp258) {
     $or260 = $outcode1$5 | 1;
     $35 = $tmp$sroa$0$0;$36 = $33;$37 = $32;$38 = $tmp$sroa$9$0;$outcode1$6 = $or260;$outcode2$6 = $outcode2$4124;
     break;
    } else {
     $cmp264 = ($tmp$sroa$0$0|0)<($30|0);
     $or266 = $outcode1$5 | 2;
     $spec$select118 = $cmp264 ? $outcode1$5 : $or266;
     $35 = $tmp$sroa$0$0;$36 = $33;$37 = $32;$38 = $tmp$sroa$9$0;$outcode1$6 = $spec$select118;$outcode2$6 = $outcode2$4124;
     break;
    }
   } else {
    HEAP32[$x66>>2] = $tmp$sroa$0$0;
    HEAP32[$y75>>2] = $tmp$sroa$9$0;
    $cmp273 = ($tmp$sroa$9$0|0)<(0);
    $cmp279 = ($tmp$sroa$9$0|0)<($29|0);
    $spec$select119 = $cmp279 ? 0 : 4;
    $outcode2$5 = $cmp273 ? 8 : $spec$select119;
    $cmp286 = ($tmp$sroa$0$0|0)<(0);
    if ($cmp286) {
     $or288 = $outcode2$5 | 1;
     $35 = $34;$36 = $tmp$sroa$0$0;$37 = $tmp$sroa$9$0;$38 = $31;$outcode1$6 = $outcode1$4123;$outcode2$6 = $or288;
     break;
    } else {
     $cmp292 = ($tmp$sroa$0$0|0)<($30|0);
     $or294 = $outcode2$5 | 2;
     $spec$select120 = $cmp292 ? $outcode2$5 : $or294;
     $35 = $34;$36 = $tmp$sroa$0$0;$37 = $tmp$sroa$9$0;$38 = $31;$outcode1$6 = $outcode1$4123;$outcode2$6 = $spec$select120;
     break;
    }
   }
  } while(0);
  $and298 = $outcode2$6 & $outcode1$6;
  $tobool299 = ($and298|0)==(0);
  if (!($tobool299)) {
   $retval$0 = 0;
   label = 43;
   break;
  }
  $or132 = $outcode2$6 | $outcode1$6;
  $tobool133 = ($or132|0)==(0);
  if ($tobool133) {
   $retval$0 = 1;
   label = 43;
   break;
  } else {
   $31 = $38;$32 = $37;$33 = $36;$34 = $35;$outcode1$4123 = $outcode1$6;$outcode2$4124 = $outcode2$6;
  }
 }
 if ((label|0) == 43) {
  return ($retval$0|0);
 }
 return (0)|0;
}
function _AM_drawFline($fl,$color) {
 $fl = $fl|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add56 = 0, $add67 = 0, $add70 = 0, $add71 = 0, $add78 = 0, $add89 = 0, $add92 = 0, $add93 = 0, $arrayidx = 0, $arrayidx57 = 0, $arrayidx79 = 0, $cmp = 0, $cmp12 = 0, $cmp32 = 0, $cmp4 = 0, $cmp41 = 0, $cmp54 = 0, $cmp60 = 0, $cmp6058 = 0, $cmp64 = 0;
 var $cmp8 = 0, $cmp82 = 0, $cmp8265 = 0, $cmp86 = 0, $cond = 0, $cond46 = 0, $conv = 0, $d$061 = 0, $d$1 = 0, $d$268 = 0, $d$3 = 0, $inc = 0, $mul = 0, $mul$op = 0, $mul47 = 0, $mul47$op = 0, $mul57 = 0, $mul5755 = 0, $mul77 = 0, $sub = 0;
 var $sub33 = 0, $sub40 = 0, $sub43 = 0, $sub56 = 0, $sub68$neg = 0, $sub73 = 0, $sub90$neg = 0, $vararg_buffer = 0, $x$060 = 0, $x$167 = 0, $x$2 = 0, $x14 = 0, $y$059 = 0, $y$1 = 0, $y$266 = 0, $y22 = 0, $y7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[$fl>>2]|0;
 $cmp = ($0|0)<(0);
 if (!($cmp)) {
  $1 = HEAP32[98977]|0;
  $cmp4 = ($0|0)<($1|0);
  if ($cmp4) {
   $y7 = ((($fl)) + 4|0);
   $2 = HEAP32[$y7>>2]|0;
   $cmp8 = ($2|0)<(0);
   if (!($cmp8)) {
    $3 = HEAP32[98979]|0;
    $cmp12 = ($2|0)<($3|0);
    if ($cmp12) {
     $x14 = ((($fl)) + 8|0);
     $4 = HEAP32[$x14>>2]|0;
     $5 = ($4>>>0)<($1>>>0);
     if ($5) {
      $y22 = ((($fl)) + 12|0);
      $6 = HEAP32[$y22>>2]|0;
      $7 = ($6>>>0)<($3>>>0);
      if ($7) {
       $sub = (($4) - ($0))|0;
       $cmp32 = ($sub|0)<(0);
       $sub33 = (0 - ($sub))|0;
       $cond = $cmp32 ? $sub33 : $sub;
       $mul = $cond << 1;
       $10 = $sub >> 31;
       $11 = $10 | 1;
       $sub40 = (($6) - ($2))|0;
       $cmp41 = ($sub40|0)<(0);
       $sub43 = (0 - ($sub40))|0;
       $cond46 = $cmp41 ? $sub43 : $sub40;
       $mul47 = $cond46 << 1;
       $12 = $sub40 >> 31;
       $13 = $12 | 1;
       $cmp54 = ($mul|0)>($mul47|0);
       $conv = $color&255;
       $14 = HEAP32[98998]|0;
       $mul5755 = Math_imul($2, $1)|0;
       $add56 = (($mul5755) + ($0))|0;
       $arrayidx57 = (($14) + ($add56)|0);
       HEAP8[$arrayidx57>>0] = $conv;
       if ($cmp54) {
        $15 = HEAP32[$x14>>2]|0;
        $cmp6058 = ($0|0)==($15|0);
        if ($cmp6058) {
         STACKTOP = sp;return;
        }
        $sub56 = (($mul47) - ($cond))|0;
        $mul$op = (0 - ($mul))|0;
        $d$061 = $sub56;$x$060 = $0;$y$059 = $2;
        while(1) {
         $cmp64 = ($d$061|0)>(-1);
         $add67 = $cmp64 ? $13 : 0;
         $y$1 = (($add67) + ($y$059))|0;
         $sub68$neg = $cmp64 ? $mul$op : 0;
         $add70 = (($x$060) + ($11))|0;
         $d$1 = (($d$061) + ($mul47))|0;
         $add71 = (($d$1) + ($sub68$neg))|0;
         $mul57 = Math_imul($y$1, $1)|0;
         $add = (($mul57) + ($add70))|0;
         $arrayidx = (($14) + ($add)|0);
         HEAP8[$arrayidx>>0] = $conv;
         $16 = HEAP32[$x14>>2]|0;
         $cmp60 = ($add70|0)==($16|0);
         if ($cmp60) {
          break;
         } else {
          $d$061 = $add71;$x$060 = $add70;$y$059 = $y$1;
         }
        }
        STACKTOP = sp;return;
       } else {
        $17 = HEAP32[$y22>>2]|0;
        $cmp8265 = ($2|0)==($17|0);
        if ($cmp8265) {
         STACKTOP = sp;return;
        }
        $sub73 = (($mul) - ($cond46))|0;
        $mul47$op = (0 - ($mul47))|0;
        $d$268 = $sub73;$x$167 = $0;$y$266 = $2;
        while(1) {
         $cmp86 = ($d$268|0)>(-1);
         $add89 = $cmp86 ? $11 : 0;
         $x$2 = (($add89) + ($x$167))|0;
         $sub90$neg = $cmp86 ? $mul47$op : 0;
         $add92 = (($y$266) + ($13))|0;
         $d$3 = (($d$268) + ($mul))|0;
         $add93 = (($d$3) + ($sub90$neg))|0;
         $mul77 = Math_imul($add92, $1)|0;
         $add78 = (($mul77) + ($x$2))|0;
         $arrayidx79 = (($14) + ($add78)|0);
         HEAP8[$arrayidx79>>0] = $conv;
         $18 = HEAP32[$y22>>2]|0;
         $cmp82 = ($add92|0)==($18|0);
         if ($cmp82) {
          break;
         } else {
          $d$268 = $add93;$x$167 = $x$2;$y$266 = $add92;
         }
        }
        STACKTOP = sp;return;
       }
      }
     }
    }
   }
  }
 }
 $8 = HEAP32[32441]|0;
 $9 = HEAP32[99006]|0;
 $inc = (($9) + 1)|0;
 HEAP32[99006] = $inc;
 HEAP32[$vararg_buffer>>2] = $9;
 (_fprintf($8,130101,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _AM_drawGrid($color) {
 $color = $color|0;
 var $$pre = 0, $$pre28 = 0, $$pre29 = 0, $$pre30 = 0, $$pre31 = 0, $$pre32 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add = 0, $add12 = 0, $add20 = 0, $add22$pre$phiZ2D = 0, $add25$pre$phiZ2D = 0, $add36 = 0;
 var $add4 = 0, $add6 = 0, $call$i = 0, $call$i20 = 0, $cmp = 0, $cmp26 = 0, $cmp29 = 0, $cmp2924 = 0, $ml = 0, $rem = 0, $rem14 = 0, $start$0 = 0, $start$1 = 0, $sub = 0, $sub13 = 0, $sub19 = 0, $sub3 = 0, $tobool = 0, $tobool$i = 0, $tobool$i21 = 0;
 var $tobool15 = 0, $x$027 = 0, $x11 = 0, $y$025 = 0, $y5 = 0, $y7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ml = sp;
 $0 = HEAP32[98974]|0;
 $1 = HEAP32[99512]|0;
 $sub = (($0) - ($1))|0;
 $rem = (($sub|0) % 8388608)&-1;
 $tobool = ($rem|0)==(0);
 $sub3 = (8388608 - ($rem))|0;
 $add = $tobool ? 0 : $sub3;
 $start$0 = (($add) + ($0))|0;
 $2 = HEAP32[98973]|0;
 $add4 = (($2) + ($0))|0;
 $3 = HEAP32[98976]|0;
 $y5 = ((($ml)) + 4|0);
 HEAP32[$y5>>2] = $3;
 $4 = HEAP32[98975]|0;
 $add6 = (($4) + ($3))|0;
 $y7 = ((($ml)) + 12|0);
 HEAP32[$y7>>2] = $add6;
 $cmp26 = ($start$0|0)<($add4|0);
 $x11 = ((($ml)) + 8|0);
 if ($cmp26) {
  $x$027 = $start$0;
  while(1) {
   HEAP32[$ml>>2] = $x$027;
   HEAP32[$x11>>2] = $x$027;
   $call$i = (_AM_clipMline($ml,396028)|0);
   $tobool$i = ($call$i|0)==(0);
   if (!($tobool$i)) {
    _AM_drawFline(396028,$color);
   }
   $add12 = (($x$027) + 8388608)|0;
   $cmp = ($add12|0)<($add4|0);
   if ($cmp) {
    $x$027 = $add12;
   } else {
    break;
   }
  }
  $$pre = HEAP32[98976]|0;
  $$pre28 = HEAP32[98975]|0;
  $$pre29 = HEAP32[98974]|0;
  $$pre30 = HEAP32[98973]|0;
  $$pre31 = (($$pre28) + ($$pre))|0;
  $$pre32 = (($$pre30) + ($$pre29))|0;
  $6 = $$pre;$7 = $$pre29;$add22$pre$phiZ2D = $$pre31;$add25$pre$phiZ2D = $$pre32;
 } else {
  $6 = $3;$7 = $0;$add22$pre$phiZ2D = $add6;$add25$pre$phiZ2D = $add4;
 }
 $5 = HEAP32[99513]|0;
 $sub13 = (($6) - ($5))|0;
 $rem14 = (($sub13|0) % 8388608)&-1;
 $tobool15 = ($rem14|0)==(0);
 $sub19 = (8388608 - ($rem14))|0;
 $add20 = $tobool15 ? 0 : $sub19;
 $start$1 = (($add20) + ($6))|0;
 HEAP32[$ml>>2] = $7;
 HEAP32[$x11>>2] = $add25$pre$phiZ2D;
 $cmp2924 = ($start$1|0)<($add22$pre$phiZ2D|0);
 if (!($cmp2924)) {
  STACKTOP = sp;return;
 }
 $y$025 = $start$1;
 while(1) {
  HEAP32[$y5>>2] = $y$025;
  HEAP32[$y7>>2] = $y$025;
  $call$i20 = (_AM_clipMline($ml,396028)|0);
  $tobool$i21 = ($call$i20|0)==(0);
  if (!($tobool$i21)) {
   _AM_drawFline(396028,$color);
  }
  $add36 = (($y$025) + 8388608)|0;
  $cmp29 = ($add36|0)<($add22$pre$phiZ2D|0);
  if ($cmp29) {
   $y$025 = $add36;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _AM_drawWalls() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add34 = 0, $add46 = 0, $add56 = 0, $add60 = 0, $and = 0, $and13 = 0, $and29 = 0, $and74 = 0, $arrayidx68 = 0, $backsector = 0, $call$i = 0, $call$i18 = 0, $call$i22 = 0, $call$i26 = 0, $call$i30 = 0, $call$i34 = 0, $call$i38 = 0, $ceilingheight = 0, $ceilingheight52 = 0;
 var $cmp = 0, $cmp22 = 0, $cmp42 = 0, $cmp43 = 0, $cmp53 = 0, $conv = 0, $flags = 0, $frontsector = 0, $i$043 = 0, $inc = 0, $or$cond17 = 0, $special = 0, $tobool = 0, $tobool$i = 0, $tobool$i19 = 0, $tobool$i23 = 0, $tobool$i27 = 0, $tobool$i31 = 0, $tobool$i35 = 0, $tobool$i39 = 0;
 var $tobool14 = 0, $tobool1551 = 0, $tobool18 = 0, $tobool30 = 0, $tobool69 = 0, $tobool75 = 0, $tobool9 = 0, $v1 = 0, $v2 = 0, $y = 0, $y7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99509]|0;
 $cmp42 = ($0|0)>(0);
 if (!($cmp42)) {
  return;
 }
 $i$043 = 0;
 while(1) {
  $1 = HEAP32[99500]|0;
  $v1 = (($1) + ($i$043<<6)|0);
  $2 = HEAP32[$v1>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  HEAP32[99011] = $3;
  $y = ((($2)) + 4|0);
  $4 = HEAP32[$y>>2]|0;
  HEAP32[(396048)>>2] = $4;
  $v2 = (((($1) + ($i$043<<6)|0)) + 4|0);
  $5 = HEAP32[$v2>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  HEAP32[(396052)>>2] = $6;
  $y7 = ((($5)) + 4|0);
  $7 = HEAP32[$y7>>2]|0;
  HEAP32[(396056)>>2] = $7;
  $8 = HEAP32[99004]|0;
  $tobool = ($8|0)==(0);
  $flags = (((($1) + ($i$043<<6)|0)) + 16|0);
  $9 = HEAP16[$flags>>1]|0;
  $conv = $9 << 16 >> 16;
  do {
   if ($tobool) {
    $and = $conv & 256;
    $tobool9 = ($and|0)==(0);
    if (!($tobool9)) {
     $and13 = $conv & 128;
     $tobool14 = ($and13|0)==(0);
     if ($tobool14) {
      $tobool1551 = 0;
      label = 6;
      break;
     } else {
      break;
     }
    }
    $17 = HEAP32[98986]|0;
    $arrayidx68 = ((($17)) + 68|0);
    $18 = HEAP32[$arrayidx68>>2]|0;
    $tobool69 = ($18|0)!=(0);
    $and74 = $conv & 128;
    $tobool75 = ($and74|0)==(0);
    $or$cond17 = $tobool75 & $tobool69;
    if ($or$cond17) {
     $call$i38 = (_AM_clipMline(396044,396028)|0);
     $tobool$i39 = ($call$i38|0)==(0);
     if (!($tobool$i39)) {
      _AM_drawFline(396028,99);
     }
    }
   } else {
    $tobool1551 = 1;
    label = 6;
   }
  } while(0);
  do {
   if ((label|0) == 6) {
    label = 0;
    $backsector = (((($1) + ($i$043<<6)|0)) + 52|0);
    $10 = HEAP32[$backsector>>2]|0;
    $tobool18 = ($10|0)==(0|0);
    if ($tobool18) {
     $call$i = (_AM_clipMline(396044,396028)|0);
     $tobool$i = ($call$i|0)==(0);
     if ($tobool$i) {
      break;
     }
     $add = (0 + 176)|0;
     _AM_drawFline(396028,$add);
     break;
    }
    $special = (((($1) + ($i$043<<6)|0)) + 18|0);
    $11 = HEAP16[$special>>1]|0;
    $cmp22 = ($11<<16>>16)==(39);
    if ($cmp22) {
     $call$i18 = (_AM_clipMline(396044,396028)|0);
     $tobool$i19 = ($call$i18|0)==(0);
     if ($tobool$i19) {
      break;
     }
     _AM_drawFline(396028,184);
     break;
    }
    $and29 = $conv & 32;
    $tobool30 = ($and29|0)==(0);
    if (!($tobool30)) {
     $call$i22 = (_AM_clipMline(396044,396028)|0);
     $tobool$i23 = ($call$i22|0)==(0);
     if ($tobool$i23) {
      break;
     }
     $add34 = (0 + 176)|0;
     _AM_drawFline(396028,$add34);
     break;
    }
    $12 = HEAP32[$10>>2]|0;
    $frontsector = (((($1) + ($i$043<<6)|0)) + 48|0);
    $13 = HEAP32[$frontsector>>2]|0;
    $14 = HEAP32[$13>>2]|0;
    $cmp43 = ($12|0)==($14|0);
    if (!($cmp43)) {
     $call$i26 = (_AM_clipMline(396044,396028)|0);
     $tobool$i27 = ($call$i26|0)==(0);
     if ($tobool$i27) {
      break;
     }
     $add46 = (0 + 64)|0;
     _AM_drawFline(396028,$add46);
     break;
    }
    $ceilingheight = ((($10)) + 4|0);
    $15 = HEAP32[$ceilingheight>>2]|0;
    $ceilingheight52 = ((($13)) + 4|0);
    $16 = HEAP32[$ceilingheight52>>2]|0;
    $cmp53 = ($15|0)==($16|0);
    if (!($cmp53)) {
     $call$i30 = (_AM_clipMline(396044,396028)|0);
     $tobool$i31 = ($call$i30|0)==(0);
     if ($tobool$i31) {
      break;
     }
     $add56 = (0 + 231)|0;
     _AM_drawFline(396028,$add56);
     break;
    }
    if ($tobool1551) {
     $call$i34 = (_AM_clipMline(396044,396028)|0);
     $tobool$i35 = ($call$i34|0)==(0);
     if (!($tobool$i35)) {
      $add60 = (0 + 96)|0;
      _AM_drawFline(396028,$add60);
     }
    }
   }
  } while(0);
  $inc = (($i$043) + 1)|0;
  $19 = HEAP32[99509]|0;
  $cmp = ($inc|0)<($19|0);
  if ($cmp) {
   $i$043 = $inc;
  } else {
   break;
  }
 }
 return;
}
function _AM_drawLineCharacter($lineguy,$lineguylines,$scale,$angle,$color,$x,$y) {
 $lineguy = $lineguy|0;
 $lineguylines = $lineguylines|0;
 $scale = $scale|0;
 $angle = $angle|0;
 $color = $color|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0;
 var $add$i29 = 0, $add29 = 0, $add61 = 0, $add64 = 0, $arrayidx$i = 0, $arrayidx$i21 = 0, $arrayidx2$i = 0, $arrayidx8$i = 0, $arrayidx8$i27 = 0, $call = 0, $call$i = 0, $call$i22 = 0, $call$i30 = 0, $call15 = 0, $call3$i = 0, $call3$i24 = 0, $call43 = 0, $call48 = 0, $call6$i = 0, $call6$i26 = 0;
 var $call9$i = 0, $call9$i28 = 0, $cmp31 = 0, $exitcond = 0, $i$032 = 0, $inc = 0, $l = 0, $shr$i = 0, $sub$i = 0, $sub$i25 = 0, $tobool = 0, $tobool$i = 0, $tobool18 = 0, $x1 = 0, $x31 = 0, $x33 = 0, $y36 = 0, $y38 = 0, $y6 = 0, $y8 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $l = sp;
 $cmp31 = ($lineguylines|0)>(0);
 if (!($cmp31)) {
  STACKTOP = sp;return;
 }
 $y8 = ((($l)) + 4|0);
 $tobool = ($scale|0)!=(0);
 $tobool18 = ($angle|0)!=(0);
 $shr$i = $angle >>> 19;
 $arrayidx2$i = (74720 + ($shr$i<<2)|0);
 $x33 = ((($l)) + 8|0);
 $y38 = ((($l)) + 12|0);
 $i$032 = 0;
 while(1) {
  $x1 = (($lineguy) + ($i$032<<4)|0);
  $0 = HEAP32[$x1>>2]|0;
  HEAP32[$l>>2] = $0;
  $y6 = (((($lineguy) + ($i$032<<4)|0)) + 4|0);
  $1 = HEAP32[$y6>>2]|0;
  HEAP32[$y8>>2] = $1;
  if ($tobool) {
   $call = (_FixedMul($scale,$0)|0);
   HEAP32[$l>>2] = $call;
   $call15 = (_FixedMul($scale,$1)|0);
   HEAP32[$y8>>2] = $call15;
   $3 = $call;$5 = $call15;
  } else {
   $3 = $0;$5 = $1;
  }
  if ($tobool18) {
   $arrayidx$i = ((82912) + ($shr$i<<2)|0);
   $2 = HEAP32[$arrayidx$i>>2]|0;
   $call$i = (_FixedMul($3,$2)|0);
   $4 = HEAP32[$arrayidx2$i>>2]|0;
   $call3$i = (_FixedMul($5,$4)|0);
   $sub$i = (($call$i) - ($call3$i))|0;
   $call6$i = (_FixedMul($3,$4)|0);
   $arrayidx8$i = ((82912) + ($shr$i<<2)|0);
   $6 = HEAP32[$arrayidx8$i>>2]|0;
   $call9$i = (_FixedMul($5,$6)|0);
   $add$i = (($call9$i) + ($call6$i))|0;
   HEAP32[$y8>>2] = $add$i;
   HEAP32[$l>>2] = $sub$i;
   $7 = $sub$i;$8 = $add$i;
  } else {
   $7 = $3;$8 = $5;
  }
  $add = (($7) + ($x))|0;
  HEAP32[$l>>2] = $add;
  $add29 = (($8) + ($y))|0;
  HEAP32[$y8>>2] = $add29;
  $x31 = (((($lineguy) + ($i$032<<4)|0)) + 8|0);
  $9 = HEAP32[$x31>>2]|0;
  HEAP32[$x33>>2] = $9;
  $y36 = (((($lineguy) + ($i$032<<4)|0)) + 12|0);
  $10 = HEAP32[$y36>>2]|0;
  HEAP32[$y38>>2] = $10;
  if ($tobool) {
   $call43 = (_FixedMul($scale,$9)|0);
   HEAP32[$x33>>2] = $call43;
   $call48 = (_FixedMul($scale,$10)|0);
   HEAP32[$y38>>2] = $call48;
   $12 = $call43;$14 = $call48;
  } else {
   $12 = $9;$14 = $10;
  }
  if ($tobool18) {
   $arrayidx$i21 = ((82912) + ($shr$i<<2)|0);
   $11 = HEAP32[$arrayidx$i21>>2]|0;
   $call$i22 = (_FixedMul($12,$11)|0);
   $13 = HEAP32[$arrayidx2$i>>2]|0;
   $call3$i24 = (_FixedMul($14,$13)|0);
   $sub$i25 = (($call$i22) - ($call3$i24))|0;
   $call6$i26 = (_FixedMul($12,$13)|0);
   $arrayidx8$i27 = ((82912) + ($shr$i<<2)|0);
   $15 = HEAP32[$arrayidx8$i27>>2]|0;
   $call9$i28 = (_FixedMul($14,$15)|0);
   $add$i29 = (($call9$i28) + ($call6$i26))|0;
   HEAP32[$y38>>2] = $add$i29;
   HEAP32[$x33>>2] = $sub$i25;
   $16 = $sub$i25;$17 = $add$i29;
  } else {
   $16 = $12;$17 = $14;
  }
  $add61 = (($16) + ($x))|0;
  HEAP32[$x33>>2] = $add61;
  $add64 = (($17) + ($y))|0;
  HEAP32[$y38>>2] = $add64;
  $call$i30 = (_AM_clipMline($l,396028)|0);
  $tobool$i = ($call$i30|0)==(0);
  if (!($tobool$i)) {
   _AM_drawFline(396028,$color);
  }
  $inc = (($i$032) + 1)|0;
  $exitcond = ($inc|0)==($lineguylines|0);
  if ($exitcond) {
   break;
  } else {
   $i$032 = $inc;
  }
 }
 STACKTOP = sp;return;
}
function _AM_drawPlayers() {
 var $$pre = 0, $$pre16 = 0, $$pre17 = 0, $$pre18 = 0, $$pre19 = 0, $$pre20 = 0, $$pre21 = 0, $$pre22 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $angle = 0, $angle29 = 0, $angle29$1 = 0, $angle29$2 = 0, $angle29$3 = 0, $cmp15 = 0, $cmp15$1 = 0, $cmp15$2 = 0;
 var $cmp15$3 = 0, $or$cond = 0, $or$cond$1 = 0, $or$cond$2 = 0, $or$cond$3 = 0, $or$cond13 = 0, $or$cond13$1 = 0, $or$cond13$2 = 0, $or$cond13$3 = 0, $or$cond13$3$not = 0, $or$cond26 = 0, $spec$select = 0, $spec$select24 = 0, $spec$select25 = 0, $spec$select27 = 0, $tobool = 0, $tobool1 = 0, $tobool12 = 0, $tobool12$1 = 0, $tobool12$2 = 0;
 var $tobool12$3 = 0, $tobool13 = 0, $tobool13$1 = 0, $tobool13$2 = 0, $tobool13$3 = 0, $tobool19 = 0, $tobool19$1 = 0, $tobool19$2 = 0, $tobool19$3 = 0, $tobool23 = 0, $tobool23$1 = 0, $tobool23$2 = 0, $tobool23$3 = 0, $x = 0, $x31 = 0, $x31$1 = 0, $x31$2 = 0, $x31$3 = 0, $y = 0, $y33 = 0;
 var $y33$1 = 0, $y33$2 = 0, $y33$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99094]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  $1 = HEAP32[99004]|0;
  $tobool1 = ($1|0)==(0);
  $2 = HEAP32[98986]|0;
  $3 = HEAP32[$2>>2]|0;
  $angle = ((($3)) + 32|0);
  $4 = HEAP32[$angle>>2]|0;
  $x = ((($3)) + 12|0);
  $5 = HEAP32[$x>>2]|0;
  $y = ((($3)) + 16|0);
  $6 = HEAP32[$y>>2]|0;
  if ($tobool1) {
   _AM_drawLineCharacter(16,7,0,$4,209,$5,$6);
   return;
  } else {
   _AM_drawLineCharacter(128,16,0,$4,209,$5,$6);
   return;
  }
 }
 $7 = HEAP32[99091]|0;
 $tobool12 = ($7|0)==(0);
 $8 = HEAP32[99090]|0;
 $tobool13 = ($8|0)!=(0);
 $or$cond = $tobool12 | $tobool13;
 $9 = HEAP32[98986]|0;
 $cmp15 = ($9|0)==(181680|0);
 $or$cond13 = $or$cond | $cmp15;
 if ($or$cond13) {
  $10 = HEAP32[45416]|0;
  $tobool19 = ($10|0)==(0);
  if ($tobool19) {
   $16 = $7;$17 = $8;$18 = $9;
  } else {
   $11 = HEAP32[(181740)>>2]|0;
   $tobool23 = ($11|0)==(0);
   $spec$select = $tobool23 ? 112 : 246;
   $12 = HEAP32[45420]|0;
   $angle29 = ((($12)) + 32|0);
   $13 = HEAP32[$angle29>>2]|0;
   $x31 = ((($12)) + 12|0);
   $14 = HEAP32[$x31>>2]|0;
   $y33 = ((($12)) + 16|0);
   $15 = HEAP32[$y33>>2]|0;
   _AM_drawLineCharacter(16,7,0,$13,$spec$select,$14,$15);
   $$pre = HEAP32[99091]|0;
   $$pre16 = HEAP32[99090]|0;
   $$pre17 = HEAP32[98986]|0;
   $16 = $$pre;$17 = $$pre16;$18 = $$pre17;
  }
 } else {
  $16 = $7;$17 = 0;$18 = $9;
 }
 $tobool12$1 = ($16|0)==(0);
 $tobool13$1 = ($17|0)!=(0);
 $or$cond$1 = $tobool12$1 | $tobool13$1;
 $cmp15$1 = ($18|0)==((181968)|0);
 $or$cond13$1 = $or$cond$1 | $cmp15$1;
 if ($or$cond13$1) {
  $19 = HEAP32[(181668)>>2]|0;
  $tobool19$1 = ($19|0)==(0);
  if ($tobool19$1) {
   $25 = $16;$26 = $17;$27 = $18;
  } else {
   $20 = HEAP32[(182028)>>2]|0;
   $tobool23$1 = ($20|0)==(0);
   $spec$select24 = $tobool23$1 ? 96 : 246;
   $21 = HEAP32[(181968)>>2]|0;
   $angle29$1 = ((($21)) + 32|0);
   $22 = HEAP32[$angle29$1>>2]|0;
   $x31$1 = ((($21)) + 12|0);
   $23 = HEAP32[$x31$1>>2]|0;
   $y33$1 = ((($21)) + 16|0);
   $24 = HEAP32[$y33$1>>2]|0;
   _AM_drawLineCharacter(16,7,0,$22,$spec$select24,$23,$24);
   $$pre18 = HEAP32[99091]|0;
   $$pre19 = HEAP32[99090]|0;
   $$pre20 = HEAP32[98986]|0;
   $25 = $$pre18;$26 = $$pre19;$27 = $$pre20;
  }
 } else {
  $25 = $16;$26 = 0;$27 = $18;
 }
 $tobool12$2 = ($25|0)==(0);
 $tobool13$2 = ($26|0)!=(0);
 $or$cond$2 = $tobool12$2 | $tobool13$2;
 $cmp15$2 = ($27|0)==((182256)|0);
 $or$cond13$2 = $or$cond$2 | $cmp15$2;
 if ($or$cond13$2) {
  $28 = HEAP32[(181672)>>2]|0;
  $tobool19$2 = ($28|0)==(0);
  if ($tobool19$2) {
   $34 = $25;$35 = $26;$36 = $27;
  } else {
   $29 = HEAP32[(182316)>>2]|0;
   $tobool23$2 = ($29|0)==(0);
   $spec$select25 = $tobool23$2 ? 64 : 246;
   $30 = HEAP32[(182256)>>2]|0;
   $angle29$2 = ((($30)) + 32|0);
   $31 = HEAP32[$angle29$2>>2]|0;
   $x31$2 = ((($30)) + 12|0);
   $32 = HEAP32[$x31$2>>2]|0;
   $y33$2 = ((($30)) + 16|0);
   $33 = HEAP32[$y33$2>>2]|0;
   _AM_drawLineCharacter(16,7,0,$31,$spec$select25,$32,$33);
   $$pre21 = HEAP32[99091]|0;
   $$pre22 = HEAP32[99090]|0;
   $$pre23 = HEAP32[98986]|0;
   $34 = $$pre21;$35 = $$pre22;$36 = $$pre23;
  }
 } else {
  $34 = $25;$35 = 0;$36 = $27;
 }
 $tobool12$3 = ($34|0)==(0);
 $tobool13$3 = ($35|0)!=(0);
 $or$cond$3 = $tobool12$3 | $tobool13$3;
 $cmp15$3 = ($36|0)==((182544)|0);
 $or$cond13$3 = $or$cond$3 | $cmp15$3;
 $or$cond13$3$not = $or$cond13$3 ^ 1;
 $37 = HEAP32[(181676)>>2]|0;
 $tobool19$3 = ($37|0)==(0);
 $or$cond26 = $tobool19$3 | $or$cond13$3$not;
 if ($or$cond26) {
  return;
 }
 $38 = HEAP32[(182604)>>2]|0;
 $tobool23$3 = ($38|0)==(0);
 $spec$select27 = $tobool23$3 ? 176 : 246;
 $39 = HEAP32[(182544)>>2]|0;
 $angle29$3 = ((($39)) + 32|0);
 $40 = HEAP32[$angle29$3>>2]|0;
 $x31$3 = ((($39)) + 12|0);
 $41 = HEAP32[$x31$3>>2]|0;
 $y33$3 = ((($39)) + 16|0);
 $42 = HEAP32[$y33$3>>2]|0;
 _AM_drawLineCharacter(16,7,0,$40,$spec$select27,$41,$42);
 return;
}
function _AM_drawMarks() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx19 = 0, $call = 0, $call6 = 0, $cmp1 = 0, $cmp10 = 0, $cmp12 = 0, $cmp14 = 0, $cmp17 = 0, $exitcond = 0, $i$015 = 0;
 var $inc = 0, $or$cond = 0, $shr = 0, $shr7 = 0, $sub = 0, $sub11 = 0, $sub16 = 0, $sub5 = 0, $sub8 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$015 = 0;
 while(1) {
  $x = (158576 + ($i$015<<3)|0);
  $0 = HEAP32[$x>>2]|0;
  $cmp1 = ($0|0)==(-1);
  if (!($cmp1)) {
   $1 = HEAP32[98974]|0;
   $sub = (($0) - ($1))|0;
   $2 = HEAP32[32126]|0;
   $call = (_FixedMul($sub,$2)|0);
   $shr = $call >> 16;
   $3 = HEAP32[98979]|0;
   $y = (((158576 + ($i$015<<3)|0)) + 4|0);
   $4 = HEAP32[$y>>2]|0;
   $5 = HEAP32[98976]|0;
   $sub5 = (($4) - ($5))|0;
   $6 = HEAP32[32126]|0;
   $call6 = (_FixedMul($sub5,$6)|0);
   $shr7 = $call6 >> 16;
   $sub8 = (($3) - ($shr7))|0;
   $cmp10 = ($call|0)>(-1);
   if ($cmp10) {
    $7 = HEAP32[98977]|0;
    $sub11 = (($7) + -5)|0;
    $cmp12 = ($shr|0)<=($sub11|0);
    $cmp14 = ($sub8|0)>(-1);
    $or$cond = $cmp14 & $cmp12;
    if ($or$cond) {
     $8 = HEAP32[98979]|0;
     $sub16 = (($8) + -6)|0;
     $cmp17 = ($sub8|0)>($sub16|0);
     if (!($cmp17)) {
      $arrayidx19 = (158656 + ($i$015<<2)|0);
      $9 = HEAP32[$arrayidx19>>2]|0;
      _V_DrawPatch($shr,$sub8,$9);
     }
    }
   }
  }
  $inc = (($i$015) + 1)|0;
  $exitcond = ($inc|0)==(10);
  if ($exitcond) {
   break;
  } else {
   $i$015 = $inc;
  }
 }
 return;
}
function _AM_Drawer() {
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0;
 var $add$i1 = 0, $angle$i = 0, $arrayidx$i = 0, $cmp = 0, $cmp$i = 0, $cmp12$i = 0, $div$i = 0, $i$013$i = 0, $inc$i = 0, $mul$i = 0, $mul$i2 = 0, $snext$i = 0, $t$0$i = 0, $t$011$i = 0, $t$09$i = 0, $thinglist$i = 0, $tobool = 0, $tobool$i = 0, $tobool1 = 0, $tobool10$i = 0;
 var $x$i = 0, $y$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[98972]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  return;
 }
 $1 = HEAP32[98998]|0;
 $2 = HEAP32[98977]|0;
 $3 = HEAP32[98979]|0;
 $mul$i = Math_imul($3, $2)|0;
 _memset(($1|0),0,($mul$i|0))|0;
 $4 = HEAP32[99003]|0;
 $tobool1 = ($4|0)==(0);
 if (!($tobool1)) {
  _AM_drawGrid(104);
 }
 _AM_drawWalls();
 _AM_drawPlayers();
 $5 = HEAP32[99004]|0;
 $cmp = ($5|0)==(2);
 if ($cmp) {
  $6 = HEAP32[99505]|0;
  $cmp12$i = ($6|0)>(0);
  if ($cmp12$i) {
   $17 = $6;$i$013$i = 0;
   while(1) {
    $7 = HEAP32[99506]|0;
    $thinglist$i = (((($7) + (($i$013$i*88)|0)|0)) + 72|0);
    $t$09$i = HEAP32[$thinglist$i>>2]|0;
    $tobool10$i = ($t$09$i|0)==(0|0);
    if ($tobool10$i) {
     $11 = $17;
    } else {
     $t$011$i = $t$09$i;
     while(1) {
      $angle$i = ((($t$011$i)) + 32|0);
      $8 = HEAP32[$angle$i>>2]|0;
      $add$i = (0 + 112)|0;
      $x$i = ((($t$011$i)) + 12|0);
      $9 = HEAP32[$x$i>>2]|0;
      $y$i = ((($t$011$i)) + 16|0);
      $10 = HEAP32[$y$i>>2]|0;
      _AM_drawLineCharacter(384,3,1048576,$8,$add$i,$9,$10);
      $snext$i = ((($t$011$i)) + 24|0);
      $t$0$i = HEAP32[$snext$i>>2]|0;
      $tobool$i = ($t$0$i|0)==(0|0);
      if ($tobool$i) {
       break;
      } else {
       $t$011$i = $t$0$i;
      }
     }
     $$pre$i = HEAP32[99505]|0;
     $11 = $$pre$i;
    }
    $inc$i = (($i$013$i) + 1)|0;
    $cmp$i = ($inc$i|0)<($11|0);
    if ($cmp$i) {
     $17 = $11;$i$013$i = $inc$i;
    } else {
     break;
    }
   }
  }
 }
 $12 = HEAP32[98998]|0;
 $13 = HEAP32[98977]|0;
 $14 = HEAP32[98979]|0;
 $add$i1 = (($14) + 1)|0;
 $mul$i2 = Math_imul($add$i1, $13)|0;
 $div$i = $mul$i2 >>> 1;
 $arrayidx$i = (($12) + ($div$i)|0);
 HEAP8[$arrayidx$i>>0] = 96;
 _AM_drawMarks();
 $15 = HEAP32[98977]|0;
 $16 = HEAP32[98979]|0;
 _V_MarkRect(0,0,$15,$16);
 return;
}
function _D_PostEvent($ev) {
 $ev = $ev|0;
 var $0 = 0, $add = 0, $arrayidx = 0, $rem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99018]|0;
 $arrayidx = (158736 + (($0*20)|0)|0);
 ;HEAP32[$arrayidx>>2]=HEAP32[$ev>>2]|0;HEAP32[$arrayidx+4>>2]=HEAP32[$ev+4>>2]|0;HEAP32[$arrayidx+8>>2]=HEAP32[$ev+8>>2]|0;HEAP32[$arrayidx+12>>2]=HEAP32[$ev+12>>2]|0;HEAP32[$arrayidx+16>>2]=HEAP32[$ev+16>>2]|0;
 $add = (($0) + 1)|0;
 $rem = (($add|0) % 64)&-1;
 HEAP32[99018] = $rem;
 return;
}
function _D_PopEvent() {
 var $0 = 0, $1 = 0, $add = 0, $arrayidx = 0, $cmp = 0, $rem = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99019]|0;
 $1 = HEAP32[99018]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $add = (($0) + 1)|0;
 $arrayidx = (158736 + (($0*20)|0)|0);
 $rem = (($add|0) % 64)&-1;
 HEAP32[99019] = $rem;
 $retval$0 = $arrayidx;
 return ($retval$0|0);
}
function _D_FindWADByName($name) {
 $name = $name|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx6$i = 0, $call = 0, $call$i = 0, $call1$i = 0, $call11 = 0, $call12 = 0, $call4 = 0, $call7$i = 0, $call8 = 0, $cmp = 0;
 var $cmp$i = 0, $cmp$i$i = 0, $cmp13 = 0, $cmp3$i = 0, $i$014 = 0, $inc = 0, $inc$i$i = 0, $retval$0 = 0, $sub$i = 0, $sub2$i = 0, $tobool = 0, $tobool$i = 0, $tobool13 = 0, $tobool5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $call = (_M_FileExists($name)|0);
 $tobool = ($call|0)==(0);
 if (!($tobool)) {
  $retval$0 = $name;
  STACKTOP = sp;return ($retval$0|0);
 }
 $0 = HEAP32[99020]|0;
 $cmp$i$i = ($0|0)<(128);
 if ($cmp$i$i) {
  $inc$i$i = (($0) + 1)|0;
  $arrayidx$i$i = (160016 + ($0<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 158551;
  HEAP32[99020] = $inc$i$i;
  $cmp13 = ($0|0)>(-1);
  if (!($cmp13)) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $i$014 = 0;
 while(1) {
  $arrayidx = (160016 + ($i$014<<2)|0);
  $1 = HEAP32[$arrayidx>>2]|0;
  $call$i = (_strlen($1)|0);
  $call1$i = (_strlen($name)|0);
  $add$i = (($call1$i) + 1)|0;
  $cmp$i = ($call$i>>>0)<($add$i>>>0);
  if ($cmp$i) {
   $3 = $1;
  } else {
   $sub$i = (($call$i) - ($call1$i))|0;
   $sub2$i = (($sub$i) + -1)|0;
   $arrayidx$i = (($1) + ($sub2$i)|0);
   $2 = HEAP8[$arrayidx$i>>0]|0;
   $cmp3$i = ($2<<24>>24)==(47);
   if ($cmp3$i) {
    $arrayidx6$i = (($1) + ($sub$i)|0);
    $call7$i = (_strcasecmp($arrayidx6$i,$name)|0);
    $tobool$i = ($call7$i|0)==(0);
    if ($tobool$i) {
     $call4 = (_M_FileExists($1)|0);
     $tobool5 = ($call4|0)==(0);
     $$pre = HEAP32[$arrayidx>>2]|0;
     if ($tobool5) {
      $3 = $$pre;
     } else {
      label = 9;
      break;
     }
    } else {
     $3 = $1;
    }
   } else {
    $3 = $1;
   }
  }
  HEAP32[$vararg_buffer>>2] = 151274;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $name;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 0;
  $call11 = (_M_StringJoin($3,$vararg_buffer)|0);
  $call12 = (_M_FileExists($call11)|0);
  $tobool13 = ($call12|0)==(0);
  if (!($tobool13)) {
   $retval$0 = $call11;
   label = 12;
   break;
  }
  _free($call11);
  $inc = (($i$014) + 1)|0;
  $4 = HEAP32[99020]|0;
  $cmp = ($inc|0)<($4|0);
  if ($cmp) {
   $i$014 = $inc;
  } else {
   $retval$0 = 0;
   label = 12;
   break;
  }
 }
 if ((label|0) == 9) {
  $call8 = (___strdup($$pre)|0);
  $retval$0 = $call8;
  STACKTOP = sp;return ($retval$0|0);
 }
 else if ((label|0) == 12) {
  STACKTOP = sp;return ($retval$0|0);
 }
 return (0)|0;
}
function _D_TryFindWADByName($filename) {
 $filename = $filename|0;
 var $call = 0, $cmp = 0, $filename$call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_D_FindWADByName($filename)|0);
 $cmp = ($call|0)==(0|0);
 $filename$call = $cmp ? $filename : $call;
 return ($filename$call|0);
}
function _D_FindIWAD($mask,$mission) {
 $mask = $mask|0;
 $mission = $mission|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $add$i$i$i = 0, $and$i = 0, $arrayidx = 0, $arrayidx$i$i = 0, $arrayidx$i$i$i = 0, $arrayidx6$i$i$i = 0, $arrayidx7 = 0, $call = 0, $call$i$i$i = 0, $call1 = 0;
 var $call1$i$i = 0, $call1$i$i$i = 0, $call11$i$i = 0, $call3$i$i = 0, $call4$i$i = 0, $call7$i$i = 0, $call7$i$i$i = 0, $call8$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp2$i = 0, $cmp3$i$i$i = 0, $cmp4$i = 0, $cmp6 = 0, $cmp616 = 0, $filename$0$i$i = 0, $i$017 = 0, $i$09$i = 0;
 var $inc = 0, $inc$i = 0, $inc$i$i = 0, $mission1$i = 0, $name$i = 0, $result$1 = 0, $retval$0$i$i = 0, $shl$i = 0, $sub$i$i$i = 0, $sub2$i$i$i = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool12$i$i = 0, $tobool2$i$i = 0, $tobool5$i$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer6 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $call = (_M_CheckParmWithArgs(130919,1)|0);
 $tobool = ($call|0)==(0);
 if (!($tobool)) {
  $0 = HEAP32[99374]|0;
  $add = (($call) + 1)|0;
  $arrayidx = (($0) + ($add<<2)|0);
  $1 = HEAP32[$arrayidx>>2]|0;
  $call1 = (_D_FindWADByName($1)|0);
  $cmp = ($call1|0)==(0|0);
  if ($cmp) {
   HEAP32[$vararg_buffer>>2] = $1;
   _I_Error(130925,$vararg_buffer);
   // unreachable;
  }
  $2 = (_IdentifyIWADByName($call1,$mask)|0);
  HEAP32[$mission>>2] = $2;
  $result$1 = $call1;
  STACKTOP = sp;return ($result$1|0);
 }
 (_puts(130951)|0);
 $3 = HEAP32[99020]|0;
 $cmp$i$i = ($3|0)<(128);
 if ($cmp$i$i) {
  $inc$i$i = (($3) + 1)|0;
  $arrayidx$i$i = (160016 + ($3<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 158551;
  HEAP32[99020] = $inc$i$i;
  $cmp616 = ($3|0)>(-1);
  if (!($cmp616)) {
   $result$1 = 0;
   STACKTOP = sp;return ($result$1|0);
  }
 }
 $i$017 = 0;
 L12: while(1) {
  $arrayidx7 = (160016 + ($i$017<<2)|0);
  $4 = HEAP32[$arrayidx7>>2]|0;
  $i$09$i = 0;
  while(1) {
   $mission1$i = (((720 + ($i$09$i<<4)|0)) + 4|0);
   $5 = HEAP32[$mission1$i>>2]|0;
   $shl$i = 1 << $5;
   $and$i = $shl$i & $mask;
   $cmp2$i = ($and$i|0)==(0);
   do {
    if (!($cmp2$i)) {
     $name$i = (720 + ($i$09$i<<4)|0);
     $6 = HEAP32[$name$i>>2]|0;
     $call$i$i$i = (_strlen($4)|0);
     $call1$i$i$i = (_strlen($6)|0);
     $add$i$i$i = (($call1$i$i$i) + 1)|0;
     $cmp$i$i$i = ($call$i$i$i>>>0)<($add$i$i$i>>>0);
     if ($cmp$i$i$i) {
      label = 15;
     } else {
      $sub$i$i$i = (($call$i$i$i) - ($call1$i$i$i))|0;
      $sub2$i$i$i = (($sub$i$i$i) + -1)|0;
      $arrayidx$i$i$i = (($4) + ($sub2$i$i$i)|0);
      $7 = HEAP8[$arrayidx$i$i$i>>0]|0;
      $cmp3$i$i$i = ($7<<24>>24)==(47);
      if ($cmp3$i$i$i) {
       $arrayidx6$i$i$i = (($4) + ($sub$i$i$i)|0);
       $call7$i$i$i = (_strcasecmp($arrayidx6$i$i$i,$6)|0);
       $tobool$i$i$i = ($call7$i$i$i|0)==(0);
       if ($tobool$i$i$i) {
        $call1$i$i = (_M_FileExists($4)|0);
        $tobool2$i$i = ($call1$i$i|0)==(0);
        if ($tobool2$i$i) {
         label = 15;
        } else {
         $call3$i$i = (___strdup($4)|0);
         $retval$0$i$i = $call3$i$i;
        }
       } else {
        label = 15;
       }
      } else {
       label = 15;
      }
     }
     if ((label|0) == 15) {
      label = 0;
      $call4$i$i = (_strcmp($4,158551)|0);
      $tobool5$i$i = ($call4$i$i|0)==(0);
      if ($tobool5$i$i) {
       $call7$i$i = (___strdup($6)|0);
       $filename$0$i$i = $call7$i$i;
      } else {
       HEAP32[$vararg_buffer1>>2] = 151274;
       $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
       HEAP32[$vararg_ptr4>>2] = $6;
       $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
       HEAP32[$vararg_ptr5>>2] = 0;
       $call8$i$i = (_M_StringJoin($4,$vararg_buffer1)|0);
       $filename$0$i$i = $call8$i$i;
      }
      HEAP32[$vararg_buffer6>>2] = $filename$0$i$i;
      (_printf(130996,$vararg_buffer6)|0);
      $call11$i$i = (_M_FileExists($filename$0$i$i)|0);
      $tobool12$i$i = ($call11$i$i|0)==(0);
      if ($tobool12$i$i) {
       _free($filename$0$i$i);
       break;
      } else {
       $retval$0$i$i = $filename$0$i$i;
      }
     }
     $cmp4$i = ($retval$0$i$i|0)==(0|0);
     if (!($cmp4$i)) {
      break L12;
     }
    }
   } while(0);
   $inc$i = (($i$09$i) + 1)|0;
   $cmp$i = ($inc$i>>>0)<(14);
   if ($cmp$i) {
    $i$09$i = $inc$i;
   } else {
    break;
   }
  }
  $inc = (($i$017) + 1)|0;
  $8 = HEAP32[99020]|0;
  $cmp6 = ($inc|0)<($8|0);
  if ($cmp6) {
   $i$017 = $inc;
  } else {
   $result$1 = 0;
   label = 24;
   break;
  }
 }
 if ((label|0) == 24) {
  STACKTOP = sp;return ($result$1|0);
 }
 HEAP32[$mission>>2] = $5;
 $result$1 = $retval$0$i$i;
 STACKTOP = sp;return ($result$1|0);
}
function _IdentifyIWADByName($name,$mask) {
 $name = $name|0;
 $mask = $mask|0;
 var $add$ptr = 0, $and = 0, $and$1 = 0, $and$10 = 0, $and$12 = 0, $and$13 = 0, $and$2 = 0, $and$3 = 0, $and$5 = 0, $and$6 = 0, $call = 0, $call8 = 0, $call8$1 = 0, $call8$10 = 0, $call8$11 = 0, $call8$12 = 0, $call8$13 = 0, $call8$2 = 0, $call8$3 = 0, $call8$4 = 0;
 var $call8$5 = 0, $call8$6 = 0, $call8$7 = 0, $call8$8 = 0, $call8$9 = 0, $cmp = 0, $cmp3 = 0, $cmp3$1 = 0, $cmp3$10 = 0, $cmp3$12 = 0, $cmp3$13 = 0, $cmp3$2 = 0, $cmp3$3 = 0, $cmp3$5 = 0, $cmp3$6 = 0, $mission$0 = 0, $spec$select = 0, $tobool = 0, $tobool$1 = 0, $tobool$10 = 0;
 var $tobool$11 = 0, $tobool$12 = 0, $tobool$13 = 0, $tobool$2 = 0, $tobool$3 = 0, $tobool$4 = 0, $tobool$5 = 0, $tobool$6 = 0, $tobool$7 = 0, $tobool$8 = 0, $tobool$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strrchr($name,47)|0);
 $cmp = ($call|0)==(0|0);
 $add$ptr = ((($call)) + 1|0);
 $spec$select = $cmp ? $name : $add$ptr;
 $and = $mask & 2;
 $cmp3 = ($and|0)==(0);
 if (!($cmp3)) {
  $call8 = (_strcasecmp($spec$select,131017)|0);
  $tobool = ($call8|0)==(0);
  if ($tobool) {
   $mission$0 = 1;
   return ($mission$0|0);
  }
 }
 $and$1 = $mask & 8;
 $cmp3$1 = ($and$1|0)==(0);
 if (!($cmp3$1)) {
  $call8$1 = (_strcasecmp($spec$select,131035)|0);
  $tobool$1 = ($call8$1|0)==(0);
  if ($tobool$1) {
   $mission$0 = 3;
   return ($mission$0|0);
  }
 }
 $and$2 = $mask & 4;
 $cmp3$2 = ($and$2|0)==(0);
 if (!($cmp3$2)) {
  $call8$2 = (_strcasecmp($spec$select,131080)|0);
  $tobool$2 = ($call8$2|0)==(0);
  if ($tobool$2) {
   $mission$0 = 2;
   return ($mission$0|0);
  }
 }
 $and$3 = $mask & 1;
 $cmp3$3 = ($and$3|0)==(0);
 if (!($cmp3$3)) {
  $call8$3 = (_strcasecmp($spec$select,131115)|0);
  $tobool$3 = ($call8$3|0)==(0);
  if ($tobool$3) {
   $mission$0 = 0;
   return ($mission$0|0);
  }
  $call8$4 = (_strcasecmp($spec$select,131129)|0);
  $tobool$4 = ($call8$4|0)==(0);
  if ($tobool$4) {
   $mission$0 = 0;
   return ($mission$0|0);
  }
 }
 $and$5 = $mask & 16;
 $cmp3$5 = ($and$5|0)==(0);
 if (!($cmp3$5)) {
  $call8$5 = (_strcasecmp($spec$select,131154)|0);
  $tobool$5 = ($call8$5|0)==(0);
  if ($tobool$5) {
   $mission$0 = 4;
   return ($mission$0|0);
  }
 }
 $and$6 = $mask & 32;
 $cmp3$6 = ($and$6|0)==(0);
 if (!($cmp3$6)) {
  $call8$6 = (_strcasecmp($spec$select,131163)|0);
  $tobool$6 = ($call8$6|0)==(0);
  if ($tobool$6) {
   $mission$0 = 5;
   return ($mission$0|0);
  }
 }
 if (!($cmp3)) {
  $call8$7 = (_strcasecmp($spec$select,131172)|0);
  $tobool$7 = ($call8$7|0)==(0);
  if ($tobool$7) {
   $mission$0 = 1;
   return ($mission$0|0);
  }
  $call8$8 = (_strcasecmp($spec$select,131183)|0);
  $tobool$8 = ($call8$8|0)==(0);
  if ($tobool$8) {
   $mission$0 = 1;
   return ($mission$0|0);
  }
 }
 if (!($cmp3$3)) {
  $call8$9 = (_strcasecmp($spec$select,131197)|0);
  $tobool$9 = ($call8$9|0)==(0);
  if ($tobool$9) {
   $mission$0 = 0;
   return ($mission$0|0);
  }
 }
 $and$10 = $mask & 64;
 $cmp3$10 = ($and$10|0)==(0);
 if (!($cmp3$10)) {
  $call8$10 = (_strcasecmp($spec$select,131211)|0);
  $tobool$10 = ($call8$10|0)==(0);
  if ($tobool$10) {
   $mission$0 = 6;
   return ($mission$0|0);
  }
  $call8$11 = (_strcasecmp($spec$select,131231)|0);
  $tobool$11 = ($call8$11|0)==(0);
  if ($tobool$11) {
   $mission$0 = 6;
   return ($mission$0|0);
  }
 }
 $and$12 = $mask & 128;
 $cmp3$12 = ($and$12|0)==(0);
 if (!($cmp3$12)) {
  $call8$12 = (_strcasecmp($spec$select,131262)|0);
  $tobool$12 = ($call8$12|0)==(0);
  if ($tobool$12) {
   $mission$0 = 7;
   return ($mission$0|0);
  }
 }
 $and$13 = $mask & 256;
 $cmp3$13 = ($and$13|0)==(0);
 if (!($cmp3$13)) {
  $call8$13 = (_strcasecmp($spec$select,131278)|0);
  $tobool$13 = ($call8$13|0)==(0);
  if ($tobool$13) {
   $mission$0 = 8;
   return ($mission$0|0);
  }
 }
 $mission$0 = 9;
 return ($mission$0|0);
}
function _D_SaveGameIWADName($gamemission) {
 $gamemission = $gamemission|0;
 var $0 = 0, $i$05$lcssa = 0, $name = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($gamemission|0) {
 case 1:  {
  $i$05$lcssa = 0;
  label = 10;
  break;
 }
 case 3:  {
  $i$05$lcssa = 1;
  label = 10;
  break;
 }
 case 2:  {
  $i$05$lcssa = 2;
  label = 10;
  break;
 }
 case 0:  {
  $i$05$lcssa = 3;
  label = 10;
  break;
 }
 case 4:  {
  $i$05$lcssa = 5;
  label = 10;
  break;
 }
 case 5:  {
  $i$05$lcssa = 6;
  label = 10;
  break;
 }
 case 6:  {
  $i$05$lcssa = 10;
  label = 10;
  break;
 }
 case 7:  {
  $i$05$lcssa = 12;
  label = 10;
  break;
 }
 case 8:  {
  $i$05$lcssa = 13;
  label = 10;
  break;
 }
 default: {
  $retval$0 = 131297;
 }
 }
 if ((label|0) == 10) {
  $name = (720 + ($i$05$lcssa<<4)|0);
  $0 = HEAP32[$name>>2]|0;
  $retval$0 = $0;
 }
 return ($retval$0|0);
}
function _D_SuggestGameName($mission,$mode) {
 $mission = $mission|0;
 $mode = $mode|0;
 var $0 = 0, $cmp2$us = 0, $cmp3 = 0, $cmp6 = 0, $cmp6$1 = 0, $cmp6$12 = 0, $cmp6$13 = 0, $cmp6$2 = 0, $cmp6$5 = 0, $cmp6$6 = 0, $description = 0, $i$0$lcssa7 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp3 = ($mode|0)==(4);
 $cmp2$us = ($mission|0)==(1);
 L1: do {
  if ($cmp3) {
   if ($cmp2$us) {
    $i$0$lcssa7 = 0;
    label = 15;
   } else {
    switch ($mission|0) {
    case 3:  {
     $i$0$lcssa7 = 1;
     label = 15;
     break L1;
     break;
    }
    case 2:  {
     $i$0$lcssa7 = 2;
     label = 15;
     break L1;
     break;
    }
    case 0:  {
     $i$0$lcssa7 = 3;
     label = 15;
     break L1;
     break;
    }
    case 4:  {
     $i$0$lcssa7 = 5;
     label = 15;
     break L1;
     break;
    }
    case 5:  {
     $i$0$lcssa7 = 6;
     label = 15;
     break L1;
     break;
    }
    case 6:  {
     $i$0$lcssa7 = 10;
     label = 15;
     break L1;
     break;
    }
    case 7:  {
     $i$0$lcssa7 = 12;
     label = 15;
     break L1;
     break;
    }
    case 8:  {
     $i$0$lcssa7 = 13;
     label = 15;
     break L1;
     break;
    }
    default: {
     $retval$0 = 131309;
     break L1;
    }
    }
   }
  } else {
   if ($cmp2$us) {
    $cmp6 = ($mode|0)==(2);
    if ($cmp6) {
     $i$0$lcssa7 = 0;
     label = 15;
     break;
    } else {
     $retval$0 = 131309;
     break;
    }
   }
   switch ($mission|0) {
   case 3:  {
    $cmp6$1 = ($mode|0)==(2);
    if ($cmp6$1) {
     $i$0$lcssa7 = 1;
     label = 15;
     break L1;
    } else {
     $retval$0 = 131309;
     break L1;
    }
    break;
   }
   case 2:  {
    $cmp6$2 = ($mode|0)==(2);
    if ($cmp6$2) {
     $i$0$lcssa7 = 2;
     label = 15;
     break L1;
    } else {
     $retval$0 = 131309;
     break L1;
    }
    break;
   }
   case 0:  {
    switch ($mode|0) {
    case 3:  {
     $i$0$lcssa7 = $mode;
     label = 15;
     break L1;
     break;
    }
    case 0:  {
     break;
    }
    default: {
     $retval$0 = 131309;
     break L1;
    }
    }
    $i$0$lcssa7 = 4;
    label = 15;
    break L1;
    break;
   }
   case 4:  {
    $cmp6$5 = ($mode|0)==(0);
    if ($cmp6$5) {
     $i$0$lcssa7 = 5;
     label = 15;
     break L1;
    } else {
     $retval$0 = 131309;
     break L1;
    }
    break;
   }
   case 5:  {
    $cmp6$6 = ($mode|0)==(2);
    if ($cmp6$6) {
     $i$0$lcssa7 = 6;
     label = 15;
     break L1;
    } else {
     $retval$0 = 131309;
     break L1;
    }
    break;
   }
   case 6:  {
    switch ($mode|0) {
    case 3:  {
     $i$0$lcssa7 = 10;
     label = 15;
     break L1;
     break;
    }
    case 0:  {
     break;
    }
    default: {
     $retval$0 = 131309;
     break L1;
    }
    }
    $i$0$lcssa7 = 11;
    label = 15;
    break L1;
    break;
   }
   case 7:  {
    $cmp6$12 = ($mode|0)==(2);
    if ($cmp6$12) {
     $i$0$lcssa7 = 12;
     label = 15;
     break L1;
    } else {
     $retval$0 = 131309;
     break L1;
    }
    break;
   }
   case 8:  {
    $cmp6$13 = ($mode|0)==(2);
    if ($cmp6$13) {
     $i$0$lcssa7 = 13;
     label = 15;
     break L1;
    } else {
     $retval$0 = 131309;
     break L1;
    }
    break;
   }
   default: {
    $retval$0 = 131309;
    break L1;
   }
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $description = (((720 + ($i$0$lcssa7<<4)|0)) + 12|0);
  $0 = HEAP32[$description>>2]|0;
  $retval$0 = $0;
 }
 return ($retval$0|0);
}
function _NetUpdate() {
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $BuildTiccmd$i = 0, $RunMenu$i = 0, $RunMenu$i15 = 0, $add$i = 0, $arrayidx19$i = 0, $call$i = 0, $cmd$i = 0, $cmp = 0, $cmp$i = 0, $cmp12$i = 0, $cmp5 = 0, $cmp512 = 0, $cmp8$i = 0, $div = 0, $div$i = 0, $div$i9 = 0;
 var $div$i914 = 0, $div$i918 = 0, $div1$i = 0, $i$01317 = 0, $inc = 0, $inc$i = 0, $mul$i = 0, $newtics$0 = 0, $rem$i = 0, $storemerge = 0, $sub = 0, $sub$i = 0, $sub11$i = 0, $sub2 = 0, $sub3 = 0, $time_ms$0$i = 0, $tobool = 0, $tobool$i = 0, $tobool$i10 = 0, $tobool$i1016 = 0;
 var $tobool2$i = 0, $tobool4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $cmd$i = sp;
 $0 = HEAP32[99021]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $call$i = (_I_GetTimeMS()|0);
 $1 = HEAP32[32142]|0;
 $tobool$i = ($1|0)==(0);
 if ($tobool$i) {
  $time_ms$0$i = $call$i;
 } else {
  $div$i = (0 / 65536)&-1;
  $add$i = (($div$i) + ($call$i))|0;
  $time_ms$0$i = $add$i;
 }
 $mul$i = ($time_ms$0$i*35)|0;
 $div1$i = (($mul$i|0) / 1000)&-1;
 $2 = HEAP32[99022]|0;
 $div = (($div1$i|0) / ($2|0))&-1;
 $3 = HEAP32[99023]|0;
 $sub = (($div) - ($3))|0;
 HEAP32[99023] = $div;
 $4 = HEAP32[99025]|0;
 $cmp = ($4|0)>($sub|0);
 $sub3 = (($4) - ($sub))|0;
 $sub2 = (($sub) - ($4))|0;
 $storemerge = $cmp ? $sub3 : 0;
 $newtics$0 = $cmp ? 0 : $sub2;
 HEAP32[99025] = $storemerge;
 $cmp512 = ($newtics$0|0)>(0);
 if (!($cmp512)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[99024]|0;
 _I_StartTic();
 $6 = HEAP32[99026]|0;
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_v[$7 & 255]();
 $8 = HEAP32[99026]|0;
 $RunMenu$i15 = ((($8)) + 12|0);
 $9 = HEAP32[$RunMenu$i15>>2]|0;
 FUNCTION_TABLE_v[$9 & 255]();
 $tobool$i1016 = (0)==(0);
 L10: do {
  if ($tobool$i1016) {
   $div$i914 = (($5|0) / ($2|0))&-1;
   $div$i918 = $div$i914;$i$01317 = 0;
   while(1) {
    $10 = HEAP32[32142]|0;
    $tobool2$i = ($10|0)==(0);
    do {
     if ($tobool2$i) {
      $12 = HEAP32[99027]|0;
      $sub11$i = (($12) - ($div$i918))|0;
      $cmp12$i = ($sub11$i|0)>(4);
      if ($cmp12$i) {
       break L10;
      } else {
       $15 = $12;
      }
     } else {
      $tobool4$i = (0)==(0);
      $11 = HEAP32[99027]|0;
      $sub$i = (($11) - ($div$i918))|0;
      if ($tobool4$i) {
       $cmp$i = ($sub$i|0)>(2);
       if ($cmp$i) {
        break L10;
       } else {
        $15 = $11;
        break;
       }
      } else {
       $cmp8$i = ($sub$i|0)>(8);
       if ($cmp8$i) {
        break L10;
       } else {
        $15 = $11;
        break;
       }
      }
     }
    } while(0);
    ;HEAP32[$cmd$i>>2]=0|0;HEAP32[$cmd$i+4>>2]=0|0;HEAP32[$cmd$i+8>>2]=0|0;HEAP32[$cmd$i+12>>2]=0|0;
    $13 = HEAP32[99026]|0;
    $BuildTiccmd$i = ((($13)) + 4|0);
    $14 = HEAP32[$BuildTiccmd$i>>2]|0;
    FUNCTION_TABLE_vii[$14 & 255]($cmd$i,$15);
    $16 = HEAP32[99027]|0;
    $rem$i = (($16|0) % 128)&-1;
    $17 = (160528 + (($rem$i*160)|0)|0);
    ;HEAP32[$17>>2]=HEAP32[$cmd$i>>2]|0;HEAP32[$17+4>>2]=HEAP32[$cmd$i+4>>2]|0;HEAP32[$17+8>>2]=HEAP32[$cmd$i+8>>2]|0;HEAP32[$17+12>>2]=HEAP32[$cmd$i+12>>2]|0;
    $arrayidx19$i = (((160528 + (($rem$i*160)|0)|0)) + 128|0);
    HEAP32[$arrayidx19$i>>2] = 1;
    $inc$i = (($16) + 1)|0;
    HEAP32[99027] = $inc$i;
    $inc = (($i$01317) + 1)|0;
    $cmp5 = ($inc|0)<($newtics$0|0);
    if (!($cmp5)) {
     break;
    }
    $$pre = HEAP32[99022]|0;
    $18 = HEAP32[99024]|0;
    $div$i9 = (($18|0) / ($$pre|0))&-1;
    _I_StartTic();
    $19 = HEAP32[99026]|0;
    $20 = HEAP32[$19>>2]|0;
    FUNCTION_TABLE_v[$20 & 255]();
    $21 = HEAP32[99026]|0;
    $RunMenu$i = ((($21)) + 12|0);
    $22 = HEAP32[$RunMenu$i>>2]|0;
    FUNCTION_TABLE_v[$22 & 255]();
    $tobool$i10 = (0)==(0);
    if ($tobool$i10) {
     $div$i918 = $div$i9;$i$01317 = $inc;
    } else {
     break L10;
    }
   }
   STACKTOP = sp;return;
  }
 } while(0);
 STACKTOP = sp;return;
}
function _D_StartGameLoop() {
 var $0 = 0, $1 = 0, $add$i = 0, $call$i = 0, $div = 0, $div$i = 0, $div1$i = 0, $mul$i = 0, $time_ms$0$i = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call$i = (_I_GetTimeMS()|0);
 $0 = HEAP32[32142]|0;
 $tobool$i = ($0|0)==(0);
 if ($tobool$i) {
  $time_ms$0$i = $call$i;
 } else {
  $div$i = (0 / 65536)&-1;
  $add$i = (($div$i) + ($call$i))|0;
  $time_ms$0$i = $add$i;
 }
 $mul$i = ($time_ms$0$i*35)|0;
 $div1$i = (($mul$i|0) / 1000)&-1;
 $1 = HEAP32[99022]|0;
 $div = (($div1$i|0) / ($1|0))&-1;
 HEAP32[99023] = $div;
 return;
}
function _D_StartNetGame($settings,$callback) {
 $settings = $settings|0;
 $callback = $callback|0;
 var $0 = 0, $arrayidx = 0, $consoleplayer = 0, $extratics = 0, $new_sync = 0, $num_players = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $consoleplayer = ((($settings)) + 64|0);
 HEAP32[$consoleplayer>>2] = 0;
 $num_players = ((($settings)) + 60|0);
 HEAP32[$num_players>>2] = 1;
 $0 = HEAP32[99028]|0;
 $arrayidx = ((($settings)) + 68|0);
 HEAP32[$arrayidx>>2] = $0;
 $new_sync = ((($settings)) + 44|0);
 HEAP32[$new_sync>>2] = 0;
 $extratics = ((($settings)) + 4|0);
 HEAP32[$extratics>>2] = 1;
 HEAP32[$settings>>2] = 1;
 HEAP32[99022] = 1;
 HEAP32[32142] = 0;
 return;
}
function _D_InitNetGame($connect_data) {
 $connect_data = $connect_data|0;
 var $0 = 0, $player_class = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _I_AtExit(123,1);
 $player_class = ((($connect_data)) + 64|0);
 $0 = HEAP32[$player_class>>2]|0;
 HEAP32[99028] = $0;
 return 0;
}
function _D_QuitNetGame() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _TryRunTics() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $BuildTiccmd$i = 0, $RunMenu$i = 0, $RunTic = 0, $add = 0, $add29 = 0, $and$i = 0, $arraydecay = 0, $arraydecay58 = 0, $arrayidx$1$i = 0, $arrayidx11$i = 0, $arrayidx19$i = 0, $buttons$1$i = 0, $buttons$2$i = 0, $buttons$3$i = 0, $buttons$4$i = 0, $buttons$5$i = 0, $buttons$6$i = 0, $buttons$7$i = 0, $buttons$i = 0;
 var $call = 0, $call36 = 0, $chatchar$1$i = 0, $chatchar$2$i = 0, $chatchar$3$i = 0, $chatchar$4$i = 0, $chatchar$5$i = 0, $chatchar$6$i = 0, $chatchar$7$i = 0, $chatchar$i = 0, $cmd$i = 0, $cmp = 0, $cmp$i = 0, $cmp10$i = 0, $cmp11 = 0, $cmp12$i = 0, $cmp30 = 0, $cmp33 = 0, $cmp39 = 0, $cmp53 = 0;
 var $cmp5348 = 0, $cmp55 = 0, $cmp7$i = 0, $cmp8$i = 0, $conv$i = 0, $counts$0 = 0, $counts$2 = 0, $dec$i = 0, $dec52 = 0, $dec52$in = 0, $div = 0, $div$i = 0, $div28 = 0, $div3 = 0, $div32 = 0, $div37 = 0, $div49 = 0, $div4961 = 0, $div54 = 0, $i$049 = 0;
 var $inc = 0, $inc$i = 0, $inc$i27 = 0, $inc61 = 0, $lowtic$0 = 0, $or$cond$i = 0, $or$cond1$i = 0, $or$cond2$i = 0, $phitmp$i = 0, $phitmp$i39 = 0, $rem = 0, $rem$i = 0, $rem62 = 0, $rem63 = 0, $result$1$i = 0, $result$1$i34 = 0, $spec$select = 0, $spec$select26 = 0, $sub = 0, $sub$i = 0;
 var $sub$sub4 = 0, $sub11$i = 0, $sub4 = 0, $sub8 = 0, $tobool = 0, $tobool$1$i = 0, $tobool$2$i = 0, $tobool$3$i = 0, $tobool$4$i = 0, $tobool$5$i = 0, $tobool$6$i = 0, $tobool$7$i = 0, $tobool$i = 0, $tobool$i28 = 0, $tobool$i30 = 0, $tobool$i32 = 0, $tobool$i42 = 0, $tobool12$i = 0, $tobool13$i = 0, $tobool15$i = 0;
 var $tobool17$i = 0, $tobool19 = 0, $tobool2$7$i = 0, $tobool2$7$i38 = 0, $tobool2$i = 0, $tobool27 = 0, $tobool2744 = 0, $tobool3$i = 0, $tobool3$i35 = 0, $tobool4$i = 0, $tobool43 = 0, $tobool4351 = 0, $tobool46 = 0, $tobool4645 = 0, $tobool5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $cmd$i = sp + 16|0;
 $call = (_I_GetTime()|0);
 $0 = HEAP32[99022]|0;
 $div = (($call|0) / ($0|0))&-1;
 $1 = HEAP32[99029]|0;
 $sub = (($div) - ($1))|0;
 HEAP32[99029] = $div;
 $2 = HEAP32[99021]|0;
 $tobool = ($2|0)==(0);
 if ($tobool) {
  _NetUpdate();
 } else {
  $3 = HEAP32[99024]|0;
  $div$i = (($3|0) / ($0|0))&-1;
  _I_StartTic();
  $4 = HEAP32[99026]|0;
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_v[$5 & 255]();
  $6 = HEAP32[99026]|0;
  $RunMenu$i = ((($6)) + 12|0);
  $7 = HEAP32[$RunMenu$i>>2]|0;
  FUNCTION_TABLE_v[$7 & 255]();
  $tobool$i = (0)==(0);
  L4: do {
   if ($tobool$i) {
    $8 = HEAP32[32142]|0;
    $tobool2$i = ($8|0)==(0);
    do {
     if ($tobool2$i) {
      $10 = HEAP32[99027]|0;
      $sub11$i = (($10) - ($div$i))|0;
      $cmp12$i = ($sub11$i|0)>(4);
      if ($cmp12$i) {
       break L4;
      } else {
       $13 = $10;
      }
     } else {
      $tobool4$i = (0)==(0);
      $9 = HEAP32[99027]|0;
      $sub$i = (($9) - ($div$i))|0;
      if ($tobool4$i) {
       $cmp$i = ($sub$i|0)>(2);
       if ($cmp$i) {
        break L4;
       } else {
        $13 = $9;
        break;
       }
      } else {
       $cmp8$i = ($sub$i|0)>(8);
       if ($cmp8$i) {
        break L4;
       } else {
        $13 = $9;
        break;
       }
      }
     }
    } while(0);
    ;HEAP32[$cmd$i>>2]=0|0;HEAP32[$cmd$i+4>>2]=0|0;HEAP32[$cmd$i+8>>2]=0|0;HEAP32[$cmd$i+12>>2]=0|0;
    $11 = HEAP32[99026]|0;
    $BuildTiccmd$i = ((($11)) + 4|0);
    $12 = HEAP32[$BuildTiccmd$i>>2]|0;
    FUNCTION_TABLE_vii[$12 & 255]($cmd$i,$13);
    $14 = HEAP32[99027]|0;
    $rem$i = (($14|0) % 128)&-1;
    $15 = (160528 + (($rem$i*160)|0)|0);
    ;HEAP32[$15>>2]=HEAP32[$cmd$i>>2]|0;HEAP32[$15+4>>2]=HEAP32[$cmd$i+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$cmd$i+8>>2]|0;HEAP32[$15+12>>2]=HEAP32[$cmd$i+12>>2]|0;
    $arrayidx19$i = (((160528 + (($rem$i*160)|0)|0)) + 128|0);
    HEAP32[$arrayidx19$i>>2] = 1;
    $inc$i = (($14) + 1)|0;
    HEAP32[99027] = $inc$i;
   }
  } while(0);
 }
 $16 = HEAP32[99027]|0;
 $17 = HEAP32[99024]|0;
 $18 = HEAP32[99022]|0;
 $div3 = (($17|0) / ($18|0))&-1;
 $sub4 = (($16) - ($div3))|0;
 $19 = HEAP32[32142]|0;
 $tobool5 = ($19|0)==(0);
 if ($tobool5) {
  $sub8 = (($sub4) + -1)|0;
  $cmp = ($sub|0)<($sub8|0);
  $add = (($sub) + 1)|0;
  $cmp11 = ($sub|0)<($sub4|0);
  $sub$sub4 = $cmp11 ? $sub : $sub4;
  $counts$0 = $cmp ? $add : $sub$sub4;
  $20 = ($counts$0|0)>(1);
  $spec$select = $20 ? $counts$0 : 1;
  $tobool19 = (0)==(0);
  if ($tobool19) {
   $counts$2 = $spec$select;
  } else {
   $21 = HEAP32[99030]|0;
   $inc$i27 = (($21) + 1)|0;
   HEAP32[99030] = $inc$i27;
   $22 = HEAP32[45252]|0;
   $tobool$i28 = ($22|0)==(0);
   if ($tobool$i28) {
    $23 = HEAP32[(181012)>>2]|0;
    $24 = HEAP32[(181016)>>2]|0;
    $25 = $24 | $23;
    $26 = HEAP32[(181020)>>2]|0;
    $27 = $25 | $26;
    $28 = HEAP32[(181024)>>2]|0;
    $29 = $27 | $28;
    $30 = HEAP32[(181028)>>2]|0;
    $31 = $29 | $30;
    $32 = HEAP32[(181032)>>2]|0;
    $33 = $31 | $32;
    $34 = HEAP32[(181036)>>2]|0;
    $35 = $33 | $34;
    $36 = ($35|0)==(0);
    if ($36) {
     $counts$2 = $spec$select;
    } else {
     $cmp7$i = ($16|0)>(0);
     if (!($cmp7$i)) {
      $37 = HEAP32[99023]|0;
      $dec$i = (($37) + -1)|0;
      HEAP32[99023] = $dec$i;
     }
     $38 = HEAP32[99031]|0;
     $cmp10$i = ($38|0)>(0);
     $conv$i = $cmp10$i&1;
     $and$i = $inc$i27 & 3;
     $arrayidx11$i = (181040 + ($and$i<<2)|0);
     HEAP32[$arrayidx11$i>>2] = $conv$i;
     HEAP32[99031] = $16;
     $39 = HEAP32[45260]|0;
     $tobool12$i = ($39|0)!=(0);
     $40 = HEAP32[(181044)>>2]|0;
     $tobool13$i = ($40|0)!=(0);
     $or$cond$i = $tobool12$i & $tobool13$i;
     $41 = HEAP32[(181048)>>2]|0;
     $tobool15$i = ($41|0)!=(0);
     $or$cond1$i = $or$cond$i & $tobool15$i;
     $42 = HEAP32[(181052)>>2]|0;
     $tobool17$i = ($42|0)!=(0);
     $or$cond2$i = $or$cond1$i & $tobool17$i;
     if ($or$cond2$i) {
      HEAP32[99025] = 1;
      $counts$2 = $spec$select;
     } else {
      $counts$2 = $spec$select;
     }
    }
   } else {
    $counts$2 = $spec$select;
   }
  }
 } else {
  $counts$2 = $sub4;
 }
 $43 = ($counts$2|0)>(1);
 $spec$select26 = $43 ? $counts$2 : 1;
 $lowtic$0 = $16;
 while(1) {
  $tobool$i30 = (0)==(0);
  if ($tobool$i30) {
   $result$1$i = 0;
   label = 23;
  } else {
   $44 = HEAP32[45252]|0;
   $45 = HEAP32[(181012)>>2]|0;
   $46 = $45 | $44;
   $47 = HEAP32[(181016)>>2]|0;
   $48 = $46 | $47;
   $49 = HEAP32[(181020)>>2]|0;
   $50 = $48 | $49;
   $51 = HEAP32[(181024)>>2]|0;
   $52 = $50 | $51;
   $53 = HEAP32[(181028)>>2]|0;
   $54 = $52 | $53;
   $55 = HEAP32[(181032)>>2]|0;
   $56 = $54 | $55;
   $57 = ($56|0)==(0);
   if ($57) {
    $58 = HEAP32[(181036)>>2]|0;
    $tobool2$7$i = ($58|0)!=(0);
    $phitmp$i = $tobool2$7$i&1;
    $result$1$i = $phitmp$i;
    label = 23;
   } else {
    label = 24;
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $tobool3$i = (0)!=(0);
   $tobool2744 = ($result$1$i|0)==(0);
   $tobool27 = $tobool2744 & $tobool3$i;
   if (!($tobool27)) {
    label = 24;
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $59 = HEAP32[99024]|0;
   $60 = HEAP32[99022]|0;
   $div28 = (($59|0) / ($60|0))&-1;
   $add29 = (($div28) + ($spec$select26))|0;
   $cmp30 = ($lowtic$0|0)<($add29|0);
   if (!($cmp30)) {
    label = 29;
    break;
   }
  }
  _NetUpdate();
  $61 = HEAP32[99027]|0;
  $62 = HEAP32[99024]|0;
  $63 = HEAP32[99022]|0;
  $div32 = (($62|0) / ($63|0))&-1;
  $cmp33 = ($61|0)<($div32|0);
  if ($cmp33) {
   label = 26;
   break;
  }
  $call36 = (_I_GetTime()|0);
  $64 = HEAP32[99022]|0;
  $div37 = (($call36|0) / ($64|0))&-1;
  $cmp39 = ($div37|0)>($div|0);
  if ($cmp39) {
   label = 61;
   break;
  }
  _I_Sleep(1);
  $lowtic$0 = $61;
 }
 if ((label|0) == 26) {
  _I_Error(131323,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 29) {
  $tobool4351 = ($spec$select26|0)==(0);
  if ($tobool4351) {
   STACKTOP = sp;return;
  }
  $65 = 0;$dec52$in = $spec$select26;
  L44: while(1) {
   $dec52 = (($dec52$in) + -1)|0;
   $tobool$i32 = ($65|0)==(0);
   do {
    if ($tobool$i32) {
     $result$1$i34 = 0;
     label = 35;
    } else {
     $66 = HEAP32[45252]|0;
     $67 = HEAP32[(181012)>>2]|0;
     $68 = $67 | $66;
     $69 = HEAP32[(181016)>>2]|0;
     $70 = $68 | $69;
     $71 = HEAP32[(181020)>>2]|0;
     $72 = $70 | $71;
     $73 = HEAP32[(181024)>>2]|0;
     $74 = $72 | $73;
     $75 = HEAP32[(181028)>>2]|0;
     $76 = $74 | $75;
     $77 = HEAP32[(181032)>>2]|0;
     $78 = $76 | $77;
     $79 = ($78|0)==(0);
     if ($79) {
      $82 = HEAP32[(181036)>>2]|0;
      $tobool2$7$i38 = ($82|0)!=(0);
      $phitmp$i39 = $tobool2$7$i38&1;
      $result$1$i34 = $phitmp$i39;
      label = 35;
      break;
     } else {
      $80 = HEAP32[99024]|0;
      $81 = HEAP32[99022]|0;
      $div4961 = (($80|0) / ($81|0))&-1;
      $rem62 = (($div4961|0) % 128)&-1;
      $100 = $80;$85 = $81;$rem63 = $rem62;
      break;
     }
    }
   } while(0);
   if ((label|0) == 35) {
    label = 0;
    $tobool3$i35 = (0)!=(0);
    $tobool4645 = ($result$1$i34|0)==(0);
    $tobool46 = $tobool4645 & $tobool3$i35;
    if ($tobool46) {
     label = 61;
     break;
    }
    $83 = HEAP32[99024]|0;
    $84 = HEAP32[99022]|0;
    $div49 = (($83|0) / ($84|0))&-1;
    $rem = (($div49|0) % 128)&-1;
    if ($tobool$i32) {
     $arrayidx$1$i = (((160528 + (($rem*160)|0)|0)) + 132|0);
     ;HEAP32[$arrayidx$1$i>>2]=0|0;HEAP32[$arrayidx$1$i+4>>2]=0|0;HEAP32[$arrayidx$1$i+8>>2]=0|0;HEAP32[$arrayidx$1$i+12>>2]=0|0;HEAP32[$arrayidx$1$i+16>>2]=0|0;HEAP32[$arrayidx$1$i+20>>2]=0|0;HEAP32[$arrayidx$1$i+24>>2]=0|0;
     $100 = $83;$85 = $84;$rem63 = $rem;
    } else {
     $100 = $83;$85 = $84;$rem63 = $rem;
    }
   }
   $cmp5348 = ($85|0)>(0);
   if ($cmp5348) {
    $arraydecay = (((160528 + (($rem63*160)|0)|0)) + 128|0);
    $arraydecay58 = (160528 + (($rem63*160)|0)|0);
    $chatchar$i = (((160528 + (($rem63*160)|0)|0)) + 4|0);
    $buttons$i = (((160528 + (($rem63*160)|0)|0)) + 5|0);
    $chatchar$1$i = (((160528 + (($rem63*160)|0)|0)) + 20|0);
    $buttons$1$i = (((160528 + (($rem63*160)|0)|0)) + 21|0);
    $chatchar$2$i = (((160528 + (($rem63*160)|0)|0)) + 36|0);
    $buttons$2$i = (((160528 + (($rem63*160)|0)|0)) + 37|0);
    $chatchar$3$i = (((160528 + (($rem63*160)|0)|0)) + 52|0);
    $buttons$3$i = (((160528 + (($rem63*160)|0)|0)) + 53|0);
    $chatchar$4$i = (((160528 + (($rem63*160)|0)|0)) + 68|0);
    $buttons$4$i = (((160528 + (($rem63*160)|0)|0)) + 69|0);
    $chatchar$5$i = (((160528 + (($rem63*160)|0)|0)) + 84|0);
    $buttons$5$i = (((160528 + (($rem63*160)|0)|0)) + 85|0);
    $chatchar$6$i = (((160528 + (($rem63*160)|0)|0)) + 100|0);
    $buttons$6$i = (((160528 + (($rem63*160)|0)|0)) + 101|0);
    $chatchar$7$i = (((160528 + (($rem63*160)|0)|0)) + 116|0);
    $buttons$7$i = (((160528 + (($rem63*160)|0)|0)) + 117|0);
    $86 = $100;$87 = $85;$i$049 = 0;
    while(1) {
     $div54 = (($86|0) / ($87|0))&-1;
     $cmp55 = ($div54|0)>($lowtic$0|0);
     if ($cmp55) {
      label = 41;
      break L44;
     }
     ;HEAP32[181008>>2]=HEAP32[$arraydecay>>2]|0;HEAP32[181008+4>>2]=HEAP32[$arraydecay+4>>2]|0;HEAP32[181008+8>>2]=HEAP32[$arraydecay+8>>2]|0;HEAP32[181008+12>>2]=HEAP32[$arraydecay+12>>2]|0;HEAP32[181008+16>>2]=HEAP32[$arraydecay+16>>2]|0;HEAP32[181008+20>>2]=HEAP32[$arraydecay+20>>2]|0;HEAP32[181008+24>>2]=HEAP32[$arraydecay+24>>2]|0;HEAP32[181008+28>>2]=HEAP32[$arraydecay+28>>2]|0;
     $88 = HEAP32[99026]|0;
     $RunTic = ((($88)) + 8|0);
     $89 = HEAP32[$RunTic>>2]|0;
     FUNCTION_TABLE_vii[$89 & 255]($arraydecay58,$arraydecay);
     $90 = HEAP32[99024]|0;
     $inc = (($90) + 1)|0;
     HEAP32[99024] = $inc;
     HEAP8[$chatchar$i>>0] = 0;
     $91 = HEAP8[$buttons$i>>0]|0;
     $tobool$i42 = ($91<<24>>24)<(0);
     if ($tobool$i42) {
      HEAP8[$buttons$i>>0] = 0;
     }
     HEAP8[$chatchar$1$i>>0] = 0;
     $92 = HEAP8[$buttons$1$i>>0]|0;
     $tobool$1$i = ($92<<24>>24)<(0);
     if ($tobool$1$i) {
      HEAP8[$buttons$1$i>>0] = 0;
     }
     HEAP8[$chatchar$2$i>>0] = 0;
     $93 = HEAP8[$buttons$2$i>>0]|0;
     $tobool$2$i = ($93<<24>>24)<(0);
     if ($tobool$2$i) {
      HEAP8[$buttons$2$i>>0] = 0;
     }
     HEAP8[$chatchar$3$i>>0] = 0;
     $94 = HEAP8[$buttons$3$i>>0]|0;
     $tobool$3$i = ($94<<24>>24)<(0);
     if ($tobool$3$i) {
      HEAP8[$buttons$3$i>>0] = 0;
     }
     HEAP8[$chatchar$4$i>>0] = 0;
     $95 = HEAP8[$buttons$4$i>>0]|0;
     $tobool$4$i = ($95<<24>>24)<(0);
     if ($tobool$4$i) {
      HEAP8[$buttons$4$i>>0] = 0;
     }
     HEAP8[$chatchar$5$i>>0] = 0;
     $96 = HEAP8[$buttons$5$i>>0]|0;
     $tobool$5$i = ($96<<24>>24)<(0);
     if ($tobool$5$i) {
      HEAP8[$buttons$5$i>>0] = 0;
     }
     HEAP8[$chatchar$6$i>>0] = 0;
     $97 = HEAP8[$buttons$6$i>>0]|0;
     $tobool$6$i = ($97<<24>>24)<(0);
     if ($tobool$6$i) {
      HEAP8[$buttons$6$i>>0] = 0;
     }
     HEAP8[$chatchar$7$i>>0] = 0;
     $98 = HEAP8[$buttons$7$i>>0]|0;
     $tobool$7$i = ($98<<24>>24)<(0);
     if ($tobool$7$i) {
      HEAP8[$buttons$7$i>>0] = 0;
     }
     $inc61 = (($i$049) + 1)|0;
     $99 = HEAP32[99022]|0;
     $cmp53 = ($inc61|0)<($99|0);
     if ($cmp53) {
      $86 = $inc;$87 = $99;$i$049 = $inc61;
     } else {
      break;
     }
    }
   }
   _NetUpdate();
   $tobool43 = ($dec52|0)==(0);
   if ($tobool43) {
    label = 61;
    break;
   }
   $65 = 0;$dec52$in = $dec52;
  }
  if ((label|0) == 41) {
   _I_Error(131352,$vararg_buffer1);
   // unreachable;
  }
  else if ((label|0) == 61) {
   STACKTOP = sp;return;
  }
 }
 else if ((label|0) == 61) {
  STACKTOP = sp;return;
 }
}
function _D_RegisterLoopCallbacks($i) {
 $i = $i|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99026] = $i;
 return;
}
function _D_ProcessEvents() {
 var $0 = 0, $call = 0, $call1 = 0, $call3 = 0, $call6 = 0, $cmp = 0, $cmp4 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99033]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  return;
 }
 $call3 = (_D_PopEvent()|0);
 $cmp4 = ($call3|0)==(0|0);
 if ($cmp4) {
  return;
 }
 $call6 = $call3;
 while(1) {
  $call1 = (_M_Responder($call6)|0);
  $tobool2 = ($call1|0)==(0);
  if ($tobool2) {
   (_G_Responder($call6)|0);
  }
  $call = (_D_PopEvent()|0);
  $cmp = ($call|0)==(0|0);
  if ($cmp) {
   break;
  } else {
   $call6 = $call;
  }
 }
 return;
}
function _display_wipe() {
 var $0 = 0, $1 = 0, $2 = 0, $call2 = 0, $call4 = 0, $call6 = 0, $cmp = 0, $sub = 0, $sub5 = 0, $tobool = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99034]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  $1 = HEAP32[99867]|0;
  $cmp = ($1|0)==(0);
  if ($cmp) {
   return;
  }
  HEAP32[99034] = 1;
  (_wipe_EndScreen(0,0,320,200)|0);
  $call2 = (_I_GetTime()|0);
  $sub = (($call2) + -1)|0;
  HEAP32[99051] = $sub;
  return;
 } else {
  $call4 = (_I_GetTime()|0);
  $2 = HEAP32[99051]|0;
  $sub5 = (($call4) - ($2))|0;
  HEAP32[99051] = $call4;
  $call6 = (_wipe_ScreenWipe(1,0,0,320,200,$sub5)|0);
  _M_Drawer();
  _I_FinishUpdate();
  $tobool7 = ($call6|0)==(0);
  if ($tobool7) {
   return;
  }
  HEAP32[99034] = 0;
  return;
 }
}
function _D_Display() {
 var $$pr = 0, $$pr20 = 0, $$pre = 0, $$pre23 = 0, $$pre24 = 0, $$pre25 = 0, $$pre26 = 0, $$pre27 = 0, $$pre28 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add90 = 0;
 var $arrayidx = 0, $call$i = 0, $call53 = 0, $call91 = 0, $cmp = 0, $cmp17 = 0, $cmp27 = 0, $cmp28 = 0, $cmp41 = 0, $cmp47 = 0, $cmp50 = 0, $cmp55 = 0, $cmp58 = 0, $cmp6 = 0, $cmp67 = 0, $conv = 0, $conv29 = 0, $dec = 0, $div = 0, $or$cond = 0;
 var $or$cond1 = 0, $or$cond11 = 0, $or$cond2 = 0, $or$cond4 = 0, $or$cond5 = 0, $or$cond6 = 0, $or$cond7 = 0, $or$cond9 = 0, $redrawsbar$0 = 0, $spec$select = 0, $sub = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool13 = 0, $tobool16 = 0, $tobool19 = 0, $tobool22 = 0, $tobool24 = 0, $tobool38 = 0;
 var $tobool44 = 0, $tobool7 = 0, $tobool74 = 0, $tobool77 = 0, $tobool81 = 0, $tobool84 = 0, $tobool86 = 0, $tobool93 = 0, $wipe$0 = 0, $y$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99165]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  return;
 }
 $1 = HEAP32[99621]|0;
 $tobool1 = ($1|0)==(0);
 if (!($tobool1)) {
  _R_ExecuteSetViewSize();
  HEAP32[32145] = -1;
  HEAP32[99052] = 3;
 }
 $2 = HEAP32[99077]|0;
 $3 = HEAP32[32144]|0;
 $cmp = ($2|0)==($3|0);
 if ($cmp) {
  $4 = $2;$wipe$0 = 0;
 } else {
  (_wipe_StartScreen(0,0,320,200)|0);
  $$pre = HEAP32[99077]|0;
  $4 = $$pre;$wipe$0 = 1;
 }
 $cmp6 = ($4|0)==(0);
 $5 = HEAP32[99024]|0;
 $tobool7 = ($5|0)!=(0);
 $or$cond = $cmp6 & $tobool7;
 if ($or$cond) {
  _HU_Erase();
  $$pr = HEAP32[99077]|0;
  $6 = $$pr;
 } else {
  $6 = $4;
 }
 switch ($6|0) {
 case 0:  {
  $7 = HEAP32[99024]|0;
  $tobool10 = ($7|0)==(0);
  if (!($tobool10)) {
   $8 = HEAP32[98972]|0;
   $tobool13 = ($8|0)==(0);
   if (!($tobool13)) {
    _AM_Drawer();
   }
   $tobool16 = ($wipe$0|0)==(0);
   $9 = HEAP32[99597]|0;
   if ($tobool16) {
    $cmp17 = ($9|0)!=(200);
    $10 = HEAP32[99053]|0;
    $tobool19 = ($10|0)!=(0);
    $or$cond1 = $cmp17 & $tobool19;
    if ($or$cond1) {
     label = 14;
    } else {
     $redrawsbar$0 = 0;
    }
   } else {
    label = 14;
   }
   if ((label|0) == 14) {
    $redrawsbar$0 = 1;
   }
   $11 = HEAP32[99054]|0;
   $tobool22 = ($11|0)==(0);
   $12 = HEAP32[99391]|0;
   $tobool24 = ($12|0)!=(0);
   $or$cond2 = $tobool22 | $tobool24;
   $spec$select = $or$cond2 ? $redrawsbar$0 : 1;
   $cmp27 = ($9|0)==(200);
   $conv = $cmp27&1;
   _ST_Drawer($conv,$spec$select);
   $13 = HEAP32[99597]|0;
   $cmp28 = ($13|0)==(200);
   $conv29 = $cmp28&1;
   HEAP32[99053] = $conv29;
  }
  break;
 }
 case 1:  {
  _WI_Drawer();
  break;
 }
 case 2:  {
  _F_Drawer();
  break;
 }
 case 3:  {
  $14 = HEAP32[99038]|0;
  $call$i = (_W_CacheLumpName($14,8)|0);
  _V_DrawPatch(0,0,$call$i);
  break;
 }
 default: {
 }
 }
 $15 = HEAP32[99077]|0;
 $16 = HEAP32[98972]|0;
 $17 = $16 | $15;
 $18 = ($17|0)==(0);
 $19 = HEAP32[99024]|0;
 $tobool38 = ($19|0)!=(0);
 $or$cond4 = $18 & $tobool38;
 if ($or$cond4) {
  $20 = HEAP32[99087]|0;
  $arrayidx = (181680 + (($20*288)|0)|0);
  _R_RenderPlayerView($arrayidx);
  $$pre23 = HEAP32[99077]|0;
  $$pre24 = HEAP32[99024]|0;
  $21 = $$pre23;$22 = $$pre24;
 } else {
  $21 = $15;$22 = $19;
 }
 $cmp41 = ($21|0)==(0);
 $tobool44 = ($22|0)!=(0);
 $or$cond5 = $cmp41 & $tobool44;
 if ($or$cond5) {
  _HU_Drawer();
  $$pre25 = HEAP32[99077]|0;
  $24 = $$pre25;
 } else {
  $24 = $21;
 }
 $23 = HEAP32[32145]|0;
 $cmp47 = ($24|0)!=($23|0);
 $cmp50 = ($24|0)!=(0);
 $or$cond6 = $cmp50 & $cmp47;
 if ($or$cond6) {
  $call53 = (_W_CacheLumpName(156315,8)|0);
  _I_SetPalette($call53);
  $$pre26 = HEAP32[99077]|0;
  $$pre27 = HEAP32[32145]|0;
  $25 = $$pre26;$26 = $$pre27;
 } else {
  $25 = $24;$26 = $23;
 }
 $cmp55 = ($25|0)==(0);
 $cmp58 = ($26|0)!=(0);
 $or$cond7 = $cmp55 & $cmp58;
 if ($or$cond7) {
  HEAP32[99055] = 0;
  _R_FillBackScreen();
  $$pre28 = HEAP32[99077]|0;
  $29 = $$pre28;
 } else {
  $29 = $25;
 }
 $27 = HEAP32[98972]|0;
 $28 = $27 | $29;
 $30 = ($28|0)==(0);
 $31 = HEAP32[99611]|0;
 $cmp67 = ($31|0)!=(320);
 $or$cond9 = $30 & $cmp67;
 do {
  if ($or$cond9) {
   $32 = HEAP32[99384]|0;
   $33 = HEAP32[99056]|0;
   $34 = $33 | $32;
   $35 = ($34|0)==(0);
   $36 = HEAP32[99055]|0;
   $tobool74 = ($36|0)!=(0);
   $or$cond11 = $35 & $tobool74;
   if ($or$cond11) {
    $$pr20 = HEAP32[99052]|0;
    $tobool77 = ($$pr20|0)==(0);
    if ($tobool77) {
     break;
    }
   } else {
    HEAP32[99052] = 3;
   }
   _R_DrawViewBorder();
   $37 = HEAP32[99052]|0;
   $dec = (($37) + -1)|0;
   HEAP32[99052] = $dec;
  }
 } while(0);
 $38 = HEAP32[99075]|0;
 $tobool81 = ($38|0)==(0);
 if (!($tobool81)) {
  $39 = HEAP32[99080]|0;
  _V_DrawMouseSpeedBox($39);
 }
 $40 = HEAP32[99384]|0;
 HEAP32[99056] = $40;
 $41 = HEAP32[99152]|0;
 HEAP32[99055] = $41;
 $42 = HEAP32[99391]|0;
 HEAP32[99054] = $42;
 $43 = HEAP32[99077]|0;
 HEAP32[32144] = $43;
 HEAP32[32145] = $43;
 $44 = HEAP32[99089]|0;
 $tobool84 = ($44|0)==(0);
 if (!($tobool84)) {
  $45 = HEAP32[98972]|0;
  $tobool86 = ($45|0)==(0);
  $46 = HEAP32[99610]|0;
  $add = (($46) + 4)|0;
  $y$0 = $tobool86 ? $add : 4;
  $47 = HEAP32[99609]|0;
  $48 = HEAP32[99611]|0;
  $sub = (($48) + -68)|0;
  $div = (($sub|0) / 2)&-1;
  $add90 = (($div) + ($47))|0;
  $call91 = (_W_CacheLumpName(131367,8)|0);
  _V_DrawPatchDirect($add90,$y$0,$call91);
 }
 _M_Drawer();
 _NetUpdate();
 $tobool93 = ($wipe$0|0)==(0);
 if ($tobool93) {
  _I_FinishUpdate();
  return;
 } else {
  _display_wipe();
  return;
 }
}
function _D_BindVariables() {
 var $buf = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 76|0;
 _I_BindJoystickVariables();
 _I_BindSoundVariables();
 _M_BindBaseControls();
 _M_BindWeaponControls();
 _M_BindMapControls();
 _M_BindMenuControls();
 _M_BindChatControls(4);
 HEAP32[46368] = 103;
 HEAP32[(185476)>>2] = 105;
 HEAP32[(185480)>>2] = 98;
 HEAP32[(185484)>>2] = 114;
 _M_BindVariable(148227,128980);
 _M_BindVariable(148245,129728);
 _M_BindVariable(148256,129732);
 _M_BindVariable(148292,128984);
 _M_BindVariable(148632,128988);
 _M_BindVariable(148656,397532);
 _M_BindVariable(148668,129736);
 _M_BindVariable(147428,128632);
 _M_BindVariable(147451,128636);
 _M_BindVariable(147400,128572);
 HEAP32[$vararg_buffer>>2] = 0;
 (_M_snprintf($buf,12,131375,$vararg_buffer)|0);
 _M_BindVariable($buf,2288);
 HEAP32[$vararg_buffer1>>2] = 1;
 (_M_snprintf($buf,12,131375,$vararg_buffer1)|0);
 _M_BindVariable($buf,(2292));
 HEAP32[$vararg_buffer4>>2] = 2;
 (_M_snprintf($buf,12,131375,$vararg_buffer4)|0);
 _M_BindVariable($buf,(2296));
 HEAP32[$vararg_buffer7>>2] = 3;
 (_M_snprintf($buf,12,131375,$vararg_buffer7)|0);
 _M_BindVariable($buf,(2300));
 HEAP32[$vararg_buffer10>>2] = 4;
 (_M_snprintf($buf,12,131375,$vararg_buffer10)|0);
 _M_BindVariable($buf,(2304));
 HEAP32[$vararg_buffer13>>2] = 5;
 (_M_snprintf($buf,12,131375,$vararg_buffer13)|0);
 _M_BindVariable($buf,(2308));
 HEAP32[$vararg_buffer16>>2] = 6;
 (_M_snprintf($buf,12,131375,$vararg_buffer16)|0);
 _M_BindVariable($buf,(2312));
 HEAP32[$vararg_buffer19>>2] = 7;
 (_M_snprintf($buf,12,131375,$vararg_buffer19)|0);
 _M_BindVariable($buf,(2316));
 HEAP32[$vararg_buffer22>>2] = 8;
 (_M_snprintf($buf,12,131375,$vararg_buffer22)|0);
 _M_BindVariable($buf,(2320));
 HEAP32[$vararg_buffer25>>2] = 9;
 (_M_snprintf($buf,12,131375,$vararg_buffer25)|0);
 _M_BindVariable($buf,(2324));
 STACKTOP = sp;return;
}
function _D_GrabMouseCallback() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = (0)==(0);
 if (!($tobool)) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $0 = HEAP32[99384]|0;
 $1 = HEAP32[99089]|0;
 $2 = $1 | $0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $4 = HEAP32[99077]|0;
 $5 = HEAP32[99092]|0;
 $6 = $5 | $4;
 $7 = HEAP32[99035]|0;
 $8 = $6 | $7;
 $9 = ($8|0)==(0);
 $10 = $9&1;
 $retval$0 = $10;
 return ($retval$0|0);
}
function _doomgeneric_Tick() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $mo = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99034]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  _display_wipe();
  return;
 }
 _TryRunTics();
 $1 = HEAP32[99076]|0;
 $mo = (181680 + (($1*288)|0)|0);
 $2 = HEAP32[$mo>>2]|0;
 _S_UpdateSounds($2);
 $3 = HEAP32[99855]|0;
 $tobool1 = ($3|0)==(0);
 if ($tobool1) {
  return;
 }
 _D_Display();
 return;
}
function _D_DoomLoop() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $mo$i = 0, $tobool = 0, $tobool$i = 0, $tobool1$i = 0;
 var $tobool4 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99036]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  $1 = HEAP32[99093]|0;
  $2 = HEAP32[99088]|0;
  $cmp = ($2|0)==(5);
  $3 = HEAP32[99094]|0;
  $4 = $3 | $1;
  $5 = ($4|0)!=(0);
  $6 = $cmp | $5;
  if ($6) {
   (_puts(131387)|0);
  }
 }
 $7 = HEAP32[99093]|0;
 $tobool4 = ($7|0)==(0);
 if (!($tobool4)) {
  _G_BeginRecording();
 }
 HEAP32[99032] = 1;
 _TryRunTics();
 $8 = HEAP32[99016]|0;
 _I_SetWindowTitle($8);
 _I_InitGraphics();
 _V_RestoreBuffer();
 _R_ExecuteSetViewSize();
 _D_StartGameLoop();
 $9 = HEAP32[99075]|0;
 $tobool7 = ($9|0)==(0);
 if (!($tobool7)) {
  $10 = HEAP32[99077]|0;
  HEAP32[32144] = $10;
 }
 $11 = HEAP32[99034]|0;
 $tobool$i = ($11|0)==(0);
 if (!($tobool$i)) {
  _display_wipe();
  return;
 }
 _TryRunTics();
 $12 = HEAP32[99076]|0;
 $mo$i = (181680 + (($12*288)|0)|0);
 $13 = HEAP32[$mo$i>>2]|0;
 _S_UpdateSounds($13);
 $14 = HEAP32[99855]|0;
 $tobool1$i = ($14|0)==(0);
 if ($tobool1$i) {
  return;
 }
 _D_Display();
 return;
}
function _D_PageTicker() {
 var $0 = 0, $cmp = 0, $dec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99037]|0;
 $dec = (($0) + -1)|0;
 HEAP32[99037] = $dec;
 $cmp = ($0|0)<(1);
 if (!($cmp)) {
  return;
 }
 HEAP32[99035] = 1;
 return;
}
function _D_AdvanceDemo() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99035] = 1;
 return;
}
function _D_DoAdvanceDemo() {
 var $$ = 0, $$sink = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $call = 0, $call28 = 0, $cmp16 = 0, $cmp19 = 0, $cmp29 = 0, $cmp4 = 0, $playerstate = 0, $rem3 = 0;
 var $tobool = 0, $tobool26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99076]|0;
 $playerstate = (((181680 + (($0*288)|0)|0)) + 4|0);
 HEAP32[$playerstate>>2] = 0;
 HEAP32[99035] = 0;
 HEAP32[99157] = 0;
 HEAP32[99089] = 0;
 HEAP32[99088] = 0;
 $1 = HEAP32[32141]|0;
 $2 = $1 | 1;
 $3 = ($2|0)==(7);
 $4 = HEAP32[99039]|0;
 $add = (($4) + 1)|0;
 $$sink = $3 ? 7 : 6;
 $rem3 = (($add|0) % ($$sink|0))&-1;
 HEAP32[99039] = $rem3;
 L1: do {
  switch ($rem3|0) {
  case 0:  {
   $5 = HEAP32[32140]|0;
   $cmp4 = ($5|0)==(2);
   $$ = $cmp4 ? 385 : 170;
   HEAP32[99037] = $$;
   HEAP32[99077] = 3;
   HEAP32[99038] = 131616;
   if ($cmp4) {
    _S_StartMusic(66);
    break L1;
   } else {
    _S_StartMusic(29);
    break L1;
   }
   break;
  }
  case 1:  {
   _G_DeferedPlayDemo(131625);
   break;
  }
  case 2:  {
   HEAP32[99037] = 200;
   HEAP32[99077] = 3;
   HEAP32[99038] = 141869;
   break;
  }
  case 3:  {
   _G_DeferedPlayDemo(131631);
   break;
  }
  case 4:  {
   HEAP32[99077] = 3;
   $6 = HEAP32[32140]|0;
   $cmp16 = ($6|0)==(2);
   if ($cmp16) {
    HEAP32[99037] = 385;
    HEAP32[99038] = 131616;
    _S_StartMusic(66);
    break L1;
   }
   HEAP32[99037] = 200;
   $cmp19 = ($6|0)==(3);
   if ($cmp19) {
    HEAP32[99038] = 141869;
    break L1;
   } else {
    HEAP32[99038] = 150312;
    break L1;
   }
   break;
  }
  case 5:  {
   _G_DeferedPlayDemo(131637);
   break;
  }
  case 6:  {
   _G_DeferedPlayDemo(131643);
   break;
  }
  default: {
  }
  }
 } while(0);
 $7 = HEAP32[99036]|0;
 $tobool = ($7|0)==(0);
 if ($tobool) {
  return;
 }
 $8 = HEAP32[99038]|0;
 $call = (_strcasecmp($8,131616)|0);
 $tobool26 = ($call|0)==(0);
 if (!($tobool26)) {
  return;
 }
 $call28 = (_W_CheckNumForName(131649)|0);
 $cmp29 = ($call28|0)<(0);
 if (!($cmp29)) {
  return;
 }
 HEAP32[99038] = 156556;
 return;
}
function _D_StartTitle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99088] = 0;
 HEAP32[99039] = -1;
 HEAP32[99035] = 1;
 return;
}
function _D_IdentifyVersion() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add = 0, $arraydecay = 0, $arrayidx36 = 0, $call = 0, $call$1$i = 0, $call$2$i = 0, $call$i = 0, $call22 = 0, $call26 = 0, $call33 = 0, $call6 = 0, $cmp = 0;
 var $cmp1 = 0, $cmp19 = 0, $cmp23 = 0, $cmp27 = 0, $cmp34 = 0, $i$010 = 0, $i$010$lcssa$i = 0, $inc = 0, $mission$i = 0, $tobool = 0, $tobool$1$i = 0, $tobool$2$i = 0, $tobool$i = 0, $tobool7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[99015]|0;
 $cmp = ($0|0)==(9);
 do {
  if ($cmp) {
   $1 = HEAP32[99848]|0;
   $cmp19 = ($1|0)==(0);
   if ($cmp19) {
    _I_Error(131669,$vararg_buffer);
    // unreachable;
   }
   $2 = HEAP32[99849]|0;
   $i$010 = 0;
   while(1) {
    $arraydecay = (($2) + (($i$010*28)|0)|0);
    $call = (_strncasecmp($arraydecay,131658,8)|0);
    $tobool = ($call|0)==(0);
    if ($tobool) {
     label = 6;
     break;
    }
    $call6 = (_strncasecmp($arraydecay,131664,8)|0);
    $tobool7 = ($call6|0)==(0);
    $inc = (($i$010) + 1)|0;
    if ($tobool7) {
     label = 8;
     break;
    }
    $cmp1 = ($inc>>>0)<($1>>>0);
    if ($cmp1) {
     $i$010 = $inc;
    } else {
     label = 9;
     break;
    }
   }
   if ((label|0) == 6) {
    HEAP32[99015] = 1;
    label = 16;
    break;
   }
   else if ((label|0) == 8) {
    HEAP32[99015] = 0;
    label = 11;
    break;
   }
   else if ((label|0) == 9) {
    _I_Error(131669,$vararg_buffer);
    // unreachable;
   }
  } else {
   $3 = $0 | 4;
   $4 = ($3|0)==(4);
   if ($4) {
    label = 11;
   } else {
    label = 16;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $call22 = (_W_CheckNumForName(131699)|0);
  $cmp23 = ($call22|0)>(0);
  if ($cmp23) {
   HEAP32[32140] = 3;
   STACKTOP = sp;return;
  }
  $call26 = (_W_CheckNumForName(131704)|0);
  $cmp27 = ($call26|0)>(0);
  if ($cmp27) {
   HEAP32[32140] = 1;
   STACKTOP = sp;return;
  } else {
   HEAP32[32140] = 0;
   STACKTOP = sp;return;
  }
 }
 else if ((label|0) == 16) {
  HEAP32[32140] = 2;
  $call33 = (_M_CheckParmWithArgs(131709,1)|0);
  $cmp34 = ($call33|0)>(0);
  if (!($cmp34)) {
   STACKTOP = sp;return;
  }
  $5 = HEAP32[99374]|0;
  $add = (($call33) + 1)|0;
  $arrayidx36 = (($5) + ($add<<2)|0);
  $6 = HEAP32[$arrayidx36>>2]|0;
  $call$i = (_strcasecmp($6,155352)|0);
  $tobool$i = ($call$i|0)==(0);
  if ($tobool$i) {
   $i$010$lcssa$i = 0;
  } else {
   $call$1$i = (_strcasecmp($6,133595)|0);
   $tobool$1$i = ($call$1$i|0)==(0);
   if ($tobool$1$i) {
    $i$010$lcssa$i = 1;
   } else {
    $call$2$i = (_strcasecmp($6,133586)|0);
    $tobool$2$i = ($call$2$i|0)==(0);
    if ($tobool$2$i) {
     $i$010$lcssa$i = 2;
    } else {
     (_puts(131715)|0);
     HEAP32[$vararg_buffer1>>2] = 155352;
     (_printf(131740,$vararg_buffer1)|0);
     HEAP32[$vararg_buffer3>>2] = 133595;
     (_printf(131740,$vararg_buffer3)|0);
     HEAP32[$vararg_buffer6>>2] = 133586;
     (_printf(131740,$vararg_buffer6)|0);
     HEAP32[$vararg_buffer9>>2] = $6;
     _I_Error(131745,$vararg_buffer9);
     // unreachable;
    }
   }
  }
  $mission$i = (((944 + ($i$010$lcssa$i<<3)|0)) + 4|0);
  $7 = HEAP32[$mission$i>>2]|0;
  HEAP32[99015] = $7;
  STACKTOP = sp;return;
 }
}
function _D_DoomMain() {
 var $$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0, $add123 = 0, $add131 = 0, $add140 = 0, $add154 = 0, $add163 = 0;
 var $add184 = 0, $add214 = 0, $add55 = 0, $arraydecay75 = 0, $arraydecay98$1 = 0, $arraydecay98$10 = 0, $arraydecay98$11 = 0, $arraydecay98$12 = 0, $arraydecay98$13 = 0, $arraydecay98$14 = 0, $arraydecay98$15 = 0, $arraydecay98$16 = 0, $arraydecay98$17 = 0, $arraydecay98$18 = 0, $arraydecay98$19 = 0, $arraydecay98$2 = 0, $arraydecay98$20 = 0, $arraydecay98$21 = 0, $arraydecay98$22 = 0, $arraydecay98$3 = 0;
 var $arraydecay98$4 = 0, $arraydecay98$5 = 0, $arraydecay98$6 = 0, $arraydecay98$7 = 0, $arraydecay98$8 = 0, $arraydecay98$9 = 0, $arrayidx = 0, $arrayidx1$i = 0, $arrayidx124 = 0, $arrayidx132 = 0, $arrayidx141 = 0, $arrayidx155 = 0, $arrayidx168 = 0, $arrayidx185 = 0, $arrayidx215 = 0, $arrayidx26$i = 0, $arrayidx56 = 0, $arrayidx61 = 0, $arrayidx80 = 0, $call$i51 = 0;
 var $call$i56 = 0, $call1 = 0, $call1$i53 = 0, $call1$i58 = 0, $call105 = 0, $call107 = 0, $call112 = 0, $call114 = 0, $call120 = 0, $call128 = 0, $call137 = 0, $call14 = 0, $call142 = 0, $call144 = 0, $call148 = 0, $call156 = 0, $call176 = 0, $call18 = 0, $call181 = 0, $call186 = 0;
 var $call2 = 0, $call201 = 0, $call206 = 0, $call211 = 0, $call217 = 0, $call222 = 0, $call231 = 0, $call3 = 0, $call3$1$i = 0, $call3$2$i = 0, $call3$3$i = 0, $call3$4$i = 0, $call3$5$i = 0, $call3$6$i = 0, $call3$7$i = 0, $call3$8$i = 0, $call3$i = 0, $call36 = 0, $call4 = 0, $call42 = 0;
 var $call47 = 0, $call48 = 0, $call5 = 0, $call51 = 0, $call57 = 0, $call6 = 0, $call86 = 0, $call87 = 0, $call99 = 0, $call99$1 = 0, $call99$10 = 0, $call99$11 = 0, $call99$12 = 0, $call99$13 = 0, $call99$14 = 0, $call99$15 = 0, $call99$16 = 0, $call99$17 = 0, $call99$18 = 0, $call99$19 = 0;
 var $call99$2 = 0, $call99$20 = 0, $call99$21 = 0, $call99$22 = 0, $call99$3 = 0, $call99$4 = 0, $call99$5 = 0, $call99$6 = 0, $call99$7 = 0, $call99$8 = 0, $call99$9 = 0, $cmp = 0, $cmp$i54 = 0, $cmp$i57 = 0, $cmp100 = 0, $cmp100$1 = 0, $cmp100$10 = 0, $cmp100$11 = 0, $cmp100$12 = 0, $cmp100$13 = 0;
 var $cmp100$14 = 0, $cmp100$15 = 0, $cmp100$16 = 0, $cmp100$17 = 0, $cmp100$18 = 0, $cmp100$19 = 0, $cmp100$2 = 0, $cmp100$20 = 0, $cmp100$21 = 0, $cmp100$22 = 0, $cmp100$3 = 0, $cmp100$4 = 0, $cmp100$5 = 0, $cmp100$6 = 0, $cmp100$7 = 0, $cmp100$8 = 0, $cmp100$9 = 0, $cmp106 = 0, $cmp108 = 0, $cmp113 = 0;
 var $cmp115 = 0, $cmp151 = 0, $cmp164 = 0, $cmp177 = 0, $cmp198 = 0, $cmp2$i = 0, $cmp20 = 0, $cmp202 = 0, $cmp227 = 0, $cmp235 = 0, $cmp37 = 0, $cmp4$i = 0, $cmp43 = 0, $cmp43$i = 0, $cmp53$i = 0, $cmp54$i = 0, $cmp57$i = 0, $cmp59$i = 0, $cond54$i = 0, $conv = 0;
 var $conv134 = 0, $conv161 = 0, $conv170 = 0, $demolumpname = 0, $div = 0, $div28 = 0, $div30 = 0, $div32 = 0, $file = 0, $i$017$lcssa$i = 0, $mul = 0, $mul193 = 0, $mul194 = 0, $mul27 = 0, $mul29 = 0, $mul31 = 0, $name90 = 0, $or$cond1$i = 0, $or$cond2$i = 0, $p$067 = 0;
 var $spec$select = 0, $storemerge = 0, $sub = 0, $sub126 = 0, $sub135 = 0, $sub162 = 0, $sub171 = 0, $sub171$sink = 0, $sub73 = 0, $tobool = 0, $tobool$i = 0, $tobool10 = 0, $tobool121 = 0, $tobool129 = 0, $tobool138 = 0, $tobool145 = 0, $tobool149 = 0, $tobool15 = 0, $tobool182 = 0, $tobool207 = 0;
 var $tobool212 = 0, $tobool218 = 0, $tobool223 = 0, $tobool4$1$i = 0, $tobool4$2$i = 0, $tobool4$3$i = 0, $tobool4$4$i = 0, $tobool4$5$i = 0, $tobool4$6$i = 0, $tobool4$7$i = 0, $tobool4$8$i = 0, $tobool4$i = 0, $tobool49 = 0, $tobool53 = 0, $tobool58 = 0, $tobool7 = 0, $tobool88 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0;
 var $vararg_buffer101 = 0, $vararg_buffer103 = 0, $vararg_buffer105 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer22 = 0, $vararg_buffer26 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer51 = 0, $vararg_buffer54 = 0, $vararg_buffer56 = 0, $vararg_buffer58 = 0, $vararg_buffer6 = 0, $vararg_buffer60 = 0;
 var $vararg_buffer63 = 0, $vararg_buffer65 = 0, $vararg_buffer67 = 0, $vararg_buffer69 = 0, $vararg_buffer71 = 0, $vararg_buffer73 = 0, $vararg_buffer75 = 0, $vararg_buffer77 = 0, $vararg_buffer79 = 0, $vararg_buffer81 = 0, $vararg_buffer83 = 0, $vararg_buffer85 = 0, $vararg_buffer87 = 0, $vararg_buffer89 = 0, $vararg_buffer91 = 0, $vararg_buffer93 = 0, $vararg_buffer95 = 0, $vararg_buffer97 = 0, $vararg_buffer99 = 0, $vararg_ptr13 = 0;
 var $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, $vararg_ptr9 = 0, $version$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 800|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(800|0);
 $vararg_buffer105 = sp + 776|0;
 $vararg_buffer103 = sp + 768|0;
 $vararg_buffer101 = sp + 760|0;
 $vararg_buffer99 = sp + 752|0;
 $vararg_buffer97 = sp + 744|0;
 $vararg_buffer95 = sp + 736|0;
 $vararg_buffer93 = sp + 728|0;
 $vararg_buffer91 = sp + 720|0;
 $vararg_buffer89 = sp + 712|0;
 $vararg_buffer87 = sp + 704|0;
 $vararg_buffer85 = sp + 696|0;
 $vararg_buffer83 = sp + 688|0;
 $vararg_buffer81 = sp + 680|0;
 $vararg_buffer79 = sp + 672|0;
 $vararg_buffer77 = sp + 664|0;
 $vararg_buffer75 = sp + 656|0;
 $vararg_buffer73 = sp + 648|0;
 $vararg_buffer71 = sp + 640|0;
 $vararg_buffer69 = sp + 632|0;
 $vararg_buffer67 = sp + 624|0;
 $vararg_buffer65 = sp + 616|0;
 $vararg_buffer63 = sp + 608|0;
 $vararg_buffer60 = sp + 600|0;
 $vararg_buffer58 = sp + 592|0;
 $vararg_buffer56 = sp + 584|0;
 $vararg_buffer54 = sp + 576|0;
 $vararg_buffer51 = sp + 568|0;
 $vararg_buffer48 = sp + 560|0;
 $vararg_buffer45 = sp + 552|0;
 $vararg_buffer42 = sp + 544|0;
 $vararg_buffer38 = sp + 536|0;
 $vararg_buffer34 = sp + 528|0;
 $vararg_buffer30 = sp + 520|0;
 $vararg_buffer26 = sp + 512|0;
 $vararg_buffer22 = sp + 504|0;
 $vararg_buffer18 = sp + 496|0;
 $vararg_buffer14 = sp + 488|0;
 $vararg_buffer10 = sp + 480|0;
 $vararg_buffer6 = sp + 472|0;
 $vararg_buffer3 = sp + 464|0;
 $vararg_buffer1 = sp + 456|0;
 $vararg_buffer = sp + 448|0;
 $file = sp + 192|0;
 $demolumpname = sp + 780|0;
 $name90 = sp;
 _I_AtExit(124,0);
 _I_PrintBanner(132105);
 (_puts(132122)|0);
 _Z_Init();
 $call1 = (_M_CheckParm(132167)|0);
 HEAP32[99040] = $call1;
 $call2 = (_M_CheckParm(132179)|0);
 HEAP32[99041] = $call2;
 $call3 = (_M_CheckParm(132188)|0);
 HEAP32[99042] = $call3;
 $call4 = (_M_CheckParm(132194)|0);
 HEAP32[99043] = $call4;
 $call5 = (_M_CheckParm(132203)|0);
 $tobool = ($call5|0)==(0);
 if (!($tobool)) {
  HEAP32[99091] = 1;
 }
 $call6 = (_M_CheckParm(132215)|0);
 $tobool7 = ($call6|0)==(0);
 if (!($tobool7)) {
  HEAP32[99091] = 2;
 }
 $0 = HEAP32[99043]|0;
 $tobool10 = ($0|0)==(0);
 if (!($tobool10)) {
  (_puts(132225)|0);
 }
 _M_SetConfigDir(0);
 $call14 = (_M_CheckParm(132246)|0);
 $tobool15 = ($call14|0)==(0);
 if (!($tobool15)) {
  $1 = HEAP32[99373]|0;
  $sub = (($1) + -1)|0;
  $cmp = ($call14|0)<($sub|0);
  if ($cmp) {
   $add = (($call14) + 1)|0;
   $2 = HEAP32[99374]|0;
   $arrayidx = (($2) + ($add<<2)|0);
   $3 = HEAP32[$arrayidx>>2]|0;
   $call18 = (_atoi($3)|0);
   $cmp20 = ($call18|0)<(10);
   if ($cmp20) {
    $5 = 10;
   } else {
    $4 = ($call18|0)<(400);
    $spec$select = $4 ? $call18 : 400;
    $5 = $spec$select;
   }
  } else {
   $5 = 200;
  }
  HEAP32[$vararg_buffer>>2] = $5;
  (_printf(132253,$vararg_buffer)|0);
  $6 = HEAP32[32151]|0;
  $mul = Math_imul($6, $5)|0;
  $div = (($mul|0) / 100)&-1;
  HEAP32[32151] = $div;
  $7 = HEAP32[(128608)>>2]|0;
  $mul27 = Math_imul($7, $5)|0;
  $div28 = (($mul27|0) / 100)&-1;
  HEAP32[(128608)>>2] = $div28;
  $8 = HEAP32[32153]|0;
  $mul29 = Math_imul($8, $5)|0;
  $div30 = (($mul29|0) / 100)&-1;
  HEAP32[32153] = $div30;
  $9 = HEAP32[(128616)>>2]|0;
  $mul31 = Math_imul($9, $5)|0;
  $div32 = (($mul31|0) / 100)&-1;
  HEAP32[(128616)>>2] = $div32;
 }
 (_puts(132272)|0);
 (_puts(132298)|0);
 _M_SetConfigFilenames(132336,132348);
 _D_BindVariables();
 _M_LoadDefaults();
 _I_AtExit(125,0);
 $call36 = (_D_FindIWAD(63,396060)|0);
 HEAP32[99044] = $call36;
 $cmp37 = ($call36|0)==(0|0);
 if ($cmp37) {
  _I_Error(132368,$vararg_buffer1);
  // unreachable;
 }
 HEAP32[99017] = 0;
 (_puts(132480)|0);
 $10 = HEAP32[99044]|0;
 HEAP32[$vararg_buffer3>>2] = $10;
 (_printf(156602,$vararg_buffer3)|0);
 (_W_AddFile($10)|0);
 _W_CheckCorrectIWAD(0);
 _D_IdentifyVersion();
 $call$i51 = (_M_CheckParmWithArgs(132503,1)|0);
 $tobool$i = ($call$i51|0)==(0);
 L20: do {
  if ($tobool$i) {
   $14 = HEAP32[99015]|0;
   switch ($14|0) {
   case 4:  {
    HEAP32[32141] = 9;
    break L20;
    break;
   }
   case 5:  {
    HEAP32[32141] = 5;
    break L20;
    break;
   }
   default: {
    $15 = HEAP32[32140]|0;
    $16 = ($15>>>0)<(2);
    if ($16) {
     HEAP32[32141] = 4;
     break L20;
    }
    switch ($15|0) {
    case 3:  {
     HEAP32[32141] = 6;
     break L20;
     break;
    }
    case 2:  {
     break;
    }
    default: {
     break L20;
    }
    }
    $cmp43$i = ($14|0)==(1);
    if ($cmp43$i) {
     HEAP32[32141] = 4;
     break L20;
    } else {
     HEAP32[32141] = 7;
     break L20;
    }
   }
   }
  } else {
   $11 = HEAP32[99374]|0;
   $add$i = (($call$i51) + 1)|0;
   $arrayidx1$i = (($11) + ($add$i<<2)|0);
   $12 = HEAP32[$arrayidx1$i>>2]|0;
   $call3$i = (_strcmp($12,132516)|0);
   $tobool4$i = ($call3$i|0)==(0);
   if ($tobool4$i) {
    $i$017$lcssa$i = 0;
   } else {
    $call3$1$i = (_strcmp($12,132522)|0);
    $tobool4$1$i = ($call3$1$i|0)==(0);
    if ($tobool4$1$i) {
     $i$017$lcssa$i = 1;
    } else {
     $call3$2$i = (_strcmp($12,132526)|0);
     $tobool4$2$i = ($call3$2$i|0)==(0);
     if ($tobool4$2$i) {
      $i$017$lcssa$i = 2;
     } else {
      $call3$3$i = (_strcmp($12,132530)|0);
      $tobool4$3$i = ($call3$3$i|0)==(0);
      if ($tobool4$3$i) {
       $i$017$lcssa$i = 3;
      } else {
       $call3$4$i = (_strcmp($12,133581)|0);
       $tobool4$4$i = ($call3$4$i|0)==(0);
       if ($tobool4$4$i) {
        $i$017$lcssa$i = 4;
       } else {
        $call3$5$i = (_strcmp($12,132534)|0);
        $tobool4$5$i = ($call3$5$i|0)==(0);
        if ($tobool4$5$i) {
         $i$017$lcssa$i = 5;
        } else {
         $call3$6$i = (_strcmp($12,132543)|0);
         $tobool4$6$i = ($call3$6$i|0)==(0);
         if ($tobool4$6$i) {
          $i$017$lcssa$i = 6;
         } else {
          $call3$7$i = (_strcmp($12,132549)|0);
          $tobool4$7$i = ($call3$7$i|0)==(0);
          if ($tobool4$7$i) {
           $i$017$lcssa$i = 7;
          } else {
           $call3$8$i = (_strcmp($12,133576)|0);
           $tobool4$8$i = ($call3$8$i|0)==(0);
           if ($tobool4$8$i) {
            $i$017$lcssa$i = 8;
           } else {
            (_puts(132556)|0);
            HEAP32[$vararg_buffer6>>2] = 132516;
            $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
            HEAP32[$vararg_ptr9>>2] = 131956;
            (_printf(132581,$vararg_buffer6)|0);
            HEAP32[$vararg_buffer10>>2] = 132522;
            $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
            HEAP32[$vararg_ptr13>>2] = 131967;
            (_printf(132581,$vararg_buffer10)|0);
            HEAP32[$vararg_buffer14>>2] = 132526;
            $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
            HEAP32[$vararg_ptr17>>2] = 131981;
            (_printf(132581,$vararg_buffer14)|0);
            HEAP32[$vararg_buffer18>>2] = 132530;
            $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
            HEAP32[$vararg_ptr21>>2] = 131990;
            (_printf(132581,$vararg_buffer18)|0);
            HEAP32[$vararg_buffer22>>2] = 133581;
            $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
            HEAP32[$vararg_ptr25>>2] = 131999;
            (_printf(132581,$vararg_buffer22)|0);
            HEAP32[$vararg_buffer26>>2] = 132534;
            $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
            HEAP32[$vararg_ptr29>>2] = 132004;
            (_printf(132581,$vararg_buffer26)|0);
            HEAP32[$vararg_buffer30>>2] = 132543;
            $vararg_ptr33 = ((($vararg_buffer30)) + 4|0);
            HEAP32[$vararg_ptr33>>2] = 132018;
            (_printf(132581,$vararg_buffer30)|0);
            HEAP32[$vararg_buffer34>>2] = 132549;
            $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
            HEAP32[$vararg_ptr37>>2] = 132029;
            (_printf(132581,$vararg_buffer34)|0);
            HEAP32[$vararg_buffer38>>2] = 133576;
            $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
            HEAP32[$vararg_ptr41>>2] = 132046;
            (_printf(132581,$vararg_buffer38)|0);
            $22 = HEAP32[99374]|0;
            $arrayidx26$i = (($22) + ($add$i<<2)|0);
            $23 = HEAP32[$arrayidx26$i>>2]|0;
            HEAP32[$vararg_buffer42>>2] = $23;
            _I_Error(132591,$vararg_buffer42);
            // unreachable;
           }
          }
         }
        }
       }
      }
     }
    }
   }
   $version$i = (((976 + (($i$017$lcssa$i*12)|0)|0)) + 8|0);
   $13 = HEAP32[$version$i>>2]|0;
   HEAP32[32141] = $13;
  }
 } while(0);
 $17 = HEAP32[32141]|0;
 $cmp53$i = ($17>>>0)<(6);
 $18 = HEAP32[32140]|0;
 $cmp54$i = ($18|0)==(3);
 $or$cond1$i = $cmp53$i & $cmp54$i;
 if ($or$cond1$i) {
  HEAP32[32140] = 1;
 } else {
  $cmp57$i = ($17>>>0)<(7);
  $cmp59$i = ($18|0)==(2);
  $or$cond2$i = $cmp57$i & $cmp59$i;
  if ($or$cond2$i) {
   $19 = HEAP32[99015]|0;
   $20 = $19 | 1;
   $21 = ($20|0)==(3);
   if ($21) {
    HEAP32[99015] = 1;
   }
  }
 }
 $call42 = (_W_CheckNumForName(132617)|0);
 $cmp43 = ($call42|0)>(-1);
 if ($cmp43) {
  (_puts(132626)|0);
  HEAP32[99036] = 1;
 }
 $call47 = (_W_ParseCommandLine()|0);
 HEAP32[99017] = $call47;
 $call48 = (_M_CheckParmWithArgs(132668,1)|0);
 $tobool49 = ($call48|0)==(0);
 if ($tobool49) {
  $call51 = (_M_CheckParmWithArgs(132678,1)|0);
  $tobool53 = ($call51|0)==(0);
  if (!($tobool53)) {
   $p$067 = $call51;
   label = 45;
  }
 } else {
  $p$067 = $call48;
  label = 45;
 }
 if ((label|0) == 45) {
  $24 = HEAP32[99374]|0;
  $add55 = (($p$067) + 1)|0;
  $arrayidx56 = (($24) + ($add55<<2)|0);
  $25 = HEAP32[$arrayidx56>>2]|0;
  $call57 = (_M_StringEndsWith($25,132688)|0);
  $tobool58 = ($call57|0)==(0);
  $26 = HEAP32[99374]|0;
  $arrayidx61 = (($26) + ($add55<<2)|0);
  $27 = HEAP32[$arrayidx61>>2]|0;
  if ($tobool58) {
   HEAP32[$vararg_buffer45>>2] = $27;
   (_snprintf($file,256,142724,$vararg_buffer45)|0);
  } else {
   (_M_StringCopy($file,$27,256)|0);
  }
  HEAP32[$vararg_buffer48>>2] = $file;
  (_printf(156602,$vararg_buffer48)|0);
  $call1$i53 = (_W_AddFile($file)|0);
  $cmp$i54 = ($call1$i53|0)==(0|0);
  if ($cmp$i54) {
   $30 = HEAP32[99374]|0;
   $arrayidx80 = (($30) + ($add55<<2)|0);
   $31 = HEAP32[$arrayidx80>>2]|0;
   (_M_StringCopy($demolumpname,$31,9)|0);
  } else {
   $28 = HEAP32[99849]|0;
   $29 = HEAP32[99848]|0;
   $sub73 = (($29) + -1)|0;
   $arraydecay75 = (($28) + (($sub73*28)|0)|0);
   (_M_StringCopy($demolumpname,$arraydecay75,9)|0);
  }
  HEAP32[$vararg_buffer51>>2] = $file;
  (_printf(132693,$vararg_buffer51)|0);
 }
 _I_AtExit(126,1);
 _W_GenerateHashTable();
 $call$i56 = (_W_CheckNumForName(133632)|0);
 $cmp$i57 = ($call$i56|0)>(-1);
 $call1$i58 = (_W_CheckNumForName(131775)|0);
 $cmp2$i = ($call1$i58|0)>(-1);
 HEAP32[99016] = 131782;
 $32 = HEAP32[99015]|0;
 $cmp4$i = ($32|0)!=(4);
 $33 = $32 | 4;
 $34 = ($33|0)==(4);
 L70: do {
  if ($34) {
   if ($cmp$i57) {
    HEAP32[99016] = 131790;
    break;
   }
   $35 = HEAP32[32140]|0;
   switch ($35|0) {
   case 3:  {
    HEAP32[99016] = 131808;
    break L70;
    break;
   }
   case 1:  {
    HEAP32[99016] = 131826;
    break L70;
    break;
   }
   case 0:  {
    HEAP32[99016] = 131842;
    break L70;
    break;
   }
   default: {
    break L70;
   }
   }
  } else {
   if ($cmp$i57) {
    if ($cmp2$i) {
     HEAP32[99016] = 131857;
     break;
    } else {
     HEAP32[99016] = 131864;
     break;
    }
   }
   $36 = ($33|0)==(5);
   $cond54$i = $cmp4$i & $36;
   if ($cond54$i) {
    HEAP32[99016] = 131882;
    break;
   }
   switch ($32|0) {
   case 3:  {
    HEAP32[99016] = 131904;
    break L70;
    break;
   }
   case 2:  {
    HEAP32[99016] = 131932;
    break L70;
    break;
   }
   default: {
    break L70;
   }
   }
  }
 } while(0);
 $call86 = (_D_SaveGameIWADName($32)|0);
 $call87 = (_M_GetSaveGameDir($call86)|0);
 HEAP32[99045] = $call87;
 $37 = HEAP32[99017]|0;
 $tobool88 = ($37|0)==(0);
 if (!($tobool88)) {
  _memcpy(($name90|0),(1104|0),184)|0;
  $38 = HEAP32[32140]|0;
  switch ($38|0) {
  case 0:  {
   _I_Error(132711,$vararg_buffer54);
   // unreachable;
   break;
  }
  case 1:  {
   label = 71;
   break;
  }
  default: {
  }
  }
  do {
   if ((label|0) == 71) {
    $call99 = (_W_CheckNumForName($name90)|0);
    $cmp100 = ($call99|0)<(0);
    if ($cmp100) {
     _I_Error(132767,$vararg_buffer56);
     // unreachable;
    }
    $arraydecay98$1 = ((($name90)) + 8|0);
    $call99$1 = (_W_CheckNumForName($arraydecay98$1)|0);
    $cmp100$1 = ($call99$1|0)<(0);
    if ($cmp100$1) {
     _I_Error(132767,$vararg_buffer63);
     // unreachable;
    }
    $arraydecay98$2 = ((($name90)) + 16|0);
    $call99$2 = (_W_CheckNumForName($arraydecay98$2)|0);
    $cmp100$2 = ($call99$2|0)<(0);
    if ($cmp100$2) {
     _I_Error(132767,$vararg_buffer65);
     // unreachable;
    }
    $arraydecay98$3 = ((($name90)) + 24|0);
    $call99$3 = (_W_CheckNumForName($arraydecay98$3)|0);
    $cmp100$3 = ($call99$3|0)<(0);
    if ($cmp100$3) {
     _I_Error(132767,$vararg_buffer67);
     // unreachable;
    }
    $arraydecay98$4 = ((($name90)) + 32|0);
    $call99$4 = (_W_CheckNumForName($arraydecay98$4)|0);
    $cmp100$4 = ($call99$4|0)<(0);
    if ($cmp100$4) {
     _I_Error(132767,$vararg_buffer69);
     // unreachable;
    }
    $arraydecay98$5 = ((($name90)) + 40|0);
    $call99$5 = (_W_CheckNumForName($arraydecay98$5)|0);
    $cmp100$5 = ($call99$5|0)<(0);
    if ($cmp100$5) {
     _I_Error(132767,$vararg_buffer71);
     // unreachable;
    }
    $arraydecay98$6 = ((($name90)) + 48|0);
    $call99$6 = (_W_CheckNumForName($arraydecay98$6)|0);
    $cmp100$6 = ($call99$6|0)<(0);
    if ($cmp100$6) {
     _I_Error(132767,$vararg_buffer73);
     // unreachable;
    }
    $arraydecay98$7 = ((($name90)) + 56|0);
    $call99$7 = (_W_CheckNumForName($arraydecay98$7)|0);
    $cmp100$7 = ($call99$7|0)<(0);
    if ($cmp100$7) {
     _I_Error(132767,$vararg_buffer75);
     // unreachable;
    }
    $arraydecay98$8 = ((($name90)) + 64|0);
    $call99$8 = (_W_CheckNumForName($arraydecay98$8)|0);
    $cmp100$8 = ($call99$8|0)<(0);
    if ($cmp100$8) {
     _I_Error(132767,$vararg_buffer77);
     // unreachable;
    }
    $arraydecay98$9 = ((($name90)) + 72|0);
    $call99$9 = (_W_CheckNumForName($arraydecay98$9)|0);
    $cmp100$9 = ($call99$9|0)<(0);
    if ($cmp100$9) {
     _I_Error(132767,$vararg_buffer79);
     // unreachable;
    }
    $arraydecay98$10 = ((($name90)) + 80|0);
    $call99$10 = (_W_CheckNumForName($arraydecay98$10)|0);
    $cmp100$10 = ($call99$10|0)<(0);
    if ($cmp100$10) {
     _I_Error(132767,$vararg_buffer81);
     // unreachable;
    }
    $arraydecay98$11 = ((($name90)) + 88|0);
    $call99$11 = (_W_CheckNumForName($arraydecay98$11)|0);
    $cmp100$11 = ($call99$11|0)<(0);
    if ($cmp100$11) {
     _I_Error(132767,$vararg_buffer83);
     // unreachable;
    }
    $arraydecay98$12 = ((($name90)) + 96|0);
    $call99$12 = (_W_CheckNumForName($arraydecay98$12)|0);
    $cmp100$12 = ($call99$12|0)<(0);
    if ($cmp100$12) {
     _I_Error(132767,$vararg_buffer85);
     // unreachable;
    }
    $arraydecay98$13 = ((($name90)) + 104|0);
    $call99$13 = (_W_CheckNumForName($arraydecay98$13)|0);
    $cmp100$13 = ($call99$13|0)<(0);
    if ($cmp100$13) {
     _I_Error(132767,$vararg_buffer87);
     // unreachable;
    }
    $arraydecay98$14 = ((($name90)) + 112|0);
    $call99$14 = (_W_CheckNumForName($arraydecay98$14)|0);
    $cmp100$14 = ($call99$14|0)<(0);
    if ($cmp100$14) {
     _I_Error(132767,$vararg_buffer89);
     // unreachable;
    }
    $arraydecay98$15 = ((($name90)) + 120|0);
    $call99$15 = (_W_CheckNumForName($arraydecay98$15)|0);
    $cmp100$15 = ($call99$15|0)<(0);
    if ($cmp100$15) {
     _I_Error(132767,$vararg_buffer91);
     // unreachable;
    }
    $arraydecay98$16 = ((($name90)) + 128|0);
    $call99$16 = (_W_CheckNumForName($arraydecay98$16)|0);
    $cmp100$16 = ($call99$16|0)<(0);
    if ($cmp100$16) {
     _I_Error(132767,$vararg_buffer93);
     // unreachable;
    }
    $arraydecay98$17 = ((($name90)) + 136|0);
    $call99$17 = (_W_CheckNumForName($arraydecay98$17)|0);
    $cmp100$17 = ($call99$17|0)<(0);
    if ($cmp100$17) {
     _I_Error(132767,$vararg_buffer95);
     // unreachable;
    }
    $arraydecay98$18 = ((($name90)) + 144|0);
    $call99$18 = (_W_CheckNumForName($arraydecay98$18)|0);
    $cmp100$18 = ($call99$18|0)<(0);
    if ($cmp100$18) {
     _I_Error(132767,$vararg_buffer97);
     // unreachable;
    }
    $arraydecay98$19 = ((($name90)) + 152|0);
    $call99$19 = (_W_CheckNumForName($arraydecay98$19)|0);
    $cmp100$19 = ($call99$19|0)<(0);
    if ($cmp100$19) {
     _I_Error(132767,$vararg_buffer99);
     // unreachable;
    }
    $arraydecay98$20 = ((($name90)) + 160|0);
    $call99$20 = (_W_CheckNumForName($arraydecay98$20)|0);
    $cmp100$20 = ($call99$20|0)<(0);
    if ($cmp100$20) {
     _I_Error(132767,$vararg_buffer101);
     // unreachable;
    }
    $arraydecay98$21 = ((($name90)) + 168|0);
    $call99$21 = (_W_CheckNumForName($arraydecay98$21)|0);
    $cmp100$21 = ($call99$21|0)<(0);
    if ($cmp100$21) {
     _I_Error(132767,$vararg_buffer103);
     // unreachable;
    }
    $arraydecay98$22 = ((($name90)) + 176|0);
    $call99$22 = (_W_CheckNumForName($arraydecay98$22)|0);
    $cmp100$22 = ($call99$22|0)<(0);
    if (!($cmp100$22)) {
     break;
    }
    _I_Error(132767,$vararg_buffer105);
    // unreachable;
   }
  } while(0);
 }
 $call105 = (_W_CheckNumForName(132804)|0);
 $cmp106 = ($call105|0)>(-1);
 if ($cmp106) {
  label = 77;
 } else {
  $call107 = (_W_CheckNumForName(132813)|0);
  $cmp108 = ($call107|0)>(-1);
  if ($cmp108) {
   label = 77;
  }
 }
 if ((label|0) == 77) {
  _I_PrintDivider();
  (_puts(132820)|0);
 }
 $39 = HEAP32[99016]|0;
 _I_PrintStartupBanner($39);
 $call112 = (_W_CheckNumForName(133632)|0);
 $cmp113 = ($call112|0)>(-1);
 if ($cmp113) {
  $call114 = (_W_CheckNumForName(131775)|0);
  $cmp115 = ($call114|0)<(0);
  if ($cmp115) {
   (_puts(132971)|0);
   _I_PrintDivider();
  }
 }
 (_puts(133195)|0);
 _I_InitSound(1);
 _D_ConnectNetGame();
 HEAP32[99046] = 2;
 HEAP32[99047] = 1;
 HEAP32[99048] = 1;
 HEAP32[99049] = 0;
 $call120 = (_M_CheckParmWithArgs(133229,1)|0);
 $tobool121 = ($call120|0)==(0);
 if (!($tobool121)) {
  $40 = HEAP32[99374]|0;
  $add123 = (($call120) + 1)|0;
  $arrayidx124 = (($40) + ($add123<<2)|0);
  $41 = HEAP32[$arrayidx124>>2]|0;
  $42 = HEAP8[$41>>0]|0;
  $conv = $42 << 24 >> 24;
  $sub126 = (($conv) + -49)|0;
  HEAP32[99046] = $sub126;
  HEAP32[99049] = 1;
 }
 $call128 = (_M_CheckParmWithArgs(133236,1)|0);
 $tobool129 = ($call128|0)==(0);
 if (!($tobool129)) {
  $43 = HEAP32[99374]|0;
  $add131 = (($call128) + 1)|0;
  $arrayidx132 = (($43) + ($add131<<2)|0);
  $44 = HEAP32[$arrayidx132>>2]|0;
  $45 = HEAP8[$44>>0]|0;
  $conv134 = $45 << 24 >> 24;
  $sub135 = (($conv134) + -48)|0;
  HEAP32[99047] = $sub135;
  HEAP32[99048] = 1;
  HEAP32[99049] = 1;
 }
 HEAP32[99167] = 0;
 $call137 = (_M_CheckParmWithArgs(133245,1)|0);
 $tobool138 = ($call137|0)==(0);
 if (!($tobool138)) {
  $46 = HEAP32[99374]|0;
  $add140 = (($call137) + 1)|0;
  $arrayidx141 = (($46) + ($add140<<2)|0);
  $47 = HEAP32[$arrayidx141>>2]|0;
  $call142 = (_atoi($47)|0);
  HEAP32[99167] = $call142;
 }
 $call144 = (_M_CheckParm(133838)|0);
 $tobool145 = ($call144|0)==(0);
 if (!($tobool145)) {
  HEAP32[99167] = 20;
 }
 $call148 = (_M_CheckParmWithArgs(133252,1)|0);
 $tobool149 = ($call148|0)==(0);
 if (!($tobool149)) {
  $48 = HEAP32[32140]|0;
  $cmp151 = ($48|0)==(2);
  $49 = HEAP32[99374]|0;
  $add154 = (($call148) + 1)|0;
  $arrayidx155 = (($49) + ($add154<<2)|0);
  $50 = HEAP32[$arrayidx155>>2]|0;
  do {
   if ($cmp151) {
    $call156 = (_atoi($50)|0);
    $sub171$sink = $call156;
   } else {
    $51 = HEAP8[$50>>0]|0;
    $conv161 = $51 << 24 >> 24;
    $sub162 = (($conv161) + -48)|0;
    HEAP32[99047] = $sub162;
    $add163 = (($call148) + 2)|0;
    $52 = HEAP32[99373]|0;
    $cmp164 = ($add163|0)<($52|0);
    if (!($cmp164)) {
     $sub171$sink = 1;
     break;
    }
    $arrayidx168 = (($49) + ($add163<<2)|0);
    $53 = HEAP32[$arrayidx168>>2]|0;
    $54 = HEAP8[$53>>0]|0;
    $conv170 = $54 << 24 >> 24;
    $sub171 = (($conv170) + -48)|0;
    $sub171$sink = $sub171;
   }
  } while(0);
  HEAP32[99048] = $sub171$sink;
  HEAP32[99049] = 1;
 }
 $call176 = (_M_CheckParm(133258)|0);
 $cmp177 = ($call176|0)>(0);
 if ($cmp177) {
  HEAP32[99047] = 1;
  HEAP32[99048] = 1;
  HEAP32[99049] = 1;
  HEAP32[99075] = 1;
 }
 $call181 = (_M_CheckParmWithArgs(133272,1)|0);
 $tobool182 = ($call181|0)==(0);
 if ($tobool182) {
  $storemerge = -1;
 } else {
  $add184 = (($call181) + 1)|0;
  $55 = HEAP32[99374]|0;
  $arrayidx185 = (($55) + ($add184<<2)|0);
  $56 = HEAP32[$arrayidx185>>2]|0;
  $call186 = (_atoi($56)|0);
  $storemerge = $call186;
 }
 HEAP32[99050] = $storemerge;
 (_puts(133282)|0);
 _M_Init();
 (_printf(133315,$vararg_buffer58)|0);
 _R_Init();
 (_puts(133351)|0);
 _P_Init();
 (_puts(133381)|0);
 $57 = HEAP32[32432]|0;
 $mul193 = $57 << 3;
 $58 = HEAP32[32433]|0;
 $mul194 = $58 << 3;
 _S_Init($mul193,$mul194);
 (_puts(133407)|0);
 _D_CheckNetGame();
 $59 = HEAP32[32141]|0;
 switch ($59|0) {
 case 1:  {
  $$lcssa$i = 131956;
  label = 108;
  break;
 }
 case 2:  {
  $$lcssa$i = 131967;
  label = 108;
  break;
 }
 case 3:  {
  $$lcssa$i = 131981;
  label = 108;
  break;
 }
 case 4:  {
  $$lcssa$i = 131990;
  label = 108;
  break;
 }
 case 5:  {
  $$lcssa$i = 131999;
  label = 108;
  break;
 }
 case 6:  {
  $$lcssa$i = 132004;
  label = 108;
  break;
 }
 case 7:  {
  $$lcssa$i = 132018;
  label = 108;
  break;
 }
 case 8:  {
  $$lcssa$i = 132029;
  label = 108;
  break;
 }
 case 9:  {
  $$lcssa$i = 132046;
  label = 108;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 108) {
  HEAP32[$vararg_buffer60>>2] = $$lcssa$i;
  (_printf(132057,$vararg_buffer60)|0);
 }
 (_puts(133453)|0);
 _HU_Init();
 (_puts(133491)|0);
 _ST_Init();
 $60 = HEAP32[32140]|0;
 $cmp198 = ($60|0)==(2);
 do {
  if ($cmp198) {
   $call201 = (_W_CheckNumForName(133517)|0);
   $cmp202 = ($call201|0)<(0);
   if (!($cmp202)) {
    break;
   }
   HEAP32[99033] = 1;
  }
 } while(0);
 $call206 = (_M_CheckParmWithArgs(155507,1)|0);
 $tobool207 = ($call206|0)==(0);
 if (!($tobool207)) {
  _I_AtExit(127,1);
  (_puts(133523)|0);
 }
 $call211 = (_M_CheckParmWithArgs(133624,1)|0);
 $tobool212 = ($call211|0)==(0);
 if (!($tobool212)) {
  $61 = HEAP32[99374]|0;
  $add214 = (($call211) + 1)|0;
  $arrayidx215 = (($61) + ($add214<<2)|0);
  $62 = HEAP32[$arrayidx215>>2]|0;
  _G_RecordDemo($62);
  HEAP32[99049] = 1;
 }
 $call217 = (_M_CheckParmWithArgs(132668,1)|0);
 $tobool218 = ($call217|0)==(0);
 if (!($tobool218)) {
  HEAP32[99090] = 1;
  _G_DeferedPlayDemo($demolumpname);
  _D_DoomLoop();
  STACKTOP = sp;return;
 }
 $call222 = (_M_CheckParmWithArgs(132678,1)|0);
 $tobool223 = ($call222|0)==(0);
 if (!($tobool223)) {
  _G_TimeDemo($demolumpname);
  _D_DoomLoop();
  STACKTOP = sp;return;
 }
 $63 = HEAP32[99050]|0;
 $cmp227 = ($63|0)>(-1);
 if ($cmp227) {
  $call231 = (_P_SaveGameFile($63)|0);
  (_M_StringCopy($file,$call231,256)|0);
  _G_LoadGame($file);
 }
 $64 = HEAP32[99088]|0;
 $cmp235 = ($64|0)==(3);
 do {
  if (!($cmp235)) {
   $65 = HEAP32[99049]|0;
   $66 = HEAP32[99094]|0;
   $67 = $66 | $65;
   $68 = ($67|0)==(0);
   if ($68) {
    HEAP32[99088] = 0;
    HEAP32[99039] = -1;
    HEAP32[99035] = 1;
    break;
   } else {
    $69 = HEAP32[99046]|0;
    $70 = HEAP32[99047]|0;
    $71 = HEAP32[99048]|0;
    _G_InitNew($69,$70,$71);
    break;
   }
  }
 } while(0);
 _D_DoomLoop();
 STACKTOP = sp;return;
}
function _D_Endoom() {
 var $0 = 0, $1 = 0, $call = 0, $cmp = 0, $or$cond$not = 0, $or$cond1 = 0, $tobool = 0, $tobool1 = 0, $tobool3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32143]|0;
 $tobool = ($0|0)==(0);
 $1 = HEAP32[99032]|0;
 $tobool1 = ($1|0)==(0);
 $or$cond$not = $tobool | $tobool1;
 $tobool3 = (0)!=(0);
 $or$cond1 = $or$cond$not | $tobool3;
 if ($or$cond1) {
  return;
 }
 $call = (_M_CheckParm(133258)|0);
 $cmp = ($call|0)>(0);
 if ($cmp) {
  return;
 } else {
  (_W_CacheLumpName(133555,1)|0);
  _exit(0);
  // unreachable;
 }
}
function _D_GameMissionString($mission) {
 $mission = $mission|0;
 var $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($mission|0) {
 case 8:  {
  $retval$0 = 133599;
  break;
 }
 case 0:  {
  $retval$0 = 155301;
  break;
 }
 case 1:  {
  $retval$0 = 155352;
  break;
 }
 case 2:  {
  $retval$0 = 133595;
  break;
 }
 case 3:  {
  $retval$0 = 133586;
  break;
 }
 case 5:  {
  $retval$0 = 133581;
  break;
 }
 case 4:  {
  $retval$0 = 133576;
  break;
 }
 case 6:  {
  $retval$0 = 133568;
  break;
 }
 case 7:  {
  $retval$0 = 133562;
  break;
 }
 default: {
  $retval$0 = 133606;
 }
 }
 return ($retval$0|0);
}
function _D_ConnectNetGame() {
 var $0 = 0, $1 = 0, $2 = 0, $arraydecay$i = 0, $call = 0, $call$i = 0, $call1 = 0, $call11$i = 0, $call11$lobit$i = 0, $call11$lobit$not$i = 0, $call2$i = 0, $call7$i = 0, $call9$i = 0, $cmp = 0, $cmp$i = 0, $cmp10$i = 0, $cmp3$i = 0, $cmp8$i = 0, $connect_data = 0, $drone$i = 0;
 var $gamemission$i = 0, $is_freedoom$i = 0, $lowres_turn$i = 0, $max_players$i = 0, $phitmp$i = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $connect_data = sp;
 $max_players$i = ((($connect_data)) + 16|0);
 HEAP32[$max_players$i>>2] = 4;
 $drone$i = ((($connect_data)) + 12|0);
 HEAP32[$drone$i>>2] = 0;
 $call$i = (_M_CheckParm(133611)|0);
 $cmp$i = ($call$i|0)>(0);
 if ($cmp$i) {
  HEAP32[99633] = 1073741824;
  HEAP32[$drone$i>>2] = 1;
 }
 $call2$i = (_M_CheckParm(133617)|0);
 $cmp3$i = ($call2$i|0)>(0);
 if ($cmp3$i) {
  HEAP32[99633] = -1073741824;
  HEAP32[$drone$i>>2] = 1;
 }
 $0 = HEAP32[32140]|0;
 HEAP32[$connect_data>>2] = $0;
 $1 = HEAP32[99015]|0;
 $gamemission$i = ((($connect_data)) + 4|0);
 HEAP32[$gamemission$i>>2] = $1;
 $call7$i = (_M_CheckParm(133624)|0);
 $cmp8$i = ($call7$i|0)>(0);
 if ($cmp8$i) {
  $call9$i = (_M_CheckParm(142740)|0);
  $cmp10$i = ($call9$i|0)==(0);
  $phitmp$i = $cmp10$i&1;
  $2 = $phitmp$i;
 } else {
  $2 = 0;
 }
 $lowres_turn$i = ((($connect_data)) + 8|0);
 HEAP32[$lowres_turn$i>>2] = $2;
 $arraydecay$i = ((($connect_data)) + 24|0);
 _W_Checksum($arraydecay$i);
 $call11$i = (_W_CheckNumForName(133632)|0);
 $call11$lobit$i = $call11$i >>> 31;
 $call11$lobit$not$i = $call11$lobit$i ^ 1;
 $is_freedoom$i = ((($connect_data)) + 20|0);
 HEAP32[$is_freedoom$i>>2] = $call11$lobit$not$i;
 $call = (_D_InitNetGame($connect_data)|0);
 HEAP32[99094] = $call;
 $call1 = (_M_CheckParm(142409)|0);
 $cmp = ($call1|0)>(0);
 $spec$store$select = $cmp ? 1 : $call;
 HEAP32[99094] = $spec$store$select;
 STACKTOP = sp;return;
}
function _D_CheckNetGame() {
 var $$pre = 0, $$pre12 = 0, $$pre13 = 0, $$pre14 = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $call$i = 0, $call1$i = 0, $call7 = 0, $cmp = 0, $cmp$i = 0, $cmp1$1$i = 0, $cmp1$2$i = 0, $cmp1$3$i = 0, $cmp1$i = 0, $cmp12 = 0, $cmp2$i = 0, $cmp5 = 0, $consoleplayer$i = 0, $conv$1$i = 0, $conv$2$i = 0, $conv$3$i = 0, $conv$i = 0, $deathmatch$i = 0, $episode$i = 0, $fast_monsters$i = 0;
 var $gameversion$i = 0, $loadgame$i = 0, $lowres_turn$i = 0, $map$i = 0, $nomonsters$i = 0, $num_players$i = 0, $or$cond = 0, $phitmp$i = 0, $respawn_monsters$i = 0, $settings = 0, $skill$i = 0, $timelimit$i = 0, $tobool = 0, $tobool$i = 0, $tobool3 = 0, $tobool8 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $settings = sp + 36|0;
 $0 = HEAP32[99094]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  HEAP32[99049] = 1;
 }
 _D_RegisterLoopCallbacks(128584);
 $1 = HEAP32[99091]|0;
 $deathmatch$i = ((($settings)) + 8|0);
 HEAP32[$deathmatch$i>>2] = $1;
 $2 = HEAP32[99047]|0;
 $episode$i = ((($settings)) + 12|0);
 HEAP32[$episode$i>>2] = $2;
 $3 = HEAP32[99048]|0;
 $map$i = ((($settings)) + 28|0);
 HEAP32[$map$i>>2] = $3;
 $4 = HEAP32[99046]|0;
 $skill$i = ((($settings)) + 32|0);
 HEAP32[$skill$i>>2] = $4;
 $5 = HEAP32[99050]|0;
 $loadgame$i = ((($settings)) + 52|0);
 HEAP32[$loadgame$i>>2] = $5;
 $6 = HEAP32[32141]|0;
 $gameversion$i = ((($settings)) + 36|0);
 HEAP32[$gameversion$i>>2] = $6;
 $7 = HEAP32[99040]|0;
 $nomonsters$i = ((($settings)) + 16|0);
 HEAP32[$nomonsters$i>>2] = $7;
 $8 = HEAP32[99042]|0;
 $fast_monsters$i = ((($settings)) + 20|0);
 HEAP32[$fast_monsters$i>>2] = $8;
 $9 = HEAP32[99041]|0;
 $respawn_monsters$i = ((($settings)) + 24|0);
 HEAP32[$respawn_monsters$i>>2] = $9;
 $10 = HEAP32[99167]|0;
 $timelimit$i = ((($settings)) + 48|0);
 HEAP32[$timelimit$i>>2] = $10;
 $call$i = (_M_CheckParm(133624)|0);
 $cmp$i = ($call$i|0)>(0);
 if ($cmp$i) {
  $call1$i = (_M_CheckParm(142740)|0);
  $cmp2$i = ($call1$i|0)==(0);
  $phitmp$i = $cmp2$i&1;
  $11 = $phitmp$i;
 } else {
  $11 = 0;
 }
 $lowres_turn$i = ((($settings)) + 40|0);
 HEAP32[$lowres_turn$i>>2] = $11;
 _D_StartNetGame($settings,0);
 $12 = HEAP32[$deathmatch$i>>2]|0;
 HEAP32[99091] = $12;
 $13 = HEAP32[$episode$i>>2]|0;
 HEAP32[99047] = $13;
 $14 = HEAP32[$map$i>>2]|0;
 HEAP32[99048] = $14;
 $15 = HEAP32[$skill$i>>2]|0;
 HEAP32[99046] = $15;
 $16 = HEAP32[$loadgame$i>>2]|0;
 HEAP32[99050] = $16;
 $17 = HEAP32[$lowres_turn$i>>2]|0;
 HEAP32[99083] = $17;
 $18 = HEAP32[$nomonsters$i>>2]|0;
 HEAP32[99040] = $18;
 $19 = HEAP32[$fast_monsters$i>>2]|0;
 HEAP32[99042] = $19;
 $20 = HEAP32[$respawn_monsters$i>>2]|0;
 HEAP32[99041] = $20;
 $21 = HEAP32[$timelimit$i>>2]|0;
 HEAP32[99167] = $21;
 $consoleplayer$i = ((($settings)) + 64|0);
 $22 = HEAP32[$consoleplayer$i>>2]|0;
 HEAP32[99076] = $22;
 $tobool$i = ($17|0)==(0);
 if ($tobool$i) {
  $24 = $15;$25 = $12;$26 = $14;$27 = $13;
 } else {
  (_puts(133641)|0);
  $$pre = HEAP32[99046]|0;
  $$pre12 = HEAP32[99091]|0;
  $$pre13 = HEAP32[99048]|0;
  $$pre14 = HEAP32[99047]|0;
  $24 = $$pre;$25 = $$pre12;$26 = $$pre13;$27 = $$pre14;
 }
 $num_players$i = ((($settings)) + 60|0);
 $23 = HEAP32[$num_players$i>>2]|0;
 $cmp1$i = ($23|0)!=(0);
 $conv$i = $cmp1$i&1;
 HEAP32[45416] = $conv$i;
 $cmp1$1$i = ($23>>>0)>(1);
 $conv$1$i = $cmp1$1$i&1;
 HEAP32[(181668)>>2] = $conv$1$i;
 $cmp1$2$i = ($23>>>0)>(2);
 $conv$2$i = $cmp1$2$i&1;
 HEAP32[(181672)>>2] = $conv$2$i;
 $cmp1$3$i = ($23>>>0)>(3);
 $conv$3$i = $cmp1$3$i&1;
 HEAP32[(181676)>>2] = $conv$3$i;
 HEAP32[$vararg_buffer>>2] = $24;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $25;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $26;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $27;
 (_printf(133747,$vararg_buffer)|0);
 $28 = HEAP32[99076]|0;
 $add = (($28) + 1)|0;
 $29 = HEAP32[$num_players$i>>2]|0;
 HEAP32[$vararg_buffer4>>2] = $add;
 $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $29;
 $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
 HEAP32[$vararg_ptr8>>2] = $29;
 (_printf(133810,$vararg_buffer4)|0);
 $30 = HEAP32[99167]|0;
 $cmp = ($30|0)>(0);
 $31 = HEAP32[99091]|0;
 $tobool3 = ($31|0)!=(0);
 $or$cond = $cmp & $tobool3;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $cmp5 = ($30|0)==(20);
 do {
  if ($cmp5) {
   $call7 = (_M_CheckParm(133838)|0);
   $tobool8 = ($call7|0)==(0);
   if ($tobool8) {
    $$pre15 = HEAP32[99167]|0;
    $32 = $$pre15;
    break;
   }
   (_puts(133843)|0);
   STACKTOP = sp;return;
  } else {
   $32 = $30;
  }
 } while(0);
 HEAP32[$vararg_buffer9>>2] = $32;
 (_printf(133899,$vararg_buffer9)|0);
 $33 = HEAP32[99167]|0;
 $cmp12 = ($33|0)>(1);
 if ($cmp12) {
  (_putchar(115)|0);
 }
 (_puts(158551)|0);
 STACKTOP = sp;return;
}
function _RunTic($cmds,$ingame) {
 $cmds = $cmds|0;
 $ingame = $ingame|0;
 var $$old = 0, $$pr = 0, $$pr10 = 0, $$pr12$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i$1 = 0, $add$i$2 = 0, $add$i$3 = 0, $arrayidx3$1 = 0, $arrayidx3$2 = 0, $arrayidx3$3 = 0, $conv1$i$1 = 0, $conv1$i$2 = 0, $conv1$i$3 = 0, $conv3$i$1 = 0, $conv3$i$2 = 0, $conv3$i$3 = 0, $message$i = 0, $message$i$1 = 0, $message$i$2 = 0;
 var $message$i$3 = 0, $or$cond = 0, $tobool = 0, $tobool$1 = 0, $tobool$2 = 0, $tobool$3 = 0, $tobool$i = 0, $tobool$i$1 = 0, $tobool$i$2 = 0, $tobool$i$3 = 0, $tobool1 = 0, $tobool1$1 = 0, $tobool1$2 = 0, $tobool1$3 = 0, $tobool1$3$old = 0, $tobool4 = 0, $tobool4$1 = 0, $tobool4$2 = 0, $tobool4$3 = 0, $tobool6 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99092]|0;
 $tobool = ($0|0)==(0);
 do {
  if ($tobool) {
   $1 = HEAP32[45416]|0;
   $tobool1 = ($1|0)==(0);
   if (!($tobool1)) {
    $2 = HEAP32[$ingame>>2]|0;
    $tobool4 = ($2|0)==(0);
    if ($tobool4) {
     (_M_StringCopy(181056,133931,80)|0);
     HEAP32[45416] = 0;
     $3 = HEAP32[99076]|0;
     $message$i = (((181680 + (($3*288)|0)|0)) + 224|0);
     HEAP32[$message$i>>2] = 181056;
     $4 = HEAP32[99093]|0;
     $tobool$i = ($4|0)==(0);
     if (!($tobool$i)) {
      (_G_CheckDemoStatus()|0);
     }
    }
    $$pr = HEAP32[99092]|0;
    $tobool$1 = ($$pr|0)==(0);
    if (!($tobool$1)) {
     break;
    }
   }
   $5 = HEAP32[(181668)>>2]|0;
   $tobool1$1 = ($5|0)==(0);
   if (!($tobool1$1)) {
    $arrayidx3$1 = ((($ingame)) + 4|0);
    $6 = HEAP32[$arrayidx3$1>>2]|0;
    $tobool4$1 = ($6|0)==(0);
    if ($tobool4$1) {
     (_M_StringCopy(181056,133931,80)|0);
     $7 = HEAP8[(181063)>>0]|0;
     $conv3$i$1 = $7&255;
     $add$i$1 = (($conv3$i$1) + 1)|0;
     $conv1$i$1 = $add$i$1&255;
     HEAP8[(181063)>>0] = $conv1$i$1;
     HEAP32[(181668)>>2] = 0;
     $8 = HEAP32[99076]|0;
     $message$i$1 = (((181680 + (($8*288)|0)|0)) + 224|0);
     HEAP32[$message$i$1>>2] = 181056;
     $9 = HEAP32[99093]|0;
     $tobool$i$1 = ($9|0)==(0);
     if (!($tobool$i$1)) {
      (_G_CheckDemoStatus()|0);
     }
    }
   }
   $$pr10 = HEAP32[99092]|0;
   $tobool$2 = ($$pr10|0)==(0);
   if ($tobool$2) {
    $10 = HEAP32[(181672)>>2]|0;
    $tobool1$2 = ($10|0)==(0);
    if ($tobool1$2) {
     $$old = HEAP32[(181676)>>2]|0;
     $tobool1$3$old = ($$old|0)==(0);
     if ($tobool1$3$old) {
      break;
     }
    } else {
     $arrayidx3$2 = ((($ingame)) + 8|0);
     $11 = HEAP32[$arrayidx3$2>>2]|0;
     $tobool4$2 = ($11|0)==(0);
     if ($tobool4$2) {
      (_M_StringCopy(181056,133931,80)|0);
      $12 = HEAP8[(181063)>>0]|0;
      $conv3$i$2 = $12&255;
      $add$i$2 = (($conv3$i$2) + 2)|0;
      $conv1$i$2 = $add$i$2&255;
      HEAP8[(181063)>>0] = $conv1$i$2;
      HEAP32[(181672)>>2] = 0;
      $13 = HEAP32[99076]|0;
      $message$i$2 = (((181680 + (($13*288)|0)|0)) + 224|0);
      HEAP32[$message$i$2>>2] = 181056;
      $14 = HEAP32[99093]|0;
      $tobool$i$2 = ($14|0)==(0);
      if (!($tobool$i$2)) {
       (_G_CheckDemoStatus()|0);
      }
     }
     $$pr12$pr = HEAP32[99092]|0;
     $tobool$3 = ($$pr12$pr|0)!=(0);
     $15 = HEAP32[(181676)>>2]|0;
     $tobool1$3 = ($15|0)==(0);
     $or$cond = $tobool$3 | $tobool1$3;
     if ($or$cond) {
      break;
     }
    }
    $arrayidx3$3 = ((($ingame)) + 12|0);
    $16 = HEAP32[$arrayidx3$3>>2]|0;
    $tobool4$3 = ($16|0)==(0);
    if ($tobool4$3) {
     (_M_StringCopy(181056,133931,80)|0);
     $17 = HEAP8[(181063)>>0]|0;
     $conv3$i$3 = $17&255;
     $add$i$3 = (($conv3$i$3) + 3)|0;
     $conv1$i$3 = $add$i$3&255;
     HEAP8[(181063)>>0] = $conv1$i$3;
     HEAP32[(181676)>>2] = 0;
     $18 = HEAP32[99076]|0;
     $message$i$3 = (((181680 + (($18*288)|0)|0)) + 224|0);
     HEAP32[$message$i$3>>2] = 181056;
     $19 = HEAP32[99093]|0;
     $tobool$i$3 = ($19|0)==(0);
     if (!($tobool$i$3)) {
      (_G_CheckDemoStatus()|0);
     }
    }
   }
  }
 } while(0);
 HEAP32[99057] = $cmds;
 $20 = HEAP32[99035]|0;
 $tobool6 = ($20|0)==(0);
 if ($tobool6) {
  _G_Ticker();
  return;
 }
 _D_DoAdvanceDemo();
 _G_Ticker();
 return;
}
function _F_StartFinale() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $background = 0, $background$us = 0, $background$us33 = 0, $cmp12 = 0, $cmp15 = 0, $cmp23 = 0, $cmp23$us = 0, $cmp23$us24 = 0, $cmp35 = 0, $cmp36$us = 0, $cmp36$us28 = 0, $cmp39 = 0, $cmp39$us = 0, $cmp39$us31 = 0, $cmp8 = 0, $cmp9$us = 0, $cond19 = 0, $cond21 = 0, $episode$us = 0;
 var $episode$us27 = 0, $exitcond = 0, $exitcond41 = 0, $exitcond42 = 0, $i$012 = 0, $i$012$us = 0, $i$012$us15 = 0, $inc = 0, $inc$us = 0, $inc$us37 = 0, $level$us = 0, $level38 = 0, $level38$us = 0, $level38$us30 = 0, $mission$us = 0, $mission22 = 0, $mission22$us23 = 0, $text = 0, $text$us = 0, $text$us34 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99088] = 0;
 HEAP32[99077] = 2;
 HEAP32[99152] = 0;
 HEAP32[98972] = 0;
 $0 = HEAP32[99015]|0;
 $1 = $0 | 4;
 $2 = ($1|0)==(4);
 if ($2) {
  _S_ChangeMusic(31,1);
 } else {
  _S_ChangeMusic(65,1);
 }
 $3 = HEAP32[32141]|0;
 $cmp8 = ($3|0)==(9);
 $4 = HEAP32[99015]|0;
 $cmp12 = ($4|0)==(4);
 $cmp15 = ($4|0)==(5);
 $cond19 = $cmp15 ? 1 : $4;
 $cond21 = $cmp12 ? 0 : $cond19;
 $cmp35 = ($cond21|0)==(0);
 $5 = HEAP32[99085]|0;
 $6 = HEAP32[99084]|0;
 if ($cmp8) {
  $i$012$us = 0;
  while(1) {
   $mission$us = (1440 + (($i$012$us*20)|0)|0);
   $7 = HEAP32[$mission$us>>2]|0;
   $cmp9$us = ($7|0)==(0);
   if ($cmp9$us) {
    $level$us = (((1440 + (($i$012$us*20)|0)|0)) + 8|0);
    HEAP32[$level$us>>2] = 5;
   }
   $cmp23$us = ($cond21|0)==($7|0);
   do {
    if ($cmp23$us) {
     if ($cmp35) {
      $episode$us = (((1440 + (($i$012$us*20)|0)|0)) + 4|0);
      $8 = HEAP32[$episode$us>>2]|0;
      $cmp36$us = ($5|0)==($8|0);
      if (!($cmp36$us)) {
       break;
      }
     }
     $level38$us = (((1440 + (($i$012$us*20)|0)|0)) + 8|0);
     $9 = HEAP32[$level38$us>>2]|0;
     $cmp39$us = ($6|0)==($9|0);
     if ($cmp39$us) {
      $background$us = (((1440 + (($i$012$us*20)|0)|0)) + 12|0);
      $text$us = (((1440 + (($i$012$us*20)|0)|0)) + 16|0);
      $10 = HEAP32[$text$us>>2]|0;
      HEAP32[99058] = $10;
      $11 = HEAP32[$background$us>>2]|0;
      HEAP32[99059] = $11;
     }
    }
   } while(0);
   $inc$us = (($i$012$us) + 1)|0;
   $exitcond = ($inc$us|0)==(22);
   if ($exitcond) {
    break;
   } else {
    $i$012$us = $inc$us;
   }
  }
  HEAP32[99060] = 0;
  HEAP32[99061] = 0;
  return;
 }
 if (!($cmp35)) {
  $i$012 = 0;
  while(1) {
   $mission22 = (1440 + (($i$012*20)|0)|0);
   $17 = HEAP32[$mission22>>2]|0;
   $cmp23 = ($cond21|0)==($17|0);
   if ($cmp23) {
    $level38 = (((1440 + (($i$012*20)|0)|0)) + 8|0);
    $18 = HEAP32[$level38>>2]|0;
    $cmp39 = ($6|0)==($18|0);
    if ($cmp39) {
     $background = (((1440 + (($i$012*20)|0)|0)) + 12|0);
     $text = (((1440 + (($i$012*20)|0)|0)) + 16|0);
     $19 = HEAP32[$text>>2]|0;
     HEAP32[99058] = $19;
     $20 = HEAP32[$background>>2]|0;
     HEAP32[99059] = $20;
    }
   }
   $inc = (($i$012) + 1)|0;
   $exitcond42 = ($inc|0)==(22);
   if ($exitcond42) {
    break;
   } else {
    $i$012 = $inc;
   }
  }
  HEAP32[99060] = 0;
  HEAP32[99061] = 0;
  return;
 }
 $i$012$us15 = 0;
 while(1) {
  $mission22$us23 = (1440 + (($i$012$us15*20)|0)|0);
  $12 = HEAP32[$mission22$us23>>2]|0;
  $cmp23$us24 = ($12|0)==(0);
  if ($cmp23$us24) {
   $episode$us27 = (((1440 + (($i$012$us15*20)|0)|0)) + 4|0);
   $13 = HEAP32[$episode$us27>>2]|0;
   $cmp36$us28 = ($5|0)==($13|0);
   if ($cmp36$us28) {
    $level38$us30 = (((1440 + (($i$012$us15*20)|0)|0)) + 8|0);
    $14 = HEAP32[$level38$us30>>2]|0;
    $cmp39$us31 = ($6|0)==($14|0);
    if ($cmp39$us31) {
     $background$us33 = (((1440 + (($i$012$us15*20)|0)|0)) + 12|0);
     $text$us34 = (((1440 + (($i$012$us15*20)|0)|0)) + 16|0);
     $15 = HEAP32[$text$us34>>2]|0;
     HEAP32[99058] = $15;
     $16 = HEAP32[$background$us33>>2]|0;
     HEAP32[99059] = $16;
    }
   }
  }
  $inc$us37 = (($i$012$us15) + 1)|0;
  $exitcond41 = ($inc$us37|0)==(22);
  if ($exitcond41) {
   break;
  } else {
   $i$012$us15 = $inc$us37;
  }
 }
 HEAP32[99060] = 0;
 HEAP32[99061] = 0;
 return;
}
function _F_Responder($event) {
 $event = $event|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx5$i = 0, $cmp = 0, $cmp$i = 0, $deathsound$i = 0, $deathstate$i = 0, $retval$0 = 0, $tics$i = 0, $tobool$i = 0, $tobool9$i = 0, $type3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99060]|0;
 $cmp = ($0|0)==(2);
 if (!($cmp)) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $1 = HEAP32[$event>>2]|0;
 $cmp$i = ($1|0)==(0);
 if (!($cmp$i)) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $2 = HEAP32[99065]|0;
 $tobool$i = ($2|0)==(0);
 if (!($tobool$i)) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 HEAP32[99065] = 1;
 $3 = HEAP32[99062]|0;
 $type3$i = (((1296 + ($3<<3)|0)) + 4|0);
 $4 = HEAP32[$type3$i>>2]|0;
 $deathstate$i = (((30576 + (($4*92)|0)|0)) + 48|0);
 $5 = HEAP32[$deathstate$i>>2]|0;
 $arrayidx5$i = (3488 + (($5*28)|0)|0);
 HEAP32[99063] = $arrayidx5$i;
 $tics$i = (((3488 + (($5*28)|0)|0)) + 8|0);
 $6 = HEAP32[$tics$i>>2]|0;
 HEAP32[99064] = $6;
 HEAP32[99066] = 0;
 HEAP32[99068] = 0;
 $deathsound$i = (((30576 + (($4*92)|0)|0)) + 56|0);
 $7 = HEAP32[$deathsound$i>>2]|0;
 $tobool9$i = ($7|0)==(0);
 if ($tobool9$i) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 _S_StartSound(0,$7);
 $retval$0 = 1;
 return ($retval$0|0);
}
function _F_Ticker() {
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $arrayidx2$i = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp15 = 0, $cmp18 = 0, $cmp20 = 0, $cmp22 = 0, $cmp6 = 0, $inc11 = 0, $mul = 0, $or$cond = 0, $or$cond5 = 0, $seestate$i = 0, $tics$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32140]|0;
 $cmp = ($0|0)==(2);
 $1 = HEAP32[99061]|0;
 $cmp1 = ($1>>>0)>(50);
 $or$cond = $cmp & $cmp1;
 do {
  if ($or$cond) {
   $2 = HEAP8[(181693)>>0]|0;
   $3 = HEAP8[(181981)>>0]|0;
   $4 = $2 | $3;
   $5 = HEAP8[(182269)>>0]|0;
   $6 = $4 | $5;
   $7 = HEAP8[(182557)>>0]|0;
   $8 = $6 | $7;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $13 = $1;
   } else {
    $10 = HEAP32[99084]|0;
    $cmp6 = ($10|0)==(30);
    if ($cmp6) {
     HEAP32[32144] = -1;
     HEAP32[99062] = 0;
     $seestate$i = 30680;
     $11 = HEAP32[$seestate$i>>2]|0;
     $arrayidx2$i = (3488 + (($11*28)|0)|0);
     HEAP32[99063] = $arrayidx2$i;
     $tics$i = (((3488 + (($11*28)|0)|0)) + 8|0);
     $12 = HEAP32[$tics$i>>2]|0;
     HEAP32[99064] = $12;
     HEAP32[99065] = 0;
     HEAP32[99060] = 2;
     HEAP32[99066] = 0;
     HEAP32[99067] = 0;
     HEAP32[99068] = 0;
     _S_ChangeMusic(63,1);
     $$pre = HEAP32[99061]|0;
     $13 = $$pre;
     break;
    } else {
     HEAP32[99088] = 8;
     $13 = $1;
     break;
    }
   }
  } else {
   $13 = $1;
  }
 } while(0);
 $inc11 = (($13) + 1)|0;
 HEAP32[99061] = $inc11;
 $14 = HEAP32[99060]|0;
 $cmp12 = ($14|0)==(2);
 if ($cmp12) {
  _F_CastTicker();
  return;
 }
 $15 = HEAP32[32140]|0;
 $cmp15 = ($15|0)!=(2);
 $cmp18 = ($14|0)==(0);
 $or$cond5 = $cmp18 & $cmp15;
 if (!($or$cond5)) {
  return;
 }
 $16 = HEAP32[99058]|0;
 $call = (_strlen($16)|0);
 $mul = ($call*3)|0;
 $add = (($mul) + 250)|0;
 $cmp20 = ($inc11>>>0)>($add>>>0);
 if (!($cmp20)) {
  return;
 }
 HEAP32[99061] = 0;
 HEAP32[99060] = 1;
 HEAP32[32144] = -1;
 $17 = HEAP32[99085]|0;
 $cmp22 = ($17|0)==(3);
 if (!($cmp22)) {
  return;
 }
 _S_StartMusic(30);
 return;
}
function _F_CastTicker() {
 var $$pn = 0, $$pn$in = 0, $$pr = 0, $$pre = 0, $$pre8 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx18 = 0, $arrayidx23 = 0, $arrayidx67 = 0, $arrayidx73 = 0, $arrayidx85 = 0;
 var $arrayidx92 = 0, $cmp = 0, $cmp1 = 0, $cmp19 = 0, $cmp2 = 0, $cmp4 = 0, $cmp45 = 0, $cmp59 = 0, $cmp79 = 0, $cmp86 = 0, $cmp96 = 0, $dec = 0, $inc = 0, $inc24 = 0, $meleestate = 0, $missilestate = 0, $name = 0, $nextstate = 0, $seesound = 0, $seestate = 0;
 var $seestate84 = 0, $seestate91 = 0, $sfx$0$ph = 0, $spec$store$select = 0, $storemerge = 0, $tics = 0, $tics95 = 0, $tobool = 0, $tobool47 = 0, $tobool61 = 0, $tobool77 = 0, $type = 0, $type16$phi$trans$insert = 0, $type50 = 0, $type82 = 0, $type89 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99064]|0;
 $dec = (($0) + -1)|0;
 HEAP32[99064] = $dec;
 $cmp = ($0|0)>(1);
 if ($cmp) {
  return;
 }
 $1 = HEAP32[99063]|0;
 $tics = ((($1)) + 8|0);
 $2 = HEAP32[$tics>>2]|0;
 $cmp1 = ($2|0)==(-1);
 do {
  if ($cmp1) {
   label = 4;
  } else {
   $nextstate = ((($1)) + 16|0);
   $3 = HEAP32[$nextstate>>2]|0;
   $cmp2 = ($3|0)==(0);
   if ($cmp2) {
    label = 4;
   } else {
    $cmp19 = ($1|0)==((7800)|0);
    if ($cmp19) {
     label = 37;
    } else {
     $arrayidx23 = (3488 + (($3*28)|0)|0);
     HEAP32[99063] = $arrayidx23;
     $11 = HEAP32[99066]|0;
     $inc24 = (($11) + 1)|0;
     HEAP32[99066] = $inc24;
     do {
      switch ($3|0) {
      case 154:  {
       $sfx$0$ph = 4;
       label = 27;
       break;
      }
      case 185:  {
       $sfx$0$ph = 1;
       label = 27;
       break;
      }
      case 218:  {
       $sfx$0$ph = 2;
       label = 27;
       break;
      }
      case 256:  {
       $sfx$0$ph = 54;
       label = 27;
       break;
      }
      case 336:  {
       $sfx$0$ph = 56;
       label = 27;
       break;
      }
      case 338:  {
       $sfx$0$ph = 53;
       label = 27;
       break;
      }
      case 340:  {
       $sfx$0$ph = 107;
       label = 27;
       break;
      }
      case 377: case 380: case 383:  {
       $sfx$0$ph = 16;
       label = 27;
       break;
      }
      case 419: case 418: case 417:  {
       $sfx$0$ph = 2;
       label = 27;
       break;
      }
      case 454:  {
       $sfx$0$ph = 55;
       label = 27;
       break;
      }
      case 486:  {
       $sfx$0$ph = 52;
       label = 27;
       break;
      }
      case 505: case 567: case 538:  {
       $sfx$0$ph = 16;
       label = 27;
       break;
      }
      case 590:  {
       $sfx$0$ph = 51;
       label = 27;
       break;
      }
      case 617: case 616:  {
       $sfx$0$ph = 2;
       label = 27;
       break;
      }
      case 648:  {
       $sfx$0$ph = 8;
       label = 27;
       break;
      }
      case 689: case 687: case 685:  {
       $sfx$0$ph = 14;
       label = 27;
       break;
      }
      case 710:  {
       $sfx$0$ph = 51;
       label = 27;
       break;
      }
      default: {
       $12 = $inc24;
      }
      }
     } while(0);
     if ((label|0) == 27) {
      _S_StartSound(0,$sfx$0$ph);
      $$pr = HEAP32[99066]|0;
      $12 = $$pr;
     }
     $cmp45 = ($12|0)==(12);
     if ($cmp45) {
      HEAP32[99068] = 1;
      $13 = HEAP32[99067]|0;
      $tobool47 = ($13|0)==(0);
      $14 = HEAP32[99062]|0;
      $type50 = (((1296 + ($14<<3)|0)) + 4|0);
      $15 = HEAP32[$type50>>2]|0;
      $missilestate = (((30576 + (($15*92)|0)|0)) + 44|0);
      $meleestate = (((30576 + (($15*92)|0)|0)) + 40|0);
      $$pn$in = $tobool47 ? $missilestate : $meleestate;
      $$pn = HEAP32[$$pn$in>>2]|0;
      $storemerge = (3488 + (($$pn*28)|0)|0);
      HEAP32[99063] = $storemerge;
      $xor = $13 ^ 1;
      HEAP32[99067] = $xor;
      $cmp59 = ($$pn|0)==(0);
      if ($cmp59) {
       $tobool61 = ($xor|0)==(0);
       if ($tobool61) {
        $17 = HEAP32[$missilestate>>2]|0;
        $arrayidx73 = (3488 + (($17*28)|0)|0);
        HEAP32[99063] = $arrayidx73;
        $19 = 12;
        label = 33;
        break;
       } else {
        $16 = HEAP32[$meleestate>>2]|0;
        $arrayidx67 = (3488 + (($16*28)|0)|0);
        HEAP32[99063] = $arrayidx67;
        $19 = 12;
        label = 33;
        break;
       }
      } else {
       $19 = 12;
       label = 33;
      }
     } else {
      $19 = $12;
      label = 33;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $4 = HEAP32[99062]|0;
  $inc = (($4) + 1)|0;
  HEAP32[99062] = $inc;
  HEAP32[99065] = 0;
  $name = (1296 + ($inc<<3)|0);
  $5 = HEAP32[$name>>2]|0;
  $cmp4 = ($5|0)==(0|0);
  if ($cmp4) {
   HEAP32[99062] = 0;
   $6 = 0;
  } else {
   $6 = $inc;
  }
  $type = (((1296 + ($6<<3)|0)) + 4|0);
  $7 = HEAP32[$type>>2]|0;
  $seesound = (((30576 + (($7*92)|0)|0)) + 16|0);
  $8 = HEAP32[$seesound>>2]|0;
  $tobool = ($8|0)==(0);
  if ($tobool) {
   $9 = $7;
  } else {
   _S_StartSound(0,$8);
   $$pre = HEAP32[99062]|0;
   $type16$phi$trans$insert = (((1296 + ($$pre<<3)|0)) + 4|0);
   $$pre8 = HEAP32[$type16$phi$trans$insert>>2]|0;
   $9 = $$pre8;
  }
  $seestate = (((30576 + (($9*92)|0)|0)) + 12|0);
  $10 = HEAP32[$seestate>>2]|0;
  $arrayidx18 = (3488 + (($10*28)|0)|0);
  HEAP32[99063] = $arrayidx18;
  HEAP32[99066] = 0;
  $19 = 0;
  label = 33;
 }
 do {
  if ((label|0) == 33) {
   $18 = HEAP32[99068]|0;
   $tobool77 = ($18|0)==(0);
   if ($tobool77) {
    $$pre9 = HEAP32[99063]|0;
    $27 = $$pre9;
    break;
   }
   $cmp79 = ($19|0)==(24);
   if ($cmp79) {
    label = 37;
   } else {
    $20 = HEAP32[99063]|0;
    $21 = HEAP32[99062]|0;
    $type82 = (((1296 + ($21<<3)|0)) + 4|0);
    $22 = HEAP32[$type82>>2]|0;
    $seestate84 = (((30576 + (($22*92)|0)|0)) + 12|0);
    $23 = HEAP32[$seestate84>>2]|0;
    $arrayidx85 = (3488 + (($23*28)|0)|0);
    $cmp86 = ($20|0)==($arrayidx85|0);
    if ($cmp86) {
     label = 37;
    } else {
     $27 = $20;
    }
   }
  }
 } while(0);
 if ((label|0) == 37) {
  HEAP32[99068] = 0;
  HEAP32[99066] = 0;
  $24 = HEAP32[99062]|0;
  $type89 = (((1296 + ($24<<3)|0)) + 4|0);
  $25 = HEAP32[$type89>>2]|0;
  $seestate91 = (((30576 + (($25*92)|0)|0)) + 12|0);
  $26 = HEAP32[$seestate91>>2]|0;
  $arrayidx92 = (3488 + (($26*28)|0)|0);
  HEAP32[99063] = $arrayidx92;
  $27 = $arrayidx92;
 }
 $tics95 = ((($27)) + 8|0);
 $28 = HEAP32[$tics95>>2]|0;
 $cmp96 = ($28|0)==(-1);
 $spec$store$select = $cmp96 ? 15 : $28;
 HEAP32[99064] = $spec$store$select;
 return;
}
function _F_TextWrite() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr4 = 0, $add$ptr4$1 = 0, $add$ptr4$2 = 0, $add$ptr4$3 = 0, $add25 = 0, $add28 = 0, $and = 0, $arrayidx = 0;
 var $call = 0, $call18 = 0, $call18$off = 0, $ch$030 = 0, $cmp29 = 0, $conv = 0, $conv27 = 0, $count$029 = 0, $cx$031 = 0, $cx$1 = 0, $cy$032 = 0, $cy$1 = 0, $dec = 0, $dest$036 = 0, $div = 0, $exitcond = 0, $inc6 = 0, $incdec$ptr = 0, $scevgep = 0, $shl = 0;
 var $sub = 0, $sub$off = 0, $tobool = 0, $tobool28 = 0, $y$035 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[99059]|0;
 $call = (_W_CacheLumpName($0,8)|0);
 $1 = HEAP32[99853]|0;
 $dest$036 = $1;$y$035 = 0;
 while(1) {
  $and = $y$035 << 6;
  $shl = $and & 4032;
  $add$ptr = (($call) + ($shl)|0);
  dest=$dest$036; src=$add$ptr; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $add$ptr4 = ((($dest$036)) + 64|0);
  dest=$add$ptr4; src=$add$ptr; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $add$ptr4$1 = ((($dest$036)) + 128|0);
  dest=$add$ptr4$1; src=$add$ptr; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $add$ptr4$2 = ((($dest$036)) + 192|0);
  dest=$add$ptr4$2; src=$add$ptr; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $add$ptr4$3 = ((($dest$036)) + 256|0);
  dest=$add$ptr4$3; src=$add$ptr; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $scevgep = ((($dest$036)) + 320|0);
  $inc6 = (($y$035) + 1)|0;
  $exitcond = ($inc6|0)==(200);
  if ($exitcond) {
   break;
  } else {
   $dest$036 = $scevgep;$y$035 = $inc6;
  }
 }
 _V_MarkRect(0,0,320,200);
 $2 = HEAP32[99061]|0;
 $3 = ($2|0)<(13);
 $sub$off = (($2) + -8)|0;
 $4 = ($sub$off>>>0)<(5);
 $tobool28 = $4 | $3;
 if ($tobool28) {
  return;
 }
 $sub = (($2) + -10)|0;
 $div = (($sub|0) / 3)&-1;
 $5 = HEAP32[99058]|0;
 $ch$030 = $5;$count$029 = $div;$cx$031 = 10;$cy$032 = 10;
 L7: while(1) {
  $incdec$ptr = ((($ch$030)) + 1|0);
  $6 = HEAP8[$ch$030>>0]|0;
  L9: do {
   switch ($6<<24>>24) {
   case 0:  {
    label = 12;
    break L7;
    break;
   }
   case 10:  {
    $add = (($cy$032) + 11)|0;
    $cx$1 = 10;$cy$1 = $add;
    break;
   }
   default: {
    $conv = $6 << 24 >> 24;
    $call18 = (_toupper($conv)|0);
    $call18$off = (($call18) + -33)|0;
    $7 = ($call18$off>>>0)>(63);
    if ($7) {
     $add25 = (($cx$031) + 4)|0;
     $cx$1 = $add25;$cy$1 = $cy$032;
     break L9;
    }
    $arrayidx = (184512 + ($call18$off<<2)|0);
    $8 = HEAP32[$arrayidx>>2]|0;
    $9 = HEAPU8[$8>>0]|(HEAPU8[$8+1>>0]<<8);
    $conv27 = $9 << 16 >> 16;
    $add28 = (($cx$031) + ($conv27))|0;
    $cmp29 = ($add28|0)>(320);
    if ($cmp29) {
     label = 12;
     break L7;
    }
    _V_DrawPatch($cx$031,$cy$032,$8);
    $cx$1 = $add28;$cy$1 = $cy$032;
   }
   }
  } while(0);
  $dec = (($count$029) + -1)|0;
  $tobool = ($dec|0)==(0);
  if ($tobool) {
   label = 12;
   break;
  } else {
   $ch$030 = $incdec$ptr;$count$029 = $dec;$cx$031 = $cx$1;$cy$032 = $cy$1;
  }
 }
 if ((label|0) == 12) {
  return;
 }
}
function _F_CastDrawer() {
 var $$pn = 0, $$pn15 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $add33$i = 0, $add9$i = 0, $and = 0, $arrayidx$i = 0, $arrayidx29$i = 0, $arrayidx4 = 0, $arrayidx6 = 0, $call = 0, $call$i = 0, $call$off$i = 0, $call19$i = 0, $call19$off$i = 0, $call8 = 0, $conv = 0, $conv$i = 0, $conv15$i = 0;
 var $conv31$i = 0, $conv31$i$sink = 0, $conv8$i = 0, $conv8$i$sink = 0, $cx$028$i9 = 0, $div$i = 0, $frame = 0, $incdec$ptr$i14 = 0, $incdec$ptr14$i10 = 0, $name = 0, $spriteframes = 0, $sub10$i = 0, $tobool = 0, $tobool1$i = 0, $tobool1$i12 = 0, $tobool16$i = 0, $tobool29$i = 0, $width$031$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_CacheLumpName(141837,8)|0);
 _V_DrawPatch(0,0,$call);
 $0 = HEAP32[99062]|0;
 $name = (1296 + ($0<<3)|0);
 $1 = HEAP32[$name>>2]|0;
 $tobool29$i = ($1|0)==(0|0);
 if (!($tobool29$i)) {
  $2 = HEAP8[$1>>0]|0;
  $tobool1$i12 = ($2<<24>>24)==(0);
  if (!($tobool1$i12)) {
   $$pn = $1;$3 = $2;$width$031$i13 = 0;
   while(1) {
    $incdec$ptr$i14 = ((($$pn)) + 1|0);
    $conv$i = $3 << 24 >> 24;
    $call$i = (_toupper($conv$i)|0);
    $call$off$i = (($call$i) + -33)|0;
    $4 = ($call$off$i>>>0)>(63);
    if ($4) {
     $conv8$i$sink = 4;
    } else {
     $arrayidx$i = (184512 + ($call$off$i<<2)|0);
     $6 = HEAP32[$arrayidx$i>>2]|0;
     $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8);
     $conv8$i = $7 << 16 >> 16;
     $conv8$i$sink = $conv8$i;
    }
    $add9$i = (($width$031$i13) + ($conv8$i$sink))|0;
    $5 = HEAP8[$incdec$ptr$i14>>0]|0;
    $tobool1$i = ($5<<24>>24)==(0);
    if ($tobool1$i) {
     break;
    } else {
     $$pn = $incdec$ptr$i14;$3 = $5;$width$031$i13 = $add9$i;
    }
   }
   if (!($tobool1$i12)) {
    $div$i = (($add9$i|0) / 2)&-1;
    $sub10$i = (160 - ($div$i))|0;
    $$pn15 = $1;$8 = $2;$cx$028$i9 = $sub10$i;
    while(1) {
     $incdec$ptr14$i10 = ((($$pn15)) + 1|0);
     $conv15$i = $8 << 24 >> 24;
     $call19$i = (_toupper($conv15$i)|0);
     $call19$off$i = (($call19$i) + -33)|0;
     $9 = ($call19$off$i>>>0)>(63);
     if ($9) {
      $conv31$i$sink = 4;
     } else {
      $arrayidx29$i = (184512 + ($call19$off$i<<2)|0);
      $11 = HEAP32[$arrayidx29$i>>2]|0;
      $12 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8);
      $conv31$i = $12 << 16 >> 16;
      _V_DrawPatch($cx$028$i9,180,$11);
      $conv31$i$sink = $conv31$i;
     }
     $add33$i = (($cx$028$i9) + ($conv31$i$sink))|0;
     $10 = HEAP8[$incdec$ptr14$i10>>0]|0;
     $tobool16$i = ($10<<24>>24)==(0);
     if ($tobool16$i) {
      break;
     } else {
      $$pn15 = $incdec$ptr14$i10;$8 = $10;$cx$028$i9 = $add33$i;
     }
    }
   }
  }
 }
 $13 = HEAP32[99687]|0;
 $14 = HEAP32[99063]|0;
 $15 = HEAP32[$14>>2]|0;
 $spriteframes = (((($13) + ($15<<3)|0)) + 4|0);
 $16 = HEAP32[$spriteframes>>2]|0;
 $frame = ((($14)) + 4|0);
 $17 = HEAP32[$frame>>2]|0;
 $and = $17 & 32767;
 $arrayidx4 = (((($16) + (($and*28)|0)|0)) + 4|0);
 $18 = HEAP16[$arrayidx4>>1]|0;
 $conv = $18 << 16 >> 16;
 $arrayidx6 = (((($16) + (($and*28)|0)|0)) + 20|0);
 $19 = HEAP8[$arrayidx6>>0]|0;
 $20 = HEAP32[99578]|0;
 $add = (($20) + ($conv))|0;
 $call8 = (_W_CacheLumpNum($add,8)|0);
 $tobool = ($19<<24>>24)==(0);
 if ($tobool) {
  _V_DrawPatch(160,170,$call8);
  return;
 } else {
  _V_DrawPatchFlipped(160,170,$call8);
  return;
 }
}
function _F_BunnyScroll() {
 var $$pre$i = 0, $$pre$i42 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr$i = 0, $add$ptr$i21 = 0, $add$ptr1$i = 0, $add$ptr1$i22 = 0, $add$ptr10$i = 0, $add$ptr10$i39 = 0, $add$ptr13$i = 0, $add$ptr13$i45 = 0, $add$ptr14$i = 0, $add$ptr14$i46 = 0, $add$ptr3$i = 0, $add$ptr3$i32 = 0, $add$ptr6$i = 0;
 var $add$ptr6$i31 = 0, $arrayidx$i = 0, $arrayidx$i20 = 0, $call = 0, $call1 = 0, $call18 = 0, $call30 = 0, $cmp$i = 0, $cmp$i47 = 0, $cmp13 = 0, $cmp16 = 0, $cmp17$i = 0, $cmp17$i23 = 0, $cmp25 = 0, $cmp7 = 0, $column$0$in18$i = 0, $column$0$in18$i25 = 0, $conv$i = 0, $conv$i29 = 0, $conv12$i = 0;
 var $conv12$i44 = 0, $conv7$i = 0, $conv7$i28 = 0, $count$016$i = 0, $count$016$i34 = 0, $dec$i = 0, $dec$i37 = 0, $dest$015$i = 0, $dest$015$i35 = 0, $div = 0, $div21 = 0, $exitcond = 0, $inc = 0, $incdec$ptr$i = 0, $incdec$ptr$i38 = 0, $mul$i = 0, $mul$i30 = 0, $name = 0, $source$014$i = 0, $source$014$i36 = 0;
 var $spec$store$select = 0, $spec$store$select1 = 0, $spec$store$select2 = 0, $sub = 0, $sub11 = 0, $sub2 = 0, $sub20 = 0, $tobool$i = 0, $tobool$i40 = 0, $tobool13$i = 0, $tobool13$i26 = 0, $vararg_buffer = 0, $x$051 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $name = sp + 4|0;
 $call = (_W_CacheLumpName(141846,5)|0);
 $call1 = (_W_CacheLumpName(141852,5)|0);
 _V_MarkRect(0,0,320,200);
 $0 = HEAP32[99061]|0;
 $sub = (($0) + -230)|0;
 $div = (($sub|0) / 2)&-1;
 $sub2 = (320 - ($div))|0;
 $1 = ($sub2|0)<(320);
 $spec$store$select = $1 ? $sub2 : 320;
 $2 = ($spec$store$select|0)>(0);
 $spec$store$select2 = $2 ? $spec$store$select : 0;
 $x$051 = 0;
 while(1) {
  $add = (($x$051) + ($spec$store$select2))|0;
  $cmp7 = ($add>>>0)<(320);
  if ($cmp7) {
   $arrayidx$i = (((($call)) + 8|0) + ($add<<2)|0);
   $3 = HEAPU8[$arrayidx$i>>0]|(HEAPU8[$arrayidx$i+1>>0]<<8)|(HEAPU8[$arrayidx$i+2>>0]<<16)|(HEAPU8[$arrayidx$i+3>>0]<<24);
   $add$ptr$i = (($call) + ($3)|0);
   $4 = HEAP32[99853]|0;
   $add$ptr1$i = (($4) + ($x$051)|0);
   $5 = HEAP8[$add$ptr$i>>0]|0;
   $cmp17$i = ($5<<24>>24)==(-1);
   if (!($cmp17$i)) {
    $8 = $5;$column$0$in18$i = $add$ptr$i;
    while(1) {
     $6 = ((($column$0$in18$i)) + 1|0);
     $7 = HEAP8[$6>>0]|0;
     $tobool13$i = ($7<<24>>24)==(0);
     if ($tobool13$i) {
      $10 = 0;
     } else {
      $conv7$i = $7&255;
      $conv$i = $8&255;
      $mul$i = ($conv$i*320)|0;
      $add$ptr6$i = (($add$ptr1$i) + ($mul$i)|0);
      $add$ptr3$i = ((($column$0$in18$i)) + 3|0);
      $count$016$i = $conv7$i;$dest$015$i = $add$ptr6$i;$source$014$i = $add$ptr3$i;
      while(1) {
       $dec$i = (($count$016$i) + -1)|0;
       $incdec$ptr$i = ((($source$014$i)) + 1|0);
       $9 = HEAP8[$source$014$i>>0]|0;
       HEAP8[$dest$015$i>>0] = $9;
       $add$ptr10$i = ((($dest$015$i)) + 320|0);
       $tobool$i = ($dec$i|0)==(0);
       if ($tobool$i) {
        break;
       } else {
        $count$016$i = $dec$i;$dest$015$i = $add$ptr10$i;$source$014$i = $incdec$ptr$i;
       }
      }
      $$pre$i = HEAP8[$6>>0]|0;
      $10 = $$pre$i;
     }
     $conv12$i = $10&255;
     $add$ptr13$i = (($column$0$in18$i) + ($conv12$i)|0);
     $add$ptr14$i = ((($add$ptr13$i)) + 4|0);
     $11 = HEAP8[$add$ptr14$i>>0]|0;
     $cmp$i = ($11<<24>>24)==(-1);
     if ($cmp$i) {
      break;
     } else {
      $8 = $11;$column$0$in18$i = $add$ptr14$i;
     }
    }
   }
  } else {
   $sub11 = (($add) + -320)|0;
   $arrayidx$i20 = (((($call1)) + 8|0) + ($sub11<<2)|0);
   $12 = HEAPU8[$arrayidx$i20>>0]|(HEAPU8[$arrayidx$i20+1>>0]<<8)|(HEAPU8[$arrayidx$i20+2>>0]<<16)|(HEAPU8[$arrayidx$i20+3>>0]<<24);
   $add$ptr$i21 = (($call1) + ($12)|0);
   $13 = HEAP32[99853]|0;
   $add$ptr1$i22 = (($13) + ($x$051)|0);
   $14 = HEAP8[$add$ptr$i21>>0]|0;
   $cmp17$i23 = ($14<<24>>24)==(-1);
   if (!($cmp17$i23)) {
    $17 = $14;$column$0$in18$i25 = $add$ptr$i21;
    while(1) {
     $15 = ((($column$0$in18$i25)) + 1|0);
     $16 = HEAP8[$15>>0]|0;
     $tobool13$i26 = ($16<<24>>24)==(0);
     if ($tobool13$i26) {
      $19 = 0;
     } else {
      $conv7$i28 = $16&255;
      $conv$i29 = $17&255;
      $mul$i30 = ($conv$i29*320)|0;
      $add$ptr6$i31 = (($add$ptr1$i22) + ($mul$i30)|0);
      $add$ptr3$i32 = ((($column$0$in18$i25)) + 3|0);
      $count$016$i34 = $conv7$i28;$dest$015$i35 = $add$ptr6$i31;$source$014$i36 = $add$ptr3$i32;
      while(1) {
       $dec$i37 = (($count$016$i34) + -1)|0;
       $incdec$ptr$i38 = ((($source$014$i36)) + 1|0);
       $18 = HEAP8[$source$014$i36>>0]|0;
       HEAP8[$dest$015$i35>>0] = $18;
       $add$ptr10$i39 = ((($dest$015$i35)) + 320|0);
       $tobool$i40 = ($dec$i37|0)==(0);
       if ($tobool$i40) {
        break;
       } else {
        $count$016$i34 = $dec$i37;$dest$015$i35 = $add$ptr10$i39;$source$014$i36 = $incdec$ptr$i38;
       }
      }
      $$pre$i42 = HEAP8[$15>>0]|0;
      $19 = $$pre$i42;
     }
     $conv12$i44 = $19&255;
     $add$ptr13$i45 = (($column$0$in18$i25) + ($conv12$i44)|0);
     $add$ptr14$i46 = ((($add$ptr13$i45)) + 4|0);
     $20 = HEAP8[$add$ptr14$i46>>0]|0;
     $cmp$i47 = ($20<<24>>24)==(-1);
     if ($cmp$i47) {
      break;
     } else {
      $17 = $20;$column$0$in18$i25 = $add$ptr14$i46;
     }
    }
   }
  }
  $inc = (($x$051) + 1)|0;
  $exitcond = ($inc|0)==(320);
  if ($exitcond) {
   break;
  } else {
   $x$051 = $inc;
  }
 }
 $21 = HEAP32[99061]|0;
 $cmp13 = ($21>>>0)<(1130);
 if ($cmp13) {
  STACKTOP = sp;return;
 }
 $cmp16 = ($21>>>0)<(1180);
 if ($cmp16) {
  $call18 = (_W_CacheLumpName(141858,8)|0);
  _V_DrawPatch(108,68,$call18);
  HEAP32[99069] = 0;
  STACKTOP = sp;return;
 }
 $sub20 = (($21) + -1180)|0;
 $div21 = (($sub20>>>0) / 5)&-1;
 $22 = ($div21>>>0)<(6);
 $spec$store$select1 = $22 ? $div21 : 6;
 $23 = HEAP32[99069]|0;
 $cmp25 = ($spec$store$select1|0)>($23|0);
 if ($cmp25) {
  _S_StartSound(0,1);
  HEAP32[99069] = $spec$store$select1;
 }
 HEAP32[$vararg_buffer>>2] = $spec$store$select1;
 (_snprintf($name,10,141863,$vararg_buffer)|0);
 $call30 = (_W_CacheLumpName($name,8)|0);
 _V_DrawPatch(108,68,$call30);
 STACKTOP = sp;return;
}
function _F_Drawer() {
 var $$$i = 0, $0 = 0, $1 = 0, $2 = 0, $call$i = 0, $cmp1$i = 0, $lumpname$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99060]|0;
 switch ($0|0) {
 case 2:  {
  _F_CastDrawer();
  return;
  break;
 }
 case 0:  {
  _F_TextWrite();
  return;
  break;
 }
 case 1:  {
  $1 = HEAP32[99085]|0;
  switch ($1|0) {
  case 3:  {
   _F_BunnyScroll();
   return;
   break;
  }
  case 1:  {
   $2 = HEAP32[32140]|0;
   $cmp1$i = ($2|0)==(3);
   $$$i = $cmp1$i ? 141869 : 150312;
   $lumpname$0$i = $$$i;
   break;
  }
  case 2:  {
   $lumpname$0$i = 141883;
   break;
  }
  case 4:  {
   $lumpname$0$i = 141876;
   break;
  }
  default: {
   return;
  }
  }
  $call$i = (_W_CacheLumpName($lumpname$0$i,8)|0);
  _V_DrawPatch(0,0,$call$i);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _wipe_initColorXForm($width,$height,$ticks) {
 $width = $width|0;
 $height = $height|0;
 $ticks = $ticks|0;
 var $0 = 0, $1 = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99070]|0;
 $1 = HEAP32[99071]|0;
 $mul = Math_imul($height, $width)|0;
 _memcpy(($0|0),($1|0),($mul|0))|0;
 return 0;
}
function _wipe_doColorXForm($width,$height,$ticks) {
 $width = $width|0;
 $height = $height|0;
 $ticks = $ticks|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0, $add$ptr = 0, $changed$0$lcssa = 0, $changed$027 = 0, $changed$1 = 0, $cmp = 0, $cmp11 = 0, $cmp18 = 0, $cmp2 = 0, $cmp23 = 0, $cmp26 = 0, $cmp6 = 0, $conv = 0, $conv1 = 0, $conv14 = 0, $conv27 = 0;
 var $e$029 = 0, $incdec$ptr = 0, $incdec$ptr32 = 0, $lnot$ext = 0, $mul = 0, $storemerge = 0, $storemerge25 = 0, $sub = 0, $tobool = 0, $w$028 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99070]|0;
 $mul = Math_imul($height, $width)|0;
 $add$ptr = (($0) + ($mul)|0);
 $cmp26 = ($mul|0)==(0);
 if ($cmp26) {
  $changed$0$lcssa = 0;
  $tobool = ($changed$0$lcssa|0)==(0);
  $lnot$ext = $tobool&1;
  return ($lnot$ext|0);
 }
 $1 = HEAP32[99072]|0;
 $changed$027 = 0;$e$029 = $1;$w$028 = $0;
 while(1) {
  $2 = HEAP8[$w$028>>0]|0;
  $conv = $2&255;
  $3 = HEAP8[$e$029>>0]|0;
  $conv1 = $3&255;
  $cmp2 = ($2<<24>>24)==($3<<24>>24);
  do {
   if ($cmp2) {
    $changed$1 = $changed$027;
   } else {
    $cmp6 = ($2&255)>($3&255);
    if ($cmp6) {
     $sub = (($conv) - ($ticks))|0;
     $cmp11 = ($sub|0)<($conv1|0);
     $conv14 = $sub&255;
     $storemerge25 = $cmp11 ? $3 : $conv14;
     HEAP8[$w$028>>0] = $storemerge25;
     $changed$1 = 1;
     break;
    }
    $cmp18 = ($2&255)<($3&255);
    $add = (($conv) + ($ticks))|0;
    if ($cmp18) {
     $cmp23 = ($add|0)>($conv1|0);
     $conv27 = $add&255;
     $storemerge = $cmp23 ? $3 : $conv27;
     HEAP8[$w$028>>0] = $storemerge;
     $changed$1 = 1;
    } else {
     $changed$1 = $changed$027;
    }
   }
  } while(0);
  $incdec$ptr = ((($w$028)) + 1|0);
  $incdec$ptr32 = ((($e$029)) + 1|0);
  $cmp = ($incdec$ptr|0)==($add$ptr|0);
  if ($cmp) {
   $changed$0$lcssa = $changed$1;
   break;
  } else {
   $changed$027 = $changed$1;$e$029 = $incdec$ptr32;$w$028 = $incdec$ptr;
  }
 }
 $tobool = ($changed$0$lcssa|0)==(0);
 $lnot$ext = $tobool&1;
 return ($lnot$ext|0);
}
function _wipe_exitColorXForm($width,$height,$ticks) {
 $width = $width|0;
 $height = $height|0;
 $ticks = $ticks|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _wipe_initMelt($width,$height,$ticks) {
 $width = $width|0;
 $height = $height|0;
 $ticks = $ticks|0;
 var $$sink = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add = 0, $add$us$i = 0, $add$us$i26 = 0, $add7$us$i = 0, $add7$us$i29 = 0, $arrayidx$us$i = 0, $arrayidx$us$i27 = 0, $arrayidx8 = 0, $arrayidx8$us$i = 0, $arrayidx8$us$i30 = 0, $arrayidx9 = 0;
 var $call = 0, $call$i = 0, $call$i17 = 0, $call3 = 0, $call4 = 0, $cmp11 = 0, $cmp14 = 0, $cmp21$i = 0, $cmp319$i = 0, $div = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i32 = 0, $exitcond25$i = 0, $exitcond25$i35 = 0, $i$039 = 0, $inc = 0, $inc$us$i = 0, $inc$us$i31 = 0, $inc10$us$i = 0;
 var $inc10$us$i34 = 0, $mul = 0, $mul$i = 0, $mul1$i = 0, $mul2 = 0, $mul5$us$i = 0, $mul5$us$i23 = 0, $mul6$us$i = 0, $mul6$us$i28 = 0, $or$cond$i = 0, $rem = 0, $rem5 = 0, $sub = 0, $sub6 = 0, $sub7 = 0, $x$020$us$i = 0, $x$020$us$i25 = 0, $y$022$us$i = 0, $y$022$us$i22 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99070]|0;
 $1 = HEAP32[99071]|0;
 $mul = Math_imul($height, $width)|0;
 _memcpy(($0|0),($1|0),($mul|0))|0;
 $div = (($width|0) / 2)&-1;
 $mul$i = $div << 1;
 $mul1$i = Math_imul($mul$i, $height)|0;
 $call$i = (_Z_Malloc($mul1$i,1,0)|0);
 $cmp21$i = ($height|0)>(0);
 $cmp319$i = ($width|0)>(1);
 $or$cond$i = $cmp319$i & $cmp21$i;
 if ($or$cond$i) {
  $y$022$us$i = 0;
  while(1) {
   $mul5$us$i = Math_imul($y$022$us$i, $div)|0;
   $x$020$us$i = 0;
   while(1) {
    $add$us$i = (($x$020$us$i) + ($mul5$us$i))|0;
    $arrayidx$us$i = (($1) + ($add$us$i<<1)|0);
    $2 = HEAP16[$arrayidx$us$i>>1]|0;
    $mul6$us$i = Math_imul($x$020$us$i, $height)|0;
    $add7$us$i = (($mul6$us$i) + ($y$022$us$i))|0;
    $arrayidx8$us$i = (($call$i) + ($add7$us$i<<1)|0);
    HEAP16[$arrayidx8$us$i>>1] = $2;
    $inc$us$i = (($x$020$us$i) + 1)|0;
    $exitcond$i = ($inc$us$i|0)==($div|0);
    if ($exitcond$i) {
     break;
    } else {
     $x$020$us$i = $inc$us$i;
    }
   }
   $inc10$us$i = (($y$022$us$i) + 1)|0;
   $exitcond25$i = ($inc10$us$i|0)==($height|0);
   if ($exitcond25$i) {
    break;
   } else {
    $y$022$us$i = $inc10$us$i;
   }
  }
 }
 _memcpy(($1|0),($call$i|0),($mul1$i|0))|0;
 _Z_Free($call$i);
 $3 = HEAP32[99072]|0;
 $call$i17 = (_Z_Malloc($mul1$i,1,0)|0);
 if ($or$cond$i) {
  $y$022$us$i22 = 0;
  while(1) {
   $mul5$us$i23 = Math_imul($y$022$us$i22, $div)|0;
   $x$020$us$i25 = 0;
   while(1) {
    $add$us$i26 = (($x$020$us$i25) + ($mul5$us$i23))|0;
    $arrayidx$us$i27 = (($3) + ($add$us$i26<<1)|0);
    $4 = HEAP16[$arrayidx$us$i27>>1]|0;
    $mul6$us$i28 = Math_imul($x$020$us$i25, $height)|0;
    $add7$us$i29 = (($mul6$us$i28) + ($y$022$us$i22))|0;
    $arrayidx8$us$i30 = (($call$i17) + ($add7$us$i29<<1)|0);
    HEAP16[$arrayidx8$us$i30>>1] = $4;
    $inc$us$i31 = (($x$020$us$i25) + 1)|0;
    $exitcond$i32 = ($inc$us$i31|0)==($div|0);
    if ($exitcond$i32) {
     break;
    } else {
     $x$020$us$i25 = $inc$us$i31;
    }
   }
   $inc10$us$i34 = (($y$022$us$i22) + 1)|0;
   $exitcond25$i35 = ($inc10$us$i34|0)==($height|0);
   if ($exitcond25$i35) {
    break;
   } else {
    $y$022$us$i22 = $inc10$us$i34;
   }
  }
 }
 _memcpy(($3|0),($call$i17|0),($mul1$i|0))|0;
 _Z_Free($call$i17);
 $mul2 = $width << 2;
 $call = (_Z_Malloc($mul2,1,0)|0);
 HEAP32[99073] = $call;
 $call3 = (_M_Random()|0);
 $rem = (($call3|0) % 16)&-1;
 $sub = (0 - ($rem))|0;
 $5 = HEAP32[99073]|0;
 HEAP32[$5>>2] = $sub;
 if (!($cmp319$i)) {
  return 0;
 }
 $i$039 = 1;
 while(1) {
  $call4 = (_M_Random()|0);
  $rem5 = (($call4|0) % 3)&-1;
  $sub6 = (($rem5) + -1)|0;
  $6 = HEAP32[99073]|0;
  $sub7 = (($i$039) + -1)|0;
  $arrayidx8 = (($6) + ($sub7<<2)|0);
  $7 = HEAP32[$arrayidx8>>2]|0;
  $add = (($sub6) + ($7))|0;
  $arrayidx9 = (($6) + ($i$039<<2)|0);
  HEAP32[$arrayidx9>>2] = $add;
  $cmp11 = ($add|0)>(0);
  if ($cmp11) {
   $$sink = 0;
   label = 15;
  } else {
   $cmp14 = ($add|0)==(-16);
   if ($cmp14) {
    $$sink = -15;
    label = 15;
   }
  }
  if ((label|0) == 15) {
   label = 0;
   HEAP32[$arrayidx9>>2] = $$sink;
  }
  $inc = (($i$039) + 1)|0;
  $exitcond = ($inc|0)==($width|0);
  if ($exitcond) {
   break;
  } else {
   $i$039 = $inc;
  }
 }
 return 0;
}
function _wipe_doMelt($width,$height,$ticks) {
 $width = $width|0;
 $height = $height|0;
 $ticks = $ticks|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add$us = 0, $add10$us = 0, $add15$us = 0, $add19$us = 0, $add25$us = 0, $add28$us = 0, $add33$us = 0, $add42$us = 0, $arrayidx$us = 0, $arrayidx16$us = 0, $arrayidx20$us = 0, $arrayidx24$us = 0, $arrayidx30$us = 0;
 var $arrayidx34$us = 0, $arrayidx41$us = 0, $cmp1$us = 0, $cmp11$us = 0, $cmp4$us = 0, $cmp52 = 0, $cmp7$us = 0, $dec26$us = 0, $dec44$us = 0, $dec59$us = 0, $dec59$us$in = 0, $div = 0, $done$0$lcssa = 0, $done$058$us = 0, $done$155$us = 0, $done$2$us = 0, $dy$0$us = 0, $exitcond = 0, $i$053$us = 0, $idx$046$us = 0;
 var $idx$150$us = 0, $inc$us = 0, $inc49$us = 0, $incdec$ptr$us = 0, $incdec$ptr40$us = 0, $j$045$us = 0, $j$149$us = 0, $mul$us = 0, $mul18$us = 0, $mul32$us = 0, $s$047$us = 0, $s$151$us = 0, $spec$select$us = 0, $sub$us = 0, $sub36$us = 0, $tobool$us = 0, $tobool22$us = 0, $tobool2244$us = 0, $tobool38$us = 0, $tobool3848$us = 0;
 var $tobool57 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $div = (($width|0) / 2)&-1;
 $tobool57 = ($ticks|0)==(0);
 if ($tobool57) {
  $done$0$lcssa = 1;
  return ($done$0$lcssa|0);
 }
 $cmp52 = ($width|0)>(1);
 $0 = HEAP32[99073]|0;
 $1 = HEAP32[99072]|0;
 $2 = HEAP32[99070]|0;
 $3 = HEAP32[99071]|0;
 if (!($cmp52)) {
  $done$0$lcssa = 1;
  return ($done$0$lcssa|0);
 }
 $dec59$us$in = $ticks;$done$058$us = 1;
 while(1) {
  $dec59$us = (($dec59$us$in) + -1)|0;
  $done$155$us = $done$058$us;$i$053$us = 0;
  while(1) {
   $arrayidx$us = (($0) + ($i$053$us<<2)|0);
   $4 = HEAP32[$arrayidx$us>>2]|0;
   $cmp1$us = ($4|0)<(0);
   if ($cmp1$us) {
    $inc$us = (($4) + 1)|0;
    HEAP32[$arrayidx$us>>2] = $inc$us;
    $done$2$us = 0;
   } else {
    $cmp4$us = ($4|0)<($height|0);
    if ($cmp4$us) {
     $cmp7$us = ($4|0)<(16);
     $add$us = (($4) + 1)|0;
     $spec$select$us = $cmp7$us ? $add$us : 8;
     $add10$us = (($spec$select$us) + ($4))|0;
     $cmp11$us = ($add10$us|0)<($height|0);
     $sub$us = (($height) - ($4))|0;
     $dy$0$us = $cmp11$us ? $spec$select$us : $sub$us;
     $mul$us = Math_imul($i$053$us, $height)|0;
     $mul18$us = Math_imul($4, $div)|0;
     $add19$us = (($mul18$us) + ($i$053$us))|0;
     $arrayidx20$us = (($2) + ($add19$us<<1)|0);
     $tobool2244$us = ($dy$0$us|0)==(0);
     if (!($tobool2244$us)) {
      $add15$us = (($4) + ($mul$us))|0;
      $arrayidx16$us = (($1) + ($add15$us<<1)|0);
      $idx$046$us = 0;$j$045$us = $dy$0$us;$s$047$us = $arrayidx16$us;
      while(1) {
       $incdec$ptr$us = ((($s$047$us)) + 2|0);
       $5 = HEAP16[$s$047$us>>1]|0;
       $arrayidx24$us = (($arrayidx20$us) + ($idx$046$us<<1)|0);
       HEAP16[$arrayidx24$us>>1] = $5;
       $add25$us = (($idx$046$us) + ($div))|0;
       $dec26$us = (($j$045$us) + -1)|0;
       $tobool22$us = ($dec26$us|0)==(0);
       if ($tobool22$us) {
        break;
       } else {
        $idx$046$us = $add25$us;$j$045$us = $dec26$us;$s$047$us = $incdec$ptr$us;
       }
      }
     }
     $add28$us = (($dy$0$us) + ($4))|0;
     HEAP32[$arrayidx$us>>2] = $add28$us;
     $mul32$us = Math_imul($add28$us, $div)|0;
     $add33$us = (($mul32$us) + ($i$053$us))|0;
     $arrayidx34$us = (($2) + ($add33$us<<1)|0);
     $sub36$us = (($height) - ($add28$us))|0;
     $tobool3848$us = ($sub36$us|0)==(0);
     if ($tobool3848$us) {
      $done$2$us = 0;
     } else {
      $arrayidx30$us = (($3) + ($mul$us<<1)|0);
      $idx$150$us = 0;$j$149$us = $sub36$us;$s$151$us = $arrayidx30$us;
      while(1) {
       $incdec$ptr40$us = ((($s$151$us)) + 2|0);
       $6 = HEAP16[$s$151$us>>1]|0;
       $arrayidx41$us = (($arrayidx34$us) + ($idx$150$us<<1)|0);
       HEAP16[$arrayidx41$us>>1] = $6;
       $add42$us = (($idx$150$us) + ($div))|0;
       $dec44$us = (($j$149$us) + -1)|0;
       $tobool38$us = ($dec44$us|0)==(0);
       if ($tobool38$us) {
        $done$2$us = 0;
        break;
       } else {
        $idx$150$us = $add42$us;$j$149$us = $dec44$us;$s$151$us = $incdec$ptr40$us;
       }
      }
     }
    } else {
     $done$2$us = $done$155$us;
    }
   }
   $inc49$us = (($i$053$us) + 1)|0;
   $exitcond = ($inc49$us|0)==($div|0);
   if ($exitcond) {
    break;
   } else {
    $done$155$us = $done$2$us;$i$053$us = $inc49$us;
   }
  }
  $tobool$us = ($dec59$us|0)==(0);
  if ($tobool$us) {
   $done$0$lcssa = $done$2$us;
   break;
  } else {
   $dec59$us$in = $dec59$us;$done$058$us = $done$2$us;
  }
 }
 return ($done$0$lcssa|0);
}
function _wipe_exitMelt($width,$height,$ticks) {
 $width = $width|0;
 $height = $height|0;
 $ticks = $ticks|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99073]|0;
 _Z_Free($0);
 $1 = HEAP32[99071]|0;
 _Z_Free($1);
 $2 = HEAP32[99072]|0;
 _Z_Free($2);
 return 0;
}
function _wipe_StartScreen($x,$y,$width,$height) {
 $x = $x|0;
 $y = $y|0;
 $width = $width|0;
 $height = $height|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_Z_Malloc(64000,1,0)|0);
 HEAP32[99071] = $call;
 _I_ReadScreen($call);
 return 0;
}
function _wipe_EndScreen($x,$y,$width,$height) {
 $x = $x|0;
 $y = $y|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_Z_Malloc(64000,1,0)|0);
 HEAP32[99072] = $call;
 _I_ReadScreen($call);
 $0 = HEAP32[99071]|0;
 _V_DrawBlock($x,$y,$width,$height,$0);
 return 0;
}
function _wipe_ScreenWipe($wipeno,$x,$y,$width,$height,$ticks) {
 $wipeno = $wipeno|0;
 $x = $x|0;
 $y = $y|0;
 $width = $width|0;
 $height = $height|0;
 $ticks = $ticks|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $add7 = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx8 = 0, $call3 = 0, $mul = 0, $mul1$pre$phiZ2D = 0, $tobool = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99074]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  HEAP32[99074] = 1;
  $1 = HEAP32[99853]|0;
  HEAP32[99070] = $1;
  $mul = ($wipeno*3)|0;
  $arrayidx = (1888 + ($mul<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  (FUNCTION_TABLE_iiii[$2 & 255]($width,$height,$ticks)|0);
  $mul1$pre$phiZ2D = $mul;
 } else {
  $$pre = ($wipeno*3)|0;
  $mul1$pre$phiZ2D = $$pre;
 }
 _V_MarkRect(0,0,$width,$height);
 $add = (($mul1$pre$phiZ2D) + 1)|0;
 $arrayidx2 = (1888 + ($add<<2)|0);
 $3 = HEAP32[$arrayidx2>>2]|0;
 $call3 = (FUNCTION_TABLE_iiii[$3 & 255]($width,$height,$ticks)|0);
 $tobool4 = ($call3|0)==(0);
 if ($tobool4) {
  $5 = HEAP32[99074]|0;
  $6 = $5 ^ 1;
  return ($6|0);
 }
 $add7 = (($mul1$pre$phiZ2D) + 2)|0;
 $arrayidx8 = (1888 + ($add7<<2)|0);
 HEAP32[99074] = 0;
 $4 = HEAP32[$arrayidx8>>2]|0;
 (FUNCTION_TABLE_iiii[$4 & 255]($width,$height,$ticks)|0);
 $5 = HEAP32[99074]|0;
 $6 = $5 ^ 1;
 return ($6|0);
}
function _G_BuildTiccmd($cmd,$maketic) {
 $cmd = $cmd|0;
 $maketic = $maketic|0;
 var $$pr = 0, $$sink = 0, $$sink$in = 0, $$sink$in$in = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add$i = 0, $add10$i = 0, $add10$us$i = 0, $add10$us$us$i = 0, $add10$us35$i = 0, $add1012$i = 0, $add105 = 0, $add141 = 0, $add205 = 0, $add237 = 0;
 var $add270 = 0, $add277 = 0, $add280 = 0, $add315 = 0, $add318 = 0, $add336 = 0, $add339 = 0, $add46 = 0, $add67 = 0, $add85 = 0, $and = 0, $angleturn = 0, $angleturn283 = 0, $angleturn333 = 0, $angleturn65 = 0, $angleturn74 = 0, $angleturn83 = 0, $arrayidx1 = 0, $arrayidx10 = 0, $arrayidx104 = 0;
 var $arrayidx110 = 0, $arrayidx113 = 0, $arrayidx116 = 0, $arrayidx119 = 0, $arrayidx125 = 0, $arrayidx128 = 0, $arrayidx13 = 0, $arrayidx131 = 0, $arrayidx134 = 0, $arrayidx140 = 0, $arrayidx143 = 0, $arrayidx146 = 0, $arrayidx149 = 0, $arrayidx155 = 0, $arrayidx158 = 0, $arrayidx16$i$i = 0, $arrayidx16$i$us$i = 0, $arrayidx16$i$us$us$i = 0, $arrayidx16$i$us26$i = 0, $arrayidx161 = 0;
 var $arrayidx187 = 0, $arrayidx187$1 = 0, $arrayidx187$2 = 0, $arrayidx187$3 = 0, $arrayidx187$4 = 0, $arrayidx187$5 = 0, $arrayidx187$6 = 0, $arrayidx187$7 = 0, $arrayidx2 = 0, $arrayidx201 = 0, $arrayidx204 = 0, $arrayidx207 = 0, $arrayidx21 = 0, $arrayidx210 = 0, $arrayidx23$i$i = 0, $arrayidx24 = 0, $arrayidx243 = 0, $arrayidx246 = 0, $arrayidx27$i$i = 0, $arrayidx3 = 0;
 var $arrayidx32 = 0, $arrayidx35 = 0, $arrayidx38 = 0, $arrayidx41 = 0, $arrayidx45 = 0, $arrayidx5 = 0, $arrayidx50 = 0, $arrayidx57 = 0, $arrayidx61 = 0, $arrayidx64 = 0, $arrayidx73 = 0, $arrayidx82 = 0, $arrayidx89 = 0, $arrayidx92 = 0, $arrayidx95 = 0, $arrayidx98 = 0, $buttons = 0, $buttons164 = 0, $buttons175 = 0, $buttons190 = 0;
 var $buttons230 = 0, $buttons263 = 0, $buttons322 = 0, $buttons329 = 0, $call = 0, $chatchar = 0, $cmp = 0, $cmp$i = 0, $cmp$i$us$i = 0, $cmp$i$us$us$i = 0, $cmp$i$us22$i = 0, $cmp101 = 0, $cmp107 = 0, $cmp11$i = 0, $cmp11$us$i = 0, $cmp11$us$us$i = 0, $cmp11$us37$i = 0, $cmp1114$i = 0, $cmp122 = 0, $cmp137 = 0;
 var $cmp169 = 0, $cmp171 = 0, $cmp19$i$i = 0, $cmp19$i$us$i = 0, $cmp19$i$us$us$i = 0, $cmp19$i$us29$i = 0, $cmp216 = 0, $cmp219 = 0, $cmp227 = 0, $cmp238 = 0, $cmp250 = 0, $cmp253 = 0, $cmp26 = 0, $cmp260 = 0, $cmp271 = 0, $cmp288 = 0, $cmp292 = 0, $cmp297 = 0, $cmp303 = 0, $cmp308 = 0;
 var $cmp43 = 0, $cmp48 = 0, $cmp70 = 0, $cmp79 = 0, $cmp8 = 0, $consistancy = 0, $conv196 = 0, $conv198 = 0, $conv28478 = 0, $conv286 = 0, $conv31479 = 0, $conv316 = 0, $conv31780 = 0, $conv319 = 0, $conv328 = 0, $conv33481 = 0, $conv33582 = 0, $conv338 = 0, $conv340 = 0, $conv346 = 0;
 var $conv59 = 0, $conv6686 = 0, $conv68 = 0, $conv7585 = 0, $conv77 = 0, $conv8484 = 0, $conv86 = 0, $dclickstate$sink = 0, $forward$0 = 0, $forward$1 = 0, $forward$3 = 0, $forward$4 = 0, $forward$5 = 0, $i$0$lcssa$i = 0, $i$0104$lcssa = 0, $i$0104$lcssa$sink = 0, $inc225 = 0, $inc258 = 0, $lor$ext16 = 0, $lor$ext249 = 0;
 var $mul = 0, $mul282 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond41$i = 0, $or$cond5 = 0, $or$cond6 = 0, $or197 = 0, $or327 = 0, $pendingweapon$i = 0, $readyweapon$i = 0, $rem = 0, $rem$i = 0, $rem$lcssa$i = 0, $rem$us$i = 0, $rem$us$us$i = 0, $rem$us36$i = 0;
 var $rem13$i = 0, $rem15$i = 0, $rem15$us$i = 0, $rem15$us$us$i = 0, $rem15$us20$i = 0, $sext = 0, $shl = 0, $shl326 = 0, $side$0 = 0, $side$1 = 0, $side$3 = 0, $side$4 = 0, $side$5 = 0, $side$6 = 0, $side$7 = 0, $sidemove = 0, $spec$select = 0, $spec$select88 = 0, $spec$select96 = 0, $sub = 0;
 var $sub111 = 0, $sub126 = 0, $sub211 = 0, $sub285 = 0, $sub296 = 0, $sub345 = 0, $sub51 = 0, $sub58 = 0, $sub76 = 0, $sub99 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$us$i = 0, $tobool$i$us$us$i = 0, $tobool$i$us27$i = 0, $tobool11 = 0, $tobool114 = 0, $tobool117 = 0, $tobool120 = 0, $tobool129 = 0;
 var $tobool132 = 0, $tobool135 = 0, $tobool14 = 0, $tobool144 = 0, $tobool147 = 0, $tobool150 = 0, $tobool156 = 0, $tobool159 = 0, $tobool162 = 0, $tobool188 = 0, $tobool188$1 = 0, $tobool188$2 = 0, $tobool188$3 = 0, $tobool188$4 = 0, $tobool188$5 = 0, $tobool188$6 = 0, $tobool188$7 = 0, $tobool202 = 0, $tobool208 = 0, $tobool213 = 0;
 var $tobool22 = 0, $tobool24$i$i = 0, $tobool24$i$us$i = 0, $tobool24$i$us$us$i = 0, $tobool24$i$us31$i = 0, $tobool244 = 0, $tobool247 = 0, $tobool25 = 0, $tobool28$i$i = 0, $tobool28$i$us$i = 0, $tobool28$i$us$us$i = 0, $tobool28$i$us33$i = 0, $tobool320 = 0, $tobool324 = 0, $tobool33 = 0, $tobool331 = 0, $tobool39 = 0, $tobool4 = 0, $tobool6 = 0, $tobool62 = 0;
 var $tobool90 = 0, $tobool96 = 0, $weapon$0$i = 0, $weapon13$i = 0, $weapon13$us$i = 0, $weapon13$us$us$i = 0, $weapon13$us21$i = 0, $weapon_num$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$cmd>>2]=0|0;HEAP32[$cmd+4>>2]=0|0;HEAP32[$cmd+8>>2]=0|0;HEAP32[$cmd+12>>2]=0|0;
 $0 = HEAP32[99076]|0;
 $rem = (($maketic|0) % 128)&-1;
 $arrayidx1 = ((181136 + ($0<<7)|0) + ($rem)|0);
 $1 = HEAP8[$arrayidx1>>0]|0;
 $consistancy = ((($cmd)) + 6|0);
 HEAP8[$consistancy>>0] = $1;
 $2 = HEAP32[32179]|0;
 $arrayidx2 = (183216 + ($2<<2)|0);
 $3 = HEAP32[$arrayidx2>>2]|0;
 $tobool = ($3|0)==(0);
 if ($tobool) {
  $4 = HEAP32[32181]|0;
  $arrayidx3 = ((184244) + ($4<<2)|0);
  $5 = HEAP32[$arrayidx3>>2]|0;
  $tobool4 = ($5|0)==(0);
  if ($tobool4) {
   $6 = HEAP32[32236]|0;
   $arrayidx5 = ((184292) + ($6<<2)|0);
   $7 = HEAP32[$arrayidx5>>2]|0;
   $tobool6 = ($7|0)!=(0);
   $164 = $tobool6;
  } else {
   $164 = 1;
  }
 } else {
  $164 = 1;
 }
 $8 = HEAP32[32180]|0;
 $cmp = ($8|0)>(255);
 $9 = HEAP32[32238]|0;
 $cmp8 = ($9|0)>(19);
 $or$cond = $cmp | $cmp8;
 if ($or$cond) {
  $12 = 1;
 } else {
  $arrayidx10 = (183216 + ($8<<2)|0);
  $10 = HEAP32[$arrayidx10>>2]|0;
  $tobool11 = ($10|0)==(0);
  if ($tobool11) {
   $arrayidx13 = ((184292) + ($9<<2)|0);
   $11 = HEAP32[$arrayidx13>>2]|0;
   $tobool14 = ($11|0)!=(0);
   $12 = $tobool14;
  } else {
   $12 = 1;
  }
 }
 $lor$ext16 = $12&1;
 $13 = HEAP32[99168]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = HEAP32[32171]|0;
  $arrayidx21 = (183216 + ($15<<2)|0);
  $16 = HEAP32[$arrayidx21>>2]|0;
  $tobool22 = ($16|0)==(0);
  if ($tobool22) {
   $17 = HEAP32[32172]|0;
   $arrayidx24 = (183216 + ($17<<2)|0);
   $18 = HEAP32[$arrayidx24>>2]|0;
   $tobool25 = ($18|0)==(0);
   if ($tobool25) {
    HEAP32[99169] = 0;
    label = 12;
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $19 = HEAP32[99022]|0;
  $20 = HEAP32[99169]|0;
  $add = (($20) + ($19))|0;
  HEAP32[99169] = $add;
  $cmp26 = ($add|0)<(6);
  if ($cmp26) {
   label = 12;
  } else {
   $29 = $lor$ext16;
  }
 }
 if ((label|0) == 12) {
  $29 = 2;
 }
 $21 = HEAP32[32171]|0;
 $arrayidx32 = (183216 + ($21<<2)|0);
 $22 = HEAP32[$arrayidx32>>2]|0;
 $tobool33 = ($22|0)!=(0);
 do {
  if ($164) {
   if ($tobool33) {
    $arrayidx35 = (128612 + ($lor$ext16<<2)|0);
    $23 = HEAP32[$arrayidx35>>2]|0;
    $side$0 = $23;
   } else {
    $side$0 = 0;
   }
   $24 = HEAP32[32172]|0;
   $arrayidx38 = (183216 + ($24<<2)|0);
   $25 = HEAP32[$arrayidx38>>2]|0;
   $tobool39 = ($25|0)==(0);
   if ($tobool39) {
    $side$1 = $side$0;
   } else {
    $arrayidx41 = (128612 + ($lor$ext16<<2)|0);
    $26 = HEAP32[$arrayidx41>>2]|0;
    $sub = (($side$0) - ($26))|0;
    $side$1 = $sub;
   }
   $cmp43 = ($13|0)>(0);
   if ($cmp43) {
    $arrayidx45 = (128612 + ($lor$ext16<<2)|0);
    $27 = HEAP32[$arrayidx45>>2]|0;
    $add46 = (($27) + ($side$1))|0;
    $side$3 = $add46;
    break;
   }
   $cmp48 = ($13|0)<(0);
   if ($cmp48) {
    $arrayidx50 = (128612 + ($lor$ext16<<2)|0);
    $28 = HEAP32[$arrayidx50>>2]|0;
    $sub51 = (($side$1) - ($28))|0;
    $side$3 = $sub51;
   } else {
    $side$3 = $side$1;
   }
  } else {
   if ($tobool33) {
    $arrayidx57 = (128620 + ($29<<2)|0);
    $30 = HEAP32[$arrayidx57>>2]|0;
    $angleturn = ((($cmd)) + 2|0);
    $sub58 = (0 - ($30))|0;
    $conv59 = $sub58&65535;
    HEAP16[$angleturn>>1] = $conv59;
    $34 = $conv59;
   } else {
    $34 = 0;
   }
   $31 = HEAP32[32172]|0;
   $arrayidx61 = (183216 + ($31<<2)|0);
   $32 = HEAP32[$arrayidx61>>2]|0;
   $tobool62 = ($32|0)==(0);
   if ($tobool62) {
    $36 = $34;
   } else {
    $arrayidx64 = (128620 + ($29<<2)|0);
    $33 = HEAP32[$arrayidx64>>2]|0;
    $angleturn65 = ((($cmd)) + 2|0);
    $conv6686 = $34&65535;
    $add67 = (($33) + ($conv6686))|0;
    $conv68 = $add67&65535;
    HEAP16[$angleturn65>>1] = $conv68;
    $36 = $conv68;
   }
   $cmp70 = ($13|0)>(0);
   if ($cmp70) {
    $arrayidx73 = (128620 + ($29<<2)|0);
    $35 = HEAP32[$arrayidx73>>2]|0;
    $angleturn74 = ((($cmd)) + 2|0);
    $conv7585 = $36&65535;
    $sub76 = (($conv7585) - ($35))|0;
    $conv77 = $sub76&65535;
    HEAP16[$angleturn74>>1] = $conv77;
    $side$3 = 0;
    break;
   }
   $cmp79 = ($13|0)<(0);
   if ($cmp79) {
    $arrayidx82 = (128620 + ($29<<2)|0);
    $37 = HEAP32[$arrayidx82>>2]|0;
    $angleturn83 = ((($cmd)) + 2|0);
    $conv8484 = $36&65535;
    $add85 = (($37) + ($conv8484))|0;
    $conv86 = $add85&65535;
    HEAP16[$angleturn83>>1] = $conv86;
    $side$3 = 0;
   } else {
    $side$3 = 0;
   }
  }
 } while(0);
 $38 = HEAP32[32173]|0;
 $arrayidx89 = (183216 + ($38<<2)|0);
 $39 = HEAP32[$arrayidx89>>2]|0;
 $tobool90 = ($39|0)==(0);
 if ($tobool90) {
  $forward$0 = 0;
 } else {
  $arrayidx92 = (128604 + ($lor$ext16<<2)|0);
  $40 = HEAP32[$arrayidx92>>2]|0;
  $forward$0 = $40;
 }
 $41 = HEAP32[32174]|0;
 $arrayidx95 = (183216 + ($41<<2)|0);
 $42 = HEAP32[$arrayidx95>>2]|0;
 $tobool96 = ($42|0)==(0);
 if ($tobool96) {
  $forward$1 = $forward$0;
 } else {
  $arrayidx98 = (128604 + ($lor$ext16<<2)|0);
  $43 = HEAP32[$arrayidx98>>2]|0;
  $sub99 = (($forward$0) - ($43))|0;
  $forward$1 = $sub99;
 }
 $44 = HEAP32[99170]|0;
 $cmp101 = ($44|0)<(0);
 if ($cmp101) {
  $arrayidx104 = (128604 + ($lor$ext16<<2)|0);
  $45 = HEAP32[$arrayidx104>>2]|0;
  $add105 = (($45) + ($forward$1))|0;
  $forward$3 = $add105;
 } else {
  $cmp107 = ($44|0)==(0);
  if ($cmp107) {
   $forward$3 = $forward$1;
  } else {
   $arrayidx110 = (128604 + ($lor$ext16<<2)|0);
   $46 = HEAP32[$arrayidx110>>2]|0;
   $sub111 = (($forward$1) - ($46))|0;
   $forward$3 = $sub111;
  }
 }
 $47 = HEAP32[32175]|0;
 $arrayidx113 = (183216 + ($47<<2)|0);
 $48 = HEAP32[$arrayidx113>>2]|0;
 $tobool114 = ($48|0)==(0);
 if ($tobool114) {
  $49 = HEAP32[32239]|0;
  $arrayidx116 = ((184292) + ($49<<2)|0);
  $50 = HEAP32[$arrayidx116>>2]|0;
  $tobool117 = ($50|0)==(0);
  if ($tobool117) {
   $51 = HEAP32[32183]|0;
   $arrayidx119 = ((184244) + ($51<<2)|0);
   $52 = HEAP32[$arrayidx119>>2]|0;
   $tobool120 = ($52|0)!=(0);
   $53 = HEAP32[99171]|0;
   $cmp122 = ($53|0)<(0);
   $or$cond2 = $tobool120 | $cmp122;
   if ($or$cond2) {
    label = 41;
   } else {
    $side$4 = $side$3;
   }
  } else {
   label = 41;
  }
 } else {
  label = 41;
 }
 if ((label|0) == 41) {
  $arrayidx125 = (128612 + ($lor$ext16<<2)|0);
  $54 = HEAP32[$arrayidx125>>2]|0;
  $sub126 = (($side$3) - ($54))|0;
  $side$4 = $sub126;
 }
 $55 = HEAP32[32176]|0;
 $arrayidx128 = (183216 + ($55<<2)|0);
 $56 = HEAP32[$arrayidx128>>2]|0;
 $tobool129 = ($56|0)==(0);
 if ($tobool129) {
  $57 = HEAP32[32240]|0;
  $arrayidx131 = ((184292) + ($57<<2)|0);
  $58 = HEAP32[$arrayidx131>>2]|0;
  $tobool132 = ($58|0)==(0);
  if ($tobool132) {
   $59 = HEAP32[32184]|0;
   $arrayidx134 = ((184244) + ($59<<2)|0);
   $60 = HEAP32[$arrayidx134>>2]|0;
   $tobool135 = ($60|0)!=(0);
   $61 = HEAP32[99171]|0;
   $cmp137 = ($61|0)>(0);
   $or$cond3 = $tobool135 | $cmp137;
   if ($or$cond3) {
    label = 45;
   } else {
    $side$5 = $side$4;
   }
  } else {
   label = 45;
  }
 } else {
  label = 45;
 }
 if ((label|0) == 45) {
  $arrayidx140 = (128612 + ($lor$ext16<<2)|0);
  $62 = HEAP32[$arrayidx140>>2]|0;
  $add141 = (($62) + ($side$4))|0;
  $side$5 = $add141;
 }
 $call = (_HU_dequeueChatChar()|0);
 $chatchar = ((($cmd)) + 4|0);
 HEAP8[$chatchar>>0] = $call;
 $63 = HEAP32[32177]|0;
 $arrayidx143 = (183216 + ($63<<2)|0);
 $64 = HEAP32[$arrayidx143>>2]|0;
 $tobool144 = ($64|0)==(0);
 if ($tobool144) {
  $65 = HEAP32[99378]|0;
  $arrayidx146 = ((184244) + ($65<<2)|0);
  $66 = HEAP32[$arrayidx146>>2]|0;
  $tobool147 = ($66|0)==(0);
  if ($tobool147) {
   $67 = HEAP32[99382]|0;
   $arrayidx149 = ((184292) + ($67<<2)|0);
   $68 = HEAP32[$arrayidx149>>2]|0;
   $tobool150 = ($68|0)==(0);
   if (!($tobool150)) {
    label = 49;
   }
  } else {
   label = 49;
  }
 } else {
  label = 49;
 }
 if ((label|0) == 49) {
  $buttons = ((($cmd)) + 5|0);
  $69 = HEAP8[$buttons>>0]|0;
  $70 = $69 | 1;
  HEAP8[$buttons>>0] = $70;
 }
 $71 = HEAP32[32178]|0;
 $arrayidx155 = (183216 + ($71<<2)|0);
 $72 = HEAP32[$arrayidx155>>2]|0;
 $tobool156 = ($72|0)==(0);
 if ($tobool156) {
  $73 = HEAP32[32237]|0;
  $arrayidx158 = ((184292) + ($73<<2)|0);
  $74 = HEAP32[$arrayidx158>>2]|0;
  $tobool159 = ($74|0)==(0);
  if ($tobool159) {
   $75 = HEAP32[32186]|0;
   $arrayidx161 = ((184244) + ($75<<2)|0);
   $76 = HEAP32[$arrayidx161>>2]|0;
   $tobool162 = ($76|0)==(0);
   if (!($tobool162)) {
    label = 53;
   }
  } else {
   label = 53;
  }
 } else {
  label = 53;
 }
 if ((label|0) == 53) {
  $buttons164 = ((($cmd)) + 5|0);
  $77 = HEAP8[$buttons164>>0]|0;
  $78 = $77 | 2;
  HEAP8[$buttons164>>0] = $78;
  HEAP32[99172] = 0;
 }
 $79 = HEAP32[99077]|0;
 $cmp169 = ($79|0)==(0);
 $80 = HEAP32[99173]|0;
 $cmp171 = ($80|0)!=(0);
 $or$cond4 = $cmp169 & $cmp171;
 L77: do {
  if ($or$cond4) {
   $81 = HEAP32[99076]|0;
   $pendingweapon$i = (((181680 + (($81*288)|0)|0)) + 124|0);
   $82 = HEAP32[$pendingweapon$i>>2]|0;
   $cmp$i = ($82|0)==(10);
   if ($cmp$i) {
    $readyweapon$i = (((181680 + (($81*288)|0)|0)) + 120|0);
    $83 = HEAP32[$readyweapon$i>>2]|0;
    $weapon$0$i = $83;
   } else {
    $weapon$0$i = $82;
   }
   switch ($weapon$0$i|0) {
   case 0:  {
    $i$0$lcssa$i = $weapon$0$i;
    break;
   }
   case 7:  {
    $i$0$lcssa$i = 1;
    break;
   }
   case 1:  {
    $i$0$lcssa$i = 2;
    break;
   }
   case 2:  {
    $i$0$lcssa$i = 3;
    break;
   }
   case 8:  {
    $i$0$lcssa$i = 4;
    break;
   }
   case 3:  {
    $i$0$lcssa$i = 5;
    break;
   }
   case 4:  {
    $i$0$lcssa$i = 6;
    break;
   }
   case 5:  {
    $i$0$lcssa$i = 7;
    break;
   }
   case 6:  {
    $i$0$lcssa$i = 8;
    break;
   }
   default: {
    $i$0$lcssa$i = 9;
   }
   }
   $arrayidx23$i$i = (((181680 + (($81*288)|0)|0)) + 156|0);
   $arrayidx27$i$i = (((181680 + (($81*288)|0)|0)) + 56|0);
   $add$i = (($80) + 9)|0;
   $add1012$i = (($i$0$lcssa$i) + ($add$i))|0;
   $rem13$i = (($add1012$i>>>0) % 9)&-1;
   $cmp1114$i = ($rem13$i|0)==($i$0$lcssa$i|0);
   L93: do {
    if ($cmp1114$i) {
     $rem$lcssa$i = $i$0$lcssa$i;
    } else {
     $84 = HEAP32[99015]|0;
     $85 = $84 | 4;
     $86 = ($85|0)==(4);
     $87 = HEAP32[32140]|0;
     $88 = $87 | $84;
     $89 = ($88|0)==(0);
     if (!($89)) {
      if (!($86)) {
       $rem15$i = $rem13$i;
       while(1) {
        $weapon13$i = (2208 + ($rem15$i<<3)|0);
        $106 = HEAP32[$weapon13$i>>2]|0;
        $arrayidx16$i$i = ((((181680 + (($81*288)|0)|0)) + 128|0) + ($106<<2)|0);
        $107 = HEAP32[$arrayidx16$i$i>>2]|0;
        $tobool$i$i = ($107|0)==(0);
        if (!($tobool$i$i)) {
         $cmp19$i$i = ($rem15$i|0)==(0);
         if (!($cmp19$i$i)) {
          $rem$lcssa$i = $rem15$i;
          break L93;
         }
         $108 = HEAP32[$arrayidx23$i$i>>2]|0;
         $tobool24$i$i = ($108|0)==(0);
         if ($tobool24$i$i) {
          $rem$lcssa$i = 0;
          break L93;
         }
         $109 = HEAP32[$arrayidx27$i$i>>2]|0;
         $tobool28$i$i = ($109|0)==(0);
         if (!($tobool28$i$i)) {
          $rem$lcssa$i = 0;
          break L93;
         }
        }
        $add10$i = (($rem15$i) + ($add$i))|0;
        $rem$i = (($add10$i>>>0) % 9)&-1;
        $cmp11$i = ($rem$i|0)==($i$0$lcssa$i|0);
        if ($cmp11$i) {
         $rem$lcssa$i = $i$0$lcssa$i;
         break L93;
        } else {
         $rem15$i = $rem$i;
        }
       }
      }
      $rem15$us20$i = $rem13$i;
      while(1) {
       $cmp$i$us22$i = ($rem15$us20$i|0)==(4);
       do {
        if (!($cmp$i$us22$i)) {
         $weapon13$us21$i = (2208 + ($rem15$us20$i<<3)|0);
         $102 = HEAP32[$weapon13$us21$i>>2]|0;
         $arrayidx16$i$us26$i = ((((181680 + (($81*288)|0)|0)) + 128|0) + ($102<<2)|0);
         $103 = HEAP32[$arrayidx16$i$us26$i>>2]|0;
         $tobool$i$us27$i = ($103|0)==(0);
         if ($tobool$i$us27$i) {
          break;
         }
         $cmp19$i$us29$i = ($rem15$us20$i|0)==(0);
         if (!($cmp19$i$us29$i)) {
          $rem$lcssa$i = $rem15$us20$i;
          break L93;
         }
         $104 = HEAP32[$arrayidx23$i$i>>2]|0;
         $tobool24$i$us31$i = ($104|0)==(0);
         if ($tobool24$i$us31$i) {
          $rem$lcssa$i = 0;
          break L93;
         }
         $105 = HEAP32[$arrayidx27$i$i>>2]|0;
         $tobool28$i$us33$i = ($105|0)==(0);
         if (!($tobool28$i$us33$i)) {
          $rem$lcssa$i = 0;
          break L93;
         }
        }
       } while(0);
       $add10$us35$i = (($rem15$us20$i) + ($add$i))|0;
       $rem$us36$i = (($add10$us35$i>>>0) % 9)&-1;
       $cmp11$us37$i = ($rem$us36$i|0)==($i$0$lcssa$i|0);
       if ($cmp11$us37$i) {
        $rem$lcssa$i = $i$0$lcssa$i;
        break L93;
       } else {
        $rem15$us20$i = $rem$us36$i;
       }
      }
     }
     if ($86) {
      $rem15$us$us$i = $rem13$i;
      while(1) {
       $weapon13$us$us$i = (2208 + ($rem15$us$us$i<<3)|0);
       $90 = HEAP32[$weapon13$us$us$i>>2]|0;
       $cmp$i$us$us$i = ($rem15$us$us$i|0)==(4);
       $91 = (($90) + -5)|0;
       $92 = ($91>>>0)<(2);
       $or$cond$i = $cmp$i$us$us$i | $92;
       do {
        if (!($or$cond$i)) {
         $arrayidx16$i$us$us$i = ((((181680 + (($81*288)|0)|0)) + 128|0) + ($90<<2)|0);
         $93 = HEAP32[$arrayidx16$i$us$us$i>>2]|0;
         $tobool$i$us$us$i = ($93|0)==(0);
         if ($tobool$i$us$us$i) {
          break;
         }
         $cmp19$i$us$us$i = ($rem15$us$us$i|0)==(0);
         if (!($cmp19$i$us$us$i)) {
          $rem$lcssa$i = $rem15$us$us$i;
          break L93;
         }
         $94 = HEAP32[$arrayidx23$i$i>>2]|0;
         $tobool24$i$us$us$i = ($94|0)==(0);
         if ($tobool24$i$us$us$i) {
          $rem$lcssa$i = 0;
          break L93;
         }
         $95 = HEAP32[$arrayidx27$i$i>>2]|0;
         $tobool28$i$us$us$i = ($95|0)==(0);
         if (!($tobool28$i$us$us$i)) {
          $rem$lcssa$i = 0;
          break L93;
         }
        }
       } while(0);
       $add10$us$us$i = (($rem15$us$us$i) + ($add$i))|0;
       $rem$us$us$i = (($add10$us$us$i>>>0) % 9)&-1;
       $cmp11$us$us$i = ($rem$us$us$i|0)==($i$0$lcssa$i|0);
       if ($cmp11$us$us$i) {
        $rem$lcssa$i = $i$0$lcssa$i;
        break;
       } else {
        $rem15$us$us$i = $rem$us$us$i;
       }
      }
     } else {
      $rem15$us$i = $rem13$i;
      while(1) {
       $weapon13$us$i = (2208 + ($rem15$us$i<<3)|0);
       $96 = HEAP32[$weapon13$us$i>>2]|0;
       $cmp$i$us$i = ($rem15$us$i|0)!=(4);
       $97 = (($96) + -5)|0;
       $98 = ($97>>>0)<(2);
       $or$cond41$i = $cmp$i$us$i & $98;
       do {
        if (!($or$cond41$i)) {
         $arrayidx16$i$us$i = ((((181680 + (($81*288)|0)|0)) + 128|0) + ($96<<2)|0);
         $99 = HEAP32[$arrayidx16$i$us$i>>2]|0;
         $tobool$i$us$i = ($99|0)==(0);
         if ($tobool$i$us$i) {
          break;
         }
         $cmp19$i$us$i = ($rem15$us$i|0)==(0);
         if (!($cmp19$i$us$i)) {
          $rem$lcssa$i = $rem15$us$i;
          break L93;
         }
         $100 = HEAP32[$arrayidx23$i$i>>2]|0;
         $tobool24$i$us$i = ($100|0)==(0);
         if ($tobool24$i$us$i) {
          $rem$lcssa$i = 0;
          break L93;
         }
         $101 = HEAP32[$arrayidx27$i$i>>2]|0;
         $tobool28$i$us$i = ($101|0)==(0);
         if (!($tobool28$i$us$i)) {
          $rem$lcssa$i = 0;
          break L93;
         }
        }
       } while(0);
       $add10$us$i = (($rem15$us$i) + ($add$i))|0;
       $rem$us$i = (($add10$us$i>>>0) % 9)&-1;
       $cmp11$us$i = ($rem$us$i|0)==($i$0$lcssa$i|0);
       if ($cmp11$us$i) {
        $rem$lcssa$i = $i$0$lcssa$i;
        break;
       } else {
        $rem15$us$i = $rem$us$i;
       }
      }
     }
    }
   } while(0);
   $weapon_num$i = (((2208 + ($rem$lcssa$i<<3)|0)) + 4|0);
   $110 = HEAP32[$weapon_num$i>>2]|0;
   $buttons175 = ((($cmd)) + 5|0);
   $shl = $110 << 3;
   $$sink$in$in = $buttons175;$i$0104$lcssa$sink = $shl;
   label = 102;
  } else {
   $111 = HEAP32[32194]|0;
   $arrayidx187 = (183216 + ($111<<2)|0);
   $112 = HEAP32[$arrayidx187>>2]|0;
   $tobool188 = ($112|0)==(0);
   do {
    if ($tobool188) {
     $113 = HEAP32[32195]|0;
     $arrayidx187$1 = (183216 + ($113<<2)|0);
     $114 = HEAP32[$arrayidx187$1>>2]|0;
     $tobool188$1 = ($114|0)==(0);
     if ($tobool188$1) {
      $152 = HEAP32[32196]|0;
      $arrayidx187$2 = (183216 + ($152<<2)|0);
      $153 = HEAP32[$arrayidx187$2>>2]|0;
      $tobool188$2 = ($153|0)==(0);
      if ($tobool188$2) {
       $154 = HEAP32[32197]|0;
       $arrayidx187$3 = (183216 + ($154<<2)|0);
       $155 = HEAP32[$arrayidx187$3>>2]|0;
       $tobool188$3 = ($155|0)==(0);
       if ($tobool188$3) {
        $156 = HEAP32[32198]|0;
        $arrayidx187$4 = (183216 + ($156<<2)|0);
        $157 = HEAP32[$arrayidx187$4>>2]|0;
        $tobool188$4 = ($157|0)==(0);
        if ($tobool188$4) {
         $158 = HEAP32[32199]|0;
         $arrayidx187$5 = (183216 + ($158<<2)|0);
         $159 = HEAP32[$arrayidx187$5>>2]|0;
         $tobool188$5 = ($159|0)==(0);
         if ($tobool188$5) {
          $160 = HEAP32[32200]|0;
          $arrayidx187$6 = (183216 + ($160<<2)|0);
          $161 = HEAP32[$arrayidx187$6>>2]|0;
          $tobool188$6 = ($161|0)==(0);
          if (!($tobool188$6)) {
           $i$0104$lcssa = 48;
           break;
          }
          $162 = HEAP32[32201]|0;
          $arrayidx187$7 = (183216 + ($162<<2)|0);
          $163 = HEAP32[$arrayidx187$7>>2]|0;
          $tobool188$7 = ($163|0)==(0);
          if ($tobool188$7) {
           break L77;
          } else {
           $i$0104$lcssa = 56;
          }
         } else {
          $i$0104$lcssa = 40;
         }
        } else {
         $i$0104$lcssa = 32;
        }
       } else {
        $i$0104$lcssa = 24;
       }
      } else {
       $i$0104$lcssa = 16;
      }
     } else {
      $i$0104$lcssa = 8;
     }
    } else {
     $i$0104$lcssa = 0;
    }
   } while(0);
   $buttons190 = ((($cmd)) + 5|0);
   $$sink$in$in = $buttons190;$i$0104$lcssa$sink = $i$0104$lcssa;
   label = 102;
  }
 } while(0);
 if ((label|0) == 102) {
  $$sink$in = HEAP8[$$sink$in$in>>0]|0;
  $$sink = $$sink$in | 4;
  $conv196 = $$sink&255;
  $or197 = $i$0104$lcssa$sink | $conv196;
  $conv198 = $or197&255;
  HEAP8[$$sink$in$in>>0] = $conv198;
 }
 HEAP32[99173] = 0;
 $115 = HEAP32[32182]|0;
 $arrayidx201 = ((184244) + ($115<<2)|0);
 $116 = HEAP32[$arrayidx201>>2]|0;
 $tobool202 = ($116|0)==(0);
 if ($tobool202) {
  $forward$4 = $forward$3;
 } else {
  $arrayidx204 = (128604 + ($lor$ext16<<2)|0);
  $117 = HEAP32[$arrayidx204>>2]|0;
  $add205 = (($117) + ($forward$3))|0;
  $forward$4 = $add205;
 }
 $118 = HEAP32[32185]|0;
 $arrayidx207 = ((184244) + ($118<<2)|0);
 $119 = HEAP32[$arrayidx207>>2]|0;
 $tobool208 = ($119|0)==(0);
 if ($tobool208) {
  $forward$5 = $forward$4;
 } else {
  $arrayidx210 = (128604 + ($lor$ext16<<2)|0);
  $120 = HEAP32[$arrayidx210>>2]|0;
  $sub211 = (($forward$4) - ($120))|0;
  $forward$5 = $sub211;
 }
 $121 = HEAP32[32244]|0;
 $tobool213 = ($121|0)==(0);
 do {
  if (!($tobool213)) {
   $122 = HEAP32[99174]|0;
   $cmp216 = ($116|0)!=($122|0);
   $123 = HEAP32[99175]|0;
   $cmp219 = ($123|0)>(1);
   $or$cond5 = $cmp216 & $cmp219;
   if ($or$cond5) {
    HEAP32[99174] = $116;
    $$pr = HEAP32[99172]|0;
    if ($tobool202) {
     $124 = $$pr;
    } else {
     $inc225 = (($$pr) + 1)|0;
     HEAP32[99172] = $inc225;
     $124 = $inc225;
    }
    $cmp227 = ($124|0)==(2);
    if ($cmp227) {
     $buttons230 = ((($cmd)) + 5|0);
     $125 = HEAP8[$buttons230>>0]|0;
     $126 = $125 | 2;
     HEAP8[$buttons230>>0] = $126;
     $dclickstate$sink = 396688;
     label = 115;
    } else {
     $dclickstate$sink = 396700;
     label = 115;
    }
   } else {
    $127 = HEAP32[99022]|0;
    $add237 = (($127) + ($123))|0;
    HEAP32[99175] = $add237;
    $cmp238 = ($add237|0)>(20);
    if ($cmp238) {
     HEAP32[99172] = 0;
     $dclickstate$sink = 396696;
     label = 115;
    }
   }
   if ((label|0) == 115) {
    HEAP32[$dclickstate$sink>>2] = 0;
   }
   $128 = HEAP32[32181]|0;
   $arrayidx243 = ((184244) + ($128<<2)|0);
   $129 = HEAP32[$arrayidx243>>2]|0;
   $tobool244 = ($129|0)==(0);
   if ($tobool244) {
    $130 = HEAP32[32236]|0;
    $arrayidx246 = ((184292) + ($130<<2)|0);
    $131 = HEAP32[$arrayidx246>>2]|0;
    $tobool247 = ($131|0)!=(0);
    $132 = $tobool247;
   } else {
    $132 = 1;
   }
   $lor$ext249 = $132&1;
   $133 = HEAP32[99176]|0;
   $cmp250 = ($133|0)!=($lor$ext249|0);
   $134 = HEAP32[99177]|0;
   $cmp253 = ($134|0)>(1);
   $or$cond6 = $cmp250 & $cmp253;
   if (!($or$cond6)) {
    $139 = HEAP32[99022]|0;
    $add270 = (($139) + ($134))|0;
    HEAP32[99177] = $add270;
    $cmp271 = ($add270|0)>(20);
    if (!($cmp271)) {
     break;
    }
    HEAP32[99178] = 0;
    HEAP32[99176] = 0;
    break;
   }
   HEAP32[99176] = $lor$ext249;
   $135 = HEAP32[99178]|0;
   if ($132) {
    $inc258 = (($135) + 1)|0;
    HEAP32[99178] = $inc258;
    $136 = $inc258;
   } else {
    $136 = $135;
   }
   $cmp260 = ($136|0)==(2);
   if ($cmp260) {
    $buttons263 = ((($cmd)) + 5|0);
    $137 = HEAP8[$buttons263>>0]|0;
    $138 = $137 | 2;
    HEAP8[$buttons263>>0] = $138;
    HEAP32[99178] = 0;
    break;
   } else {
    HEAP32[99177] = 0;
    break;
   }
  }
 } while(0);
 $140 = HEAP32[99078]|0;
 $add277 = (($140) + ($forward$5))|0;
 $141 = HEAP32[99079]|0;
 if ($164) {
  $mul = $141 << 1;
  $add280 = (($mul) + ($side$5))|0;
  $side$6 = $add280;
 } else {
  $mul282 = $141 << 3;
  $angleturn283 = ((($cmd)) + 2|0);
  $142 = HEAP16[$angleturn283>>1]|0;
  $conv28478 = $142&65535;
  $sub285 = (($conv28478) - ($mul282))|0;
  $conv286 = $sub285&65535;
  HEAP16[$angleturn283>>1] = $conv286;
  $side$6 = $side$5;
 }
 $cmp288 = ($141|0)==(0);
 if ($cmp288) {
  HEAP32[99080] = 0;
 }
 HEAP32[99078] = 0;
 HEAP32[99079] = 0;
 $143 = HEAP32[(128608)>>2]|0;
 $cmp292 = ($add277|0)>($143|0);
 $sub296 = (0 - ($143))|0;
 $cmp297 = ($add277|0)<($sub296|0);
 $spec$select = $cmp297 ? $sub296 : $add277;
 $spec$select96 = $cmp292 ? $143 : $spec$select;
 $cmp303 = ($side$6|0)>($143|0);
 $cmp308 = ($side$6|0)<($sub296|0);
 $spec$select88 = $cmp308 ? $sub296 : $side$6;
 $side$7 = $cmp303 ? $143 : $spec$select88;
 $144 = HEAP8[$cmd>>0]|0;
 $conv31479 = $144&255;
 $add315 = (($spec$select96) + ($conv31479))|0;
 $conv316 = $add315&255;
 HEAP8[$cmd>>0] = $conv316;
 $sidemove = ((($cmd)) + 1|0);
 $145 = HEAP8[$sidemove>>0]|0;
 $conv31780 = $145&255;
 $add318 = (($side$7) + ($conv31780))|0;
 $conv319 = $add318&255;
 HEAP8[$sidemove>>0] = $conv319;
 $146 = HEAP32[99081]|0;
 $tobool320 = ($146|0)==(0);
 if (!($tobool320)) {
  HEAP32[99081] = 0;
  $buttons322 = ((($cmd)) + 5|0);
  HEAP8[$buttons322>>0] = -127;
 }
 $147 = HEAP32[99082]|0;
 $tobool324 = ($147|0)==(0);
 if (!($tobool324)) {
  HEAP32[99082] = 0;
  $148 = HEAP32[99179]|0;
  $shl326 = $148 << 2;
  $or327 = $shl326 | 130;
  $conv328 = $or327&255;
  $buttons329 = ((($cmd)) + 5|0);
  HEAP8[$buttons329>>0] = $conv328;
 }
 $149 = HEAP32[99083]|0;
 $tobool331 = ($149|0)==(0);
 if ($tobool331) {
  return;
 }
 $angleturn333 = ((($cmd)) + 2|0);
 $150 = HEAP16[$angleturn333>>1]|0;
 $conv33481 = $150&65535;
 $151 = HEAP16[200054]|0;
 $conv33582 = $151&65535;
 $add336 = (($conv33582) + ($conv33481))|0;
 $sext = $add336 << 16;
 $conv338 = $sext >> 16;
 $add339 = (($conv338) + 128)|0;
 $and = $add339 & 65280;
 $conv340 = $and&65535;
 HEAP16[$angleturn333>>1] = $conv340;
 $sub345 = (($conv338) - ($and))|0;
 $conv346 = $sub345&65535;
 HEAP16[200054] = $conv346;
 return;
}
function _G_DoLoadLevel() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $call = 0, $call9 = 0, $cmp = 0, $cmp11 = 0, $cmp18 = 0, $cmp18$1 = 0, $cmp18$2 = 0, $cmp18$3 = 0, $cmp3 = 0, $cmp5 = 0, $message = 0, $or$cond = 0, $or$cond11 = 0, $or$cond12 = 0, $or$cond13 = 0, $skytexturename$0 = 0, $tobool = 0, $tobool$1 = 0, $tobool$2 = 0;
 var $tobool$3 = 0, $tobool24 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $call = (_R_FlatNumForName(141892)|0);
 HEAP32[99682] = $call;
 $0 = HEAP32[32140]|0;
 $cmp = ($0|0)==(2);
 if ($cmp) {
  $1 = HEAP32[32141]|0;
  $2 = $1 | 1;
  $3 = ($2|0)==(9);
  if ($3) {
   $4 = HEAP32[99084]|0;
   $cmp3 = ($4|0)<(12);
   $cmp5 = ($4|0)<(21);
   $$ = $cmp5 ? 141899 : 141904;
   $skytexturename$0 = $cmp3 ? 141909 : $$;
   $call9 = (_R_TextureNumForName($skytexturename$0)|0);
   HEAP32[99683] = $call9;
  }
 }
 $5 = HEAP32[32144]|0;
 $cmp11 = ($5|0)==(0);
 if ($cmp11) {
  HEAP32[32144] = -1;
 }
 HEAP32[99077] = 0;
 ;HEAP32[181648>>2]=0|0;HEAP32[181648+4>>2]=0|0;HEAP32[181648+8>>2]=0|0;HEAP32[181648+12>>2]=0|0;
 $6 = HEAP32[45416]|0;
 $tobool = ($6|0)!=(0);
 $7 = HEAP32[(181684)>>2]|0;
 $cmp18 = ($7|0)==(1);
 $or$cond = $tobool & $cmp18;
 if ($or$cond) {
  HEAP32[(181684)>>2] = 2;
 }
 ;HEAP32[(181784)>>2]=0|0;HEAP32[(181784)+4>>2]=0|0;HEAP32[(181784)+8>>2]=0|0;HEAP32[(181784)+12>>2]=0|0;
 $8 = HEAP32[(181668)>>2]|0;
 $tobool$1 = ($8|0)!=(0);
 $9 = HEAP32[(181972)>>2]|0;
 $cmp18$1 = ($9|0)==(1);
 $or$cond11 = $tobool$1 & $cmp18$1;
 if ($or$cond11) {
  HEAP32[(181972)>>2] = 2;
 }
 ;HEAP32[(182072)>>2]=0|0;HEAP32[(182072)+4>>2]=0|0;HEAP32[(182072)+8>>2]=0|0;HEAP32[(182072)+12>>2]=0|0;
 $11 = HEAP32[(181672)>>2]|0;
 $tobool$2 = ($11|0)!=(0);
 $12 = HEAP32[(182260)>>2]|0;
 $cmp18$2 = ($12|0)==(1);
 $or$cond12 = $tobool$2 & $cmp18$2;
 if ($or$cond12) {
  HEAP32[(182260)>>2] = 2;
 }
 ;HEAP32[(182360)>>2]=0|0;HEAP32[(182360)+4>>2]=0|0;HEAP32[(182360)+8>>2]=0|0;HEAP32[(182360)+12>>2]=0|0;
 $13 = HEAP32[(181676)>>2]|0;
 $tobool$3 = ($13|0)!=(0);
 $14 = HEAP32[(182548)>>2]|0;
 $cmp18$3 = ($14|0)==(1);
 $or$cond13 = $tobool$3 & $cmp18$3;
 if ($or$cond13) {
  HEAP32[(182548)>>2] = 2;
 }
 ;HEAP32[(182648)>>2]=0|0;HEAP32[(182648)+4>>2]=0|0;HEAP32[(182648)+8>>2]=0|0;HEAP32[(182648)+12>>2]=0|0;
 $15 = HEAP32[99085]|0;
 $16 = HEAP32[99084]|0;
 $17 = HEAP32[99086]|0;
 _P_SetupLevel($15,$16,0,$17);
 $18 = HEAP32[99076]|0;
 HEAP32[99087] = $18;
 HEAP32[99088] = 0;
 _Z_CheckHeap();
 _memset((183216|0),0,1024)|0;
 HEAP32[99171] = 0;
 HEAP32[99170] = 0;
 HEAP32[99168] = 0;
 HEAP32[99078] = 0;
 HEAP32[99079] = 0;
 HEAP32[99089] = 0;
 HEAP32[99082] = 0;
 HEAP32[99081] = 0;
 dest=184240; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=184288; stop=dest+84|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $19 = HEAP32[99075]|0;
 $tobool24 = ($19|0)==(0);
 if ($tobool24) {
  return;
 }
 $10 = HEAP32[99076]|0;
 $message = (((181680 + (($10*288)|0)|0)) + 224|0);
 HEAP32[$message>>2] = 141914;
 return;
}
function _G_Responder($ev) {
 $ev = $ev|0;
 var $$pre = 0, $$pre46 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and$1$i = 0, $and$1$lobit$i = 0, $and$2$i = 0, $and$2$lobit$i = 0, $and$3$i = 0, $and$3$lobit$i = 0, $and$4$i = 0, $and$4$lobit$i = 0, $and$5$i = 0, $and$5$lobit$i = 0;
 var $and$6$i = 0, $and$6$lobit$i = 0, $and$7$i = 0, $and$7$lobit$i = 0, $and$i = 0, $and$i33 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx87 = 0, $arrayidx95 = 0, $call = 0, $call41 = 0, $call45 = 0, $call52 = 0, $cmp = 0, $cmp1 = 0, $cmp1$1$i = 0, $cmp1$2$i = 0, $cmp1$3$i = 0, $cmp1$4$i = 0;
 var $cmp1$5$i = 0, $cmp1$6$i = 0, $cmp1$7$i = 0, $cmp1$i = 0, $cmp1$i34 = 0, $cmp17 = 0, $cmp3 = 0, $cmp3$1$i = 0, $cmp3$2$i = 0, $cmp3$3$i = 0, $cmp3$4$i = 0, $cmp3$5$i = 0, $cmp3$6$i = 0, $cmp3$7$i = 0, $cmp3$i = 0, $cmp3$i37 = 0, $cmp50 = 0, $cmp6 = 0, $cmp6$1$i = 0, $cmp6$2$i = 0;
 var $cmp6$3$i = 0, $cmp6$4$i = 0, $cmp6$5$i = 0, $cmp6$6$i = 0, $cmp6$7$i = 0, $cmp6$i = 0, $cmp6$i40 = 0, $cmp60 = 0, $cmp68 = 0, $cmp74 = 0, $cmp80 = 0, $cmp84 = 0, $cmp9 = 0, $cmp92 = 0, $conv$i = 0, $data1 = 0, $data1104 = 0, $data125 = 0, $data131 = 0, $data167 = 0;
 var $data191 = 0, $data198 = 0, $data2 = 0, $data2105 = 0, $data299 = 0, $data3 = 0, $data3106 = 0, $data4 = 0, $displayplayer$promoted = 0, $div = 0, $div102 = 0, $exitcond$i = 0, $i$010$i = 0, $inc = 0, $inc$i = 0, $ispos = 0, $mul = 0, $mul101 = 0, $neg = 0, $or$cond = 0;
 var $or$cond$1$i = 0, $or$cond$2$i = 0, $or$cond$3$i = 0, $or$cond$4$i = 0, $or$cond$5$i = 0, $or$cond$6$i = 0, $or$cond$7$i = 0, $or$cond$i = 0, $or$cond$i36 = 0, $or$cond2 = 0, $or$cond32 = 0, $or$cond47 = 0, $retval$0 = 0, $shl$i = 0, $spec$store$select = 0, $spec$store$select45 = 0, $tobool = 0, $tobool$1$i = 0, $tobool$2$i = 0, $tobool$3$i = 0;
 var $tobool$4$i = 0, $tobool$5$i = 0, $tobool$6$i = 0, $tobool$7$i = 0, $tobool$i = 0, $tobool$i35 = 0, $tobool15 = 0, $tobool26 = 0, $tobool32 = 0, $tobool38 = 0, $tobool42 = 0, $tobool46 = 0, $tobool5 = 0, $tobool53 = 0, $tobool57 = 0, $tobool8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99077]|0;
 $cmp = ($0|0)==(0);
 if ($cmp) {
  $1 = HEAP32[$ev>>2]|0;
  $cmp1 = ($1|0)==(0);
  if ($cmp1) {
   $data1 = ((($ev)) + 4|0);
   $2 = HEAP32[$data1>>2]|0;
   $3 = HEAP32[32192]|0;
   $cmp3 = ($2|0)==($3|0);
   if ($cmp3) {
    $4 = HEAP32[99090]|0;
    $tobool = ($4|0)==(0);
    $5 = HEAP32[99091]|0;
    $tobool5 = ($5|0)!=(0);
    $or$cond = $tobool & $tobool5;
    if (!($or$cond)) {
     $6 = HEAP32[99076]|0;
     $displayplayer$promoted = HEAP32[99087]|0;
     $spec$store$select45 = $displayplayer$promoted;
     while(1) {
      $inc = (($spec$store$select45) + 1)|0;
      $cmp6 = ($inc|0)==(4);
      $spec$store$select = $cmp6 ? 0 : $inc;
      $arrayidx = (181664 + ($spec$store$select<<2)|0);
      $7 = HEAP32[$arrayidx>>2]|0;
      $tobool8 = ($7|0)!=(0);
      $cmp9 = ($spec$store$select|0)==($6|0);
      $or$cond32 = $tobool8 | $cmp9;
      if ($or$cond32) {
       break;
      } else {
       $spec$store$select45 = $spec$store$select;
      }
     }
     HEAP32[99087] = $spec$store$select;
     $retval$0 = 1;
     return ($retval$0|0);
    }
   }
  }
 }
 $8 = HEAP32[99088]|0;
 $9 = HEAP32[99090]|0;
 $10 = $9 | $8;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[99092]|0;
  $tobool15 = ($12|0)!=(0);
  $cmp17 = ($0|0)==(3);
  $or$cond2 = $cmp17 | $tobool15;
  if ($or$cond2) {
   $13 = HEAP32[$ev>>2]|0;
   switch ($13|0) {
   case 0:  {
    break;
   }
   case 2:  {
    $data125 = ((($ev)) + 4|0);
    $14 = HEAP32[$data125>>2]|0;
    $tobool26 = ($14|0)==(0);
    if ($tobool26) {
     $retval$0 = 0;
     return ($retval$0|0);
    }
    break;
   }
   case 3:  {
    $data131 = ((($ev)) + 4|0);
    $15 = HEAP32[$data131>>2]|0;
    $tobool32 = ($15|0)==(0);
    if ($tobool32) {
     $retval$0 = 0;
     return ($retval$0|0);
    }
    break;
   }
   default: {
    $retval$0 = 0;
    return ($retval$0|0);
   }
   }
   _M_StartControlPanel();
   $retval$0 = 1;
   return ($retval$0|0);
  }
 }
 do {
  if ($cmp) {
   $call = (_HU_Responder($ev)|0);
   $tobool38 = ($call|0)==(0);
   if (!($tobool38)) {
    $retval$0 = 1;
    return ($retval$0|0);
   }
   $call41 = (_ST_Responder($ev)|0);
   $tobool42 = ($call41|0)==(0);
   if (!($tobool42)) {
    $retval$0 = 1;
    return ($retval$0|0);
   }
   $call45 = (_AM_Responder($ev)|0);
   $tobool46 = ($call45|0)==(0);
   if ($tobool46) {
    $$pre = HEAP32[99077]|0;
    $16 = $$pre;
    break;
   } else {
    $retval$0 = 1;
    return ($retval$0|0);
   }
  } else {
   $16 = $0;
  }
 } while(0);
 $cmp50 = ($16|0)==(2);
 if ($cmp50) {
  $call52 = (_F_Responder($ev)|0);
  $tobool53 = ($call52|0)==(0);
  if (!($tobool53)) {
   $retval$0 = 1;
   return ($retval$0|0);
  }
 }
 $17 = HEAP32[99075]|0;
 $tobool57 = ($17|0)!=(0);
 $$pre46 = HEAP32[$ev>>2]|0;
 $cmp60 = ($$pre46|0)==(2);
 $or$cond47 = $tobool57 & $cmp60;
 L39: do {
  if ($or$cond47) {
   $data2 = ((($ev)) + 8|0);
   $18 = HEAP32[$data2>>2]|0;
   $ispos = ($18|0)>(-1);
   $neg = (0 - ($18))|0;
   $19 = $ispos ? $18 : $neg;
   HEAP32[99080] = $19;
  } else {
   switch ($$pre46|0) {
   case 2:  {
    break L39;
    break;
   }
   case 0:  {
    $data167 = ((($ev)) + 4|0);
    $20 = HEAP32[$data167>>2]|0;
    $21 = HEAP32[99379]|0;
    $cmp68 = ($20|0)==($21|0);
    if ($cmp68) {
     $$sink = -1;
     label = 25;
    } else {
     $22 = HEAP32[99380]|0;
     $cmp74 = ($20|0)==($22|0);
     if ($cmp74) {
      $$sink = 1;
      label = 25;
     }
    }
    if ((label|0) == 25) {
     HEAP32[99173] = $$sink;
    }
    $23 = HEAP32[32190]|0;
    $cmp80 = ($20|0)==($23|0);
    if ($cmp80) {
     HEAP32[99081] = 1;
     $retval$0 = 1;
     return ($retval$0|0);
    }
    $cmp84 = ($20|0)<(256);
    if (!($cmp84)) {
     $retval$0 = 1;
     return ($retval$0|0);
    }
    $arrayidx87 = (183216 + ($20<<2)|0);
    HEAP32[$arrayidx87>>2] = 1;
    $retval$0 = 1;
    return ($retval$0|0);
    break;
   }
   case 3:  {
    $data1104 = ((($ev)) + 4|0);
    $39 = HEAP32[$data1104>>2]|0;
    $40 = HEAP32[32241]|0;
    $41 = HEAP32[32242]|0;
    $i$010$i = 0;
    while(1) {
     $shl$i = 1 << $i$010$i;
     $and$i33 = $shl$i & $39;
     $cmp1$i34 = ($and$i33|0)!=(0);
     $conv$i = $cmp1$i34&1;
     $arrayidx$i = ((184292) + ($i$010$i<<2)|0);
     $42 = HEAP32[$arrayidx$i>>2]|0;
     $tobool$i35 = ($42|0)==(0);
     $or$cond$i36 = $tobool$i35 & $cmp1$i34;
     do {
      if ($or$cond$i36) {
       $cmp3$i37 = ($i$010$i|0)==($40|0);
       if ($cmp3$i37) {
        HEAP32[99173] = -1;
        break;
       }
       $cmp6$i40 = ($i$010$i|0)==($41|0);
       if ($cmp6$i40) {
        HEAP32[99173] = 1;
       }
      }
     } while(0);
     HEAP32[$arrayidx$i>>2] = $conv$i;
     $inc$i = (($i$010$i) + 1)|0;
     $exitcond$i = ($inc$i|0)==(20);
     if ($exitcond$i) {
      break;
     } else {
      $i$010$i = $inc$i;
     }
    }
    $data2105 = ((($ev)) + 8|0);
    $43 = HEAP32[$data2105>>2]|0;
    HEAP32[99168] = $43;
    $data3106 = ((($ev)) + 12|0);
    $44 = HEAP32[$data3106>>2]|0;
    HEAP32[99170] = $44;
    $data4 = ((($ev)) + 16|0);
    $45 = HEAP32[$data4>>2]|0;
    HEAP32[99171] = $45;
    $retval$0 = 1;
    return ($retval$0|0);
    break;
   }
   case 1:  {
    $data191 = ((($ev)) + 4|0);
    $24 = HEAP32[$data191>>2]|0;
    $cmp92 = ($24|0)<(256);
    if (!($cmp92)) {
     $retval$0 = 0;
     return ($retval$0|0);
    }
    $arrayidx95 = (183216 + ($24<<2)|0);
    HEAP32[$arrayidx95>>2] = 0;
    $retval$0 = 0;
    return ($retval$0|0);
    break;
   }
   default: {
    $retval$0 = 0;
    return ($retval$0|0);
   }
   }
  }
 } while(0);
 $data198 = ((($ev)) + 4|0);
 $25 = HEAP32[$data198>>2]|0;
 $26 = HEAP32[32187]|0;
 $27 = HEAP32[32188]|0;
 $and$i = $25 & 1;
 $cmp1$i = ($and$i|0)!=(0);
 $28 = HEAP32[(184244)>>2]|0;
 $tobool$i = ($28|0)==(0);
 $or$cond$i = $cmp1$i & $tobool$i;
 do {
  if ($or$cond$i) {
   $cmp3$i = ($26|0)==(0);
   if ($cmp3$i) {
    HEAP32[99173] = -1;
    break;
   }
   $cmp6$i = ($27|0)==(0);
   if ($cmp6$i) {
    HEAP32[99173] = 1;
   }
  }
 } while(0);
 HEAP32[(184244)>>2] = $and$i;
 $and$1$i = $25 & 2;
 $cmp1$1$i = ($and$1$i|0)!=(0);
 $and$1$lobit$i = $and$1$i >>> 1;
 $29 = HEAP32[(184248)>>2]|0;
 $tobool$1$i = ($29|0)==(0);
 $or$cond$1$i = $cmp1$1$i & $tobool$1$i;
 do {
  if ($or$cond$1$i) {
   $cmp3$1$i = ($26|0)==(1);
   if ($cmp3$1$i) {
    HEAP32[99173] = -1;
    break;
   }
   $cmp6$1$i = ($27|0)==(1);
   if ($cmp6$1$i) {
    HEAP32[99173] = 1;
   }
  }
 } while(0);
 HEAP32[(184248)>>2] = $and$1$lobit$i;
 $and$2$i = $25 & 4;
 $cmp1$2$i = ($and$2$i|0)!=(0);
 $and$2$lobit$i = $and$2$i >>> 2;
 $30 = HEAP32[(184252)>>2]|0;
 $tobool$2$i = ($30|0)==(0);
 $or$cond$2$i = $cmp1$2$i & $tobool$2$i;
 do {
  if ($or$cond$2$i) {
   $cmp3$2$i = ($26|0)==(2);
   if ($cmp3$2$i) {
    HEAP32[99173] = -1;
    break;
   }
   $cmp6$2$i = ($27|0)==(2);
   if ($cmp6$2$i) {
    HEAP32[99173] = 1;
   }
  }
 } while(0);
 HEAP32[(184252)>>2] = $and$2$lobit$i;
 $and$3$i = $25 & 8;
 $cmp1$3$i = ($and$3$i|0)!=(0);
 $and$3$lobit$i = $and$3$i >>> 3;
 $31 = HEAP32[(184256)>>2]|0;
 $tobool$3$i = ($31|0)==(0);
 $or$cond$3$i = $cmp1$3$i & $tobool$3$i;
 do {
  if ($or$cond$3$i) {
   $cmp3$3$i = ($26|0)==(3);
   if ($cmp3$3$i) {
    HEAP32[99173] = -1;
    break;
   }
   $cmp6$3$i = ($27|0)==(3);
   if ($cmp6$3$i) {
    HEAP32[99173] = 1;
   }
  }
 } while(0);
 HEAP32[(184256)>>2] = $and$3$lobit$i;
 $and$4$i = $25 & 16;
 $cmp1$4$i = ($and$4$i|0)!=(0);
 $and$4$lobit$i = $and$4$i >>> 4;
 $32 = HEAP32[(184260)>>2]|0;
 $tobool$4$i = ($32|0)==(0);
 $or$cond$4$i = $cmp1$4$i & $tobool$4$i;
 do {
  if ($or$cond$4$i) {
   $cmp3$4$i = ($26|0)==(4);
   if ($cmp3$4$i) {
    HEAP32[99173] = -1;
    break;
   }
   $cmp6$4$i = ($27|0)==(4);
   if ($cmp6$4$i) {
    HEAP32[99173] = 1;
   }
  }
 } while(0);
 HEAP32[(184260)>>2] = $and$4$lobit$i;
 $and$5$i = $25 & 32;
 $cmp1$5$i = ($and$5$i|0)!=(0);
 $and$5$lobit$i = $and$5$i >>> 5;
 $33 = HEAP32[(184264)>>2]|0;
 $tobool$5$i = ($33|0)==(0);
 $or$cond$5$i = $cmp1$5$i & $tobool$5$i;
 do {
  if ($or$cond$5$i) {
   $cmp3$5$i = ($26|0)==(5);
   if ($cmp3$5$i) {
    HEAP32[99173] = -1;
    break;
   }
   $cmp6$5$i = ($27|0)==(5);
   if ($cmp6$5$i) {
    HEAP32[99173] = 1;
   }
  }
 } while(0);
 HEAP32[(184264)>>2] = $and$5$lobit$i;
 $and$6$i = $25 & 64;
 $cmp1$6$i = ($and$6$i|0)!=(0);
 $and$6$lobit$i = $and$6$i >>> 6;
 $34 = HEAP32[(184268)>>2]|0;
 $tobool$6$i = ($34|0)==(0);
 $or$cond$6$i = $cmp1$6$i & $tobool$6$i;
 do {
  if ($or$cond$6$i) {
   $cmp3$6$i = ($26|0)==(6);
   if ($cmp3$6$i) {
    HEAP32[99173] = -1;
    break;
   }
   $cmp6$6$i = ($27|0)==(6);
   if ($cmp6$6$i) {
    HEAP32[99173] = 1;
   }
  }
 } while(0);
 HEAP32[(184268)>>2] = $and$6$lobit$i;
 $and$7$i = $25 & 128;
 $cmp1$7$i = ($and$7$i|0)!=(0);
 $and$7$lobit$i = $and$7$i >>> 7;
 $35 = HEAP32[(184272)>>2]|0;
 $tobool$7$i = ($35|0)==(0);
 $or$cond$7$i = $cmp1$7$i & $tobool$7$i;
 do {
  if ($or$cond$7$i) {
   $cmp3$7$i = ($26|0)==(7);
   if ($cmp3$7$i) {
    HEAP32[99173] = -1;
    break;
   }
   $cmp6$7$i = ($27|0)==(7);
   if ($cmp6$7$i) {
    HEAP32[99173] = 1;
   }
  }
 } while(0);
 HEAP32[(184272)>>2] = $and$7$lobit$i;
 $data299 = ((($ev)) + 8|0);
 $36 = HEAP32[$data299>>2]|0;
 $37 = HEAP32[32245]|0;
 $add = (($37) + 5)|0;
 $mul = Math_imul($add, $36)|0;
 $div = (($mul|0) / 10)&-1;
 HEAP32[99079] = $div;
 $data3 = ((($ev)) + 12|0);
 $38 = HEAP32[$data3>>2]|0;
 $mul101 = Math_imul($38, $add)|0;
 $div102 = (($mul101|0) / 10)&-1;
 HEAP32[99078] = $div102;
 $retval$0 = 1;
 return ($retval$0|0);
}
function _G_Ticker() {
 var $$pr = 0, $$pre = 0, $$pre45 = 0, $$pre46 = 0, $$pre47 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $add$i = 0, $and = 0, $and120 = 0, $and120$1 = 0;
 var $and120$2 = 0, $and120$3 = 0, $angleturn$i = 0, $angleturn15$i = 0, $arrayidx16 = 0, $arrayidx31 = 0, $arrayidx40 = 0, $arrayidx43 = 0, $arrayidx59 = 0, $arrayidx78 = 0, $arrayidx81 = 0, $buttons$i = 0, $cmd20 = 0, $cmp$i = 0, $cmp128 = 0, $cmp131 = 0, $cmp2 = 0, $cmp2$1 = 0, $cmp2$2 = 0, $cmp2$3 = 0;
 var $cmp28 = 0, $cmp33 = 0, $cmp37 = 0, $cmp55 = 0, $cmp62 = 0, $consistancy = 0, $conv10$i = 0, $conv12$i = 0, $conv14$i = 0, $conv5$i = 0, $conv60 = 0, $conv61 = 0, $conv7$i = 0, $conv76 = 0, $conv79 = 0, $conv96$i = 0, $div = 0, $exitcond = 0, $i$140 = 0, $inc86 = 0;
 var $incdec$ptr$i = 0, $incdec$ptr17$i = 0, $incdec$ptr2$i = 0, $incdec$ptr4$i = 0, $incdec$ptr6$i = 0, $message = 0, $message45 = 0, $mo = 0, $or$cond = 0, $or$cond1 = 0, $or$cond48 = 0, $or$cond49 = 0, $or$cond50 = 0, $or$cond51 = 0, $or$i = 0, $rem = 0, $rem36 = 0, $rem52 = 0, $shl$i = 0, $shl13$i = 0;
 var $shr = 0, $sidemove$i = 0, $tobool = 0, $tobool$1 = 0, $tobool$2 = 0, $tobool$3 = 0, $tobool$i = 0, $tobool107 = 0, $tobool107$1 = 0, $tobool107$2 = 0, $tobool107$3 = 0, $tobool112 = 0, $tobool112$1 = 0, $tobool112$2 = 0, $tobool112$3 = 0, $tobool17 = 0, $tobool22 = 0, $tobool25 = 0, $tobool41 = 0, $tobool48 = 0;
 var $tobool50 = 0, $tobool53 = 0, $tobool72 = 0, $tobool93 = 0, $tobool93$1 = 0, $tobool93$2 = 0, $tobool93$3 = 0, $tobool99 = 0, $tobool99$1 = 0, $tobool99$2 = 0, $tobool99$3 = 0, $trunc = 0, $trunc$1 = 0, $trunc$1$clear = 0, $trunc$2 = 0, $trunc$2$clear = 0, $trunc$3 = 0, $trunc$3$clear = 0, $trunc$clear = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_ptr4 = 0, $x = 0, $xor = 0, $xor$1 = 0, $xor$2 = 0, $xor$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[45416]|0;
 $tobool = ($0|0)!=(0);
 $1 = HEAP32[(181684)>>2]|0;
 $cmp2 = ($1|0)==(2);
 $or$cond48 = $tobool & $cmp2;
 if ($or$cond48) {
  _G_DoReborn(0);
 }
 $2 = HEAP32[(181668)>>2]|0;
 $tobool$1 = ($2|0)!=(0);
 $3 = HEAP32[(181972)>>2]|0;
 $cmp2$1 = ($3|0)==(2);
 $or$cond49 = $tobool$1 & $cmp2$1;
 if ($or$cond49) {
  _G_DoReborn(1);
 }
 $67 = HEAP32[(181672)>>2]|0;
 $tobool$2 = ($67|0)!=(0);
 $68 = HEAP32[(182260)>>2]|0;
 $cmp2$2 = ($68|0)==(2);
 $or$cond50 = $tobool$2 & $cmp2$2;
 if ($or$cond50) {
  _G_DoReborn(2);
 }
 $69 = HEAP32[(181676)>>2]|0;
 $tobool$3 = ($69|0)!=(0);
 $70 = HEAP32[(182548)>>2]|0;
 $cmp2$3 = ($70|0)==(2);
 $or$cond51 = $tobool$3 & $cmp2$3;
 if ($or$cond51) {
  _G_DoReborn(3);
 }
 L13: while(1) {
  $4 = HEAP32[99088]|0;
  switch ($4|0) {
  case 0:  {
   break L13;
   break;
  }
  case 1:  {
   _G_DoLoadLevel();
   break;
  }
  case 2:  {
   HEAP32[99092] = 0;
   HEAP32[99095] = 0;
   HEAP32[99094] = 0;
   HEAP32[99091] = 0;
   HEAP32[(181676)>>2] = 0;
   HEAP32[(181672)>>2] = 0;
   HEAP32[(181668)>>2] = 0;
   HEAP32[99041] = 0;
   HEAP32[99042] = 0;
   HEAP32[99040] = 0;
   HEAP32[99076] = 0;
   $5 = HEAP32[99153]|0;
   $6 = HEAP32[99154]|0;
   $7 = HEAP32[99155]|0;
   _G_InitNew($5,$6,$7);
   HEAP32[99088] = 0;
   break;
  }
  case 3:  {
   _G_DoLoadGame();
   break;
  }
  case 4:  {
   _G_DoSaveGame();
   break;
  }
  case 5:  {
   _G_DoPlayDemo();
   break;
  }
  case 6:  {
   _G_DoCompleted();
   break;
  }
  case 7:  {
   _F_StartFinale();
   break;
  }
  case 8:  {
   HEAP32[99077] = 0;
   $8 = HEAP32[(396408)>>2]|0;
   $add$i = (($8) + 1)|0;
   HEAP32[99084] = $add$i;
   _G_DoLoadLevel();
   HEAP32[99088] = 0;
   HEAP32[99152] = 1;
   break;
  }
  case 9:  {
   _V_ScreenShot(141936);
   $9 = HEAP32[99076]|0;
   $message = (((181680 + (($9*288)|0)|0)) + 224|0);
   HEAP32[$message>>2] = 141948;
   HEAP32[99088] = 0;
   break;
  }
  default: {
  }
  }
 }
 $10 = HEAP32[99024]|0;
 $11 = HEAP32[99022]|0;
 $div = (($10|0) / ($11|0))&-1;
 $rem = (($div|0) % 128)&-1;
 $i$140 = 0;
 L27: while(1) {
  $arrayidx16 = (181664 + ($i$140<<2)|0);
  $12 = HEAP32[$arrayidx16>>2]|0;
  $tobool17 = ($12|0)==(0);
  do {
   if (!($tobool17)) {
    $cmd20 = (((181680 + (($i$140*288)|0)|0)) + 8|0);
    $13 = HEAP32[99057]|0;
    $14 = (($13) + ($i$140<<4)|0);
    ;HEAP32[$cmd20>>2]=HEAP32[$14>>2]|0;HEAP32[$cmd20+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$cmd20+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$cmd20+12>>2]=HEAP32[$14+12>>2]|0;
    $15 = HEAP32[99092]|0;
    $tobool22 = ($15|0)==(0);
    do {
     if (!($tobool22)) {
      $16 = HEAP32[99158]|0;
      $17 = HEAP8[$16>>0]|0;
      $cmp$i = ($17<<24>>24)==(-128);
      if ($cmp$i) {
       (_G_CheckDemoStatus()|0);
       break;
      }
      $incdec$ptr$i = ((($16)) + 1|0);
      HEAP32[99158] = $incdec$ptr$i;
      $18 = HEAP8[$16>>0]|0;
      HEAP8[$cmd20>>0] = $18;
      $incdec$ptr2$i = ((($16)) + 2|0);
      HEAP32[99158] = $incdec$ptr2$i;
      $19 = HEAP8[$incdec$ptr$i>>0]|0;
      $sidemove$i = (((181680 + (($i$140*288)|0)|0)) + 9|0);
      HEAP8[$sidemove$i>>0] = $19;
      $20 = HEAP32[99159]|0;
      $tobool$i = ($20|0)==(0);
      $incdec$ptr4$i = ((($16)) + 3|0);
      HEAP32[99158] = $incdec$ptr4$i;
      $21 = HEAP8[$incdec$ptr2$i>>0]|0;
      if ($tobool$i) {
       $conv12$i = $21&255;
       $shl13$i = $conv12$i << 8;
       $conv14$i = $shl13$i&65535;
       $angleturn15$i = (((181680 + (($i$140*288)|0)|0)) + 10|0);
       HEAP16[$angleturn15$i>>1] = $conv14$i;
       $23 = $incdec$ptr4$i;
      } else {
       $conv5$i = $21&255;
       $angleturn$i = (((181680 + (($i$140*288)|0)|0)) + 10|0);
       HEAP16[$angleturn$i>>1] = $conv5$i;
       $incdec$ptr6$i = ((($16)) + 4|0);
       HEAP32[99158] = $incdec$ptr6$i;
       $22 = HEAP8[$incdec$ptr4$i>>0]|0;
       $conv7$i = $22&255;
       $shl$i = $conv7$i << 8;
       $conv96$i = $21&255;
       $or$i = $shl$i | $conv96$i;
       $conv10$i = $or$i&65535;
       HEAP16[$angleturn$i>>1] = $conv10$i;
       $23 = $incdec$ptr6$i;
      }
      $incdec$ptr17$i = ((($23)) + 1|0);
      HEAP32[99158] = $incdec$ptr17$i;
      $24 = HEAP8[$23>>0]|0;
      $buttons$i = (((181680 + (($i$140*288)|0)|0)) + 13|0);
      HEAP8[$buttons$i>>0] = $24;
     }
    } while(0);
    $25 = HEAP32[99093]|0;
    $tobool25 = ($25|0)==(0);
    if (!($tobool25)) {
     _G_WriteDemoTiccmd($cmd20);
    }
    $26 = HEAP8[$cmd20>>0]|0;
    $cmp28 = ($26<<24>>24)>(50);
    if ($cmp28) {
     $arrayidx31 = (181648 + ($i$140<<2)|0);
     HEAP32[$arrayidx31>>2] = 1;
    }
    $27 = HEAP32[99024]|0;
    $and = $27 & 31;
    $cmp33 = ($and|0)==(0);
    if ($cmp33) {
     $shr = $27 >> 5;
     $rem36 = (($shr|0) % 4)&-1;
     $cmp37 = ($rem36|0)==($i$140|0);
     if ($cmp37) {
      $arrayidx40 = (181648 + ($i$140<<2)|0);
      $28 = HEAP32[$arrayidx40>>2]|0;
      $tobool41 = ($28|0)==(0);
      if (!($tobool41)) {
       $arrayidx43 = (2336 + ($i$140<<2)|0);
       $29 = HEAP32[$arrayidx43>>2]|0;
       HEAP32[$vararg_buffer>>2] = $29;
       (_M_snprintf(184384,80,141960,$vararg_buffer)|0);
       $30 = HEAP32[99076]|0;
       $message45 = (((181680 + (($30*288)|0)|0)) + 224|0);
       HEAP32[$message45>>2] = 184384;
       HEAP32[$arrayidx40>>2] = 0;
      }
     }
    }
    $31 = HEAP32[99094]|0;
    $tobool48 = ($31|0)==(0);
    $32 = HEAP32[99095]|0;
    $tobool50 = ($32|0)!=(0);
    $or$cond = $tobool48 | $tobool50;
    if (!($or$cond)) {
     $33 = HEAP32[99024]|0;
     $34 = HEAP32[99022]|0;
     $rem52 = (($33|0) % ($34|0))&-1;
     $tobool53 = ($rem52|0)==(0);
     if ($tobool53) {
      $cmp55 = ($33|0)>(128);
      if ($cmp55) {
       $arrayidx59 = ((181136 + ($i$140<<7)|0) + ($rem)|0);
       $35 = HEAP8[$arrayidx59>>0]|0;
       $consistancy = (((181680 + (($i$140*288)|0)|0)) + 14|0);
       $36 = HEAP8[$consistancy>>0]|0;
       $cmp62 = ($35<<24>>24)==($36<<24>>24);
       if (!($cmp62)) {
        label = 36;
        break L27;
       }
      }
      $mo = (181680 + (($i$140*288)|0)|0);
      $37 = HEAP32[$mo>>2]|0;
      $tobool72 = ($37|0)==(0|0);
      if ($tobool72) {
       $39 = HEAP32[99404]|0;
       $conv79 = $39&255;
       $arrayidx81 = ((181136 + ($i$140<<7)|0) + ($rem)|0);
       HEAP8[$arrayidx81>>0] = $conv79;
       break;
      } else {
       $x = ((($37)) + 12|0);
       $38 = HEAP32[$x>>2]|0;
       $conv76 = $38&255;
       $arrayidx78 = ((181136 + ($i$140<<7)|0) + ($rem)|0);
       HEAP8[$arrayidx78>>0] = $conv76;
       break;
      }
     }
    }
   }
  } while(0);
  $inc86 = (($i$140) + 1)|0;
  $exitcond = ($inc86|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $i$140 = $inc86;
  }
 }
 if ((label|0) == 36) {
  $conv61 = $36&255;
  $conv60 = $35&255;
  HEAP32[$vararg_buffer1>>2] = $conv61;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $conv60;
  _I_Error(141973,$vararg_buffer1);
  // unreachable;
 }
 $40 = HEAP32[45416]|0;
 $tobool93 = ($40|0)==(0);
 L64: do {
  if (!($tobool93)) {
   $trunc = HEAP8[(181693)>>0]|0;
   $tobool99 = ($trunc<<24>>24)>(-1);
   if (!($tobool99)) {
    $trunc$clear = $trunc & 3;
    switch ($trunc$clear<<24>>24) {
    case 1:  {
     $41 = HEAP32[99089]|0;
     $xor = $41 ^ 1;
     HEAP32[99089] = $xor;
     $tobool107 = ($xor|0)==(0);
     if ($tobool107) {
      _S_ResumeSound();
      break L64;
     } else {
      _S_PauseSound();
      break L64;
     }
     break;
    }
    case 2:  {
     $42 = HEAP8[184464]|0;
     $tobool112 = ($42<<24>>24)==(0);
     if ($tobool112) {
      (_M_StringCopy(184464,142011,32)|0);
      $$pre = HEAP8[(181693)>>0]|0;
      $44 = $$pre;
     } else {
      $44 = $trunc;
     }
     $43 = $44 & 28;
     $and120 = $43&255;
     $45 = $and120 >>> 2;
     HEAP32[99179] = $45;
     HEAP32[99088] = 4;
     break L64;
     break;
    }
    default: {
     break L64;
    }
    }
   }
  }
 } while(0);
 $46 = HEAP32[(181668)>>2]|0;
 $tobool93$1 = ($46|0)==(0);
 L77: do {
  if (!($tobool93$1)) {
   $trunc$1 = HEAP8[(181981)>>0]|0;
   $tobool99$1 = ($trunc$1<<24>>24)>(-1);
   if (!($tobool99$1)) {
    $trunc$1$clear = $trunc$1 & 3;
    switch ($trunc$1$clear<<24>>24) {
    case 1:  {
     $52 = HEAP32[99089]|0;
     $xor$1 = $52 ^ 1;
     HEAP32[99089] = $xor$1;
     $tobool107$1 = ($xor$1|0)==(0);
     if ($tobool107$1) {
      _S_ResumeSound();
      break L77;
     } else {
      _S_PauseSound();
      break L77;
     }
     break;
    }
    case 2:  {
     $48 = HEAP8[184464]|0;
     $tobool112$1 = ($48<<24>>24)==(0);
     if ($tobool112$1) {
      (_M_StringCopy(184464,142011,32)|0);
      $$pre45 = HEAP8[(181981)>>0]|0;
      $50 = $$pre45;
     } else {
      $50 = $trunc$1;
     }
     $49 = $50 & 28;
     $and120$1 = $49&255;
     $51 = $and120$1 >>> 2;
     HEAP32[99179] = $51;
     HEAP32[99088] = 4;
     break L77;
     break;
    }
    default: {
     break L77;
    }
    }
   }
  }
 } while(0);
 $53 = HEAP32[(181672)>>2]|0;
 $tobool93$2 = ($53|0)==(0);
 L90: do {
  if (!($tobool93$2)) {
   $trunc$2 = HEAP8[(182269)>>0]|0;
   $tobool99$2 = ($trunc$2<<24>>24)>(-1);
   if (!($tobool99$2)) {
    $trunc$2$clear = $trunc$2 & 3;
    switch ($trunc$2$clear<<24>>24) {
    case 1:  {
     $58 = HEAP32[99089]|0;
     $xor$2 = $58 ^ 1;
     HEAP32[99089] = $xor$2;
     $tobool107$2 = ($xor$2|0)==(0);
     if ($tobool107$2) {
      _S_ResumeSound();
      break L90;
     } else {
      _S_PauseSound();
      break L90;
     }
     break;
    }
    case 2:  {
     $54 = HEAP8[184464]|0;
     $tobool112$2 = ($54<<24>>24)==(0);
     if ($tobool112$2) {
      (_M_StringCopy(184464,142011,32)|0);
      $$pre46 = HEAP8[(182269)>>0]|0;
      $56 = $$pre46;
     } else {
      $56 = $trunc$2;
     }
     $55 = $56 & 28;
     $and120$2 = $55&255;
     $57 = $and120$2 >>> 2;
     HEAP32[99179] = $57;
     HEAP32[99088] = 4;
     break L90;
     break;
    }
    default: {
     break L90;
    }
    }
   }
  }
 } while(0);
 $59 = HEAP32[(181676)>>2]|0;
 $tobool93$3 = ($59|0)==(0);
 L103: do {
  if (!($tobool93$3)) {
   $trunc$3 = HEAP8[(182557)>>0]|0;
   $tobool99$3 = ($trunc$3<<24>>24)>(-1);
   if (!($tobool99$3)) {
    $trunc$3$clear = $trunc$3 & 3;
    switch ($trunc$3$clear<<24>>24) {
    case 1:  {
     $64 = HEAP32[99089]|0;
     $xor$3 = $64 ^ 1;
     HEAP32[99089] = $xor$3;
     $tobool107$3 = ($xor$3|0)==(0);
     if ($tobool107$3) {
      _S_ResumeSound();
      break L103;
     } else {
      _S_PauseSound();
      break L103;
     }
     break;
    }
    case 2:  {
     $60 = HEAP8[184464]|0;
     $tobool112$3 = ($60<<24>>24)==(0);
     if ($tobool112$3) {
      (_M_StringCopy(184464,142011,32)|0);
      $$pre47 = HEAP8[(182557)>>0]|0;
      $62 = $$pre47;
     } else {
      $62 = $trunc$3;
     }
     $61 = $62 & 28;
     $and120$3 = $61&255;
     $63 = $and120$3 >>> 2;
     HEAP32[99179] = $63;
     HEAP32[99088] = 4;
     break L103;
     break;
    }
    default: {
     break L103;
    }
    }
   }
  }
 } while(0);
 $65 = HEAP32[99096]|0;
 $cmp128 = ($65|0)==(1);
 $66 = HEAP32[99077]|0;
 $cmp131 = ($66|0)!=(1);
 $or$cond1 = $cmp128 & $cmp131;
 if ($or$cond1) {
  _WI_End();
  $$pr = HEAP32[99077]|0;
  $47 = $$pr;
 } else {
  $47 = $66;
 }
 HEAP32[99096] = $47;
 switch ($47|0) {
 case 0:  {
  _P_Ticker();
  _ST_Ticker();
  _AM_Ticker();
  _HU_Ticker();
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  _WI_Ticker();
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  _F_Ticker();
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  _D_PageTicker();
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _G_DoReborn($playernum) {
 $playernum = $playernum|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $add14 = 0, $arrayidx3 = 0, $arrayidx8$lcssa = 0, $call = 0, $call9 = 0, $call9$1 = 0, $call9$2 = 0, $call9$3 = 0, $conv = 0, $conv15 = 0, $i$014$lcssa = 0, $mo = 0, $player = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0;
 var $tobool10$1 = 0, $tobool10$2 = 0, $tobool10$3 = 0, $tobool4 = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99094]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  HEAP32[99088] = 1;
  return;
 }
 $mo = (181680 + (($playernum*288)|0)|0);
 $1 = HEAP32[$mo>>2]|0;
 $player = ((($1)) + 132|0);
 HEAP32[$player>>2] = 0;
 $2 = HEAP32[99091]|0;
 $tobool1 = ($2|0)==(0);
 if (!($tobool1)) {
  _G_DeathMatchSpawnPlayer($playernum);
  return;
 }
 $arrayidx3 = (190672 + (($playernum*10)|0)|0);
 $call = (_G_CheckSpot($playernum,$arrayidx3)|0);
 $tobool4 = ($call|0)==(0);
 if (!($tobool4)) {
  _P_SpawnPlayer($arrayidx3);
  return;
 }
 $call9 = (_G_CheckSpot($playernum,190672)|0);
 $tobool10 = ($call9|0)==(0);
 if ($tobool10) {
  $call9$1 = (_G_CheckSpot($playernum,(190682))|0);
  $tobool10$1 = ($call9$1|0)==(0);
  if ($tobool10$1) {
   $call9$2 = (_G_CheckSpot($playernum,(190692))|0);
   $tobool10$2 = ($call9$2|0)==(0);
   if ($tobool10$2) {
    $call9$3 = (_G_CheckSpot($playernum,(190702))|0);
    $tobool10$3 = ($call9$3|0)==(0);
    if ($tobool10$3) {
     _P_SpawnPlayer($arrayidx3);
     return;
    } else {
     $arrayidx8$lcssa = (190702);$i$014$lcssa = 3;
    }
   } else {
    $arrayidx8$lcssa = (190692);$i$014$lcssa = 2;
   }
  } else {
   $arrayidx8$lcssa = (190682);$i$014$lcssa = 1;
  }
 } else {
  $arrayidx8$lcssa = 190672;$i$014$lcssa = 0;
 }
 $add = (($playernum) + 1)|0;
 $conv = $add&65535;
 $type = (((190672 + (($i$014$lcssa*10)|0)|0)) + 6|0);
 HEAP16[$type>>1] = $conv;
 _P_SpawnPlayer($arrayidx8$lcssa);
 $add14 = (($i$014$lcssa) + 1)|0;
 $conv15 = $add14&65535;
 HEAP16[$type>>1] = $conv15;
 return;
}
function _G_InitNew($skill,$episode,$map) {
 $skill = $skill|0;
 $episode = $episode|0;
 $map = $map|0;
 var $$ = 0, $$sink34 = 0, $$sink35 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $call = 0, $cmp15 = 0, $cmp16 = 0, $cmp22 = 0, $cmp24 = 0, $cmp27 = 0, $cmp3 = 0, $cmp36 = 0, $cmp42 = 0, $cmp5 = 0, $cmp61 = 0, $cmp63 = 0, $cmp66 = 0, $episode$addr$1 = 0, $map$addr$0 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0;
 var $shl = 0, $shl$1 = 0, $shl$10 = 0, $shl$11 = 0, $shl$12 = 0, $shl$12$sink = 0, $shl$2 = 0, $shl$3 = 0, $shl$4 = 0, $shl$5 = 0, $shl$6 = 0, $shl$7 = 0, $shl$8 = 0, $shl$9 = 0, $shr = 0, $shr$1 = 0, $shr$10 = 0, $shr$11 = 0, $shr$12 = 0, $shr$2 = 0;
 var $shr$3 = 0, $shr$4 = 0, $shr$5 = 0, $shr$6 = 0, $shr$7 = 0, $shr$8 = 0, $shr$9 = 0, $skytexturename$0 = 0, $spec$select = 0, $spec$select25 = 0, $spec$select26 = 0, $spec$select27 = 0, $spec$select28 = 0, $spec$select29 = 0, $spec$select30 = 0, $storemerge = 0, $tobool = 0, $tobool28 = 0, $tobool32 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99089]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  HEAP32[99089] = 0;
  _S_ResumeSound();
 }
 $1 = ($skill|0)<(4);
 $spec$select = $1 ? $skill : 4;
 $2 = HEAP32[32141]|0;
 $cmp3 = ($2>>>0)>(5);
 if ($cmp3) {
  $cmp5 = ($episode|0)==(0);
  $spec$select25 = $cmp5 ? 4 : $episode;
  $episode$addr$1 = $spec$select25;
 } else {
  $3 = ($episode|0)>(1);
  $spec$select26 = $3 ? $episode : 1;
  $4 = ($spec$select26|0)<(3);
  $spec$select29 = $4 ? $spec$select26 : 3;
  $episode$addr$1 = $spec$select29;
 }
 $cmp15 = ($episode$addr$1|0)>(1);
 $5 = HEAP32[32140]|0;
 $cmp16 = ($5|0)==(0);
 $or$cond = $cmp15 & $cmp16;
 $spec$select27 = $or$cond ? 1 : $episode$addr$1;
 $6 = ($map|0)>(1);
 $map$addr$0 = $6 ? $map : 1;
 $cmp22 = ($map$addr$0|0)>(9);
 $cmp24 = ($5|0)!=(2);
 $or$cond1 = $cmp22 & $cmp24;
 $spec$select28 = $or$cond1 ? 9 : $map$addr$0;
 _M_ClearRandom();
 $cmp27 = ($skill|0)>(3);
 $7 = HEAP32[99041]|0;
 $tobool28 = ($7|0)!=(0);
 $or$cond2 = $cmp27 | $tobool28;
 $storemerge = $or$cond2&1;
 HEAP32[99156] = $storemerge;
 $8 = HEAP32[99042]|0;
 $tobool32 = ($8|0)==(0);
 if ($tobool32) {
  $9 = HEAP32[99086]|0;
  $cmp36 = ($9|0)!=(4);
  $or$cond3 = $cmp27 & $cmp36;
  if ($or$cond3) {
   label = 8;
  } else {
   $cmp42 = ($9|0)==(4);
   $or$cond4 = $1 & $cmp42;
   if ($or$cond4) {
    $23 = HEAP32[(16852)>>2]|0;
    $shl = $23 << 1;
    HEAP32[(16852)>>2] = $shl;
    $24 = HEAP32[(16880)>>2]|0;
    $shl$1 = $24 << 1;
    HEAP32[(16880)>>2] = $shl$1;
    $25 = HEAP32[(16908)>>2]|0;
    $shl$2 = $25 << 1;
    HEAP32[(16908)>>2] = $shl$2;
    $26 = HEAP32[(16936)>>2]|0;
    $shl$3 = $26 << 1;
    HEAP32[(16936)>>2] = $shl$3;
    $27 = HEAP32[(16964)>>2]|0;
    $shl$4 = $27 << 1;
    HEAP32[(16964)>>2] = $shl$4;
    $28 = HEAP32[(16992)>>2]|0;
    $shl$5 = $28 << 1;
    HEAP32[(16992)>>2] = $shl$5;
    $29 = HEAP32[(17020)>>2]|0;
    $shl$6 = $29 << 1;
    HEAP32[(17020)>>2] = $shl$6;
    $30 = HEAP32[(17048)>>2]|0;
    $shl$7 = $30 << 1;
    HEAP32[(17048)>>2] = $shl$7;
    $31 = HEAP32[(17076)>>2]|0;
    $shl$8 = $31 << 1;
    HEAP32[(17076)>>2] = $shl$8;
    $32 = HEAP32[(17104)>>2]|0;
    $shl$9 = $32 << 1;
    HEAP32[(17104)>>2] = $shl$9;
    $33 = HEAP32[(17132)>>2]|0;
    $shl$10 = $33 << 1;
    HEAP32[(17132)>>2] = $shl$10;
    $34 = HEAP32[(17160)>>2]|0;
    $shl$11 = $34 << 1;
    HEAP32[(17160)>>2] = $shl$11;
    $35 = HEAP32[(17188)>>2]|0;
    $shl$12 = $35 << 1;
    $$sink34 = 655360;$$sink35 = 983040;$shl$12$sink = $shl$12;
    label = 11;
   }
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $10 = HEAP32[(16852)>>2]|0;
  $shr = $10 >> 1;
  HEAP32[(16852)>>2] = $shr;
  $11 = HEAP32[(16880)>>2]|0;
  $shr$1 = $11 >> 1;
  HEAP32[(16880)>>2] = $shr$1;
  $12 = HEAP32[(16908)>>2]|0;
  $shr$2 = $12 >> 1;
  HEAP32[(16908)>>2] = $shr$2;
  $13 = HEAP32[(16936)>>2]|0;
  $shr$3 = $13 >> 1;
  HEAP32[(16936)>>2] = $shr$3;
  $14 = HEAP32[(16964)>>2]|0;
  $shr$4 = $14 >> 1;
  HEAP32[(16964)>>2] = $shr$4;
  $15 = HEAP32[(16992)>>2]|0;
  $shr$5 = $15 >> 1;
  HEAP32[(16992)>>2] = $shr$5;
  $16 = HEAP32[(17020)>>2]|0;
  $shr$6 = $16 >> 1;
  HEAP32[(17020)>>2] = $shr$6;
  $17 = HEAP32[(17048)>>2]|0;
  $shr$7 = $17 >> 1;
  HEAP32[(17048)>>2] = $shr$7;
  $18 = HEAP32[(17076)>>2]|0;
  $shr$8 = $18 >> 1;
  HEAP32[(17076)>>2] = $shr$8;
  $19 = HEAP32[(17104)>>2]|0;
  $shr$9 = $19 >> 1;
  HEAP32[(17104)>>2] = $shr$9;
  $20 = HEAP32[(17132)>>2]|0;
  $shr$10 = $20 >> 1;
  HEAP32[(17132)>>2] = $shr$10;
  $21 = HEAP32[(17160)>>2]|0;
  $shr$11 = $21 >> 1;
  HEAP32[(17160)>>2] = $shr$11;
  $22 = HEAP32[(17188)>>2]|0;
  $shr$12 = $22 >> 1;
  $$sink34 = 1310720;$$sink35 = 1310720;$shl$12$sink = $shr$12;
  label = 11;
 }
 if ((label|0) == 11) {
  HEAP32[(17188)>>2] = $shl$12$sink;
  HEAP32[(32108)>>2] = $$sink35;
  HEAP32[(33580)>>2] = $$sink34;
  HEAP32[(33488)>>2] = $$sink34;
 }
 HEAP32[(181684)>>2] = 2;
 HEAP32[(181972)>>2] = 2;
 HEAP32[(182260)>>2] = 2;
 HEAP32[(182548)>>2] = 2;
 HEAP32[99157] = 1;
 HEAP32[99089] = 0;
 HEAP32[99092] = 0;
 HEAP32[98972] = 0;
 HEAP32[99085] = $spec$select27;
 HEAP32[99084] = $spec$select28;
 HEAP32[99086] = $spec$select;
 HEAP32[99152] = 1;
 $36 = HEAP32[32140]|0;
 $cmp61 = ($36|0)==(2);
 if ($cmp61) {
  $cmp63 = ($spec$select28>>>0)<(12);
  $cmp66 = ($spec$select28>>>0)<(21);
  $$ = $cmp66 ? 141899 : 141904;
  $spec$select30 = $cmp63 ? 141909 : $$;
  $skytexturename$0 = $spec$select30;
  $call = (_R_TextureNumForName($skytexturename$0)|0);
  HEAP32[99683] = $call;
  _G_DoLoadLevel();
  return;
 }
 switch ($spec$select27|0) {
 case 4:  {
  $skytexturename$0 = 142642;
  $call = (_R_TextureNumForName($skytexturename$0)|0);
  HEAP32[99683] = $call;
  _G_DoLoadLevel();
  return;
  break;
 }
 case 2:  {
  $skytexturename$0 = 141899;
  $call = (_R_TextureNumForName($skytexturename$0)|0);
  HEAP32[99683] = $call;
  _G_DoLoadLevel();
  return;
  break;
 }
 case 3:  {
  $skytexturename$0 = 141904;
  $call = (_R_TextureNumForName($skytexturename$0)|0);
  HEAP32[99683] = $call;
  _G_DoLoadLevel();
  return;
  break;
 }
 default: {
  $skytexturename$0 = 141909;
  $call = (_R_TextureNumForName($skytexturename$0)|0);
  HEAP32[99683] = $call;
  _G_DoLoadLevel();
  return;
 }
 }
}
function _G_DoLoadGame() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call1 = 0, $call5 = 0, $cmp = 0, $tobool = 0, $tobool10 = 0, $tobool6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[99088] = 0;
 $call = (_fopen(182960,157528)|0);
 HEAP32[99491] = $call;
 $cmp = ($call|0)==(0|0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 HEAP32[99492] = 0;
 $call1 = (_P_ReadSaveGameHeader()|0);
 $tobool = ($call1|0)==(0);
 if ($tobool) {
  $0 = HEAP32[99491]|0;
  (_fclose($0)|0);
  STACKTOP = sp;return;
 }
 $1 = HEAP32[99557]|0;
 $2 = HEAP32[99086]|0;
 $3 = HEAP32[99085]|0;
 $4 = HEAP32[99084]|0;
 _G_InitNew($2,$3,$4);
 HEAP32[99557] = $1;
 _P_UnArchivePlayers();
 _P_UnArchiveWorld();
 _P_UnArchiveThinkers();
 _P_UnArchiveSpecials();
 $call5 = (_P_ReadSaveGameEOF()|0);
 $tobool6 = ($call5|0)==(0);
 if ($tobool6) {
  _I_Error(142629,$vararg_buffer);
  // unreachable;
 }
 $5 = HEAP32[99491]|0;
 (_fclose($5)|0);
 $6 = HEAP32[99621]|0;
 $tobool10 = ($6|0)==(0);
 if (!($tobool10)) {
  _R_ExecuteSetViewSize();
 }
 _R_FillBackScreen();
 STACKTOP = sp;return;
}
function _G_DoSaveGame() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $call4 = 0, $call8 = 0, $cmp = 0, $cmp13 = 0, $cmp5 = 0, $cmp9 = 0, $message = 0, $recovery_savegame_file$0 = 0, $tobool = 0, $vararg_buffer = 0, $vararg_buffer2 = 0;
 var $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $call = (_P_TempSaveGameFile()|0);
 $0 = HEAP32[99179]|0;
 $call1 = (_P_SaveGameFile($0)|0);
 $call2 = (_fopen($call,151266)|0);
 HEAP32[99491] = $call2;
 $cmp = ($call2|0)==(0|0);
 if ($cmp) {
  $call3 = (_M_TempFile(142428)|0);
  $call4 = (_fopen($call3,151266)|0);
  HEAP32[99491] = $call4;
  $cmp5 = ($call4|0)==(0|0);
  if ($cmp5) {
   HEAP32[$vararg_buffer>>2] = $call;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $call3;
   _I_Error(142441,$vararg_buffer);
   // unreachable;
  } else {
   $recovery_savegame_file$0 = $call3;
  }
 } else {
  $recovery_savegame_file$0 = 0;
 }
 HEAP32[99492] = 0;
 _P_WriteSaveGameHeader(184464);
 _P_ArchivePlayers();
 _P_ArchiveWorld();
 _P_ArchiveThinkers();
 _P_ArchiveSpecials();
 _P_WriteSaveGameEOF();
 $1 = HEAP32[32158]|0;
 $tobool = ($1|0)==(0);
 if (!($tobool)) {
  $2 = HEAP32[99491]|0;
  $call8 = (_ftell($2)|0);
  $cmp9 = ($call8|0)>(180224);
  if ($cmp9) {
   _I_Error(142495,$vararg_buffer2);
   // unreachable;
  }
 }
 $3 = HEAP32[99491]|0;
 (_fclose($3)|0);
 $cmp13 = ($recovery_savegame_file$0|0)==(0|0);
 if ($cmp13) {
  (_remove($call1)|0);
  (_rename($call,$call1)|0);
  HEAP32[99088] = 0;
  (_M_StringCopy(184464,400136,32)|0);
  $4 = HEAP32[99076]|0;
  $message = (((181680 + (($4*288)|0)|0)) + 224|0);
  HEAP32[$message>>2] = 142617;
  _R_FillBackScreen();
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer4>>2] = $call;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $recovery_savegame_file$0;
  _I_Error(142519,$vararg_buffer4);
  // unreachable;
 }
}
function _G_DoPlayDemo() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $call = 0, $call31 = 0, $call35 = 0, $call40 = 0, $cmp = 0, $cmp3 = 0, $cmp32 = 0, $cmp36 = 0, $conv = 0, $conv12 = 0, $conv14 = 0, $conv16 = 0, $conv18 = 0, $conv20 = 0, $conv22 = 0, $conv24 = 0, $conv26 = 0, $conv30 = 0, $conv30$1 = 0, $conv30$2 = 0;
 var $conv30$3 = 0, $div$i21 = 0, $incdec$ptr = 0, $incdec$ptr11 = 0, $incdec$ptr13 = 0, $incdec$ptr15 = 0, $incdec$ptr17 = 0, $incdec$ptr19 = 0, $incdec$ptr21 = 0, $incdec$ptr23 = 0, $incdec$ptr25 = 0, $incdec$ptr29 = 0, $incdec$ptr29$1 = 0, $incdec$ptr29$2 = 0, $incdec$ptr29$3 = 0, $retval$0$i = 0, $retval$0$i16 = 0, $retval$0$i20 = 0, $tobool = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 HEAP32[99088] = 0;
 $0 = HEAP32[99163]|0;
 $call = (_W_CacheLumpName($0,1)|0);
 HEAP32[99162] = $call;
 $incdec$ptr = ((($call)) + 1|0);
 HEAP32[99158] = $incdec$ptr;
 $1 = HEAP8[$call>>0]|0;
 $conv = $1&255;
 $2 = HEAP32[32141]|0;
 switch ($2|0) {
 case 0:  {
  _I_Error(142079,$vararg_buffer);
  // unreachable;
  break;
 }
 case 1:  {
  $retval$0$i = 106;
  break;
 }
 case 2:  {
  $retval$0$i = 107;
  break;
 }
 case 3:  {
  $retval$0$i = 108;
  break;
 }
 default: {
  $retval$0$i = 109;
 }
 }
 $cmp = ($retval$0$i|0)==($conv|0);
 do {
  if ($cmp) {
   HEAP32[99159] = 0;
  } else {
   $cmp3 = ($1<<24>>24)==(111);
   if ($cmp3) {
    HEAP32[99159] = 1;
    break;
   }
   $3 = HEAP32[32141]|0;
   switch ($3|0) {
   case 0:  {
    _I_Error(142079,$vararg_buffer1);
    // unreachable;
    break;
   }
   case 1:  {
    $retval$0$i16 = 106;
    break;
   }
   case 2:  {
    $retval$0$i16 = 107;
    break;
   }
   case 3:  {
    $retval$0$i16 = 108;
    break;
   }
   default: {
    $retval$0$i16 = 109;
   }
   }
   switch ($1<<24>>24) {
   case 104:  {
    $retval$0$i20 = 142172;
    break;
   }
   case 105:  {
    $retval$0$i20 = 142167;
    break;
   }
   case 106:  {
    $retval$0$i20 = 142155;
    break;
   }
   case 107:  {
    $retval$0$i20 = 142144;
    break;
   }
   case 108:  {
    $retval$0$i20 = 142139;
    break;
   }
   case 109:  {
    $retval$0$i20 = 142134;
    break;
   }
   default: {
    $4 = ($1&255)<(5);
    if ($4) {
     $retval$0$i20 = 142177;
    } else {
     $div$i21 = (($conv>>>0) / 100)&-1;
     $5 = ($div$i21*100)|0;
     $6 = (($conv) - ($5))|0;
     HEAP32[$vararg_buffer3>>2] = $div$i21;
     $vararg_ptr5 = ((($vararg_buffer3)) + 4|0);
     HEAP32[$vararg_ptr5>>2] = $6;
     (_M_snprintf(184496,16,142118,$vararg_buffer3)|0);
     $retval$0$i20 = 184496;
    }
   }
   }
   HEAP32[$vararg_buffer6>>2] = $conv;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $retval$0$i16;
   $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
   HEAP32[$vararg_ptr10>>2] = $retval$0$i20;
   (_printf(142192,$vararg_buffer6)|0);
  }
 } while(0);
 $7 = HEAP32[99158]|0;
 $incdec$ptr11 = ((($7)) + 1|0);
 HEAP32[99158] = $incdec$ptr11;
 $8 = HEAP8[$7>>0]|0;
 $incdec$ptr13 = ((($7)) + 2|0);
 HEAP32[99158] = $incdec$ptr13;
 $9 = HEAP8[$incdec$ptr11>>0]|0;
 $incdec$ptr15 = ((($7)) + 3|0);
 HEAP32[99158] = $incdec$ptr15;
 $10 = HEAP8[$incdec$ptr13>>0]|0;
 $incdec$ptr17 = ((($7)) + 4|0);
 HEAP32[99158] = $incdec$ptr17;
 $11 = HEAP8[$incdec$ptr15>>0]|0;
 $conv18 = $11&255;
 HEAP32[99091] = $conv18;
 $incdec$ptr19 = ((($7)) + 5|0);
 $12 = HEAP8[$incdec$ptr17>>0]|0;
 $conv20 = $12&255;
 HEAP32[99041] = $conv20;
 $incdec$ptr21 = ((($7)) + 6|0);
 $13 = HEAP8[$incdec$ptr19>>0]|0;
 $conv22 = $13&255;
 HEAP32[99042] = $conv22;
 $incdec$ptr23 = ((($7)) + 7|0);
 $14 = HEAP8[$incdec$ptr21>>0]|0;
 $conv24 = $14&255;
 HEAP32[99040] = $conv24;
 $incdec$ptr25 = ((($7)) + 8|0);
 $15 = HEAP8[$incdec$ptr23>>0]|0;
 $conv26 = $15&255;
 HEAP32[99076] = $conv26;
 $incdec$ptr29 = ((($7)) + 9|0);
 $16 = HEAP8[$incdec$ptr25>>0]|0;
 $conv30 = $16&255;
 HEAP32[45416] = $conv30;
 $incdec$ptr29$1 = ((($7)) + 10|0);
 $17 = HEAP8[$incdec$ptr29>>0]|0;
 $conv30$1 = $17&255;
 HEAP32[(181668)>>2] = $conv30$1;
 $incdec$ptr29$2 = ((($7)) + 11|0);
 $18 = HEAP8[$incdec$ptr29$1>>0]|0;
 $conv30$2 = $18&255;
 HEAP32[(181672)>>2] = $conv30$2;
 $incdec$ptr29$3 = ((($7)) + 12|0);
 HEAP32[99158] = $incdec$ptr29$3;
 $19 = HEAP8[$incdec$ptr29$2>>0]|0;
 $conv30$3 = $19&255;
 HEAP32[(181676)>>2] = $conv30$3;
 $conv12 = $8&255;
 $conv14 = $9&255;
 $conv16 = $10&255;
 $tobool = ($17<<24>>24)==(0);
 if ($tobool) {
  $call31 = (_M_CheckParm(142409)|0);
  $cmp32 = ($call31|0)>(0);
  if (!($cmp32)) {
   $call35 = (_M_CheckParm(142419)|0);
   $cmp36 = ($call35|0)>(0);
   if (!($cmp36)) {
    HEAP32[32150] = 0;
    _G_InitNew($conv12,$conv14,$conv16);
    HEAP32[32150] = 1;
    $call40 = (_I_GetTime()|0);
    HEAP32[99164] = $call40;
    HEAP32[99157] = 0;
    HEAP32[99092] = 1;
    STACKTOP = sp;return;
   }
  }
 }
 HEAP32[99094] = 1;
 HEAP32[99095] = 1;
 HEAP32[32150] = 0;
 _G_InitNew($conv12,$conv14,$conv16);
 HEAP32[32150] = 1;
 $call40 = (_I_GetTime()|0);
 HEAP32[99164] = $call40;
 HEAP32[99157] = 0;
 HEAP32[99092] = 1;
 STACKTOP = sp;return;
}
function _G_DoCompleted() {
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and$i = 0, $and$i$1 = 0, $and$i$2 = 0, $and$i$3 = 0, $arrayidx70 = 0, $arrayidx75 = 0, $arrayidx75$sink = 0, $arrayidx78 = 0, $cmp25 = 0, $cmp2535 = 0, $cmp2537 = 0, $cmp4 = 0, $cmp6 = 0, $cmp72 = 0, $didsecret39 = 0;
 var $flags$i = 0, $flags$i$1 = 0, $flags$i$2 = 0, $flags$i$3 = 0, $mul76 = 0, $sub = 0, $sub40 = 0, $switch = 0, $tobool = 0, $tobool$1 = 0, $tobool$2 = 0, $tobool$3 = 0, $tobool1 = 0, $tobool43 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 HEAP32[99088] = 0;
 $0 = HEAP32[45416]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  dest=(181732); stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $1 = HEAP32[45420]|0;
  $flags$i = ((($1)) + 104|0);
  $2 = HEAP32[$flags$i>>2]|0;
  $and$i = $2 & -262145;
  HEAP32[$flags$i>>2] = $and$i;
  HEAP32[(181920)>>2] = 0;
  HEAP32[(181924)>>2] = 0;
  HEAP32[(181908)>>2] = 0;
  HEAP32[(181912)>>2] = 0;
 }
 $3 = HEAP32[(181668)>>2]|0;
 $tobool$1 = ($3|0)==(0);
 if (!($tobool$1)) {
  dest=(182020); stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $35 = HEAP32[(181968)>>2]|0;
  $flags$i$1 = ((($35)) + 104|0);
  $36 = HEAP32[$flags$i$1>>2]|0;
  $and$i$1 = $36 & -262145;
  HEAP32[$flags$i$1>>2] = $and$i$1;
  HEAP32[(182208)>>2] = 0;
  HEAP32[(182212)>>2] = 0;
  HEAP32[(182196)>>2] = 0;
  HEAP32[(182200)>>2] = 0;
 }
 $37 = HEAP32[(181672)>>2]|0;
 $tobool$2 = ($37|0)==(0);
 if (!($tobool$2)) {
  dest=(182308); stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $38 = HEAP32[(182256)>>2]|0;
  $flags$i$2 = ((($38)) + 104|0);
  $39 = HEAP32[$flags$i$2>>2]|0;
  $and$i$2 = $39 & -262145;
  HEAP32[$flags$i$2>>2] = $and$i$2;
  HEAP32[(182496)>>2] = 0;
  HEAP32[(182500)>>2] = 0;
  HEAP32[(182484)>>2] = 0;
  HEAP32[(182488)>>2] = 0;
 }
 $40 = HEAP32[(181676)>>2]|0;
 $tobool$3 = ($40|0)==(0);
 if (!($tobool$3)) {
  dest=(182596); stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $41 = HEAP32[(182544)>>2]|0;
  $flags$i$3 = ((($41)) + 104|0);
  $42 = HEAP32[$flags$i$3>>2]|0;
  $and$i$3 = $42 & -262145;
  HEAP32[$flags$i$3>>2] = $and$i$3;
  HEAP32[(182784)>>2] = 0;
  HEAP32[(182788)>>2] = 0;
  HEAP32[(182772)>>2] = 0;
  HEAP32[(182776)>>2] = 0;
 }
 $43 = HEAP32[98972]|0;
 $tobool1 = ($43|0)==(0);
 if (!($tobool1)) {
  _AM_Stop();
 }
 $4 = HEAP32[32140]|0;
 $cmp4 = ($4|0)==(2);
 L16: do {
  if ($cmp4) {
   $5 = HEAP32[99084]|0;
   $cmp2535 = ($5|0)==(9);
   $12 = $5;$cmp2537 = $cmp2535;
  } else {
   $6 = HEAP32[32141]|0;
   $cmp6 = ($6|0)==(9);
   $7 = HEAP32[99084]|0;
   L19: do {
    if ($cmp6) {
     switch ($7|0) {
     case 5:  {
      HEAP32[99088] = 7;
      return;
      break;
     }
     case 8:  {
      HEAP32[99088] = 7;
      return;
      break;
     }
     default: {
      $8 = $7;
      break L19;
     }
     }
    } else {
     switch ($7|0) {
     case 8:  {
      break;
     }
     case 9:  {
      HEAP32[(181964)>>2] = 1;
      HEAP32[(182252)>>2] = 1;
      HEAP32[(182540)>>2] = 1;
      HEAP32[(182828)>>2] = 1;
      $8 = 9;
      break L19;
      break;
     }
     default: {
      $12 = $7;$cmp2537 = 0;
      break L16;
     }
     }
     HEAP32[99088] = 7;
     return;
    }
   } while(0);
   $cmp25 = ($8|0)==(9);
   if ($cmp25) {
    HEAP32[(181964)>>2] = 1;
    HEAP32[(182252)>>2] = 1;
    HEAP32[(182540)>>2] = 1;
    HEAP32[(182828)>>2] = 1;
    $12 = 9;$cmp2537 = $cmp25;
   } else {
    $12 = $8;$cmp2537 = $cmp25;
   }
  }
 } while(0);
 $9 = HEAP32[99076]|0;
 $didsecret39 = (((181680 + (($9*288)|0)|0)) + 284|0);
 $10 = HEAP32[$didsecret39>>2]|0;
 HEAP32[(396400)>>2] = $10;
 $11 = HEAP32[99085]|0;
 $sub = (($11) + -1)|0;
 HEAP32[99099] = $sub;
 $sub40 = (($12) + -1)|0;
 HEAP32[(396404)>>2] = $sub40;
 $13 = HEAP32[99098]|0;
 $tobool43 = ($13|0)!=(0);
 L34: do {
  if ($cmp4) {
   if ($tobool43) {
    switch ($12|0) {
    case 15:  {
     HEAP32[(396408)>>2] = 30;
     break L34;
     break;
    }
    case 31:  {
     HEAP32[(396408)>>2] = 31;
     break L34;
     break;
    }
    default: {
     break L34;
    }
    }
   } else {
    $$off = (($12) + -31)|0;
    $switch = ($$off>>>0)<(2);
    if ($switch) {
     HEAP32[(396408)>>2] = 15;
     break;
    } else {
     HEAP32[(396408)>>2] = $12;
     break;
    }
   }
  } else {
   if ($tobool43) {
    HEAP32[(396408)>>2] = 8;
    break;
   }
   if (!($cmp2537)) {
    HEAP32[(396408)>>2] = $12;
    break;
   }
   switch ($11|0) {
   case 1:  {
    HEAP32[(396408)>>2] = 3;
    break L34;
    break;
   }
   case 2:  {
    HEAP32[(396408)>>2] = 5;
    break L34;
    break;
   }
   case 3:  {
    HEAP32[(396408)>>2] = 6;
    break L34;
    break;
   }
   case 4:  {
    HEAP32[(396408)>>2] = 2;
    break L34;
    break;
   }
   default: {
    break L34;
   }
   }
  }
 } while(0);
 $14 = HEAP32[99149]|0;
 HEAP32[(396412)>>2] = $14;
 $15 = HEAP32[99150]|0;
 HEAP32[(396416)>>2] = $15;
 $16 = HEAP32[99151]|0;
 HEAP32[(396420)>>2] = $16;
 HEAP32[(396424)>>2] = 0;
 do {
  if ($cmp4) {
   $arrayidx70 = (2080 + ($sub40<<2)|0);
   $arrayidx75$sink = $arrayidx70;
  } else {
   $cmp72 = ($11|0)<(4);
   if ($cmp72) {
    $arrayidx75 = ((1920 + (($11*40)|0)|0) + ($12<<2)|0);
    $arrayidx75$sink = $arrayidx75;
    break;
   } else {
    $arrayidx78 = (2080 + ($12<<2)|0);
    $arrayidx75$sink = $arrayidx78;
    break;
   }
  }
 } while(0);
 $17 = HEAP32[$arrayidx75$sink>>2]|0;
 $mul76 = ($17*35)|0;
 HEAP32[(396428)>>2] = $mul76;
 HEAP32[(396432)>>2] = $9;
 $18 = HEAP32[99557]|0;
 $19 = HEAP32[45416]|0;
 HEAP32[(396436)>>2] = $19;
 $20 = HEAP32[(181892)>>2]|0;
 HEAP32[(396440)>>2] = $20;
 $21 = HEAP32[(181896)>>2]|0;
 HEAP32[(396444)>>2] = $21;
 $22 = HEAP32[(181900)>>2]|0;
 HEAP32[(396448)>>2] = $22;
 HEAP32[(396452)>>2] = $18;
 ;HEAP32[(396456)>>2]=HEAP32[(181784)>>2]|0;HEAP32[(396456)+4>>2]=HEAP32[(181784)+4>>2]|0;HEAP32[(396456)+8>>2]=HEAP32[(181784)+8>>2]|0;HEAP32[(396456)+12>>2]=HEAP32[(181784)+12>>2]|0;
 $23 = HEAP32[(181668)>>2]|0;
 HEAP32[(396476)>>2] = $23;
 $24 = HEAP32[(182180)>>2]|0;
 HEAP32[(396480)>>2] = $24;
 $25 = HEAP32[(182184)>>2]|0;
 HEAP32[(396484)>>2] = $25;
 $26 = HEAP32[(182188)>>2]|0;
 HEAP32[(396488)>>2] = $26;
 HEAP32[(396492)>>2] = $18;
 ;HEAP32[(396496)>>2]=HEAP32[(182072)>>2]|0;HEAP32[(396496)+4>>2]=HEAP32[(182072)+4>>2]|0;HEAP32[(396496)+8>>2]=HEAP32[(182072)+8>>2]|0;HEAP32[(396496)+12>>2]=HEAP32[(182072)+12>>2]|0;
 $27 = HEAP32[(181672)>>2]|0;
 HEAP32[(396516)>>2] = $27;
 $28 = HEAP32[(182468)>>2]|0;
 HEAP32[(396520)>>2] = $28;
 $29 = HEAP32[(182472)>>2]|0;
 HEAP32[(396524)>>2] = $29;
 $30 = HEAP32[(182476)>>2]|0;
 HEAP32[(396528)>>2] = $30;
 HEAP32[(396532)>>2] = $18;
 ;HEAP32[(396536)>>2]=HEAP32[(182360)>>2]|0;HEAP32[(396536)+4>>2]=HEAP32[(182360)+4>>2]|0;HEAP32[(396536)+8>>2]=HEAP32[(182360)+8>>2]|0;HEAP32[(396536)+12>>2]=HEAP32[(182360)+12>>2]|0;
 $31 = HEAP32[(181676)>>2]|0;
 HEAP32[(396556)>>2] = $31;
 $32 = HEAP32[(182756)>>2]|0;
 HEAP32[(396560)>>2] = $32;
 $33 = HEAP32[(182760)>>2]|0;
 HEAP32[(396564)>>2] = $33;
 $34 = HEAP32[(182764)>>2]|0;
 HEAP32[(396568)>>2] = $34;
 HEAP32[(396572)>>2] = $18;
 ;HEAP32[(396576)>>2]=HEAP32[(182648)>>2]|0;HEAP32[(396576)+4>>2]=HEAP32[(182648)+4>>2]|0;HEAP32[(396576)+8>>2]=HEAP32[(182648)+8>>2]|0;HEAP32[(396576)+12>>2]=HEAP32[(182648)+12>>2]|0;
 HEAP32[99077] = 1;
 HEAP32[99152] = 0;
 HEAP32[98972] = 0;
 _StatCopy(396396);
 _WI_Start(396396);
 return;
}
function _G_CheckDemoStatus() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $conv = 0.0, $conv1 = 0.0, $conv2 = 0.0, $div = 0.0, $incdec$ptr = 0, $mul = 0.0;
 var $retval$0 = 0, $sub = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool3 = 0, $tobool5 = 0, $tobool9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[99166]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  $call = (_I_GetTime()|0);
  $1 = HEAP32[99164]|0;
  $sub = (($call) - ($1))|0;
  $2 = HEAP32[99024]|0;
  $conv = (+($2|0));
  $mul = $conv * 35.0;
  $conv1 = (+($sub|0));
  $div = $mul / $conv1;
  HEAP32[99166] = 0;
  HEAP32[99092] = 0;
  $conv2 = $div;
  HEAP32[$vararg_buffer>>2] = $2;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $sub;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr2>>3] = $conv2;
  _I_Error(142020,$vararg_buffer);
  // unreachable;
 }
 $3 = HEAP32[99092]|0;
 $tobool3 = ($3|0)==(0);
 if ($tobool3) {
  $6 = HEAP32[99093]|0;
  $tobool9 = ($6|0)==(0);
  if ($tobool9) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  } else {
   $7 = HEAP32[99158]|0;
   $incdec$ptr = ((($7)) + 1|0);
   HEAP32[99158] = $incdec$ptr;
   HEAP8[$7>>0] = -128;
   $8 = HEAP32[99161]|0;
   $9 = HEAP32[99162]|0;
   $10 = HEAP32[99158]|0;
   $sub$ptr$rhs$cast = $9;
   $sub$ptr$sub = (($10) - ($sub$ptr$rhs$cast))|0;
   (_M_WriteFile($8,$9,$sub$ptr$sub)|0);
   $11 = HEAP32[99162]|0;
   _Z_Free($11);
   HEAP32[99093] = 0;
   $12 = HEAP32[99161]|0;
   HEAP32[$vararg_buffer3>>2] = $12;
   _I_Error(142062,$vararg_buffer3);
   // unreachable;
  }
 }
 $4 = HEAP32[99163]|0;
 _W_ReleaseLumpName($4);
 HEAP32[99092] = 0;
 HEAP32[99095] = 0;
 HEAP32[99094] = 0;
 HEAP32[99091] = 0;
 HEAP32[(181676)>>2] = 0;
 HEAP32[(181672)>>2] = 0;
 HEAP32[(181668)>>2] = 0;
 HEAP32[99041] = 0;
 HEAP32[99042] = 0;
 HEAP32[99040] = 0;
 HEAP32[99076] = 0;
 $5 = HEAP32[99090]|0;
 $tobool5 = ($5|0)==(0);
 if ($tobool5) {
  _D_AdvanceDemo();
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 } else {
  _I_Quit();
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 return (0)|0;
}
function _G_WriteDemoTiccmd($cmd) {
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr4$i = 0, $angleturn = 0, $arrayidx = 0, $buttons = 0, $call$i = 0, $cmp = 0;
 var $cmp$i = 0, $conv12$i = 0, $conv14 = 0, $conv4 = 0, $conv5$i = 0, $conv7$i = 0, $conv9 = 0, $conv96$i = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr1 = 0, $incdec$ptr10 = 0, $incdec$ptr15 = 0, $incdec$ptr17$i = 0, $incdec$ptr2$i = 0, $incdec$ptr4$i = 0, $incdec$ptr5 = 0, $incdec$ptr6$i = 0, $mul$i = 0, $or$i = 0;
 var $shl$i = 0, $shl13$i = 0, $sidemove = 0, $storemerge = 0, $storemerge$in = 0, $sub$ptr$rhs$cast2$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub3$i = 0, $tobool = 0, $tobool$i = 0, $tobool2 = 0, $tobool20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32191]|0;
 $arrayidx = (183216 + ($0<<2)|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $tobool = ($1|0)==(0);
 if (!($tobool)) {
  (_G_CheckDemoStatus()|0);
 }
 $2 = HEAP32[99158]|0;
 $3 = HEAP8[$cmd>>0]|0;
 $incdec$ptr = ((($2)) + 1|0);
 HEAP32[99158] = $incdec$ptr;
 HEAP8[$2>>0] = $3;
 $sidemove = ((($cmd)) + 1|0);
 $4 = HEAP8[$sidemove>>0]|0;
 $5 = HEAP32[99158]|0;
 $incdec$ptr1 = ((($5)) + 1|0);
 HEAP32[99158] = $incdec$ptr1;
 HEAP8[$5>>0] = $4;
 $6 = HEAP32[99159]|0;
 $tobool2 = ($6|0)==(0);
 $angleturn = ((($cmd)) + 2|0);
 $7 = HEAP16[$angleturn>>1]|0;
 if ($tobool2) {
  $12 = ($7&65535) >>> 8;
  $conv14 = $12&255;
  $13 = HEAP32[99158]|0;
  $incdec$ptr15 = ((($13)) + 1|0);
  HEAP32[99158] = $incdec$ptr15;
  HEAP8[$13>>0] = $conv14;
 } else {
  $conv4 = $7&255;
  $8 = HEAP32[99158]|0;
  $incdec$ptr5 = ((($8)) + 1|0);
  HEAP32[99158] = $incdec$ptr5;
  HEAP8[$8>>0] = $conv4;
  $9 = HEAP16[$angleturn>>1]|0;
  $10 = ($9&65535) >>> 8;
  $conv9 = $10&255;
  $11 = HEAP32[99158]|0;
  $incdec$ptr10 = ((($11)) + 1|0);
  HEAP32[99158] = $incdec$ptr10;
  HEAP8[$11>>0] = $conv9;
 }
 $buttons = ((($cmd)) + 5|0);
 $14 = HEAP8[$buttons>>0]|0;
 $15 = HEAP32[99158]|0;
 HEAP8[$15>>0] = $14;
 HEAP32[99158] = $2;
 $16 = HEAP32[99160]|0;
 $add$ptr = ((($16)) + -16|0);
 $cmp = ($2>>>0)>($add$ptr>>>0);
 $17 = $16;
 do {
  if ($cmp) {
   $18 = HEAP32[32159]|0;
   $tobool20 = ($18|0)==(0);
   if ($tobool20) {
    $19 = HEAP32[99162]|0;
    $sub$ptr$sub$i = (($17) - ($19))|0;
    $mul$i = $sub$ptr$sub$i << 1;
    $call$i = (_Z_Malloc($mul$i,1,0)|0);
    $20 = HEAP32[99158]|0;
    $21 = HEAP32[99162]|0;
    $sub$ptr$rhs$cast2$i = $21;
    $sub$ptr$sub3$i = (($20) - ($sub$ptr$rhs$cast2$i))|0;
    $add$ptr$i = (($call$i) + ($sub$ptr$sub3$i)|0);
    _memcpy(($call$i|0),($21|0),($sub$ptr$sub$i|0))|0;
    $22 = HEAP32[99162]|0;
    _Z_Free($22);
    HEAP32[99162] = $call$i;
    HEAP32[99158] = $add$ptr$i;
    $add$ptr4$i = (($call$i) + ($mul$i)|0);
    HEAP32[99160] = $add$ptr4$i;
    $24 = $add$ptr$i;
    break;
   }
   (_G_CheckDemoStatus()|0);
   return;
  } else {
   $24 = $2;
  }
 } while(0);
 $23 = HEAP8[$24>>0]|0;
 $cmp$i = ($23<<24>>24)==(-128);
 if ($cmp$i) {
  (_G_CheckDemoStatus()|0);
  return;
 }
 $incdec$ptr$i = ((($24)) + 1|0);
 HEAP32[99158] = $incdec$ptr$i;
 $25 = HEAP8[$24>>0]|0;
 HEAP8[$cmd>>0] = $25;
 $incdec$ptr2$i = ((($24)) + 2|0);
 HEAP32[99158] = $incdec$ptr2$i;
 $26 = HEAP8[$incdec$ptr$i>>0]|0;
 HEAP8[$sidemove>>0] = $26;
 $27 = HEAP32[99159]|0;
 $tobool$i = ($27|0)==(0);
 $incdec$ptr4$i = ((($24)) + 3|0);
 HEAP32[99158] = $incdec$ptr4$i;
 $28 = HEAP8[$incdec$ptr2$i>>0]|0;
 if ($tobool$i) {
  $conv12$i = $28&255;
  $shl13$i = $conv12$i << 8;
  $30 = $incdec$ptr4$i;$storemerge$in = $shl13$i;
 } else {
  $conv5$i = $28&255;
  HEAP16[$angleturn>>1] = $conv5$i;
  $incdec$ptr6$i = ((($24)) + 4|0);
  HEAP32[99158] = $incdec$ptr6$i;
  $29 = HEAP8[$incdec$ptr4$i>>0]|0;
  $conv7$i = $29&255;
  $shl$i = $conv7$i << 8;
  $conv96$i = $28&255;
  $or$i = $shl$i | $conv96$i;
  $30 = $incdec$ptr6$i;$storemerge$in = $or$i;
 }
 $storemerge = $storemerge$in&65535;
 HEAP16[$angleturn>>1] = $storemerge;
 $incdec$ptr17$i = ((($30)) + 1|0);
 HEAP32[99158] = $incdec$ptr17$i;
 $31 = HEAP8[$30>>0]|0;
 HEAP8[$buttons>>0] = $31;
 return;
}
function _G_DeathMatchSpawnPlayer($playernum) {
 $playernum = $playernum|0;
 var $0 = 0, $add = 0, $arrayidx = 0, $arrayidx$1 = 0, $arrayidx$10 = 0, $arrayidx$11 = 0, $arrayidx$12 = 0, $arrayidx$13 = 0, $arrayidx$14 = 0, $arrayidx$15 = 0, $arrayidx$16 = 0, $arrayidx$17 = 0, $arrayidx$18 = 0, $arrayidx$19 = 0, $arrayidx$2 = 0, $arrayidx$3 = 0, $arrayidx$4 = 0, $arrayidx$5 = 0, $arrayidx$6 = 0, $arrayidx$7 = 0;
 var $arrayidx$8 = 0, $arrayidx$9 = 0, $arrayidx$lcssa = 0, $arrayidx7 = 0, $call = 0, $call$1 = 0, $call$10 = 0, $call$11 = 0, $call$12 = 0, $call$13 = 0, $call$14 = 0, $call$15 = 0, $call$16 = 0, $call$17 = 0, $call$18 = 0, $call$19 = 0, $call$2 = 0, $call$3 = 0, $call$4 = 0, $call$5 = 0;
 var $call$6 = 0, $call$7 = 0, $call$8 = 0, $call$9 = 0, $call2 = 0, $call2$1 = 0, $call2$10 = 0, $call2$11 = 0, $call2$12 = 0, $call2$13 = 0, $call2$14 = 0, $call2$15 = 0, $call2$16 = 0, $call2$17 = 0, $call2$18 = 0, $call2$19 = 0, $call2$2 = 0, $call2$3 = 0, $call2$4 = 0, $call2$5 = 0;
 var $call2$6 = 0, $call2$7 = 0, $call2$8 = 0, $call2$9 = 0, $cmp = 0, $conv = 0, $rem = 0, $rem$1 = 0, $rem$10 = 0, $rem$11 = 0, $rem$12 = 0, $rem$13 = 0, $rem$14 = 0, $rem$15 = 0, $rem$16 = 0, $rem$17 = 0, $rem$18 = 0, $rem$19 = 0, $rem$2 = 0, $rem$3 = 0;
 var $rem$4 = 0, $rem$5 = 0, $rem$6 = 0, $rem$7 = 0, $rem$8 = 0, $rem$9 = 0, $rem$lcssa = 0, $sub$ptr$div = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$1 = 0, $tobool$10 = 0, $tobool$11 = 0, $tobool$12 = 0, $tobool$13 = 0, $tobool$14 = 0, $tobool$15 = 0, $tobool$16 = 0, $tobool$17 = 0, $tobool$18 = 0;
 var $tobool$19 = 0, $tobool$2 = 0, $tobool$3 = 0, $tobool$4 = 0, $tobool$5 = 0, $tobool$6 = 0, $tobool$7 = 0, $tobool$8 = 0, $tobool$9 = 0, $type = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99517]|0;
 $sub$ptr$sub = (($0) - (190560))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 10)&-1;
 $cmp = ($sub$ptr$sub|0)<(40);
 if ($cmp) {
  HEAP32[$vararg_buffer>>2] = $sub$ptr$div;
  _I_Error(142681,$vararg_buffer);
  // unreachable;
 }
 $call = (_P_Random()|0);
 $rem = (($call|0) % ($sub$ptr$div|0))&-1;
 $arrayidx = (190560 + (($rem*10)|0)|0);
 $call2 = (_G_CheckSpot($playernum,$arrayidx)|0);
 $tobool = ($call2|0)==(0);
 do {
  if ($tobool) {
   $call$1 = (_P_Random()|0);
   $rem$1 = (($call$1|0) % ($sub$ptr$div|0))&-1;
   $arrayidx$1 = (190560 + (($rem$1*10)|0)|0);
   $call2$1 = (_G_CheckSpot($playernum,$arrayidx$1)|0);
   $tobool$1 = ($call2$1|0)==(0);
   if ($tobool$1) {
    $call$2 = (_P_Random()|0);
    $rem$2 = (($call$2|0) % ($sub$ptr$div|0))&-1;
    $arrayidx$2 = (190560 + (($rem$2*10)|0)|0);
    $call2$2 = (_G_CheckSpot($playernum,$arrayidx$2)|0);
    $tobool$2 = ($call2$2|0)==(0);
    if ($tobool$2) {
     $call$3 = (_P_Random()|0);
     $rem$3 = (($call$3|0) % ($sub$ptr$div|0))&-1;
     $arrayidx$3 = (190560 + (($rem$3*10)|0)|0);
     $call2$3 = (_G_CheckSpot($playernum,$arrayidx$3)|0);
     $tobool$3 = ($call2$3|0)==(0);
     if ($tobool$3) {
      $call$4 = (_P_Random()|0);
      $rem$4 = (($call$4|0) % ($sub$ptr$div|0))&-1;
      $arrayidx$4 = (190560 + (($rem$4*10)|0)|0);
      $call2$4 = (_G_CheckSpot($playernum,$arrayidx$4)|0);
      $tobool$4 = ($call2$4|0)==(0);
      if ($tobool$4) {
       $call$5 = (_P_Random()|0);
       $rem$5 = (($call$5|0) % ($sub$ptr$div|0))&-1;
       $arrayidx$5 = (190560 + (($rem$5*10)|0)|0);
       $call2$5 = (_G_CheckSpot($playernum,$arrayidx$5)|0);
       $tobool$5 = ($call2$5|0)==(0);
       if ($tobool$5) {
        $call$6 = (_P_Random()|0);
        $rem$6 = (($call$6|0) % ($sub$ptr$div|0))&-1;
        $arrayidx$6 = (190560 + (($rem$6*10)|0)|0);
        $call2$6 = (_G_CheckSpot($playernum,$arrayidx$6)|0);
        $tobool$6 = ($call2$6|0)==(0);
        if ($tobool$6) {
         $call$7 = (_P_Random()|0);
         $rem$7 = (($call$7|0) % ($sub$ptr$div|0))&-1;
         $arrayidx$7 = (190560 + (($rem$7*10)|0)|0);
         $call2$7 = (_G_CheckSpot($playernum,$arrayidx$7)|0);
         $tobool$7 = ($call2$7|0)==(0);
         if ($tobool$7) {
          $call$8 = (_P_Random()|0);
          $rem$8 = (($call$8|0) % ($sub$ptr$div|0))&-1;
          $arrayidx$8 = (190560 + (($rem$8*10)|0)|0);
          $call2$8 = (_G_CheckSpot($playernum,$arrayidx$8)|0);
          $tobool$8 = ($call2$8|0)==(0);
          if ($tobool$8) {
           $call$9 = (_P_Random()|0);
           $rem$9 = (($call$9|0) % ($sub$ptr$div|0))&-1;
           $arrayidx$9 = (190560 + (($rem$9*10)|0)|0);
           $call2$9 = (_G_CheckSpot($playernum,$arrayidx$9)|0);
           $tobool$9 = ($call2$9|0)==(0);
           if ($tobool$9) {
            $call$10 = (_P_Random()|0);
            $rem$10 = (($call$10|0) % ($sub$ptr$div|0))&-1;
            $arrayidx$10 = (190560 + (($rem$10*10)|0)|0);
            $call2$10 = (_G_CheckSpot($playernum,$arrayidx$10)|0);
            $tobool$10 = ($call2$10|0)==(0);
            if ($tobool$10) {
             $call$11 = (_P_Random()|0);
             $rem$11 = (($call$11|0) % ($sub$ptr$div|0))&-1;
             $arrayidx$11 = (190560 + (($rem$11*10)|0)|0);
             $call2$11 = (_G_CheckSpot($playernum,$arrayidx$11)|0);
             $tobool$11 = ($call2$11|0)==(0);
             if ($tobool$11) {
              $call$12 = (_P_Random()|0);
              $rem$12 = (($call$12|0) % ($sub$ptr$div|0))&-1;
              $arrayidx$12 = (190560 + (($rem$12*10)|0)|0);
              $call2$12 = (_G_CheckSpot($playernum,$arrayidx$12)|0);
              $tobool$12 = ($call2$12|0)==(0);
              if ($tobool$12) {
               $call$13 = (_P_Random()|0);
               $rem$13 = (($call$13|0) % ($sub$ptr$div|0))&-1;
               $arrayidx$13 = (190560 + (($rem$13*10)|0)|0);
               $call2$13 = (_G_CheckSpot($playernum,$arrayidx$13)|0);
               $tobool$13 = ($call2$13|0)==(0);
               if ($tobool$13) {
                $call$14 = (_P_Random()|0);
                $rem$14 = (($call$14|0) % ($sub$ptr$div|0))&-1;
                $arrayidx$14 = (190560 + (($rem$14*10)|0)|0);
                $call2$14 = (_G_CheckSpot($playernum,$arrayidx$14)|0);
                $tobool$14 = ($call2$14|0)==(0);
                if ($tobool$14) {
                 $call$15 = (_P_Random()|0);
                 $rem$15 = (($call$15|0) % ($sub$ptr$div|0))&-1;
                 $arrayidx$15 = (190560 + (($rem$15*10)|0)|0);
                 $call2$15 = (_G_CheckSpot($playernum,$arrayidx$15)|0);
                 $tobool$15 = ($call2$15|0)==(0);
                 if ($tobool$15) {
                  $call$16 = (_P_Random()|0);
                  $rem$16 = (($call$16|0) % ($sub$ptr$div|0))&-1;
                  $arrayidx$16 = (190560 + (($rem$16*10)|0)|0);
                  $call2$16 = (_G_CheckSpot($playernum,$arrayidx$16)|0);
                  $tobool$16 = ($call2$16|0)==(0);
                  if ($tobool$16) {
                   $call$17 = (_P_Random()|0);
                   $rem$17 = (($call$17|0) % ($sub$ptr$div|0))&-1;
                   $arrayidx$17 = (190560 + (($rem$17*10)|0)|0);
                   $call2$17 = (_G_CheckSpot($playernum,$arrayidx$17)|0);
                   $tobool$17 = ($call2$17|0)==(0);
                   if ($tobool$17) {
                    $call$18 = (_P_Random()|0);
                    $rem$18 = (($call$18|0) % ($sub$ptr$div|0))&-1;
                    $arrayidx$18 = (190560 + (($rem$18*10)|0)|0);
                    $call2$18 = (_G_CheckSpot($playernum,$arrayidx$18)|0);
                    $tobool$18 = ($call2$18|0)==(0);
                    if (!($tobool$18)) {
                     $arrayidx$lcssa = $arrayidx$18;$rem$lcssa = $rem$18;
                     break;
                    }
                    $call$19 = (_P_Random()|0);
                    $rem$19 = (($call$19|0) % ($sub$ptr$div|0))&-1;
                    $arrayidx$19 = (190560 + (($rem$19*10)|0)|0);
                    $call2$19 = (_G_CheckSpot($playernum,$arrayidx$19)|0);
                    $tobool$19 = ($call2$19|0)==(0);
                    if (!($tobool$19)) {
                     $arrayidx$lcssa = $arrayidx$19;$rem$lcssa = $rem$19;
                     break;
                    }
                    $arrayidx7 = (190672 + (($playernum*10)|0)|0);
                    _P_SpawnPlayer($arrayidx7);
                    STACKTOP = sp;return;
                   } else {
                    $arrayidx$lcssa = $arrayidx$17;$rem$lcssa = $rem$17;
                   }
                  } else {
                   $arrayidx$lcssa = $arrayidx$16;$rem$lcssa = $rem$16;
                  }
                 } else {
                  $arrayidx$lcssa = $arrayidx$15;$rem$lcssa = $rem$15;
                 }
                } else {
                 $arrayidx$lcssa = $arrayidx$14;$rem$lcssa = $rem$14;
                }
               } else {
                $arrayidx$lcssa = $arrayidx$13;$rem$lcssa = $rem$13;
               }
              } else {
               $arrayidx$lcssa = $arrayidx$12;$rem$lcssa = $rem$12;
              }
             } else {
              $arrayidx$lcssa = $arrayidx$11;$rem$lcssa = $rem$11;
             }
            } else {
             $arrayidx$lcssa = $arrayidx$10;$rem$lcssa = $rem$10;
            }
           } else {
            $arrayidx$lcssa = $arrayidx$9;$rem$lcssa = $rem$9;
           }
          } else {
           $arrayidx$lcssa = $arrayidx$8;$rem$lcssa = $rem$8;
          }
         } else {
          $arrayidx$lcssa = $arrayidx$7;$rem$lcssa = $rem$7;
         }
        } else {
         $arrayidx$lcssa = $arrayidx$6;$rem$lcssa = $rem$6;
        }
       } else {
        $arrayidx$lcssa = $arrayidx$5;$rem$lcssa = $rem$5;
       }
      } else {
       $arrayidx$lcssa = $arrayidx$4;$rem$lcssa = $rem$4;
      }
     } else {
      $arrayidx$lcssa = $arrayidx$3;$rem$lcssa = $rem$3;
     }
    } else {
     $arrayidx$lcssa = $arrayidx$2;$rem$lcssa = $rem$2;
    }
   } else {
    $arrayidx$lcssa = $arrayidx$1;$rem$lcssa = $rem$1;
   }
  } else {
   $arrayidx$lcssa = $arrayidx;$rem$lcssa = $rem;
  }
 } while(0);
 $add = (($playernum) + 1)|0;
 $conv = $add&65535;
 $type = (((190560 + (($rem$lcssa*10)|0)|0)) + 6|0);
 HEAP16[$type>>1] = $conv;
 _P_SpawnPlayer($arrayidx$lcssa);
 STACKTOP = sp;return;
}
function _G_CheckSpot($playernum,$mthing) {
 $playernum = $playernum|0;
 $mthing = $mthing|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add49 = 0, $angle = 0, $arrayidx32 = 0, $arrayidx37 = 0, $arrayidx45 = 0, $arrayidx46 = 0, $call = 0, $call39 = 0, $call50 = 0, $cmp = 0;
 var $cmp14 = 0, $cmp29 = 0, $cmp31 = 0, $cmp52 = 0, $cmp6 = 0, $conv1227 = 0, $conv1928 = 0, $conv2229 = 0, $conv26 = 0, $div = 0, $i$032 = 0, $inc = 0, $inc38 = 0, $mo1 = 0, $mo3 = 0, $mul = 0, $mul47 = 0, $mul48 = 0, $rem30 = 0, $rem36 = 0;
 var $retval$0 = 0, $shl = 0, $shl13 = 0, $shl20 = 0, $shl23 = 0, $tobool = 0, $tobool26 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $viewz = 0, $x4 = 0, $xa$0 = 0, $y10 = 0, $y11 = 0, $y21 = 0, $ya$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $mo1 = (181680 + (($playernum*288)|0)|0);
 $0 = HEAP32[$mo1>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $cmp31 = ($playernum|0)>(0);
  if (!($cmp31)) {
   $retval$0 = 1;
   STACKTOP = sp;return ($retval$0|0);
  }
  $1 = HEAPU8[$mthing>>0]|(HEAPU8[$mthing+1>>0]<<8);
  $conv26 = $1&65535;
  $shl = $conv26 << 16;
  $y11 = ((($mthing)) + 2|0);
  $i$032 = 0;
  while(1) {
   $mo3 = (181680 + (($i$032*288)|0)|0);
   $2 = HEAP32[$mo3>>2]|0;
   $x4 = ((($2)) + 12|0);
   $3 = HEAP32[$x4>>2]|0;
   $cmp6 = ($3|0)==($shl|0);
   if ($cmp6) {
    $y10 = ((($2)) + 16|0);
    $4 = HEAP32[$y10>>2]|0;
    $5 = HEAPU8[$y11>>0]|(HEAPU8[$y11+1>>0]<<8);
    $conv1227 = $5&65535;
    $shl13 = $conv1227 << 16;
    $cmp14 = ($4|0)==($shl13|0);
    if ($cmp14) {
     $retval$0 = 0;
     label = 19;
     break;
    }
   }
   $inc = (($i$032) + 1)|0;
   $cmp = ($inc|0)<($playernum|0);
   if ($cmp) {
    $i$032 = $inc;
   } else {
    $retval$0 = 1;
    label = 19;
    break;
   }
  }
  if ((label|0) == 19) {
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $6 = HEAPU8[$mthing>>0]|(HEAPU8[$mthing+1>>0]<<8);
 $conv1928 = $6&65535;
 $shl20 = $conv1928 << 16;
 $y21 = ((($mthing)) + 2|0);
 $7 = HEAPU8[$y21>>0]|(HEAPU8[$y21+1>>0]<<8);
 $conv2229 = $7&65535;
 $shl23 = $conv2229 << 16;
 $call = (_P_CheckPosition($0,$shl20,$shl23)|0);
 $tobool26 = ($call|0)==(0);
 if ($tobool26) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $8 = HEAP32[99097]|0;
 $cmp29 = ($8|0)>(31);
 if ($cmp29) {
  $rem30 = $8 & 31;
  $arrayidx32 = (182832 + ($rem30<<2)|0);
  $9 = HEAP32[$arrayidx32>>2]|0;
  _P_RemoveMobj($9);
  $$pre = HEAP32[99097]|0;
  $11 = $$pre;
 } else {
  $11 = $8;
 }
 $10 = HEAP32[$mo1>>2]|0;
 $rem36 = (($11|0) % 32)&-1;
 $arrayidx37 = (182832 + ($rem36<<2)|0);
 HEAP32[$arrayidx37>>2] = $10;
 $inc38 = (($11) + 1)|0;
 HEAP32[99097] = $inc38;
 $call39 = (_R_PointInSubsector($shl20,$shl23)|0);
 $angle = ((($mthing)) + 4|0);
 $12 = HEAPU8[$angle>>0]|(HEAPU8[$angle+1>>0]<<8);
 $13 = (($12<<16>>16) / 45)&-1;
 $div = $13 << 16 >> 16;
 $mul = $div << 10;
 $trunc = $13 << 16 >> 16;
 $trunc$clear = $trunc & 4194303;
 switch ($trunc$clear|0) {
 case 4:  {
  $14 = HEAP32[(66528)>>2]|0;
  $15 = HEAP32[14584]|0;
  $xa$0 = $14;$ya$0 = $15;
  break;
 }
 case 5:  {
  $16 = HEAP32[(70624)>>2]|0;
  $17 = HEAP32[(62432)>>2]|0;
  $xa$0 = $16;$ya$0 = $17;
  break;
 }
 case 6:  {
  $18 = HEAP32[18680]|0;
  $19 = HEAP32[(66528)>>2]|0;
  $xa$0 = $18;$ya$0 = $19;
  break;
 }
 case 7:  {
  $20 = HEAP32[(78816)>>2]|0;
  $21 = HEAP32[(70624)>>2]|0;
  $xa$0 = $20;$ya$0 = $21;
  break;
 }
 case 3: case 2: case 1: case 0:  {
  $arrayidx45 = ((82912) + ($mul<<2)|0);
  $22 = HEAP32[$arrayidx45>>2]|0;
  $arrayidx46 = (74720 + ($mul<<2)|0);
  $23 = HEAP32[$arrayidx46>>2]|0;
  $xa$0 = $22;$ya$0 = $23;
  break;
 }
 default: {
  HEAP32[$vararg_buffer>>2] = $mul;
  _I_Error(142647,$vararg_buffer);
  // unreachable;
 }
 }
 $mul47 = ($xa$0*20)|0;
 $add = (($mul47) + ($shl20))|0;
 $mul48 = ($ya$0*20)|0;
 $add49 = (($mul48) + ($shl23))|0;
 $24 = HEAP32[$call39>>2]|0;
 $25 = HEAP32[$24>>2]|0;
 $call50 = (_P_SpawnMobj($add,$add49,$25,39)|0);
 $26 = HEAP32[99076]|0;
 $viewz = (((181680 + (($26*288)|0)|0)) + 24|0);
 $27 = HEAP32[$viewz>>2]|0;
 $cmp52 = ($27|0)==(1);
 if ($cmp52) {
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 _S_StartSound($call50,35);
 $retval$0 = 1;
 STACKTOP = sp;return ($retval$0|0);
}
function _G_PlayerReborn($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $2 = 0, $arraydecay2 = 0, $arrayidx = 0, $arrayidx20 = 0, $arrayidx22 = 0, $arrayidx23 = 0, $attackdown = 0, $frags = 0, $health = 0, $itemcount6 = 0, $killcount4 = 0, $pendingweapon = 0, $playerstate = 0, $readyweapon = 0, $scevgep = 0, $secretcount8 = 0, $usedown = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $frags = sp;
 $arrayidx = (181680 + (($player*288)|0)|0);
 $arraydecay2 = (((181680 + (($player*288)|0)|0)) + 104|0);
 ;HEAP32[$frags>>2]=HEAP32[$arraydecay2>>2]|0;HEAP32[$frags+4>>2]=HEAP32[$arraydecay2+4>>2]|0;HEAP32[$frags+8>>2]=HEAP32[$arraydecay2+8>>2]|0;HEAP32[$frags+12>>2]=HEAP32[$arraydecay2+12>>2]|0;
 $killcount4 = (((181680 + (($player*288)|0)|0)) + 212|0);
 $0 = HEAP32[$killcount4>>2]|0;
 $itemcount6 = (((181680 + (($player*288)|0)|0)) + 216|0);
 $1 = HEAP32[$itemcount6>>2]|0;
 $secretcount8 = (((181680 + (($player*288)|0)|0)) + 220|0);
 $2 = HEAP32[$secretcount8>>2]|0;
 _memset(($arrayidx|0),0,288)|0;
 ;HEAP32[$arraydecay2>>2]=HEAP32[$frags>>2]|0;HEAP32[$arraydecay2+4>>2]=HEAP32[$frags+4>>2]|0;HEAP32[$arraydecay2+8>>2]=HEAP32[$frags+8>>2]|0;HEAP32[$arraydecay2+12>>2]=HEAP32[$frags+12>>2]|0;
 HEAP32[$killcount4>>2] = $0;
 HEAP32[$itemcount6>>2] = $1;
 HEAP32[$secretcount8>>2] = $2;
 $attackdown = (((181680 + (($player*288)|0)|0)) + 196|0);
 HEAP32[$attackdown>>2] = 1;
 $usedown = (((181680 + (($player*288)|0)|0)) + 200|0);
 HEAP32[$usedown>>2] = 1;
 $playerstate = (((181680 + (($player*288)|0)|0)) + 4|0);
 HEAP32[$playerstate>>2] = 0;
 $health = (((181680 + (($player*288)|0)|0)) + 40|0);
 HEAP32[$health>>2] = 100;
 $pendingweapon = (((181680 + (($player*288)|0)|0)) + 124|0);
 HEAP32[$pendingweapon>>2] = 1;
 $readyweapon = (((181680 + (($player*288)|0)|0)) + 120|0);
 HEAP32[$readyweapon>>2] = 1;
 $arrayidx20 = (((181680 + (($player*288)|0)|0)) + 128|0);
 HEAP32[$arrayidx20>>2] = 1;
 $arrayidx22 = (((181680 + (($player*288)|0)|0)) + 132|0);
 HEAP32[$arrayidx22>>2] = 1;
 $arrayidx23 = (((181680 + (($player*288)|0)|0)) + 164|0);
 HEAP32[$arrayidx23>>2] = 50;
 $scevgep = (((181680 + (($player*288)|0)|0)) + 180|0);
 ;HEAP32[$scevgep>>2]=HEAP32[49392>>2]|0;HEAP32[$scevgep+4>>2]=HEAP32[49392+4>>2]|0;HEAP32[$scevgep+8>>2]=HEAP32[49392+8>>2]|0;HEAP32[$scevgep+12>>2]=HEAP32[49392+12>>2]|0;
 STACKTOP = sp;return;
}
function _G_ScreenShot() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99088] = 9;
 return;
}
function _G_ExitLevel() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99098] = 0;
 HEAP32[99088] = 6;
 return;
}
function _G_SecretExitLevel() {
 var $0 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32140]|0;
 $cmp = ($0|0)==(2);
 if ($cmp) {
  $call = (_W_CheckNumForName(142718)|0);
  $cmp1 = ($call|0)<(0);
  if ($cmp1) {
   $storemerge = 0;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $storemerge = 1;
 }
 HEAP32[99098] = $storemerge;
 HEAP32[99088] = 6;
 return;
}
function _G_WorldDone() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $didsecret = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99088] = 8;
 $0 = HEAP32[99098]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  $1 = HEAP32[99076]|0;
  $didsecret = (((181680 + (($1*288)|0)|0)) + 284|0);
  HEAP32[$didsecret>>2] = 1;
 }
 $2 = HEAP32[32140]|0;
 $cmp = ($2|0)==(2);
 if (!($cmp)) {
  return;
 }
 $3 = HEAP32[99084]|0;
 switch ($3|0) {
 case 31: case 15:  {
  label = 5;
  break;
 }
 case 30: case 20: case 11: case 6:  {
  break;
 }
 default: {
  return;
 }
 }
 if ((label|0) == 5) {
  if ($tobool) {
   return;
  }
 }
 _F_StartFinale();
 return;
}
function _G_LoadGame($name) {
 $name = $name|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_M_StringCopy(182960,$name,256)|0);
 HEAP32[99088] = 3;
 return;
}
function _G_SaveGame($slot,$description) {
 $slot = $slot|0;
 $description = $description|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99179] = $slot;
 (_M_StringCopy(184464,$description,32)|0);
 HEAP32[99082] = 1;
 return;
}
function _G_DeferedInitNew($skill,$episode,$map) {
 $skill = $skill|0;
 $episode = $episode|0;
 $map = $map|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99153] = $skill;
 HEAP32[99154] = $episode;
 HEAP32[99155] = $map;
 HEAP32[99088] = 2;
 return;
}
function _G_RecordDemo($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $add = 0, $add$ptr = 0, $add4 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call3 = 0, $call5 = 0, $call6 = 0, $maxsize$0 = 0, $mul = 0, $tobool = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[99157] = 0;
 $call = (_strlen($name)|0);
 $add = (($call) + 5)|0;
 $call1 = (_Z_Malloc($add,1,0)|0);
 HEAP32[99161] = $call1;
 HEAP32[$vararg_buffer>>2] = $name;
 (_M_snprintf($call1,$add,142724,$vararg_buffer)|0);
 $call3 = (_M_CheckParmWithArgs(142731,1)|0);
 $tobool = ($call3|0)==(0);
 if ($tobool) {
  $maxsize$0 = 131072;
 } else {
  $0 = HEAP32[99374]|0;
  $add4 = (($call3) + 1)|0;
  $arrayidx = (($0) + ($add4<<2)|0);
  $1 = HEAP32[$arrayidx>>2]|0;
  $call5 = (_atoi($1)|0);
  $mul = $call5 << 10;
  $maxsize$0 = $mul;
 }
 $call6 = (_Z_Malloc($maxsize$0,1,0)|0);
 HEAP32[99162] = $call6;
 $add$ptr = (($call6) + ($maxsize$0)|0);
 HEAP32[99160] = $add$ptr;
 HEAP32[99093] = 1;
 STACKTOP = sp;return;
}
function _G_VanillaVersionCode() {
 var $0 = 0, $retval$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[32141]|0;
 switch ($0|0) {
 case 0:  {
  _I_Error(142079,$vararg_buffer);
  // unreachable;
  break;
 }
 case 1:  {
  $retval$0 = 106;
  break;
 }
 case 2:  {
  $retval$0 = 107;
  break;
 }
 case 3:  {
  $retval$0 = 108;
  break;
 }
 default: {
  $retval$0 = 109;
 }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _G_BeginRecording() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $conv = 0, $conv11 = 0, $conv13 = 0, $conv15 = 0, $conv17 = 0, $conv19 = 0, $conv23 = 0, $conv23$1 = 0, $conv23$2 = 0, $conv23$3 = 0, $conv5 = 0, $conv7 = 0;
 var $conv9 = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $incdec$ptr12 = 0, $incdec$ptr14 = 0, $incdec$ptr16 = 0, $incdec$ptr18 = 0, $incdec$ptr20 = 0, $incdec$ptr24 = 0, $incdec$ptr24$1 = 0, $incdec$ptr24$2 = 0, $incdec$ptr24$3 = 0, $incdec$ptr4 = 0, $incdec$ptr6 = 0, $incdec$ptr8 = 0, $lnot = 0, $lnot$ext = 0, $retval$0$i = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $call = (_M_CheckParm(142740)|0);
 $cmp = ($call|0)!=(0);
 $conv = $cmp&1;
 HEAP32[99159] = $conv;
 $lnot = $cmp ^ 1;
 $lnot$ext = $lnot&1;
 HEAP32[99083] = $lnot$ext;
 $0 = HEAP32[99162]|0;
 HEAP32[99158] = $0;
 if ($cmp) {
  $incdec$ptr = ((($0)) + 1|0);
  HEAP32[99158] = $incdec$ptr;
  HEAP8[$0>>0] = 111;
 } else {
  $1 = HEAP32[32141]|0;
  switch ($1|0) {
  case 0:  {
   _I_Error(142079,$vararg_buffer);
   // unreachable;
   break;
  }
  case 1:  {
   $retval$0$i = 106;
   break;
  }
  case 2:  {
   $retval$0$i = 107;
   break;
  }
  case 3:  {
   $retval$0$i = 108;
   break;
  }
  default: {
   $retval$0$i = 109;
  }
  }
  $incdec$ptr4 = ((($0)) + 1|0);
  HEAP32[99158] = $incdec$ptr4;
  HEAP8[$0>>0] = $retval$0$i;
 }
 $2 = HEAP32[99086]|0;
 $conv5 = $2&255;
 $3 = HEAP32[99158]|0;
 $incdec$ptr6 = ((($3)) + 1|0);
 HEAP32[99158] = $incdec$ptr6;
 HEAP8[$3>>0] = $conv5;
 $4 = HEAP32[99085]|0;
 $conv7 = $4&255;
 $5 = HEAP32[99158]|0;
 $incdec$ptr8 = ((($5)) + 1|0);
 HEAP32[99158] = $incdec$ptr8;
 HEAP8[$5>>0] = $conv7;
 $6 = HEAP32[99084]|0;
 $conv9 = $6&255;
 $7 = HEAP32[99158]|0;
 $incdec$ptr10 = ((($7)) + 1|0);
 HEAP32[99158] = $incdec$ptr10;
 HEAP8[$7>>0] = $conv9;
 $8 = HEAP32[99091]|0;
 $conv11 = $8&255;
 $9 = HEAP32[99158]|0;
 $incdec$ptr12 = ((($9)) + 1|0);
 HEAP32[99158] = $incdec$ptr12;
 HEAP8[$9>>0] = $conv11;
 $10 = HEAP32[99041]|0;
 $conv13 = $10&255;
 $11 = HEAP32[99158]|0;
 $incdec$ptr14 = ((($11)) + 1|0);
 HEAP32[99158] = $incdec$ptr14;
 HEAP8[$11>>0] = $conv13;
 $12 = HEAP32[99042]|0;
 $conv15 = $12&255;
 $13 = HEAP32[99158]|0;
 $incdec$ptr16 = ((($13)) + 1|0);
 HEAP32[99158] = $incdec$ptr16;
 HEAP8[$13>>0] = $conv15;
 $14 = HEAP32[99040]|0;
 $conv17 = $14&255;
 $15 = HEAP32[99158]|0;
 $incdec$ptr18 = ((($15)) + 1|0);
 HEAP32[99158] = $incdec$ptr18;
 HEAP8[$15>>0] = $conv17;
 $16 = HEAP32[99076]|0;
 $conv19 = $16&255;
 $17 = HEAP32[99158]|0;
 $incdec$ptr20 = ((($17)) + 1|0);
 HEAP32[99158] = $incdec$ptr20;
 HEAP8[$17>>0] = $conv19;
 $18 = HEAP32[45416]|0;
 $conv23 = $18&255;
 $19 = HEAP32[99158]|0;
 $incdec$ptr24 = ((($19)) + 1|0);
 HEAP32[99158] = $incdec$ptr24;
 HEAP8[$19>>0] = $conv23;
 $20 = HEAP32[(181668)>>2]|0;
 $conv23$1 = $20&255;
 $21 = HEAP32[99158]|0;
 $incdec$ptr24$1 = ((($21)) + 1|0);
 HEAP32[99158] = $incdec$ptr24$1;
 HEAP8[$21>>0] = $conv23$1;
 $22 = HEAP32[(181672)>>2]|0;
 $conv23$2 = $22&255;
 $23 = HEAP32[99158]|0;
 $incdec$ptr24$2 = ((($23)) + 1|0);
 HEAP32[99158] = $incdec$ptr24$2;
 HEAP8[$23>>0] = $conv23$2;
 $24 = HEAP32[(181676)>>2]|0;
 $conv23$3 = $24&255;
 $25 = HEAP32[99158]|0;
 $incdec$ptr24$3 = ((($25)) + 1|0);
 HEAP32[99158] = $incdec$ptr24$3;
 HEAP8[$25>>0] = $conv23$3;
 STACKTOP = sp;return;
}
function _G_DeferedPlayDemo($name) {
 $name = $name|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99163] = $name;
 HEAP32[99088] = 5;
 return;
}
function _G_TimeDemo($name) {
 $name = $name|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_M_CheckParm(142750)|0);
 HEAP32[99165] = $call;
 HEAP32[99166] = 1;
 HEAP32[99021] = 1;
 HEAP32[99163] = $name;
 HEAP32[99088] = 5;
 return;
}
function _HUlib_initTextLine($t,$x,$y,$f,$sc) {
 $t = $t|0;
 $x = $x|0;
 $y = $y|0;
 $f = $f|0;
 $sc = $sc|0;
 var $arrayidx$i = 0, $f3 = 0, $len$i = 0, $needsupdate$i = 0, $sc4 = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$t>>2] = $x;
 $y2 = ((($t)) + 4|0);
 HEAP32[$y2>>2] = $y;
 $f3 = ((($t)) + 8|0);
 HEAP32[$f3>>2] = $f;
 $sc4 = ((($t)) + 12|0);
 HEAP32[$sc4>>2] = $sc;
 $len$i = ((($t)) + 100|0);
 HEAP32[$len$i>>2] = 0;
 $arrayidx$i = ((($t)) + 16|0);
 HEAP8[$arrayidx$i>>0] = 0;
 $needsupdate$i = ((($t)) + 104|0);
 HEAP32[$needsupdate$i>>2] = 1;
 return;
}
function _HUlib_addCharToTextLine($t,$ch) {
 $t = $t|0;
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $arrayidx = 0, $arrayidx4 = 0, $cmp = 0, $inc = 0, $len = 0, $needsupdate = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $len = ((($t)) + 100|0);
 $0 = HEAP32[$len>>2]|0;
 $cmp = ($0|0)==(80);
 if ($cmp) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $inc = (($0) + 1)|0;
 HEAP32[$len>>2] = $inc;
 $arrayidx = (((($t)) + 16|0) + ($0)|0);
 HEAP8[$arrayidx>>0] = $ch;
 $1 = HEAP32[$len>>2]|0;
 $arrayidx4 = (((($t)) + 16|0) + ($1)|0);
 HEAP8[$arrayidx4>>0] = 0;
 $needsupdate = ((($t)) + 104|0);
 HEAP32[$needsupdate>>2] = 4;
 $retval$0 = 1;
 return ($retval$0|0);
}
function _HUlib_drawTextLine($l,$drawcursor) {
 $l = $l|0;
 $drawcursor = $drawcursor|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add27 = 0, $add40 = 0, $arrayidx = 0;
 var $arrayidx16 = 0, $arrayidx37 = 0, $call = 0, $cmp = 0, $cmp12 = 0, $cmp18 = 0, $cmp28 = 0, $cmp30 = 0, $cmp41 = 0, $cmp5 = 0, $cmp8 = 0, $conv = 0, $conv17 = 0, $conv39 = 0, $conv4 = 0, $f = 0, $i$032 = 0, $inc = 0, $len = 0, $or$cond = 0;
 var $sc = 0, $sc35 = 0, $sub = 0, $sub36 = 0, $tobool = 0, $x$031 = 0, $x$1 = 0, $x$2 = 0, $y = 0, $y44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 $f = ((($l)) + 8|0);
 $len = ((($l)) + 100|0);
 $1 = HEAP32[$len>>2]|0;
 $cmp30 = ($1|0)>(0);
 L1: do {
  if ($cmp30) {
   $sc = ((($l)) + 12|0);
   $y = ((($l)) + 4|0);
   $14 = $1;$i$032 = 0;$x$031 = $0;
   while(1) {
    $arrayidx = (((($l)) + 16|0) + ($i$032)|0);
    $2 = HEAP8[$arrayidx>>0]|0;
    $conv = $2 << 24 >> 24;
    $call = (_toupper($conv)|0);
    $conv4 = $call & 255;
    $cmp5 = ($conv4|0)==(32);
    if ($cmp5) {
     label = 7;
    } else {
     $3 = HEAP32[$sc>>2]|0;
     $cmp8 = ($conv4|0)>=($3|0);
     $cmp12 = ($conv4>>>0)<(96);
     $or$cond = $cmp12 & $cmp8;
     if ($or$cond) {
      $4 = HEAP32[$f>>2]|0;
      $sub = (($conv4) - ($3))|0;
      $arrayidx16 = (($4) + ($sub<<2)|0);
      $5 = HEAP32[$arrayidx16>>2]|0;
      $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8);
      $conv17 = $6 << 16 >> 16;
      $add = (($x$031) + ($conv17))|0;
      $cmp18 = ($add|0)>(320);
      if ($cmp18) {
       $x$2 = $x$031;
       break L1;
      }
      $7 = HEAP32[$y>>2]|0;
      _V_DrawPatchDirect($x$031,$7,$5);
      $$pre = HEAP32[$len>>2]|0;
      $8 = $$pre;$x$1 = $add;
     } else {
      label = 7;
     }
    }
    if ((label|0) == 7) {
     label = 0;
     $add27 = (($x$031) + 4)|0;
     $cmp28 = ($x$031|0)>(315);
     if ($cmp28) {
      $x$2 = $add27;
      break L1;
     } else {
      $8 = $14;$x$1 = $add27;
     }
    }
    $inc = (($i$032) + 1)|0;
    $cmp = ($inc|0)<($8|0);
    if ($cmp) {
     $14 = $8;$i$032 = $inc;$x$031 = $x$1;
    } else {
     $x$2 = $x$1;
     break;
    }
   }
  } else {
   $x$2 = $0;
  }
 } while(0);
 $tobool = ($drawcursor|0)==(0);
 if ($tobool) {
  return;
 }
 $9 = HEAP32[$f>>2]|0;
 $sc35 = ((($l)) + 12|0);
 $10 = HEAP32[$sc35>>2]|0;
 $sub36 = (95 - ($10))|0;
 $arrayidx37 = (($9) + ($sub36<<2)|0);
 $11 = HEAP32[$arrayidx37>>2]|0;
 $12 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8);
 $conv39 = $12 << 16 >> 16;
 $add40 = (($x$2) + ($conv39))|0;
 $cmp41 = ($add40|0)<(321);
 if (!($cmp41)) {
  return;
 }
 $y44 = ((($l)) + 4|0);
 $13 = HEAP32[$y44>>2]|0;
 _V_DrawPatchDirect($x$2,$13,$11);
 return;
}
function _HUlib_eraseTextLine($l) {
 $l = $l|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add10 = 0, $add14 = 0, $add15 = 0, $add16 = 0, $add6 = 0;
 var $cmp = 0, $cmp11 = 0, $cmp17 = 0, $cmp8 = 0, $conv = 0, $dec = 0, $f = 0, $height = 0, $inc = 0, $mul = 0, $needsupdate = 0, $or$cond = 0, $tobool = 0, $tobool1 = 0, $tobool19 = 0, $tobool3 = 0, $y$018 = 0, $y4 = 0, $yoffset$019 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[98972]|0;
 $tobool = ($0|0)==(0);
 $1 = HEAP32[99609]|0;
 $tobool1 = ($1|0)!=(0);
 $or$cond = $tobool & $tobool1;
 $needsupdate = ((($l)) + 104|0);
 if ($or$cond) {
  $2 = HEAP32[$needsupdate>>2]|0;
  $tobool3 = ($2|0)==(0);
  if ($tobool3) {
   return;
  }
  $f = ((($l)) + 8|0);
  $3 = HEAP32[$f>>2]|0;
  $4 = HEAP32[$3>>2]|0;
  $height = ((($4)) + 2|0);
  $5 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
  $conv = $5 << 16 >> 16;
  $add = (($conv) + 1)|0;
  $y4 = ((($l)) + 4|0);
  $6 = HEAP32[$y4>>2]|0;
  $cmp17 = ($5<<16>>16)>(-1);
  if ($cmp17) {
   $mul = ($6*320)|0;
   $y$018 = $6;$yoffset$019 = $mul;
   while(1) {
    $7 = HEAP32[99610]|0;
    $cmp8 = ($y$018|0)<($7|0);
    if ($cmp8) {
     label = 7;
    } else {
     $8 = HEAP32[99597]|0;
     $add10 = (($8) + ($7))|0;
     $cmp11 = ($y$018|0)<($add10|0);
     if ($cmp11) {
      $9 = HEAP32[99609]|0;
      _R_VideoErase($yoffset$019,$9);
      $10 = HEAP32[99609]|0;
      $add14 = (($10) + ($yoffset$019))|0;
      $11 = HEAP32[99612]|0;
      $add15 = (($add14) + ($11))|0;
      _R_VideoErase($add15,$10);
     } else {
      label = 7;
     }
    }
    if ((label|0) == 7) {
     label = 0;
     _R_VideoErase($yoffset$019,320);
    }
    $inc = (($y$018) + 1)|0;
    $add16 = (($yoffset$019) + 320)|0;
    $12 = HEAP32[$y4>>2]|0;
    $add6 = (($add) + ($12))|0;
    $cmp = ($inc|0)<($add6|0);
    if ($cmp) {
     $y$018 = $inc;$yoffset$019 = $add16;
    } else {
     break;
    }
   }
  }
 }
 $$pr = HEAP32[$needsupdate>>2]|0;
 $tobool19 = ($$pr|0)==(0);
 if ($tobool19) {
  return;
 }
 $dec = (($$pr) + -1)|0;
 HEAP32[$needsupdate>>2] = $dec;
 return;
}
function _HUlib_initSText($s,$x,$y,$h,$font,$startchar,$on) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $h = $h|0;
 $font = $font|0;
 $startchar = $startchar|0;
 $on = $on|0;
 var $0 = 0, $1 = 0, $add = 0, $arrayidx$i$i = 0, $cl = 0, $cmp11 = 0, $conv = 0, $exitcond = 0, $f3$i = 0, $h1 = 0, $height = 0, $i$012 = 0, $inc = 0, $laston = 0, $len$i$i = 0, $mul = 0, $needsupdate$i$i = 0, $on2 = 0, $sc4$i = 0, $sub = 0;
 var $x1$i = 0, $y2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $h1 = ((($s)) + 432|0);
 HEAP32[$h1>>2] = $h;
 $on2 = ((($s)) + 440|0);
 HEAP32[$on2>>2] = $on;
 $laston = ((($s)) + 444|0);
 HEAP32[$laston>>2] = 1;
 $cl = ((($s)) + 436|0);
 HEAP32[$cl>>2] = 0;
 $cmp11 = ($h|0)>(0);
 if (!($cmp11)) {
  return;
 }
 $i$012 = 0;
 while(1) {
  $0 = HEAP32[$font>>2]|0;
  $height = ((($0)) + 2|0);
  $1 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
  $conv = $1 << 16 >> 16;
  $add = (($conv) + 1)|0;
  $mul = Math_imul($add, $i$012)|0;
  $sub = (($y) - ($mul))|0;
  $x1$i = (($s) + (($i$012*108)|0)|0);
  HEAP32[$x1$i>>2] = $x;
  $y2$i = (((($s) + (($i$012*108)|0)|0)) + 4|0);
  HEAP32[$y2$i>>2] = $sub;
  $f3$i = (((($s) + (($i$012*108)|0)|0)) + 8|0);
  HEAP32[$f3$i>>2] = $font;
  $sc4$i = (((($s) + (($i$012*108)|0)|0)) + 12|0);
  HEAP32[$sc4$i>>2] = $startchar;
  $len$i$i = (((($s) + (($i$012*108)|0)|0)) + 100|0);
  HEAP32[$len$i$i>>2] = 0;
  $arrayidx$i$i = (((($s) + (($i$012*108)|0)|0)) + 16|0);
  HEAP8[$arrayidx$i$i>>0] = 0;
  $needsupdate$i$i = (((($s) + (($i$012*108)|0)|0)) + 104|0);
  HEAP32[$needsupdate$i$i>>2] = 1;
  $inc = (($i$012) + 1)|0;
  $exitcond = ($inc|0)==($h|0);
  if ($exitcond) {
   break;
  } else {
   $i$012 = $inc;
  }
 }
 return;
}
function _HUlib_addMessageToSText($s,$prefix,$msg) {
 $s = $s|0;
 $prefix = $prefix|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i14 = 0, $arrayidx4$i = 0, $arrayidx4$i15 = 0;
 var $cl$i = 0, $cmp$i = 0, $cmp$i12 = 0, $cmp$i8 = 0, $cmp410$i = 0, $exitcond = 0, $h$i = 0, $i$011$i = 0, $inc$i = 0, $inc$i13 = 0, $inc$i9 = 0, $inc7$i = 0, $incdec$ptr = 0, $incdec$ptr8 = 0, $len$i = 0, $len$i$i = 0, $len$i11 = 0, $msg$addr$021 = 0, $needsupdate$i = 0, $needsupdate$i$i = 0;
 var $needsupdate$i10 = 0, $needsupdate$i16 = 0, $prefix$addr$023 = 0, $spec$store$select$i = 0, $tobool = 0, $tobool1 = 0, $tobool122 = 0, $tobool3 = 0, $tobool320 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cl$i = ((($s)) + 436|0);
 $0 = HEAP32[$cl$i>>2]|0;
 $inc$i = (($0) + 1)|0;
 $h$i = ((($s)) + 432|0);
 $1 = HEAP32[$h$i>>2]|0;
 $cmp$i = ($inc$i|0)==($1|0);
 $spec$store$select$i = $cmp$i ? 0 : $inc$i;
 HEAP32[$cl$i>>2] = $spec$store$select$i;
 $len$i$i = (((($s) + (($spec$store$select$i*108)|0)|0)) + 100|0);
 HEAP32[$len$i$i>>2] = 0;
 $arrayidx$i$i = (((($s) + (($spec$store$select$i*108)|0)|0)) + 16|0);
 HEAP8[$arrayidx$i$i>>0] = 0;
 $needsupdate$i$i = (((($s) + (($spec$store$select$i*108)|0)|0)) + 104|0);
 HEAP32[$needsupdate$i$i>>2] = 1;
 $2 = HEAP32[$h$i>>2]|0;
 $cmp410$i = ($2|0)>(0);
 if ($cmp410$i) {
  $i$011$i = 0;
  while(1) {
   $needsupdate$i = (((($s) + (($i$011$i*108)|0)|0)) + 104|0);
   HEAP32[$needsupdate$i>>2] = 4;
   $inc7$i = (($i$011$i) + 1)|0;
   $exitcond = ($inc7$i|0)==($2|0);
   if ($exitcond) {
    break;
   } else {
    $i$011$i = $inc7$i;
   }
  }
 }
 $tobool = ($prefix|0)==(0|0);
 if (!($tobool)) {
  $3 = HEAP8[$prefix>>0]|0;
  $tobool122 = ($3<<24>>24)==(0);
  if (!($tobool122)) {
   $6 = $3;$prefix$addr$023 = $prefix;
   while(1) {
    $4 = HEAP32[$cl$i>>2]|0;
    $incdec$ptr = ((($prefix$addr$023)) + 1|0);
    $len$i11 = (((($s) + (($4*108)|0)|0)) + 100|0);
    $5 = HEAP32[$len$i11>>2]|0;
    $cmp$i12 = ($5|0)==(80);
    if (!($cmp$i12)) {
     $inc$i13 = (($5) + 1)|0;
     HEAP32[$len$i11>>2] = $inc$i13;
     $arrayidx$i14 = ((((($s) + (($4*108)|0)|0)) + 16|0) + ($5)|0);
     HEAP8[$arrayidx$i14>>0] = $6;
     $7 = HEAP32[$len$i11>>2]|0;
     $arrayidx4$i15 = ((((($s) + (($4*108)|0)|0)) + 16|0) + ($7)|0);
     HEAP8[$arrayidx4$i15>>0] = 0;
     $needsupdate$i16 = (((($s) + (($4*108)|0)|0)) + 104|0);
     HEAP32[$needsupdate$i16>>2] = 4;
    }
    $8 = HEAP8[$incdec$ptr>>0]|0;
    $tobool1 = ($8<<24>>24)==(0);
    if ($tobool1) {
     break;
    } else {
     $6 = $8;$prefix$addr$023 = $incdec$ptr;
    }
   }
  }
 }
 $9 = HEAP8[$msg>>0]|0;
 $tobool320 = ($9<<24>>24)==(0);
 if ($tobool320) {
  return;
 }
 $12 = $9;$msg$addr$021 = $msg;
 while(1) {
  $10 = HEAP32[$cl$i>>2]|0;
  $incdec$ptr8 = ((($msg$addr$021)) + 1|0);
  $len$i = (((($s) + (($10*108)|0)|0)) + 100|0);
  $11 = HEAP32[$len$i>>2]|0;
  $cmp$i8 = ($11|0)==(80);
  if (!($cmp$i8)) {
   $inc$i9 = (($11) + 1)|0;
   HEAP32[$len$i>>2] = $inc$i9;
   $arrayidx$i = ((((($s) + (($10*108)|0)|0)) + 16|0) + ($11)|0);
   HEAP8[$arrayidx$i>>0] = $12;
   $13 = HEAP32[$len$i>>2]|0;
   $arrayidx4$i = ((((($s) + (($10*108)|0)|0)) + 16|0) + ($13)|0);
   HEAP8[$arrayidx4$i>>0] = 0;
   $needsupdate$i10 = (((($s) + (($10*108)|0)|0)) + 104|0);
   HEAP32[$needsupdate$i10>>2] = 4;
  }
  $14 = HEAP8[$incdec$ptr8>>0]|0;
  $tobool3 = ($14<<24>>24)==(0);
  if ($tobool3) {
   break;
  } else {
   $12 = $14;$msg$addr$021 = $incdec$ptr8;
  }
 }
 return;
}
function _HUlib_drawSText($s) {
 $s = $s|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0, $add27$i = 0;
 var $arrayidx$i = 0, $arrayidx16$i = 0, $call$i = 0, $cl = 0, $cmp = 0, $cmp$i = 0, $cmp1 = 0, $cmp12 = 0, $cmp12$i = 0, $cmp18$i = 0, $cmp28$i = 0, $cmp30$i = 0, $cmp5$i = 0, $cmp8$i = 0, $conv$i = 0, $conv17$i = 0, $conv4$i = 0, $f$i = 0, $h = 0, $i$013 = 0;
 var $i$032$i = 0, $inc = 0, $inc$i = 0, $len$i = 0, $on = 0, $or$cond$i = 0, $sc$i = 0, $spec$select = 0, $sub = 0, $sub$i = 0, $tobool = 0, $x$031$i = 0, $x$1$i = 0, $x1$i = 0, $y$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $on = ((($s)) + 440|0);
 $0 = HEAP32[$on>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $tobool = ($1|0)==(0);
 if ($tobool) {
  return;
 }
 $h = ((($s)) + 432|0);
 $2 = HEAP32[$h>>2]|0;
 $cmp12 = ($2|0)>(0);
 if (!($cmp12)) {
  return;
 }
 $cl = ((($s)) + 436|0);
 $4 = $2;$i$013 = 0;
 while(1) {
  $3 = HEAP32[$cl>>2]|0;
  $sub = (($3) - ($i$013))|0;
  $cmp1 = ($sub|0)<(0);
  $add = $cmp1 ? $4 : 0;
  $spec$select = (($add) + ($sub))|0;
  $f$i = (((($s) + (($spec$select*108)|0)|0)) + 8|0);
  $len$i = (((($s) + (($spec$select*108)|0)|0)) + 100|0);
  $5 = HEAP32[$len$i>>2]|0;
  $cmp30$i = ($5|0)>(0);
  L9: do {
   if ($cmp30$i) {
    $x1$i = (($s) + (($spec$select*108)|0)|0);
    $6 = HEAP32[$x1$i>>2]|0;
    $sc$i = (((($s) + (($spec$select*108)|0)|0)) + 12|0);
    $y$i = (((($s) + (($spec$select*108)|0)|0)) + 4|0);
    $15 = $5;$i$032$i = 0;$x$031$i = $6;
    while(1) {
     $arrayidx$i = ((((($s) + (($spec$select*108)|0)|0)) + 16|0) + ($i$032$i)|0);
     $7 = HEAP8[$arrayidx$i>>0]|0;
     $conv$i = $7 << 24 >> 24;
     $call$i = (_toupper($conv$i)|0);
     $conv4$i = $call$i & 255;
     $cmp5$i = ($conv4$i|0)==(32);
     if ($cmp5$i) {
      label = 10;
     } else {
      $8 = HEAP32[$sc$i>>2]|0;
      $cmp8$i = ($conv4$i|0)>=($8|0);
      $cmp12$i = ($conv4$i>>>0)<(96);
      $or$cond$i = $cmp12$i & $cmp8$i;
      if ($or$cond$i) {
       $9 = HEAP32[$f$i>>2]|0;
       $sub$i = (($conv4$i) - ($8))|0;
       $arrayidx16$i = (($9) + ($sub$i<<2)|0);
       $10 = HEAP32[$arrayidx16$i>>2]|0;
       $11 = HEAPU8[$10>>0]|(HEAPU8[$10+1>>0]<<8);
       $conv17$i = $11 << 16 >> 16;
       $add$i = (($x$031$i) + ($conv17$i))|0;
       $cmp18$i = ($add$i|0)>(320);
       if ($cmp18$i) {
        break L9;
       }
       $12 = HEAP32[$y$i>>2]|0;
       _V_DrawPatchDirect($x$031$i,$12,$10);
       $$pre$i = HEAP32[$len$i>>2]|0;
       $13 = $$pre$i;$x$1$i = $add$i;
      } else {
       label = 10;
      }
     }
     if ((label|0) == 10) {
      label = 0;
      $add27$i = (($x$031$i) + 4)|0;
      $cmp28$i = ($x$031$i|0)>(315);
      if ($cmp28$i) {
       break L9;
      } else {
       $13 = $15;$x$1$i = $add27$i;
      }
     }
     $inc$i = (($i$032$i) + 1)|0;
     $cmp$i = ($inc$i|0)<($13|0);
     if ($cmp$i) {
      $15 = $13;$i$032$i = $inc$i;$x$031$i = $x$1$i;
     } else {
      break;
     }
    }
   }
  } while(0);
  $inc = (($i$013) + 1)|0;
  $14 = HEAP32[$h>>2]|0;
  $cmp = ($inc|0)<($14|0);
  if ($cmp) {
   $4 = $14;$i$013 = $inc;
  } else {
   break;
  }
 }
 return;
}
function _HUlib_eraseSText($s) {
 $s = $s|0;
 var $$pre = 0, $$pre12 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arrayidx3 = 0, $cmp = 0, $cmp10 = 0, $h = 0, $i$011 = 0, $inc = 0, $laston = 0, $laston5$pre$phiZ2D = 0, $needsupdate = 0, $on = 0, $on4$pre$phiZ2D = 0;
 var $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $h = ((($s)) + 432|0);
 $0 = HEAP32[$h>>2]|0;
 $cmp10 = ($0|0)>(0);
 if (!($cmp10)) {
  $$pre = ((($s)) + 440|0);
  $$pre12 = ((($s)) + 444|0);
  $laston5$pre$phiZ2D = $$pre12;$on4$pre$phiZ2D = $$pre;
  $5 = HEAP32[$on4$pre$phiZ2D>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$laston5$pre$phiZ2D>>2] = $6;
  return;
 }
 $laston = ((($s)) + 444|0);
 $on = ((($s)) + 440|0);
 $i$011 = 0;
 while(1) {
  $1 = HEAP32[$laston>>2]|0;
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   $2 = HEAP32[$on>>2]|0;
   $3 = HEAP32[$2>>2]|0;
   $tobool1 = ($3|0)==(0);
   if ($tobool1) {
    $needsupdate = (((($s) + (($i$011*108)|0)|0)) + 104|0);
    HEAP32[$needsupdate>>2] = 4;
   }
  }
  $arrayidx3 = (($s) + (($i$011*108)|0)|0);
  _HUlib_eraseTextLine($arrayidx3);
  $inc = (($i$011) + 1)|0;
  $4 = HEAP32[$h>>2]|0;
  $cmp = ($inc|0)<($4|0);
  if ($cmp) {
   $i$011 = $inc;
  } else {
   $laston5$pre$phiZ2D = $laston;$on4$pre$phiZ2D = $on;
   break;
  }
 }
 $5 = HEAP32[$on4$pre$phiZ2D>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$laston5$pre$phiZ2D>>2] = $6;
 return;
}
function _HUlib_initIText($it,$x,$y,$font,$startchar,$on) {
 $it = $it|0;
 $x = $x|0;
 $y = $y|0;
 $font = $font|0;
 $startchar = $startchar|0;
 $on = $on|0;
 var $arrayidx$i$i = 0, $f3$i = 0, $laston = 0, $len$i$i = 0, $lm = 0, $needsupdate$i$i = 0, $on1 = 0, $sc4$i = 0, $y2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lm = ((($it)) + 108|0);
 HEAP32[$lm>>2] = 0;
 $on1 = ((($it)) + 112|0);
 HEAP32[$on1>>2] = $on;
 $laston = ((($it)) + 116|0);
 HEAP32[$laston>>2] = 1;
 HEAP32[$it>>2] = $x;
 $y2$i = ((($it)) + 4|0);
 HEAP32[$y2$i>>2] = $y;
 $f3$i = ((($it)) + 8|0);
 HEAP32[$f3$i>>2] = $font;
 $sc4$i = ((($it)) + 12|0);
 HEAP32[$sc4$i>>2] = $startchar;
 $len$i$i = ((($it)) + 100|0);
 HEAP32[$len$i$i>>2] = 0;
 $arrayidx$i$i = ((($it)) + 16|0);
 HEAP8[$arrayidx$i$i>>0] = 0;
 $needsupdate$i$i = ((($it)) + 104|0);
 HEAP32[$needsupdate$i$i>>2] = 1;
 return;
}
function _HUlib_resetIText($it) {
 $it = $it|0;
 var $arrayidx$i = 0, $len$i = 0, $lm = 0, $needsupdate$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lm = ((($it)) + 108|0);
 HEAP32[$lm>>2] = 0;
 $len$i = ((($it)) + 100|0);
 HEAP32[$len$i>>2] = 0;
 $arrayidx$i = ((($it)) + 16|0);
 HEAP8[$arrayidx$i>>0] = 0;
 $needsupdate$i = ((($it)) + 104|0);
 HEAP32[$needsupdate$i>>2] = 1;
 return;
}
function _HUlib_keyInIText($it,$ch) {
 $it = $it|0;
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx4$i = 0, $call = 0, $cmp$i = 0, $cmp$i8 = 0, $conv = 0, $conv1 = 0, $conv2 = 0, $conv2$off = 0, $dec$i$i = 0, $inc$i = 0, $len$i = 0, $len$i7 = 0, $lm$i = 0;
 var $needsupdate$i = 0, $needsupdate$i$i = 0, $retval$0 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv = $ch&255;
 $call = (_toupper($conv)|0);
 $conv1 = $call&255;
 $conv2 = $call & 255;
 $conv2$off = (($conv2) + -32)|0;
 $0 = ($conv2$off>>>0)<(64);
 L1: do {
  if ($0) {
   $len$i = ((($it)) + 100|0);
   $1 = HEAP32[$len$i>>2]|0;
   $cmp$i = ($1|0)==(80);
   if (!($cmp$i)) {
    $inc$i = (($1) + 1)|0;
    HEAP32[$len$i>>2] = $inc$i;
    $arrayidx$i = (((($it)) + 16|0) + ($1)|0);
    HEAP8[$arrayidx$i>>0] = $conv1;
    $2 = HEAP32[$len$i>>2]|0;
    $arrayidx4$i = (((($it)) + 16|0) + ($2)|0);
    HEAP8[$arrayidx4$i>>0] = 0;
    $needsupdate$i = ((($it)) + 104|0);
    HEAP32[$needsupdate$i>>2] = 4;
   }
  } else {
   switch ($conv1<<24>>24) {
   case 13:  {
    break L1;
    break;
   }
   case 127:  {
    break;
   }
   default: {
    $retval$0 = 0;
    return ($retval$0|0);
   }
   }
   $len$i7 = ((($it)) + 100|0);
   $3 = HEAP32[$len$i7>>2]|0;
   $lm$i = ((($it)) + 108|0);
   $4 = HEAP32[$lm$i>>2]|0;
   $cmp$i8 = ($3|0)==($4|0);
   if (!($cmp$i8)) {
    $tobool$i$i = ($3|0)==(0);
    $dec$i$i = (($3) + -1)|0;
    if (!($tobool$i$i)) {
     $needsupdate$i$i = ((($it)) + 104|0);
     $arrayidx$i$i = (((($it)) + 16|0) + ($dec$i$i)|0);
     HEAP32[$len$i7>>2] = $dec$i$i;
     HEAP8[$arrayidx$i$i>>0] = 0;
     HEAP32[$needsupdate$i$i>>2] = 4;
    }
   }
  }
 } while(0);
 $retval$0 = 1;
 return ($retval$0|0);
}
function _HUlib_drawIText($it) {
 $it = $it|0;
 var $0 = 0, $1 = 0, $on = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $on = ((($it)) + 112|0);
 $0 = HEAP32[$on>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $tobool = ($1|0)==(0);
 if ($tobool) {
  return;
 }
 _HUlib_drawTextLine($it,1);
 return;
}
function _HUlib_eraseIText($it) {
 $it = $it|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $laston = 0, $needsupdate = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $laston = ((($it)) + 116|0);
 $0 = HEAP32[$laston>>2]|0;
 $tobool = ($0|0)==(0);
 $$pre = ((($it)) + 112|0);
 if (!($tobool)) {
  $1 = HEAP32[$$pre>>2]|0;
  $2 = HEAP32[$1>>2]|0;
  $tobool1 = ($2|0)==(0);
  if ($tobool1) {
   $needsupdate = ((($it)) + 104|0);
   HEAP32[$needsupdate>>2] = 4;
  }
 }
 _HUlib_eraseTextLine($it);
 $3 = HEAP32[$$pre>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$laston>>2] = $4;
 return;
}
function _HU_Init() {
 var $arrayidx = 0, $buffer = 0, $call2 = 0, $exitcond = 0, $i$05 = 0, $inc = 0, $inc3 = 0, $j$06 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $buffer = sp + 4|0;
 $i$05 = 0;$j$06 = 33;
 while(1) {
  $inc = (($j$06) + 1)|0;
  HEAP32[$vararg_buffer>>2] = $j$06;
  (_snprintf($buffer,9,145713,$vararg_buffer)|0);
  $call2 = (_W_CacheLumpName($buffer,1)|0);
  $arrayidx = (184512 + ($i$05<<2)|0);
  HEAP32[$arrayidx>>2] = $call2;
  $inc3 = (($i$05) + 1)|0;
  $exitcond = ($inc3|0)==(63);
  if ($exitcond) {
   break;
  } else {
   $i$05 = $inc3;$j$06 = $inc;
  }
 }
 STACKTOP = sp;return;
}
function _HU_Start() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add16 = 0, $add20 = 0, $add31 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx13 = 0, $arrayidx17 = 0, $arrayidx21 = 0, $arrayidx21$sink = 0, $arrayidx26 = 0, $cmp = 0, $cmp2 = 0, $cmp22 = 0, $cond = 0, $cond7 = 0, $conv = 0, $conv30 = 0, $height = 0, $height29 = 0;
 var $incdec$ptr = 0, $s$0 = 0, $s$1 = 0, $s$29 = 0, $sub = 0, $sub12 = 0, $sub25 = 0, $sub9 = 0, $tobool = 0, $tobool28 = 0, $tobool288 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99182]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  HEAP32[99182] = 0;
 }
 $1 = HEAP32[99076]|0;
 $arrayidx = (181680 + (($1*288)|0)|0);
 HEAP32[99183] = $arrayidx;
 HEAP32[99184] = 0;
 HEAP32[99180] = 0;
 HEAP32[99185] = 0;
 HEAP32[99181] = 0;
 _HUlib_initSText(396744,0,0,1,184512,33,396736);
 $2 = HEAP32[46128]|0;
 $height = ((($2)) + 2|0);
 $3 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
 $conv = $3 << 16 >> 16;
 $sub = (167 - ($conv))|0;
 _HUlib_initTextLine(397192,0,$sub,184512,33);
 $4 = HEAP32[99015]|0;
 $cmp = ($4|0)==(4);
 $cmp2 = ($4|0)==(5);
 $cond = $cmp2 ? 1 : $4;
 $cond7 = $cmp ? 0 : $cond;
 switch ($cond7|0) {
 case 0:  {
  $5 = HEAP32[99085]|0;
  $6 = ($5*9)|0;
  $7 = HEAP32[99084]|0;
  $add = (($6) + -10)|0;
  $sub9 = (($add) + ($7))|0;
  $arrayidx10 = (2352 + ($sub9<<2)|0);
  $arrayidx21$sink = $arrayidx10;
  label = 8;
  break;
 }
 case 1:  {
  $8 = HEAP32[99084]|0;
  $sub12 = (($8) + -1)|0;
  $arrayidx13 = (2544 + ($sub12<<2)|0);
  $arrayidx21$sink = $arrayidx13;
  label = 8;
  break;
 }
 case 3:  {
  $9 = HEAP32[99084]|0;
  $add16 = (($9) + 31)|0;
  $arrayidx17 = (2544 + ($add16<<2)|0);
  $arrayidx21$sink = $arrayidx17;
  label = 8;
  break;
 }
 case 2:  {
  $10 = HEAP32[99084]|0;
  $add20 = (($10) + 63)|0;
  $arrayidx21 = (2544 + ($add20<<2)|0);
  $arrayidx21$sink = $arrayidx21;
  label = 8;
  break;
 }
 default: {
  $s$0 = 145723;
 }
 }
 if ((label|0) == 8) {
  $11 = HEAP32[$arrayidx21$sink>>2]|0;
  $s$0 = $11;
 }
 $12 = HEAP32[32141]|0;
 $cmp22 = ($12|0)==(9);
 if ($cmp22) {
  $13 = HEAP32[99084]|0;
  $sub25 = (($13) + -1)|0;
  $arrayidx26 = (2352 + ($sub25<<2)|0);
  $14 = HEAP32[$arrayidx26>>2]|0;
  $s$1 = $14;
 } else {
  $s$1 = $s$0;
 }
 $15 = HEAP8[$s$1>>0]|0;
 $tobool288 = ($15<<24>>24)==(0);
 if (!($tobool288)) {
  $16 = $15;$s$29 = $s$1;
  while(1) {
   $incdec$ptr = ((($s$29)) + 1|0);
   (_HUlib_addCharToTextLine(397192,$16)|0);
   $17 = HEAP8[$incdec$ptr>>0]|0;
   $tobool28 = ($17<<24>>24)==(0);
   if ($tobool28) {
    break;
   } else {
    $16 = $17;$s$29 = $incdec$ptr;
   }
  }
 }
 $18 = HEAP32[46128]|0;
 $height29 = ((($18)) + 2|0);
 $19 = HEAPU8[$height29>>0]|(HEAPU8[$height29+1>>0]<<8);
 $conv30 = $19 << 16 >> 16;
 $add31 = (($conv30) + 1)|0;
 _HUlib_initIText(397300,0,$add31,184512,33,396724);
 _HUlib_initIText(184768,0,0,0,0,397420);
 _HUlib_initIText((184888),0,0,0,0,397420);
 _HUlib_initIText((185008),0,0,0,0,397420);
 _HUlib_initIText((185128),0,0,0,0,397420);
 HEAP32[99182] = 1;
 return;
}
function _HU_Drawer() {
 var $0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _HUlib_drawSText(396744);
 _HUlib_drawIText(397300);
 $0 = HEAP32[98972]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  return;
 }
 _HUlib_drawTextLine(397192,0);
 return;
}
function _HU_Erase() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _HUlib_eraseSText(396744);
 _HUlib_eraseIText(397300);
 _HUlib_eraseTextLine(397192);
 return;
}
function _HU_Ticker() {
 var $$pre = 0, $$pre25 = 0, $$pre26 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add = 0, $add$1 = 0, $add$2 = 0, $add$3 = 0, $call = 0, $call$1 = 0, $call$2 = 0, $call$3 = 0, $cmp23 = 0, $cmp23$1 = 0, $cmp23$2 = 0, $cmp23$3 = 0, $cmp29 = 0, $cmp29$1 = 0, $cmp29$2 = 0, $cmp29$3 = 0, $cmp37 = 0, $cmp37$1 = 0;
 var $cmp37$2 = 0, $cmp37$3 = 0, $cmp45 = 0, $cmp45$1 = 0, $cmp45$2 = 0, $cmp45$3 = 0, $cmp50 = 0, $cmp50$1 = 0, $cmp50$2 = 0, $cmp50$3 = 0, $cmp57 = 0, $cmp57$1 = 0, $cmp57$2 = 0, $cmp57$3 = 0, $conv44 = 0, $conv44$1 = 0, $conv44$2 = 0, $conv44$3 = 0, $dec = 0, $message = 0;
 var $message15 = 0, $or$cond = 0, $or$cond21 = 0, $or$cond21$1 = 0, $or$cond21$2 = 0, $or$cond21$3 = 0, $or$cond22 = 0, $or$cond22$1 = 0, $or$cond22$2 = 0, $or$cond22$3 = 0, $or$cond227 = 0, $or$cond23 = 0, $or$cond23$1 = 0, $or$cond23$2 = 0, $or$cond23$3 = 0, $tobool = 0, $tobool1 = 0, $tobool18 = 0, $tobool20 = 0, $tobool20$1 = 0;
 var $tobool20$2 = 0, $tobool20$3 = 0, $tobool26 = 0, $tobool26$1 = 0, $tobool26$2 = 0, $tobool26$3 = 0, $tobool3 = 0, $tobool34 = 0, $tobool34$1 = 0, $tobool34$2 = 0, $tobool34$3 = 0, $tobool41 = 0, $tobool41$1 = 0, $tobool41$2 = 0, $tobool41$3 = 0, $tobool5 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99356]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  $dec = (($0) + -1)|0;
  HEAP32[99356] = $dec;
  $tobool1 = ($dec|0)==(0);
  if ($tobool1) {
   HEAP32[99184] = 0;
   HEAP32[99185] = 0;
  }
 }
 $1 = HEAP32[32246]|0;
 $2 = HEAP32[99180]|0;
 $3 = $2 | $1;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $tobool3 = ($2|0)!=(0);
  $5 = HEAP32[99183]|0;
  $message = ((($5)) + 224|0);
  $6 = HEAP32[$message>>2]|0;
  $tobool5 = ($6|0)!=(0|0);
  $7 = HEAP32[99185]|0;
  $tobool7 = ($7|0)==(0);
  $or$cond227 = $tobool3 | $tobool7;
  $or$cond = $or$cond227 & $tobool5;
  if ($or$cond) {
   _HUlib_addMessageToSText(396744,0,$6);
   $8 = HEAP32[99183]|0;
   $message15 = ((($8)) + 224|0);
   HEAP32[$message15>>2] = 0;
   HEAP32[99184] = 1;
   HEAP32[99356] = 140;
   $9 = HEAP32[99180]|0;
   HEAP32[99185] = $9;
   HEAP32[99180] = 0;
  }
 }
 $10 = HEAP32[99094]|0;
 $tobool18 = ($10|0)==(0);
 if ($tobool18) {
  return;
 }
 $11 = HEAP32[45416]|0;
 $tobool20 = ($11|0)==(0);
 $12 = HEAP32[99076]|0;
 $cmp23 = ($12|0)==(0);
 $or$cond21 = $tobool20 | $cmp23;
 if ($or$cond21) {
  $19 = $12;
 } else {
  $13 = HEAP8[(181692)>>0]|0;
  $tobool26 = ($13<<24>>24)==(0);
  if ($tobool26) {
   $19 = $12;
  } else {
   $cmp29 = ($13<<24>>24)<(6);
   if ($cmp29) {
    HEAP8[400122] = $13;
   } else {
    $call = (_HUlib_keyInIText(184768,$13)|0);
    $tobool34 = ($call|0)!=(0);
    $cmp37 = ($13<<24>>24)==(13);
    $or$cond22 = $cmp37 & $tobool34;
    if ($or$cond22) {
     $14 = HEAP32[(184868)>>2]|0;
     $tobool41 = ($14|0)==(0);
     do {
      if (!($tobool41)) {
       $15 = HEAP8[400122]|0;
       $conv44 = $15 << 24 >> 24;
       $16 = HEAP32[99076]|0;
       $add = (($16) + 1)|0;
       $cmp45 = ($add|0)==($conv44|0);
       $cmp50 = ($15<<24>>24)==(5);
       $or$cond23 = $cmp50 | $cmp45;
       if ($or$cond23) {
        _HUlib_addMessageToSText(396744,142894,(184784));
        HEAP32[99185] = 1;
        HEAP32[99184] = 1;
        HEAP32[99356] = 140;
        $17 = HEAP32[32140]|0;
        $cmp57 = ($17|0)==(2);
        if ($cmp57) {
         _S_StartSound(0,108);
         break;
        } else {
         _S_StartSound(0,87);
         break;
        }
       }
      }
     } while(0);
     _HUlib_resetIText(184768);
    }
   }
   HEAP8[(181692)>>0] = 0;
   $$pre = HEAP32[99076]|0;
   $19 = $$pre;
  }
 }
 $18 = HEAP32[(181668)>>2]|0;
 $tobool20$1 = ($18|0)==(0);
 $cmp23$1 = ($19|0)==(1);
 $or$cond21$1 = $tobool20$1 | $cmp23$1;
 if ($or$cond21$1) {
  $26 = $19;
 } else {
  $20 = HEAP8[(181980)>>0]|0;
  $tobool26$1 = ($20<<24>>24)==(0);
  if ($tobool26$1) {
   $26 = $19;
  } else {
   $cmp29$1 = ($20<<24>>24)<(6);
   if ($cmp29$1) {
    HEAP8[400123] = $20;
   } else {
    $call$1 = (_HUlib_keyInIText((184888),$20)|0);
    $tobool34$1 = ($call$1|0)!=(0);
    $cmp37$1 = ($20<<24>>24)==(13);
    $or$cond22$1 = $cmp37$1 & $tobool34$1;
    if ($or$cond22$1) {
     $21 = HEAP32[(184988)>>2]|0;
     $tobool41$1 = ($21|0)==(0);
     do {
      if (!($tobool41$1)) {
       $22 = HEAP8[400123]|0;
       $conv44$1 = $22 << 24 >> 24;
       $23 = HEAP32[99076]|0;
       $add$1 = (($23) + 1)|0;
       $cmp45$1 = ($add$1|0)==($conv44$1|0);
       $cmp50$1 = ($22<<24>>24)==(5);
       $or$cond23$1 = $cmp50$1 | $cmp45$1;
       if ($or$cond23$1) {
        _HUlib_addMessageToSText(396744,142902,(184904));
        HEAP32[99185] = 1;
        HEAP32[99184] = 1;
        HEAP32[99356] = 140;
        $24 = HEAP32[32140]|0;
        $cmp57$1 = ($24|0)==(2);
        if ($cmp57$1) {
         _S_StartSound(0,108);
         break;
        } else {
         _S_StartSound(0,87);
         break;
        }
       }
      }
     } while(0);
     _HUlib_resetIText((184888));
    }
   }
   HEAP8[(181980)>>0] = 0;
   $$pre25 = HEAP32[99076]|0;
   $26 = $$pre25;
  }
 }
 $25 = HEAP32[(181672)>>2]|0;
 $tobool20$2 = ($25|0)==(0);
 $cmp23$2 = ($26|0)==(2);
 $or$cond21$2 = $tobool20$2 | $cmp23$2;
 if ($or$cond21$2) {
  $33 = $26;
 } else {
  $27 = HEAP8[(182268)>>0]|0;
  $tobool26$2 = ($27<<24>>24)==(0);
  if ($tobool26$2) {
   $33 = $26;
  } else {
   $cmp29$2 = ($27<<24>>24)<(6);
   if ($cmp29$2) {
    HEAP8[400124] = $27;
   } else {
    $call$2 = (_HUlib_keyInIText((185008),$27)|0);
    $tobool34$2 = ($call$2|0)!=(0);
    $cmp37$2 = ($27<<24>>24)==(13);
    $or$cond22$2 = $cmp37$2 & $tobool34$2;
    if ($or$cond22$2) {
     $28 = HEAP32[(185108)>>2]|0;
     $tobool41$2 = ($28|0)==(0);
     do {
      if (!($tobool41$2)) {
       $29 = HEAP8[400124]|0;
       $conv44$2 = $29 << 24 >> 24;
       $30 = HEAP32[99076]|0;
       $add$2 = (($30) + 1)|0;
       $cmp45$2 = ($add$2|0)==($conv44$2|0);
       $cmp50$2 = ($29<<24>>24)==(5);
       $or$cond23$2 = $cmp50$2 | $cmp45$2;
       if ($or$cond23$2) {
        _HUlib_addMessageToSText(396744,142911,(185024));
        HEAP32[99185] = 1;
        HEAP32[99184] = 1;
        HEAP32[99356] = 140;
        $31 = HEAP32[32140]|0;
        $cmp57$2 = ($31|0)==(2);
        if ($cmp57$2) {
         _S_StartSound(0,108);
         break;
        } else {
         _S_StartSound(0,87);
         break;
        }
       }
      }
     } while(0);
     _HUlib_resetIText((185008));
    }
   }
   HEAP8[(182268)>>0] = 0;
   $$pre26 = HEAP32[99076]|0;
   $33 = $$pre26;
  }
 }
 $32 = HEAP32[(181676)>>2]|0;
 $tobool20$3 = ($32|0)==(0);
 $cmp23$3 = ($33|0)==(3);
 $or$cond21$3 = $tobool20$3 | $cmp23$3;
 if ($or$cond21$3) {
  return;
 }
 $34 = HEAP8[(182556)>>0]|0;
 $tobool26$3 = ($34<<24>>24)==(0);
 if ($tobool26$3) {
  return;
 }
 $cmp29$3 = ($34<<24>>24)<(6);
 if ($cmp29$3) {
  HEAP8[400125] = $34;
 } else {
  $call$3 = (_HUlib_keyInIText((185128),$34)|0);
  $tobool34$3 = ($call$3|0)!=(0);
  $cmp37$3 = ($34<<24>>24)==(13);
  $or$cond22$3 = $cmp37$3 & $tobool34$3;
  if ($or$cond22$3) {
   $35 = HEAP32[(185228)>>2]|0;
   $tobool41$3 = ($35|0)==(0);
   do {
    if (!($tobool41$3)) {
     $36 = HEAP8[400125]|0;
     $conv44$3 = $36 << 24 >> 24;
     $37 = HEAP32[99076]|0;
     $add$3 = (($37) + 1)|0;
     $cmp45$3 = ($add$3|0)==($conv44$3|0);
     $cmp50$3 = ($36<<24>>24)==(5);
     $or$cond23$3 = $cmp50$3 | $cmp45$3;
     if ($or$cond23$3) {
      _HUlib_addMessageToSText(396744,142919,(185144));
      HEAP32[99185] = 1;
      HEAP32[99184] = 1;
      HEAP32[99356] = 140;
      $38 = HEAP32[32140]|0;
      $cmp57$3 = ($38|0)==(2);
      if ($cmp57$3) {
       _S_StartSound(0,108);
       break;
      } else {
       _S_StartSound(0,87);
       break;
      }
     }
    }
   } while(0);
   _HUlib_resetIText((185128));
  }
 }
 HEAP8[(182556)>>0] = 0;
 return;
}
function _HU_dequeueChatChar() {
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $and = 0, $arrayidx = 0, $c$0 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99357]|0;
 $1 = HEAP32[99358]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $c$0 = 0;
  return ($c$0|0);
 }
 $add = (($1) + 1)|0;
 $and = $add & 127;
 $arrayidx = (185248 + ($1)|0);
 $2 = HEAP8[$arrayidx>>0]|0;
 HEAP32[99358] = $and;
 $c$0 = $2;
 return ($c$0|0);
}
function _HU_Responder($ev) {
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$1 = 0, $add$2 = 0, $add$3 = 0, $add$i = 0, $add$i32 = 0, $add$i40 = 0, $add$i48 = 0, $add$i56 = 0, $add$i64 = 0, $and$i = 0;
 var $and$i33 = 0, $and$i41 = 0, $and$i49 = 0, $and$i57 = 0, $and$i65 = 0, $arrayidx$i = 0, $arrayidx$i37 = 0, $arrayidx$i45 = 0, $arrayidx$i53 = 0, $arrayidx$i61 = 0, $arrayidx$i69 = 0, $arrayidx95 = 0, $call103 = 0, $cmp$i = 0, $cmp$i34 = 0, $cmp$i42 = 0, $cmp$i50 = 0, $cmp$i58 = 0, $cmp$i66 = 0, $cmp10 = 0;
 var $cmp16 = 0, $cmp21 = 0, $cmp27 = 0, $cmp36 = 0, $cmp36$1 = 0, $cmp36$2 = 0, $cmp36$3 = 0, $cmp42 = 0, $cmp42$1 = 0, $cmp42$2 = 0, $cmp42$3 = 0, $cmp52 = 0, $cmp52$1 = 0, $cmp52$2 = 0, $cmp52$3 = 0, $cmp56 = 0, $cmp56$1 = 0, $cmp56$2 = 0, $cmp56$3 = 0, $cmp61 = 0;
 var $cmp61$1 = 0, $cmp61$2 = 0, $cmp61$3 = 0, $cmp66 = 0, $cmp66$1 = 0, $cmp66$2 = 0, $cmp66$3 = 0, $cmp7 = 0, $cmp91 = 0, $conv = 0, $conv102 = 0, $conv90 = 0, $data1 = 0, $data2 = 0, $data2101 = 0, $i$176$lcssa = 0, $inc51 = 0, $inc51$1 = 0, $inc51$2 = 0, $inc51$3 = 0;
 var $incdec$ptr = 0, $macromessage$078 = 0, $message = 0, $message$i = 0, $message$i35 = 0, $message$i43 = 0, $message$i51 = 0, $message$i59 = 0, $message$i67 = 0, $message114 = 0, $message99 = 0, $or$cond31 = 0, $or$cond31$1 = 0, $or$cond31$2 = 0, $or$cond31$3 = 0, $retval$0 = 0, $sub = 0, $tobool = 0, $tobool104 = 0, $tobool111 = 0;
 var $tobool20 = 0, $tobool40 = 0, $tobool40$1 = 0, $tobool40$2 = 0, $tobool40$3 = 0, $tobool86 = 0, $tobool96 = 0, $tobool9677 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[45416]|0;
 $1 = HEAP32[(181668)>>2]|0;
 $add$1 = (($1) + ($0))|0;
 $2 = HEAP32[(181672)>>2]|0;
 $add$2 = (($2) + ($add$1))|0;
 $3 = HEAP32[(181676)>>2]|0;
 $add$3 = (($3) + ($add$2))|0;
 $data1 = ((($ev)) + 4|0);
 $4 = HEAP32[$data1>>2]|0;
 switch ($4|0) {
 case 184:  {
  $5 = HEAP32[$ev>>2]|0;
  $cmp7 = ($5|0)==(0);
  $conv = $cmp7&1;
  HEAP32[99359] = $conv;
  $retval$0 = 0;
  return ($retval$0|0);
  break;
 }
 case 182:  {
  $retval$0 = 0;
  return ($retval$0|0);
  break;
 }
 default: {
  $6 = HEAP32[$ev>>2]|0;
  $cmp10 = ($6|0)==(0);
  if (!($cmp10)) {
   $retval$0 = 0;
   return ($retval$0|0);
  }
  $7 = HEAP32[99181]|0;
  $tobool = ($7|0)==(0);
  if (!($tobool)) {
   $23 = HEAP32[99359]|0;
   $tobool86 = ($23|0)==(0);
   if ($tobool86) {
    $data2101 = ((($ev)) + 8|0);
    $37 = HEAP32[$data2101>>2]|0;
    $conv102 = $37&255;
    $call103 = (_HUlib_keyInIText(397300,$conv102)|0);
    $tobool104 = ($call103|0)==(0);
    do {
     if (!($tobool104)) {
      $38 = HEAP32[99357]|0;
      $add$i32 = (($38) + 1)|0;
      $and$i33 = $add$i32 & 127;
      $39 = HEAP32[99358]|0;
      $cmp$i34 = ($and$i33|0)==($39|0);
      if ($cmp$i34) {
       $40 = HEAP32[99183]|0;
       $message$i35 = ((($40)) + 224|0);
       HEAP32[$message$i35>>2] = 145737;
       break;
      } else {
       $arrayidx$i37 = (185248 + ($38)|0);
       HEAP8[$arrayidx$i37>>0] = $conv102;
       HEAP32[99357] = $and$i33;
       break;
      }
     }
    } while(0);
    switch ($conv102<<24>>24) {
    case 13:  {
     HEAP32[99181] = 0;
     $41 = HEAP32[(397400)>>2]|0;
     $tobool111 = ($41|0)==(0);
     if ($tobool111) {
      $retval$0 = $call103;
      return ($retval$0|0);
     }
     (_M_StringCopy(185376,(397316),81)|0);
     $42 = HEAP32[99183]|0;
     $message114 = ((($42)) + 224|0);
     HEAP32[$message114>>2] = 185376;
     $retval$0 = $call103;
     return ($retval$0|0);
     break;
    }
    case 27:  {
     HEAP32[99181] = 0;
     $retval$0 = $call103;
     return ($retval$0|0);
     break;
    }
    default: {
     $retval$0 = $call103;
     return ($retval$0|0);
    }
    }
   }
   $sub = (($4) + 208)|0;
   $conv90 = $sub & 255;
   $cmp91 = ($conv90>>>0)>(9);
   if ($cmp91) {
    $retval$0 = 0;
    return ($retval$0|0);
   }
   $arrayidx95 = (2288 + ($conv90<<2)|0);
   $24 = HEAP32[$arrayidx95>>2]|0;
   $25 = HEAP32[99357]|0;
   $add$i56 = (($25) + 1)|0;
   $and$i57 = $add$i56 & 127;
   $26 = HEAP32[99358]|0;
   $cmp$i58 = ($and$i57|0)==($26|0);
   if ($cmp$i58) {
    $27 = HEAP32[99183]|0;
    $message$i59 = ((($27)) + 224|0);
    HEAP32[$message$i59>>2] = 145737;
    $48 = $25;
   } else {
    $arrayidx$i61 = (185248 + ($25)|0);
    HEAP8[$arrayidx$i61>>0] = 13;
    HEAP32[99357] = $and$i57;
    $48 = $and$i57;
   }
   $28 = HEAP8[$24>>0]|0;
   $tobool9677 = ($28<<24>>24)==(0);
   if ($tobool9677) {
    $33 = $48;
   } else {
    $29 = HEAP32[99183]|0;
    $message$i51 = ((($29)) + 224|0);
    $30 = $48;$31 = $28;$macromessage$078 = $24;
    while(1) {
     $incdec$ptr = ((($macromessage$078)) + 1|0);
     $add$i48 = (($30) + 1)|0;
     $and$i49 = $add$i48 & 127;
     $cmp$i50 = ($and$i49|0)==($26|0);
     if ($cmp$i50) {
      HEAP32[$message$i51>>2] = 145737;
      $49 = $30;
     } else {
      $arrayidx$i53 = (185248 + ($30)|0);
      HEAP8[$arrayidx$i53>>0] = $31;
      HEAP32[99357] = $and$i49;
      $49 = $and$i49;
     }
     $32 = HEAP8[$incdec$ptr>>0]|0;
     $tobool96 = ($32<<24>>24)==(0);
     if ($tobool96) {
      $33 = $49;
      break;
     } else {
      $30 = $49;$31 = $32;$macromessage$078 = $incdec$ptr;
     }
    }
   }
   $add$i40 = (($33) + 1)|0;
   $and$i41 = $add$i40 & 127;
   $cmp$i42 = ($and$i41|0)==($26|0);
   if ($cmp$i42) {
    $34 = HEAP32[99183]|0;
    $message$i43 = ((($34)) + 224|0);
    HEAP32[$message$i43>>2] = 145737;
   } else {
    $arrayidx$i45 = (185248 + ($33)|0);
    HEAP8[$arrayidx$i45>>0] = 13;
    HEAP32[99357] = $and$i41;
   }
   HEAP32[99181] = 0;
   $35 = HEAP32[$arrayidx95>>2]|0;
   (_M_StringCopy(185376,$35,81)|0);
   $36 = HEAP32[99183]|0;
   $message99 = ((($36)) + 224|0);
   HEAP32[$message99>>2] = 185376;
   $retval$0 = 1;
   return ($retval$0|0);
  }
  $8 = HEAP32[32189]|0;
  $cmp16 = ($4|0)==($8|0);
  if ($cmp16) {
   HEAP32[99184] = 1;
   HEAP32[99356] = 140;
   $retval$0 = 1;
   return ($retval$0|0);
  }
  $9 = HEAP32[99094]|0;
  $tobool20 = ($9|0)==(0);
  if ($tobool20) {
   $retval$0 = 0;
   return ($retval$0|0);
  }
  $data2 = ((($ev)) + 8|0);
  $10 = HEAP32[$data2>>2]|0;
  $11 = HEAP32[32193]|0;
  $cmp21 = ($10|0)==($11|0);
  if ($cmp21) {
   HEAP32[99181] = 1;
   _HUlib_resetIText(397300);
   $12 = HEAP32[99357]|0;
   $add$i = (($12) + 1)|0;
   $and$i = $add$i & 127;
   $13 = HEAP32[99358]|0;
   $cmp$i = ($and$i|0)==($13|0);
   if ($cmp$i) {
    $14 = HEAP32[99183]|0;
    $message$i = ((($14)) + 224|0);
    HEAP32[$message$i>>2] = 145737;
    $retval$0 = 1;
    return ($retval$0|0);
   } else {
    $arrayidx$i = (185248 + ($12)|0);
    HEAP8[$arrayidx$i>>0] = 5;
    HEAP32[99357] = $and$i;
    $retval$0 = 1;
    return ($retval$0|0);
   }
  }
  $cmp27 = ($add$3|0)>(2);
  if (!($cmp27)) {
   $retval$0 = 0;
   return ($retval$0|0);
  }
  $15 = HEAP32[99076]|0;
  $16 = HEAP32[99183]|0;
  $message = ((($16)) + 224|0);
  $17 = HEAP32[46368]|0;
  $cmp36 = ($10|0)==($17|0);
  do {
   if ($cmp36) {
    $tobool40 = ($0|0)==(0);
    $cmp42 = ($15|0)==(0);
    $or$cond31 = $tobool40 | $cmp42;
    if ($or$cond31) {
     if ($cmp42) {
      $21 = HEAP32[99360]|0;
      $inc51 = (($21) + 1)|0;
      HEAP32[99360] = $inc51;
      $cmp52 = ($21|0)<(2);
      if ($cmp52) {
       HEAP32[$message>>2] = 145754;
       label = 28;
       break;
      }
      $cmp56 = ($21|0)<(5);
      if ($cmp56) {
       HEAP32[$message>>2] = 145777;
       label = 28;
       break;
      }
      $cmp61 = ($21|0)<(8);
      if ($cmp61) {
       HEAP32[$message>>2] = 145790;
       label = 28;
       break;
      }
      $cmp66 = ($21|0)<(31);
      if ($cmp66) {
       HEAP32[$message>>2] = 145809;
       label = 28;
       break;
      } else {
       HEAP32[$message>>2] = 145827;
       label = 28;
       break;
      }
     } else {
      label = 28;
     }
    } else {
     $i$176$lcssa = 1;
    }
   } else {
    label = 28;
   }
  } while(0);
  L82: do {
   if ((label|0) == 28) {
    $22 = HEAP32[(185476)>>2]|0;
    $cmp36$1 = ($10|0)==($22|0);
    do {
     if ($cmp36$1) {
      $tobool40$1 = ($1|0)==(0);
      $cmp42$1 = ($15|0)==(1);
      $or$cond31$1 = $tobool40$1 | $cmp42$1;
      if (!($or$cond31$1)) {
       $i$176$lcssa = 2;
       break L82;
      }
      if ($cmp42$1) {
       $43 = HEAP32[99360]|0;
       $inc51$1 = (($43) + 1)|0;
       HEAP32[99360] = $inc51$1;
       $cmp52$1 = ($43|0)<(2);
       if ($cmp52$1) {
        HEAP32[$message>>2] = 145754;
        break;
       }
       $cmp56$1 = ($43|0)<(5);
       if ($cmp56$1) {
        HEAP32[$message>>2] = 145777;
        break;
       }
       $cmp61$1 = ($43|0)<(8);
       if ($cmp61$1) {
        HEAP32[$message>>2] = 145790;
        break;
       }
       $cmp66$1 = ($43|0)<(31);
       if ($cmp66$1) {
        HEAP32[$message>>2] = 145809;
        break;
       } else {
        HEAP32[$message>>2] = 145827;
        break;
       }
      }
     }
    } while(0);
    $44 = HEAP32[(185480)>>2]|0;
    $cmp36$2 = ($10|0)==($44|0);
    do {
     if ($cmp36$2) {
      $tobool40$2 = ($2|0)==(0);
      $cmp42$2 = ($15|0)==(2);
      $or$cond31$2 = $tobool40$2 | $cmp42$2;
      if (!($or$cond31$2)) {
       $i$176$lcssa = 3;
       break L82;
      }
      if ($cmp42$2) {
       $45 = HEAP32[99360]|0;
       $inc51$2 = (($45) + 1)|0;
       HEAP32[99360] = $inc51$2;
       $cmp52$2 = ($45|0)<(2);
       if ($cmp52$2) {
        HEAP32[$message>>2] = 145754;
        break;
       }
       $cmp56$2 = ($45|0)<(5);
       if ($cmp56$2) {
        HEAP32[$message>>2] = 145777;
        break;
       }
       $cmp61$2 = ($45|0)<(8);
       if ($cmp61$2) {
        HEAP32[$message>>2] = 145790;
        break;
       }
       $cmp66$2 = ($45|0)<(31);
       if ($cmp66$2) {
        HEAP32[$message>>2] = 145809;
        break;
       } else {
        HEAP32[$message>>2] = 145827;
        break;
       }
      }
     }
    } while(0);
    $46 = HEAP32[(185484)>>2]|0;
    $cmp36$3 = ($10|0)==($46|0);
    if (!($cmp36$3)) {
     $retval$0 = 0;
     return ($retval$0|0);
    }
    $tobool40$3 = ($3|0)==(0);
    $cmp42$3 = ($15|0)==(3);
    $or$cond31$3 = $tobool40$3 | $cmp42$3;
    if ($or$cond31$3) {
     if (!($cmp42$3)) {
      $retval$0 = 0;
      return ($retval$0|0);
     }
     $47 = HEAP32[99360]|0;
     $inc51$3 = (($47) + 1)|0;
     HEAP32[99360] = $inc51$3;
     $cmp52$3 = ($47|0)<(2);
     if ($cmp52$3) {
      HEAP32[$message>>2] = 145754;
      $retval$0 = 0;
      return ($retval$0|0);
     }
     $cmp56$3 = ($47|0)<(5);
     if ($cmp56$3) {
      HEAP32[$message>>2] = 145777;
      $retval$0 = 0;
      return ($retval$0|0);
     }
     $cmp61$3 = ($47|0)<(8);
     if ($cmp61$3) {
      HEAP32[$message>>2] = 145790;
      $retval$0 = 0;
      return ($retval$0|0);
     }
     $cmp66$3 = ($47|0)<(31);
     if ($cmp66$3) {
      HEAP32[$message>>2] = 145809;
      $retval$0 = 0;
      return ($retval$0|0);
     } else {
      HEAP32[$message>>2] = 145827;
      $retval$0 = 0;
      return ($retval$0|0);
     }
    } else {
     $i$176$lcssa = 4;
    }
   }
  } while(0);
  HEAP32[99181] = 1;
  _HUlib_resetIText(397300);
  $18 = HEAP32[99357]|0;
  $add$i64 = (($18) + 1)|0;
  $and$i65 = $add$i64 & 127;
  $19 = HEAP32[99358]|0;
  $cmp$i66 = ($and$i65|0)==($19|0);
  if ($cmp$i66) {
   $20 = HEAP32[99183]|0;
   $message$i67 = ((($20)) + 224|0);
   HEAP32[$message$i67>>2] = 145737;
   $retval$0 = 1;
   return ($retval$0|0);
  } else {
   $arrayidx$i69 = (185248 + ($18)|0);
   HEAP8[$arrayidx$i69>>0] = $i$176$lcssa;
   HEAP32[99357] = $and$i65;
   $retval$0 = 1;
   return ($retval$0|0);
  }
 }
 }
 return (0)|0;
}
function _I_Endoom($endoom_data) {
 $endoom_data = $endoom_data|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_InitJoystick() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_BindJoystickVariables() {
 var $name = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer25 = sp + 104|0;
 $vararg_buffer22 = sp + 96|0;
 $vararg_buffer19 = sp + 88|0;
 $vararg_buffer16 = sp + 80|0;
 $vararg_buffer13 = sp + 72|0;
 $vararg_buffer10 = sp + 64|0;
 $vararg_buffer7 = sp + 56|0;
 $vararg_buffer4 = sp + 48|0;
 $vararg_buffer1 = sp + 40|0;
 $vararg_buffer = sp + 32|0;
 $name = sp;
 _M_BindVariable(148609,397444);
 _M_BindVariable(147524,128640);
 _M_BindVariable(147539,397448);
 _M_BindVariable(147573,128644);
 _M_BindVariable(147607,128648);
 _M_BindVariable(147555,397452);
 _M_BindVariable(147589,397456);
 _M_BindVariable(147628,397460);
 HEAP32[$vararg_buffer>>2] = 0;
 (_M_snprintf($name,32,146535,$vararg_buffer)|0);
 _M_BindVariable($name,43184);
 HEAP32[$vararg_buffer1>>2] = 1;
 (_M_snprintf($name,32,146535,$vararg_buffer1)|0);
 _M_BindVariable($name,(43188));
 HEAP32[$vararg_buffer4>>2] = 2;
 (_M_snprintf($name,32,146535,$vararg_buffer4)|0);
 _M_BindVariable($name,(43192));
 HEAP32[$vararg_buffer7>>2] = 3;
 (_M_snprintf($name,32,146535,$vararg_buffer7)|0);
 _M_BindVariable($name,(43196));
 HEAP32[$vararg_buffer10>>2] = 4;
 (_M_snprintf($name,32,146535,$vararg_buffer10)|0);
 _M_BindVariable($name,(43200));
 HEAP32[$vararg_buffer13>>2] = 5;
 (_M_snprintf($name,32,146535,$vararg_buffer13)|0);
 _M_BindVariable($name,(43204));
 HEAP32[$vararg_buffer16>>2] = 6;
 (_M_snprintf($name,32,146535,$vararg_buffer16)|0);
 _M_BindVariable($name,(43208));
 HEAP32[$vararg_buffer19>>2] = 7;
 (_M_snprintf($name,32,146535,$vararg_buffer19)|0);
 _M_BindVariable($name,(43212));
 HEAP32[$vararg_buffer22>>2] = 8;
 (_M_snprintf($name,32,146535,$vararg_buffer22)|0);
 _M_BindVariable($name,(43216));
 HEAP32[$vararg_buffer25>>2] = 9;
 (_M_snprintf($name,32,146535,$vararg_buffer25)|0);
 _M_BindVariable($name,(43220));
 STACKTOP = sp;return;
}
function _I_InitSound($use_sfx_prefix) {
 $use_sfx_prefix = $use_sfx_prefix|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_ShutdownSound() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_GetSfxLumpNum($sfxinfo) {
 $sfxinfo = $sfxinfo|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _I_UpdateSound() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_UpdateSoundParams($channel,$vol,$sep) {
 $channel = $channel|0;
 $vol = $vol|0;
 $sep = $sep|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_StartSound($sfxinfo,$channel,$vol,$sep) {
 $sfxinfo = $sfxinfo|0;
 $channel = $channel|0;
 $vol = $vol|0;
 $sep = $sep|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _I_StopSound($channel) {
 $channel = $channel|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_SoundIsPlaying($channel) {
 $channel = $channel|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _I_PrecacheSounds($sounds,$num_sounds) {
 $sounds = $sounds|0;
 $num_sounds = $num_sounds|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_InitMusic() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_ShutdownMusic() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_SetMusicVolume($volume) {
 $volume = $volume|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_PauseSong() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_ResumeSong() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_RegisterSong($data,$len) {
 $data = $data|0;
 $len = $len|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function _I_UnRegisterSong($handle) {
 $handle = $handle|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_PlaySong($handle,$looping) {
 $handle = $handle|0;
 $looping = $looping|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_StopSong() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_BindSoundVariables() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _M_BindVariable(148681,128668);
 _M_BindVariable(148697,128672);
 _M_BindVariable(148711,397464);
 _M_BindVariable(148722,397468);
 _M_BindVariable(148732,397472);
 _M_BindVariable(148742,397476);
 _M_BindVariable(147355,128660);
 _M_BindVariable(147375,128664);
 _M_BindVariable(147326,128652);
 _M_BindVariable(147341,128656);
 return;
}
function _I_AtExit($func,$run_on_error) {
 $func = $func|0;
 $run_on_error = $run_on_error|0;
 var $0 = 0, $call = 0, $next = 0, $run_on_error3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_malloc(12)|0);
 HEAP32[$call>>2] = $func;
 $run_on_error3 = ((($call)) + 4|0);
 HEAP32[$run_on_error3>>2] = $run_on_error;
 $0 = HEAP32[99370]|0;
 $next = ((($call)) + 8|0);
 HEAP32[$next>>2] = $0;
 HEAP32[99370] = $call;
 return;
}
function _I_Tactile($on,$off,$total) {
 $on = $on|0;
 $off = $off|0;
 $total = $total|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_ZoneBase($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $add = 0, $arrayidx = 0, $call = 0, $call$i = 0, $call1 = 0, $cmp = 0, $cmp1$i = 0, $cmp3$i = 0, $default_ram$0 = 0, $default_ram$addr$010$i = 0, $mul2$i = 0, $spec$select$i = 0, $sub$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $call = (_M_CheckParmWithArgs(146587,1)|0);
 $cmp = ($call|0)>(0);
 if ($cmp) {
  $add = (($call) + 1)|0;
  $0 = HEAP32[99374]|0;
  $arrayidx = (($0) + ($add<<2)|0);
  $1 = HEAP32[$arrayidx>>2]|0;
  $call1 = (_atoi($1)|0);
  $default_ram$0 = $call1;
 } else {
  $default_ram$0 = 6;
 }
 $default_ram$addr$010$i = $default_ram$0;
 while(1) {
  $cmp1$i = ($default_ram$addr$010$i|0)<($default_ram$0|0);
  if ($cmp1$i) {
   label = 5;
   break;
  }
  $mul2$i = $default_ram$addr$010$i << 20;
  HEAP32[$size>>2] = $mul2$i;
  $call$i = (_malloc($mul2$i)|0);
  $cmp3$i = ($call$i|0)==(0|0);
  $sub$i = $cmp3$i << 31 >> 31;
  $spec$select$i = (($default_ram$addr$010$i) + ($sub$i))|0;
  if ($cmp3$i) {
   $default_ram$addr$010$i = $spec$select$i;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 5) {
  HEAP32[$vararg_buffer>>2] = $default_ram$addr$010$i;
  _I_Error(146591,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 7) {
  HEAP32[$vararg_buffer1>>2] = $call$i;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $mul2$i;
  (_printf(146633,$vararg_buffer1)|0);
  STACKTOP = sp;return ($call$i|0);
 }
 return (0)|0;
}
function _I_Error($error,$varargs) {
 $error = $error|0;
 $varargs = $varargs|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$i$i = 0, $add3$i = 0, $argptr = 0, $call$i$i = 0, $call$i1$i = 0, $call1$i$i = 0, $call1$pn$lcssa$i$i = 0, $call1$pn19$i$i = 0, $call2$i = 0, $call20 = 0, $call4$i = 0;
 var $cmp = 0, $cmp$i$i = 0, $cmp$i3$i = 0, $cmp18$i$i = 0, $cmp5$i$i = 0, $cmp6 = 0, $conv$i2$i = 0, $entry1$0 = 0, $entry1$05 = 0, $entry1$07 = 0, $incdec$ptr10$i$i = 0, $incdec$ptr7$i$i = 0, $incdec$ptr9$i$i = 0, $memchr$i$i = 0, $msgbuf = 0, $mul$i$i = 0, $next = 0, $r$0$i$i = 0, $r$0$lcssa$i$i = 0, $r$017$i$i = 0;
 var $r$021$i$i = 0, $r$1$i$i = 0, $run_on_error = 0, $s$020$i$i = 0, $tobool = 0, $tobool17 = 0, $tobool21 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $vararg_buffer = sp + 528|0;
 $msgbuf = sp + 16|0;
 $argptr = sp;
 $0 = HEAP32[99371]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  HEAP32[99371] = 1;
  $$pre = HEAP32[32441]|0;
  $2 = $$pre;
 } else {
  $1 = HEAP32[32441]|0;
  (_fwrite(146673,45,1,$1)|0);
  $2 = $1;
 }
 HEAP32[$argptr>>2] = $varargs;
 (_vfprintf($2,$error,$argptr)|0);
 (_fwrite(146719,2,1,$2)|0);
 (_fflush($2)|0);
 HEAP32[$argptr>>2] = $varargs;
 _memset(($msgbuf|0),0,512)|0;
 (_M_vsnprintf($msgbuf,512,$error,$argptr)|0);
 $entry1$05 = HEAP32[99370]|0;
 $cmp6 = ($entry1$05|0)==(0|0);
 if (!($cmp6)) {
  $entry1$07 = $entry1$05;
  while(1) {
   $run_on_error = ((($entry1$07)) + 4|0);
   $3 = HEAP32[$run_on_error>>2]|0;
   $tobool17 = ($3|0)==(0);
   if (!($tobool17)) {
    $4 = HEAP32[$entry1$07>>2]|0;
    FUNCTION_TABLE_v[$4 & 255]();
   }
   $next = ((($entry1$07)) + 8|0);
   $entry1$0 = HEAP32[$next>>2]|0;
   $cmp = ($entry1$0|0)==(0|0);
   if ($cmp) {
    break;
   } else {
    $entry1$07 = $entry1$0;
   }
  }
 }
 $call20 = (_M_ParmExists(146722)|0);
 $tobool21 = ($call20|0)==(0);
 if ($tobool21) {
  $call$i$i = (_system((146729|0))|0);
  $cmp$i$i = ($call$i$i|0)==(0);
  if ($cmp$i$i) {
   $call$i1$i = (_strlen($msgbuf)|0);
   $mul$i$i = $call$i1$i << 1;
   $add$i$i = (($mul$i$i) + 3)|0;
   $call1$i$i = (_malloc($add$i$i)|0);
   HEAP8[$call1$i$i>>0] = 34;
   $r$017$i$i = ((($call1$i$i)) + 1|0);
   $5 = HEAP8[$msgbuf>>0]|0;
   $cmp18$i$i = ($5<<24>>24)==(0);
   if ($cmp18$i$i) {
    $call1$pn$lcssa$i$i = $call1$i$i;$r$0$lcssa$i$i = $r$017$i$i;
   } else {
    $6 = $5;$call1$pn19$i$i = $call1$i$i;$r$021$i$i = $r$017$i$i;$s$020$i$i = $msgbuf;
    while(1) {
     $conv$i2$i = $6 << 24 >> 24;
     $memchr$i$i = (_memchr(146768,$conv$i2$i,5)|0);
     $cmp5$i$i = ($memchr$i$i|0)==(0|0);
     if ($cmp5$i$i) {
      $r$1$i$i = $r$021$i$i;
     } else {
      HEAP8[$r$021$i$i>>0] = 92;
      $incdec$ptr7$i$i = ((($call1$pn19$i$i)) + 2|0);
      $r$1$i$i = $incdec$ptr7$i$i;
     }
     HEAP8[$r$1$i$i>>0] = $6;
     $incdec$ptr9$i$i = ((($s$020$i$i)) + 1|0);
     $r$0$i$i = ((($r$1$i$i)) + 1|0);
     $7 = HEAP8[$incdec$ptr9$i$i>>0]|0;
     $cmp$i3$i = ($7<<24>>24)==(0);
     if ($cmp$i3$i) {
      $call1$pn$lcssa$i$i = $r$1$i$i;$r$0$lcssa$i$i = $r$0$i$i;
      break;
     } else {
      $6 = $7;$call1$pn19$i$i = $r$1$i$i;$r$021$i$i = $r$0$i$i;$s$020$i$i = $incdec$ptr9$i$i;
     }
    }
   }
   HEAP8[$r$0$lcssa$i$i>>0] = 34;
   $incdec$ptr10$i$i = ((($call1$pn$lcssa$i$i)) + 2|0);
   HEAP8[$incdec$ptr10$i$i>>0] = 0;
   $call2$i = (_strlen($call1$i$i)|0);
   $add3$i = (($call2$i) + 34)|0;
   $call4$i = (_malloc($add3$i)|0);
   HEAP32[$vararg_buffer>>2] = 146794;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $call1$i$i;
   (_M_snprintf($call4$i,$add3$i,146773,$vararg_buffer)|0);
   (_system(($call4$i|0))|0);
   _free($call4$i);
   _free($call1$i$i);
  }
 }
 while(1) {
 }
}
function _I_PrintBanner($msg) {
 $msg = $msg|0;
 var $call = 0, $cmp5 = 0, $div = 0, $exitcond = 0, $i$06 = 0, $inc = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($msg)|0);
 $div = $call >>> 1;
 $sub = (35 - ($div))|0;
 $cmp5 = ($sub|0)>(0);
 if (!($cmp5)) {
  (_puts($msg)|0);
  return;
 }
 $i$06 = 0;
 while(1) {
  (_putchar(32)|0);
  $inc = (($i$06) + 1)|0;
  $exitcond = ($inc|0)==($sub|0);
  if ($exitcond) {
   break;
  } else {
   $i$06 = $inc;
  }
 }
 (_puts($msg)|0);
 return;
}
function _I_PrintDivider() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(61)|0);
 (_putchar(10)|0);
 return;
}
function _I_PrintStartupBanner($gamedescription) {
 $gamedescription = $gamedescription|0;
 var $call$i = 0, $cmp5$i = 0, $div$i = 0, $exitcond$i = 0, $i$06$i = 0, $inc$i = 0, $sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _I_PrintDivider();
 $call$i = (_strlen($gamedescription)|0);
 $div$i = $call$i >>> 1;
 $sub$i = (35 - ($div$i))|0;
 $cmp5$i = ($sub$i|0)>(0);
 if ($cmp5$i) {
  $i$06$i = 0;
  while(1) {
   (_putchar(32)|0);
   $inc$i = (($i$06$i) + 1)|0;
   $exitcond$i = ($inc$i|0)==($sub$i|0);
   if ($exitcond$i) {
    break;
   } else {
    $i$06$i = $inc$i;
   }
  }
 }
 (_puts($gamedescription)|0);
 _I_PrintDivider();
 (_puts(146810)|0);
 _I_PrintDivider();
 return;
}
function _I_ConsoleStdout() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _I_Quit() {
 var $0 = 0, $cmp = 0, $cmp5 = 0, $entry1$0 = 0, $entry1$04 = 0, $entry1$06 = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $entry1$04 = HEAP32[99370]|0;
 $cmp5 = ($entry1$04|0)==(0|0);
 if ($cmp5) {
  return;
 }
 $entry1$06 = $entry1$04;
 while(1) {
  $0 = HEAP32[$entry1$06>>2]|0;
  FUNCTION_TABLE_v[$0 & 255]();
  $next = ((($entry1$06)) + 8|0);
  $entry1$0 = HEAP32[$next>>2]|0;
  $cmp = ($entry1$0|0)==(0|0);
  if ($cmp) {
   break;
  } else {
   $entry1$06 = $entry1$0;
  }
 }
 return;
}
function _I_GetMemoryValue($offset,$value,$size) {
 $offset = $offset|0;
 $value = $value|0;
 $size = $size|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add38 = 0, $add45 = 0;
 var $add50 = 0, $add55 = 0, $arrayidx = 0, $arrayidx18$1 = 0, $arrayidx18$2 = 0, $arrayidx18$3 = 0, $arrayidx18$4 = 0, $arrayidx34 = 0, $arrayidx36 = 0, $arrayidx39 = 0, $arrayidx43 = 0, $arrayidx46 = 0, $arrayidx51 = 0, $arrayidx56 = 0, $call = 0, $call12 = 0, $call2 = 0, $call7 = 0, $cmp = 0, $cmp17 = 0;
 var $cmp17$1 = 0, $cmp17$2 = 0, $cmp17$3 = 0, $cmp17$4 = 0, $cmp20 = 0, $cmp20$1 = 0, $cmp20$2 = 0, $cmp20$3 = 0, $cmp20$4 = 0, $conv26 = 0, $conv26$1 = 0, $conv26$2 = 0, $conv26$3 = 0, $conv26$4 = 0, $conv37 = 0, $conv40 = 0, $conv41 = 0, $conv44 = 0, $conv47 = 0, $conv52 = 0;
 var $conv57 = 0, $inc$1 = 0, $inc$2 = 0, $inc$3 = 0, $inc$4 = 0, $or = 0, $or49 = 0, $or54 = 0, $or59 = 0, $retval$0 = 0, $shl = 0, $shl48 = 0, $shl53 = 0, $shl58 = 0, $tobool = 0, $tobool13 = 0, $tobool3 = 0, $tobool8 = 0, $val = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $val = sp;
 $0 = HEAP32[32169]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  HEAP32[32169] = 0;
  $call = (_M_CheckParmWithArgs(147088,1)|0);
  $cmp = ($call|0)>(0);
  if ($cmp) {
   $1 = HEAP32[99374]|0;
   $add = (($call) + 1)|0;
   $arrayidx = (($1) + ($add<<2)|0);
   $2 = HEAP32[$arrayidx>>2]|0;
   $call2 = (_strcasecmp($2,147096)|0);
   $tobool3 = ($call2|0)==(0);
   if ($tobool3) {
    HEAP32[32170] = 147103;
   }
   $call7 = (_strcasecmp($2,147113)|0);
   $tobool8 = ($call7|0)==(0);
   if ($tobool8) {
    $$sink = 147126;
   } else {
    $call12 = (_strcasecmp($2,147119)|0);
    $tobool13 = ($call12|0)==(0);
    if ($tobool13) {
     $$sink = 147136;
    } else {
     $3 = HEAP32[99373]|0;
     $cmp17 = ($add|0)<($3|0);
     if ($cmp17) {
      $4 = HEAP8[$2>>0]|0;
      $cmp20 = ($4<<24>>24)==(45);
      if ($cmp20) {
       $$sink = 400126;
      } else {
       (_M_StrToInt($2,$val)|0);
       $5 = HEAP32[$val>>2]|0;
       $conv26 = $5&255;
       HEAP8[400126] = $conv26;
       $inc$1 = (($call) + 2)|0;
       $6 = HEAP32[99373]|0;
       $cmp17$1 = ($inc$1|0)<($6|0);
       if ($cmp17$1) {
        $17 = HEAP32[99374]|0;
        $arrayidx18$1 = (($17) + ($inc$1<<2)|0);
        $18 = HEAP32[$arrayidx18$1>>2]|0;
        $19 = HEAP8[$18>>0]|0;
        $cmp20$1 = ($19<<24>>24)==(45);
        if ($cmp20$1) {
         $$sink = 400126;
        } else {
         (_M_StrToInt($18,$val)|0);
         $20 = HEAP32[$val>>2]|0;
         $conv26$1 = $20&255;
         HEAP8[(400128)>>0] = $conv26$1;
         $inc$2 = (($call) + 3)|0;
         $21 = HEAP32[99373]|0;
         $cmp17$2 = ($inc$2|0)<($21|0);
         if ($cmp17$2) {
          $22 = HEAP32[99374]|0;
          $arrayidx18$2 = (($22) + ($inc$2<<2)|0);
          $23 = HEAP32[$arrayidx18$2>>2]|0;
          $24 = HEAP8[$23>>0]|0;
          $cmp20$2 = ($24<<24>>24)==(45);
          if ($cmp20$2) {
           $$sink = 400126;
          } else {
           (_M_StrToInt($23,$val)|0);
           $25 = HEAP32[$val>>2]|0;
           $conv26$2 = $25&255;
           HEAP8[(400130)>>0] = $conv26$2;
           $inc$3 = (($call) + 4)|0;
           $26 = HEAP32[99373]|0;
           $cmp17$3 = ($inc$3|0)<($26|0);
           if ($cmp17$3) {
            $27 = HEAP32[99374]|0;
            $arrayidx18$3 = (($27) + ($inc$3<<2)|0);
            $28 = HEAP32[$arrayidx18$3>>2]|0;
            $29 = HEAP8[$28>>0]|0;
            $cmp20$3 = ($29<<24>>24)==(45);
            if ($cmp20$3) {
             $$sink = 400126;
            } else {
             (_M_StrToInt($28,$val)|0);
             $30 = HEAP32[$val>>2]|0;
             $conv26$3 = $30&255;
             HEAP8[(400132)>>0] = $conv26$3;
             $inc$4 = (($call) + 5)|0;
             $31 = HEAP32[99373]|0;
             $cmp17$4 = ($inc$4|0)<($31|0);
             if ($cmp17$4) {
              $32 = HEAP32[99374]|0;
              $arrayidx18$4 = (($32) + ($inc$4<<2)|0);
              $33 = HEAP32[$arrayidx18$4>>2]|0;
              $34 = HEAP8[$33>>0]|0;
              $cmp20$4 = ($34<<24>>24)==(45);
              if ($cmp20$4) {
               $$sink = 400126;
              } else {
               (_M_StrToInt($33,$val)|0);
               $35 = HEAP32[$val>>2]|0;
               $conv26$4 = $35&255;
               HEAP8[(400134)>>0] = $conv26$4;
               $$sink = 400126;
              }
             } else {
              $$sink = 400126;
             }
            }
           } else {
            $$sink = 400126;
           }
          }
         } else {
          $$sink = 400126;
         }
        }
       } else {
        $$sink = 400126;
       }
      }
     } else {
      $$sink = 400126;
     }
    }
   }
   HEAP32[32170] = $$sink;
  }
 }
 switch ($size|0) {
 case 1:  {
  $7 = HEAP32[32170]|0;
  $arrayidx34 = (($7) + ($offset)|0);
  $8 = HEAP8[$arrayidx34>>0]|0;
  HEAP8[$value>>0] = $8;
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
  break;
 }
 case 2:  {
  $9 = HEAP32[32170]|0;
  $arrayidx36 = (($9) + ($offset)|0);
  $10 = HEAP8[$arrayidx36>>0]|0;
  $conv37 = $10&255;
  $add38 = (($offset) + 1)|0;
  $arrayidx39 = (($9) + ($add38)|0);
  $11 = HEAP8[$arrayidx39>>0]|0;
  $conv40 = $11&255;
  $shl = $conv40 << 8;
  $or = $shl | $conv37;
  $conv41 = $or&65535;
  HEAP16[$value>>1] = $conv41;
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
  break;
 }
 case 4:  {
  $12 = HEAP32[32170]|0;
  $arrayidx43 = (($12) + ($offset)|0);
  $13 = HEAP8[$arrayidx43>>0]|0;
  $conv44 = $13&255;
  $add45 = (($offset) + 1)|0;
  $arrayidx46 = (($12) + ($add45)|0);
  $14 = HEAP8[$arrayidx46>>0]|0;
  $conv47 = $14&255;
  $shl48 = $conv47 << 8;
  $or49 = $shl48 | $conv44;
  $add50 = (($offset) + 2)|0;
  $arrayidx51 = (($12) + ($add50)|0);
  $15 = HEAP8[$arrayidx51>>0]|0;
  $conv52 = $15&255;
  $shl53 = $conv52 << 16;
  $or54 = $or49 | $shl53;
  $add55 = (($offset) + 3)|0;
  $arrayidx56 = (($12) + ($add55)|0);
  $16 = HEAP8[$arrayidx56>>0]|0;
  $conv57 = $16&255;
  $shl58 = $conv57 << 24;
  $or59 = $or54 | $shl58;
  HEAP32[$value>>2] = $or59;
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
  break;
 }
 default: {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 }
 return (0)|0;
}
function _I_GetTime() {
 var $0 = 0, $1 = 0, $call$i = 0, $cmp = 0, $div = 0, $mul = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call$i = (_DG_GetTicksMs()|0);
 $0 = HEAP32[99372]|0;
 $cmp = ($0|0)==(0);
 if ($cmp) {
  HEAP32[99372] = $call$i;
  $1 = $call$i;
 } else {
  $1 = $0;
 }
 $sub = (($call$i) - ($1))|0;
 $mul = ($sub*35)|0;
 $div = (($mul>>>0) / 1000)&-1;
 return ($div|0);
}
function _I_GetTimeMS() {
 var $0 = 0, $1 = 0, $call$i = 0, $cmp = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call$i = (_DG_GetTicksMs()|0);
 $0 = HEAP32[99372]|0;
 $cmp = ($0|0)==(0);
 if ($cmp) {
  HEAP32[99372] = $call$i;
  $1 = $call$i;
 } else {
  $1 = $0;
 }
 $sub = (($call$i) - ($1))|0;
 return ($sub|0);
}
function _I_Sleep($ms) {
 $ms = $ms|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_WaitVBL($count) {
 $count = $count|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_InitTimer() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _M_CheckParmWithArgs($check,$num_args) {
 $check = $check|0;
 $num_args = $num_args|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp5 = 0, $i$06 = 0, $inc = 0, $retval$0 = 0, $sub4 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99373]|0;
 $sub4 = (($0) - ($num_args))|0;
 $cmp5 = ($sub4|0)>(1);
 if (!($cmp5)) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $1 = HEAP32[99374]|0;
 $i$06 = 1;
 while(1) {
  $arrayidx = (($1) + ($i$06<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $call = (_strcasecmp($check,$2)|0);
  $tobool = ($call|0)==(0);
  if ($tobool) {
   $retval$0 = $i$06;
   label = 5;
   break;
  }
  $inc = (($i$06) + 1)|0;
  $cmp = ($inc|0)<($sub4|0);
  if ($cmp) {
   $i$06 = $inc;
  } else {
   $retval$0 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($retval$0|0);
 }
 return (0)|0;
}
function _M_ParmExists($check) {
 $check = $check|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx$i$i = 0, $call$i$i = 0, $cmp$i$i = 0, $cmp5$i$i = 0, $i$06$i$i = 0, $inc$i$i = 0, $retval$0$i$i = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99373]|0;
 $cmp5$i$i = ($0|0)>(1);
 if (!($cmp5$i$i)) {
  $retval$0$i$i = 0;
  return ($retval$0$i$i|0);
 }
 $1 = HEAP32[99374]|0;
 $i$06$i$i = 1;
 while(1) {
  $arrayidx$i$i = (($1) + ($i$06$i$i<<2)|0);
  $2 = HEAP32[$arrayidx$i$i>>2]|0;
  $call$i$i = (_strcasecmp($check,$2)|0);
  $tobool$i$i = ($call$i$i|0)==(0);
  if ($tobool$i$i) {
   $retval$0$i$i = 1;
   label = 5;
   break;
  }
  $inc$i$i = (($i$06$i$i) + 1)|0;
  $cmp$i$i = ($inc$i$i|0)<($0|0);
  if ($cmp$i$i) {
   $i$06$i$i = $inc$i$i;
  } else {
   $retval$0$i$i = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($retval$0$i$i|0);
 }
 return (0)|0;
}
function _M_CheckParm($check) {
 $check = $check|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx$i = 0, $call$i = 0, $cmp$i = 0, $cmp5$i = 0, $i$06$i = 0, $inc$i = 0, $retval$0$i = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99373]|0;
 $cmp5$i = ($0|0)>(1);
 if (!($cmp5$i)) {
  $retval$0$i = 0;
  return ($retval$0$i|0);
 }
 $1 = HEAP32[99374]|0;
 $i$06$i = 1;
 while(1) {
  $arrayidx$i = (($1) + ($i$06$i<<2)|0);
  $2 = HEAP32[$arrayidx$i>>2]|0;
  $call$i = (_strcasecmp($check,$2)|0);
  $tobool$i = ($call$i|0)==(0);
  if ($tobool$i) {
   $retval$0$i = $i$06$i;
   label = 5;
   break;
  }
  $inc$i = (($i$06$i) + 1)|0;
  $cmp$i = ($inc$i|0)<($0|0);
  if ($cmp$i) {
   $i$06$i = $inc$i;
  } else {
   $retval$0$i = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($retval$0$i|0);
 }
 return (0)|0;
}
function _M_FindResponseFile() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _M_ClearBox($box) {
 $box = $box|0;
 var $arrayidx = 0, $arrayidx2 = 0, $arrayidx3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arrayidx = ((($box)) + 12|0);
 HEAP32[$arrayidx>>2] = -2147483648;
 HEAP32[$box>>2] = -2147483648;
 $arrayidx2 = ((($box)) + 8|0);
 HEAP32[$arrayidx2>>2] = 2147483647;
 $arrayidx3 = ((($box)) + 4|0);
 HEAP32[$arrayidx3>>2] = 2147483647;
 return;
}
function _M_AddToBox($box,$x,$y) {
 $box = $box|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx2$sink = 0, $arrayidx7 = 0, $box$sink = 0, $cmp = 0, $cmp13 = 0, $cmp3 = 0, $cmp8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arrayidx = ((($box)) + 8|0);
 $0 = HEAP32[$arrayidx>>2]|0;
 $cmp = ($0|0)>($x|0);
 if ($cmp) {
  $arrayidx2$sink = $arrayidx;
  label = 3;
 } else {
  $arrayidx2 = ((($box)) + 12|0);
  $1 = HEAP32[$arrayidx2>>2]|0;
  $cmp3 = ($1|0)<($x|0);
  if ($cmp3) {
   $arrayidx2$sink = $arrayidx2;
   label = 3;
  }
 }
 if ((label|0) == 3) {
  HEAP32[$arrayidx2$sink>>2] = $x;
 }
 $arrayidx7 = ((($box)) + 4|0);
 $2 = HEAP32[$arrayidx7>>2]|0;
 $cmp8 = ($2|0)>($y|0);
 if ($cmp8) {
  $box$sink = $arrayidx7;
 } else {
  $3 = HEAP32[$box>>2]|0;
  $cmp13 = ($3|0)<($y|0);
  if ($cmp13) {
   $box$sink = $box;
  } else {
   return;
  }
 }
 HEAP32[$box$sink>>2] = $y;
 return;
}
function _cht_CheckCheat($cht,$key) {
 $cht = $cht|0;
 $key = $key|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arrayidx = 0, $arrayidx23 = 0, $call = 0, $call31 = 0, $call4 = 0, $chars_read = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp19 = 0;
 var $cmp32 = 0, $cmp37 = 0, $cmp5 = 0, $inc = 0, $inc25 = 0, $param_chars_read = 0, $param_chars_read17 = 0, $param_chars_read35 = 0, $parameter_chars = 0, $retval$0 = 0, $sequence_len = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $parameter_chars = ((($cht)) + 32|0);
 $0 = HEAP32[$parameter_chars>>2]|0;
 $cmp = ($0|0)>(0);
 if ($cmp) {
  $call = (_strlen($cht)|0);
  $sequence_len = ((($cht)) + 28|0);
  $1 = HEAP32[$sequence_len>>2]|0;
  $cmp1 = ($call>>>0)<($1>>>0);
  if ($cmp1) {
   $retval$0 = 0;
   return ($retval$0|0);
  }
 }
 $chars_read = ((($cht)) + 36|0);
 $2 = HEAP32[$chars_read>>2]|0;
 $call4 = (_strlen($cht)|0);
 $cmp5 = ($2>>>0)<($call4>>>0);
 if ($cmp5) {
  $arrayidx = (($cht) + ($2)|0);
  $3 = HEAP8[$arrayidx>>0]|0;
  $cmp10 = ($3<<24>>24)==($key<<24>>24);
  $inc = (($2) + 1)|0;
  $storemerge = $cmp10 ? $inc : 0;
  HEAP32[$chars_read>>2] = $storemerge;
  $param_chars_read = ((($cht)) + 40|0);
  HEAP32[$param_chars_read>>2] = 0;
  $6 = $storemerge;$8 = 0;
 } else {
  $param_chars_read17 = ((($cht)) + 40|0);
  $4 = HEAP32[$param_chars_read17>>2]|0;
  $cmp19 = ($4|0)<($0|0);
  if ($cmp19) {
   $arrayidx23 = (((($cht)) + 44|0) + ($4)|0);
   HEAP8[$arrayidx23>>0] = $key;
   $5 = HEAP32[$param_chars_read17>>2]|0;
   $inc25 = (($5) + 1)|0;
   HEAP32[$param_chars_read17>>2] = $inc25;
   $$pre = HEAP32[$chars_read>>2]|0;
   $6 = $$pre;$8 = $inc25;
  } else {
   $6 = $2;$8 = $4;
  }
 }
 $call31 = (_strlen($cht)|0);
 $cmp32 = ($6>>>0)<($call31>>>0);
 if ($cmp32) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $7 = HEAP32[$parameter_chars>>2]|0;
 $cmp37 = ($8|0)<($7|0);
 if ($cmp37) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $param_chars_read35 = ((($cht)) + 40|0);
 HEAP32[$param_chars_read35>>2] = 0;
 HEAP32[$chars_read>>2] = 0;
 $retval$0 = 1;
 return ($retval$0|0);
}
function _cht_GetParam($cht,$buffer) {
 $cht = $cht|0;
 $buffer = $buffer|0;
 var $0 = 0, $arraydecay = 0, $parameter_chars = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay = ((($cht)) + 44|0);
 $parameter_chars = ((($cht)) + 32|0);
 $0 = HEAP32[$parameter_chars>>2]|0;
 _memcpy(($buffer|0),($arraydecay|0),($0|0))|0;
 return;
}
function _M_SetConfigFilenames($main_config,$extra_config) {
 $main_config = $main_config|0;
 $extra_config = $extra_config|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99376] = $main_config;
 HEAP32[99377] = $extra_config;
 return;
}
function _M_SaveDefaults() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _M_LoadDefaults() {
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $add7 = 0, $arrayidx = 0, $arrayidx8 = 0, $call = 0, $call11 = 0, $call2 = 0, $call4 = 0, $tobool = 0, $tobool5 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr14 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $call = (_M_CheckParmWithArgs(148917,1)|0);
 $tobool = ($call|0)==(0);
 if ($tobool) {
  $2 = HEAP32[99375]|0;
  $3 = HEAP32[99376]|0;
  HEAP32[$vararg_buffer1>>2] = $3;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 0;
  $call2 = (_M_StringJoin($2,$vararg_buffer1)|0);
  HEAP32[100015] = $call2;
  $4 = $call2;
 } else {
  $0 = HEAP32[99374]|0;
  $add = (($call) + 1)|0;
  $arrayidx = (($0) + ($add<<2)|0);
  $1 = HEAP32[$arrayidx>>2]|0;
  HEAP32[100015] = $1;
  HEAP32[$vararg_buffer>>2] = $1;
  (_printf(148925,$vararg_buffer)|0);
  $$pre = HEAP32[100015]|0;
  $4 = $$pre;
 }
 HEAP32[$vararg_buffer5>>2] = $4;
 (_printf(148944,$vararg_buffer5)|0);
 $call4 = (_M_CheckParmWithArgs(148965,1)|0);
 $tobool5 = ($call4|0)==(0);
 if ($tobool5) {
  $7 = HEAP32[99375]|0;
  $8 = HEAP32[99377]|0;
  HEAP32[$vararg_buffer11>>2] = $8;
  $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
  HEAP32[$vararg_ptr14>>2] = 0;
  $call11 = (_M_StringJoin($7,$vararg_buffer11)|0);
  HEAP32[100016] = $call11;
  STACKTOP = sp;return;
 } else {
  $5 = HEAP32[99374]|0;
  $add7 = (($call4) + 1)|0;
  $arrayidx8 = (($5) + ($add7<<2)|0);
  $6 = HEAP32[$arrayidx8>>2]|0;
  HEAP32[100016] = $6;
  HEAP32[$vararg_buffer8>>2] = $6;
  (_printf(148978,$vararg_buffer8)|0);
  STACKTOP = sp;return;
 }
}
function _M_BindVariable($name,$location) {
 $name = $name|0;
 $location = $location|0;
 var $0 = 0, $1 = 0, $arrayidx3$i$i = 0, $arrayidx3$i15$i = 0, $bound = 0, $call$i$i = 0, $call$i12$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i18$i = 0, $cmp2$i = 0, $cmp2$i$i = 0, $cmp2$i8$i = 0, $i$03$i$i = 0, $i$03$i10$i = 0, $inc$i$i = 0, $inc$i17$i = 0, $location1 = 0, $name1$i$i = 0, $name1$i11$i = 0;
 var $result$024$i = 0, $tobool$i$i = 0, $tobool$i13$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $cmp2$i$i = (76)>(0);
 L1: do {
  if ($cmp2$i$i) {
   $i$03$i$i = 0;
   while(1) {
    $name1$i$i = (46096 + (($i$03$i$i*24)|0)|0);
    $0 = HEAP32[$name1$i$i>>2]|0;
    $call$i$i = (_strcmp($name,$0)|0);
    $tobool$i$i = ($call$i$i|0)==(0);
    if ($tobool$i$i) {
     break;
    }
    $inc$i$i = (($i$03$i$i) + 1)|0;
    $cmp$i$i = ($inc$i$i|0)<(76);
    if ($cmp$i$i) {
     $i$03$i$i = $inc$i$i;
    } else {
     break L1;
    }
   }
   $arrayidx3$i$i = (46096 + (($i$03$i$i*24)|0)|0);
   $cmp$i = ($arrayidx3$i$i|0)==(0|0);
   if (!($cmp$i)) {
    $result$024$i = $arrayidx3$i$i;
    $location1 = ((($result$024$i)) + 4|0);
    HEAP32[$location1>>2] = $location;
    $bound = ((($result$024$i)) + 20|0);
    HEAP32[$bound>>2] = 1;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $cmp2$i8$i = (119)>(0);
 if (!($cmp2$i8$i)) {
  HEAP32[$vararg_buffer>>2] = $name;
  _I_Error(149016,$vararg_buffer);
  // unreachable;
 }
 $i$03$i10$i = 0;
 while(1) {
  $name1$i11$i = (43232 + (($i$03$i10$i*24)|0)|0);
  $1 = HEAP32[$name1$i11$i>>2]|0;
  $call$i12$i = (_strcmp($name,$1)|0);
  $tobool$i13$i = ($call$i12$i|0)==(0);
  if ($tobool$i13$i) {
   break;
  }
  $inc$i17$i = (($i$03$i10$i) + 1)|0;
  $cmp$i18$i = ($inc$i17$i|0)<(119);
  if ($cmp$i18$i) {
   $i$03$i10$i = $inc$i17$i;
  } else {
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  HEAP32[$vararg_buffer>>2] = $name;
  _I_Error(149016,$vararg_buffer);
  // unreachable;
 }
 $arrayidx3$i15$i = (43232 + (($i$03$i10$i*24)|0)|0);
 $cmp2$i = ($arrayidx3$i15$i|0)==(0|0);
 if ($cmp2$i) {
  HEAP32[$vararg_buffer>>2] = $name;
  _I_Error(149016,$vararg_buffer);
  // unreachable;
 } else {
  $result$024$i = $arrayidx3$i15$i;
  $location1 = ((($result$024$i)) + 4|0);
  HEAP32[$location1>>2] = $location;
  $bound = ((($result$024$i)) + 20|0);
  HEAP32[$bound>>2] = 1;
  STACKTOP = sp;return;
 }
}
function _M_SetConfigDir($dir) {
 $dir = $dir|0;
 var $$pre = 0, $0 = 0, $arrayidx1$i = 0, $call$i = 0, $cmp = 0, $cmp2 = 0, $storemerge = 0, $strcmpload = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $cmp = ($dir|0)==(0|0);
 if ($cmp) {
  $call$i = (_malloc(2)|0);
  HEAP8[$call$i>>0] = 46;
  $arrayidx1$i = ((($call$i)) + 1|0);
  HEAP8[$arrayidx1$i>>0] = 0;
  $storemerge = $call$i;
 } else {
  $storemerge = $dir;
 }
 HEAP32[99375] = $storemerge;
 $strcmpload = HEAP8[$storemerge>>0]|0;
 $cmp2 = ($strcmpload<<24>>24)==(0);
 if ($cmp2) {
  $0 = $storemerge;
  _M_MakeDirectory($0);
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer>>2] = $storemerge;
 (_printf(149053,$vararg_buffer)|0);
 $$pre = HEAP32[99375]|0;
 $0 = $$pre;
 _M_MakeDirectory($0);
 STACKTOP = sp;return;
}
function _M_GetSaveGameDir($iwadname) {
 $iwadname = $iwadname|0;
 var $0 = 0, $call1 = 0, $call2 = 0, $savegamedir$0 = 0, $strcmpload = 0, $tobool = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[99375]|0;
 $strcmpload = HEAP8[$0>>0]|0;
 $tobool = ($strcmpload<<24>>24)==(0);
 if ($tobool) {
  $call1 = (___strdup(400136)|0);
  $savegamedir$0 = $call1;
  STACKTOP = sp;return ($savegamedir$0|0);
 } else {
  HEAP32[$vararg_buffer>>2] = 151274;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 149091;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 0;
  $call2 = (_M_StringJoin($0,$vararg_buffer)|0);
  _M_MakeDirectory($call2);
  HEAP32[$vararg_buffer3>>2] = $call2;
  (_printf(149102,$vararg_buffer3)|0);
  $savegamedir$0 = $call2;
  STACKTOP = sp;return ($savegamedir$0|0);
 }
 return (0)|0;
}
function _M_BindBaseControls() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _M_BindVariable(149126,128684);
 _M_BindVariable(149136,128688);
 _M_BindVariable(149145,128692);
 _M_BindVariable(149152,128696);
 _M_BindVariable(149161,128700);
 _M_BindVariable(149176,128704);
 _M_BindVariable(149192,128708);
 _M_BindVariable(149201,128712);
 _M_BindVariable(149209,128716);
 _M_BindVariable(149220,128720);
 _M_BindVariable(149230,397512);
 _M_BindVariable(149242,128724);
 _M_BindVariable(149256,128728);
 _M_BindVariable(149271,397528);
 _M_BindVariable(149281,128944);
 _M_BindVariable(149293,128948);
 _M_BindVariable(149302,128952);
 _M_BindVariable(149313,128972);
 _M_BindVariable(149332,128956);
 _M_BindVariable(149348,128960);
 _M_BindVariable(149365,128732);
 _M_BindVariable(149383,128736);
 _M_BindVariable(149402,128744);
 _M_BindVariable(149413,128740);
 _M_BindVariable(149429,128976);
 _M_BindVariable(149440,128760);
 _M_BindVariable(149450,128756);
 return;
}
function _M_BindWeaponControls() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _M_BindVariable(149470,128776);
 _M_BindVariable(149482,128780);
 _M_BindVariable(149494,128784);
 _M_BindVariable(149506,128788);
 _M_BindVariable(149518,128792);
 _M_BindVariable(149530,128796);
 _M_BindVariable(149542,128800);
 _M_BindVariable(149554,128804);
 _M_BindVariable(149566,397516);
 _M_BindVariable(149581,397520);
 _M_BindVariable(149596,128964);
 _M_BindVariable(149612,128968);
 _M_BindVariable(149628,128748);
 _M_BindVariable(149646,128752);
 return;
}
function _M_BindMapControls() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _M_BindVariable(149664,128808);
 _M_BindVariable(149678,128812);
 _M_BindVariable(149692,128816);
 _M_BindVariable(149705,128820);
 _M_BindVariable(149718,128824);
 _M_BindVariable(149733,128828);
 _M_BindVariable(149749,128832);
 _M_BindVariable(149764,128836);
 _M_BindVariable(149780,128840);
 _M_BindVariable(149795,128844);
 _M_BindVariable(149808,128848);
 _M_BindVariable(149821,128852);
 return;
}
function _M_BindMenuControls() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _M_BindVariable(149839,128856);
 _M_BindVariable(149857,128860);
 _M_BindVariable(149869,128864);
 _M_BindVariable(149883,128868);
 _M_BindVariable(149897,128872);
 _M_BindVariable(149912,128876);
 _M_BindVariable(149926,128880);
 _M_BindVariable(149943,128884);
 _M_BindVariable(149960,128888);
 _M_BindVariable(149975,128892);
 _M_BindVariable(149989,128896);
 _M_BindVariable(150003,128900);
 _M_BindVariable(150017,128904);
 _M_BindVariable(150033,128908);
 _M_BindVariable(150049,128912);
 _M_BindVariable(150064,128916);
 _M_BindVariable(150081,128920);
 _M_BindVariable(150099,128924);
 _M_BindVariable(150114,128928);
 _M_BindVariable(150128,128932);
 _M_BindVariable(150143,128936);
 _M_BindVariable(150162,128940);
 _M_BindVariable(150181,397524);
 _M_BindVariable(150201,128764);
 _M_BindVariable(150215,128768);
 return;
}
function _M_BindChatControls($num_players) {
 $num_players = $num_players|0;
 var $add = 0, $arrayidx = 0, $cmp5 = 0, $exitcond = 0, $i$06 = 0, $name = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp + 32|0;
 $name = sp;
 _M_BindVariable(150223,128772);
 $cmp5 = ($num_players|0)==(0);
 if ($cmp5) {
  STACKTOP = sp;return;
 }
 $i$06 = 0;
 while(1) {
  $add = (($i$06) + 1)|0;
  HEAP32[$vararg_buffer>>2] = $add;
  (_M_snprintf($name,32,150237,$vararg_buffer)|0);
  $arrayidx = (185472 + ($i$06<<2)|0);
  _M_BindVariable($name,$arrayidx);
  $exitcond = ($add|0)==($num_players|0);
  if ($exitcond) {
   break;
  } else {
   $i$06 = $add;
  }
 }
 STACKTOP = sp;return;
}
function _M_ApplyPlatformDefaults() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _FixedMul($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)<(0);
 $1 = $0 << 31 >> 31;
 $2 = ($b|0)<(0);
 $3 = $2 << 31 >> 31;
 $4 = (___muldi3(($b|0),($3|0),($a|0),($1|0))|0);
 $5 = (getTempRet0() | 0);
 $6 = (_bitshift64Lshr(($4|0),($5|0),16)|0);
 $7 = (getTempRet0() | 0);
 return ($6|0);
}
function _FixedDiv($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $ispos = 0, $ispos6 = 0, $neg = 0, $neg7 = 0, $retval$0 = 0, $shr = 0, $xor = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $ispos = ($a|0)>(-1);
 $neg = (0 - ($a))|0;
 $0 = $ispos ? $a : $neg;
 $shr = $0 >> 14;
 $ispos6 = ($b|0)>(-1);
 $neg7 = (0 - ($b))|0;
 $1 = $ispos6 ? $b : $neg7;
 $cmp = ($shr|0)<($1|0);
 if ($cmp) {
  $4 = ($a|0)<(0);
  $5 = $4 << 31 >> 31;
  $6 = (_bitshift64Shl(($a|0),($5|0),16)|0);
  $7 = (getTempRet0() | 0);
  $8 = ($b|0)<(0);
  $9 = $8 << 31 >> 31;
  $10 = (___divdi3(($6|0),($7|0),($b|0),($9|0))|0);
  $11 = (getTempRet0() | 0);
  $retval$0 = $10;
  return ($retval$0|0);
 } else {
  $xor = $b ^ $a;
  $2 = $xor >>> 31;
  $3 = (($2) + 2147483647)|0;
  $retval$0 = $3;
  return ($retval$0|0);
 }
 return (0)|0;
}
function _M_NewGame($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cmp = 0, $cmp2 = 0, $or$cond = 0, $or$cond1 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99094]|0;
 $tobool = ($0|0)==(0);
 $1 = HEAP32[99092]|0;
 $tobool1 = ($1|0)!=(0);
 $or$cond = $tobool | $tobool1;
 if (!($or$cond)) {
  $2 = HEAP32[99384]|0;
  HEAP32[99385] = $2;
  HEAP32[99386] = 1;
  HEAP32[99387] = 150742;
  HEAP32[99388] = 0;
  HEAP32[99389] = 0;
  HEAP32[99384] = 1;
  return;
 }
 $3 = HEAP32[32140]|0;
 $cmp = ($3|0)==(2);
 $4 = HEAP32[32141]|0;
 $cmp2 = ($4|0)==(9);
 $or$cond1 = $cmp | $cmp2;
 if ($or$cond1) {
  HEAP32[99390] = 129184;
  $5 = HEAP16[(129204)>>1]|0;
  HEAP16[200055] = $5;
  return;
 } else {
  HEAP32[99390] = 129208;
  $6 = HEAP16[(129228)>>1]|0;
  HEAP16[200055] = $6;
  return;
 }
}
function _M_Options($choice) {
 $choice = $choice|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99390] = 129120;
 $0 = HEAP16[(129140)>>1]|0;
 HEAP16[200055] = $0;
 return;
}
function _M_LoadGame($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $2 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99094]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  HEAP32[99390] = 129096;
  $2 = HEAP16[(129116)>>1]|0;
  HEAP16[200055] = $2;
  _M_ReadSaveStrings();
  return;
 } else {
  $1 = HEAP32[99384]|0;
  HEAP32[99385] = $1;
  HEAP32[99386] = 1;
  HEAP32[99387] = 150462;
  HEAP32[99388] = 0;
  HEAP32[99389] = 0;
  HEAP32[99384] = 1;
  return;
 }
}
function _M_SaveGame($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99157]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  $1 = HEAP32[99384]|0;
  HEAP32[99385] = $1;
  HEAP32[99386] = 1;
  HEAP32[99387] = 150354;
  HEAP32[99388] = 0;
  HEAP32[99389] = 0;
  HEAP32[99384] = 1;
  return;
 }
 $2 = HEAP32[99077]|0;
 $cmp = ($2|0)==(0);
 if (!($cmp)) {
  return;
 }
 HEAP32[99390] = 129072;
 $3 = HEAP16[(129092)>>1]|0;
 HEAP16[200055] = $3;
 _M_ReadSaveStrings();
 return;
}
function _M_ReadThis($choice) {
 $choice = $choice|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99390] = 129000;
 $0 = HEAP16[(129020)>>1]|0;
 HEAP16[200055] = $0;
 return;
}
function _M_QuitDOOM($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx$i = 0, $endmsg$0$i = 0, $rem$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99015]|0;
 $1 = $0 | 4;
 $2 = ($1|0)==(4);
 $endmsg$0$i = $2 ? 432 : 464;
 $3 = HEAP32[99024]|0;
 $rem$i = (($3|0) % 8)&-1;
 $arrayidx$i = (($endmsg$0$i) + ($rem$i<<2)|0);
 $4 = HEAP32[$arrayidx$i>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 (_snprintf(185504,160,150277,$vararg_buffer)|0);
 $5 = HEAP32[99384]|0;
 HEAP32[99385] = $5;
 HEAP32[99386] = 1;
 HEAP32[99387] = 185504;
 HEAP32[99388] = 128;
 HEAP32[99389] = 1;
 HEAP32[99384] = 1;
 STACKTOP = sp;return;
}
function _M_QuitResponse($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $and = 0, $arrayidx = 0, $arrayidx6 = 0, $cmp = 0, $cmp2 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32221]|0;
 $cmp = ($0|0)==($key|0);
 if (!($cmp)) {
  return;
 }
 $1 = HEAP32[99094]|0;
 $tobool = ($1|0)==(0);
 if ($tobool) {
  $2 = HEAP32[32140]|0;
  $cmp2 = ($2|0)==(2);
  $3 = HEAP32[99024]|0;
  $4 = $3 >>> 2;
  $and = $4 & 7;
  if ($cmp2) {
   $arrayidx = (48192 + ($and<<2)|0);
   $5 = HEAP32[$arrayidx>>2]|0;
   _S_StartSound(0,$5);
  } else {
   $arrayidx6 = (48224 + ($and<<2)|0);
   $6 = HEAP32[$arrayidx6>>2]|0;
   _S_StartSound(0,$6);
  }
 }
 _I_Quit();
 return;
}
function _M_DrawReadThis1() {
 var $$ = 0, $$5 = 0, $$6 = 0, $0 = 0, $1 = 0, $call = 0, $cmp = 0, $lumpname$0 = 0, $skullx$0 = 0, $skully$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[99391] = 1;
 $0 = HEAP32[32141]|0;
 switch ($0|0) {
 case 5: case 4: case 3: case 2: case 1:  {
  $1 = HEAP32[32140]|0;
  $cmp = ($1|0)==(2);
  $$ = $cmp ? 150307 : 150312;
  $$5 = $cmp ? 330 : 280;
  $$6 = $cmp ? 165 : 185;
  $lumpname$0 = $$;$skullx$0 = $$5;$skully$0 = $$6;
  break;
 }
 case 9: case 6:  {
  $lumpname$0 = 150341;$skullx$0 = 330;$skully$0 = 175;
  break;
 }
 case 8: case 7:  {
  $lumpname$0 = 150307;$skullx$0 = 330;$skully$0 = 175;
  break;
 }
 default: {
  _I_Error(150318,$vararg_buffer);
  // unreachable;
 }
 }
 $call = (_W_CacheLumpName($lumpname$0,8)|0);
 _V_DrawPatchDirect(0,0,$call);
 HEAP16[(129016)>>1] = $skullx$0;
 HEAP16[(129018)>>1] = $skully$0;
 STACKTOP = sp;return;
}
function _M_ReadThis2($choice) {
 $choice = $choice|0;
 var $$val = 0, $$val2 = 0, $0 = 0, $1 = 0, $ReadDef2$MainDef = 0, $cmp = 0, $cmp1 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32141]|0;
 $cmp = ($0>>>0)<(5);
 $1 = HEAP32[32140]|0;
 $cmp1 = ($1|0)!=(2);
 $or$cond = $cmp & $cmp1;
 $ReadDef2$MainDef = $or$cond ? 129048 : 129024;
 HEAP32[99390] = $ReadDef2$MainDef;
 $$val = HEAP16[(129068)>>1]|0;
 $$val2 = HEAP16[(129044)>>1]|0;
 $storemerge = $or$cond ? $$val : $$val2;
 HEAP16[200055] = $storemerge;
 return;
}
function _M_DrawReadThis2() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99391] = 1;
 $call = (_W_CacheLumpName(150341,8)|0);
 _V_DrawPatchDirect(0,0,$call);
 return;
}
function _M_FinishReadThis($choice) {
 $choice = $choice|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99390] = 129024;
 $0 = HEAP16[(129044)>>1]|0;
 HEAP16[200055] = $0;
 return;
}
function _M_DrawMainMenu() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_CacheLumpName(150347,8)|0);
 _V_DrawPatchDirect(94,2,$call);
 return;
}
function _M_ReadSaveStrings() {
 var $call = 0, $call$1 = 0, $call$2 = 0, $call$3 = 0, $call$4 = 0, $call$5 = 0, $call3 = 0, $call3$1 = 0, $call3$2 = 0, $call3$3 = 0, $call3$4 = 0, $call3$5 = 0, $cmp4 = 0, $cmp4$1 = 0, $cmp4$2 = 0, $cmp4$3 = 0, $cmp4$4 = 0, $cmp4$5 = 0, $name = 0, $storemerge = 0;
 var $storemerge11 = 0, $storemerge12 = 0, $storemerge13 = 0, $storemerge14 = 0, $storemerge15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $name = sp;
 $call = (_P_SaveGameFile(0)|0);
 (_M_StringCopy($name,$call,256)|0);
 $call3 = (_fopen($name,157528)|0);
 $cmp4 = ($call3|0)==(0|0);
 if ($cmp4) {
  (_M_StringCopy(185664,150406,24)|0);
  $storemerge15 = 0;
 } else {
  (_fread(185664,1,24,$call3)|0);
  (_fclose($call3)|0);
  $storemerge15 = 1;
 }
 HEAP16[24160] = $storemerge15;
 $call$1 = (_P_SaveGameFile(1)|0);
 (_M_StringCopy($name,$call$1,256)|0);
 $call3$1 = (_fopen($name,157528)|0);
 $cmp4$1 = ($call3$1|0)==(0|0);
 if ($cmp4$1) {
  (_M_StringCopy((185688),150406,24)|0);
  $storemerge = 0;
 } else {
  (_fread((185688),1,24,$call3$1)|0);
  (_fclose($call3$1)|0);
  $storemerge = 1;
 }
 HEAP16[(48340)>>1] = $storemerge;
 $call$2 = (_P_SaveGameFile(2)|0);
 (_M_StringCopy($name,$call$2,256)|0);
 $call3$2 = (_fopen($name,157528)|0);
 $cmp4$2 = ($call3$2|0)==(0|0);
 if ($cmp4$2) {
  (_M_StringCopy((185712),150406,24)|0);
  $storemerge14 = 0;
 } else {
  (_fread((185712),1,24,$call3$2)|0);
  (_fclose($call3$2)|0);
  $storemerge14 = 1;
 }
 HEAP16[(48360)>>1] = $storemerge14;
 $call$3 = (_P_SaveGameFile(3)|0);
 (_M_StringCopy($name,$call$3,256)|0);
 $call3$3 = (_fopen($name,157528)|0);
 $cmp4$3 = ($call3$3|0)==(0|0);
 if ($cmp4$3) {
  (_M_StringCopy((185736),150406,24)|0);
  $storemerge11 = 0;
 } else {
  (_fread((185736),1,24,$call3$3)|0);
  (_fclose($call3$3)|0);
  $storemerge11 = 1;
 }
 HEAP16[(48380)>>1] = $storemerge11;
 $call$4 = (_P_SaveGameFile(4)|0);
 (_M_StringCopy($name,$call$4,256)|0);
 $call3$4 = (_fopen($name,157528)|0);
 $cmp4$4 = ($call3$4|0)==(0|0);
 if ($cmp4$4) {
  (_M_StringCopy((185760),150406,24)|0);
  $storemerge13 = 0;
 } else {
  (_fread((185760),1,24,$call3$4)|0);
  (_fclose($call3$4)|0);
  $storemerge13 = 1;
 }
 HEAP16[(48400)>>1] = $storemerge13;
 $call$5 = (_P_SaveGameFile(5)|0);
 (_M_StringCopy($name,$call$5,256)|0);
 $call3$5 = (_fopen($name,157528)|0);
 $cmp4$5 = ($call3$5|0)==(0|0);
 if ($cmp4$5) {
  (_M_StringCopy((185784),150406,24)|0);
  $storemerge12 = 0;
  HEAP16[(48420)>>1] = $storemerge12;
  STACKTOP = sp;return;
 } else {
  (_fread((185784),1,24,$call3$5)|0);
  (_fclose($call3$5)|0);
  $storemerge12 = 1;
  HEAP16[(48420)>>1] = $storemerge12;
  STACKTOP = sp;return;
 }
}
function _M_LoadSelect($choice) {
 $choice = $choice|0;
 var $call = 0, $name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $name = sp;
 $call = (_P_SaveGameFile($choice)|0);
 (_M_StringCopy($name,$call,256)|0);
 _G_LoadGame($name);
 HEAP32[99384] = 0;
 STACKTOP = sp;return;
}
function _M_DrawSave() {
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add$1 = 0, $add$2 = 0, $add$3 = 0, $add$4 = 0, $add$5 = 0, $add$i = 0, $add$i$1 = 0, $add$i$2 = 0, $add$i$3 = 0, $add$i$4 = 0, $add$i$5 = 0, $add$i18 = 0, $add10 = 0, $add12$i = 0, $add12$i$1 = 0, $add12$i$2 = 0, $add12$i$3 = 0, $add12$i$4 = 0, $add12$i$5 = 0;
 var $add12$i31 = 0, $add13 = 0, $add5$1 = 0, $add5$2 = 0, $add5$3 = 0, $add5$4 = 0, $add5$5 = 0, $add8$i = 0, $add9$i = 0, $add9$i$1 = 0, $add9$i$2 = 0, $add9$i$3 = 0, $add9$i$4 = 0, $add9$i$5 = 0, $add9$i24 = 0, $arraydecay7 = 0, $arrayidx$i = 0, $arrayidx$i$1 = 0, $arrayidx$i$2 = 0, $arrayidx$i$3 = 0;
 var $arrayidx$i$4 = 0, $arrayidx$i$5 = 0, $arrayidx$i28 = 0, $arrayidx$phi$trans$insert$i = 0, $arrayidx6$i = 0, $call = 0, $call$i = 0, $call$i$1 = 0, $call$i$2 = 0, $call$i$3 = 0, $call$i$4 = 0, $call$i$5 = 0, $call$i21 = 0, $call$i7 = 0, $call$off$i = 0, $call$off$i$1 = 0, $call$off$i$2 = 0, $call$off$i$3 = 0, $call$off$i$4 = 0, $call$off$i$5 = 0;
 var $call$off$i22 = 0, $call1$i = 0, $call1$off$i = 0, $ch$0$i = 0, $ch$0$i$1 = 0, $ch$0$i$2 = 0, $ch$0$i$3 = 0, $ch$0$i$4 = 0, $ch$0$i$5 = 0, $ch$0$i14 = 0, $ch$0$ph$i = 0, $ch$0$ph$i$1 = 0, $ch$0$ph$i$2 = 0, $ch$0$ph$i$3 = 0, $ch$0$ph$i$4 = 0, $ch$0$ph$i$5 = 0, $ch$0$ph$i11 = 0, $cmp$i = 0, $cmp12$i = 0, $cmp13$i = 0;
 var $cmp13$i$1 = 0, $cmp13$i$2 = 0, $cmp13$i$3 = 0, $cmp13$i$4 = 0, $cmp13$i$5 = 0, $cmp13$i32 = 0, $conv = 0, $conv$1 = 0, $conv$2 = 0, $conv$3 = 0, $conv$4 = 0, $conv$5 = 0, $conv$i = 0, $conv$i$1 = 0, $conv$i$2 = 0, $conv$i$3 = 0, $conv$i$4 = 0, $conv$i$5 = 0, $conv$i20 = 0, $conv$i8 = 0;
 var $conv1 = 0, $conv1$1 = 0, $conv1$2 = 0, $conv1$3 = 0, $conv1$4 = 0, $conv1$5 = 0, $conv11 = 0, $conv11$i = 0, $conv11$i$1 = 0, $conv11$i$2 = 0, $conv11$i$3 = 0, $conv11$i$4 = 0, $conv11$i$5 = 0, $conv11$i30 = 0, $conv2 = 0, $conv2$1 = 0, $conv2$2 = 0, $conv2$3 = 0, $conv2$4 = 0, $conv2$5 = 0;
 var $conv3 = 0, $conv3$1 = 0, $conv3$2 = 0, $conv3$3 = 0, $conv3$4 = 0, $conv3$5 = 0, $conv7$i = 0, $conv7$i$sink = 0, $conv9 = 0, $cx$0$i = 0, $cx$0$i$1 = 0, $cx$0$i$1$be = 0, $cx$0$i$2 = 0, $cx$0$i$2$be = 0, $cx$0$i$3 = 0, $cx$0$i$3$be = 0, $cx$0$i$4 = 0, $cx$0$i$4$be = 0, $cx$0$i$5 = 0, $cx$0$i$5$be = 0;
 var $cx$0$i$be = 0, $cx$0$i15 = 0, $cx$0$i15$be = 0, $cy$0$ph$i = 0, $cy$0$ph$i$1 = 0, $cy$0$ph$i$2 = 0, $cy$0$ph$i$3 = 0, $cy$0$ph$i$4 = 0, $cy$0$ph$i$5 = 0, $cy$0$ph$i12 = 0, $i$014$i = 0, $inc$i = 0, $incdec$ptr$i = 0, $incdec$ptr$i$1 = 0, $incdec$ptr$i$2 = 0, $incdec$ptr$i$3 = 0, $incdec$ptr$i$4 = 0, $incdec$ptr$i$5 = 0, $incdec$ptr$i16 = 0, $mul12 = 0;
 var $strlenfirst$i = 0, $tobool = 0, $w$0$lcssa$i = 0, $w$013$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_CacheLumpName(150417,8)|0);
 _V_DrawPatchDirect(72,28,$call);
 $0 = HEAP16[(129112)>>1]|0;
 $conv = $0 << 16 >> 16;
 $1 = HEAP16[(129114)>>1]|0;
 $conv1 = $1 << 16 >> 16;
 _M_DrawSaveLoadBorder($conv,$conv1);
 $2 = HEAP16[(129112)>>1]|0;
 $conv2 = $2 << 16 >> 16;
 $3 = HEAP16[(129114)>>1]|0;
 $conv3 = $3 << 16 >> 16;
 $ch$0$ph$i = 185664;$cy$0$ph$i = $conv3;
 L1: while(1) {
  $ch$0$i = $ch$0$ph$i;$cx$0$i = $conv2;
  L3: while(1) {
   $incdec$ptr$i = ((($ch$0$i)) + 1|0);
   $4 = HEAP8[$ch$0$i>>0]|0;
   switch ($4<<24>>24) {
   case 0:  {
    break L1;
    break;
   }
   case 10:  {
    break L3;
    break;
   }
   default: {
   }
   }
   $conv$i = $4 << 24 >> 24;
   $call$i = (_toupper($conv$i)|0);
   $call$off$i = (($call$i) + -33)|0;
   $5 = ($call$off$i>>>0)>(62);
   if ($5) {
    $add9$i = (($cx$0$i) + 4)|0;
    $cx$0$i$be = $add9$i;
   } else {
    $arrayidx$i = (184512 + ($call$off$i<<2)|0);
    $6 = HEAP32[$arrayidx$i>>2]|0;
    $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8);
    $conv11$i = $7 << 16 >> 16;
    $add12$i = (($cx$0$i) + ($conv11$i))|0;
    $cmp13$i = ($add12$i|0)>(320);
    if ($cmp13$i) {
     break L1;
    }
    _V_DrawPatchDirect($cx$0$i,$cy$0$ph$i,$6);
    $cx$0$i$be = $add12$i;
   }
   $ch$0$i = $incdec$ptr$i;$cx$0$i = $cx$0$i$be;
  }
  $add$i = (($cy$0$ph$i) + 12)|0;
  $ch$0$ph$i = $incdec$ptr$i;$cy$0$ph$i = $add$i;
 }
 $8 = HEAP16[(129112)>>1]|0;
 $conv$1 = $8 << 16 >> 16;
 $9 = HEAP16[(129114)>>1]|0;
 $conv1$1 = $9 << 16 >> 16;
 $add$1 = (($conv1$1) + 16)|0;
 _M_DrawSaveLoadBorder($conv$1,$add$1);
 $10 = HEAP16[(129112)>>1]|0;
 $conv2$1 = $10 << 16 >> 16;
 $11 = HEAP16[(129114)>>1]|0;
 $conv3$1 = $11 << 16 >> 16;
 $add5$1 = (($conv3$1) + 16)|0;
 $ch$0$ph$i$1 = (185688);$cy$0$ph$i$1 = $add5$1;
 L13: while(1) {
  $ch$0$i$1 = $ch$0$ph$i$1;$cx$0$i$1 = $conv2$1;
  L15: while(1) {
   $incdec$ptr$i$1 = ((($ch$0$i$1)) + 1|0);
   $23 = HEAP8[$ch$0$i$1>>0]|0;
   switch ($23<<24>>24) {
   case 0:  {
    break L13;
    break;
   }
   case 10:  {
    break L15;
    break;
   }
   default: {
   }
   }
   $conv$i$1 = $23 << 24 >> 24;
   $call$i$1 = (_toupper($conv$i$1)|0);
   $call$off$i$1 = (($call$i$1) + -33)|0;
   $24 = ($call$off$i$1>>>0)>(62);
   if ($24) {
    $add9$i$1 = (($cx$0$i$1) + 4)|0;
    $cx$0$i$1$be = $add9$i$1;
   } else {
    $arrayidx$i$1 = (184512 + ($call$off$i$1<<2)|0);
    $25 = HEAP32[$arrayidx$i$1>>2]|0;
    $26 = HEAPU8[$25>>0]|(HEAPU8[$25+1>>0]<<8);
    $conv11$i$1 = $26 << 16 >> 16;
    $add12$i$1 = (($cx$0$i$1) + ($conv11$i$1))|0;
    $cmp13$i$1 = ($add12$i$1|0)>(320);
    if ($cmp13$i$1) {
     break L13;
    }
    _V_DrawPatchDirect($cx$0$i$1,$cy$0$ph$i$1,$25);
    $cx$0$i$1$be = $add12$i$1;
   }
   $ch$0$i$1 = $incdec$ptr$i$1;$cx$0$i$1 = $cx$0$i$1$be;
  }
  $add$i$1 = (($cy$0$ph$i$1) + 12)|0;
  $ch$0$ph$i$1 = $incdec$ptr$i$1;$cy$0$ph$i$1 = $add$i$1;
 }
 $27 = HEAP16[(129112)>>1]|0;
 $conv$2 = $27 << 16 >> 16;
 $28 = HEAP16[(129114)>>1]|0;
 $conv1$2 = $28 << 16 >> 16;
 $add$2 = (($conv1$2) + 32)|0;
 _M_DrawSaveLoadBorder($conv$2,$add$2);
 $29 = HEAP16[(129112)>>1]|0;
 $conv2$2 = $29 << 16 >> 16;
 $30 = HEAP16[(129114)>>1]|0;
 $conv3$2 = $30 << 16 >> 16;
 $add5$2 = (($conv3$2) + 32)|0;
 $ch$0$ph$i$2 = (185712);$cy$0$ph$i$2 = $add5$2;
 L25: while(1) {
  $ch$0$i$2 = $ch$0$ph$i$2;$cx$0$i$2 = $conv2$2;
  L27: while(1) {
   $incdec$ptr$i$2 = ((($ch$0$i$2)) + 1|0);
   $31 = HEAP8[$ch$0$i$2>>0]|0;
   switch ($31<<24>>24) {
   case 0:  {
    break L25;
    break;
   }
   case 10:  {
    break L27;
    break;
   }
   default: {
   }
   }
   $conv$i$2 = $31 << 24 >> 24;
   $call$i$2 = (_toupper($conv$i$2)|0);
   $call$off$i$2 = (($call$i$2) + -33)|0;
   $32 = ($call$off$i$2>>>0)>(62);
   if ($32) {
    $add9$i$2 = (($cx$0$i$2) + 4)|0;
    $cx$0$i$2$be = $add9$i$2;
   } else {
    $arrayidx$i$2 = (184512 + ($call$off$i$2<<2)|0);
    $33 = HEAP32[$arrayidx$i$2>>2]|0;
    $34 = HEAPU8[$33>>0]|(HEAPU8[$33+1>>0]<<8);
    $conv11$i$2 = $34 << 16 >> 16;
    $add12$i$2 = (($cx$0$i$2) + ($conv11$i$2))|0;
    $cmp13$i$2 = ($add12$i$2|0)>(320);
    if ($cmp13$i$2) {
     break L25;
    }
    _V_DrawPatchDirect($cx$0$i$2,$cy$0$ph$i$2,$33);
    $cx$0$i$2$be = $add12$i$2;
   }
   $ch$0$i$2 = $incdec$ptr$i$2;$cx$0$i$2 = $cx$0$i$2$be;
  }
  $add$i$2 = (($cy$0$ph$i$2) + 12)|0;
  $ch$0$ph$i$2 = $incdec$ptr$i$2;$cy$0$ph$i$2 = $add$i$2;
 }
 $35 = HEAP16[(129112)>>1]|0;
 $conv$3 = $35 << 16 >> 16;
 $36 = HEAP16[(129114)>>1]|0;
 $conv1$3 = $36 << 16 >> 16;
 $add$3 = (($conv1$3) + 48)|0;
 _M_DrawSaveLoadBorder($conv$3,$add$3);
 $37 = HEAP16[(129112)>>1]|0;
 $conv2$3 = $37 << 16 >> 16;
 $38 = HEAP16[(129114)>>1]|0;
 $conv3$3 = $38 << 16 >> 16;
 $add5$3 = (($conv3$3) + 48)|0;
 $ch$0$ph$i$3 = (185736);$cy$0$ph$i$3 = $add5$3;
 L37: while(1) {
  $ch$0$i$3 = $ch$0$ph$i$3;$cx$0$i$3 = $conv2$3;
  L39: while(1) {
   $incdec$ptr$i$3 = ((($ch$0$i$3)) + 1|0);
   $39 = HEAP8[$ch$0$i$3>>0]|0;
   switch ($39<<24>>24) {
   case 0:  {
    break L37;
    break;
   }
   case 10:  {
    break L39;
    break;
   }
   default: {
   }
   }
   $conv$i$3 = $39 << 24 >> 24;
   $call$i$3 = (_toupper($conv$i$3)|0);
   $call$off$i$3 = (($call$i$3) + -33)|0;
   $40 = ($call$off$i$3>>>0)>(62);
   if ($40) {
    $add9$i$3 = (($cx$0$i$3) + 4)|0;
    $cx$0$i$3$be = $add9$i$3;
   } else {
    $arrayidx$i$3 = (184512 + ($call$off$i$3<<2)|0);
    $41 = HEAP32[$arrayidx$i$3>>2]|0;
    $42 = HEAPU8[$41>>0]|(HEAPU8[$41+1>>0]<<8);
    $conv11$i$3 = $42 << 16 >> 16;
    $add12$i$3 = (($cx$0$i$3) + ($conv11$i$3))|0;
    $cmp13$i$3 = ($add12$i$3|0)>(320);
    if ($cmp13$i$3) {
     break L37;
    }
    _V_DrawPatchDirect($cx$0$i$3,$cy$0$ph$i$3,$41);
    $cx$0$i$3$be = $add12$i$3;
   }
   $ch$0$i$3 = $incdec$ptr$i$3;$cx$0$i$3 = $cx$0$i$3$be;
  }
  $add$i$3 = (($cy$0$ph$i$3) + 12)|0;
  $ch$0$ph$i$3 = $incdec$ptr$i$3;$cy$0$ph$i$3 = $add$i$3;
 }
 $43 = HEAP16[(129112)>>1]|0;
 $conv$4 = $43 << 16 >> 16;
 $44 = HEAP16[(129114)>>1]|0;
 $conv1$4 = $44 << 16 >> 16;
 $add$4 = (($conv1$4) + 64)|0;
 _M_DrawSaveLoadBorder($conv$4,$add$4);
 $45 = HEAP16[(129112)>>1]|0;
 $conv2$4 = $45 << 16 >> 16;
 $46 = HEAP16[(129114)>>1]|0;
 $conv3$4 = $46 << 16 >> 16;
 $add5$4 = (($conv3$4) + 64)|0;
 $ch$0$ph$i$4 = (185760);$cy$0$ph$i$4 = $add5$4;
 L49: while(1) {
  $ch$0$i$4 = $ch$0$ph$i$4;$cx$0$i$4 = $conv2$4;
  L51: while(1) {
   $incdec$ptr$i$4 = ((($ch$0$i$4)) + 1|0);
   $47 = HEAP8[$ch$0$i$4>>0]|0;
   switch ($47<<24>>24) {
   case 0:  {
    break L49;
    break;
   }
   case 10:  {
    break L51;
    break;
   }
   default: {
   }
   }
   $conv$i$4 = $47 << 24 >> 24;
   $call$i$4 = (_toupper($conv$i$4)|0);
   $call$off$i$4 = (($call$i$4) + -33)|0;
   $48 = ($call$off$i$4>>>0)>(62);
   if ($48) {
    $add9$i$4 = (($cx$0$i$4) + 4)|0;
    $cx$0$i$4$be = $add9$i$4;
   } else {
    $arrayidx$i$4 = (184512 + ($call$off$i$4<<2)|0);
    $49 = HEAP32[$arrayidx$i$4>>2]|0;
    $50 = HEAPU8[$49>>0]|(HEAPU8[$49+1>>0]<<8);
    $conv11$i$4 = $50 << 16 >> 16;
    $add12$i$4 = (($cx$0$i$4) + ($conv11$i$4))|0;
    $cmp13$i$4 = ($add12$i$4|0)>(320);
    if ($cmp13$i$4) {
     break L49;
    }
    _V_DrawPatchDirect($cx$0$i$4,$cy$0$ph$i$4,$49);
    $cx$0$i$4$be = $add12$i$4;
   }
   $ch$0$i$4 = $incdec$ptr$i$4;$cx$0$i$4 = $cx$0$i$4$be;
  }
  $add$i$4 = (($cy$0$ph$i$4) + 12)|0;
  $ch$0$ph$i$4 = $incdec$ptr$i$4;$cy$0$ph$i$4 = $add$i$4;
 }
 $51 = HEAP16[(129112)>>1]|0;
 $conv$5 = $51 << 16 >> 16;
 $52 = HEAP16[(129114)>>1]|0;
 $conv1$5 = $52 << 16 >> 16;
 $add$5 = (($conv1$5) + 80)|0;
 _M_DrawSaveLoadBorder($conv$5,$add$5);
 $53 = HEAP16[(129112)>>1]|0;
 $conv2$5 = $53 << 16 >> 16;
 $54 = HEAP16[(129114)>>1]|0;
 $conv3$5 = $54 << 16 >> 16;
 $add5$5 = (($conv3$5) + 80)|0;
 $ch$0$ph$i$5 = (185784);$cy$0$ph$i$5 = $add5$5;
 L61: while(1) {
  $ch$0$i$5 = $ch$0$ph$i$5;$cx$0$i$5 = $conv2$5;
  L63: while(1) {
   $incdec$ptr$i$5 = ((($ch$0$i$5)) + 1|0);
   $55 = HEAP8[$ch$0$i$5>>0]|0;
   switch ($55<<24>>24) {
   case 0:  {
    break L61;
    break;
   }
   case 10:  {
    break L63;
    break;
   }
   default: {
   }
   }
   $conv$i$5 = $55 << 24 >> 24;
   $call$i$5 = (_toupper($conv$i$5)|0);
   $call$off$i$5 = (($call$i$5) + -33)|0;
   $56 = ($call$off$i$5>>>0)>(62);
   if ($56) {
    $add9$i$5 = (($cx$0$i$5) + 4)|0;
    $cx$0$i$5$be = $add9$i$5;
   } else {
    $arrayidx$i$5 = (184512 + ($call$off$i$5<<2)|0);
    $57 = HEAP32[$arrayidx$i$5>>2]|0;
    $58 = HEAPU8[$57>>0]|(HEAPU8[$57+1>>0]<<8);
    $conv11$i$5 = $58 << 16 >> 16;
    $add12$i$5 = (($cx$0$i$5) + ($conv11$i$5))|0;
    $cmp13$i$5 = ($add12$i$5|0)>(320);
    if ($cmp13$i$5) {
     break L61;
    }
    _V_DrawPatchDirect($cx$0$i$5,$cy$0$ph$i$5,$57);
    $cx$0$i$5$be = $add12$i$5;
   }
   $ch$0$i$5 = $incdec$ptr$i$5;$cx$0$i$5 = $cx$0$i$5$be;
  }
  $add$i$5 = (($cy$0$ph$i$5) + 12)|0;
  $ch$0$ph$i$5 = $incdec$ptr$i$5;$cy$0$ph$i$5 = $add$i$5;
 }
 $59 = HEAP32[99393]|0;
 $tobool = ($59|0)==(0);
 if ($tobool) {
  return;
 }
 $12 = HEAP32[99392]|0;
 $arraydecay7 = (185664 + (($12*24)|0)|0);
 $strlenfirst$i = HEAP8[$arraydecay7>>0]|0;
 $cmp12$i = ($strlenfirst$i<<24>>24)==(0);
 L76: do {
  if ($cmp12$i) {
   $w$0$lcssa$i = 0;
  } else {
   $call$i7 = (_strlen($arraydecay7)|0);
   $13 = $strlenfirst$i;$i$014$i = 0;$w$013$i = 0;
   while(1) {
    $conv$i8 = $13 << 24 >> 24;
    $call1$i = (_toupper($conv$i8)|0);
    $call1$off$i = (($call1$i) + -33)|0;
    $14 = ($call1$off$i>>>0)>(62);
    if ($14) {
     $conv7$i$sink = 4;
    } else {
     $arrayidx6$i = (184512 + ($call1$off$i<<2)|0);
     $15 = HEAP32[$arrayidx6$i>>2]|0;
     $16 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8);
     $conv7$i = $16 << 16 >> 16;
     $conv7$i$sink = $conv7$i;
    }
    $add8$i = (($w$013$i) + ($conv7$i$sink))|0;
    $inc$i = (($i$014$i) + 1)|0;
    $cmp$i = ($inc$i>>>0)<($call$i7>>>0);
    if (!($cmp$i)) {
     $w$0$lcssa$i = $add8$i;
     break L76;
    }
    $arrayidx$phi$trans$insert$i = ((185664 + (($12*24)|0)|0) + ($inc$i)|0);
    $$pre$i = HEAP8[$arrayidx$phi$trans$insert$i>>0]|0;
    $13 = $$pre$i;$i$014$i = $inc$i;$w$013$i = $add8$i;
   }
  }
 } while(0);
 $17 = HEAP16[(129112)>>1]|0;
 $conv9 = $17 << 16 >> 16;
 $add10 = (($w$0$lcssa$i) + ($conv9))|0;
 $18 = HEAP16[(129114)>>1]|0;
 $conv11 = $18 << 16 >> 16;
 $mul12 = $12 << 4;
 $add13 = (($mul12) + ($conv11))|0;
 $ch$0$ph$i11 = 150425;$cy$0$ph$i12 = $add13;
 L85: while(1) {
  $ch$0$i14 = $ch$0$ph$i11;$cx$0$i15 = $add10;
  L87: while(1) {
   $incdec$ptr$i16 = ((($ch$0$i14)) + 1|0);
   $19 = HEAP8[$ch$0$i14>>0]|0;
   switch ($19<<24>>24) {
   case 0:  {
    label = 26;
    break L85;
    break;
   }
   case 10:  {
    break L87;
    break;
   }
   default: {
   }
   }
   $conv$i20 = $19 << 24 >> 24;
   $call$i21 = (_toupper($conv$i20)|0);
   $call$off$i22 = (($call$i21) + -33)|0;
   $20 = ($call$off$i22>>>0)>(62);
   if ($20) {
    $add9$i24 = (($cx$0$i15) + 4)|0;
    $cx$0$i15$be = $add9$i24;
   } else {
    $arrayidx$i28 = (184512 + ($call$off$i22<<2)|0);
    $21 = HEAP32[$arrayidx$i28>>2]|0;
    $22 = HEAPU8[$21>>0]|(HEAPU8[$21+1>>0]<<8);
    $conv11$i30 = $22 << 16 >> 16;
    $add12$i31 = (($cx$0$i15) + ($conv11$i30))|0;
    $cmp13$i32 = ($add12$i31|0)>(320);
    if ($cmp13$i32) {
     label = 26;
     break L85;
    }
    _V_DrawPatchDirect($cx$0$i15,$cy$0$ph$i12,$21);
    $cx$0$i15$be = $add12$i31;
   }
   $ch$0$i14 = $incdec$ptr$i16;$cx$0$i15 = $cx$0$i15$be;
  }
  $add$i18 = (($cy$0$ph$i12) + 12)|0;
  $ch$0$ph$i11 = $incdec$ptr$i16;$cy$0$ph$i12 = $add$i18;
 }
 if ((label|0) == 26) {
  return;
 }
}
function _M_DrawSaveLoadBorder($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $add = 0, $add3 = 0, $add3$1 = 0, $add3$10 = 0, $add3$11 = 0, $add3$12 = 0, $add3$13 = 0, $add3$14 = 0, $add3$15 = 0, $add3$16 = 0, $add3$17 = 0, $add3$18 = 0, $add3$19 = 0, $add3$2 = 0, $add3$20 = 0, $add3$21 = 0, $add3$22 = 0, $add3$3 = 0, $add3$4 = 0;
 var $add3$5 = 0, $add3$6 = 0, $add3$7 = 0, $add3$8 = 0, $add3$9 = 0, $call = 0, $call2 = 0, $call2$1 = 0, $call2$10 = 0, $call2$11 = 0, $call2$12 = 0, $call2$13 = 0, $call2$14 = 0, $call2$15 = 0, $call2$16 = 0, $call2$17 = 0, $call2$18 = 0, $call2$19 = 0, $call2$2 = 0, $call2$20 = 0;
 var $call2$21 = 0, $call2$22 = 0, $call2$23 = 0, $call2$3 = 0, $call2$4 = 0, $call2$5 = 0, $call2$6 = 0, $call2$7 = 0, $call2$8 = 0, $call2$9 = 0, $call5 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($x) + -8)|0;
 $add = (($y) + 7)|0;
 $call = (_W_CacheLumpName(150427,8)|0);
 _V_DrawPatchDirect($sub,$add,$call);
 $call2 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($x,$add,$call2);
 $add3 = (($x) + 8)|0;
 $call2$1 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3,$add,$call2$1);
 $add3$1 = (($x) + 16)|0;
 $call2$2 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$1,$add,$call2$2);
 $add3$2 = (($x) + 24)|0;
 $call2$3 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$2,$add,$call2$3);
 $add3$3 = (($x) + 32)|0;
 $call2$4 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$3,$add,$call2$4);
 $add3$4 = (($x) + 40)|0;
 $call2$5 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$4,$add,$call2$5);
 $add3$5 = (($x) + 48)|0;
 $call2$6 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$5,$add,$call2$6);
 $add3$6 = (($x) + 56)|0;
 $call2$7 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$6,$add,$call2$7);
 $add3$7 = (($x) + 64)|0;
 $call2$8 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$7,$add,$call2$8);
 $add3$8 = (($x) + 72)|0;
 $call2$9 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$8,$add,$call2$9);
 $add3$9 = (($x) + 80)|0;
 $call2$10 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$9,$add,$call2$10);
 $add3$10 = (($x) + 88)|0;
 $call2$11 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$10,$add,$call2$11);
 $add3$11 = (($x) + 96)|0;
 $call2$12 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$11,$add,$call2$12);
 $add3$12 = (($x) + 104)|0;
 $call2$13 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$12,$add,$call2$13);
 $add3$13 = (($x) + 112)|0;
 $call2$14 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$13,$add,$call2$14);
 $add3$14 = (($x) + 120)|0;
 $call2$15 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$14,$add,$call2$15);
 $add3$15 = (($x) + 128)|0;
 $call2$16 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$15,$add,$call2$16);
 $add3$16 = (($x) + 136)|0;
 $call2$17 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$16,$add,$call2$17);
 $add3$17 = (($x) + 144)|0;
 $call2$18 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$17,$add,$call2$18);
 $add3$18 = (($x) + 152)|0;
 $call2$19 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$18,$add,$call2$19);
 $add3$19 = (($x) + 160)|0;
 $call2$20 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$19,$add,$call2$20);
 $add3$20 = (($x) + 168)|0;
 $call2$21 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$20,$add,$call2$21);
 $add3$21 = (($x) + 176)|0;
 $call2$22 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$21,$add,$call2$22);
 $add3$22 = (($x) + 184)|0;
 $call2$23 = (_W_CacheLumpName(150436,8)|0);
 _V_DrawPatchDirect($add3$22,$add,$call2$23);
 $0 = (($x) + 192)|0;
 $call5 = (_W_CacheLumpName(150445,8)|0);
 _V_DrawPatchDirect($0,$add,$call5);
 return;
}
function _M_DrawLoad() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$1 = 0, $add$2 = 0, $add$3 = 0, $add$4 = 0, $add$5 = 0, $add$i = 0, $add$i$1 = 0, $add$i$2 = 0, $add$i$3 = 0, $add$i$4 = 0, $add$i$5 = 0, $add12$i = 0;
 var $add12$i$1 = 0, $add12$i$2 = 0, $add12$i$3 = 0, $add12$i$4 = 0, $add12$i$5 = 0, $add5$1 = 0, $add5$2 = 0, $add5$3 = 0, $add5$4 = 0, $add5$5 = 0, $add9$i = 0, $add9$i$1 = 0, $add9$i$2 = 0, $add9$i$3 = 0, $add9$i$4 = 0, $add9$i$5 = 0, $arrayidx$i = 0, $arrayidx$i$1 = 0, $arrayidx$i$2 = 0, $arrayidx$i$3 = 0;
 var $arrayidx$i$4 = 0, $arrayidx$i$5 = 0, $call = 0, $call$i = 0, $call$i$1 = 0, $call$i$2 = 0, $call$i$3 = 0, $call$i$4 = 0, $call$i$5 = 0, $call$off$i = 0, $call$off$i$1 = 0, $call$off$i$2 = 0, $call$off$i$3 = 0, $call$off$i$4 = 0, $call$off$i$5 = 0, $ch$0$i = 0, $ch$0$i$1 = 0, $ch$0$i$2 = 0, $ch$0$i$3 = 0, $ch$0$i$4 = 0;
 var $ch$0$i$5 = 0, $ch$0$ph$i = 0, $ch$0$ph$i$1 = 0, $ch$0$ph$i$2 = 0, $ch$0$ph$i$3 = 0, $ch$0$ph$i$4 = 0, $ch$0$ph$i$5 = 0, $cmp13$i = 0, $cmp13$i$1 = 0, $cmp13$i$2 = 0, $cmp13$i$3 = 0, $cmp13$i$4 = 0, $cmp13$i$5 = 0, $conv = 0, $conv$1 = 0, $conv$2 = 0, $conv$3 = 0, $conv$4 = 0, $conv$5 = 0, $conv$i = 0;
 var $conv$i$1 = 0, $conv$i$2 = 0, $conv$i$3 = 0, $conv$i$4 = 0, $conv$i$5 = 0, $conv1 = 0, $conv1$1 = 0, $conv1$2 = 0, $conv1$3 = 0, $conv1$4 = 0, $conv1$5 = 0, $conv11$i = 0, $conv11$i$1 = 0, $conv11$i$2 = 0, $conv11$i$3 = 0, $conv11$i$4 = 0, $conv11$i$5 = 0, $conv2 = 0, $conv2$1 = 0, $conv2$2 = 0;
 var $conv2$3 = 0, $conv2$4 = 0, $conv2$5 = 0, $conv3 = 0, $conv3$1 = 0, $conv3$2 = 0, $conv3$3 = 0, $conv3$4 = 0, $conv3$5 = 0, $cx$0$i = 0, $cx$0$i$1 = 0, $cx$0$i$1$be = 0, $cx$0$i$2 = 0, $cx$0$i$2$be = 0, $cx$0$i$3 = 0, $cx$0$i$3$be = 0, $cx$0$i$4 = 0, $cx$0$i$4$be = 0, $cx$0$i$5 = 0, $cx$0$i$5$be = 0;
 var $cx$0$i$be = 0, $cy$0$ph$i = 0, $cy$0$ph$i$1 = 0, $cy$0$ph$i$2 = 0, $cy$0$ph$i$3 = 0, $cy$0$ph$i$4 = 0, $cy$0$ph$i$5 = 0, $incdec$ptr$i = 0, $incdec$ptr$i$1 = 0, $incdec$ptr$i$2 = 0, $incdec$ptr$i$3 = 0, $incdec$ptr$i$4 = 0, $incdec$ptr$i$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_CacheLumpName(150454,8)|0);
 _V_DrawPatchDirect(72,28,$call);
 $0 = HEAP16[(129112)>>1]|0;
 $conv = $0 << 16 >> 16;
 $1 = HEAP16[(129114)>>1]|0;
 $conv1 = $1 << 16 >> 16;
 _M_DrawSaveLoadBorder($conv,$conv1);
 $2 = HEAP16[(129112)>>1]|0;
 $conv2 = $2 << 16 >> 16;
 $3 = HEAP16[(129114)>>1]|0;
 $conv3 = $3 << 16 >> 16;
 $ch$0$ph$i = 185664;$cy$0$ph$i = $conv3;
 L1: while(1) {
  $ch$0$i = $ch$0$ph$i;$cx$0$i = $conv2;
  L3: while(1) {
   $incdec$ptr$i = ((($ch$0$i)) + 1|0);
   $4 = HEAP8[$ch$0$i>>0]|0;
   switch ($4<<24>>24) {
   case 0:  {
    break L1;
    break;
   }
   case 10:  {
    break L3;
    break;
   }
   default: {
   }
   }
   $conv$i = $4 << 24 >> 24;
   $call$i = (_toupper($conv$i)|0);
   $call$off$i = (($call$i) + -33)|0;
   $5 = ($call$off$i>>>0)>(62);
   if ($5) {
    $add9$i = (($cx$0$i) + 4)|0;
    $cx$0$i$be = $add9$i;
   } else {
    $arrayidx$i = (184512 + ($call$off$i<<2)|0);
    $6 = HEAP32[$arrayidx$i>>2]|0;
    $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8);
    $conv11$i = $7 << 16 >> 16;
    $add12$i = (($cx$0$i) + ($conv11$i))|0;
    $cmp13$i = ($add12$i|0)>(320);
    if ($cmp13$i) {
     break L1;
    }
    _V_DrawPatchDirect($cx$0$i,$cy$0$ph$i,$6);
    $cx$0$i$be = $add12$i;
   }
   $ch$0$i = $incdec$ptr$i;$cx$0$i = $cx$0$i$be;
  }
  $add$i = (($cy$0$ph$i) + 12)|0;
  $ch$0$ph$i = $incdec$ptr$i;$cy$0$ph$i = $add$i;
 }
 $8 = HEAP16[(129112)>>1]|0;
 $conv$1 = $8 << 16 >> 16;
 $9 = HEAP16[(129114)>>1]|0;
 $conv1$1 = $9 << 16 >> 16;
 $add$1 = (($conv1$1) + 16)|0;
 _M_DrawSaveLoadBorder($conv$1,$add$1);
 $10 = HEAP16[(129112)>>1]|0;
 $conv2$1 = $10 << 16 >> 16;
 $11 = HEAP16[(129114)>>1]|0;
 $conv3$1 = $11 << 16 >> 16;
 $add5$1 = (($conv3$1) + 16)|0;
 $ch$0$ph$i$1 = (185688);$cy$0$ph$i$1 = $add5$1;
 L13: while(1) {
  $ch$0$i$1 = $ch$0$ph$i$1;$cx$0$i$1 = $conv2$1;
  L15: while(1) {
   $incdec$ptr$i$1 = ((($ch$0$i$1)) + 1|0);
   $12 = HEAP8[$ch$0$i$1>>0]|0;
   switch ($12<<24>>24) {
   case 0:  {
    break L13;
    break;
   }
   case 10:  {
    break L15;
    break;
   }
   default: {
   }
   }
   $conv$i$1 = $12 << 24 >> 24;
   $call$i$1 = (_toupper($conv$i$1)|0);
   $call$off$i$1 = (($call$i$1) + -33)|0;
   $13 = ($call$off$i$1>>>0)>(62);
   if ($13) {
    $add9$i$1 = (($cx$0$i$1) + 4)|0;
    $cx$0$i$1$be = $add9$i$1;
   } else {
    $arrayidx$i$1 = (184512 + ($call$off$i$1<<2)|0);
    $14 = HEAP32[$arrayidx$i$1>>2]|0;
    $15 = HEAPU8[$14>>0]|(HEAPU8[$14+1>>0]<<8);
    $conv11$i$1 = $15 << 16 >> 16;
    $add12$i$1 = (($cx$0$i$1) + ($conv11$i$1))|0;
    $cmp13$i$1 = ($add12$i$1|0)>(320);
    if ($cmp13$i$1) {
     break L13;
    }
    _V_DrawPatchDirect($cx$0$i$1,$cy$0$ph$i$1,$14);
    $cx$0$i$1$be = $add12$i$1;
   }
   $ch$0$i$1 = $incdec$ptr$i$1;$cx$0$i$1 = $cx$0$i$1$be;
  }
  $add$i$1 = (($cy$0$ph$i$1) + 12)|0;
  $ch$0$ph$i$1 = $incdec$ptr$i$1;$cy$0$ph$i$1 = $add$i$1;
 }
 $16 = HEAP16[(129112)>>1]|0;
 $conv$2 = $16 << 16 >> 16;
 $17 = HEAP16[(129114)>>1]|0;
 $conv1$2 = $17 << 16 >> 16;
 $add$2 = (($conv1$2) + 32)|0;
 _M_DrawSaveLoadBorder($conv$2,$add$2);
 $18 = HEAP16[(129112)>>1]|0;
 $conv2$2 = $18 << 16 >> 16;
 $19 = HEAP16[(129114)>>1]|0;
 $conv3$2 = $19 << 16 >> 16;
 $add5$2 = (($conv3$2) + 32)|0;
 $ch$0$ph$i$2 = (185712);$cy$0$ph$i$2 = $add5$2;
 L25: while(1) {
  $ch$0$i$2 = $ch$0$ph$i$2;$cx$0$i$2 = $conv2$2;
  L27: while(1) {
   $incdec$ptr$i$2 = ((($ch$0$i$2)) + 1|0);
   $20 = HEAP8[$ch$0$i$2>>0]|0;
   switch ($20<<24>>24) {
   case 0:  {
    break L25;
    break;
   }
   case 10:  {
    break L27;
    break;
   }
   default: {
   }
   }
   $conv$i$2 = $20 << 24 >> 24;
   $call$i$2 = (_toupper($conv$i$2)|0);
   $call$off$i$2 = (($call$i$2) + -33)|0;
   $21 = ($call$off$i$2>>>0)>(62);
   if ($21) {
    $add9$i$2 = (($cx$0$i$2) + 4)|0;
    $cx$0$i$2$be = $add9$i$2;
   } else {
    $arrayidx$i$2 = (184512 + ($call$off$i$2<<2)|0);
    $22 = HEAP32[$arrayidx$i$2>>2]|0;
    $23 = HEAPU8[$22>>0]|(HEAPU8[$22+1>>0]<<8);
    $conv11$i$2 = $23 << 16 >> 16;
    $add12$i$2 = (($cx$0$i$2) + ($conv11$i$2))|0;
    $cmp13$i$2 = ($add12$i$2|0)>(320);
    if ($cmp13$i$2) {
     break L25;
    }
    _V_DrawPatchDirect($cx$0$i$2,$cy$0$ph$i$2,$22);
    $cx$0$i$2$be = $add12$i$2;
   }
   $ch$0$i$2 = $incdec$ptr$i$2;$cx$0$i$2 = $cx$0$i$2$be;
  }
  $add$i$2 = (($cy$0$ph$i$2) + 12)|0;
  $ch$0$ph$i$2 = $incdec$ptr$i$2;$cy$0$ph$i$2 = $add$i$2;
 }
 $24 = HEAP16[(129112)>>1]|0;
 $conv$3 = $24 << 16 >> 16;
 $25 = HEAP16[(129114)>>1]|0;
 $conv1$3 = $25 << 16 >> 16;
 $add$3 = (($conv1$3) + 48)|0;
 _M_DrawSaveLoadBorder($conv$3,$add$3);
 $26 = HEAP16[(129112)>>1]|0;
 $conv2$3 = $26 << 16 >> 16;
 $27 = HEAP16[(129114)>>1]|0;
 $conv3$3 = $27 << 16 >> 16;
 $add5$3 = (($conv3$3) + 48)|0;
 $ch$0$ph$i$3 = (185736);$cy$0$ph$i$3 = $add5$3;
 L37: while(1) {
  $ch$0$i$3 = $ch$0$ph$i$3;$cx$0$i$3 = $conv2$3;
  L39: while(1) {
   $incdec$ptr$i$3 = ((($ch$0$i$3)) + 1|0);
   $28 = HEAP8[$ch$0$i$3>>0]|0;
   switch ($28<<24>>24) {
   case 0:  {
    break L37;
    break;
   }
   case 10:  {
    break L39;
    break;
   }
   default: {
   }
   }
   $conv$i$3 = $28 << 24 >> 24;
   $call$i$3 = (_toupper($conv$i$3)|0);
   $call$off$i$3 = (($call$i$3) + -33)|0;
   $29 = ($call$off$i$3>>>0)>(62);
   if ($29) {
    $add9$i$3 = (($cx$0$i$3) + 4)|0;
    $cx$0$i$3$be = $add9$i$3;
   } else {
    $arrayidx$i$3 = (184512 + ($call$off$i$3<<2)|0);
    $30 = HEAP32[$arrayidx$i$3>>2]|0;
    $31 = HEAPU8[$30>>0]|(HEAPU8[$30+1>>0]<<8);
    $conv11$i$3 = $31 << 16 >> 16;
    $add12$i$3 = (($cx$0$i$3) + ($conv11$i$3))|0;
    $cmp13$i$3 = ($add12$i$3|0)>(320);
    if ($cmp13$i$3) {
     break L37;
    }
    _V_DrawPatchDirect($cx$0$i$3,$cy$0$ph$i$3,$30);
    $cx$0$i$3$be = $add12$i$3;
   }
   $ch$0$i$3 = $incdec$ptr$i$3;$cx$0$i$3 = $cx$0$i$3$be;
  }
  $add$i$3 = (($cy$0$ph$i$3) + 12)|0;
  $ch$0$ph$i$3 = $incdec$ptr$i$3;$cy$0$ph$i$3 = $add$i$3;
 }
 $32 = HEAP16[(129112)>>1]|0;
 $conv$4 = $32 << 16 >> 16;
 $33 = HEAP16[(129114)>>1]|0;
 $conv1$4 = $33 << 16 >> 16;
 $add$4 = (($conv1$4) + 64)|0;
 _M_DrawSaveLoadBorder($conv$4,$add$4);
 $34 = HEAP16[(129112)>>1]|0;
 $conv2$4 = $34 << 16 >> 16;
 $35 = HEAP16[(129114)>>1]|0;
 $conv3$4 = $35 << 16 >> 16;
 $add5$4 = (($conv3$4) + 64)|0;
 $ch$0$ph$i$4 = (185760);$cy$0$ph$i$4 = $add5$4;
 L49: while(1) {
  $ch$0$i$4 = $ch$0$ph$i$4;$cx$0$i$4 = $conv2$4;
  L51: while(1) {
   $incdec$ptr$i$4 = ((($ch$0$i$4)) + 1|0);
   $36 = HEAP8[$ch$0$i$4>>0]|0;
   switch ($36<<24>>24) {
   case 0:  {
    break L49;
    break;
   }
   case 10:  {
    break L51;
    break;
   }
   default: {
   }
   }
   $conv$i$4 = $36 << 24 >> 24;
   $call$i$4 = (_toupper($conv$i$4)|0);
   $call$off$i$4 = (($call$i$4) + -33)|0;
   $37 = ($call$off$i$4>>>0)>(62);
   if ($37) {
    $add9$i$4 = (($cx$0$i$4) + 4)|0;
    $cx$0$i$4$be = $add9$i$4;
   } else {
    $arrayidx$i$4 = (184512 + ($call$off$i$4<<2)|0);
    $38 = HEAP32[$arrayidx$i$4>>2]|0;
    $39 = HEAPU8[$38>>0]|(HEAPU8[$38+1>>0]<<8);
    $conv11$i$4 = $39 << 16 >> 16;
    $add12$i$4 = (($cx$0$i$4) + ($conv11$i$4))|0;
    $cmp13$i$4 = ($add12$i$4|0)>(320);
    if ($cmp13$i$4) {
     break L49;
    }
    _V_DrawPatchDirect($cx$0$i$4,$cy$0$ph$i$4,$38);
    $cx$0$i$4$be = $add12$i$4;
   }
   $ch$0$i$4 = $incdec$ptr$i$4;$cx$0$i$4 = $cx$0$i$4$be;
  }
  $add$i$4 = (($cy$0$ph$i$4) + 12)|0;
  $ch$0$ph$i$4 = $incdec$ptr$i$4;$cy$0$ph$i$4 = $add$i$4;
 }
 $40 = HEAP16[(129112)>>1]|0;
 $conv$5 = $40 << 16 >> 16;
 $41 = HEAP16[(129114)>>1]|0;
 $conv1$5 = $41 << 16 >> 16;
 $add$5 = (($conv1$5) + 80)|0;
 _M_DrawSaveLoadBorder($conv$5,$add$5);
 $42 = HEAP16[(129112)>>1]|0;
 $conv2$5 = $42 << 16 >> 16;
 $43 = HEAP16[(129114)>>1]|0;
 $conv3$5 = $43 << 16 >> 16;
 $add5$5 = (($conv3$5) + 80)|0;
 $ch$0$ph$i$5 = (185784);$cy$0$ph$i$5 = $add5$5;
 L61: while(1) {
  $ch$0$i$5 = $ch$0$ph$i$5;$cx$0$i$5 = $conv2$5;
  L63: while(1) {
   $incdec$ptr$i$5 = ((($ch$0$i$5)) + 1|0);
   $44 = HEAP8[$ch$0$i$5>>0]|0;
   switch ($44<<24>>24) {
   case 0:  {
    label = 53;
    break L61;
    break;
   }
   case 10:  {
    break L63;
    break;
   }
   default: {
   }
   }
   $conv$i$5 = $44 << 24 >> 24;
   $call$i$5 = (_toupper($conv$i$5)|0);
   $call$off$i$5 = (($call$i$5) + -33)|0;
   $45 = ($call$off$i$5>>>0)>(62);
   if ($45) {
    $add9$i$5 = (($cx$0$i$5) + 4)|0;
    $cx$0$i$5$be = $add9$i$5;
   } else {
    $arrayidx$i$5 = (184512 + ($call$off$i$5<<2)|0);
    $46 = HEAP32[$arrayidx$i$5>>2]|0;
    $47 = HEAPU8[$46>>0]|(HEAPU8[$46+1>>0]<<8);
    $conv11$i$5 = $47 << 16 >> 16;
    $add12$i$5 = (($cx$0$i$5) + ($conv11$i$5))|0;
    $cmp13$i$5 = ($add12$i$5|0)>(320);
    if ($cmp13$i$5) {
     label = 53;
     break L61;
    }
    _V_DrawPatchDirect($cx$0$i$5,$cy$0$ph$i$5,$46);
    $cx$0$i$5$be = $add12$i$5;
   }
   $ch$0$i$5 = $incdec$ptr$i$5;$cx$0$i$5 = $cx$0$i$5$be;
  }
  $add$i$5 = (($cy$0$ph$i$5) + 12)|0;
  $ch$0$ph$i$5 = $incdec$ptr$i$5;$cy$0$ph$i$5 = $add$i$5;
 }
 if ((label|0) == 53) {
  return;
 }
}
function _M_SaveSelect($choice) {
 $choice = $choice|0;
 var $arraydecay = 0, $call3 = 0, $call8 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99393] = 1;
 HEAP32[99392] = $choice;
 $arraydecay = (185664 + (($choice*24)|0)|0);
 (_M_StringCopy(185904,$arraydecay,24)|0);
 $call3 = (_strcmp($arraydecay,150406)|0);
 $tobool = ($call3|0)==(0);
 if ($tobool) {
  HEAP8[$arraydecay>>0] = 0;
 }
 $call8 = (_strlen($arraydecay)|0);
 HEAP32[99394] = $call8;
 return;
}
function _M_DrawOptions() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add12 = 0, $add15 = 0, $add2 = 0, $add5 = 0, $add7 = 0;
 var $arrayidx = 0, $arrayidx8 = 0, $call = 0, $call3 = 0, $call9 = 0, $conv = 0, $conv1 = 0, $conv10 = 0, $conv11 = 0, $conv13 = 0, $conv14 = 0, $conv4 = 0, $conv6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_CacheLumpName(150515,8)|0);
 _V_DrawPatchDirect(108,15,$call);
 $0 = HEAP16[(129136)>>1]|0;
 $conv = $0 << 16 >> 16;
 $add = (($conv) + 175)|0;
 $1 = HEAP16[(129138)>>1]|0;
 $conv1 = $1 << 16 >> 16;
 $add2 = (($conv1) + 32)|0;
 $2 = HEAP32[99383]|0;
 $arrayidx = (129144 + ($2<<2)|0);
 $3 = HEAP32[$arrayidx>>2]|0;
 $call3 = (_W_CacheLumpName($3,8)|0);
 _V_DrawPatchDirect($add,$add2,$call3);
 $4 = HEAP16[(129136)>>1]|0;
 $conv4 = $4 << 16 >> 16;
 $add5 = (($conv4) + 120)|0;
 $5 = HEAP16[(129138)>>1]|0;
 $conv6 = $5 << 16 >> 16;
 $add7 = (($conv6) + 16)|0;
 $6 = HEAP32[32246]|0;
 $arrayidx8 = (129152 + ($6<<2)|0);
 $7 = HEAP32[$arrayidx8>>2]|0;
 $call9 = (_W_CacheLumpName($7,8)|0);
 _V_DrawPatchDirect($add5,$add7,$call9);
 $8 = HEAP16[(129136)>>1]|0;
 $conv10 = $8 << 16 >> 16;
 $9 = HEAP16[(129138)>>1]|0;
 $conv11 = $9 << 16 >> 16;
 $add12 = (($conv11) + 96)|0;
 $10 = HEAP32[32245]|0;
 _M_DrawThermo($conv10,$add12,10,$10);
 $11 = HEAP16[(129136)>>1]|0;
 $conv13 = $11 << 16 >> 16;
 $12 = HEAP16[(129138)>>1]|0;
 $conv14 = $12 << 16 >> 16;
 $add15 = (($conv14) + 64)|0;
 $13 = HEAP32[99395]|0;
 _M_DrawThermo($conv13,$add15,9,$13);
 return;
}
function _M_DrawThermo($x,$y,$thermWidth,$thermDot) {
 $x = $x|0;
 $y = $y|0;
 $thermWidth = $thermWidth|0;
 $thermDot = $thermDot|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $add2 = 0, $add5 = 0, $call = 0, $call1 = 0, $call3 = 0, $call6 = 0, $cmp10 = 0, $exitcond = 0, $i$012 = 0, $inc = 0, $mul = 0, $xx$0$lcssa = 0, $xx$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_CacheLumpName(150524,8)|0);
 _V_DrawPatchDirect($x,$y,$call);
 $add = (($x) + 8)|0;
 $cmp10 = ($thermWidth|0)>(0);
 if ($cmp10) {
  $0 = $thermWidth << 3;
  $1 = (($0) + ($x))|0;
  $i$012 = 0;$xx$011 = $add;
  while(1) {
   $call1 = (_W_CacheLumpName(150533,8)|0);
   _V_DrawPatchDirect($xx$011,$y,$call1);
   $add2 = (($xx$011) + 8)|0;
   $inc = (($i$012) + 1)|0;
   $exitcond = ($inc|0)==($thermWidth|0);
   if ($exitcond) {
    break;
   } else {
    $i$012 = $inc;$xx$011 = $add2;
   }
  }
  $2 = (($1) + 8)|0;
  $xx$0$lcssa = $2;
 } else {
  $xx$0$lcssa = $add;
 }
 $call3 = (_W_CacheLumpName(150542,8)|0);
 _V_DrawPatchDirect($xx$0$lcssa,$y,$call3);
 $mul = $thermDot << 3;
 $add5 = (($mul) + ($add))|0;
 $call6 = (_W_CacheLumpName(150551,8)|0);
 _V_DrawPatchDirect($add5,$y,$call6);
 return;
}
function _M_EndGame($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $2 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99157]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  _S_StartSound(0,34);
  return;
 }
 $1 = HEAP32[99094]|0;
 $tobool1 = ($1|0)==(0);
 $2 = HEAP32[99384]|0;
 HEAP32[99385] = $2;
 HEAP32[99386] = 1;
 if ($tobool1) {
  HEAP32[99387] = 150688;
  HEAP32[99388] = 129;
  HEAP32[99389] = 1;
  HEAP32[99384] = 1;
  return;
 } else {
  HEAP32[99387] = 150649;
  HEAP32[99388] = 0;
  HEAP32[99389] = 0;
  HEAP32[99384] = 1;
  return;
 }
}
function _M_ChangeMessages($choice) {
 $choice = $choice|0;
 var $$ = 0, $0 = 0, $1 = 0, $message2 = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32246]|0;
 $sub = (1 - ($0))|0;
 HEAP32[32246] = $sub;
 $tobool = ($sub|0)==(0);
 $1 = HEAP32[99076]|0;
 $message2 = (((181680 + (($1*288)|0)|0)) + 224|0);
 $$ = $tobool ? 150624 : 150637;
 HEAP32[$message2>>2] = $$;
 HEAP32[99180] = 1;
 return;
}
function _M_ChangeDetail($choice) {
 $choice = $choice|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $message2 = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99383]|0;
 $sub = (1 - ($0))|0;
 HEAP32[99383] = $sub;
 $1 = HEAP32[32247]|0;
 _R_SetViewSize($1,$sub);
 $2 = HEAP32[99383]|0;
 $tobool = ($2|0)==(0);
 $3 = HEAP32[99076]|0;
 $message2 = (((181680 + (($3*288)|0)|0)) + 224|0);
 $$ = $tobool ? 150601 : 150613;
 HEAP32[$message2>>2] = $$;
 return;
}
function _M_SizeDisplay($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cmp = 0, $cmp3 = 0, $dec = 0, $dec1 = 0, $inc = 0, $inc5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($choice|0) {
 case 0:  {
  $0 = HEAP32[99395]|0;
  $cmp = ($0|0)>(0);
  if ($cmp) {
   $dec1 = (($0) + -1)|0;
   $1 = HEAP32[32247]|0;
   $dec = (($1) + -1)|0;
   HEAP32[32247] = $dec;
   HEAP32[99395] = $dec1;
  }
  break;
 }
 case 1:  {
  $2 = HEAP32[99395]|0;
  $cmp3 = ($2|0)<(8);
  if ($cmp3) {
   $inc5 = (($2) + 1)|0;
   $3 = HEAP32[32247]|0;
   $inc = (($3) + 1)|0;
   HEAP32[32247] = $inc;
   HEAP32[99395] = $inc5;
  }
  break;
 }
 default: {
 }
 }
 $4 = HEAP32[32247]|0;
 $5 = HEAP32[99383]|0;
 _R_SetViewSize($4,$5);
 return;
}
function _M_ChangeSensitivity($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $cmp = 0, $dec = 0, $inc = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($choice|0) {
 case 0:  {
  $0 = HEAP32[32245]|0;
  $tobool = ($0|0)==(0);
  if ($tobool) {
   return;
  }
  $dec = (($0) + -1)|0;
  HEAP32[32245] = $dec;
  return;
  break;
 }
 case 1:  {
  $1 = HEAP32[32245]|0;
  $cmp = ($1|0)<(9);
  if (!($cmp)) {
   return;
  }
  $inc = (($1) + 1)|0;
  HEAP32[32245] = $inc;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _M_Sound($choice) {
 $choice = $choice|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99390] = 129160;
 $0 = HEAP16[(129180)>>1]|0;
 HEAP16[200055] = $0;
 return;
}
function _M_DrawSound() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add = 0, $add4 = 0, $call = 0, $conv = 0, $conv1 = 0, $conv2 = 0, $conv3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_CacheLumpName(150594,8)|0);
 _V_DrawPatchDirect(60,38,$call);
 $0 = HEAP16[(129176)>>1]|0;
 $conv = $0 << 16 >> 16;
 $1 = HEAP16[(129178)>>1]|0;
 $conv1 = $1 << 16 >> 16;
 $add = (($conv1) + 16)|0;
 $2 = HEAP32[32432]|0;
 _M_DrawThermo($conv,$add,16,$2);
 $3 = HEAP16[(129176)>>1]|0;
 $conv2 = $3 << 16 >> 16;
 $4 = HEAP16[(129178)>>1]|0;
 $conv3 = $4 << 16 >> 16;
 $add4 = (($conv3) + 48)|0;
 $5 = HEAP32[32433]|0;
 _M_DrawThermo($conv2,$add4,16,$5);
 return;
}
function _M_SfxVol($choice) {
 $choice = $choice|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $cmp = 0, $dec = 0, $inc = 0, $mul = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($choice|0) {
 case 0:  {
  $0 = HEAP32[32432]|0;
  $tobool = ($0|0)==(0);
  if ($tobool) {
   $2 = 0;
  } else {
   $dec = (($0) + -1)|0;
   HEAP32[32432] = $dec;
   $2 = $dec;
  }
  break;
 }
 case 1:  {
  $1 = HEAP32[32432]|0;
  $cmp = ($1|0)<(15);
  if ($cmp) {
   $inc = (($1) + 1)|0;
   HEAP32[32432] = $inc;
   $2 = $inc;
  } else {
   $2 = $1;
  }
  break;
 }
 default: {
  $$pre = HEAP32[32432]|0;
  $2 = $$pre;
 }
 }
 $mul = $2 << 3;
 _S_SetSfxVolume($mul);
 return;
}
function _M_MusicVol($choice) {
 $choice = $choice|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $cmp = 0, $dec = 0, $inc = 0, $mul = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($choice|0) {
 case 0:  {
  $0 = HEAP32[32433]|0;
  $tobool = ($0|0)==(0);
  if ($tobool) {
   $2 = 0;
  } else {
   $dec = (($0) + -1)|0;
   HEAP32[32433] = $dec;
   $2 = $dec;
  }
  break;
 }
 case 1:  {
  $1 = HEAP32[32433]|0;
  $cmp = ($1|0)<(15);
  if ($cmp) {
   $inc = (($1) + 1)|0;
   HEAP32[32433] = $inc;
   $2 = $inc;
  } else {
   $2 = $1;
  }
  break;
 }
 default: {
  $$pre = HEAP32[32433]|0;
  $2 = $$pre;
 }
 }
 $mul = $2 << 3;
 _S_SetMusicVolume($mul);
 return;
}
function _M_EndGameResponse($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $cmp = 0, $lastOn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32221]|0;
 $cmp = ($0|0)==($key|0);
 if (!($cmp)) {
  return;
 }
 $1 = HEAP16[200055]|0;
 $2 = HEAP32[99390]|0;
 $lastOn = ((($2)) + 20|0);
 HEAP16[$lastOn>>1] = $1;
 HEAP32[99384] = 0;
 _D_StartTitle();
 return;
}
function _M_DrawEpisode() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_CacheLumpName(150808,8)|0);
 _V_DrawPatchDirect(54,38,$call);
 return;
}
function _M_Episode($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $2 = 0, $choice$addr$0 = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $or$cond = 0, $or$cond1 = 0, $storemerge = 0, $storemerge$in = 0, $storemerge4 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32140]|0;
 $cmp = ($0|0)==(0);
 $tobool = ($choice|0)!=(0);
 $or$cond = $tobool & $cmp;
 if ($or$cond) {
  $1 = HEAP32[99384]|0;
  HEAP32[99385] = $1;
  HEAP32[99386] = 1;
  HEAP32[99387] = 150817;
  HEAP32[99388] = 0;
  HEAP32[99389] = 0;
  HEAP32[99384] = 1;
  $storemerge$in = (129020);$storemerge4 = 129000;
 } else {
  $cmp1 = ($0|0)==(1);
  $cmp3 = ($choice|0)>(2);
  $or$cond1 = $cmp3 & $cmp1;
  if ($or$cond1) {
   $2 = HEAP32[32441]|0;
   (_fwrite(150909,45,1,$2)|0);
   $choice$addr$0 = 0;
  } else {
   $choice$addr$0 = $choice;
  }
  HEAP32[99396] = $choice$addr$0;
  $storemerge$in = (129204);$storemerge4 = 129184;
 }
 HEAP32[99390] = $storemerge4;
 $storemerge = HEAP16[$storemerge$in>>1]|0;
 HEAP16[200055] = $storemerge;
 return;
}
function _M_DrawNewGame() {
 var $call = 0, $call1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_CacheLumpName(150955,8)|0);
 _V_DrawPatchDirect(96,14,$call);
 $call1 = (_W_CacheLumpName(150962,8)|0);
 _V_DrawPatchDirect(54,38,$call1);
 return;
}
function _M_ChooseSkill($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $add = 0, $cmp = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($choice|0)==(4);
 if ($cmp) {
  $0 = HEAP32[99384]|0;
  HEAP32[99385] = $0;
  HEAP32[99386] = 1;
  HEAP32[99387] = 150970;
  HEAP32[99388] = 130;
  HEAP32[99389] = 1;
  $storemerge = 1;
  HEAP32[99384] = $storemerge;
  return;
 } else {
  $1 = HEAP32[99396]|0;
  $add = (($1) + 1)|0;
  _G_DeferedInitNew($choice,$add,1);
  $storemerge = 0;
  HEAP32[99384] = $storemerge;
  return;
 }
}
function _M_VerifyNightmare($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $add = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32221]|0;
 $cmp = ($0|0)==($key|0);
 if (!($cmp)) {
  return;
 }
 $1 = HEAP32[99396]|0;
 $add = (($1) + 1)|0;
 _G_DeferedInitNew(4,$add,1);
 HEAP32[99384] = 0;
 return;
}
function _M_QuickSaveResponse($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $arraydecay$i = 0, $cmp = 0, $cmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32221]|0;
 $cmp = ($0|0)==($key|0);
 if (!($cmp)) {
  return;
 }
 $1 = HEAP32[99397]|0;
 $arraydecay$i = (185664 + (($1*24)|0)|0);
 _G_SaveGame($1,$arraydecay$i);
 HEAP32[99384] = 0;
 $2 = HEAP32[99397]|0;
 $cmp$i = ($2|0)==(-2);
 if ($cmp$i) {
  HEAP32[99397] = $1;
 }
 _S_StartSound(0,24);
 return;
}
function _M_StartControlPanel() {
 var $0 = 0, $1 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99384]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  return;
 }
 HEAP32[99384] = 1;
 HEAP32[99390] = 129024;
 $1 = HEAP16[(129044)>>1]|0;
 HEAP16[200055] = $1;
 return;
}
function _M_QuickLoadResponse($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $call$i = 0, $cmp = 0, $name$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $name$i = sp;
 $0 = HEAP32[32221]|0;
 $cmp = ($0|0)==($key|0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[99397]|0;
 $call$i = (_P_SaveGameFile($1)|0);
 (_M_StringCopy($name$i,$call$i,256)|0);
 _G_LoadGame($name$i);
 HEAP32[99384] = 0;
 _S_StartSound(0,24);
 STACKTOP = sp;return;
}
function _M_Responder($ev) {
 $ev = $ev|0;
 var $$$i = 0, $$$i127 = 0, $$pr = 0, $$pr151 = 0, $$pre = 0, $$pre$i = 0, $$pre172 = 0, $$pre173 = 0, $$pre174 = 0, $$pre175 = 0, $$pre176 = 0, $$pre177 = 0, $$pre178 = 0, $$sink189 = 0, $$sink191 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReadDef2$ReadDef1 = 0, $add102 = 0, $add115 = 0, $add122 = 0;
 var $add33 = 0, $add45 = 0, $add52 = 0, $add59 = 0, $add68 = 0, $add78 = 0, $add8$i = 0, $add82 = 0, $add85 = 0, $add94 = 0, $add99 = 0, $alphaKey = 0, $alphaKey479 = 0, $and = 0, $and$i = 0, $and111 = 0, $and118 = 0, $and55 = 0, $and64 = 0, $arraydecay = 0;
 var $arraydecay$i119 = 0, $arraydecay$i133 = 0, $arraydecay171 = 0, $arraydecay289 = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i$i138 = 0, $arrayidx$phi$trans$insert$i = 0, $arrayidx140 = 0, $arrayidx147 = 0, $arrayidx176149 = 0, $arrayidx178150 = 0, $arrayidx6$i = 0, $arrayidx6$i86 = 0, $call = 0, $call$i = 0, $call1$i84 = 0, $call1$off$i = 0, $call114 = 0, $call121 = 0;
 var $call154 = 0, $call154$off = 0, $call154$off153 = 0, $call291 = 0, $call32 = 0, $call44 = 0, $call51 = 0, $call58 = 0, $call67 = 0, $call74 = 0, $call81 = 0, $call98 = 0, $ch$0 = 0, $cmp = 0, $cmp$i100 = 0, $cmp$i114 = 0, $cmp$i130 = 0, $cmp$i82 = 0, $cmp$i88 = 0, $cmp$i89 = 0;
 var $cmp103 = 0, $cmp12$i = 0, $cmp126 = 0, $cmp133 = 0, $cmp138 = 0, $cmp155 = 0, $cmp16 = 0, $cmp168 = 0, $cmp173 = 0, $cmp191 = 0, $cmp194 = 0, $cmp2 = 0, $cmp2$i = 0, $cmp205 = 0, $cmp208 = 0, $cmp21 = 0, $cmp211 = 0, $cmp217 = 0, $cmp226 = 0, $cmp23 = 0;
 var $cmp238 = 0, $cmp244 = 0, $cmp248 = 0, $cmp25 = 0, $cmp252 = 0, $cmp256 = 0, $cmp260 = 0, $cmp264 = 0, $cmp268 = 0, $cmp272 = 0, $cmp276 = 0, $cmp280 = 0, $cmp284 = 0, $cmp3 = 0, $cmp3$i = 0, $cmp3$i116 = 0, $cmp30 = 0, $cmp308 = 0, $cmp313 = 0, $cmp320 = 0;
 var $cmp328 = 0, $cmp331 = 0, $cmp350 = 0, $cmp354 = 0, $cmp36 = 0, $cmp367 = 0, $cmp376 = 0, $cmp390 = 0, $cmp399 = 0, $cmp42 = 0, $cmp420 = 0, $cmp436 = 0, $cmp441 = 0, $cmp451 = 0, $cmp461 = 0, $cmp461166 = 0, $cmp466 = 0, $cmp474 = 0, $cmp474161 = 0, $cmp481 = 0;
 var $cmp6 = 0, $cmp61 = 0, $cmp65 = 0, $cmp72 = 0, $cmp75 = 0, $cmp79 = 0, $cmp86 = 0, $cmp96 = 0, $conv = 0, $conv$i = 0, $conv316 = 0, $conv318 = 0, $conv33874 = 0, $conv340 = 0, $conv457 = 0, $conv460165 = 0, $conv465 = 0, $conv469 = 0, $conv480 = 0, $conv484 = 0;
 var $conv7$i = 0, $conv7$i$sink = 0, $data1 = 0, $data1110 = 0, $data1128 = 0, $data148 = 0, $data2 = 0, $data2129 = 0, $data293 = 0, $data3 = 0, $data377 = 0, $dec = 0, $dec$i = 0, $dec1$i = 0, $dec342 = 0, $endmsg$0$i$i = 0, $endmsg$0$i$i136 = 0, $i$0 = 0, $i$014$i = 0, $i$0163 = 0;
 var $i$0167 = 0, $i$1162 = 0, $idxprom = 0, $idxprom346 = 0, $idxprom358 = 0, $idxprom371 = 0, $idxprom380 = 0, $idxprom394 = 0, $idxprom403 = 0, $inc$i = 0, $inc$i91 = 0, $inc145$pn = 0, $inc283 = 0, $inc324 = 0, $inc487 = 0, $inc5$i = 0, $key$0 = 0, $key$1 = 0, $key$2 = 0, $key$3 = 0;
 var $key$4 = 0, $key$5 = 0, $key$6 = 0, $key$7 = 0, $key_menu_down$sink = 0, $key_menu_down$sink190 = 0, $key_menu_left$sink = 0, $key_menu_right$sink = 0, $lastOn = 0, $lastOn439 = 0, $lastOn444 = 0, $lastOn448 = 0, $menuitems = 0, $menuitems345 = 0, $menuitems357 = 0, $menuitems370 = 0, $menuitems379 = 0, $menuitems393 = 0, $menuitems402 = 0, $menuitems463$phi$trans$insert = 0;
 var $menuitems477 = 0, $message = 0, $message2$i = 0, $message2$i126 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond155 = 0, $or$cond3 = 0, $or$cond77 = 0, $or$cond79 = 0, $or$cond80 = 0, $or$cond81 = 0, $prevMenu = 0, $rem$i$i = 0, $rem$i$i137 = 0, $retval$0 = 0, $routine = 0, $routine373 = 0, $routine382 = 0, $routine396 = 0;
 var $routine405 = 0, $shl = 0, $spec$select = 0, $spec$store$select = 0, $status = 0, $status348 = 0, $status365 = 0, $status388 = 0, $status411 = 0, $storemerge = 0, $storemerge75 = 0, $strlenfirst$i = 0, $sub = 0, $sub$i = 0, $sub$i124 = 0, $sub100 = 0, $sub319 = 0, $sub339 = 0, $sub83 = 0, $sub95 = 0;
 var $tobool = 0, $tobool$i = 0, $tobool$i$i = 0, $tobool$i105 = 0, $tobool$i111 = 0, $tobool$i112 = 0, $tobool$i121 = 0, $tobool$i125 = 0, $tobool$i128 = 0, $tobool$i98 = 0, $tobool1$i = 0, $tobool112 = 0, $tobool119 = 0, $tobool12 = 0, $tobool136 = 0, $tobool14 = 0, $tobool148 = 0, $tobool151 = 0, $tobool181 = 0, $tobool183 = 0;
 var $tobool199 = 0, $tobool203 = 0, $tobool215 = 0, $tobool335 = 0, $tobool360 = 0, $tobool383 = 0, $tobool406 = 0, $tobool413 = 0, $tobool445 = 0, $tobool49 = 0, $tobool56 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $w$013$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[99075]|0;
 $tobool = ($0|0)==(0);
 $1 = HEAP32[$ev>>2]|0;
 $cmp = ($1|0)==(4);
 if (!($tobool)) {
  if (!($cmp)) {
   $cmp2 = ($1|0)==(0);
   if (!($cmp2)) {
    $retval$0 = 0;
    STACKTOP = sp;return ($retval$0|0);
   }
   $data1 = ((($ev)) + 4|0);
   $2 = HEAP32[$data1>>2]|0;
   $3 = HEAP32[32214]|0;
   $cmp3 = ($2|0)==($3|0);
   $4 = HEAP32[32232]|0;
   $cmp6 = ($2|0)==($4|0);
   $or$cond77 = $cmp3 | $cmp6;
   if (!($or$cond77)) {
    $retval$0 = 0;
    STACKTOP = sp;return ($retval$0|0);
   }
  }
  _I_Quit();
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 if ($cmp) {
  $5 = HEAP32[99384]|0;
  $tobool12 = ($5|0)!=(0);
  $6 = HEAP32[99386]|0;
  $tobool14 = ($6|0)!=(0);
  $or$cond = $tobool12 & $tobool14;
  $7 = HEAP32[99388]|0;
  $cmp16 = ($7|0)==(128|0);
  $or$cond1 = $or$cond & $cmp16;
  if (!($or$cond1)) {
   _S_StartSound(0,23);
   $14 = HEAP32[99015]|0;
   $15 = $14 | 4;
   $16 = ($15|0)==(4);
   $endmsg$0$i$i = $16 ? 432 : 464;
   $17 = HEAP32[99024]|0;
   $rem$i$i = (($17|0) % 8)&-1;
   $arrayidx$i$i = (($endmsg$0$i$i) + ($rem$i$i<<2)|0);
   $18 = HEAP32[$arrayidx$i$i>>2]|0;
   HEAP32[$vararg_buffer>>2] = $18;
   (_snprintf(185504,160,150277,$vararg_buffer)|0);
   $19 = HEAP32[99384]|0;
   HEAP32[99385] = $19;
   HEAP32[99386] = 1;
   HEAP32[99387] = 185504;
   HEAP32[99388] = 128;
   HEAP32[99389] = 1;
   HEAP32[99384] = 1;
   $retval$0 = 1;
   STACKTOP = sp;return ($retval$0|0);
  }
  $8 = HEAP32[99094]|0;
  $tobool$i = ($8|0)==(0);
  if ($tobool$i) {
   $9 = HEAP32[32140]|0;
   $cmp2$i = ($9|0)==(2);
   $10 = HEAP32[99024]|0;
   $11 = $10 >>> 2;
   $and$i = $11 & 7;
   if ($cmp2$i) {
    $arrayidx$i = (48192 + ($and$i<<2)|0);
    $12 = HEAP32[$arrayidx$i>>2]|0;
    _S_StartSound(0,$12);
   } else {
    $arrayidx6$i = (48224 + ($and$i<<2)|0);
    $13 = HEAP32[$arrayidx6$i>>2]|0;
    _S_StartSound(0,$13);
   }
  }
  _I_Quit();
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $cmp21 = ($1|0)==(3);
 do {
  if ($cmp21) {
   $20 = HEAP32[99398]|0;
   $call = (_I_GetTime()|0);
   $cmp23 = ($20|0)<($call|0);
   if (!($cmp23)) {
    $$pr = HEAP32[$ev>>2]|0;
    $32 = $$pr;
    label = 31;
    break;
   }
   $data3 = ((($ev)) + 12|0);
   $21 = HEAP32[$data3>>2]|0;
   $cmp25 = ($21|0)<(0);
   if ($cmp25) {
    $key_menu_down$sink = 128860;
    label = 19;
   } else {
    $cmp30 = ($21|0)==(0);
    if ($cmp30) {
     $key$0 = -1;
    } else {
     $key_menu_down$sink = 128864;
     label = 19;
    }
   }
   if ((label|0) == 19) {
    $22 = HEAP32[$key_menu_down$sink>>2]|0;
    $call32 = (_I_GetTime()|0);
    $add33 = (($call32) + 5)|0;
    HEAP32[99398] = $add33;
    $key$0 = $22;
   }
   $data2 = ((($ev)) + 8|0);
   $23 = HEAP32[$data2>>2]|0;
   $cmp36 = ($23|0)<(0);
   if ($cmp36) {
    $key_menu_right$sink = 128868;
    label = 22;
   } else {
    $cmp42 = ($23|0)==(0);
    if ($cmp42) {
     $key$1 = $key$0;
    } else {
     $key_menu_right$sink = 128872;
     label = 22;
    }
   }
   if ((label|0) == 22) {
    $24 = HEAP32[$key_menu_right$sink>>2]|0;
    $call44 = (_I_GetTime()|0);
    $add45 = (($call44) + 2)|0;
    HEAP32[99398] = $add45;
    $key$1 = $24;
   }
   $data148 = ((($ev)) + 4|0);
   $25 = HEAP32[$data148>>2]|0;
   $and = $25 & 1;
   $tobool49 = ($and|0)==(0);
   if ($tobool49) {
    $27 = $25;$key$2 = $key$1;
   } else {
    $26 = HEAP32[32220]|0;
    $call51 = (_I_GetTime()|0);
    $add52 = (($call51) + 5)|0;
    HEAP32[99398] = $add52;
    $$pre173 = HEAP32[$data148>>2]|0;
    $27 = $$pre173;$key$2 = $26;
   }
   $and55 = $27 & 2;
   $tobool56 = ($and55|0)==(0);
   if ($tobool56) {
    $key$3 = $key$2;
   } else {
    $28 = HEAP32[32219]|0;
    $call58 = (_I_GetTime()|0);
    $add59 = (($call58) + 5)|0;
    HEAP32[99398] = $add59;
    $key$3 = $28;
   }
   $29 = HEAP32[32243]|0;
   $cmp61 = ($29|0)>(-1);
   if ($cmp61) {
    $30 = HEAP32[$data148>>2]|0;
    $shl = 1 << $29;
    $and64 = $30 & $shl;
    $cmp65 = ($and64|0)==(0);
    if ($cmp65) {
     $ch$0 = 0;$key$7 = $key$3;
    } else {
     $31 = HEAP32[32214]|0;
     $call67 = (_I_GetTime()|0);
     $add68 = (($call67) + 5)|0;
     HEAP32[99398] = $add68;
     $ch$0 = 0;$key$7 = $31;
    }
   } else {
    $ch$0 = 0;$key$7 = $key$3;
   }
  } else {
   $32 = $1;
   label = 31;
  }
 } while(0);
 L50: do {
  if ((label|0) == 31) {
   $cmp72 = ($32|0)==(2);
   do {
    if ($cmp72) {
     $33 = HEAP32[99399]|0;
     $call74 = (_I_GetTime()|0);
     $cmp75 = ($33|0)<($call74|0);
     if (!($cmp75)) {
      $$pre = HEAP32[$ev>>2]|0;
      $48 = $$pre;
      break;
     }
     $data377 = ((($ev)) + 12|0);
     $34 = HEAP32[$data377>>2]|0;
     $35 = HEAP32[99400]|0;
     $add78 = (($35) + ($34))|0;
     HEAP32[99400] = $add78;
     $36 = HEAP32[99401]|0;
     $sub = (($36) + -30)|0;
     $cmp79 = ($add78|0)<($sub|0);
     if ($cmp79) {
      $$sink189 = -30;$key_menu_down$sink190 = 128864;
      label = 36;
     } else {
      $add85 = (($36) + 30)|0;
      $cmp86 = ($add78|0)>($add85|0);
      if ($cmp86) {
       $$sink189 = 30;$key_menu_down$sink190 = 128860;
       label = 36;
      } else {
       $key$4 = -1;
      }
     }
     if ((label|0) == 36) {
      $37 = HEAP32[$key_menu_down$sink190>>2]|0;
      $call81 = (_I_GetTime()|0);
      $add82 = (($call81) + 5)|0;
      HEAP32[99399] = $add82;
      $38 = HEAP32[99401]|0;
      $sub83 = (($38) + ($$sink189))|0;
      HEAP32[99401] = $sub83;
      HEAP32[99400] = $sub83;
      $key$4 = $37;
     }
     $data293 = ((($ev)) + 8|0);
     $39 = HEAP32[$data293>>2]|0;
     $40 = HEAP32[99402]|0;
     $add94 = (($40) + ($39))|0;
     HEAP32[99402] = $add94;
     $41 = HEAP32[99403]|0;
     $sub95 = (($41) + -30)|0;
     $cmp96 = ($add94|0)<($sub95|0);
     if ($cmp96) {
      $$sink191 = -30;$key_menu_left$sink = 128868;
      label = 39;
     } else {
      $add102 = (($41) + 30)|0;
      $cmp103 = ($add94|0)>($add102|0);
      if ($cmp103) {
       $$sink191 = 30;$key_menu_left$sink = 128872;
       label = 39;
      } else {
       $key$5 = $key$4;
      }
     }
     if ((label|0) == 39) {
      $42 = HEAP32[$key_menu_left$sink>>2]|0;
      $call98 = (_I_GetTime()|0);
      $add99 = (($call98) + 5)|0;
      HEAP32[99399] = $add99;
      $43 = HEAP32[99403]|0;
      $sub100 = (($43) + ($$sink191))|0;
      HEAP32[99403] = $sub100;
      HEAP32[99402] = $sub100;
      $key$5 = $42;
     }
     $data1110 = ((($ev)) + 4|0);
     $44 = HEAP32[$data1110>>2]|0;
     $and111 = $44 & 1;
     $tobool112 = ($and111|0)==(0);
     if ($tobool112) {
      $46 = $44;$key$6 = $key$5;
     } else {
      $45 = HEAP32[32220]|0;
      $call114 = (_I_GetTime()|0);
      $add115 = (($call114) + 15)|0;
      HEAP32[99399] = $add115;
      $$pre172 = HEAP32[$data1110>>2]|0;
      $46 = $$pre172;$key$6 = $45;
     }
     $and118 = $46 & 2;
     $tobool119 = ($and118|0)==(0);
     if ($tobool119) {
      $ch$0 = 0;$key$7 = $key$6;
      break L50;
     }
     $47 = HEAP32[32219]|0;
     $call121 = (_I_GetTime()|0);
     $add122 = (($call121) + 15)|0;
     HEAP32[99399] = $add122;
     $ch$0 = 0;$key$7 = $47;
     break L50;
    } else {
     $48 = $32;
    }
   } while(0);
   $cmp126 = ($48|0)==(0);
   if ($cmp126) {
    $data1128 = ((($ev)) + 4|0);
    $49 = HEAP32[$data1128>>2]|0;
    $data2129 = ((($ev)) + 8|0);
    $50 = HEAP32[$data2129>>2]|0;
    $ch$0 = $50;$key$7 = $49;
    break;
   } else {
    $retval$0 = 0;
    STACKTOP = sp;return ($retval$0|0);
   }
  }
 } while(0);
 $cmp133 = ($key$7|0)==(-1);
 if ($cmp133) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $51 = HEAP32[99393]|0;
 $tobool136 = ($51|0)==(0);
 if (!($tobool136)) {
  switch ($key$7|0) {
  case 127:  {
   $52 = HEAP32[99394]|0;
   $cmp138 = ($52|0)>(0);
   $dec = (($52) + -1)|0;
   if (!($cmp138)) {
    $retval$0 = 1;
    STACKTOP = sp;return ($retval$0|0);
   }
   HEAP32[99394] = $dec;
   $53 = HEAP32[99392]|0;
   $arrayidx140 = ((185664 + (($53*24)|0)|0) + ($dec)|0);
   HEAP8[$arrayidx140>>0] = 0;
   $retval$0 = 1;
   STACKTOP = sp;return ($retval$0|0);
   break;
  }
  case 27:  {
   HEAP32[99393] = 0;
   $54 = HEAP32[99392]|0;
   $arraydecay = (185664 + (($54*24)|0)|0);
   (_M_StringCopy($arraydecay,185904,24)|0);
   $retval$0 = 1;
   STACKTOP = sp;return ($retval$0|0);
   break;
  }
  case 13:  {
   HEAP32[99393] = 0;
   $55 = HEAP32[99392]|0;
   $arrayidx147 = (185664 + (($55*24)|0)|0);
   $56 = HEAP8[$arrayidx147>>0]|0;
   $tobool148 = ($56<<24>>24)==(0);
   if ($tobool148) {
    $retval$0 = 1;
    STACKTOP = sp;return ($retval$0|0);
   }
   _G_SaveGame($55,$arrayidx147);
   HEAP32[99384] = 0;
   $57 = HEAP32[99397]|0;
   $cmp$i82 = ($57|0)==(-2);
   if (!($cmp$i82)) {
    $retval$0 = 1;
    STACKTOP = sp;return ($retval$0|0);
   }
   HEAP32[99397] = $55;
   $retval$0 = 1;
   STACKTOP = sp;return ($retval$0|0);
   break;
  }
  default: {
   $tobool151 = (1)==(0);
   $spec$select = $tobool151 ? $ch$0 : $key$7;
   $call154 = (_toupper($spec$select)|0);
   $cmp155 = ($call154|0)!=(32);
   $call154$off153 = (($call154) + -33)|0;
   $58 = ($call154$off153>>>0)>(62);
   $or$cond155 = $cmp155 & $58;
   if ($or$cond155) {
    $retval$0 = 1;
    STACKTOP = sp;return ($retval$0|0);
   }
   $call154$off = (($call154) + -32)|0;
   $59 = ($call154$off>>>0)<(96);
   $60 = HEAP32[99394]|0;
   $cmp168 = ($60|0)<(23);
   $or$cond3 = $59 & $cmp168;
   if (!($or$cond3)) {
    $retval$0 = 1;
    STACKTOP = sp;return ($retval$0|0);
   }
   $61 = HEAP32[99392]|0;
   $arraydecay171 = (185664 + (($61*24)|0)|0);
   $strlenfirst$i = HEAP8[$arraydecay171>>0]|0;
   $cmp12$i = ($strlenfirst$i<<24>>24)==(0);
   if (!($cmp12$i)) {
    $call$i = (_strlen($arraydecay171)|0);
    $62 = $strlenfirst$i;$i$014$i = 0;$w$013$i = 0;
    while(1) {
     $conv$i = $62 << 24 >> 24;
     $call1$i84 = (_toupper($conv$i)|0);
     $call1$off$i = (($call1$i84) + -33)|0;
     $63 = ($call1$off$i>>>0)>(62);
     if ($63) {
      $conv7$i$sink = 4;
     } else {
      $arrayidx6$i86 = (184512 + ($call1$off$i<<2)|0);
      $64 = HEAP32[$arrayidx6$i86>>2]|0;
      $65 = HEAPU8[$64>>0]|(HEAPU8[$64+1>>0]<<8);
      $conv7$i = $65 << 16 >> 16;
      $conv7$i$sink = $conv7$i;
     }
     $add8$i = (($w$013$i) + ($conv7$i$sink))|0;
     $inc$i = (($i$014$i) + 1)|0;
     $cmp$i88 = ($inc$i>>>0)<($call$i>>>0);
     if (!($cmp$i88)) {
      break;
     }
     $arrayidx$phi$trans$insert$i = ((185664 + (($61*24)|0)|0) + ($inc$i)|0);
     $$pre$i = HEAP8[$arrayidx$phi$trans$insert$i>>0]|0;
     $62 = $$pre$i;$i$014$i = $inc$i;$w$013$i = $add8$i;
    }
    $cmp173 = ($add8$i|0)<(176);
    if (!($cmp173)) {
     $retval$0 = 1;
     STACKTOP = sp;return ($retval$0|0);
    }
   }
   $inc145$pn = (($60) + 1)|0;
   $arrayidx176149 = ((185664 + (($61*24)|0)|0) + ($60)|0);
   $arrayidx178150 = ((185664 + (($61*24)|0)|0) + ($inc145$pn)|0);
   $conv = $call154&255;
   HEAP32[99394] = $inc145$pn;
   HEAP8[$arrayidx176149>>0] = $conv;
   HEAP8[$arrayidx178150>>0] = 0;
   $retval$0 = 1;
   STACKTOP = sp;return ($retval$0|0);
  }
  }
 }
 $66 = HEAP32[99386]|0;
 $tobool181 = ($66|0)==(0);
 if (!($tobool181)) {
  $67 = HEAP32[99389]|0;
  $tobool183 = ($67|0)==(0);
  L119: do {
   if (!($tobool183)) {
    switch ($key$7|0) {
    case 27: case 32:  {
     break L119;
     break;
    }
    default: {
    }
    }
    $68 = HEAP32[32221]|0;
    $cmp191 = ($key$7|0)==($68|0);
    $69 = HEAP32[32222]|0;
    $cmp194 = ($key$7|0)==($69|0);
    $or$cond79 = $cmp191 | $cmp194;
    if (!($or$cond79)) {
     $retval$0 = 0;
     STACKTOP = sp;return ($retval$0|0);
    }
   }
  } while(0);
  $70 = HEAP32[99385]|0;
  HEAP32[99384] = $70;
  HEAP32[99386] = 0;
  $71 = HEAP32[99388]|0;
  $tobool199 = ($71|0)==(0|0);
  if (!($tobool199)) {
   FUNCTION_TABLE_vi[$71 & 255]($key$7);
  }
  HEAP32[99384] = 0;
  _S_StartSound(0,24);
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $72 = HEAP32[99043]|0;
 $tobool203 = ($72|0)!=(0);
 $73 = HEAP32[32223]|0;
 $cmp205 = ($key$7|0)==($73|0);
 $or$cond80 = $tobool203 & $cmp205;
 if (!($or$cond80)) {
  $cmp208 = ($key$7|0)!=(0);
  $74 = HEAP32[99381]|0;
  $cmp211 = ($key$7|0)==($74|0);
  $or$cond81 = $cmp208 & $cmp211;
  if (!($or$cond81)) {
   $75 = HEAP32[99384]|0;
   $tobool215 = ($75|0)==(0);
   if (!($tobool215)) {
    $145 = HEAP32[32216]|0;
    $cmp313 = ($key$7|0)==($145|0);
    if ($cmp313) {
     $$pre175 = HEAP16[200055]|0;
     $$pre176 = HEAP32[99390]|0;
     $146 = $$pre175;$148 = $$pre176;
     while(1) {
      $conv316 = $146 << 16 >> 16;
      $147 = HEAP16[$148>>1]|0;
      $conv318 = $147 << 16 >> 16;
      $sub319 = (($conv318) + -1)|0;
      $cmp320 = ($sub319|0)>($conv316|0);
      $inc324 = (($146) + 1)<<16>>16;
      $storemerge75 = $cmp320 ? $inc324 : 0;
      HEAP16[200055] = $storemerge75;
      _S_StartSound(0,19);
      $149 = HEAP32[99390]|0;
      $menuitems = ((($149)) + 8|0);
      $150 = HEAP32[$menuitems>>2]|0;
      $151 = HEAP16[200055]|0;
      $idxprom = $151 << 16 >> 16;
      $status = (($150) + (($idxprom*20)|0)|0);
      $152 = HEAP16[$status>>1]|0;
      $cmp328 = ($152<<16>>16)==(-1);
      if ($cmp328) {
       $146 = $151;$148 = $149;
      } else {
       $retval$0 = 1;
       break;
      }
     }
     STACKTOP = sp;return ($retval$0|0);
    }
    $153 = HEAP32[32215]|0;
    $cmp331 = ($key$7|0)==($153|0);
    if ($cmp331) {
     $$pr151 = HEAP16[200055]|0;
     $154 = $$pr151;
     while(1) {
      $tobool335 = ($154<<16>>16)==(0);
      if ($tobool335) {
       $155 = HEAP32[99390]|0;
       $156 = HEAP16[$155>>1]|0;
       $conv33874 = $156&65535;
       $sub339 = (($conv33874) + 65535)|0;
       $conv340 = $sub339&65535;
       $storemerge = $conv340;
      } else {
       $dec342 = (($154) + -1)<<16>>16;
       $storemerge = $dec342;
      }
      HEAP16[200055] = $storemerge;
      _S_StartSound(0,19);
      $157 = HEAP32[99390]|0;
      $menuitems345 = ((($157)) + 8|0);
      $158 = HEAP32[$menuitems345>>2]|0;
      $159 = HEAP16[200055]|0;
      $idxprom346 = $159 << 16 >> 16;
      $status348 = (($158) + (($idxprom346*20)|0)|0);
      $160 = HEAP16[$status348>>1]|0;
      $cmp350 = ($160<<16>>16)==(-1);
      if ($cmp350) {
       $154 = $159;
      } else {
       $retval$0 = 1;
       break;
      }
     }
     STACKTOP = sp;return ($retval$0|0);
    }
    $161 = HEAP32[32217]|0;
    $cmp354 = ($key$7|0)==($161|0);
    if ($cmp354) {
     $162 = HEAP32[99390]|0;
     $menuitems357 = ((($162)) + 8|0);
     $163 = HEAP32[$menuitems357>>2]|0;
     $164 = HEAP16[200055]|0;
     $idxprom358 = $164 << 16 >> 16;
     $routine = (((($163) + (($idxprom358*20)|0)|0)) + 12|0);
     $165 = HEAP32[$routine>>2]|0;
     $tobool360 = ($165|0)==(0|0);
     if ($tobool360) {
      $retval$0 = 1;
      STACKTOP = sp;return ($retval$0|0);
     }
     $status365 = (($163) + (($idxprom358*20)|0)|0);
     $166 = HEAP16[$status365>>1]|0;
     $cmp367 = ($166<<16>>16)==(2);
     if (!($cmp367)) {
      $retval$0 = 1;
      STACKTOP = sp;return ($retval$0|0);
     }
     _S_StartSound(0,22);
     $167 = HEAP32[99390]|0;
     $menuitems370 = ((($167)) + 8|0);
     $168 = HEAP32[$menuitems370>>2]|0;
     $169 = HEAP16[200055]|0;
     $idxprom371 = $169 << 16 >> 16;
     $routine373 = (((($168) + (($idxprom371*20)|0)|0)) + 12|0);
     $170 = HEAP32[$routine373>>2]|0;
     FUNCTION_TABLE_vi[$170 & 255](0);
     $retval$0 = 1;
     STACKTOP = sp;return ($retval$0|0);
    }
    $171 = HEAP32[32218]|0;
    $cmp376 = ($key$7|0)==($171|0);
    if ($cmp376) {
     $172 = HEAP32[99390]|0;
     $menuitems379 = ((($172)) + 8|0);
     $173 = HEAP32[$menuitems379>>2]|0;
     $174 = HEAP16[200055]|0;
     $idxprom380 = $174 << 16 >> 16;
     $routine382 = (((($173) + (($idxprom380*20)|0)|0)) + 12|0);
     $175 = HEAP32[$routine382>>2]|0;
     $tobool383 = ($175|0)==(0|0);
     if ($tobool383) {
      $retval$0 = 1;
      STACKTOP = sp;return ($retval$0|0);
     }
     $status388 = (($173) + (($idxprom380*20)|0)|0);
     $176 = HEAP16[$status388>>1]|0;
     $cmp390 = ($176<<16>>16)==(2);
     if (!($cmp390)) {
      $retval$0 = 1;
      STACKTOP = sp;return ($retval$0|0);
     }
     _S_StartSound(0,22);
     $177 = HEAP32[99390]|0;
     $menuitems393 = ((($177)) + 8|0);
     $178 = HEAP32[$menuitems393>>2]|0;
     $179 = HEAP16[200055]|0;
     $idxprom394 = $179 << 16 >> 16;
     $routine396 = (((($178) + (($idxprom394*20)|0)|0)) + 12|0);
     $180 = HEAP32[$routine396>>2]|0;
     FUNCTION_TABLE_vi[$180 & 255](1);
     $retval$0 = 1;
     STACKTOP = sp;return ($retval$0|0);
    }
    $181 = HEAP32[32220]|0;
    $cmp399 = ($key$7|0)==($181|0);
    if ($cmp399) {
     $182 = HEAP32[99390]|0;
     $menuitems402 = ((($182)) + 8|0);
     $183 = HEAP32[$menuitems402>>2]|0;
     $184 = HEAP16[200055]|0;
     $idxprom403 = $184 << 16 >> 16;
     $routine405 = (((($183) + (($idxprom403*20)|0)|0)) + 12|0);
     $185 = HEAP32[$routine405>>2]|0;
     $tobool406 = ($185|0)==(0|0);
     if ($tobool406) {
      $retval$0 = 1;
      STACKTOP = sp;return ($retval$0|0);
     }
     $status411 = (($183) + (($idxprom403*20)|0)|0);
     $186 = HEAP16[$status411>>1]|0;
     $tobool413 = ($186<<16>>16)==(0);
     if ($tobool413) {
      $retval$0 = 1;
      STACKTOP = sp;return ($retval$0|0);
     }
     $lastOn = ((($182)) + 20|0);
     HEAP16[$lastOn>>1] = $184;
     $cmp420 = ($186<<16>>16)==(2);
     if ($cmp420) {
      FUNCTION_TABLE_vi[$185 & 255](1);
      _S_StartSound(0,22);
      $retval$0 = 1;
      STACKTOP = sp;return ($retval$0|0);
     } else {
      FUNCTION_TABLE_vi[$185 & 255]($idxprom403);
      _S_StartSound(0,1);
      $retval$0 = 1;
      STACKTOP = sp;return ($retval$0|0);
     }
    }
    $187 = HEAP32[32214]|0;
    $cmp436 = ($key$7|0)==($187|0);
    if ($cmp436) {
     $188 = HEAP16[200055]|0;
     $189 = HEAP32[99390]|0;
     $lastOn439 = ((($189)) + 20|0);
     HEAP16[$lastOn439>>1] = $188;
     HEAP32[99384] = 0;
     _S_StartSound(0,24);
     $retval$0 = 1;
     STACKTOP = sp;return ($retval$0|0);
    }
    $190 = HEAP32[32219]|0;
    $cmp441 = ($key$7|0)==($190|0);
    if ($cmp441) {
     $191 = HEAP16[200055]|0;
     $192 = HEAP32[99390]|0;
     $lastOn444 = ((($192)) + 20|0);
     HEAP16[$lastOn444>>1] = $191;
     $prevMenu = ((($192)) + 4|0);
     $193 = HEAP32[$prevMenu>>2]|0;
     $tobool445 = ($193|0)==(0|0);
     if ($tobool445) {
      $retval$0 = 1;
      STACKTOP = sp;return ($retval$0|0);
     }
     HEAP32[99390] = $193;
     $lastOn448 = ((($193)) + 20|0);
     $194 = HEAP16[$lastOn448>>1]|0;
     HEAP16[200055] = $194;
     _S_StartSound(0,23);
     $retval$0 = 1;
     STACKTOP = sp;return ($retval$0|0);
    }
    $cmp451 = ($ch$0|0)==(0);
    L195: do {
     if ($cmp451) {
      switch ($key$7|0) {
      case 197: case 186: case 198: case 255:  {
       break L195;
       break;
      }
      default: {
       $retval$0 = 0;
      }
      }
      STACKTOP = sp;return ($retval$0|0);
     }
    } while(0);
    $195 = HEAP16[200055]|0;
    $conv457 = $195 << 16 >> 16;
    $i$0163 = (($conv457) + 1)|0;
    $196 = HEAP32[99390]|0;
    $197 = HEAP16[$196>>1]|0;
    $conv460165 = $197 << 16 >> 16;
    $cmp461166 = ($i$0163|0)<($conv460165|0);
    L199: do {
     if ($cmp461166) {
      $menuitems463$phi$trans$insert = ((($196)) + 8|0);
      $$pre174 = HEAP32[$menuitems463$phi$trans$insert>>2]|0;
      $i$0167 = $i$0163;
      while(1) {
       $alphaKey = (((($$pre174) + (($i$0167*20)|0)|0)) + 16|0);
       $198 = HEAP8[$alphaKey>>0]|0;
       $conv465 = $198 << 24 >> 24;
       $cmp466 = ($ch$0|0)==($conv465|0);
       if ($cmp466) {
        break;
       }
       $i$0 = (($i$0167) + 1)|0;
       $cmp461 = ($i$0|0)<($conv460165|0);
       if ($cmp461) {
        $i$0167 = $i$0;
       } else {
        break L199;
       }
      }
      $conv469 = $i$0167&65535;
      HEAP16[200055] = $conv469;
      _S_StartSound(0,19);
      $retval$0 = 1;
      STACKTOP = sp;return ($retval$0|0);
     }
    } while(0);
    $cmp474161 = ($195<<16>>16)<(0);
    if ($cmp474161) {
     $retval$0 = 0;
     STACKTOP = sp;return ($retval$0|0);
    }
    $menuitems477 = ((($196)) + 8|0);
    $199 = HEAP32[$menuitems477>>2]|0;
    $i$1162 = 0;
    while(1) {
     $alphaKey479 = (((($199) + (($i$1162*20)|0)|0)) + 16|0);
     $200 = HEAP8[$alphaKey479>>0]|0;
     $conv480 = $200 << 24 >> 24;
     $cmp481 = ($ch$0|0)==($conv480|0);
     if ($cmp481) {
      break;
     }
     $inc487 = (($i$1162) + 1)|0;
     $cmp474 = ($i$1162|0)<($conv457|0);
     if ($cmp474) {
      $i$1162 = $inc487;
     } else {
      $retval$0 = 0;
      label = 172;
      break;
     }
    }
    if ((label|0) == 172) {
     STACKTOP = sp;return ($retval$0|0);
    }
    $conv484 = $i$1162&65535;
    HEAP16[200055] = $conv484;
    _S_StartSound(0,19);
    $retval$0 = 1;
    STACKTOP = sp;return ($retval$0|0);
   }
   $76 = HEAP32[32235]|0;
   $cmp217 = ($key$7|0)==($76|0);
   if ($cmp217) {
    $77 = HEAP32[98972]|0;
    $78 = HEAP32[99181]|0;
    $79 = $78 | $77;
    $80 = ($79|0)==(0);
    if (!($80)) {
     $retval$0 = 0;
     STACKTOP = sp;return ($retval$0|0);
    }
    $81 = HEAP32[99395]|0;
    $cmp$i89 = ($81|0)>(0);
    if ($cmp$i89) {
     $dec1$i = (($81) + -1)|0;
     $82 = HEAP32[32247]|0;
     $dec$i = (($82) + -1)|0;
     HEAP32[32247] = $dec$i;
     HEAP32[99395] = $dec1$i;
     $84 = $dec$i;
    } else {
     $$pre178 = HEAP32[32247]|0;
     $84 = $$pre178;
    }
    $83 = HEAP32[99383]|0;
    _R_SetViewSize($84,$83);
    _S_StartSound(0,22);
    $retval$0 = 1;
    STACKTOP = sp;return ($retval$0|0);
   }
   $85 = HEAP32[32234]|0;
   $cmp226 = ($key$7|0)==($85|0);
   if ($cmp226) {
    $86 = HEAP32[98972]|0;
    $87 = HEAP32[99181]|0;
    $88 = $87 | $86;
    $89 = ($88|0)==(0);
    if (!($89)) {
     $retval$0 = 0;
     STACKTOP = sp;return ($retval$0|0);
    }
    $90 = HEAP32[99395]|0;
    $cmp3$i = ($90|0)<(8);
    if ($cmp3$i) {
     $inc5$i = (($90) + 1)|0;
     $91 = HEAP32[32247]|0;
     $inc$i91 = (($91) + 1)|0;
     HEAP32[32247] = $inc$i91;
     HEAP32[99395] = $inc5$i;
     $93 = $inc$i91;
    } else {
     $$pre177 = HEAP32[32247]|0;
     $93 = $$pre177;
    }
    $92 = HEAP32[99383]|0;
    _R_SetViewSize($93,$92);
    _S_StartSound(0,22);
    $retval$0 = 1;
    STACKTOP = sp;return ($retval$0|0);
   }
   if ($cmp205) {
    HEAP32[99384] = 1;
    $94 = HEAP32[32140]|0;
    $cmp238 = ($94|0)==(3);
    $ReadDef2$ReadDef1 = $cmp238 ? 129048 : 129000;
    HEAP32[99390] = $ReadDef2$ReadDef1;
    HEAP16[200055] = 0;
    _S_StartSound(0,23);
    $retval$0 = 1;
    STACKTOP = sp;return ($retval$0|0);
   }
   $95 = HEAP32[32224]|0;
   $cmp244 = ($key$7|0)==($95|0);
   if ($cmp244) {
    HEAP32[99384] = 1;
    HEAP32[99390] = 129024;
    $96 = HEAP16[(129044)>>1]|0;
    HEAP16[200055] = $96;
    _S_StartSound(0,23);
    $97 = HEAP32[99157]|0;
    $tobool$i98 = ($97|0)==(0);
    if ($tobool$i98) {
     $98 = HEAP32[99384]|0;
     HEAP32[99385] = $98;
     HEAP32[99386] = 1;
     HEAP32[99387] = 150354;
     HEAP32[99388] = 0;
     HEAP32[99389] = 0;
     HEAP32[99384] = 1;
     $retval$0 = 1;
     STACKTOP = sp;return ($retval$0|0);
    }
    $99 = HEAP32[99077]|0;
    $cmp$i100 = ($99|0)==(0);
    if (!($cmp$i100)) {
     $retval$0 = 1;
     STACKTOP = sp;return ($retval$0|0);
    }
    HEAP32[99390] = 129072;
    $100 = HEAP16[(129092)>>1]|0;
    HEAP16[200055] = $100;
    _M_ReadSaveStrings();
    $retval$0 = 1;
    STACKTOP = sp;return ($retval$0|0);
   }
   $101 = HEAP32[32225]|0;
   $cmp248 = ($key$7|0)==($101|0);
   if ($cmp248) {
    HEAP32[99384] = 1;
    HEAP32[99390] = 129024;
    $102 = HEAP16[(129044)>>1]|0;
    HEAP16[200055] = $102;
    _S_StartSound(0,23);
    $103 = HEAP32[99094]|0;
    $tobool$i105 = ($103|0)==(0);
    if ($tobool$i105) {
     HEAP32[99390] = 129096;
     $105 = HEAP16[(129116)>>1]|0;
     HEAP16[200055] = $105;
     _M_ReadSaveStrings();
     $retval$0 = 1;
     STACKTOP = sp;return ($retval$0|0);
    } else {
     $104 = HEAP32[99384]|0;
     HEAP32[99385] = $104;
     HEAP32[99386] = 1;
     HEAP32[99387] = 150462;
     HEAP32[99388] = 0;
     HEAP32[99389] = 0;
     HEAP32[99384] = 1;
     $retval$0 = 1;
     STACKTOP = sp;return ($retval$0|0);
    }
   }
   $106 = HEAP32[32226]|0;
   $cmp252 = ($key$7|0)==($106|0);
   if ($cmp252) {
    HEAP32[99384] = 1;
    HEAP32[99390] = 129160;
    HEAP16[200055] = 0;
    _S_StartSound(0,23);
    $retval$0 = 1;
    STACKTOP = sp;return ($retval$0|0);
   }
   $107 = HEAP32[32227]|0;
   $cmp256 = ($key$7|0)==($107|0);
   if ($cmp256) {
    $108 = HEAP32[99383]|0;
    $sub$i = (1 - ($108))|0;
    HEAP32[99383] = $sub$i;
    $109 = HEAP32[32247]|0;
    _R_SetViewSize($109,$sub$i);
    $110 = HEAP32[99383]|0;
    $tobool$i111 = ($110|0)==(0);
    $111 = HEAP32[99076]|0;
    $message2$i = (((181680 + (($111*288)|0)|0)) + 224|0);
    $$$i = $tobool$i111 ? 150601 : 150613;
    HEAP32[$message2$i>>2] = $$$i;
    _S_StartSound(0,23);
    $retval$0 = 1;
    STACKTOP = sp;return ($retval$0|0);
   }
   $112 = HEAP32[32228]|0;
   $cmp260 = ($key$7|0)==($112|0);
   if ($cmp260) {
    _S_StartSound(0,23);
    $113 = HEAP32[99157]|0;
    $tobool$i112 = ($113|0)==(0);
    if ($tobool$i112) {
     _S_StartSound(0,34);
     $retval$0 = 1;
     STACKTOP = sp;return ($retval$0|0);
    }
    $114 = HEAP32[99077]|0;
    $cmp$i114 = ($114|0)==(0);
    if (!($cmp$i114)) {
     $retval$0 = 1;
     STACKTOP = sp;return ($retval$0|0);
    }
    $115 = HEAP32[99397]|0;
    $cmp3$i116 = ($115|0)<(0);
    if (!($cmp3$i116)) {
     $arraydecay$i119 = (185664 + (($115*24)|0)|0);
     HEAP32[$vararg_buffer1>>2] = $arraydecay$i119;
     (_snprintf(185936,80,151042,$vararg_buffer1)|0);
     $119 = HEAP32[99384]|0;
     HEAP32[99385] = $119;
     HEAP32[99386] = 1;
     HEAP32[99387] = 185936;
     HEAP32[99388] = 131;
     HEAP32[99389] = 1;
     HEAP32[99384] = 1;
     $retval$0 = 1;
     STACKTOP = sp;return ($retval$0|0);
    }
    $116 = HEAP32[99384]|0;
    $tobool$i$i = ($116|0)==(0);
    if ($tobool$i$i) {
     HEAP32[99384] = 1;
     HEAP32[99390] = 129024;
     $117 = HEAP16[(129044)>>1]|0;
     HEAP16[200055] = $117;
    }
    _M_ReadSaveStrings();
    HEAP32[99390] = 129072;
    $118 = HEAP16[(129092)>>1]|0;
    HEAP16[200055] = $118;
    HEAP32[99397] = -2;
    $retval$0 = 1;
    STACKTOP = sp;return ($retval$0|0);
   }
   $120 = HEAP32[32229]|0;
   $cmp264 = ($key$7|0)==($120|0);
   if ($cmp264) {
    _S_StartSound(0,23);
    $121 = HEAP32[99157]|0;
    $tobool$i121 = ($121|0)==(0);
    if ($tobool$i121) {
     _S_StartSound(0,34);
     $retval$0 = 1;
     STACKTOP = sp;return ($retval$0|0);
    }
    $122 = HEAP32[99094]|0;
    $tobool1$i = ($122|0)==(0);
    $123 = HEAP32[99384]|0;
    HEAP32[99385] = $123;
    HEAP32[99386] = 1;
    if ($tobool1$i) {
     HEAP32[99387] = 150688;
     HEAP32[99388] = 129;
     HEAP32[99389] = 1;
     HEAP32[99384] = 1;
     $retval$0 = 1;
     STACKTOP = sp;return ($retval$0|0);
    } else {
     HEAP32[99387] = 150649;
     HEAP32[99388] = 0;
     HEAP32[99389] = 0;
     HEAP32[99384] = 1;
     $retval$0 = 1;
     STACKTOP = sp;return ($retval$0|0);
    }
   }
   $124 = HEAP32[32230]|0;
   $cmp268 = ($key$7|0)==($124|0);
   if ($cmp268) {
    $125 = HEAP32[32246]|0;
    $sub$i124 = (1 - ($125))|0;
    HEAP32[32246] = $sub$i124;
    $tobool$i125 = ($sub$i124|0)==(0);
    $126 = HEAP32[99076]|0;
    $message2$i126 = (((181680 + (($126*288)|0)|0)) + 224|0);
    $$$i127 = $tobool$i125 ? 150624 : 150637;
    HEAP32[$message2$i126>>2] = $$$i127;
    HEAP32[99180] = 1;
    _S_StartSound(0,23);
    $retval$0 = 1;
    STACKTOP = sp;return ($retval$0|0);
   }
   $127 = HEAP32[32231]|0;
   $cmp272 = ($key$7|0)==($127|0);
   if ($cmp272) {
    _S_StartSound(0,23);
    $128 = HEAP32[99094]|0;
    $tobool$i128 = ($128|0)==(0);
    if (!($tobool$i128)) {
     $129 = HEAP32[99384]|0;
     HEAP32[99385] = $129;
     HEAP32[99386] = 1;
     HEAP32[99387] = 151157;
     HEAP32[99388] = 0;
     HEAP32[99389] = 0;
     HEAP32[99384] = 1;
     $retval$0 = 1;
     STACKTOP = sp;return ($retval$0|0);
    }
    $130 = HEAP32[99397]|0;
    $cmp$i130 = ($130|0)<(0);
    if ($cmp$i130) {
     $131 = HEAP32[99384]|0;
     HEAP32[99385] = $131;
     HEAP32[99386] = 1;
     HEAP32[99387] = 151209;
     HEAP32[99388] = 0;
     HEAP32[99389] = 0;
     HEAP32[99384] = 1;
     $retval$0 = 1;
     STACKTOP = sp;return ($retval$0|0);
    } else {
     $arraydecay$i133 = (185664 + (($130*24)|0)|0);
     HEAP32[$vararg_buffer4>>2] = $arraydecay$i133;
     (_snprintf(185936,80,151095,$vararg_buffer4)|0);
     $132 = HEAP32[99384]|0;
     HEAP32[99385] = $132;
     HEAP32[99386] = 1;
     HEAP32[99387] = 185936;
     HEAP32[99388] = 132;
     HEAP32[99389] = 1;
     HEAP32[99384] = 1;
     $retval$0 = 1;
     STACKTOP = sp;return ($retval$0|0);
    }
   }
   $133 = HEAP32[32232]|0;
   $cmp276 = ($key$7|0)==($133|0);
   if ($cmp276) {
    _S_StartSound(0,23);
    $134 = HEAP32[99015]|0;
    $135 = $134 | 4;
    $136 = ($135|0)==(4);
    $endmsg$0$i$i136 = $136 ? 432 : 464;
    $137 = HEAP32[99024]|0;
    $rem$i$i137 = (($137|0) % 8)&-1;
    $arrayidx$i$i138 = (($endmsg$0$i$i136) + ($rem$i$i137<<2)|0);
    $138 = HEAP32[$arrayidx$i$i138>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $138;
    (_snprintf(185504,160,150277,$vararg_buffer7)|0);
    $139 = HEAP32[99384]|0;
    HEAP32[99385] = $139;
    HEAP32[99386] = 1;
    HEAP32[99387] = 185504;
    HEAP32[99388] = 128;
    HEAP32[99389] = 1;
    HEAP32[99384] = 1;
    $retval$0 = 1;
    STACKTOP = sp;return ($retval$0|0);
   }
   $140 = HEAP32[32233]|0;
   $cmp280 = ($key$7|0)==($140|0);
   if ($cmp280) {
    $141 = HEAP32[99854]|0;
    $inc283 = (($141) + 1)|0;
    $cmp284 = ($141|0)>(3);
    $spec$store$select = $cmp284 ? 0 : $inc283;
    HEAP32[99854] = $spec$store$select;
    $arraydecay289 = (47920 + (($spec$store$select*26)|0)|0);
    $142 = HEAP32[99076]|0;
    $message = (((181680 + (($142*288)|0)|0)) + 224|0);
    HEAP32[$message>>2] = $arraydecay289;
    $call291 = (_W_CacheLumpName(156315,8)|0);
    _I_SetPalette($call291);
    $retval$0 = 1;
    STACKTOP = sp;return ($retval$0|0);
   }
   $143 = HEAP32[32214]|0;
   $cmp308 = ($key$7|0)==($143|0);
   if (!($cmp308)) {
    $retval$0 = 0;
    STACKTOP = sp;return ($retval$0|0);
   }
   HEAP32[99384] = 1;
   HEAP32[99390] = 129024;
   $144 = HEAP16[(129044)>>1]|0;
   HEAP16[200055] = $144;
   _S_StartSound(0,23);
   $retval$0 = 1;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 _G_ScreenShot();
 $retval$0 = 1;
 STACKTOP = sp;return ($retval$0|0);
}
function _M_Drawer() {
 var $$pre = 0, $$pre$i = 0, $$pre$i31 = 0, $$pre58 = 0, $$pre59 = 0, $$pre60 = 0, $$pre61 = 0, $$pre62 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0, $add$i32 = 0, $add$i48 = 0, $add$ptr23 = 0, $add12$i = 0, $add17 = 0, $add39 = 0, $add65 = 0, $add71 = 0, $add76 = 0, $add8$i = 0, $add9$i = 0, $arraydecay56 = 0;
 var $arrayidx = 0, $arrayidx$i = 0, $arrayidx$phi$trans$insert$i = 0, $arrayidx$phi$trans$insert$i30 = 0, $arrayidx16 = 0, $arrayidx46 = 0, $arrayidx6 = 0, $arrayidx6$i = 0, $arrayidx77 = 0, $call$i = 0, $call$i23 = 0, $call$i34 = 0, $call$off$i = 0, $call1$i = 0, $call1$off$i = 0, $call26 = 0, $call26$pn = 0, $call3 = 0, $call62 = 0, $call78 = 0;
 var $ch$0$i = 0, $ch$0$ph$i = 0, $cmp = 0, $cmp$i29 = 0, $cmp$i50 = 0, $cmp10$i = 0, $cmp12$i = 0, $cmp13 = 0, $cmp13$i = 0, $cmp4 = 0, $cmp4$i = 0, $cmp4$i47 = 0, $cmp51 = 0, $cmp5138 = 0, $cmp8 = 0, $conv$i = 0, $conv$i25 = 0, $conv$i33 = 0, $conv11$i = 0, $conv33 = 0;
 var $conv34 = 0, $conv35 = 0, $conv3754 = 0, $conv3853 = 0, $conv49 = 0, $conv60 = 0, $conv61 = 0, $conv6421 = 0, $conv66 = 0, $conv7$i = 0, $conv7$i$sink = 0, $conv70 = 0, $conv73 = 0, $conv75 = 0, $cx$0$i = 0, $cx$0$i$be = 0, $cy$0$ph$i = 0, $div = 0, $div31 = 0, $div63 = 0;
 var $div67 = 0, $exitcond = 0, $height = 0, $height1$i = 0, $i$014$i = 0, $i$042 = 0, $i$139 = 0, $idxprom = 0, $inc = 0, $inc$i = 0, $inc$i28 = 0, $inc$i52 = 0, $inc68 = 0, $incdec$ptr$i = 0, $menuitems = 0, $mul = 0, $routine = 0, $sext = 0, $spec$select$i = 0, $spec$select$i49 = 0;
 var $spec$select$i51 = 0, $start$045 = 0, $start$2 = 0, $storemerge = 0, $storemerge43 = 0, $storemerge4365 = 0, $storemerge4369 = 0, $string = 0, $strlenfirst$i = 0, $strlenfirst$i22 = 0, $sub = 0, $sub32 = 0, $sub64 = 0, $sub68 = 0, $sub74 = 0, $tobool = 0, $tobool42 = 0, $tobool45 = 0, $tobool58 = 0, $w$0$lcssa$i = 0;
 var $w$013$i = 0, $x = 0, $y = 0, $y72$phi$trans$insert = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $string = sp;
 HEAP32[99391] = 0;
 $0 = HEAP32[99386]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  $20 = HEAP32[99384]|0;
  $tobool42 = ($20|0)==(0);
  if ($tobool42) {
   STACKTOP = sp;return;
  }
  $21 = HEAP32[99390]|0;
  $routine = ((($21)) + 12|0);
  $22 = HEAP32[$routine>>2]|0;
  $tobool45 = ($22|0)==(0|0);
  if ($tobool45) {
   $23 = $21;
  } else {
   FUNCTION_TABLE_v[$22 & 255]();
   $$pre = HEAP32[99390]|0;
   $23 = $$pre;
  }
  $x = ((($23)) + 16|0);
  $24 = HEAP16[$x>>1]|0;
  HEAP16[200059] = $24;
  $y = ((($23)) + 18|0);
  $25 = HEAP16[$y>>1]|0;
  HEAP16[200058] = $25;
  $26 = HEAP16[$23>>1]|0;
  $conv49 = $26 << 16 >> 16;
  $cmp5138 = ($26<<16>>16)==(0);
  if ($cmp5138) {
   $33 = $24;$34 = $25;
  } else {
   $27 = $23;$31 = $25;$i$139 = 0;
   while(1) {
    $menuitems = ((($27)) + 8|0);
    $28 = HEAP32[$menuitems>>2]|0;
    $arraydecay56 = (((($28) + (($i$139*20)|0)|0)) + 2|0);
    $29 = HEAP8[$arraydecay56>>0]|0;
    $tobool58 = ($29<<24>>24)==(0);
    if ($tobool58) {
     $32 = $31;
    } else {
     $30 = HEAP16[200059]|0;
     $conv60 = $30 << 16 >> 16;
     $conv61 = $31 << 16 >> 16;
     $call62 = (_W_CacheLumpName($arraydecay56,8)|0);
     _V_DrawPatchDirect($conv60,$conv61,$call62);
     $$pre59 = HEAP16[200058]|0;
     $32 = $$pre59;
    }
    $conv6421 = $32&65535;
    $add65 = (($conv6421) + 16)|0;
    $conv66 = $add65&65535;
    HEAP16[200058] = $conv66;
    $inc68 = (($i$139) + 1)|0;
    $cmp51 = ($inc68>>>0)<($conv49>>>0);
    if (!($cmp51)) {
     break;
    }
    $$pre58 = HEAP32[99390]|0;
    $27 = $$pre58;$31 = $conv66;$i$139 = $inc68;
   }
   $$pre60 = HEAP16[200059]|0;
   $$pre61 = HEAP32[99390]|0;
   $y72$phi$trans$insert = ((($$pre61)) + 18|0);
   $$pre62 = HEAP16[$y72$phi$trans$insert>>1]|0;
   $33 = $$pre60;$34 = $$pre62;
  }
  $conv70 = $33 << 16 >> 16;
  $add71 = (($conv70) + -32)|0;
  $conv73 = $34 << 16 >> 16;
  $sub74 = (($conv73) + -5)|0;
  $35 = HEAP16[200055]|0;
  $conv75 = $35 << 16 >> 16;
  $mul = $conv75 << 4;
  $add76 = (($sub74) + ($mul))|0;
  $36 = HEAP16[200056]|0;
  $idxprom = $36 << 16 >> 16;
  $arrayidx77 = (128992 + ($idxprom<<2)|0);
  $37 = HEAP32[$arrayidx77>>2]|0;
  $call78 = (_W_CacheLumpName($37,8)|0);
  _V_DrawPatchDirect($add71,$add76,$call78);
  STACKTOP = sp;return;
 }
 $1 = HEAP32[99387]|0;
 $2 = HEAP32[46128]|0;
 $height1$i = ((($2)) + 2|0);
 $3 = HEAPU8[$height1$i>>0]|(HEAPU8[$height1$i+1>>0]<<8);
 $conv$i = $3 << 16 >> 16;
 $strlenfirst$i = HEAP8[$1>>0]|0;
 $cmp10$i = ($strlenfirst$i<<24>>24)==(0);
 if ($cmp10$i) {
  $div63 = (($conv$i|0) / 2)&-1;
  $sub64 = (100 - ($div63))|0;
  $storemerge4365 = $sub64&65535;
  HEAP16[200058] = $storemerge4365;
  STACKTOP = sp;return;
 }
 $call$i = (_strlen($1)|0);
 $cmp4$i47 = ($strlenfirst$i<<24>>24)==(10);
 $add$i48 = $cmp4$i47 ? $conv$i : 0;
 $spec$select$i49 = (($add$i48) + ($conv$i))|0;
 $cmp$i50 = ($call$i>>>0)>(1);
 if ($cmp$i50) {
  $inc$i52 = 1;$spec$select$i51 = $spec$select$i49;
  while(1) {
   $arrayidx$phi$trans$insert$i = (($1) + ($inc$i52)|0);
   $$pre$i = HEAP8[$arrayidx$phi$trans$insert$i>>0]|0;
   $cmp4$i = ($$pre$i<<24>>24)==(10);
   $add$i = $cmp4$i ? $conv$i : 0;
   $spec$select$i = (($add$i) + ($spec$select$i51))|0;
   $inc$i = (($inc$i52) + 1)|0;
   $exitcond = ($inc$i|0)==($call$i|0);
   if ($exitcond) {
    break;
   } else {
    $inc$i52 = $inc$i;$spec$select$i51 = $spec$select$i;
   }
  }
  $div = (($spec$select$i|0) / 2)&-1;
  $sub = (100 - ($div))|0;
  $storemerge43 = $sub&65535;
  HEAP16[200058] = $storemerge43;
  if ($cmp10$i) {
   STACKTOP = sp;return;
  }
 } else {
  $div67 = (($spec$select$i49|0) / 2)&-1;
  $sub68 = (100 - ($div67))|0;
  $storemerge4369 = $sub68&65535;
  HEAP16[200058] = $storemerge4369;
 }
 $4 = $1;$arrayidx46 = $1;$start$045 = 0;
 while(1) {
  $i$042 = 0;
  while(1) {
   $add = (($i$042) + ($start$045))|0;
   $arrayidx6 = (($4) + ($add)|0);
   $5 = HEAP8[$arrayidx6>>0]|0;
   $cmp8 = ($5<<24>>24)==(10);
   if ($cmp8) {
    label = 12;
    break;
   }
   $inc = (($i$042) + 1)|0;
   $call3 = (_strlen($arrayidx46)|0);
   $cmp4 = ($inc>>>0)<($call3>>>0);
   if ($cmp4) {
    $i$042 = $inc;
   } else {
    label = 16;
    break;
   }
  }
  if ((label|0) == 12) {
   label = 0;
   (_M_StringCopy($string,$arrayidx46,80)|0);
   $cmp13 = ($i$042>>>0)<(80);
   if ($cmp13) {
    $arrayidx16 = (($string) + ($i$042)|0);
    HEAP8[$arrayidx16>>0] = 0;
   }
   $add17 = (($i$042) + 1)|0;
   $call26$pn = $add17;
  }
  else if ((label|0) == 16) {
   label = 0;
   $add$ptr23 = (($4) + ($start$045)|0);
   (_M_StringCopy($string,$add$ptr23,80)|0);
   $call26 = (_strlen($string)|0);
   $call26$pn = $call26;
  }
  $start$2 = (($call26$pn) + ($start$045))|0;
  $strlenfirst$i22 = HEAP8[$string>>0]|0;
  $cmp12$i = ($strlenfirst$i22<<24>>24)==(0);
  L45: do {
   if ($cmp12$i) {
    $w$0$lcssa$i = 0;
   } else {
    $call$i23 = (_strlen($string)|0);
    $6 = $strlenfirst$i22;$i$014$i = 0;$w$013$i = 0;
    while(1) {
     $conv$i25 = $6 << 24 >> 24;
     $call1$i = (_toupper($conv$i25)|0);
     $call1$off$i = (($call1$i) + -33)|0;
     $7 = ($call1$off$i>>>0)>(62);
     if ($7) {
      $conv7$i$sink = 4;
     } else {
      $arrayidx6$i = (184512 + ($call1$off$i<<2)|0);
      $8 = HEAP32[$arrayidx6$i>>2]|0;
      $9 = HEAPU8[$8>>0]|(HEAPU8[$8+1>>0]<<8);
      $conv7$i = $9 << 16 >> 16;
      $conv7$i$sink = $conv7$i;
     }
     $add8$i = (($w$013$i) + ($conv7$i$sink))|0;
     $inc$i28 = (($i$014$i) + 1)|0;
     $cmp$i29 = ($inc$i28>>>0)<($call$i23>>>0);
     if (!($cmp$i29)) {
      $w$0$lcssa$i = $add8$i;
      break L45;
     }
     $arrayidx$phi$trans$insert$i30 = (($string) + ($inc$i28)|0);
     $$pre$i31 = HEAP8[$arrayidx$phi$trans$insert$i30>>0]|0;
     $6 = $$pre$i31;$i$014$i = $inc$i28;$w$013$i = $add8$i;
    }
   }
  } while(0);
  $div31 = (($w$0$lcssa$i|0) / 2)&-1;
  $sub32 = (160 - ($div31))|0;
  $conv33 = $sub32&65535;
  HEAP16[200059] = $conv33;
  $sext = $sub32 << 16;
  $conv34 = $sext >> 16;
  $10 = HEAP16[200058]|0;
  $conv35 = $10 << 16 >> 16;
  $ch$0$ph$i = $string;$cy$0$ph$i = $conv35;
  L54: while(1) {
   $ch$0$i = $ch$0$ph$i;$cx$0$i = $conv34;
   L56: while(1) {
    $incdec$ptr$i = ((($ch$0$i)) + 1|0);
    $11 = HEAP8[$ch$0$i>>0]|0;
    switch ($11<<24>>24) {
    case 0:  {
     break L54;
     break;
    }
    case 10:  {
     break L56;
     break;
    }
    default: {
    }
    }
    $conv$i33 = $11 << 24 >> 24;
    $call$i34 = (_toupper($conv$i33)|0);
    $call$off$i = (($call$i34) + -33)|0;
    $12 = ($call$off$i>>>0)>(62);
    if ($12) {
     $add9$i = (($cx$0$i) + 4)|0;
     $cx$0$i$be = $add9$i;
    } else {
     $arrayidx$i = (184512 + ($call$off$i<<2)|0);
     $13 = HEAP32[$arrayidx$i>>2]|0;
     $14 = HEAPU8[$13>>0]|(HEAPU8[$13+1>>0]<<8);
     $conv11$i = $14 << 16 >> 16;
     $add12$i = (($cx$0$i) + ($conv11$i))|0;
     $cmp13$i = ($add12$i|0)>(320);
     if ($cmp13$i) {
      break L54;
     }
     _V_DrawPatchDirect($cx$0$i,$cy$0$ph$i,$13);
     $cx$0$i$be = $add12$i;
    }
    $ch$0$i = $incdec$ptr$i;$cx$0$i = $cx$0$i$be;
   }
   $add$i32 = (($cy$0$ph$i) + 12)|0;
   $ch$0$ph$i = $incdec$ptr$i;$cy$0$ph$i = $add$i32;
  }
  $15 = HEAP32[46128]|0;
  $height = ((($15)) + 2|0);
  $16 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
  $conv3754 = $16&65535;
  $17 = HEAP16[200058]|0;
  $conv3853 = $17&65535;
  $add39 = (($conv3853) + ($conv3754))|0;
  $storemerge = $add39&65535;
  HEAP16[200058] = $storemerge;
  $18 = HEAP32[99387]|0;
  $arrayidx = (($18) + ($start$2)|0);
  $19 = HEAP8[$arrayidx>>0]|0;
  $cmp = ($19<<24>>24)==(0);
  if ($cmp) {
   break;
  } else {
   $4 = $18;$arrayidx46 = $arrayidx;$start$045 = $start$2;
  }
 }
 STACKTOP = sp;return;
}
function _M_Ticker() {
 var $0 = 0, $1 = 0, $2 = 0, $cmp = 0, $dec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[200057]|0;
 $dec = (($0) + -1)<<16>>16;
 HEAP16[200057] = $dec;
 $cmp = ($dec<<16>>16)<(1);
 if (!($cmp)) {
  return;
 }
 $1 = HEAP16[200056]|0;
 $2 = $1 ^ 1;
 HEAP16[200056] = $2;
 HEAP16[200057] = 8;
 return;
}
function _M_Init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $cmp = 0, $cond = 0, $conv1 = 0, $conv2 = 0, $dec = 0, $dec5 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99390] = 129024;
 HEAP32[99384] = 0;
 $0 = HEAP16[(129044)>>1]|0;
 HEAP16[200055] = $0;
 HEAP16[200056] = 0;
 HEAP16[200057] = 10;
 $1 = HEAP32[32247]|0;
 $sub = (($1) + -3)|0;
 HEAP32[99395] = $sub;
 HEAP32[99386] = 0;
 HEAP32[99387] = 0;
 HEAP32[99385] = 0;
 HEAP32[99397] = -1;
 $2 = HEAP32[32140]|0;
 $cond = ($2|0)==(2);
 if ($cond) {
  ;HEAP32[(48144)>>2]=HEAP32[(48164)>>2]|0;HEAP32[(48144)+4>>2]=HEAP32[(48164)+4>>2]|0;HEAP32[(48144)+8>>2]=HEAP32[(48164)+8>>2]|0;HEAP32[(48144)+12>>2]=HEAP32[(48164)+12>>2]|0;HEAP32[(48144)+16>>2]=HEAP32[(48164)+16>>2]|0;
  $3 = HEAP16[64512]|0;
  $dec = (($3) + -1)<<16>>16;
  HEAP16[64512] = $dec;
  $4 = HEAP16[(129042)>>1]|0;
  $conv2 = $4&65535;
  $add = (($conv2) + 8)|0;
  $conv1 = $add&65535;
  HEAP16[(129042)>>1] = $conv1;
  HEAP32[(129188)>>2] = 129024;
 }
 $5 = HEAP32[32141]|0;
 $cmp = ($5>>>0)<(6);
 if (!($cmp)) {
  return;
 }
 $6 = HEAP16[64604]|0;
 $dec5 = (($6) + -1)<<16>>16;
 HEAP16[64604] = $dec5;
 return;
}
function _M_MakeDirectory($path) {
 $path = $path|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_mkdir($path,493)|0);
 return;
}
function _M_FileExists($filename) {
 $filename = $filename|0;
 var $0 = 0, $call = 0, $call2 = 0, $cmp = 0, $cmp3 = 0, $conv = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_fopen($filename,151264)|0);
 $cmp = ($call|0)==(0|0);
 if ($cmp) {
  $call2 = (___errno_location()|0);
  $0 = HEAP32[$call2>>2]|0;
  $cmp3 = ($0|0)==(31);
  $conv = $cmp3&1;
  $retval$0 = $conv;
  return ($retval$0|0);
 } else {
  (_fclose($call)|0);
  $retval$0 = 1;
  return ($retval$0|0);
 }
 return (0)|0;
}
function _M_FileLength($handle) {
 $handle = $handle|0;
 var $call = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_ftell($handle)|0);
 (_fseek($handle,0,2)|0);
 $call2 = (_ftell($handle)|0);
 (_fseek($handle,$call,0)|0);
 return ($call2|0);
}
function _M_WriteFile($name,$source,$length) {
 $name = $name|0;
 $source = $source|0;
 $length = $length|0;
 var $$ = 0, $call = 0, $call1 = 0, $cmp = 0, $cmp3 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_fopen($name,151266)|0);
 $cmp = ($call|0)==(0|0);
 if ($cmp) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $call1 = (_fwrite($source,1,$length,$call)|0);
 (_fclose($call)|0);
 $cmp3 = ($call1|0)>=($length|0);
 $$ = $cmp3&1;
 $retval$0 = $$;
 return ($retval$0|0);
}
function _M_TempFile($s) {
 $s = $s|0;
 var $call = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = 151274;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $s;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 0;
 $call = (_M_StringJoin(151269,$vararg_buffer)|0);
 STACKTOP = sp;return ($call|0);
}
function _M_StringJoin($s,$varargs) {
 $s = $s|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr$i = 0, $add4 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next3 = 0, $arglist_next6 = 0;
 var $arglist_next9 = 0, $args = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $call = 0, $call$i14 = 0, $call3 = 0, $call7 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i15 = 0, $cmp17 = 0, $cmp1717 = 0, $cmp18 = 0, $cmp8 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0;
 var $expanded14 = 0, $expanded15 = 0, $expanded17 = 0, $expanded18 = 0, $expanded20 = 0, $expanded21 = 0, $expanded22 = 0, $expanded24 = 0, $expanded25 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $result_len$0$lcssa = 0, $result_len$019 = 0, $spec$select$i = 0, $sub$i = 0;
 var $sub$i$i = 0, $sub$i16 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $args = sp;
 $call = (_strlen($s)|0);
 $add = (($call) + 1)|0;
 HEAP32[$args>>2] = $varargs;
 $arglist_current = HEAP32[$args>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 4|0);
 $expanded4 = $1;
 $expanded = (($expanded4) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 4|0);
 $expanded8 = $3;
 $expanded7 = (($expanded8) - 1)|0;
 $expanded6 = $expanded7 ^ -1;
 $4 = $2 & $expanded6;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $arglist_next = ((($5)) + 4|0);
 HEAP32[$args>>2] = $arglist_next;
 $cmp18 = ($6|0)==(0|0);
 if ($cmp18) {
  $result_len$0$lcssa = $add;
 } else {
  $7 = $6;$result_len$019 = $add;
  while(1) {
   $call3 = (_strlen($7)|0);
   $add4 = (($call3) + ($result_len$019))|0;
   $arglist_current2 = HEAP32[$args>>2]|0;
   $8 = $arglist_current2;
   $9 = ((0) + 4|0);
   $expanded11 = $9;
   $expanded10 = (($expanded11) - 1)|0;
   $10 = (($8) + ($expanded10))|0;
   $11 = ((0) + 4|0);
   $expanded15 = $11;
   $expanded14 = (($expanded15) - 1)|0;
   $expanded13 = $expanded14 ^ -1;
   $12 = $10 & $expanded13;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $arglist_next3 = ((($13)) + 4|0);
   HEAP32[$args>>2] = $arglist_next3;
   $cmp = ($14|0)==(0|0);
   if ($cmp) {
    $result_len$0$lcssa = $add4;
    break;
   } else {
    $7 = $14;$result_len$019 = $add4;
   }
  }
 }
 $call7 = (_malloc($result_len$0$lcssa)|0);
 $cmp8 = ($call7|0)==(0|0);
 if ($cmp8) {
  _I_Error(151276,$vararg_buffer);
  // unreachable;
 }
 $cmp$i = ($result_len$0$lcssa|0)==(0);
 if (!($cmp$i)) {
  $sub$i = (($result_len$0$lcssa) + -1)|0;
  $arrayidx$i = (($call7) + ($sub$i)|0);
  HEAP8[$arrayidx$i>>0] = 0;
  (_strncpy($call7,$s,$sub$i)|0);
 }
 HEAP32[$args>>2] = $varargs;
 $arglist_current5 = HEAP32[$args>>2]|0;
 $15 = $arglist_current5;
 $16 = ((0) + 4|0);
 $expanded18 = $16;
 $expanded17 = (($expanded18) - 1)|0;
 $17 = (($15) + ($expanded17))|0;
 $18 = ((0) + 4|0);
 $expanded22 = $18;
 $expanded21 = (($expanded22) - 1)|0;
 $expanded20 = $expanded21 ^ -1;
 $19 = $17 & $expanded20;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $arglist_next6 = ((($20)) + 4|0);
 HEAP32[$args>>2] = $arglist_next6;
 $cmp1717 = ($21|0)==(0|0);
 if ($cmp1717) {
  STACKTOP = sp;return ($call7|0);
 }
 $22 = $21;
 while(1) {
  $call$i14 = (_strlen($call7)|0);
  $cmp$i15 = ($call$i14>>>0)>($result_len$0$lcssa>>>0);
  $spec$select$i = $cmp$i15 ? $result_len$0$lcssa : $call$i14;
  $add$ptr$i = (($call7) + ($spec$select$i)|0);
  $sub$i16 = (($result_len$0$lcssa) - ($spec$select$i))|0;
  $cmp$i$i = ($sub$i16|0)==(0);
  if (!($cmp$i$i)) {
   $sub$i$i = (($sub$i16) + -1)|0;
   $arrayidx$i$i = (($add$ptr$i) + ($sub$i$i)|0);
   HEAP8[$arrayidx$i$i>>0] = 0;
   (_strncpy($add$ptr$i,$22,$sub$i$i)|0);
  }
  $arglist_current8 = HEAP32[$args>>2]|0;
  $23 = $arglist_current8;
  $24 = ((0) + 4|0);
  $expanded25 = $24;
  $expanded24 = (($expanded25) - 1)|0;
  $25 = (($23) + ($expanded24))|0;
  $26 = ((0) + 4|0);
  $expanded29 = $26;
  $expanded28 = (($expanded29) - 1)|0;
  $expanded27 = $expanded28 ^ -1;
  $27 = $25 & $expanded27;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $arglist_next9 = ((($28)) + 4|0);
  HEAP32[$args>>2] = $arglist_next9;
  $cmp17 = ($29|0)==(0|0);
  if ($cmp17) {
   break;
  } else {
   $22 = $29;
  }
 }
 STACKTOP = sp;return ($call7|0);
}
function _M_StrToInt($str,$result) {
 $str = $str|0;
 $result = $result|0;
 var $0 = 0, $call = 0, $call1 = 0, $call4 = 0, $call6 = 0, $cmp = 0, $cmp2 = 0, $cmp5 = 0, $cmp7 = 0, $phitmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $result;
 $call = (_sscanf($str,151321,$vararg_buffer)|0);
 $cmp = ($call|0)==(1);
 if ($cmp) {
  $0 = 1;
  STACKTOP = sp;return ($0|0);
 }
 HEAP32[$vararg_buffer1>>2] = $result;
 $call1 = (_sscanf($str,151327,$vararg_buffer1)|0);
 $cmp2 = ($call1|0)==(1);
 if ($cmp2) {
  $0 = 1;
  STACKTOP = sp;return ($0|0);
 }
 HEAP32[$vararg_buffer4>>2] = $result;
 $call4 = (_sscanf($str,151333,$vararg_buffer4)|0);
 $cmp5 = ($call4|0)==(1);
 if ($cmp5) {
  $0 = 1;
  STACKTOP = sp;return ($0|0);
 }
 HEAP32[$vararg_buffer7>>2] = $result;
 $call6 = (_sscanf($str,151338,$vararg_buffer7)|0);
 $cmp7 = ($call6|0)==(1);
 $phitmp = $cmp7&1;
 $0 = $phitmp;
 STACKTOP = sp;return ($0|0);
}
function _M_ExtractFileBase($path,$dest) {
 $path = $path|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add$ptr = 0, $add$ptr$pn17 = 0, $add$ptr$pn17$phi = 0, $add$ptr2 = 0, $arrayidx = 0, $call = 0, $call20 = 0, $cmp = 0, $cmp15 = 0, $cmp16 = 0, $cmp3 = 0, $conv21 = 0, $conv6 = 0, $inc = 0;
 var $incdec$ptr18 = 0, $length$0 = 0, $src$0 = 0, $src$0$lcssa = 0, $src$014 = 0, $src$018 = 0, $src$1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $call = (_strlen($path)|0);
 $add$ptr = (($path) + ($call)|0);
 $src$014 = ((($add$ptr)) + -1|0);
 $cmp16 = ($src$014|0)==($path|0);
 L1: do {
  if ($cmp16) {
   $src$0$lcssa = $path;
  } else {
   $add$ptr$pn17 = $add$ptr;$src$018 = $src$014;
   while(1) {
    $add$ptr2 = ((($add$ptr$pn17)) + -2|0);
    $0 = HEAP8[$add$ptr2>>0]|0;
    $cmp3 = ($0<<24>>24)==(47);
    if ($cmp3) {
     $src$0$lcssa = $src$018;
     break L1;
    }
    $src$0 = ((($src$018)) + -1|0);
    $cmp = ($src$0|0)==($path|0);
    if ($cmp) {
     $src$0$lcssa = $path;
     break;
    } else {
     $add$ptr$pn17$phi = $src$018;$src$018 = $src$0;$add$ptr$pn17 = $add$ptr$pn17$phi;
    }
   }
  }
 } while(0);
 $1 = $dest;
 $2 = $1;
 HEAP8[$2>>0]=0&255;HEAP8[$2+1>>0]=(0>>8)&255;HEAP8[$2+2>>0]=(0>>16)&255;HEAP8[$2+3>>0]=0>>24;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP8[$4>>0]=0&255;HEAP8[$4+1>>0]=(0>>8)&255;HEAP8[$4+2>>0]=(0>>16)&255;HEAP8[$4+3>>0]=0>>24;
 $length$0 = 0;$src$1 = $src$0$lcssa;
 L7: while(1) {
  $5 = HEAP8[$src$1>>0]|0;
  $conv6 = $5 << 24 >> 24;
  switch ($5<<24>>24) {
  case 46: case 0:  {
   label = 10;
   break L7;
   break;
  }
  default: {
  }
  }
  $cmp15 = ($length$0>>>0)>(7);
  if ($cmp15) {
   break;
  }
  $incdec$ptr18 = ((($src$1)) + 1|0);
  $call20 = (_toupper($conv6)|0);
  $conv21 = $call20&255;
  $inc = (($length$0) + 1)|0;
  $arrayidx = (($dest) + ($length$0)|0);
  HEAP8[$arrayidx>>0] = $conv21;
  $length$0 = $inc;$src$1 = $incdec$ptr18;
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer>>2] = $src$0$lcssa;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $dest;
 (_printf(151342,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _M_StringCopy($dest,$src,$dest_size) {
 $dest = $dest|0;
 $src = $src|0;
 $dest_size = $dest_size|0;
 var $0 = 0, $arrayidx = 0, $arrayidx3 = 0, $call2 = 0, $cmp = 0, $cmp4 = 0, $conv5 = 0, $retval$0 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($dest_size|0)==(0);
 if ($cmp) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $sub = (($dest_size) + -1)|0;
 $arrayidx = (($dest) + ($sub)|0);
 HEAP8[$arrayidx>>0] = 0;
 (_strncpy($dest,$src,$sub)|0);
 $call2 = (_strlen($dest)|0);
 $arrayidx3 = (($src) + ($call2)|0);
 $0 = HEAP8[$arrayidx3>>0]|0;
 $cmp4 = ($0<<24>>24)==(0);
 $conv5 = $cmp4&1;
 $retval$0 = $conv5;
 return ($retval$0|0);
}
function _M_StringEndsWith($s,$suffix) {
 $s = $s|0;
 $suffix = $suffix|0;
 var $0 = 0, $add$ptr = 0, $add$ptr4 = 0, $call = 0, $call1 = 0, $call5 = 0, $cmp = 0, $cmp6 = 0, $idx$neg = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($s)|0);
 $call1 = (_strlen($suffix)|0);
 $cmp = ($call>>>0)<($call1>>>0);
 if ($cmp) {
  $0 = 0;
  return ($0|0);
 }
 $add$ptr = (($s) + ($call)|0);
 $idx$neg = (0 - ($call1))|0;
 $add$ptr4 = (($add$ptr) + ($idx$neg)|0);
 $call5 = (_strcmp($add$ptr4,$suffix)|0);
 $cmp6 = ($call5|0)==(0);
 $phitmp = $cmp6&1;
 $0 = $phitmp;
 return ($0|0);
}
function _M_vsnprintf($buf,$buf_len,$s,$args) {
 $buf = $buf|0;
 $buf_len = $buf_len|0;
 $s = $s|0;
 $args = $args|0;
 var $arrayidx = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $or$cond = 0, $retval$0 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($buf_len|0)==(0);
 if ($cmp) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $call = (_vsnprintf($buf,$buf_len,$s,$args)|0);
 $cmp1 = ($call|0)>(-1);
 $cmp2 = ($call>>>0)<($buf_len>>>0);
 $or$cond = $cmp1 & $cmp2;
 $sub = (($buf_len) + -1)|0;
 if ($or$cond) {
  $retval$0 = $call;
  return ($retval$0|0);
 }
 $arrayidx = (($buf) + ($sub)|0);
 HEAP8[$arrayidx>>0] = 0;
 $retval$0 = $sub;
 return ($retval$0|0);
}
function _M_snprintf($buf,$buf_len,$s,$varargs) {
 $buf = $buf|0;
 $buf_len = $buf_len|0;
 $s = $s|0;
 $varargs = $varargs|0;
 var $args = 0, $arrayidx$i = 0, $call$i = 0, $cmp$i = 0, $cmp1$i = 0, $cmp2$i = 0, $or$cond$i = 0, $retval$0$i = 0, $sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $args = sp;
 HEAP32[$args>>2] = $varargs;
 $cmp$i = ($buf_len|0)==(0);
 if ($cmp$i) {
  $retval$0$i = 0;
 } else {
  $call$i = (_vsnprintf($buf,$buf_len,$s,$args)|0);
  $cmp1$i = ($call$i|0)>(-1);
  $cmp2$i = ($call$i>>>0)<($buf_len>>>0);
  $or$cond$i = $cmp1$i & $cmp2$i;
  $sub$i = (($buf_len) + -1)|0;
  if ($or$cond$i) {
   $retval$0$i = $call$i;
  } else {
   $arrayidx$i = (($buf) + ($sub$i)|0);
   HEAP8[$arrayidx$i>>0] = 0;
   $retval$0$i = $sub$i;
  }
 }
 STACKTOP = sp;return ($retval$0$i|0);
}
function _P_Random() {
 var $0 = 0, $1 = 0, $add = 0, $and = 0, $arrayidx = 0, $conv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99405]|0;
 $add = (($0) + 1)|0;
 $and = $add & 255;
 HEAP32[99405] = $and;
 $arrayidx = (49008 + ($and)|0);
 $1 = HEAP8[$arrayidx>>0]|0;
 $conv = $1&255;
 return ($conv|0);
}
function _M_Random() {
 var $0 = 0, $1 = 0, $add = 0, $and = 0, $arrayidx = 0, $conv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99404]|0;
 $add = (($0) + 1)|0;
 $and = $add & 255;
 HEAP32[99404] = $and;
 $arrayidx = (49008 + ($and)|0);
 $1 = HEAP8[$arrayidx>>0]|0;
 $conv = $1&255;
 return ($conv|0);
}
function _M_ClearRandom() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99405] = 0;
 HEAP32[99404] = 0;
 return;
}
function _T_MoveCeiling($ceiling) {
 $ceiling = $ceiling|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0;
 var $and19 = 0, $bottomheight = 0, $call = 0, $call18 = 0, $cmp = 0, $cond = 0, $cond1 = 0, $crush = 0, $direction = 0, $sector = 0, $sector15 = 0, $soundorg = 0, $soundorg25 = 0, $soundorg33 = 0, $soundorg8 = 0, $speed = 0, $speed16 = 0, $tobool = 0, $tobool20 = 0, $topheight = 0;
 var $type = 0, $type22 = 0, $type30 = 0, $type4 = 0, $type43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $direction = ((($ceiling)) + 36|0);
 $0 = HEAP32[$direction>>2]|0;
 switch ($0|0) {
 case -1:  {
  $sector15 = ((($ceiling)) + 16|0);
  $9 = HEAP32[$sector15>>2]|0;
  $speed16 = ((($ceiling)) + 28|0);
  $10 = HEAP32[$speed16>>2]|0;
  $bottomheight = ((($ceiling)) + 20|0);
  $11 = HEAP32[$bottomheight>>2]|0;
  $crush = ((($ceiling)) + 32|0);
  $12 = HEAP32[$crush>>2]|0;
  $call18 = (_T_MovePlane($9,$10,$11,$12,1,-1)|0);
  $13 = HEAP32[99557]|0;
  $and19 = $13 & 7;
  $tobool20 = ($and19|0)==(0);
  if ($tobool20) {
   $type22 = ((($ceiling)) + 12|0);
   $14 = HEAP32[$type22>>2]|0;
   $cond1 = ($14|0)==(5);
   if (!($cond1)) {
    $15 = HEAP32[$sector15>>2]|0;
    $soundorg25 = ((($15)) + 44|0);
    _S_StartSound($soundorg25,22);
   }
  }
  switch ($call18|0) {
  case 2:  {
   $type30 = ((($ceiling)) + 12|0);
   $16 = HEAP32[$type30>>2]|0;
   switch ($16|0) {
   case 5:  {
    $17 = HEAP32[$sector15>>2]|0;
    $soundorg33 = ((($17)) + 44|0);
    _S_StartSound($soundorg33,19);
    label = 16;
    break;
   }
   case 3:  {
    label = 16;
    break;
   }
   case 4:  {
    break;
   }
   case 0: case 2:  {
    _P_RemoveActiveCeiling($ceiling);
    return;
    break;
   }
   default: {
    return;
   }
   }
   if ((label|0) == 16) {
    HEAP32[$speed16>>2] = 65536;
   }
   HEAP32[$direction>>2] = 1;
   return;
   break;
  }
  case 1:  {
   $type43 = ((($ceiling)) + 12|0);
   $18 = HEAP32[$type43>>2]|0;
   switch ($18|0) {
   case 2: case 3: case 5:  {
    break;
   }
   default: {
    return;
   }
   }
   HEAP32[$speed16>>2] = 8192;
   return;
   break;
  }
  default: {
   return;
  }
  }
  break;
 }
 case 1:  {
  $sector = ((($ceiling)) + 16|0);
  $1 = HEAP32[$sector>>2]|0;
  $speed = ((($ceiling)) + 28|0);
  $2 = HEAP32[$speed>>2]|0;
  $topheight = ((($ceiling)) + 24|0);
  $3 = HEAP32[$topheight>>2]|0;
  $call = (_T_MovePlane($1,$2,$3,0,1,1)|0);
  $4 = HEAP32[99557]|0;
  $and = $4 & 7;
  $tobool = ($and|0)==(0);
  if ($tobool) {
   $type = ((($ceiling)) + 12|0);
   $5 = HEAP32[$type>>2]|0;
   $cond = ($5|0)==(5);
   if (!($cond)) {
    $6 = HEAP32[$sector>>2]|0;
    $soundorg = ((($6)) + 44|0);
    _S_StartSound($soundorg,22);
   }
  }
  $cmp = ($call|0)==(2);
  if (!($cmp)) {
   return;
  }
  $type4 = ((($ceiling)) + 12|0);
  $7 = HEAP32[$type4>>2]|0;
  switch ($7|0) {
  case 1:  {
   _P_RemoveActiveCeiling($ceiling);
   return;
   break;
  }
  case 5:  {
   $8 = HEAP32[$sector>>2]|0;
   $soundorg8 = ((($8)) + 44|0);
   _S_StartSound($soundorg8,19);
   break;
  }
  case 3: case 4:  {
   break;
  }
  default: {
   return;
  }
  }
  HEAP32[$direction>>2] = -1;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _P_RemoveActiveCeiling($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx$lcssa = 0, $cmp1 = 0, $cmp1$1 = 0, $cmp1$10 = 0, $cmp1$11 = 0, $cmp1$12 = 0, $cmp1$13 = 0, $cmp1$14 = 0;
 var $cmp1$15 = 0, $cmp1$16 = 0, $cmp1$17 = 0, $cmp1$18 = 0, $cmp1$19 = 0, $cmp1$2 = 0, $cmp1$20 = 0, $cmp1$21 = 0, $cmp1$22 = 0, $cmp1$23 = 0, $cmp1$24 = 0, $cmp1$25 = 0, $cmp1$26 = 0, $cmp1$27 = 0, $cmp1$28 = 0, $cmp1$29 = 0, $cmp1$3 = 0, $cmp1$4 = 0, $cmp1$5 = 0, $cmp1$6 = 0;
 var $cmp1$7 = 0, $cmp1$8 = 0, $cmp1$9 = 0, $sector = 0, $specialdata = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[46504]|0;
 $cmp1 = ($0|0)==($c|0);
 do {
  if ($cmp1) {
   $arrayidx$lcssa = 186016;
  } else {
   $1 = HEAP32[(186020)>>2]|0;
   $cmp1$1 = ($1|0)==($c|0);
   if ($cmp1$1) {
    $arrayidx$lcssa = (186020);
   } else {
    $4 = HEAP32[(186024)>>2]|0;
    $cmp1$2 = ($4|0)==($c|0);
    if ($cmp1$2) {
     $arrayidx$lcssa = (186024);
    } else {
     $5 = HEAP32[(186028)>>2]|0;
     $cmp1$3 = ($5|0)==($c|0);
     if ($cmp1$3) {
      $arrayidx$lcssa = (186028);
     } else {
      $6 = HEAP32[(186032)>>2]|0;
      $cmp1$4 = ($6|0)==($c|0);
      if ($cmp1$4) {
       $arrayidx$lcssa = (186032);
      } else {
       $7 = HEAP32[(186036)>>2]|0;
       $cmp1$5 = ($7|0)==($c|0);
       if ($cmp1$5) {
        $arrayidx$lcssa = (186036);
       } else {
        $8 = HEAP32[(186040)>>2]|0;
        $cmp1$6 = ($8|0)==($c|0);
        if ($cmp1$6) {
         $arrayidx$lcssa = (186040);
        } else {
         $9 = HEAP32[(186044)>>2]|0;
         $cmp1$7 = ($9|0)==($c|0);
         if ($cmp1$7) {
          $arrayidx$lcssa = (186044);
         } else {
          $10 = HEAP32[(186048)>>2]|0;
          $cmp1$8 = ($10|0)==($c|0);
          if ($cmp1$8) {
           $arrayidx$lcssa = (186048);
          } else {
           $11 = HEAP32[(186052)>>2]|0;
           $cmp1$9 = ($11|0)==($c|0);
           if ($cmp1$9) {
            $arrayidx$lcssa = (186052);
           } else {
            $12 = HEAP32[(186056)>>2]|0;
            $cmp1$10 = ($12|0)==($c|0);
            if ($cmp1$10) {
             $arrayidx$lcssa = (186056);
            } else {
             $13 = HEAP32[(186060)>>2]|0;
             $cmp1$11 = ($13|0)==($c|0);
             if ($cmp1$11) {
              $arrayidx$lcssa = (186060);
             } else {
              $14 = HEAP32[(186064)>>2]|0;
              $cmp1$12 = ($14|0)==($c|0);
              if ($cmp1$12) {
               $arrayidx$lcssa = (186064);
              } else {
               $15 = HEAP32[(186068)>>2]|0;
               $cmp1$13 = ($15|0)==($c|0);
               if ($cmp1$13) {
                $arrayidx$lcssa = (186068);
               } else {
                $16 = HEAP32[(186072)>>2]|0;
                $cmp1$14 = ($16|0)==($c|0);
                if ($cmp1$14) {
                 $arrayidx$lcssa = (186072);
                } else {
                 $17 = HEAP32[(186076)>>2]|0;
                 $cmp1$15 = ($17|0)==($c|0);
                 if ($cmp1$15) {
                  $arrayidx$lcssa = (186076);
                 } else {
                  $18 = HEAP32[(186080)>>2]|0;
                  $cmp1$16 = ($18|0)==($c|0);
                  if ($cmp1$16) {
                   $arrayidx$lcssa = (186080);
                  } else {
                   $19 = HEAP32[(186084)>>2]|0;
                   $cmp1$17 = ($19|0)==($c|0);
                   if ($cmp1$17) {
                    $arrayidx$lcssa = (186084);
                   } else {
                    $20 = HEAP32[(186088)>>2]|0;
                    $cmp1$18 = ($20|0)==($c|0);
                    if ($cmp1$18) {
                     $arrayidx$lcssa = (186088);
                    } else {
                     $21 = HEAP32[(186092)>>2]|0;
                     $cmp1$19 = ($21|0)==($c|0);
                     if ($cmp1$19) {
                      $arrayidx$lcssa = (186092);
                      break;
                     }
                     $22 = HEAP32[(186096)>>2]|0;
                     $cmp1$20 = ($22|0)==($c|0);
                     if ($cmp1$20) {
                      $arrayidx$lcssa = (186096);
                      break;
                     }
                     $23 = HEAP32[(186100)>>2]|0;
                     $cmp1$21 = ($23|0)==($c|0);
                     if ($cmp1$21) {
                      $arrayidx$lcssa = (186100);
                      break;
                     }
                     $24 = HEAP32[(186104)>>2]|0;
                     $cmp1$22 = ($24|0)==($c|0);
                     if ($cmp1$22) {
                      $arrayidx$lcssa = (186104);
                      break;
                     }
                     $25 = HEAP32[(186108)>>2]|0;
                     $cmp1$23 = ($25|0)==($c|0);
                     if ($cmp1$23) {
                      $arrayidx$lcssa = (186108);
                      break;
                     }
                     $26 = HEAP32[(186112)>>2]|0;
                     $cmp1$24 = ($26|0)==($c|0);
                     if ($cmp1$24) {
                      $arrayidx$lcssa = (186112);
                      break;
                     }
                     $27 = HEAP32[(186116)>>2]|0;
                     $cmp1$25 = ($27|0)==($c|0);
                     if ($cmp1$25) {
                      $arrayidx$lcssa = (186116);
                      break;
                     }
                     $28 = HEAP32[(186120)>>2]|0;
                     $cmp1$26 = ($28|0)==($c|0);
                     if ($cmp1$26) {
                      $arrayidx$lcssa = (186120);
                      break;
                     }
                     $29 = HEAP32[(186124)>>2]|0;
                     $cmp1$27 = ($29|0)==($c|0);
                     if ($cmp1$27) {
                      $arrayidx$lcssa = (186124);
                      break;
                     }
                     $30 = HEAP32[(186128)>>2]|0;
                     $cmp1$28 = ($30|0)==($c|0);
                     if ($cmp1$28) {
                      $arrayidx$lcssa = (186128);
                      break;
                     }
                     $31 = HEAP32[(186132)>>2]|0;
                     $cmp1$29 = ($31|0)==($c|0);
                     if ($cmp1$29) {
                      $arrayidx$lcssa = (186132);
                      break;
                     }
                     return;
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $sector = ((($c)) + 16|0);
 $2 = HEAP32[$sector>>2]|0;
 $specialdata = ((($2)) + 76|0);
 HEAP32[$specialdata>>2] = 0;
 $3 = HEAP32[$arrayidx$lcssa>>2]|0;
 _P_RemoveThinker($3);
 HEAP32[$arrayidx$lcssa>>2] = 0;
 return;
}
function _EV_DoCeiling($line,$type) {
 $line = $line|0;
 $type = $type|0;
 var $$off = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$us = 0, $add16 = 0;
 var $arrayidx$i = 0, $arrayidx$le = 0, $arrayidx$le$us = 0, $bottomheight$us = 0, $bottomheight12 = 0, $call = 0, $call$us = 0, $call1 = 0, $call1$us = 0, $call21 = 0, $call40 = 0, $call40$us = 0, $call4045 = 0, $call4048 = 0, $call4048$us = 0, $call42 = 0, $call42$us = 0, $ceilingheight$us = 0, $ceilingheight8 = 0, $cmp = 0;
 var $cmp$us = 0, $cmp13 = 0, $cmp3$i = 0, $cmp41 = 0, $cmp41$us = 0, $cmp4146 = 0, $cmp7$i = 0, $conv = 0, $conv$i = 0, $conv$us = 0, $crush = 0, $crush$us = 0, $direction$i = 0, $direction$us = 0, $direction23 = 0, $exitcond$i = 0, $function = 0, $function$i = 0, $function$us = 0, $i$09$i = 0;
 var $inc$i = 0, $olddirection$i = 0, $rtn$0$ph$lcssa = 0, $rtn$0$ph47 = 0, $rtn$0$ph47$us = 0, $sector = 0, $sector$us = 0, $spec$select = 0, $specialdata = 0, $specialdata$us = 0, $speed$us = 0, $speed24 = 0, $switch = 0, $tag = 0, $tag$i = 0, $tag$us = 0, $tag2$i = 0, $tag26 = 0, $tag26$us = 0, $tobool = 0;
 var $tobool$i = 0, $tobool$us = 0, $topheight$us = 0, $topheight22 = 0, $topheight9 = 0, $type27 = 0, $type27$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$off = (($type) + -3)|0;
 $switch = ($$off>>>0)<(3);
 if ($switch) {
  $tag2$i = ((($line)) + 20|0);
  $i$09$i = 0;
  while(1) {
   $arrayidx$i = (186016 + ($i$09$i<<2)|0);
   $0 = HEAP32[$arrayidx$i>>2]|0;
   $tobool$i = ($0|0)==(0|0);
   if (!($tobool$i)) {
    $tag$i = ((($0)) + 40|0);
    $1 = HEAP32[$tag$i>>2]|0;
    $2 = HEAP16[$tag2$i>>1]|0;
    $conv$i = $2 << 16 >> 16;
    $cmp3$i = ($1|0)==($conv$i|0);
    if ($cmp3$i) {
     $direction$i = ((($0)) + 36|0);
     $3 = HEAP32[$direction$i>>2]|0;
     $cmp7$i = ($3|0)==(0);
     if ($cmp7$i) {
      $olddirection$i = ((($0)) + 44|0);
      $4 = HEAP32[$olddirection$i>>2]|0;
      HEAP32[$direction$i>>2] = $4;
      $function$i = ((($0)) + 8|0);
      HEAP32[$function$i>>2] = 133;
     }
    }
   }
   $inc$i = (($i$09$i) + 1)|0;
   $exitcond$i = ($inc$i|0)==(30);
   if ($exitcond$i) {
    break;
   } else {
    $i$09$i = $inc$i;
   }
  }
 }
 $call4045 = (_P_FindSectorFromLineTag($line,-1)|0);
 $cmp4146 = ($call4045|0)>(-1);
 if (!($cmp4146)) {
  $rtn$0$ph$lcssa = 0;
  return ($rtn$0$ph$lcssa|0);
 }
 $cmp13 = ($type|0)==(0);
 $5 = ($type|0)==(4);
 if ($5) {
  $call4048$us = $call4045;$rtn$0$ph47$us = 0;
  L16: while(1) {
   $call42$us = $call4048$us;
   while(1) {
    $6 = HEAP32[99506]|0;
    $specialdata$us = (((($6) + (($call42$us*88)|0)|0)) + 76|0);
    $7 = HEAP32[$specialdata$us>>2]|0;
    $tobool$us = ($7|0)==(0|0);
    if ($tobool$us) {
     break;
    }
    $call$us = (_P_FindSectorFromLineTag($line,$call42$us)|0);
    $cmp$us = ($call$us|0)>(-1);
    if ($cmp$us) {
     $call42$us = $call$us;
    } else {
     $rtn$0$ph$lcssa = $rtn$0$ph47$us;
     label = 25;
     break L16;
    }
   }
   $arrayidx$le$us = (($6) + (($call42$us*88)|0)|0);
   $call1$us = (_Z_Malloc(48,6,0)|0);
   _P_AddThinker($call1$us);
   HEAP32[$specialdata$us>>2] = $call1$us;
   $function$us = ((($call1$us)) + 8|0);
   HEAP32[$function$us>>2] = 133;
   $sector$us = ((($call1$us)) + 16|0);
   HEAP32[$sector$us>>2] = $arrayidx$le$us;
   $crush$us = ((($call1$us)) + 32|0);
   HEAP32[$crush$us>>2] = 1;
   $ceilingheight$us = (((($6) + (($call42$us*88)|0)|0)) + 4|0);
   $8 = HEAP32[$ceilingheight$us>>2]|0;
   $topheight$us = ((($call1$us)) + 24|0);
   HEAP32[$topheight$us>>2] = $8;
   $9 = HEAP32[$arrayidx$le$us>>2]|0;
   $add$us = (($9) + 524288)|0;
   $bottomheight$us = ((($call1$us)) + 20|0);
   HEAP32[$bottomheight$us>>2] = $add$us;
   $direction$us = ((($call1$us)) + 36|0);
   HEAP32[$direction$us>>2] = -1;
   $speed$us = ((($call1$us)) + 28|0);
   HEAP32[$speed$us>>2] = 131072;
   $tag$us = (((($6) + (($call42$us*88)|0)|0)) + 16|0);
   $10 = HEAP16[$tag$us>>1]|0;
   $conv$us = $10 << 16 >> 16;
   $tag26$us = ((($call1$us)) + 40|0);
   HEAP32[$tag26$us>>2] = $conv$us;
   $type27$us = ((($call1$us)) + 12|0);
   HEAP32[$type27$us>>2] = 4;
   _P_AddActiveCeiling($call1$us);
   $call40$us = (_P_FindSectorFromLineTag($line,$call42$us)|0);
   $cmp41$us = ($call40$us|0)>(-1);
   if ($cmp41$us) {
    $call4048$us = $call40$us;$rtn$0$ph47$us = 1;
   } else {
    $rtn$0$ph$lcssa = 1;
    label = 25;
    break;
   }
  }
  if ((label|0) == 25) {
   return ($rtn$0$ph$lcssa|0);
  }
 }
 $call4048 = $call4045;$rtn$0$ph47 = 0;
 L26: while(1) {
  $call42 = $call4048;
  while(1) {
   $11 = HEAP32[99506]|0;
   $specialdata = (((($11) + (($call42*88)|0)|0)) + 76|0);
   $12 = HEAP32[$specialdata>>2]|0;
   $tobool = ($12|0)==(0|0);
   if ($tobool) {
    break;
   }
   $call = (_P_FindSectorFromLineTag($line,$call42)|0);
   $cmp = ($call|0)>(-1);
   if ($cmp) {
    $call42 = $call;
   } else {
    $rtn$0$ph$lcssa = $rtn$0$ph47;
    label = 25;
    break L26;
   }
  }
  $arrayidx$le = (($11) + (($call42*88)|0)|0);
  $call1 = (_Z_Malloc(48,6,0)|0);
  _P_AddThinker($call1);
  HEAP32[$specialdata>>2] = $call1;
  $function = ((($call1)) + 8|0);
  HEAP32[$function>>2] = 133;
  $sector = ((($call1)) + 16|0);
  HEAP32[$sector>>2] = $arrayidx$le;
  $crush = ((($call1)) + 32|0);
  HEAP32[$crush>>2] = 0;
  switch ($type|0) {
  case 1:  {
   $call21 = (_P_FindHighestCeilingSurrounding($arrayidx$le)|0);
   $topheight22 = ((($call1)) + 24|0);
   HEAP32[$topheight22>>2] = $call21;
   $$sink = 1;
   label = 23;
   break;
  }
  case 3: case 5:  {
   HEAP32[$crush>>2] = 1;
   $ceilingheight8 = (((($11) + (($call42*88)|0)|0)) + 4|0);
   $13 = HEAP32[$ceilingheight8>>2]|0;
   $topheight9 = ((($call1)) + 24|0);
   HEAP32[$topheight9>>2] = $13;
   label = 21;
   break;
  }
  case 0: case 2:  {
   label = 21;
   break;
  }
  default: {
  }
  }
  if ((label|0) == 21) {
   label = 0;
   $14 = HEAP32[$arrayidx$le>>2]|0;
   $bottomheight12 = ((($call1)) + 20|0);
   $add16 = (($14) + 524288)|0;
   $spec$select = $cmp13 ? $14 : $add16;
   HEAP32[$bottomheight12>>2] = $spec$select;
   $$sink = -1;
   label = 23;
  }
  if ((label|0) == 23) {
   label = 0;
   $direction23 = ((($call1)) + 36|0);
   HEAP32[$direction23>>2] = $$sink;
   $speed24 = ((($call1)) + 28|0);
   HEAP32[$speed24>>2] = 65536;
  }
  $tag = (((($11) + (($call42*88)|0)|0)) + 16|0);
  $15 = HEAP16[$tag>>1]|0;
  $conv = $15 << 16 >> 16;
  $tag26 = ((($call1)) + 40|0);
  HEAP32[$tag26>>2] = $conv;
  $type27 = ((($call1)) + 12|0);
  HEAP32[$type27>>2] = $type;
  _P_AddActiveCeiling($call1);
  $call40 = (_P_FindSectorFromLineTag($line,$call42)|0);
  $cmp41 = ($call40|0)>(-1);
  if ($cmp41) {
   $call4048 = $call40;$rtn$0$ph47 = 1;
  } else {
   $rtn$0$ph$lcssa = 1;
   label = 25;
   break;
  }
 }
 if ((label|0) == 25) {
  return ($rtn$0$ph$lcssa|0);
 }
 return (0)|0;
}
function _P_AddActiveCeiling($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx$lcssa = 0, $cmp1 = 0, $cmp1$1 = 0, $cmp1$10 = 0, $cmp1$11 = 0, $cmp1$12 = 0, $cmp1$13 = 0, $cmp1$14 = 0, $cmp1$15 = 0, $cmp1$16 = 0;
 var $cmp1$17 = 0, $cmp1$18 = 0, $cmp1$19 = 0, $cmp1$2 = 0, $cmp1$20 = 0, $cmp1$21 = 0, $cmp1$22 = 0, $cmp1$23 = 0, $cmp1$24 = 0, $cmp1$25 = 0, $cmp1$26 = 0, $cmp1$27 = 0, $cmp1$28 = 0, $cmp1$29 = 0, $cmp1$3 = 0, $cmp1$4 = 0, $cmp1$5 = 0, $cmp1$6 = 0, $cmp1$7 = 0, $cmp1$8 = 0;
 var $cmp1$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[46504]|0;
 $cmp1 = ($0|0)==(0|0);
 do {
  if ($cmp1) {
   $arrayidx$lcssa = 186016;
  } else {
   $1 = HEAP32[(186020)>>2]|0;
   $cmp1$1 = ($1|0)==(0|0);
   if ($cmp1$1) {
    $arrayidx$lcssa = (186020);
   } else {
    $2 = HEAP32[(186024)>>2]|0;
    $cmp1$2 = ($2|0)==(0|0);
    if ($cmp1$2) {
     $arrayidx$lcssa = (186024);
    } else {
     $3 = HEAP32[(186028)>>2]|0;
     $cmp1$3 = ($3|0)==(0|0);
     if ($cmp1$3) {
      $arrayidx$lcssa = (186028);
     } else {
      $4 = HEAP32[(186032)>>2]|0;
      $cmp1$4 = ($4|0)==(0|0);
      if ($cmp1$4) {
       $arrayidx$lcssa = (186032);
      } else {
       $5 = HEAP32[(186036)>>2]|0;
       $cmp1$5 = ($5|0)==(0|0);
       if ($cmp1$5) {
        $arrayidx$lcssa = (186036);
       } else {
        $6 = HEAP32[(186040)>>2]|0;
        $cmp1$6 = ($6|0)==(0|0);
        if ($cmp1$6) {
         $arrayidx$lcssa = (186040);
        } else {
         $7 = HEAP32[(186044)>>2]|0;
         $cmp1$7 = ($7|0)==(0|0);
         if ($cmp1$7) {
          $arrayidx$lcssa = (186044);
         } else {
          $8 = HEAP32[(186048)>>2]|0;
          $cmp1$8 = ($8|0)==(0|0);
          if ($cmp1$8) {
           $arrayidx$lcssa = (186048);
          } else {
           $9 = HEAP32[(186052)>>2]|0;
           $cmp1$9 = ($9|0)==(0|0);
           if ($cmp1$9) {
            $arrayidx$lcssa = (186052);
           } else {
            $10 = HEAP32[(186056)>>2]|0;
            $cmp1$10 = ($10|0)==(0|0);
            if ($cmp1$10) {
             $arrayidx$lcssa = (186056);
            } else {
             $11 = HEAP32[(186060)>>2]|0;
             $cmp1$11 = ($11|0)==(0|0);
             if ($cmp1$11) {
              $arrayidx$lcssa = (186060);
             } else {
              $12 = HEAP32[(186064)>>2]|0;
              $cmp1$12 = ($12|0)==(0|0);
              if ($cmp1$12) {
               $arrayidx$lcssa = (186064);
              } else {
               $13 = HEAP32[(186068)>>2]|0;
               $cmp1$13 = ($13|0)==(0|0);
               if ($cmp1$13) {
                $arrayidx$lcssa = (186068);
               } else {
                $14 = HEAP32[(186072)>>2]|0;
                $cmp1$14 = ($14|0)==(0|0);
                if ($cmp1$14) {
                 $arrayidx$lcssa = (186072);
                } else {
                 $15 = HEAP32[(186076)>>2]|0;
                 $cmp1$15 = ($15|0)==(0|0);
                 if ($cmp1$15) {
                  $arrayidx$lcssa = (186076);
                 } else {
                  $16 = HEAP32[(186080)>>2]|0;
                  $cmp1$16 = ($16|0)==(0|0);
                  if ($cmp1$16) {
                   $arrayidx$lcssa = (186080);
                  } else {
                   $17 = HEAP32[(186084)>>2]|0;
                   $cmp1$17 = ($17|0)==(0|0);
                   if ($cmp1$17) {
                    $arrayidx$lcssa = (186084);
                   } else {
                    $18 = HEAP32[(186088)>>2]|0;
                    $cmp1$18 = ($18|0)==(0|0);
                    if ($cmp1$18) {
                     $arrayidx$lcssa = (186088);
                    } else {
                     $19 = HEAP32[(186092)>>2]|0;
                     $cmp1$19 = ($19|0)==(0|0);
                     if ($cmp1$19) {
                      $arrayidx$lcssa = (186092);
                      break;
                     }
                     $20 = HEAP32[(186096)>>2]|0;
                     $cmp1$20 = ($20|0)==(0|0);
                     if ($cmp1$20) {
                      $arrayidx$lcssa = (186096);
                      break;
                     }
                     $21 = HEAP32[(186100)>>2]|0;
                     $cmp1$21 = ($21|0)==(0|0);
                     if ($cmp1$21) {
                      $arrayidx$lcssa = (186100);
                      break;
                     }
                     $22 = HEAP32[(186104)>>2]|0;
                     $cmp1$22 = ($22|0)==(0|0);
                     if ($cmp1$22) {
                      $arrayidx$lcssa = (186104);
                      break;
                     }
                     $23 = HEAP32[(186108)>>2]|0;
                     $cmp1$23 = ($23|0)==(0|0);
                     if ($cmp1$23) {
                      $arrayidx$lcssa = (186108);
                      break;
                     }
                     $24 = HEAP32[(186112)>>2]|0;
                     $cmp1$24 = ($24|0)==(0|0);
                     if ($cmp1$24) {
                      $arrayidx$lcssa = (186112);
                      break;
                     }
                     $25 = HEAP32[(186116)>>2]|0;
                     $cmp1$25 = ($25|0)==(0|0);
                     if ($cmp1$25) {
                      $arrayidx$lcssa = (186116);
                      break;
                     }
                     $26 = HEAP32[(186120)>>2]|0;
                     $cmp1$26 = ($26|0)==(0|0);
                     if ($cmp1$26) {
                      $arrayidx$lcssa = (186120);
                      break;
                     }
                     $27 = HEAP32[(186124)>>2]|0;
                     $cmp1$27 = ($27|0)==(0|0);
                     if ($cmp1$27) {
                      $arrayidx$lcssa = (186124);
                      break;
                     }
                     $28 = HEAP32[(186128)>>2]|0;
                     $cmp1$28 = ($28|0)==(0|0);
                     if ($cmp1$28) {
                      $arrayidx$lcssa = (186128);
                      break;
                     }
                     $29 = HEAP32[(186132)>>2]|0;
                     $cmp1$29 = ($29|0)==(0|0);
                     if ($cmp1$29) {
                      $arrayidx$lcssa = (186132);
                      break;
                     }
                     return;
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 HEAP32[$arrayidx$lcssa>>2] = $c;
 return;
}
function _EV_CeilingCrushStop($line) {
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $acv = 0, $arrayidx = 0, $cmp3 = 0, $cmp7 = 0, $conv = 0, $direction = 0, $direction14 = 0, $exitcond = 0, $i$011 = 0, $inc = 0, $olddirection = 0, $rtn$012 = 0, $rtn$1 = 0, $tag = 0, $tag2 = 0;
 var $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tag2 = ((($line)) + 20|0);
 $i$011 = 0;$rtn$012 = 0;
 while(1) {
  $arrayidx = (186016 + ($i$011<<2)|0);
  $0 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($0|0)==(0|0);
  if ($tobool) {
   $rtn$1 = $rtn$012;
  } else {
   $tag = ((($0)) + 40|0);
   $1 = HEAP32[$tag>>2]|0;
   $2 = HEAP16[$tag2>>1]|0;
   $conv = $2 << 16 >> 16;
   $cmp3 = ($1|0)==($conv|0);
   if ($cmp3) {
    $direction = ((($0)) + 36|0);
    $3 = HEAP32[$direction>>2]|0;
    $cmp7 = ($3|0)==(0);
    if ($cmp7) {
     $rtn$1 = $rtn$012;
    } else {
     $olddirection = ((($0)) + 44|0);
     HEAP32[$olddirection>>2] = $3;
     $acv = ((($0)) + 8|0);
     HEAP32[$acv>>2] = 0;
     $4 = HEAP32[$arrayidx>>2]|0;
     $direction14 = ((($4)) + 36|0);
     HEAP32[$direction14>>2] = 0;
     $rtn$1 = 1;
    }
   } else {
    $rtn$1 = $rtn$012;
   }
  }
  $inc = (($i$011) + 1)|0;
  $exitcond = ($inc|0)==(30);
  if ($exitcond) {
   break;
  } else {
   $i$011 = $inc;$rtn$012 = $rtn$1;
  }
 }
 return ($rtn$1|0);
}
function _T_VerticalDoor($door) {
 $door = $door|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call59 = 0, $cmp60 = 0, $cond = 0, $dec = 0, $dec13 = 0, $direction = 0, $sector = 0, $sector20 = 0, $sector26 = 0, $sector5 = 0, $sector56 = 0, $sector9 = 0, $soundorg = 0, $soundorg10 = 0, $soundorg21 = 0;
 var $soundorg34 = 0, $soundorg51 = 0, $soundorg6 = 0, $specialdata = 0, $specialdata37 = 0, $specialdata68 = 0, $speed = 0, $speed57 = 0, $tobool = 0, $tobool14 = 0, $topcountdown = 0, $topcountdown12 = 0, $topcountdown41 = 0, $topcountdown65 = 0, $topheight = 0, $topwait = 0, $type = 0, $type16 = 0, $type30 = 0, $type46 = 0;
 var $type62 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $direction = ((($door)) + 28|0);
 $0 = HEAP32[$direction>>2]|0;
 switch ($0|0) {
 case 0:  {
  $topcountdown = ((($door)) + 36|0);
  $1 = HEAP32[$topcountdown>>2]|0;
  $dec = (($1) + -1)|0;
  HEAP32[$topcountdown>>2] = $dec;
  $tobool = ($dec|0)==(0);
  if (!($tobool)) {
   return;
  }
  $type = ((($door)) + 12|0);
  $2 = HEAP32[$type>>2]|0;
  switch ($2|0) {
  case 5:  {
   HEAP32[$direction>>2] = -1;
   $sector = ((($door)) + 16|0);
   $3 = HEAP32[$sector>>2]|0;
   $soundorg = ((($3)) + 44|0);
   _S_StartSound($soundorg,89);
   return;
   break;
  }
  case 0:  {
   HEAP32[$direction>>2] = -1;
   $sector5 = ((($door)) + 16|0);
   $4 = HEAP32[$sector5>>2]|0;
   $soundorg6 = ((($4)) + 44|0);
   _S_StartSound($soundorg6,21);
   return;
   break;
  }
  case 1:  {
   HEAP32[$direction>>2] = 1;
   $sector9 = ((($door)) + 16|0);
   $5 = HEAP32[$sector9>>2]|0;
   $soundorg10 = ((($5)) + 44|0);
   _S_StartSound($soundorg10,20);
   return;
   break;
  }
  default: {
   return;
  }
  }
  break;
 }
 case 2:  {
  $topcountdown12 = ((($door)) + 36|0);
  $6 = HEAP32[$topcountdown12>>2]|0;
  $dec13 = (($6) + -1)|0;
  HEAP32[$topcountdown12>>2] = $dec13;
  $tobool14 = ($dec13|0)==(0);
  if (!($tobool14)) {
   return;
  }
  $type16 = ((($door)) + 12|0);
  $7 = HEAP32[$type16>>2]|0;
  $cond = ($7|0)==(4);
  if (!($cond)) {
   return;
  }
  HEAP32[$direction>>2] = 1;
  HEAP32[$type16>>2] = 0;
  $sector20 = ((($door)) + 16|0);
  $8 = HEAP32[$sector20>>2]|0;
  $soundorg21 = ((($8)) + 44|0);
  _S_StartSound($soundorg21,20);
  return;
  break;
 }
 case -1:  {
  $sector26 = ((($door)) + 16|0);
  $9 = HEAP32[$sector26>>2]|0;
  $speed = ((($door)) + 24|0);
  $10 = HEAP32[$speed>>2]|0;
  $11 = HEAP32[$9>>2]|0;
  $call = (_T_MovePlane($9,$10,$11,0,1,-1)|0);
  switch ($call|0) {
  case 2:  {
   $type30 = ((($door)) + 12|0);
   $12 = HEAP32[$type30>>2]|0;
   switch ($12|0) {
   case 7: case 5:  {
    $13 = HEAP32[$sector26>>2]|0;
    $specialdata = ((($13)) + 76|0);
    HEAP32[$specialdata>>2] = 0;
    _P_RemoveThinker($door);
    $14 = HEAP32[$sector26>>2]|0;
    $soundorg34 = ((($14)) + 44|0);
    _S_StartSound($soundorg34,89);
    return;
    break;
   }
   case 2: case 0:  {
    $15 = HEAP32[$sector26>>2]|0;
    $specialdata37 = ((($15)) + 76|0);
    HEAP32[$specialdata37>>2] = 0;
    _P_RemoveThinker($door);
    return;
    break;
   }
   case 1:  {
    HEAP32[$direction>>2] = 0;
    $topcountdown41 = ((($door)) + 36|0);
    HEAP32[$topcountdown41>>2] = 1050;
    return;
    break;
   }
   default: {
    return;
   }
   }
   break;
  }
  case 1:  {
   $type46 = ((($door)) + 12|0);
   $16 = HEAP32[$type46>>2]|0;
   switch ($16|0) {
   case 2: case 7:  {
    return;
    break;
   }
   default: {
   }
   }
   HEAP32[$direction>>2] = 1;
   $17 = HEAP32[$sector26>>2]|0;
   $soundorg51 = ((($17)) + 44|0);
   _S_StartSound($soundorg51,20);
   return;
   break;
  }
  default: {
   return;
  }
  }
  break;
 }
 case 1:  {
  $sector56 = ((($door)) + 16|0);
  $18 = HEAP32[$sector56>>2]|0;
  $speed57 = ((($door)) + 24|0);
  $19 = HEAP32[$speed57>>2]|0;
  $topheight = ((($door)) + 20|0);
  $20 = HEAP32[$topheight>>2]|0;
  $call59 = (_T_MovePlane($18,$19,$20,0,1,1)|0);
  $cmp60 = ($call59|0)==(2);
  if (!($cmp60)) {
   return;
  }
  $type62 = ((($door)) + 12|0);
  $21 = HEAP32[$type62>>2]|0;
  switch ($21|0) {
  case 0: case 5:  {
   HEAP32[$direction>>2] = 0;
   $topwait = ((($door)) + 32|0);
   $22 = HEAP32[$topwait>>2]|0;
   $topcountdown65 = ((($door)) + 36|0);
   HEAP32[$topcountdown65>>2] = $22;
   return;
   break;
  }
  case 3: case 6: case 1:  {
   $23 = HEAP32[$sector56>>2]|0;
   $specialdata68 = ((($23)) + 76|0);
   HEAP32[$specialdata68>>2] = 0;
   _P_RemoveThinker($door);
   return;
   break;
  }
  default: {
   return;
  }
  }
  break;
 }
 default: {
  return;
 }
 }
}
function _EV_DoLockedDoor($line,$type,$thing) {
 $line = $line|0;
 $type = $type|0;
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx = 0, $arrayidx15 = 0, $arrayidx19 = 0, $arrayidx29 = 0, $arrayidx33 = 0, $arrayidx6 = 0, $call = 0, $conv = 0, $message = 0, $message22 = 0, $message36 = 0, $player = 0;
 var $retval$0 = 0, $special = 0, $tobool = 0, $tobool16 = 0, $tobool20 = 0, $tobool30 = 0, $tobool34 = 0, $tobool4 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $player = ((($thing)) + 132|0);
 $0 = HEAP32[$player>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $special = ((($line)) + 18|0);
 $1 = HEAP16[$special>>1]|0;
 $conv = $1 << 16 >> 16;
 switch ($conv|0) {
 case 133: case 99:  {
  $arrayidx = ((($0)) + 76|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $tobool4 = ($2|0)==(0);
  if ($tobool4) {
   $arrayidx6 = ((($0)) + 88|0);
   $3 = HEAP32[$arrayidx6>>2]|0;
   $tobool7 = ($3|0)==(0);
   if ($tobool7) {
    $message = ((($0)) + 224|0);
    HEAP32[$message>>2] = 151388;
    _S_StartSound(0,34);
    $retval$0 = 0;
    return ($retval$0|0);
   }
  }
  break;
 }
 case 135: case 134:  {
  $arrayidx15 = ((($0)) + 84|0);
  $4 = HEAP32[$arrayidx15>>2]|0;
  $tobool16 = ($4|0)==(0);
  if ($tobool16) {
   $arrayidx19 = ((($0)) + 96|0);
   $5 = HEAP32[$arrayidx19>>2]|0;
   $tobool20 = ($5|0)==(0);
   if ($tobool20) {
    $message22 = ((($0)) + 224|0);
    HEAP32[$message22>>2] = 151432;
    _S_StartSound(0,34);
    $retval$0 = 0;
    return ($retval$0|0);
   }
  }
  break;
 }
 case 137: case 136:  {
  $arrayidx29 = ((($0)) + 80|0);
  $6 = HEAP32[$arrayidx29>>2]|0;
  $tobool30 = ($6|0)==(0);
  if ($tobool30) {
   $arrayidx33 = ((($0)) + 92|0);
   $7 = HEAP32[$arrayidx33>>2]|0;
   $tobool34 = ($7|0)==(0);
   if ($tobool34) {
    $message36 = ((($0)) + 224|0);
    HEAP32[$message36>>2] = 151475;
    _S_StartSound(0,34);
    $retval$0 = 0;
    return ($retval$0|0);
   }
  }
  break;
 }
 default: {
 }
 }
 $call = (_EV_DoDoor($line,$type)|0);
 $retval$0 = $call;
 return ($retval$0|0);
}
function _EV_DoDoor($line,$type) {
 $line = $line|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx$le = 0, $arrayidx$le$us = 0, $call = 0, $call$us = 0, $call1 = 0, $call1$us = 0, $call10 = 0, $call24 = 0;
 var $call38 = 0, $call46 = 0, $call46$us = 0, $call4651 = 0, $call4654 = 0, $call4654$us = 0, $call48 = 0, $call48$us = 0, $call5$us = 0, $ceilingheight = 0, $ceilingheight30 = 0, $ceilingheight43 = 0, $cmp = 0, $cmp$us = 0, $cmp31 = 0, $cmp44 = 0, $cmp47 = 0, $cmp47$us = 0, $cmp4752 = 0, $direction$us = 0;
 var $direction14 = 0, $direction19 = 0, $direction23 = 0, $direction37 = 0, $function = 0, $function$us = 0, $rtn$0$ph$lcssa = 0, $rtn$0$ph53 = 0, $rtn$0$ph53$us = 0, $sector = 0, $sector$us = 0, $soundorg$us = 0, $soundorg16 = 0, $soundorg21 = 0, $soundorg34 = 0, $soundorg47 = 0, $specialdata = 0, $specialdata$us = 0, $speed = 0, $speed$us = 0;
 var $sub$us = 0, $sub13 = 0, $sub27 = 0, $sub41 = 0, $tobool = 0, $tobool$us = 0, $topheight$us = 0, $topheight11 = 0, $topheight18 = 0, $topheight25 = 0, $topheight39 = 0, $topwait = 0, $topwait$us = 0, $type4 = 0, $type4$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call4651 = (_P_FindSectorFromLineTag($line,-1)|0);
 $cmp4752 = ($call4651|0)>(-1);
 if (!($cmp4752)) {
  $rtn$0$ph$lcssa = 0;
  return ($rtn$0$ph$lcssa|0);
 }
 $0 = ($type|0)==(7);
 if ($0) {
  $call4654$us = $call4651;$rtn$0$ph53$us = 0;
  L6: while(1) {
   $call48$us = $call4654$us;
   while(1) {
    $1 = HEAP32[99506]|0;
    $specialdata$us = (((($1) + (($call48$us*88)|0)|0)) + 76|0);
    $2 = HEAP32[$specialdata$us>>2]|0;
    $tobool$us = ($2|0)==(0|0);
    if ($tobool$us) {
     break;
    }
    $call$us = (_P_FindSectorFromLineTag($line,$call48$us)|0);
    $cmp$us = ($call$us|0)>(-1);
    if ($cmp$us) {
     $call48$us = $call$us;
    } else {
     $rtn$0$ph$lcssa = $rtn$0$ph53$us;
     label = 20;
     break L6;
    }
   }
   $arrayidx$le$us = (($1) + (($call48$us*88)|0)|0);
   $call1$us = (_Z_Malloc(40,6,0)|0);
   _P_AddThinker($call1$us);
   HEAP32[$specialdata$us>>2] = $call1$us;
   $function$us = ((($call1$us)) + 8|0);
   HEAP32[$function$us>>2] = 134;
   $sector$us = ((($call1$us)) + 16|0);
   HEAP32[$sector$us>>2] = $arrayidx$le$us;
   $type4$us = ((($call1$us)) + 12|0);
   HEAP32[$type4$us>>2] = 7;
   $topwait$us = ((($call1$us)) + 32|0);
   HEAP32[$topwait$us>>2] = 150;
   $speed$us = ((($call1$us)) + 24|0);
   HEAP32[$speed$us>>2] = 131072;
   $call5$us = (_P_FindLowestCeilingSurrounding($arrayidx$le$us)|0);
   $topheight$us = ((($call1$us)) + 20|0);
   $sub$us = (($call5$us) + -262144)|0;
   HEAP32[$topheight$us>>2] = $sub$us;
   $direction$us = ((($call1$us)) + 28|0);
   HEAP32[$direction$us>>2] = -1;
   HEAP32[$speed$us>>2] = 524288;
   $3 = HEAP32[$sector$us>>2]|0;
   $soundorg$us = ((($3)) + 44|0);
   _S_StartSound($soundorg$us,89);
   $call46$us = (_P_FindSectorFromLineTag($line,$call48$us)|0);
   $cmp47$us = ($call46$us|0)>(-1);
   if ($cmp47$us) {
    $call4654$us = $call46$us;$rtn$0$ph53$us = 1;
   } else {
    $rtn$0$ph$lcssa = 1;
    label = 20;
    break;
   }
  }
  if ((label|0) == 20) {
   return ($rtn$0$ph$lcssa|0);
  }
 }
 $call4654 = $call4651;$rtn$0$ph53 = 0;
 L16: while(1) {
  $call48 = $call4654;
  while(1) {
   $4 = HEAP32[99506]|0;
   $specialdata = (((($4) + (($call48*88)|0)|0)) + 76|0);
   $5 = HEAP32[$specialdata>>2]|0;
   $tobool = ($5|0)==(0|0);
   if ($tobool) {
    break;
   }
   $call = (_P_FindSectorFromLineTag($line,$call48)|0);
   $cmp = ($call|0)>(-1);
   if ($cmp) {
    $call48 = $call;
   } else {
    $rtn$0$ph$lcssa = $rtn$0$ph53;
    label = 20;
    break L16;
   }
  }
  $arrayidx$le = (($4) + (($call48*88)|0)|0);
  $call1 = (_Z_Malloc(40,6,0)|0);
  _P_AddThinker($call1);
  HEAP32[$specialdata>>2] = $call1;
  $function = ((($call1)) + 8|0);
  HEAP32[$function>>2] = 134;
  $sector = ((($call1)) + 16|0);
  HEAP32[$sector>>2] = $arrayidx$le;
  $type4 = ((($call1)) + 12|0);
  HEAP32[$type4>>2] = $type;
  $topwait = ((($call1)) + 32|0);
  HEAP32[$topwait>>2] = 150;
  $speed = ((($call1)) + 24|0);
  HEAP32[$speed>>2] = 131072;
  switch ($type|0) {
  case 0: case 3:  {
   $direction37 = ((($call1)) + 28|0);
   HEAP32[$direction37>>2] = 1;
   $call38 = (_P_FindLowestCeilingSurrounding($arrayidx$le)|0);
   $topheight39 = ((($call1)) + 20|0);
   $sub41 = (($call38) + -262144)|0;
   HEAP32[$topheight39>>2] = $sub41;
   $ceilingheight43 = (((($4) + (($call48*88)|0)|0)) + 4|0);
   $10 = HEAP32[$ceilingheight43>>2]|0;
   $cmp44 = ($sub41|0)==($10|0);
   if (!($cmp44)) {
    $11 = HEAP32[$sector>>2]|0;
    $soundorg47 = ((($11)) + 44|0);
    _S_StartSound($soundorg47,20);
   }
   break;
  }
  case 2:  {
   $call10 = (_P_FindLowestCeilingSurrounding($arrayidx$le)|0);
   $topheight11 = ((($call1)) + 20|0);
   $sub13 = (($call10) + -262144)|0;
   HEAP32[$topheight11>>2] = $sub13;
   $direction14 = ((($call1)) + 28|0);
   HEAP32[$direction14>>2] = -1;
   $6 = HEAP32[$sector>>2]|0;
   $soundorg16 = ((($6)) + 44|0);
   _S_StartSound($soundorg16,21);
   break;
  }
  case 1:  {
   $ceilingheight = (((($4) + (($call48*88)|0)|0)) + 4|0);
   $7 = HEAP32[$ceilingheight>>2]|0;
   $topheight18 = ((($call1)) + 20|0);
   HEAP32[$topheight18>>2] = $7;
   $direction19 = ((($call1)) + 28|0);
   HEAP32[$direction19>>2] = -1;
   $soundorg21 = (((($4) + (($call48*88)|0)|0)) + 44|0);
   _S_StartSound($soundorg21,21);
   break;
  }
  case 6: case 5:  {
   $direction23 = ((($call1)) + 28|0);
   HEAP32[$direction23>>2] = 1;
   $call24 = (_P_FindLowestCeilingSurrounding($arrayidx$le)|0);
   $topheight25 = ((($call1)) + 20|0);
   $sub27 = (($call24) + -262144)|0;
   HEAP32[$topheight25>>2] = $sub27;
   HEAP32[$speed>>2] = 524288;
   $ceilingheight30 = (((($4) + (($call48*88)|0)|0)) + 4|0);
   $8 = HEAP32[$ceilingheight30>>2]|0;
   $cmp31 = ($sub27|0)==($8|0);
   if (!($cmp31)) {
    $9 = HEAP32[$sector>>2]|0;
    $soundorg34 = ((($9)) + 44|0);
    _S_StartSound($soundorg34,88);
   }
   break;
  }
  default: {
  }
  }
  $call46 = (_P_FindSectorFromLineTag($line,$call48)|0);
  $cmp47 = ($call46|0)>(-1);
  if ($cmp47) {
   $call4654 = $call46;$rtn$0$ph53 = 1;
  } else {
   $rtn$0$ph$lcssa = 1;
   label = 20;
   break;
  }
 }
 if ((label|0) == 20) {
  return ($rtn$0$ph$lcssa|0);
 }
 return (0)|0;
}
function _EV_VerticalDoor($line,$thing) {
 $line = $line|0;
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx13 = 0, $arrayidx17 = 0, $arrayidx27 = 0;
 var $arrayidx31 = 0, $arrayidx36 = 0, $arrayidx4 = 0, $call76 = 0, $call98 = 0, $cmp = 0, $cmp51 = 0, $cmp59 = 0, $conv = 0, $conv85 = 0, $direction = 0, $direction83 = 0, $function = 0, $function80 = 0, $idxprom = 0, $message = 0, $message20 = 0, $message34 = 0, $player1 = 0, $sector = 0;
 var $sector82 = 0, $soundorg = 0, $soundorg73 = 0, $soundorg74 = 0, $special = 0, $specialdata = 0, $speed = 0, $sub = 0, $tobool = 0, $tobool14 = 0, $tobool18 = 0, $tobool2 = 0, $tobool23 = 0, $tobool28 = 0, $tobool32 = 0, $tobool38 = 0, $tobool48 = 0, $tobool5 = 0, $tobool9 = 0, $topheight = 0;
 var $topwait = 0, $type = 0, $type88 = 0, $type91 = 0, $type94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $player1 = ((($thing)) + 132|0);
 $0 = HEAP32[$player1>>2]|0;
 $special = ((($line)) + 18|0);
 $1 = HEAP16[$special>>1]|0;
 $conv = $1 << 16 >> 16;
 switch ($conv|0) {
 case 32: case 26:  {
  $tobool = ($0|0)==(0|0);
  if ($tobool) {
   return;
  }
  $arrayidx = ((($0)) + 76|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $tobool2 = ($2|0)==(0);
  if ($tobool2) {
   $arrayidx4 = ((($0)) + 88|0);
   $3 = HEAP32[$arrayidx4>>2]|0;
   $tobool5 = ($3|0)==(0);
   if ($tobool5) {
    $message = ((($0)) + 224|0);
    HEAP32[$message>>2] = 151521;
    _S_StartSound(0,34);
    return;
   }
  }
  break;
 }
 case 34: case 27:  {
  $tobool9 = ($0|0)==(0|0);
  if ($tobool9) {
   return;
  }
  $arrayidx13 = ((($0)) + 80|0);
  $4 = HEAP32[$arrayidx13>>2]|0;
  $tobool14 = ($4|0)==(0);
  if ($tobool14) {
   $arrayidx17 = ((($0)) + 92|0);
   $5 = HEAP32[$arrayidx17>>2]|0;
   $tobool18 = ($5|0)==(0);
   if ($tobool18) {
    $message20 = ((($0)) + 224|0);
    HEAP32[$message20>>2] = 151559;
    _S_StartSound(0,34);
    return;
   }
  }
  break;
 }
 case 33: case 28:  {
  $tobool23 = ($0|0)==(0|0);
  if ($tobool23) {
   return;
  }
  $arrayidx27 = ((($0)) + 84|0);
  $6 = HEAP32[$arrayidx27>>2]|0;
  $tobool28 = ($6|0)==(0);
  if ($tobool28) {
   $arrayidx31 = ((($0)) + 96|0);
   $7 = HEAP32[$arrayidx31>>2]|0;
   $tobool32 = ($7|0)==(0);
   if ($tobool32) {
    $message34 = ((($0)) + 224|0);
    HEAP32[$message34>>2] = 151599;
    _S_StartSound(0,34);
    return;
   }
  }
  break;
 }
 default: {
 }
 }
 $8 = HEAP32[99501]|0;
 $arrayidx36 = ((($line)) + 24|0);
 $9 = HEAP16[$arrayidx36>>1]|0;
 $idxprom = $9 << 16 >> 16;
 $sector = (((($8) + (($idxprom*20)|0)|0)) + 16|0);
 $10 = HEAP32[$sector>>2]|0;
 $specialdata = ((($10)) + 76|0);
 $11 = HEAP32[$specialdata>>2]|0;
 $tobool38 = ($11|0)==(0|0);
 L24: do {
  if ($tobool38) {
   switch ($conv|0) {
   case 118: case 117:  {
    label = 25;
    break;
   }
   case 31: case 1:  {
    label = 26;
    break;
   }
   default: {
    label = 27;
   }
   }
  } else {
   switch ($conv|0) {
   case 118:  {
    label = 25;
    break L24;
    break;
   }
   case 31:  {
    label = 26;
    break L24;
    break;
   }
   case 117: case 28: case 27: case 26: case 1:  {
    break;
   }
   default: {
    label = 27;
    break L24;
   }
   }
   $direction = ((($11)) + 28|0);
   $12 = HEAP32[$direction>>2]|0;
   $cmp = ($12|0)==(-1);
   if ($cmp) {
    HEAP32[$direction>>2] = 1;
    return;
   }
   $tobool48 = ($0|0)==(0|0);
   if ($tobool48) {
    return;
   }
   $function = ((($11)) + 8|0);
   $13 = HEAP32[$function>>2]|0;
   $cmp51 = ($13|0)==(134|0);
   if ($cmp51) {
    HEAP32[$direction>>2] = -1;
    return;
   }
   $cmp59 = ($13|0)==(135|0);
   if ($cmp59) {
    HEAP32[$direction>>2] = -1;
    return;
   } else {
    $14 = HEAP32[32441]|0;
    (_fwrite(151636,62,1,$14)|0);
    HEAP32[$direction>>2] = -1;
    return;
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $soundorg = ((($10)) + 44|0);
  _S_StartSound($soundorg,88);
 }
 else if ((label|0) == 26) {
  $soundorg73 = ((($10)) + 44|0);
  _S_StartSound($soundorg73,20);
 }
 else if ((label|0) == 27) {
  $soundorg74 = ((($10)) + 44|0);
  _S_StartSound($soundorg74,20);
 }
 $call76 = (_Z_Malloc(40,6,0)|0);
 _P_AddThinker($call76);
 HEAP32[$specialdata>>2] = $call76;
 $function80 = ((($call76)) + 8|0);
 HEAP32[$function80>>2] = 134;
 $sector82 = ((($call76)) + 16|0);
 HEAP32[$sector82>>2] = $10;
 $direction83 = ((($call76)) + 28|0);
 HEAP32[$direction83>>2] = 1;
 $speed = ((($call76)) + 24|0);
 HEAP32[$speed>>2] = 131072;
 $topwait = ((($call76)) + 32|0);
 HEAP32[$topwait>>2] = 150;
 $15 = HEAP16[$special>>1]|0;
 $conv85 = $15 << 16 >> 16;
 switch ($conv85|0) {
 case 28: case 27: case 26: case 1:  {
  $type = ((($call76)) + 12|0);
  HEAP32[$type>>2] = 0;
  break;
 }
 case 34: case 33: case 32: case 31:  {
  $type88 = ((($call76)) + 12|0);
  HEAP32[$type88>>2] = 3;
  HEAP16[$special>>1] = 0;
  break;
 }
 case 117:  {
  $type91 = ((($call76)) + 12|0);
  HEAP32[$type91>>2] = 5;
  HEAP32[$speed>>2] = 524288;
  break;
 }
 case 118:  {
  $type94 = ((($call76)) + 12|0);
  HEAP32[$type94>>2] = 6;
  HEAP16[$special>>1] = 0;
  HEAP32[$speed>>2] = 524288;
  break;
 }
 default: {
 }
 }
 $call98 = (_P_FindLowestCeilingSurrounding($10)|0);
 $topheight = ((($call76)) + 20|0);
 $sub = (($call98) + -262144)|0;
 HEAP32[$topheight>>2] = $sub;
 return;
}
function _P_SpawnDoorCloseIn30($sec) {
 $sec = $sec|0;
 var $call = 0, $direction = 0, $function = 0, $sector = 0, $special = 0, $specialdata = 0, $speed = 0, $topcountdown = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_Z_Malloc(40,6,0)|0);
 _P_AddThinker($call);
 $specialdata = ((($sec)) + 76|0);
 HEAP32[$specialdata>>2] = $call;
 $special = ((($sec)) + 14|0);
 HEAP16[$special>>1] = 0;
 $function = ((($call)) + 8|0);
 HEAP32[$function>>2] = 134;
 $sector = ((($call)) + 16|0);
 HEAP32[$sector>>2] = $sec;
 $direction = ((($call)) + 28|0);
 HEAP32[$direction>>2] = 0;
 $type = ((($call)) + 12|0);
 HEAP32[$type>>2] = 0;
 $speed = ((($call)) + 24|0);
 HEAP32[$speed>>2] = 131072;
 $topcountdown = ((($call)) + 36|0);
 HEAP32[$topcountdown>>2] = 1050;
 return;
}
function _P_SpawnDoorRaiseIn5Mins($sec,$secnum) {
 $sec = $sec|0;
 $secnum = $secnum|0;
 var $call = 0, $call2 = 0, $direction = 0, $function = 0, $sector = 0, $special = 0, $specialdata = 0, $speed = 0, $sub = 0, $topcountdown = 0, $topheight = 0, $topwait = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_Z_Malloc(40,6,0)|0);
 _P_AddThinker($call);
 $specialdata = ((($sec)) + 76|0);
 HEAP32[$specialdata>>2] = $call;
 $special = ((($sec)) + 14|0);
 HEAP16[$special>>1] = 0;
 $function = ((($call)) + 8|0);
 HEAP32[$function>>2] = 134;
 $sector = ((($call)) + 16|0);
 HEAP32[$sector>>2] = $sec;
 $direction = ((($call)) + 28|0);
 HEAP32[$direction>>2] = 2;
 $type = ((($call)) + 12|0);
 HEAP32[$type>>2] = 4;
 $speed = ((($call)) + 24|0);
 HEAP32[$speed>>2] = 131072;
 $call2 = (_P_FindLowestCeilingSurrounding($sec)|0);
 $topheight = ((($call)) + 20|0);
 $sub = (($call2) + -262144)|0;
 HEAP32[$topheight>>2] = $sub;
 $topwait = ((($call)) + 32|0);
 HEAP32[$topwait>>2] = 150;
 $topcountdown = ((($call)) + 36|0);
 HEAP32[$topcountdown>>2] = 10500;
 return;
}
function _P_RecursiveSound($sec,$soundblocks) {
 $sec = $sec|0;
 $soundblocks = $soundblocks|0;
 var $$pre = 0, $$pre26 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add3$pre$phiZ2D = 0, $arrayidx = 0, $arrayidx$us = 0, $arrayidx12 = 0, $arrayidx12$us = 0, $arrayidx18 = 0;
 var $arrayidx18$us = 0, $cmp = 0, $cmp1 = 0, $cmp14 = 0, $cmp14$us = 0, $cmp5 = 0, $cmp5$us = 0, $cmp523 = 0, $cmp8 = 0, $cmp8$us = 0, $flags = 0, $flags$us = 0, $i$024 = 0, $i$024$us = 0, $idxprom = 0, $idxprom$us = 0, $idxprom19 = 0, $idxprom19$us = 0, $inc = 0, $inc$us = 0;
 var $linecount = 0, $lines = 0, $other$0 = 0, $other$0$us = 0, $sector = 0, $sector$us = 0, $sector21 = 0, $sector21$us = 0, $soundtarget = 0, $soundtraversed = 0, $soundtraversed4$pre$phiZ2D = 0, $tobool = 0, $tobool$us = 0, $tobool31 = 0, $tobool31$us = 0, $tobool33 = 0, $validcount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $validcount = ((($sec)) + 68|0);
 $0 = HEAP32[$validcount>>2]|0;
 $1 = HEAP32[32309]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $soundtraversed = ((($sec)) + 20|0);
  $2 = HEAP32[$soundtraversed>>2]|0;
  $add = (($soundblocks) + 1)|0;
  $cmp1 = ($2|0)>($add|0);
  if ($cmp1) {
   $add3$pre$phiZ2D = $add;$soundtraversed4$pre$phiZ2D = $soundtraversed;
  } else {
   return;
  }
 } else {
  $$pre = (($soundblocks) + 1)|0;
  $$pre26 = ((($sec)) + 20|0);
  $add3$pre$phiZ2D = $$pre;$soundtraversed4$pre$phiZ2D = $$pre26;
 }
 HEAP32[$validcount>>2] = $1;
 HEAP32[$soundtraversed4$pre$phiZ2D>>2] = $add3$pre$phiZ2D;
 $3 = HEAP32[99406]|0;
 $soundtarget = ((($sec)) + 24|0);
 HEAP32[$soundtarget>>2] = $3;
 $linecount = ((($sec)) + 80|0);
 $4 = HEAP32[$linecount>>2]|0;
 $cmp523 = ($4|0)>(0);
 if (!($cmp523)) {
  return;
 }
 $lines = ((($sec)) + 84|0);
 $tobool33 = ($soundblocks|0)==(0);
 if (!($tobool33)) {
  $i$024 = 0;
  while(1) {
   $18 = HEAP32[$lines>>2]|0;
   $arrayidx = (($18) + ($i$024<<2)|0);
   $19 = HEAP32[$arrayidx>>2]|0;
   $flags = ((($19)) + 16|0);
   $20 = HEAP16[$flags>>1]|0;
   $21 = $20 & 4;
   $tobool = ($21<<16>>16)==(0);
   if (!($tobool)) {
    _P_LineOpening($19);
    $22 = HEAP32[99443]|0;
    $cmp8 = ($22|0)<(1);
    if (!($cmp8)) {
     $23 = HEAP32[99501]|0;
     $arrayidx12 = ((($19)) + 22|0);
     $24 = HEAP16[$arrayidx12>>1]|0;
     $idxprom = $24 << 16 >> 16;
     $sector = (((($23) + (($idxprom*20)|0)|0)) + 16|0);
     $25 = HEAP32[$sector>>2]|0;
     $cmp14 = ($25|0)==($sec|0);
     if ($cmp14) {
      $arrayidx18 = ((($19)) + 24|0);
      $26 = HEAP16[$arrayidx18>>1]|0;
      $idxprom19 = $26 << 16 >> 16;
      $sector21 = (((($23) + (($idxprom19*20)|0)|0)) + 16|0);
      $27 = HEAP32[$sector21>>2]|0;
      $other$0 = $27;
     } else {
      $other$0 = $25;
     }
     $28 = HEAP16[$flags>>1]|0;
     $29 = $28 & 64;
     $tobool31 = ($29<<16>>16)==(0);
     if ($tobool31) {
      _P_RecursiveSound($other$0,$soundblocks);
     }
    }
   }
   $inc = (($i$024) + 1)|0;
   $30 = HEAP32[$linecount>>2]|0;
   $cmp5 = ($inc|0)<($30|0);
   if ($cmp5) {
    $i$024 = $inc;
   } else {
    break;
   }
  }
  return;
 }
 $i$024$us = 0;
 while(1) {
  $5 = HEAP32[$lines>>2]|0;
  $arrayidx$us = (($5) + ($i$024$us<<2)|0);
  $6 = HEAP32[$arrayidx$us>>2]|0;
  $flags$us = ((($6)) + 16|0);
  $7 = HEAP16[$flags$us>>1]|0;
  $8 = $7 & 4;
  $tobool$us = ($8<<16>>16)==(0);
  do {
   if (!($tobool$us)) {
    _P_LineOpening($6);
    $9 = HEAP32[99443]|0;
    $cmp8$us = ($9|0)<(1);
    if (!($cmp8$us)) {
     $10 = HEAP32[99501]|0;
     $arrayidx12$us = ((($6)) + 22|0);
     $11 = HEAP16[$arrayidx12$us>>1]|0;
     $idxprom$us = $11 << 16 >> 16;
     $sector$us = (((($10) + (($idxprom$us*20)|0)|0)) + 16|0);
     $12 = HEAP32[$sector$us>>2]|0;
     $cmp14$us = ($12|0)==($sec|0);
     if ($cmp14$us) {
      $arrayidx18$us = ((($6)) + 24|0);
      $13 = HEAP16[$arrayidx18$us>>1]|0;
      $idxprom19$us = $13 << 16 >> 16;
      $sector21$us = (((($10) + (($idxprom19$us*20)|0)|0)) + 16|0);
      $14 = HEAP32[$sector21$us>>2]|0;
      $other$0$us = $14;
     } else {
      $other$0$us = $12;
     }
     $15 = HEAP16[$flags$us>>1]|0;
     $16 = $15 & 64;
     $tobool31$us = ($16<<16>>16)==(0);
     if ($tobool31$us) {
      _P_RecursiveSound($other$0$us,0);
      break;
     } else {
      _P_RecursiveSound($other$0$us,1);
      break;
     }
    }
   }
  } while(0);
  $inc$us = (($i$024$us) + 1)|0;
  $17 = HEAP32[$linecount>>2]|0;
  $cmp5$us = ($inc$us|0)<($17|0);
  if ($cmp5$us) {
   $i$024$us = $inc$us;
  } else {
   break;
  }
 }
 return;
}
function _P_NoiseAlert($target,$emmiter) {
 $target = $target|0;
 $emmiter = $emmiter|0;
 var $0 = 0, $1 = 0, $2 = 0, $inc = 0, $subsector = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99406] = $target;
 $0 = HEAP32[32309]|0;
 $inc = (($0) + 1)|0;
 HEAP32[32309] = $inc;
 $subsector = ((($emmiter)) + 52|0);
 $1 = HEAP32[$subsector>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 _P_RecursiveSound($2,0);
 return;
}
function _P_CheckMissileRange($actor) {
 $actor = $actor|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and4 = 0, $call = 0, $call14 = 0, $call51 = 0, $cmp = 0, $cmp21 = 0;
 var $cmp28 = 0, $cmp47 = 0, $cmp48 = 0, $cmp52 = 0, $dist$2 = 0, $dist$4 = 0, $flags = 0, $info = 0, $meleestate = 0, $or$cond = 0, $or$cond1 = 0, $reactiontime = 0, $retval$0 = 0, $shr = 0, $shr3126 = 0, $shr41 = 0, $spec$select = 0, $spec$select$v = 0, $spec$select25 = 0, $sub = 0;
 var $sub13 = 0, $target = 0, $tobool = 0, $tobool1 = 0, $tobool16 = 0, $tobool6 = 0, $type = 0, $x = 0, $x10 = 0, $y = 0, $y12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target = ((($actor)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 $call = (_P_CheckSight($actor,$0)|0);
 $tobool = ($call|0)==(0);
 if ($tobool) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $flags = ((($actor)) + 104|0);
 $1 = HEAP32[$flags>>2]|0;
 $and = $1 & 64;
 $tobool1 = ($and|0)==(0);
 if (!($tobool1)) {
  $and4 = $1 & -65;
  HEAP32[$flags>>2] = $and4;
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $reactiontime = ((($actor)) + 124|0);
 $2 = HEAP32[$reactiontime>>2]|0;
 $tobool6 = ($2|0)==(0);
 if (!($tobool6)) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $x = ((($actor)) + 12|0);
 $3 = HEAP32[$x>>2]|0;
 $4 = HEAP32[$target>>2]|0;
 $x10 = ((($4)) + 12|0);
 $5 = HEAP32[$x10>>2]|0;
 $sub = (($3) - ($5))|0;
 $y = ((($actor)) + 16|0);
 $6 = HEAP32[$y>>2]|0;
 $y12 = ((($4)) + 16|0);
 $7 = HEAP32[$y12>>2]|0;
 $sub13 = (($6) - ($7))|0;
 $call14 = (_P_AproxDistance($sub,$sub13)|0);
 $info = ((($actor)) + 92|0);
 $8 = HEAP32[$info>>2]|0;
 $meleestate = ((($8)) + 40|0);
 $9 = HEAP32[$meleestate>>2]|0;
 $tobool16 = ($9|0)==(0);
 $spec$select$v = $tobool16 ? -12582912 : -4194304;
 $spec$select = (($spec$select$v) + ($call14))|0;
 $type = ((($actor)) + 88|0);
 $10 = HEAP32[$type>>2]|0;
 $cmp = ($10|0)==(3);
 $cmp21 = ($spec$select|0)>(58785791);
 $or$cond1 = $cmp & $cmp21;
 if ($or$cond1) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $shr = $spec$select >> 16;
 L14: do {
  switch ($10|0) {
  case 5:  {
   $cmp28 = ($spec$select|0)<(12845056);
   if ($cmp28) {
    $retval$0 = 0;
    return ($retval$0|0);
   } else {
    $shr3126 = $spec$select >>> 17;
    $dist$2 = $shr3126;
    break L14;
   }
   break;
  }
  case 18: case 19: case 21:  {
   $shr41 = $spec$select >> 17;
   $dist$2 = $shr41;
   break;
  }
  default: {
   $dist$2 = $shr;
  }
  }
 } while(0);
 $11 = ($dist$2|0)<(200);
 $spec$select25 = $11 ? $dist$2 : 200;
 $cmp47 = ($10|0)==(21);
 $cmp48 = ($spec$select25|0)>(160);
 $or$cond = $cmp47 & $cmp48;
 $dist$4 = $or$cond ? 160 : $spec$select25;
 $call51 = (_P_Random()|0);
 $cmp52 = ($call51|0)>=($dist$4|0);
 $$ = $cmp52&1;
 $retval$0 = $$;
 return ($retval$0|0);
}
function _P_Move($actor) {
 $actor = $actor|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add11 = 0, $and = 0, $and36 = 0, $and39 = 0;
 var $arrayidx = 0, $arrayidx29 = 0, $arrayidx9 = 0, $call = 0, $call30 = 0, $cmp = 0, $cmp16 = 0, $cmp2 = 0, $dec = 0, $dec23 = 0, $dec26 = 0, $flags35 = 0, $floorz = 0, $good$025 = 0, $info = 0, $movedir = 0, $mul = 0, $mul10 = 0, $or = 0, $or$cond = 0;
 var $retval$0 = 0, $spec$select = 0, $speed = 0, $storemerge = 0, $storemerge$v = 0, $tobool = 0, $tobool13 = 0, $tobool14 = 0, $tobool24 = 0, $tobool28 = 0, $tobool31 = 0, $tobool40 = 0, $vararg_buffer = 0, $x = 0, $y = 0, $z = 0, $z42 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $movedir = ((($actor)) + 112|0);
 $0 = HEAP32[$movedir>>2]|0;
 $cmp = ($0|0)==(8);
 if ($cmp) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $cmp2 = ($0>>>0)>(7);
 if ($cmp2) {
  _I_Error(151699,$vararg_buffer);
  // unreachable;
 }
 $x = ((($actor)) + 12|0);
 $1 = HEAP32[$x>>2]|0;
 $info = ((($actor)) + 92|0);
 $2 = HEAP32[$info>>2]|0;
 $speed = ((($2)) + 60|0);
 $3 = HEAP32[$speed>>2]|0;
 $arrayidx = (49328 + ($0<<2)|0);
 $4 = HEAP32[$arrayidx>>2]|0;
 $mul = Math_imul($4, $3)|0;
 $add = (($mul) + ($1))|0;
 $y = ((($actor)) + 16|0);
 $5 = HEAP32[$y>>2]|0;
 $arrayidx9 = (49360 + ($0<<2)|0);
 $6 = HEAP32[$arrayidx9>>2]|0;
 $mul10 = Math_imul($6, $3)|0;
 $add11 = (($mul10) + ($5))|0;
 $call = (_P_TryMove($actor,$add,$add11)|0);
 $tobool = ($call|0)==(0);
 $flags35 = ((($actor)) + 104|0);
 $7 = HEAP32[$flags35>>2]|0;
 if (!($tobool)) {
  $and36 = $7 & -2097153;
  HEAP32[$flags35>>2] = $and36;
  $and39 = $7 & 16384;
  $tobool40 = ($and39|0)==(0);
  if (!($tobool40)) {
   $retval$0 = 1;
   STACKTOP = sp;return ($retval$0|0);
  }
  $floorz = ((($actor)) + 56|0);
  $13 = HEAP32[$floorz>>2]|0;
  $z42 = ((($actor)) + 20|0);
  HEAP32[$z42>>2] = $13;
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $and = $7 & 16384;
 $tobool13 = ($and|0)!=(0);
 $8 = HEAP32[99423]|0;
 $tobool14 = ($8|0)!=(0);
 $or$cond = $tobool13 & $tobool14;
 if ($or$cond) {
  $z = ((($actor)) + 20|0);
  $9 = HEAP32[$z>>2]|0;
  $10 = HEAP32[99420]|0;
  $cmp16 = ($9|0)<($10|0);
  $storemerge$v = $cmp16 ? 262144 : -262144;
  $storemerge = (($storemerge$v) + ($9))|0;
  HEAP32[$z>>2] = $storemerge;
  $or = $7 | 2097152;
  HEAP32[$flags35>>2] = $or;
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $11 = HEAP32[99422]|0;
 $tobool24 = ($11|0)==(0);
 if ($tobool24) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 HEAP32[$movedir>>2] = 8;
 $dec23 = (($11) + -1)|0;
 HEAP32[99422] = $dec23;
 $dec26 = $dec23;$good$025 = 0;
 while(1) {
  $arrayidx29 = (186288 + ($dec26<<2)|0);
  $12 = HEAP32[$arrayidx29>>2]|0;
  $call30 = (_P_UseSpecialLine($actor,$12,0)|0);
  $tobool31 = ($call30|0)==(0);
  $spec$select = $tobool31 ? $good$025 : 1;
  $$pr = HEAP32[99422]|0;
  $dec = (($$pr) + -1)|0;
  HEAP32[99422] = $dec;
  $tobool28 = ($$pr|0)==(0);
  if ($tobool28) {
   $retval$0 = $spec$select;
   break;
  } else {
   $dec26 = $dec;$good$025 = $spec$select;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _P_NewChaseDir($actor) {
 $actor = $actor|0;
 var $$ = 0, $$62 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $and$i = 0, $and$i106 = 0, $and$i66 = 0, $and$i74 = 0, $and$i82 = 0, $and$i90 = 0;
 var $and$i98 = 0, $arrayidx = 0, $arrayidx34 = 0, $call$i = 0, $call$i103 = 0, $call$i63 = 0, $call$i71 = 0, $call$i79 = 0, $call$i87 = 0, $call$i87$1 = 0, $call$i87$2 = 0, $call$i87$3 = 0, $call$i87$4 = 0, $call$i87$5 = 0, $call$i87$6 = 0, $call$i87$7 = 0, $call$i95 = 0, $call$i95$1 = 0, $call$i95$2 = 0, $call$i95$3 = 0;
 var $call$i95$4 = 0, $call$i95$5 = 0, $call$i95$6 = 0, $call$i95$7 = 0, $call1$i = 0, $call1$i105 = 0, $call1$i65 = 0, $call1$i73 = 0, $call1$i81 = 0, $call1$i89 = 0, $call1$i97 = 0, $call100 = 0, $call44 = 0, $cmp = 0, $cmp105 = 0, $cmp105$1 = 0, $cmp105$2 = 0, $cmp105$3 = 0, $cmp105$4 = 0, $cmp105$5 = 0;
 var $cmp105$6 = 0, $cmp105$7 = 0, $cmp119 = 0, $cmp119$1 = 0, $cmp119$2 = 0, $cmp119$3 = 0, $cmp119$4 = 0, $cmp119$5 = 0, $cmp119$6 = 0, $cmp119$7 = 0, $cmp131 = 0, $cmp15 = 0, $cmp19 = 0, $cmp27 = 0, $cmp29 = 0, $cmp32 = 0, $cmp37 = 0, $cmp45 = 0, $cmp49 = 0, $cmp58 = 0;
 var $cmp64 = 0, $cmp70 = 0, $cmp70118 = 0, $cmp8 = 0, $cmp81 = 0, $cmp91 = 0, $conv33 = 0, $d$sroa$12$0 = 0, $d$sroa$12$1 = 0, $d$sroa$12$2 = 0, $d$sroa$2$0 = 0, $d$sroa$2$1 = 0, $ispos = 0, $ispos60 = 0, $movecount$i = 0, $movecount$i107 = 0, $movecount$i67 = 0, $movecount$i75 = 0, $movecount$i83 = 0, $movecount$i91 = 0;
 var $movecount$i99 = 0, $movedir = 0, $neg = 0, $neg61 = 0, $or$cond = 0, $shl = 0, $sub = 0, $sub5 = 0, $sub5$lobit = 0, $target = 0, $tobool = 0, $tobool$i = 0, $tobool$i104 = 0, $tobool$i64 = 0, $tobool$i72 = 0, $tobool$i80 = 0, $tobool$i88 = 0, $tobool$i88$1 = 0, $tobool$i88$2 = 0, $tobool$i88$3 = 0;
 var $tobool$i88$4 = 0, $tobool$i88$5 = 0, $tobool$i88$6 = 0, $tobool$i88$7 = 0, $tobool$i96 = 0, $tobool$i96$1 = 0, $tobool$i96$2 = 0, $tobool$i96$3 = 0, $tobool$i96$4 = 0, $tobool$i96$5 = 0, $tobool$i96$6 = 0, $tobool$i96$7 = 0, $tobool101 = 0, $vararg_buffer = 0, $x = 0, $x2 = 0, $y = 0, $y4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $target = ((($actor)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  _I_Error(151721,$vararg_buffer);
  // unreachable;
 }
 $movedir = ((($actor)) + 112|0);
 $1 = HEAP32[$movedir>>2]|0;
 $arrayidx = (49264 + ($1<<2)|0);
 $2 = HEAP32[$arrayidx>>2]|0;
 $x = ((($0)) + 12|0);
 $3 = HEAP32[$x>>2]|0;
 $x2 = ((($actor)) + 12|0);
 $4 = HEAP32[$x2>>2]|0;
 $sub = (($3) - ($4))|0;
 $y = ((($0)) + 16|0);
 $5 = HEAP32[$y>>2]|0;
 $y4 = ((($actor)) + 16|0);
 $6 = HEAP32[$y4>>2]|0;
 $sub5 = (($5) - ($6))|0;
 $cmp = ($sub|0)>(655360);
 $cmp8 = ($sub|0)<(-655360);
 $$ = $cmp8 ? 4 : 8;
 $d$sroa$2$0 = $cmp ? 0 : $$;
 $cmp15 = ($sub5|0)<(-655360);
 $cmp19 = ($sub5|0)>(655360);
 $$62 = $cmp19 ? 2 : 8;
 $d$sroa$12$0 = $cmp15 ? 6 : $$62;
 $cmp27 = ($d$sroa$2$0|0)==(8);
 $cmp29 = ($d$sroa$12$0|0)==(8);
 $or$cond = $cmp27 | $cmp29;
 if (!($or$cond)) {
  $sub5$lobit = $sub5 >>> 31;
  $shl = $sub5$lobit << 1;
  $cmp32 = ($sub|0)>(0);
  $conv33 = $cmp32&1;
  $add = $shl | $conv33;
  $arrayidx34 = (49312 + ($add<<2)|0);
  $7 = HEAP32[$arrayidx34>>2]|0;
  HEAP32[$movedir>>2] = $7;
  $cmp37 = ($7|0)==($2|0);
  if (!($cmp37)) {
   $call$i = (_P_Move($actor)|0);
   $tobool$i = ($call$i|0)==(0);
   if (!($tobool$i)) {
    $call1$i = (_P_Random()|0);
    $and$i = $call1$i & 15;
    $movecount$i = ((($actor)) + 116|0);
    HEAP32[$movecount$i>>2] = $and$i;
    STACKTOP = sp;return;
   }
  }
 }
 $call44 = (_P_Random()|0);
 $cmp45 = ($call44|0)>(200);
 if ($cmp45) {
  label = 9;
 } else {
  $ispos = ($sub5|0)>(-1);
  $neg = (0 - ($sub5))|0;
  $8 = $ispos ? $sub5 : $neg;
  $ispos60 = ($sub|0)>(-1);
  $neg61 = (0 - ($sub))|0;
  $9 = $ispos60 ? $sub : $neg61;
  $cmp49 = ($8|0)>($9|0);
  if ($cmp49) {
   label = 9;
  } else {
   $d$sroa$12$1 = $d$sroa$12$0;$d$sroa$2$1 = $d$sroa$2$0;
  }
 }
 if ((label|0) == 9) {
  $d$sroa$12$1 = $d$sroa$2$0;$d$sroa$2$1 = $d$sroa$12$0;
 }
 $cmp58 = ($d$sroa$2$1|0)==($2|0);
 $cmp64 = ($d$sroa$12$1|0)==($2|0);
 $d$sroa$12$2 = $cmp64 ? 8 : $d$sroa$12$1;
 $cmp70118 = ($d$sroa$2$1|0)==(8);
 $cmp70 = $cmp58 | $cmp70118;
 if (!($cmp70)) {
  HEAP32[$movedir>>2] = $d$sroa$2$1;
  $call$i63 = (_P_Move($actor)|0);
  $tobool$i64 = ($call$i63|0)==(0);
  if (!($tobool$i64)) {
   $call1$i65 = (_P_Random()|0);
   $and$i66 = $call1$i65 & 15;
   $movecount$i67 = ((($actor)) + 116|0);
   HEAP32[$movecount$i67>>2] = $and$i66;
   STACKTOP = sp;return;
  }
 }
 $cmp81 = ($d$sroa$12$2|0)==(8);
 if (!($cmp81)) {
  HEAP32[$movedir>>2] = $d$sroa$12$2;
  $call$i71 = (_P_Move($actor)|0);
  $tobool$i72 = ($call$i71|0)==(0);
  if (!($tobool$i72)) {
   $call1$i73 = (_P_Random()|0);
   $and$i74 = $call1$i73 & 15;
   $movecount$i75 = ((($actor)) + 116|0);
   HEAP32[$movecount$i75>>2] = $and$i74;
   STACKTOP = sp;return;
  }
 }
 $cmp91 = ($1|0)==(8);
 if (!($cmp91)) {
  HEAP32[$movedir>>2] = $1;
  $call$i79 = (_P_Move($actor)|0);
  $tobool$i80 = ($call$i79|0)==(0);
  if (!($tobool$i80)) {
   $call1$i81 = (_P_Random()|0);
   $and$i82 = $call1$i81 & 15;
   $movecount$i83 = ((($actor)) + 116|0);
   HEAP32[$movecount$i83>>2] = $and$i82;
   STACKTOP = sp;return;
  }
 }
 $call100 = (_P_Random()|0);
 $and = $call100 & 1;
 $tobool101 = ($and|0)==(0);
 do {
  if ($tobool101) {
   $cmp119 = ($2|0)==(7);
   if ($cmp119) {
    label = 33;
   } else {
    HEAP32[$movedir>>2] = 7;
    $call$i95 = (_P_Move($actor)|0);
    $tobool$i96 = ($call$i95|0)==(0);
    if ($tobool$i96) {
     $cmp119$1 = ($2|0)==(6);
     if ($cmp119$1) {
      label = 35;
     } else {
      label = 33;
     }
    }
   }
   if ((label|0) == 33) {
    HEAP32[$movedir>>2] = 6;
    $call$i95$1 = (_P_Move($actor)|0);
    $tobool$i96$1 = ($call$i95$1|0)==(0);
    if ($tobool$i96$1) {
     $cmp119$2 = ($2|0)==(5);
     if ($cmp119$2) {
      label = 37;
     } else {
      label = 35;
     }
    }
   }
   if ((label|0) == 35) {
    HEAP32[$movedir>>2] = 5;
    $call$i95$2 = (_P_Move($actor)|0);
    $tobool$i96$2 = ($call$i95$2|0)==(0);
    if ($tobool$i96$2) {
     $cmp119$3 = ($2|0)==(4);
     if ($cmp119$3) {
      label = 39;
     } else {
      label = 37;
     }
    }
   }
   if ((label|0) == 37) {
    HEAP32[$movedir>>2] = 4;
    $call$i95$3 = (_P_Move($actor)|0);
    $tobool$i96$3 = ($call$i95$3|0)==(0);
    if ($tobool$i96$3) {
     $cmp119$4 = ($2|0)==(3);
     if ($cmp119$4) {
      label = 41;
     } else {
      label = 39;
     }
    }
   }
   if ((label|0) == 39) {
    HEAP32[$movedir>>2] = 3;
    $call$i95$4 = (_P_Move($actor)|0);
    $tobool$i96$4 = ($call$i95$4|0)==(0);
    if ($tobool$i96$4) {
     $cmp119$5 = ($2|0)==(2);
     if ($cmp119$5) {
      label = 43;
     } else {
      label = 41;
     }
    }
   }
   if ((label|0) == 41) {
    HEAP32[$movedir>>2] = 2;
    $call$i95$5 = (_P_Move($actor)|0);
    $tobool$i96$5 = ($call$i95$5|0)==(0);
    if ($tobool$i96$5) {
     $cmp119$6 = ($2|0)==(1);
     if ($cmp119$6) {
      label = 45;
     } else {
      label = 43;
     }
    }
   }
   if ((label|0) == 43) {
    HEAP32[$movedir>>2] = 1;
    $call$i95$6 = (_P_Move($actor)|0);
    $tobool$i96$6 = ($call$i95$6|0)==(0);
    if ($tobool$i96$6) {
     $cmp119$7 = ($2|0)==(0);
     if ($cmp119$7) {
      label = 29;
      break;
     } else {
      label = 45;
     }
    }
   }
   if ((label|0) == 45) {
    HEAP32[$movedir>>2] = 0;
    $call$i95$7 = (_P_Move($actor)|0);
    $tobool$i96$7 = ($call$i95$7|0)==(0);
    if ($tobool$i96$7) {
     label = 28;
     break;
    }
   }
   $call1$i97 = (_P_Random()|0);
   $and$i98 = $call1$i97 & 15;
   $movecount$i99 = ((($actor)) + 116|0);
   HEAP32[$movecount$i99>>2] = $and$i98;
   STACKTOP = sp;return;
  } else {
   $cmp105 = ($2|0)==(0);
   if ($cmp105) {
    label = 46;
   } else {
    HEAP32[$movedir>>2] = 0;
    $call$i87 = (_P_Move($actor)|0);
    $tobool$i88 = ($call$i87|0)==(0);
    if ($tobool$i88) {
     $cmp105$1 = ($2|0)==(1);
     if ($cmp105$1) {
      label = 48;
     } else {
      label = 46;
     }
    }
   }
   if ((label|0) == 46) {
    HEAP32[$movedir>>2] = 1;
    $call$i87$1 = (_P_Move($actor)|0);
    $tobool$i88$1 = ($call$i87$1|0)==(0);
    if ($tobool$i88$1) {
     $cmp105$2 = ($2|0)==(2);
     if ($cmp105$2) {
      label = 50;
     } else {
      label = 48;
     }
    }
   }
   if ((label|0) == 48) {
    HEAP32[$movedir>>2] = 2;
    $call$i87$2 = (_P_Move($actor)|0);
    $tobool$i88$2 = ($call$i87$2|0)==(0);
    if ($tobool$i88$2) {
     $cmp105$3 = ($2|0)==(3);
     if ($cmp105$3) {
      label = 52;
     } else {
      label = 50;
     }
    }
   }
   if ((label|0) == 50) {
    HEAP32[$movedir>>2] = 3;
    $call$i87$3 = (_P_Move($actor)|0);
    $tobool$i88$3 = ($call$i87$3|0)==(0);
    if ($tobool$i88$3) {
     $cmp105$4 = ($2|0)==(4);
     if ($cmp105$4) {
      label = 54;
     } else {
      label = 52;
     }
    }
   }
   if ((label|0) == 52) {
    HEAP32[$movedir>>2] = 4;
    $call$i87$4 = (_P_Move($actor)|0);
    $tobool$i88$4 = ($call$i87$4|0)==(0);
    if ($tobool$i88$4) {
     $cmp105$5 = ($2|0)==(5);
     if ($cmp105$5) {
      label = 56;
     } else {
      label = 54;
     }
    }
   }
   if ((label|0) == 54) {
    HEAP32[$movedir>>2] = 5;
    $call$i87$5 = (_P_Move($actor)|0);
    $tobool$i88$5 = ($call$i87$5|0)==(0);
    if ($tobool$i88$5) {
     $cmp105$6 = ($2|0)==(6);
     if ($cmp105$6) {
      label = 58;
     } else {
      label = 56;
     }
    }
   }
   if ((label|0) == 56) {
    HEAP32[$movedir>>2] = 6;
    $call$i87$6 = (_P_Move($actor)|0);
    $tobool$i88$6 = ($call$i87$6|0)==(0);
    if ($tobool$i88$6) {
     $cmp105$7 = ($2|0)==(7);
     if ($cmp105$7) {
      label = 29;
      break;
     } else {
      label = 58;
     }
    }
   }
   if ((label|0) == 58) {
    HEAP32[$movedir>>2] = 7;
    $call$i87$7 = (_P_Move($actor)|0);
    $tobool$i88$7 = ($call$i87$7|0)==(0);
    if ($tobool$i88$7) {
     label = 28;
     break;
    }
   }
   $call1$i89 = (_P_Random()|0);
   $and$i90 = $call1$i89 & 15;
   $movecount$i91 = ((($actor)) + 116|0);
   HEAP32[$movecount$i91>>2] = $and$i90;
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 28) {
  $cmp131 = ($2|0)==(8);
  if (!($cmp131)) {
   label = 29;
  }
 }
 if ((label|0) == 29) {
  HEAP32[$movedir>>2] = $2;
  $call$i103 = (_P_Move($actor)|0);
  $tobool$i104 = ($call$i103|0)==(0);
  if (!($tobool$i104)) {
   $call1$i105 = (_P_Random()|0);
   $and$i106 = $call1$i105 & 15;
   $movecount$i107 = ((($actor)) + 116|0);
   HEAP32[$movecount$i107>>2] = $and$i106;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$movedir>>2] = 8;
 STACKTOP = sp;return;
}
function _P_LookForPlayers($actor,$allaround) {
 $actor = $actor|0;
 $allaround = $allaround|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$us = 0, $and = 0, $and41 = 0, $and41$us = 0, $angle = 0, $arrayidx = 0, $arrayidx$us = 0, $c$0 = 0, $c$0$us = 0, $c$1 = 0, $c$1$us = 0, $call = 0, $call$us = 0, $call20$us = 0;
 var $call33$us = 0, $cmp = 0, $cmp$us = 0, $cmp3 = 0, $cmp3$us = 0, $cmp34$us = 0, $cmp8 = 0, $cmp8$us = 0, $health = 0, $health$us = 0, $inc = 0, $inc$us = 0, $lastlook = 0, $mo = 0, $mo$lcssa = 0, $mo$us = 0, $or$cond = 0, $or$cond$us = 0, $retval$0 = 0, $sub = 0;
 var $sub21$off$us = 0, $sub21$us = 0, $sub28$us = 0, $sub32$us = 0, $target = 0, $tobool = 0, $tobool$us = 0, $tobool11 = 0, $tobool11$us = 0, $tobool14 = 0, $x = 0, $x17$us = 0, $x26$us = 0, $y = 0, $y19$us = 0, $y30$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lastlook = ((($actor)) + 136|0);
 $0 = HEAP32[$lastlook>>2]|0;
 $sub = (($0) + 3)|0;
 $and = $sub & 3;
 $tobool14 = ($allaround|0)==(0);
 $x = ((($actor)) + 12|0);
 $y = ((($actor)) + 16|0);
 $angle = ((($actor)) + 32|0);
 L1: do {
  if ($tobool14) {
   $1 = $0;$c$0$us = 0;
   while(1) {
    $arrayidx$us = (181664 + ($1<<2)|0);
    $2 = HEAP32[$arrayidx$us>>2]|0;
    $tobool$us = ($2|0)==(0);
    if ($tobool$us) {
     $c$1$us = $c$0$us;
    } else {
     $inc$us = (($c$0$us) + 1)|0;
     $cmp$us = ($c$0$us|0)==(2);
     $cmp3$us = ($1|0)==($and|0);
     $or$cond$us = $cmp$us | $cmp3$us;
     if ($or$cond$us) {
      $retval$0 = 0;
      break;
     }
     $health$us = (((181680 + (($1*288)|0)|0)) + 40|0);
     $3 = HEAP32[$health$us>>2]|0;
     $cmp8$us = ($3|0)<(1);
     if ($cmp8$us) {
      $c$1$us = $inc$us;
     } else {
      $mo$us = (181680 + (($1*288)|0)|0);
      $4 = HEAP32[$mo$us>>2]|0;
      $call$us = (_P_CheckSight($actor,$4)|0);
      $tobool11$us = ($call$us|0)==(0);
      if ($tobool11$us) {
       $c$1$us = $inc$us;
      } else {
       $5 = HEAP32[$x>>2]|0;
       $6 = HEAP32[$y>>2]|0;
       $7 = HEAP32[$mo$us>>2]|0;
       $x17$us = ((($7)) + 12|0);
       $8 = HEAP32[$x17$us>>2]|0;
       $y19$us = ((($7)) + 16|0);
       $9 = HEAP32[$y19$us>>2]|0;
       $call20$us = (_R_PointToAngle2($5,$6,$8,$9)|0);
       $10 = HEAP32[$angle>>2]|0;
       $sub21$us = (($call20$us) + -1073741825)|0;
       $sub21$off$us = (($sub21$us) - ($10))|0;
       $11 = ($sub21$off$us>>>0)<(2147483647);
       if (!($11)) {
        $mo$lcssa = $mo$us;
        break L1;
       }
       $12 = HEAP32[$mo$us>>2]|0;
       $x26$us = ((($12)) + 12|0);
       $13 = HEAP32[$x26$us>>2]|0;
       $14 = HEAP32[$x>>2]|0;
       $sub28$us = (($13) - ($14))|0;
       $y30$us = ((($12)) + 16|0);
       $15 = HEAP32[$y30$us>>2]|0;
       $16 = HEAP32[$y>>2]|0;
       $sub32$us = (($15) - ($16))|0;
       $call33$us = (_P_AproxDistance($sub28$us,$sub32$us)|0);
       $cmp34$us = ($call33$us|0)>(4194304);
       if ($cmp34$us) {
        $c$1$us = $inc$us;
       } else {
        $mo$lcssa = $mo$us;
        break L1;
       }
      }
     }
    }
    $17 = HEAP32[$lastlook>>2]|0;
    $add$us = (($17) + 1)|0;
    $and41$us = $add$us & 3;
    HEAP32[$lastlook>>2] = $and41$us;
    $1 = $and41$us;$c$0$us = $c$1$us;
   }
   return ($retval$0|0);
  } else {
   $18 = $0;$c$0 = 0;
   while(1) {
    $arrayidx = (181664 + ($18<<2)|0);
    $19 = HEAP32[$arrayidx>>2]|0;
    $tobool = ($19|0)==(0);
    if ($tobool) {
     $23 = $18;$c$1 = $c$0;
    } else {
     $inc = (($c$0) + 1)|0;
     $cmp = ($c$0|0)==(2);
     $cmp3 = ($18|0)==($and|0);
     $or$cond = $cmp | $cmp3;
     if ($or$cond) {
      $retval$0 = 0;
      break;
     }
     $health = (((181680 + (($18*288)|0)|0)) + 40|0);
     $20 = HEAP32[$health>>2]|0;
     $cmp8 = ($20|0)<(1);
     if ($cmp8) {
      $23 = $18;$c$1 = $inc;
     } else {
      $mo = (181680 + (($18*288)|0)|0);
      $21 = HEAP32[$mo>>2]|0;
      $call = (_P_CheckSight($actor,$21)|0);
      $tobool11 = ($call|0)==(0);
      if (!($tobool11)) {
       $mo$lcssa = $mo;
       break L1;
      }
      $$pre = HEAP32[$lastlook>>2]|0;
      $23 = $$pre;$c$1 = $inc;
     }
    }
    $add = (($23) + 1)|0;
    $and41 = $add & 3;
    HEAP32[$lastlook>>2] = $and41;
    $18 = $and41;$c$0 = $c$1;
   }
   return ($retval$0|0);
  }
 } while(0);
 $22 = HEAP32[$mo$lcssa>>2]|0;
 $target = ((($actor)) + 120|0);
 HEAP32[$target>>2] = $22;
 $retval$0 = 1;
 return ($retval$0|0);
}
function _A_KeenDie($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $and$i = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp2 = 0, $cmp4 = 0, $cmp6 = 0, $flags$i = 0, $function = 0, $health = 0, $junk = 0, $next = 0, $or$cond = 0, $tag = 0, $th$0 = 0;
 var $th$010 = 0, $th$012 = 0, $type = 0, $type3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $junk = sp;
 $flags$i = ((($mo)) + 104|0);
 $0 = HEAP32[$flags$i>>2]|0;
 $and$i = $0 & -3;
 HEAP32[$flags$i>>2] = $and$i;
 $th$010 = HEAP32[(398220)>>2]|0;
 $cmp11 = ($th$010|0)==(398216|0);
 L1: do {
  if (!($cmp11)) {
   $type3 = ((($mo)) + 88|0);
   $th$012 = $th$010;
   while(1) {
    $function = ((($th$012)) + 8|0);
    $1 = HEAP32[$function>>2]|0;
    $cmp1 = ($1|0)!=(136|0);
    $cmp2 = ($th$012|0)==($mo|0);
    $or$cond = $cmp2 | $cmp1;
    if (!($or$cond)) {
     $type = ((($th$012)) + 88|0);
     $2 = HEAP32[$type>>2]|0;
     $3 = HEAP32[$type3>>2]|0;
     $cmp4 = ($2|0)==($3|0);
     if ($cmp4) {
      $health = ((($th$012)) + 108|0);
      $4 = HEAP32[$health>>2]|0;
      $cmp6 = ($4|0)>(0);
      if ($cmp6) {
       break;
      }
     }
    }
    $next = ((($th$012)) + 4|0);
    $th$0 = HEAP32[$next>>2]|0;
    $cmp = ($th$0|0)==(398216|0);
    if ($cmp) {
     break L1;
    } else {
     $th$012 = $th$0;
    }
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $tag = ((($junk)) + 20|0);
 HEAP16[$tag>>1] = 666;
 (_EV_DoDoor($junk,3)|0);
 STACKTOP = sp;return;
}
function _A_Fall($actor) {
 $actor = $actor|0;
 var $0 = 0, $and = 0, $flags = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $flags = ((($actor)) + 104|0);
 $0 = HEAP32[$flags>>2]|0;
 $and = $0 & -3;
 HEAP32[$flags>>2] = $and;
 return;
}
function _A_Look($actor) {
 $actor = $actor|0;
 var $$sink = 0, $$sink20 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add23 = 0, $and = 0, $and3 = 0, $call = 0, $call11 = 0, $call21 = 0, $flags = 0, $flags2 = 0;
 var $info = 0, $rem22 = 0, $seesound = 0, $seestate = 0, $sound$0 = 0, $soundtarget = 0, $subsector = 0, $target = 0, $threshold = 0, $tobool = 0, $tobool1 = 0, $tobool12 = 0, $tobool4 = 0, $tobool7 = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $threshold = ((($actor)) + 128|0);
 HEAP32[$threshold>>2] = 0;
 $subsector = ((($actor)) + 52|0);
 $0 = HEAP32[$subsector>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $soundtarget = ((($1)) + 24|0);
 $2 = HEAP32[$soundtarget>>2]|0;
 $tobool = ($2|0)==(0|0);
 if ($tobool) {
  label = 5;
 } else {
  $flags = ((($2)) + 104|0);
  $3 = HEAP32[$flags>>2]|0;
  $and = $3 & 4;
  $tobool1 = ($and|0)==(0);
  if ($tobool1) {
   label = 5;
  } else {
   $target = ((($actor)) + 120|0);
   HEAP32[$target>>2] = $2;
   $flags2 = ((($actor)) + 104|0);
   $4 = HEAP32[$flags2>>2]|0;
   $and3 = $4 & 32;
   $tobool4 = ($and3|0)==(0);
   if (!($tobool4)) {
    $call = (_P_CheckSight($actor,$2)|0);
    $tobool7 = ($call|0)==(0);
    if ($tobool7) {
     label = 5;
    }
   }
  }
 }
 if ((label|0) == 5) {
  $call11 = (_P_LookForPlayers($actor,0)|0);
  $tobool12 = ($call11|0)==(0);
  if ($tobool12) {
   return;
  }
 }
 $info = ((($actor)) + 92|0);
 $5 = HEAP32[$info>>2]|0;
 $seesound = ((($5)) + 16|0);
 $6 = HEAP32[$seesound>>2]|0;
 switch ($6|0) {
 case 0:  {
  break;
 }
 case 38: case 37: case 36:  {
  $$sink = 36;$$sink20 = 3;
  label = 8;
  break;
 }
 case 40: case 39:  {
  $$sink = 39;$$sink20 = 2;
  label = 8;
  break;
 }
 default: {
  $sound$0 = $6;
  label = 9;
 }
 }
 if ((label|0) == 8) {
  $call21 = (_P_Random()|0);
  $rem22 = (($call21|0) % ($$sink20|0))&-1;
  $add23 = (($rem22) + ($$sink))|0;
  $sound$0 = $add23;
  label = 9;
 }
 L13: do {
  if ((label|0) == 9) {
   $type = ((($actor)) + 88|0);
   $7 = HEAP32[$type>>2]|0;
   switch ($7|0) {
   case 21: case 19:  {
    _S_StartSound(0,$sound$0);
    break L13;
    break;
   }
   default: {
    _S_StartSound($actor,$sound$0);
    break L13;
   }
   }
  }
 } while(0);
 $8 = HEAP32[$info>>2]|0;
 $seestate = ((($8)) + 12|0);
 $9 = HEAP32[$seestate>>2]|0;
 (_P_SetMobjState($actor,$9)|0);
 return;
}
function _A_Chase($actor) {
 $actor = $actor|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i78 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $activesound = 0, $activesound114 = 0, $add = 0, $add$i = 0, $add$i52 = 0, $add$i83 = 0, $and = 0, $and$i = 0, $and$i58 = 0, $and31 = 0, $and40 = 0, $and41$i = 0, $and41$i84 = 0, $and44 = 0, $angle = 0, $arrayidx$i = 0, $arrayidx$i63 = 0, $attacksound = 0, $c$0$i = 0, $c$0$i62 = 0;
 var $c$1$i = 0, $c$1$i82 = 0, $call$i = 0, $call$i51 = 0, $call$i75 = 0, $call103 = 0, $call110 = 0, $call76 = 0, $call8$i = 0, $call91 = 0, $cmp = 0, $cmp$i = 0, $cmp$i53 = 0, $cmp$i67 = 0, $cmp101 = 0, $cmp111 = 0, $cmp12 = 0, $cmp16 = 0, $cmp21 = 0, $cmp3$i = 0;
 var $cmp3$i68 = 0, $cmp45 = 0, $cmp69 = 0, $cmp8$i = 0, $cmp8$i72 = 0, $dec = 0, $dec100 = 0, $dec9 = 0, $flags = 0, $flags39 = 0, $health = 0, $health$i = 0, $health$i71 = 0, $inc$i = 0, $inc$i66 = 0, $info = 0, $info$i = 0, $info50 = 0, $lastlook$i = 0, $lastlook$i56 = 0;
 var $meleestate = 0, $meleestate63 = 0, $missilestate = 0, $missilestate81 = 0, $mo$i = 0, $mo$i74 = 0, $movecount = 0, $movecount99 = 0, $movedir = 0, $or = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i69 = 0, $or$cond1 = 0, $radius$i = 0, $reactiontime = 0, $shl = 0, $spawnstate = 0, $spec$select = 0, $sub = 0;
 var $sub$i = 0, $sub$i49 = 0, $sub$i57 = 0, $sub19 = 0, $sub4$i = 0, $target = 0, $target27 = 0, $threshold = 0, $tobool = 0, $tobool$i = 0, $tobool$i64 = 0, $tobool104 = 0, $tobool108 = 0, $tobool11$i = 0, $tobool11$i76 = 0, $tobool2 = 0, $tobool28 = 0, $tobool32 = 0, $tobool4 = 0, $tobool41 = 0;
 var $tobool46 = 0, $tobool51 = 0, $tobool57 = 0, $tobool67 = 0, $tobool71 = 0, $tobool73 = 0, $tobool77 = 0, $tobool85 = 0, $tobool88 = 0, $tobool9$i = 0, $tobool92 = 0, $x$i48 = 0, $x2$i = 0, $y$i50 = 0, $y3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $reactiontime = ((($actor)) + 124|0);
 $0 = HEAP32[$reactiontime>>2]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  $dec = (($0) + -1)|0;
  HEAP32[$reactiontime>>2] = $dec;
 }
 $threshold = ((($actor)) + 128|0);
 $1 = HEAP32[$threshold>>2]|0;
 $tobool2 = ($1|0)==(0);
 if (!($tobool2)) {
  $target = ((($actor)) + 120|0);
  $2 = HEAP32[$target>>2]|0;
  $tobool4 = ($2|0)==(0|0);
  if ($tobool4) {
   $$sink = 0;
  } else {
   $health = ((($2)) + 108|0);
   $3 = HEAP32[$health>>2]|0;
   $cmp = ($3|0)<(1);
   $dec9 = (($1) + -1)|0;
   $spec$select = $cmp ? 0 : $dec9;
   $$sink = $spec$select;
  }
  HEAP32[$threshold>>2] = $$sink;
 }
 $movedir = ((($actor)) + 112|0);
 $4 = HEAP32[$movedir>>2]|0;
 $cmp12 = ($4|0)<(8);
 do {
  if ($cmp12) {
   $angle = ((($actor)) + 32|0);
   $5 = HEAP32[$angle>>2]|0;
   $and = $5 & -536870912;
   HEAP32[$angle>>2] = $and;
   $shl = $4 << 29;
   $sub = (($and) - ($shl))|0;
   $cmp16 = ($sub|0)>(0);
   if ($cmp16) {
    $sub19 = (($and) + -536870912)|0;
    HEAP32[$angle>>2] = $sub19;
    break;
   }
   $cmp21 = ($sub|0)<(0);
   if ($cmp21) {
    $add = (($and) + 536870912)|0;
    HEAP32[$angle>>2] = $add;
   }
  }
 } while(0);
 $target27 = ((($actor)) + 120|0);
 $6 = HEAP32[$target27>>2]|0;
 $tobool28 = ($6|0)==(0|0);
 if (!($tobool28)) {
  $flags = ((($6)) + 104|0);
  $7 = HEAP32[$flags>>2]|0;
  $and31 = $7 & 4;
  $tobool32 = ($and31|0)==(0);
  if (!($tobool32)) {
   $flags39 = ((($actor)) + 104|0);
   $17 = HEAP32[$flags39>>2]|0;
   $and40 = $17 & 128;
   $tobool41 = ($and40|0)==(0);
   if (!($tobool41)) {
    $and44 = $17 & -129;
    HEAP32[$flags39>>2] = $and44;
    $18 = HEAP32[99086]|0;
    $cmp45 = ($18|0)==(4);
    $19 = HEAP32[99042]|0;
    $tobool46 = ($19|0)!=(0);
    $or$cond = $cmp45 | $tobool46;
    if ($or$cond) {
     return;
    }
    _P_NewChaseDir($actor);
    return;
   }
   $info50 = ((($actor)) + 92|0);
   $20 = HEAP32[$info50>>2]|0;
   $meleestate = ((($20)) + 40|0);
   $21 = HEAP32[$meleestate>>2]|0;
   $tobool51 = ($21|0)==(0);
   if (!($tobool51)) {
    $x$i48 = ((($6)) + 12|0);
    $22 = HEAP32[$x$i48>>2]|0;
    $x2$i = ((($actor)) + 12|0);
    $23 = HEAP32[$x2$i>>2]|0;
    $sub$i49 = (($22) - ($23))|0;
    $y$i50 = ((($6)) + 16|0);
    $24 = HEAP32[$y$i50>>2]|0;
    $y3$i = ((($actor)) + 16|0);
    $25 = HEAP32[$y3$i>>2]|0;
    $sub4$i = (($24) - ($25))|0;
    $call$i51 = (_P_AproxDistance($sub$i49,$sub4$i)|0);
    $info$i = ((($6)) + 92|0);
    $26 = HEAP32[$info$i>>2]|0;
    $radius$i = ((($26)) + 64|0);
    $27 = HEAP32[$radius$i>>2]|0;
    $add$i52 = (($27) + 2883584)|0;
    $cmp$i53 = ($call$i51|0)<($add$i52|0);
    if ($cmp$i53) {
     $28 = HEAP32[$target27>>2]|0;
     $call8$i = (_P_CheckSight($actor,$28)|0);
     $tobool9$i = ($call8$i|0)==(0);
     if (!($tobool9$i)) {
      $29 = HEAP32[$info50>>2]|0;
      $attacksound = ((($29)) + 24|0);
      $30 = HEAP32[$attacksound>>2]|0;
      $tobool57 = ($30|0)==(0);
      if ($tobool57) {
       $31 = $29;
      } else {
       _S_StartSound($actor,$30);
       $$pre = HEAP32[$info50>>2]|0;
       $31 = $$pre;
      }
      $meleestate63 = ((($31)) + 40|0);
      $32 = HEAP32[$meleestate63>>2]|0;
      (_P_SetMobjState($actor,$32)|0);
      return;
     }
    }
   }
   $33 = HEAP32[$info50>>2]|0;
   $missilestate = ((($33)) + 44|0);
   $34 = HEAP32[$missilestate>>2]|0;
   $tobool67 = ($34|0)==(0);
   do {
    if (!($tobool67)) {
     $35 = HEAP32[99086]|0;
     $cmp69 = ($35|0)>(3);
     $36 = HEAP32[99042]|0;
     $tobool71 = ($36|0)!=(0);
     $or$cond1 = $cmp69 | $tobool71;
     if (!($or$cond1)) {
      $movecount = ((($actor)) + 116|0);
      $37 = HEAP32[$movecount>>2]|0;
      $tobool73 = ($37|0)==(0);
      if (!($tobool73)) {
       break;
      }
     }
     $call76 = (_P_CheckMissileRange($actor)|0);
     $tobool77 = ($call76|0)==(0);
     if (!($tobool77)) {
      $38 = HEAP32[$info50>>2]|0;
      $missilestate81 = ((($38)) + 44|0);
      $39 = HEAP32[$missilestate81>>2]|0;
      (_P_SetMobjState($actor,$39)|0);
      $40 = HEAP32[$flags39>>2]|0;
      $or = $40 | 128;
      HEAP32[$flags39>>2] = $or;
      return;
     }
    }
   } while(0);
   $41 = HEAP32[99094]|0;
   $tobool85 = ($41|0)==(0);
   L44: do {
    if (!($tobool85)) {
     $42 = HEAP32[$threshold>>2]|0;
     $tobool88 = ($42|0)==(0);
     if ($tobool88) {
      $43 = HEAP32[$target27>>2]|0;
      $call91 = (_P_CheckSight($actor,$43)|0);
      $tobool92 = ($call91|0)==(0);
      if ($tobool92) {
       $lastlook$i56 = ((($actor)) + 136|0);
       $44 = HEAP32[$lastlook$i56>>2]|0;
       $sub$i57 = (($44) + 3)|0;
       $and$i58 = $sub$i57 & 3;
       $45 = $44;$c$0$i62 = 0;
       while(1) {
        $arrayidx$i63 = (181664 + ($45<<2)|0);
        $46 = HEAP32[$arrayidx$i63>>2]|0;
        $tobool$i64 = ($46|0)==(0);
        if ($tobool$i64) {
         $49 = $45;$c$1$i82 = $c$0$i62;
        } else {
         $inc$i66 = (($c$0$i62) + 1)|0;
         $cmp$i67 = ($c$0$i62|0)==(2);
         $cmp3$i68 = ($45|0)==($and$i58|0);
         $or$cond$i69 = $cmp3$i68 | $cmp$i67;
         if ($or$cond$i69) {
          break L44;
         }
         $health$i71 = (((181680 + (($45*288)|0)|0)) + 40|0);
         $47 = HEAP32[$health$i71>>2]|0;
         $cmp8$i72 = ($47|0)<(1);
         if ($cmp8$i72) {
          $49 = $45;$c$1$i82 = $inc$i66;
         } else {
          $mo$i74 = (181680 + (($45*288)|0)|0);
          $48 = HEAP32[$mo$i74>>2]|0;
          $call$i75 = (_P_CheckSight($actor,$48)|0);
          $tobool11$i76 = ($call$i75|0)==(0);
          if (!($tobool11$i76)) {
           break;
          }
          $$pre$i78 = HEAP32[$lastlook$i56>>2]|0;
          $49 = $$pre$i78;$c$1$i82 = $inc$i66;
         }
        }
        $add$i83 = (($49) + 1)|0;
        $and41$i84 = $add$i83 & 3;
        HEAP32[$lastlook$i56>>2] = $and41$i84;
        $45 = $and41$i84;$c$0$i62 = $c$1$i82;
       }
       $50 = HEAP32[$mo$i74>>2]|0;
       HEAP32[$target27>>2] = $50;
       return;
      }
     }
    }
   } while(0);
   $movecount99 = ((($actor)) + 116|0);
   $51 = HEAP32[$movecount99>>2]|0;
   $dec100 = (($51) + -1)|0;
   HEAP32[$movecount99>>2] = $dec100;
   $cmp101 = ($51|0)<(1);
   if ($cmp101) {
    label = 50;
   } else {
    $call103 = (_P_Move($actor)|0);
    $tobool104 = ($call103|0)==(0);
    if ($tobool104) {
     label = 50;
    }
   }
   if ((label|0) == 50) {
    _P_NewChaseDir($actor);
   }
   $52 = HEAP32[$info50>>2]|0;
   $activesound = ((($52)) + 80|0);
   $53 = HEAP32[$activesound>>2]|0;
   $tobool108 = ($53|0)==(0);
   if ($tobool108) {
    return;
   }
   $call110 = (_P_Random()|0);
   $cmp111 = ($call110|0)<(3);
   if (!($cmp111)) {
    return;
   }
   $54 = HEAP32[$info50>>2]|0;
   $activesound114 = ((($54)) + 80|0);
   $55 = HEAP32[$activesound114>>2]|0;
   _S_StartSound($actor,$55);
   return;
  }
 }
 $lastlook$i = ((($actor)) + 136|0);
 $8 = HEAP32[$lastlook$i>>2]|0;
 $sub$i = (($8) + 3)|0;
 $and$i = $sub$i & 3;
 $9 = $8;$c$0$i = 0;
 while(1) {
  $arrayidx$i = (181664 + ($9<<2)|0);
  $10 = HEAP32[$arrayidx$i>>2]|0;
  $tobool$i = ($10|0)==(0);
  if ($tobool$i) {
   $13 = $9;$c$1$i = $c$0$i;
  } else {
   $inc$i = (($c$0$i) + 1)|0;
   $cmp$i = ($c$0$i|0)==(2);
   $cmp3$i = ($9|0)==($and$i|0);
   $or$cond$i = $cmp3$i | $cmp$i;
   if ($or$cond$i) {
    label = 22;
    break;
   }
   $health$i = (((181680 + (($9*288)|0)|0)) + 40|0);
   $11 = HEAP32[$health$i>>2]|0;
   $cmp8$i = ($11|0)<(1);
   if ($cmp8$i) {
    $13 = $9;$c$1$i = $inc$i;
   } else {
    $mo$i = (181680 + (($9*288)|0)|0);
    $12 = HEAP32[$mo$i>>2]|0;
    $call$i = (_P_CheckSight($actor,$12)|0);
    $tobool11$i = ($call$i|0)==(0);
    if (!($tobool11$i)) {
     label = 21;
     break;
    }
    $$pre$i = HEAP32[$lastlook$i>>2]|0;
    $13 = $$pre$i;$c$1$i = $inc$i;
   }
  }
  $add$i = (($13) + 1)|0;
  $and41$i = $add$i & 3;
  HEAP32[$lastlook$i>>2] = $and41$i;
  $9 = $and41$i;$c$0$i = $c$1$i;
 }
 if ((label|0) == 21) {
  $14 = HEAP32[$mo$i>>2]|0;
  HEAP32[$target27>>2] = $14;
  return;
 }
 else if ((label|0) == 22) {
  $info = ((($actor)) + 92|0);
  $15 = HEAP32[$info>>2]|0;
  $spawnstate = ((($15)) + 4|0);
  $16 = HEAP32[$spawnstate>>2]|0;
  (_P_SetMobjState($actor,$16)|0);
  return;
 }
}
function _A_FaceTarget($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $and = 0, $and7 = 0, $angle = 0, $call = 0, $call10 = 0, $call11 = 0, $flags = 0, $flags6 = 0, $shl = 0, $sub = 0;
 var $target = 0, $tobool = 0, $tobool8 = 0, $x = 0, $x2 = 0, $y = 0, $y4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target = ((($actor)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  return;
 }
 $flags = ((($actor)) + 104|0);
 $1 = HEAP32[$flags>>2]|0;
 $and = $1 & -33;
 HEAP32[$flags>>2] = $and;
 $x = ((($actor)) + 12|0);
 $2 = HEAP32[$x>>2]|0;
 $y = ((($actor)) + 16|0);
 $3 = HEAP32[$y>>2]|0;
 $x2 = ((($0)) + 12|0);
 $4 = HEAP32[$x2>>2]|0;
 $y4 = ((($0)) + 16|0);
 $5 = HEAP32[$y4>>2]|0;
 $call = (_R_PointToAngle2($2,$3,$4,$5)|0);
 $angle = ((($actor)) + 32|0);
 HEAP32[$angle>>2] = $call;
 $6 = HEAP32[$target>>2]|0;
 $flags6 = ((($6)) + 104|0);
 $7 = HEAP32[$flags6>>2]|0;
 $and7 = $7 & 262144;
 $tobool8 = ($and7|0)==(0);
 if ($tobool8) {
  return;
 }
 $call10 = (_P_Random()|0);
 $call11 = (_P_Random()|0);
 $sub = (($call10) - ($call11))|0;
 $shl = $sub << 21;
 $8 = HEAP32[$angle>>2]|0;
 $add = (($shl) + ($8))|0;
 HEAP32[$angle>>2] = $add;
 return;
}
function _A_PosAttack($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $call = 0, $call$i = 0, $call10$i = 0, $call11$i = 0;
 var $call2 = 0, $call3 = 0, $call4 = 0, $flags$i = 0, $flags6$i = 0, $mul = 0, $rem = 0, $shl = 0, $shl$i = 0, $sub = 0, $sub$i = 0, $target = 0, $tobool = 0, $tobool8$i = 0, $x$i = 0, $x2$i = 0, $y$i = 0, $y4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target = ((($actor)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  return;
 }
 $flags$i = ((($actor)) + 104|0);
 $1 = HEAP32[$flags$i>>2]|0;
 $and$i = $1 & -33;
 HEAP32[$flags$i>>2] = $and$i;
 $x$i = ((($actor)) + 12|0);
 $2 = HEAP32[$x$i>>2]|0;
 $y$i = ((($actor)) + 16|0);
 $3 = HEAP32[$y$i>>2]|0;
 $x2$i = ((($0)) + 12|0);
 $4 = HEAP32[$x2$i>>2]|0;
 $y4$i = ((($0)) + 16|0);
 $5 = HEAP32[$y4$i>>2]|0;
 $call$i = (_R_PointToAngle2($2,$3,$4,$5)|0);
 $angle$i = ((($actor)) + 32|0);
 HEAP32[$angle$i>>2] = $call$i;
 $6 = HEAP32[$target>>2]|0;
 $flags6$i = ((($6)) + 104|0);
 $7 = HEAP32[$flags6$i>>2]|0;
 $and7$i = $7 & 262144;
 $tobool8$i = ($and7$i|0)==(0);
 if ($tobool8$i) {
  $9 = $call$i;
 } else {
  $call10$i = (_P_Random()|0);
  $call11$i = (_P_Random()|0);
  $sub$i = (($call10$i) - ($call11$i))|0;
  $shl$i = $sub$i << 21;
  $8 = HEAP32[$angle$i>>2]|0;
  $add$i = (($shl$i) + ($8))|0;
  HEAP32[$angle$i>>2] = $add$i;
  $9 = $add$i;
 }
 $call = (_P_AimLineAttack($actor,$9,134217728)|0);
 _S_StartSound($actor,1);
 $call2 = (_P_Random()|0);
 $call3 = (_P_Random()|0);
 $sub = (($call2) - ($call3))|0;
 $shl = $sub << 20;
 $add = (($shl) + ($9))|0;
 $call4 = (_P_Random()|0);
 $rem = (($call4|0) % 5)&-1;
 $10 = ($rem*3)|0;
 $mul = (($10) + 3)|0;
 _P_LineAttack($actor,$add,134217728,$call,$mul);
 return;
}
function _A_SPosAttack($actor) {
 $actor = $actor|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$1 = 0, $add$2 = 0, $add$i = 0, $and$i = 0;
 var $and7$i = 0, $angle$i = 0, $angle1$phi$trans$insert = 0, $call = 0, $call$i = 0, $call10$i = 0, $call11$i = 0, $call2 = 0, $call2$1 = 0, $call2$2 = 0, $call3 = 0, $call3$1 = 0, $call3$2 = 0, $call4 = 0, $call4$1 = 0, $call4$2 = 0, $flags$i = 0, $flags6$i = 0, $mul = 0, $mul$1 = 0;
 var $mul$2 = 0, $rem = 0, $rem$1 = 0, $rem$2 = 0, $shl = 0, $shl$1 = 0, $shl$2 = 0, $shl$i = 0, $sub = 0, $sub$1 = 0, $sub$2 = 0, $sub$i = 0, $target = 0, $tobool = 0, $tobool$i = 0, $tobool8$i = 0, $x$i = 0, $x2$i = 0, $y$i = 0, $y4$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $target = ((($actor)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  return;
 }
 _S_StartSound($actor,2);
 $1 = HEAP32[$target>>2]|0;
 $tobool$i = ($1|0)==(0|0);
 if ($tobool$i) {
  $angle1$phi$trans$insert = ((($actor)) + 32|0);
  $$pre = HEAP32[$angle1$phi$trans$insert>>2]|0;
  $10 = $$pre;
 } else {
  $flags$i = ((($actor)) + 104|0);
  $2 = HEAP32[$flags$i>>2]|0;
  $and$i = $2 & -33;
  HEAP32[$flags$i>>2] = $and$i;
  $x$i = ((($actor)) + 12|0);
  $3 = HEAP32[$x$i>>2]|0;
  $y$i = ((($actor)) + 16|0);
  $4 = HEAP32[$y$i>>2]|0;
  $x2$i = ((($1)) + 12|0);
  $5 = HEAP32[$x2$i>>2]|0;
  $y4$i = ((($1)) + 16|0);
  $6 = HEAP32[$y4$i>>2]|0;
  $call$i = (_R_PointToAngle2($3,$4,$5,$6)|0);
  $angle$i = ((($actor)) + 32|0);
  HEAP32[$angle$i>>2] = $call$i;
  $7 = HEAP32[$target>>2]|0;
  $flags6$i = ((($7)) + 104|0);
  $8 = HEAP32[$flags6$i>>2]|0;
  $and7$i = $8 & 262144;
  $tobool8$i = ($and7$i|0)==(0);
  if ($tobool8$i) {
   $10 = $call$i;
  } else {
   $call10$i = (_P_Random()|0);
   $call11$i = (_P_Random()|0);
   $sub$i = (($call10$i) - ($call11$i))|0;
   $shl$i = $sub$i << 21;
   $9 = HEAP32[$angle$i>>2]|0;
   $add$i = (($shl$i) + ($9))|0;
   HEAP32[$angle$i>>2] = $add$i;
   $10 = $add$i;
  }
 }
 $call = (_P_AimLineAttack($actor,$10,134217728)|0);
 $call2 = (_P_Random()|0);
 $call3 = (_P_Random()|0);
 $sub = (($call2) - ($call3))|0;
 $shl = $sub << 20;
 $add = (($shl) + ($10))|0;
 $call4 = (_P_Random()|0);
 $rem = (($call4|0) % 5)&-1;
 $11 = ($rem*3)|0;
 $mul = (($11) + 3)|0;
 _P_LineAttack($actor,$add,134217728,$call,$mul);
 $call2$1 = (_P_Random()|0);
 $call3$1 = (_P_Random()|0);
 $sub$1 = (($call2$1) - ($call3$1))|0;
 $shl$1 = $sub$1 << 20;
 $add$1 = (($shl$1) + ($10))|0;
 $call4$1 = (_P_Random()|0);
 $rem$1 = (($call4$1|0) % 5)&-1;
 $12 = ($rem$1*3)|0;
 $mul$1 = (($12) + 3)|0;
 _P_LineAttack($actor,$add$1,134217728,$call,$mul$1);
 $call2$2 = (_P_Random()|0);
 $call3$2 = (_P_Random()|0);
 $sub$2 = (($call2$2) - ($call3$2))|0;
 $shl$2 = $sub$2 << 20;
 $add$2 = (($shl$2) + ($10))|0;
 $call4$2 = (_P_Random()|0);
 $rem$2 = (($call4$2|0) % 5)&-1;
 $13 = ($rem$2*3)|0;
 $mul$2 = (($13) + 3)|0;
 _P_LineAttack($actor,$add$2,134217728,$call,$mul$2);
 return;
}
function _A_CPosAttack($actor) {
 $actor = $actor|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $angle1$phi$trans$insert = 0, $call = 0;
 var $call$i = 0, $call10$i = 0, $call11$i = 0, $call2 = 0, $call3 = 0, $call4 = 0, $flags$i = 0, $flags6$i = 0, $mul = 0, $rem = 0, $shl = 0, $shl$i = 0, $sub = 0, $sub$i = 0, $target = 0, $tobool = 0, $tobool$i = 0, $tobool8$i = 0, $x$i = 0, $x2$i = 0;
 var $y$i = 0, $y4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target = ((($actor)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  return;
 }
 _S_StartSound($actor,2);
 $1 = HEAP32[$target>>2]|0;
 $tobool$i = ($1|0)==(0|0);
 if ($tobool$i) {
  $angle1$phi$trans$insert = ((($actor)) + 32|0);
  $$pre = HEAP32[$angle1$phi$trans$insert>>2]|0;
  $10 = $$pre;
 } else {
  $flags$i = ((($actor)) + 104|0);
  $2 = HEAP32[$flags$i>>2]|0;
  $and$i = $2 & -33;
  HEAP32[$flags$i>>2] = $and$i;
  $x$i = ((($actor)) + 12|0);
  $3 = HEAP32[$x$i>>2]|0;
  $y$i = ((($actor)) + 16|0);
  $4 = HEAP32[$y$i>>2]|0;
  $x2$i = ((($1)) + 12|0);
  $5 = HEAP32[$x2$i>>2]|0;
  $y4$i = ((($1)) + 16|0);
  $6 = HEAP32[$y4$i>>2]|0;
  $call$i = (_R_PointToAngle2($3,$4,$5,$6)|0);
  $angle$i = ((($actor)) + 32|0);
  HEAP32[$angle$i>>2] = $call$i;
  $7 = HEAP32[$target>>2]|0;
  $flags6$i = ((($7)) + 104|0);
  $8 = HEAP32[$flags6$i>>2]|0;
  $and7$i = $8 & 262144;
  $tobool8$i = ($and7$i|0)==(0);
  if ($tobool8$i) {
   $10 = $call$i;
  } else {
   $call10$i = (_P_Random()|0);
   $call11$i = (_P_Random()|0);
   $sub$i = (($call10$i) - ($call11$i))|0;
   $shl$i = $sub$i << 21;
   $9 = HEAP32[$angle$i>>2]|0;
   $add$i = (($shl$i) + ($9))|0;
   HEAP32[$angle$i>>2] = $add$i;
   $10 = $add$i;
  }
 }
 $call = (_P_AimLineAttack($actor,$10,134217728)|0);
 $call2 = (_P_Random()|0);
 $call3 = (_P_Random()|0);
 $sub = (($call2) - ($call3))|0;
 $shl = $sub << 20;
 $add = (($shl) + ($10))|0;
 $call4 = (_P_Random()|0);
 $rem = (($call4|0) % 5)&-1;
 $11 = ($rem*3)|0;
 $mul = (($11) + 3)|0;
 _P_LineAttack($actor,$add,134217728,$call,$mul);
 return;
}
function _A_CPosRefire($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $call = 0, $call$i = 0, $call10$i = 0;
 var $call11$i = 0, $call5 = 0, $cmp = 0, $cmp2 = 0, $flags$i = 0, $flags6$i = 0, $health = 0, $info = 0, $seestate = 0, $shl$i = 0, $sub$i = 0, $target$i = 0, $tobool = 0, $tobool$i = 0, $tobool6 = 0, $tobool8$i = 0, $x$i = 0, $x2$i = 0, $y$i = 0, $y4$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $target$i = ((($actor)) + 120|0);
 $0 = HEAP32[$target$i>>2]|0;
 $tobool$i = ($0|0)==(0|0);
 if (!($tobool$i)) {
  $flags$i = ((($actor)) + 104|0);
  $1 = HEAP32[$flags$i>>2]|0;
  $and$i = $1 & -33;
  HEAP32[$flags$i>>2] = $and$i;
  $x$i = ((($actor)) + 12|0);
  $2 = HEAP32[$x$i>>2]|0;
  $y$i = ((($actor)) + 16|0);
  $3 = HEAP32[$y$i>>2]|0;
  $x2$i = ((($0)) + 12|0);
  $4 = HEAP32[$x2$i>>2]|0;
  $y4$i = ((($0)) + 16|0);
  $5 = HEAP32[$y4$i>>2]|0;
  $call$i = (_R_PointToAngle2($2,$3,$4,$5)|0);
  $angle$i = ((($actor)) + 32|0);
  HEAP32[$angle$i>>2] = $call$i;
  $6 = HEAP32[$target$i>>2]|0;
  $flags6$i = ((($6)) + 104|0);
  $7 = HEAP32[$flags6$i>>2]|0;
  $and7$i = $7 & 262144;
  $tobool8$i = ($and7$i|0)==(0);
  if (!($tobool8$i)) {
   $call10$i = (_P_Random()|0);
   $call11$i = (_P_Random()|0);
   $sub$i = (($call10$i) - ($call11$i))|0;
   $shl$i = $sub$i << 21;
   $8 = HEAP32[$angle$i>>2]|0;
   $add$i = (($shl$i) + ($8))|0;
   HEAP32[$angle$i>>2] = $add$i;
  }
 }
 $call = (_P_Random()|0);
 $cmp = ($call|0)<(40);
 if ($cmp) {
  return;
 }
 $9 = HEAP32[$target$i>>2]|0;
 $tobool = ($9|0)==(0|0);
 if (!($tobool)) {
  $health = ((($9)) + 108|0);
  $10 = HEAP32[$health>>2]|0;
  $cmp2 = ($10|0)<(1);
  if (!($cmp2)) {
   $call5 = (_P_CheckSight($actor,$9)|0);
   $tobool6 = ($call5|0)==(0);
   if (!($tobool6)) {
    return;
   }
  }
 }
 $info = ((($actor)) + 92|0);
 $11 = HEAP32[$info>>2]|0;
 $seestate = ((($11)) + 12|0);
 $12 = HEAP32[$seestate>>2]|0;
 (_P_SetMobjState($actor,$12)|0);
 return;
}
function _A_SpidRefire($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $call = 0, $call$i = 0, $call10$i = 0;
 var $call11$i = 0, $call5 = 0, $cmp = 0, $cmp2 = 0, $flags$i = 0, $flags6$i = 0, $health = 0, $info = 0, $seestate = 0, $shl$i = 0, $sub$i = 0, $target$i = 0, $tobool = 0, $tobool$i = 0, $tobool6 = 0, $tobool8$i = 0, $x$i = 0, $x2$i = 0, $y$i = 0, $y4$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $target$i = ((($actor)) + 120|0);
 $0 = HEAP32[$target$i>>2]|0;
 $tobool$i = ($0|0)==(0|0);
 if (!($tobool$i)) {
  $flags$i = ((($actor)) + 104|0);
  $1 = HEAP32[$flags$i>>2]|0;
  $and$i = $1 & -33;
  HEAP32[$flags$i>>2] = $and$i;
  $x$i = ((($actor)) + 12|0);
  $2 = HEAP32[$x$i>>2]|0;
  $y$i = ((($actor)) + 16|0);
  $3 = HEAP32[$y$i>>2]|0;
  $x2$i = ((($0)) + 12|0);
  $4 = HEAP32[$x2$i>>2]|0;
  $y4$i = ((($0)) + 16|0);
  $5 = HEAP32[$y4$i>>2]|0;
  $call$i = (_R_PointToAngle2($2,$3,$4,$5)|0);
  $angle$i = ((($actor)) + 32|0);
  HEAP32[$angle$i>>2] = $call$i;
  $6 = HEAP32[$target$i>>2]|0;
  $flags6$i = ((($6)) + 104|0);
  $7 = HEAP32[$flags6$i>>2]|0;
  $and7$i = $7 & 262144;
  $tobool8$i = ($and7$i|0)==(0);
  if (!($tobool8$i)) {
   $call10$i = (_P_Random()|0);
   $call11$i = (_P_Random()|0);
   $sub$i = (($call10$i) - ($call11$i))|0;
   $shl$i = $sub$i << 21;
   $8 = HEAP32[$angle$i>>2]|0;
   $add$i = (($shl$i) + ($8))|0;
   HEAP32[$angle$i>>2] = $add$i;
  }
 }
 $call = (_P_Random()|0);
 $cmp = ($call|0)<(10);
 if ($cmp) {
  return;
 }
 $9 = HEAP32[$target$i>>2]|0;
 $tobool = ($9|0)==(0|0);
 if (!($tobool)) {
  $health = ((($9)) + 108|0);
  $10 = HEAP32[$health>>2]|0;
  $cmp2 = ($10|0)<(1);
  if (!($cmp2)) {
   $call5 = (_P_CheckSight($actor,$9)|0);
   $tobool6 = ($call5|0)==(0);
   if (!($tobool6)) {
    return;
   }
  }
 }
 $info = ((($actor)) + 92|0);
 $11 = HEAP32[$info>>2]|0;
 $seestate = ((($11)) + 12|0);
 $12 = HEAP32[$seestate>>2]|0;
 (_P_SetMobjState($actor,$12)|0);
 return;
}
function _A_BspiAttack($actor) {
 $actor = $actor|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $call$i = 0, $call10$i = 0, $call11$i = 0, $flags$i = 0, $flags6$i = 0;
 var $shl$i = 0, $sub$i = 0, $target = 0, $tobool = 0, $tobool8$i = 0, $x$i = 0, $x2$i = 0, $y$i = 0, $y4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target = ((($actor)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  return;
 }
 $flags$i = ((($actor)) + 104|0);
 $1 = HEAP32[$flags$i>>2]|0;
 $and$i = $1 & -33;
 HEAP32[$flags$i>>2] = $and$i;
 $x$i = ((($actor)) + 12|0);
 $2 = HEAP32[$x$i>>2]|0;
 $y$i = ((($actor)) + 16|0);
 $3 = HEAP32[$y$i>>2]|0;
 $x2$i = ((($0)) + 12|0);
 $4 = HEAP32[$x2$i>>2]|0;
 $y4$i = ((($0)) + 16|0);
 $5 = HEAP32[$y4$i>>2]|0;
 $call$i = (_R_PointToAngle2($2,$3,$4,$5)|0);
 $angle$i = ((($actor)) + 32|0);
 HEAP32[$angle$i>>2] = $call$i;
 $6 = HEAP32[$target>>2]|0;
 $flags6$i = ((($6)) + 104|0);
 $7 = HEAP32[$flags6$i>>2]|0;
 $and7$i = $7 & 262144;
 $tobool8$i = ($and7$i|0)==(0);
 if ($tobool8$i) {
  $9 = $6;
 } else {
  $call10$i = (_P_Random()|0);
  $call11$i = (_P_Random()|0);
  $sub$i = (($call10$i) - ($call11$i))|0;
  $shl$i = $sub$i << 21;
  $8 = HEAP32[$angle$i>>2]|0;
  $add$i = (($shl$i) + ($8))|0;
  HEAP32[$angle$i>>2] = $add$i;
  $$pre = HEAP32[$target>>2]|0;
  $9 = $$pre;
 }
 (_P_SpawnMissile($actor,$9,36)|0);
 return;
}
function _A_TroopAttack($actor) {
 $actor = $actor|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add$i = 0, $add$i16 = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $call$i = 0, $call$i15 = 0, $call10$i = 0, $call11$i = 0, $call3 = 0, $call8$i = 0, $cmp$i = 0, $flags$i = 0, $flags6$i = 0, $info$i = 0, $mul = 0, $radius$i = 0, $rem = 0, $shl$i = 0;
 var $sub$i = 0, $sub$i13 = 0, $sub4$i = 0, $target = 0, $tobool = 0, $tobool$i10 = 0, $tobool8$i = 0, $tobool9$i = 0, $x$i = 0, $x$i11 = 0, $x2$i = 0, $y$i = 0, $y$i14 = 0, $y4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target = ((($actor)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  return;
 }
 $flags$i = ((($actor)) + 104|0);
 $1 = HEAP32[$flags$i>>2]|0;
 $and$i = $1 & -33;
 HEAP32[$flags$i>>2] = $and$i;
 $x$i = ((($actor)) + 12|0);
 $2 = HEAP32[$x$i>>2]|0;
 $y$i = ((($actor)) + 16|0);
 $3 = HEAP32[$y$i>>2]|0;
 $x2$i = ((($0)) + 12|0);
 $4 = HEAP32[$x2$i>>2]|0;
 $y4$i = ((($0)) + 16|0);
 $5 = HEAP32[$y4$i>>2]|0;
 $call$i = (_R_PointToAngle2($2,$3,$4,$5)|0);
 $angle$i = ((($actor)) + 32|0);
 HEAP32[$angle$i>>2] = $call$i;
 $6 = HEAP32[$target>>2]|0;
 $flags6$i = ((($6)) + 104|0);
 $7 = HEAP32[$flags6$i>>2]|0;
 $and7$i = $7 & 262144;
 $tobool8$i = ($and7$i|0)==(0);
 if ($tobool8$i) {
  $9 = $6;
 } else {
  $call10$i = (_P_Random()|0);
  $call11$i = (_P_Random()|0);
  $sub$i = (($call10$i) - ($call11$i))|0;
  $shl$i = $sub$i << 21;
  $8 = HEAP32[$angle$i>>2]|0;
  $add$i = (($shl$i) + ($8))|0;
  HEAP32[$angle$i>>2] = $add$i;
  $$pr = HEAP32[$target>>2]|0;
  $9 = $$pr;
 }
 $tobool$i10 = ($9|0)==(0|0);
 if (!($tobool$i10)) {
  $x$i11 = ((($9)) + 12|0);
  $10 = HEAP32[$x$i11>>2]|0;
  $11 = HEAP32[$x$i>>2]|0;
  $sub$i13 = (($10) - ($11))|0;
  $y$i14 = ((($9)) + 16|0);
  $12 = HEAP32[$y$i14>>2]|0;
  $13 = HEAP32[$y$i>>2]|0;
  $sub4$i = (($12) - ($13))|0;
  $call$i15 = (_P_AproxDistance($sub$i13,$sub4$i)|0);
  $info$i = ((($9)) + 92|0);
  $14 = HEAP32[$info$i>>2]|0;
  $radius$i = ((($14)) + 64|0);
  $15 = HEAP32[$radius$i>>2]|0;
  $add$i16 = (($15) + 2883584)|0;
  $cmp$i = ($call$i15|0)<($add$i16|0);
  if ($cmp$i) {
   $16 = HEAP32[$target>>2]|0;
   $call8$i = (_P_CheckSight($actor,$16)|0);
   $tobool9$i = ($call8$i|0)==(0);
   if (!($tobool9$i)) {
    _S_StartSound($actor,55);
    $call3 = (_P_Random()|0);
    $rem = (($call3|0) % 8)&-1;
    $17 = ($rem*3)|0;
    $mul = (($17) + 3)|0;
    $18 = HEAP32[$target>>2]|0;
    _P_DamageMobj($18,$actor,$actor,$mul);
    return;
   }
  }
 }
 $19 = HEAP32[$target>>2]|0;
 (_P_SpawnMissile($actor,$19,31)|0);
 return;
}
function _A_SargAttack($actor) {
 $actor = $actor|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add$i = 0, $add$i14 = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $call$i = 0, $call$i13 = 0, $call10$i = 0, $call11$i = 0, $call3 = 0, $call8$i = 0, $cmp$i = 0, $flags$i = 0, $flags6$i = 0, $info$i = 0, $mul = 0, $radius$i = 0, $rem = 0, $shl$i = 0, $sub$i = 0;
 var $sub$i11 = 0, $sub4$i = 0, $target = 0, $tobool = 0, $tobool$i8 = 0, $tobool8$i = 0, $tobool9$i = 0, $x$i = 0, $x$i9 = 0, $x2$i = 0, $y$i = 0, $y$i12 = 0, $y4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target = ((($actor)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  return;
 }
 $flags$i = ((($actor)) + 104|0);
 $1 = HEAP32[$flags$i>>2]|0;
 $and$i = $1 & -33;
 HEAP32[$flags$i>>2] = $and$i;
 $x$i = ((($actor)) + 12|0);
 $2 = HEAP32[$x$i>>2]|0;
 $y$i = ((($actor)) + 16|0);
 $3 = HEAP32[$y$i>>2]|0;
 $x2$i = ((($0)) + 12|0);
 $4 = HEAP32[$x2$i>>2]|0;
 $y4$i = ((($0)) + 16|0);
 $5 = HEAP32[$y4$i>>2]|0;
 $call$i = (_R_PointToAngle2($2,$3,$4,$5)|0);
 $angle$i = ((($actor)) + 32|0);
 HEAP32[$angle$i>>2] = $call$i;
 $6 = HEAP32[$target>>2]|0;
 $flags6$i = ((($6)) + 104|0);
 $7 = HEAP32[$flags6$i>>2]|0;
 $and7$i = $7 & 262144;
 $tobool8$i = ($and7$i|0)==(0);
 if ($tobool8$i) {
  $9 = $6;
 } else {
  $call10$i = (_P_Random()|0);
  $call11$i = (_P_Random()|0);
  $sub$i = (($call10$i) - ($call11$i))|0;
  $shl$i = $sub$i << 21;
  $8 = HEAP32[$angle$i>>2]|0;
  $add$i = (($shl$i) + ($8))|0;
  HEAP32[$angle$i>>2] = $add$i;
  $$pr = HEAP32[$target>>2]|0;
  $9 = $$pr;
 }
 $tobool$i8 = ($9|0)==(0|0);
 if ($tobool$i8) {
  return;
 }
 $x$i9 = ((($9)) + 12|0);
 $10 = HEAP32[$x$i9>>2]|0;
 $11 = HEAP32[$x$i>>2]|0;
 $sub$i11 = (($10) - ($11))|0;
 $y$i12 = ((($9)) + 16|0);
 $12 = HEAP32[$y$i12>>2]|0;
 $13 = HEAP32[$y$i>>2]|0;
 $sub4$i = (($12) - ($13))|0;
 $call$i13 = (_P_AproxDistance($sub$i11,$sub4$i)|0);
 $info$i = ((($9)) + 92|0);
 $14 = HEAP32[$info$i>>2]|0;
 $radius$i = ((($14)) + 64|0);
 $15 = HEAP32[$radius$i>>2]|0;
 $add$i14 = (($15) + 2883584)|0;
 $cmp$i = ($call$i13|0)<($add$i14|0);
 if (!($cmp$i)) {
  return;
 }
 $16 = HEAP32[$target>>2]|0;
 $call8$i = (_P_CheckSight($actor,$16)|0);
 $tobool9$i = ($call8$i|0)==(0);
 if ($tobool9$i) {
  return;
 }
 $call3 = (_P_Random()|0);
 $rem = (($call3|0) % 10)&-1;
 $add = $rem << 2;
 $mul = (($add) + 4)|0;
 $17 = HEAP32[$target>>2]|0;
 _P_DamageMobj($17,$actor,$actor,$mul);
 return;
}
function _A_HeadAttack($actor) {
 $actor = $actor|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add$i = 0, $add$i16 = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $call$i = 0, $call$i15 = 0, $call10$i = 0, $call11$i = 0, $call3 = 0, $call8$i = 0, $cmp$i = 0, $flags$i = 0, $flags6$i = 0, $info$i = 0, $mul = 0, $radius$i = 0, $rem = 0, $shl$i = 0;
 var $sub$i = 0, $sub$i13 = 0, $sub4$i = 0, $target = 0, $tobool = 0, $tobool$i10 = 0, $tobool8$i = 0, $tobool9$i = 0, $x$i = 0, $x$i11 = 0, $x2$i = 0, $y$i = 0, $y$i14 = 0, $y4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target = ((($actor)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  return;
 }
 $flags$i = ((($actor)) + 104|0);
 $1 = HEAP32[$flags$i>>2]|0;
 $and$i = $1 & -33;
 HEAP32[$flags$i>>2] = $and$i;
 $x$i = ((($actor)) + 12|0);
 $2 = HEAP32[$x$i>>2]|0;
 $y$i = ((($actor)) + 16|0);
 $3 = HEAP32[$y$i>>2]|0;
 $x2$i = ((($0)) + 12|0);
 $4 = HEAP32[$x2$i>>2]|0;
 $y4$i = ((($0)) + 16|0);
 $5 = HEAP32[$y4$i>>2]|0;
 $call$i = (_R_PointToAngle2($2,$3,$4,$5)|0);
 $angle$i = ((($actor)) + 32|0);
 HEAP32[$angle$i>>2] = $call$i;
 $6 = HEAP32[$target>>2]|0;
 $flags6$i = ((($6)) + 104|0);
 $7 = HEAP32[$flags6$i>>2]|0;
 $and7$i = $7 & 262144;
 $tobool8$i = ($and7$i|0)==(0);
 if ($tobool8$i) {
  $9 = $6;
 } else {
  $call10$i = (_P_Random()|0);
  $call11$i = (_P_Random()|0);
  $sub$i = (($call10$i) - ($call11$i))|0;
  $shl$i = $sub$i << 21;
  $8 = HEAP32[$angle$i>>2]|0;
  $add$i = (($shl$i) + ($8))|0;
  HEAP32[$angle$i>>2] = $add$i;
  $$pr = HEAP32[$target>>2]|0;
  $9 = $$pr;
 }
 $tobool$i10 = ($9|0)==(0|0);
 if (!($tobool$i10)) {
  $x$i11 = ((($9)) + 12|0);
  $10 = HEAP32[$x$i11>>2]|0;
  $11 = HEAP32[$x$i>>2]|0;
  $sub$i13 = (($10) - ($11))|0;
  $y$i14 = ((($9)) + 16|0);
  $12 = HEAP32[$y$i14>>2]|0;
  $13 = HEAP32[$y$i>>2]|0;
  $sub4$i = (($12) - ($13))|0;
  $call$i15 = (_P_AproxDistance($sub$i13,$sub4$i)|0);
  $info$i = ((($9)) + 92|0);
  $14 = HEAP32[$info$i>>2]|0;
  $radius$i = ((($14)) + 64|0);
  $15 = HEAP32[$radius$i>>2]|0;
  $add$i16 = (($15) + 2883584)|0;
  $cmp$i = ($call$i15|0)<($add$i16|0);
  if ($cmp$i) {
   $16 = HEAP32[$target>>2]|0;
   $call8$i = (_P_CheckSight($actor,$16)|0);
   $tobool9$i = ($call8$i|0)==(0);
   if (!($tobool9$i)) {
    $call3 = (_P_Random()|0);
    $rem = (($call3|0) % 6)&-1;
    $17 = ($rem*10)|0;
    $mul = (($17) + 10)|0;
    $18 = HEAP32[$target>>2]|0;
    _P_DamageMobj($18,$actor,$actor,$mul);
    return;
   }
  }
 }
 $19 = HEAP32[$target>>2]|0;
 (_P_SpawnMissile($actor,$19,32)|0);
 return;
}
function _A_CyberAttack($actor) {
 $actor = $actor|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $call$i = 0, $call10$i = 0, $call11$i = 0, $flags$i = 0, $flags6$i = 0;
 var $shl$i = 0, $sub$i = 0, $target = 0, $tobool = 0, $tobool8$i = 0, $x$i = 0, $x2$i = 0, $y$i = 0, $y4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target = ((($actor)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  return;
 }
 $flags$i = ((($actor)) + 104|0);
 $1 = HEAP32[$flags$i>>2]|0;
 $and$i = $1 & -33;
 HEAP32[$flags$i>>2] = $and$i;
 $x$i = ((($actor)) + 12|0);
 $2 = HEAP32[$x$i>>2]|0;
 $y$i = ((($actor)) + 16|0);
 $3 = HEAP32[$y$i>>2]|0;
 $x2$i = ((($0)) + 12|0);
 $4 = HEAP32[$x2$i>>2]|0;
 $y4$i = ((($0)) + 16|0);
 $5 = HEAP32[$y4$i>>2]|0;
 $call$i = (_R_PointToAngle2($2,$3,$4,$5)|0);
 $angle$i = ((($actor)) + 32|0);
 HEAP32[$angle$i>>2] = $call$i;
 $6 = HEAP32[$target>>2]|0;
 $flags6$i = ((($6)) + 104|0);
 $7 = HEAP32[$flags6$i>>2]|0;
 $and7$i = $7 & 262144;
 $tobool8$i = ($and7$i|0)==(0);
 if ($tobool8$i) {
  $9 = $6;
 } else {
  $call10$i = (_P_Random()|0);
  $call11$i = (_P_Random()|0);
  $sub$i = (($call10$i) - ($call11$i))|0;
  $shl$i = $sub$i << 21;
  $8 = HEAP32[$angle$i>>2]|0;
  $add$i = (($shl$i) + ($8))|0;
  HEAP32[$angle$i>>2] = $add$i;
  $$pre = HEAP32[$target>>2]|0;
  $9 = $$pre;
 }
 (_P_SpawnMissile($actor,$9,33)|0);
 return;
}
function _A_BruisAttack($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $call$i = 0, $call3 = 0, $call8$i = 0, $cmp$i = 0, $info$i = 0, $mul = 0, $radius$i = 0, $rem = 0;
 var $sub$i = 0, $sub4$i = 0, $target = 0, $tobool = 0, $tobool9$i = 0, $x$i = 0, $x2$i = 0, $y$i = 0, $y3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target = ((($actor)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  return;
 }
 $x$i = ((($0)) + 12|0);
 $1 = HEAP32[$x$i>>2]|0;
 $x2$i = ((($actor)) + 12|0);
 $2 = HEAP32[$x2$i>>2]|0;
 $sub$i = (($1) - ($2))|0;
 $y$i = ((($0)) + 16|0);
 $3 = HEAP32[$y$i>>2]|0;
 $y3$i = ((($actor)) + 16|0);
 $4 = HEAP32[$y3$i>>2]|0;
 $sub4$i = (($3) - ($4))|0;
 $call$i = (_P_AproxDistance($sub$i,$sub4$i)|0);
 $info$i = ((($0)) + 92|0);
 $5 = HEAP32[$info$i>>2]|0;
 $radius$i = ((($5)) + 64|0);
 $6 = HEAP32[$radius$i>>2]|0;
 $add$i = (($6) + 2883584)|0;
 $cmp$i = ($call$i|0)<($add$i|0);
 if ($cmp$i) {
  $7 = HEAP32[$target>>2]|0;
  $call8$i = (_P_CheckSight($actor,$7)|0);
  $tobool9$i = ($call8$i|0)==(0);
  if (!($tobool9$i)) {
   _S_StartSound($actor,55);
   $call3 = (_P_Random()|0);
   $rem = (($call3|0) % 8)&-1;
   $8 = ($rem*10)|0;
   $mul = (($8) + 10)|0;
   $9 = HEAP32[$target>>2]|0;
   _P_DamageMobj($9,$actor,$actor,$mul);
   return;
  }
 }
 $10 = HEAP32[$target>>2]|0;
 (_P_SpawnMissile($actor,$10,16)|0);
 return;
}
function _A_SkelMissile($actor) {
 $actor = $actor|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0;
 var $add3 = 0, $add4 = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $call = 0, $call$i = 0, $call10$i = 0, $call11$i = 0, $flags$i = 0, $flags6$i = 0, $momx = 0, $momy = 0, $shl$i = 0, $sub = 0, $sub$i = 0, $target = 0, $tobool = 0, $tobool8$i = 0, $tracer = 0;
 var $x = 0, $x$i = 0, $x2$i = 0, $y = 0, $y$i = 0, $y4$i = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target = ((($actor)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  return;
 }
 $flags$i = ((($actor)) + 104|0);
 $1 = HEAP32[$flags$i>>2]|0;
 $and$i = $1 & -33;
 HEAP32[$flags$i>>2] = $and$i;
 $x$i = ((($actor)) + 12|0);
 $2 = HEAP32[$x$i>>2]|0;
 $y$i = ((($actor)) + 16|0);
 $3 = HEAP32[$y$i>>2]|0;
 $x2$i = ((($0)) + 12|0);
 $4 = HEAP32[$x2$i>>2]|0;
 $y4$i = ((($0)) + 16|0);
 $5 = HEAP32[$y4$i>>2]|0;
 $call$i = (_R_PointToAngle2($2,$3,$4,$5)|0);
 $angle$i = ((($actor)) + 32|0);
 HEAP32[$angle$i>>2] = $call$i;
 $6 = HEAP32[$target>>2]|0;
 $flags6$i = ((($6)) + 104|0);
 $7 = HEAP32[$flags6$i>>2]|0;
 $and7$i = $7 & 262144;
 $tobool8$i = ($and7$i|0)==(0);
 if ($tobool8$i) {
  $10 = $6;
 } else {
  $call10$i = (_P_Random()|0);
  $call11$i = (_P_Random()|0);
  $sub$i = (($call10$i) - ($call11$i))|0;
  $shl$i = $sub$i << 21;
  $8 = HEAP32[$angle$i>>2]|0;
  $add$i = (($shl$i) + ($8))|0;
  HEAP32[$angle$i>>2] = $add$i;
  $$pre = HEAP32[$target>>2]|0;
  $10 = $$pre;
 }
 $z = ((($actor)) + 20|0);
 $9 = HEAP32[$z>>2]|0;
 $add = (($9) + 1048576)|0;
 HEAP32[$z>>2] = $add;
 $call = (_P_SpawnMissile($actor,$10,6)|0);
 $11 = HEAP32[$z>>2]|0;
 $sub = (($11) + -1048576)|0;
 HEAP32[$z>>2] = $sub;
 $momx = ((($call)) + 72|0);
 $12 = HEAP32[$momx>>2]|0;
 $x = ((($call)) + 12|0);
 $13 = HEAP32[$x>>2]|0;
 $add3 = (($13) + ($12))|0;
 HEAP32[$x>>2] = $add3;
 $momy = ((($call)) + 76|0);
 $14 = HEAP32[$momy>>2]|0;
 $y = ((($call)) + 16|0);
 $15 = HEAP32[$y>>2]|0;
 $add4 = (($15) + ($14))|0;
 HEAP32[$y>>2] = $add4;
 $16 = HEAP32[$target>>2]|0;
 $tracer = ((($call)) + 152|0);
 HEAP32[$tracer>>2] = $16;
 return;
}
function _A_Tracer($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add65 = 0, $and = 0, $and6 = 0, $angle = 0;
 var $arrayidx = 0, $arrayidx49 = 0, $call = 0, $call20 = 0, $call45 = 0, $call5 = 0, $call50 = 0, $call58 = 0, $cmp13 = 0, $cmp21 = 0, $cmp25 = 0, $cmp31 = 0, $cmp38 = 0, $cmp70 = 0, $div = 0, $div68 = 0, $health = 0, $info = 0, $momx = 0, $momy = 0;
 var $momz = 0, $momz69 = 0, $shr = 0, $spec$select = 0, $spec$store$select = 0, $spec$store$select53 = 0, $spec$store$select54 = 0, $spec$store$select54$sink = 0, $speed = 0, $speed48 = 0, $speed60 = 0, $storemerge = 0, $storemerge$v = 0, $sub = 0, $sub24 = 0, $sub28 = 0, $sub3 = 0, $sub30 = 0, $sub37 = 0, $sub54 = 0;
 var $sub57 = 0, $sub67 = 0, $sub7 = 0, $tics = 0, $tobool = 0, $tobool12 = 0, $tracer = 0, $x = 0, $x18 = 0, $y = 0, $y19 = 0, $z = 0, $z64 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99024]|0;
 $and = $0 & 3;
 $tobool = ($and|0)==(0);
 if (!($tobool)) {
  return;
 }
 $x = ((($actor)) + 12|0);
 $1 = HEAP32[$x>>2]|0;
 $y = ((($actor)) + 16|0);
 $2 = HEAP32[$y>>2]|0;
 $z = ((($actor)) + 20|0);
 $3 = HEAP32[$z>>2]|0;
 _P_SpawnPuff($1,$2,$3);
 $4 = HEAP32[$x>>2]|0;
 $momx = ((($actor)) + 72|0);
 $5 = HEAP32[$momx>>2]|0;
 $sub = (($4) - ($5))|0;
 $6 = HEAP32[$y>>2]|0;
 $momy = ((($actor)) + 76|0);
 $7 = HEAP32[$momy>>2]|0;
 $sub3 = (($6) - ($7))|0;
 $8 = HEAP32[$z>>2]|0;
 $call = (_P_SpawnMobj($sub,$sub3,$8,7)|0);
 $momz = ((($call)) + 80|0);
 HEAP32[$momz>>2] = 65536;
 $call5 = (_P_Random()|0);
 $and6 = $call5 & 3;
 $tics = ((($call)) + 96|0);
 $9 = HEAP32[$tics>>2]|0;
 $sub7 = (($9) - ($and6))|0;
 $10 = ($sub7|0)>(1);
 $spec$select = $10 ? $sub7 : 1;
 HEAP32[$tics>>2] = $spec$select;
 $tracer = ((($actor)) + 152|0);
 $11 = HEAP32[$tracer>>2]|0;
 $tobool12 = ($11|0)==(0|0);
 if ($tobool12) {
  return;
 }
 $health = ((($11)) + 108|0);
 $12 = HEAP32[$health>>2]|0;
 $cmp13 = ($12|0)<(1);
 if ($cmp13) {
  return;
 }
 $13 = HEAP32[$x>>2]|0;
 $14 = HEAP32[$y>>2]|0;
 $x18 = ((($11)) + 12|0);
 $15 = HEAP32[$x18>>2]|0;
 $y19 = ((($11)) + 16|0);
 $16 = HEAP32[$y19>>2]|0;
 $call20 = (_R_PointToAngle2($13,$14,$15,$16)|0);
 $angle = ((($actor)) + 32|0);
 $17 = HEAP32[$angle>>2]|0;
 $cmp21 = ($call20|0)==($17|0);
 if ($cmp21) {
  $18 = $call20;
 } else {
  $sub24 = (($call20) - ($17))|0;
  $cmp25 = ($sub24>>>0)>(2147483648);
  if ($cmp25) {
   $sub28 = (($17) - 201326592)|0;
   $sub30 = (($call20) - ($sub28))|0;
   $cmp31 = ($sub30|0)>(-1);
   $spec$store$select53 = $cmp31 ? $call20 : $sub28;
   $spec$store$select54$sink = $spec$store$select53;
  } else {
   $add = (201326592 + ($17))|0;
   $sub37 = (($call20) - ($add))|0;
   $cmp38 = ($sub37>>>0)>(2147483648);
   $spec$store$select54 = $cmp38 ? $call20 : $add;
   $spec$store$select54$sink = $spec$store$select54;
  }
  HEAP32[$angle>>2] = $spec$store$select54$sink;
  $18 = $spec$store$select54$sink;
 }
 $shr = $18 >>> 19;
 $info = ((($actor)) + 92|0);
 $19 = HEAP32[$info>>2]|0;
 $speed = ((($19)) + 60|0);
 $20 = HEAP32[$speed>>2]|0;
 $arrayidx = ((82912) + ($shr<<2)|0);
 $21 = HEAP32[$arrayidx>>2]|0;
 $call45 = (_FixedMul($20,$21)|0);
 HEAP32[$momx>>2] = $call45;
 $22 = HEAP32[$info>>2]|0;
 $speed48 = ((($22)) + 60|0);
 $23 = HEAP32[$speed48>>2]|0;
 $arrayidx49 = (74720 + ($shr<<2)|0);
 $24 = HEAP32[$arrayidx49>>2]|0;
 $call50 = (_FixedMul($23,$24)|0);
 HEAP32[$momy>>2] = $call50;
 $25 = HEAP32[$x18>>2]|0;
 $26 = HEAP32[$x>>2]|0;
 $sub54 = (($25) - ($26))|0;
 $27 = HEAP32[$y19>>2]|0;
 $28 = HEAP32[$y>>2]|0;
 $sub57 = (($27) - ($28))|0;
 $call58 = (_P_AproxDistance($sub54,$sub57)|0);
 $29 = HEAP32[$info>>2]|0;
 $speed60 = ((($29)) + 60|0);
 $30 = HEAP32[$speed60>>2]|0;
 $div = (($call58|0) / ($30|0))&-1;
 $31 = ($div|0)>(1);
 $spec$store$select = $31 ? $div : 1;
 $z64 = ((($11)) + 20|0);
 $32 = HEAP32[$z64>>2]|0;
 $add65 = (($32) + 2621440)|0;
 $33 = HEAP32[$z>>2]|0;
 $sub67 = (($add65) - ($33))|0;
 $div68 = (($sub67|0) / ($spec$store$select|0))&-1;
 $momz69 = ((($actor)) + 80|0);
 $34 = HEAP32[$momz69>>2]|0;
 $cmp70 = ($div68|0)<($34|0);
 $storemerge$v = $cmp70 ? -8192 : 8192;
 $storemerge = (($storemerge$v) + ($34))|0;
 HEAP32[$momz69>>2] = $storemerge;
 return;
}
function _A_SkelWhoosh($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$i = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $call$i = 0, $call10$i = 0, $call11$i = 0, $flags$i = 0, $flags6$i = 0, $shl$i = 0, $sub$i = 0;
 var $target = 0, $tobool = 0, $tobool8$i = 0, $x$i = 0, $x2$i = 0, $y$i = 0, $y4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target = ((($actor)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  return;
 }
 $flags$i = ((($actor)) + 104|0);
 $1 = HEAP32[$flags$i>>2]|0;
 $and$i = $1 & -33;
 HEAP32[$flags$i>>2] = $and$i;
 $x$i = ((($actor)) + 12|0);
 $2 = HEAP32[$x$i>>2]|0;
 $y$i = ((($actor)) + 16|0);
 $3 = HEAP32[$y$i>>2]|0;
 $x2$i = ((($0)) + 12|0);
 $4 = HEAP32[$x2$i>>2]|0;
 $y4$i = ((($0)) + 16|0);
 $5 = HEAP32[$y4$i>>2]|0;
 $call$i = (_R_PointToAngle2($2,$3,$4,$5)|0);
 $angle$i = ((($actor)) + 32|0);
 HEAP32[$angle$i>>2] = $call$i;
 $6 = HEAP32[$target>>2]|0;
 $flags6$i = ((($6)) + 104|0);
 $7 = HEAP32[$flags6$i>>2]|0;
 $and7$i = $7 & 262144;
 $tobool8$i = ($and7$i|0)==(0);
 if (!($tobool8$i)) {
  $call10$i = (_P_Random()|0);
  $call11$i = (_P_Random()|0);
  $sub$i = (($call10$i) - ($call11$i))|0;
  $shl$i = $sub$i << 21;
  $8 = HEAP32[$angle$i>>2]|0;
  $add$i = (($shl$i) + ($8))|0;
  HEAP32[$angle$i>>2] = $add$i;
 }
 _S_StartSound($actor,56);
 return;
}
function _A_SkelFist($actor) {
 $actor = $actor|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add$i = 0, $add$i15 = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $call$i = 0, $call$i14 = 0, $call10$i = 0, $call11$i = 0, $call3 = 0, $call8$i = 0, $cmp$i = 0, $flags$i = 0, $flags6$i = 0, $info$i = 0, $mul = 0, $radius$i = 0, $rem = 0, $shl$i = 0, $sub$i = 0;
 var $sub$i12 = 0, $sub4$i = 0, $target = 0, $tobool = 0, $tobool$i9 = 0, $tobool8$i = 0, $tobool9$i = 0, $x$i = 0, $x$i10 = 0, $x2$i = 0, $y$i = 0, $y$i13 = 0, $y4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target = ((($actor)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  return;
 }
 $flags$i = ((($actor)) + 104|0);
 $1 = HEAP32[$flags$i>>2]|0;
 $and$i = $1 & -33;
 HEAP32[$flags$i>>2] = $and$i;
 $x$i = ((($actor)) + 12|0);
 $2 = HEAP32[$x$i>>2]|0;
 $y$i = ((($actor)) + 16|0);
 $3 = HEAP32[$y$i>>2]|0;
 $x2$i = ((($0)) + 12|0);
 $4 = HEAP32[$x2$i>>2]|0;
 $y4$i = ((($0)) + 16|0);
 $5 = HEAP32[$y4$i>>2]|0;
 $call$i = (_R_PointToAngle2($2,$3,$4,$5)|0);
 $angle$i = ((($actor)) + 32|0);
 HEAP32[$angle$i>>2] = $call$i;
 $6 = HEAP32[$target>>2]|0;
 $flags6$i = ((($6)) + 104|0);
 $7 = HEAP32[$flags6$i>>2]|0;
 $and7$i = $7 & 262144;
 $tobool8$i = ($and7$i|0)==(0);
 if ($tobool8$i) {
  $9 = $6;
 } else {
  $call10$i = (_P_Random()|0);
  $call11$i = (_P_Random()|0);
  $sub$i = (($call10$i) - ($call11$i))|0;
  $shl$i = $sub$i << 21;
  $8 = HEAP32[$angle$i>>2]|0;
  $add$i = (($shl$i) + ($8))|0;
  HEAP32[$angle$i>>2] = $add$i;
  $$pr = HEAP32[$target>>2]|0;
  $9 = $$pr;
 }
 $tobool$i9 = ($9|0)==(0|0);
 if ($tobool$i9) {
  return;
 }
 $x$i10 = ((($9)) + 12|0);
 $10 = HEAP32[$x$i10>>2]|0;
 $11 = HEAP32[$x$i>>2]|0;
 $sub$i12 = (($10) - ($11))|0;
 $y$i13 = ((($9)) + 16|0);
 $12 = HEAP32[$y$i13>>2]|0;
 $13 = HEAP32[$y$i>>2]|0;
 $sub4$i = (($12) - ($13))|0;
 $call$i14 = (_P_AproxDistance($sub$i12,$sub4$i)|0);
 $info$i = ((($9)) + 92|0);
 $14 = HEAP32[$info$i>>2]|0;
 $radius$i = ((($14)) + 64|0);
 $15 = HEAP32[$radius$i>>2]|0;
 $add$i15 = (($15) + 2883584)|0;
 $cmp$i = ($call$i14|0)<($add$i15|0);
 if (!($cmp$i)) {
  return;
 }
 $16 = HEAP32[$target>>2]|0;
 $call8$i = (_P_CheckSight($actor,$16)|0);
 $tobool9$i = ($call8$i|0)==(0);
 if ($tobool9$i) {
  return;
 }
 $call3 = (_P_Random()|0);
 $rem = (($call3|0) % 10)&-1;
 $17 = ($rem*6)|0;
 $mul = (($17) + 6)|0;
 _S_StartSound($actor,53);
 $18 = HEAP32[$target>>2]|0;
 _P_DamageMobj($18,$actor,$actor,$mul);
 return;
}
function _PIT_VileCheck($thing) {
 $thing = $thing|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $call15 = 0, $cmp = 0;
 var $cmp10 = 0, $cmp3 = 0, $cmp7 = 0, $flags = 0, $height = 0, $height16 = 0, $info = 0, $ispos = 0, $ispos10 = 0, $momx = 0, $momy = 0, $neg = 0, $neg11 = 0, $radius = 0, $raisestate = 0, $retval$0 = 0, $shl = 0, $shr = 0, $sub = 0, $sub8 = 0;
 var $tics = 0, $tobool = 0, $tobool17 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $flags = ((($thing)) + 104|0);
 $0 = HEAP32[$flags>>2]|0;
 $and = $0 & 1048576;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $tics = ((($thing)) + 96|0);
 $1 = HEAP32[$tics>>2]|0;
 $cmp = ($1|0)==(-1);
 if (!($cmp)) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $info = ((($thing)) + 92|0);
 $2 = HEAP32[$info>>2]|0;
 $raisestate = ((($2)) + 88|0);
 $3 = HEAP32[$raisestate>>2]|0;
 $cmp3 = ($3|0)==(0);
 if ($cmp3) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $radius = ((($2)) + 64|0);
 $4 = HEAP32[$radius>>2]|0;
 $5 = HEAP32[(30916)>>2]|0;
 $add = (($5) + ($4))|0;
 $x = ((($thing)) + 12|0);
 $6 = HEAP32[$x>>2]|0;
 $7 = HEAP32[99407]|0;
 $sub = (($6) - ($7))|0;
 $ispos = ($sub|0)>(-1);
 $neg = (0 - ($sub))|0;
 $8 = $ispos ? $sub : $neg;
 $cmp7 = ($8|0)>($add|0);
 if ($cmp7) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $y = ((($thing)) + 16|0);
 $9 = HEAP32[$y>>2]|0;
 $10 = HEAP32[99408]|0;
 $sub8 = (($9) - ($10))|0;
 $ispos10 = ($sub8|0)>(-1);
 $neg11 = (0 - ($sub8))|0;
 $11 = $ispos10 ? $sub8 : $neg11;
 $cmp10 = ($11|0)>($add|0);
 if ($cmp10) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 HEAP32[99409] = $thing;
 $momy = ((($thing)) + 76|0);
 HEAP32[$momy>>2] = 0;
 $momx = ((($thing)) + 72|0);
 HEAP32[$momx>>2] = 0;
 $height = ((($thing)) + 68|0);
 $12 = HEAP32[$height>>2]|0;
 $shl = $12 << 2;
 HEAP32[$height>>2] = $shl;
 $call15 = (_P_CheckPosition($thing,$6,$9)|0);
 $13 = HEAP32[99409]|0;
 $height16 = ((($13)) + 68|0);
 $14 = HEAP32[$height16>>2]|0;
 $shr = $14 >> 2;
 HEAP32[$height16>>2] = $shr;
 $tobool17 = ($call15|0)==(0);
 $$ = $tobool17&1;
 $retval$0 = $$;
 return ($retval$0|0);
}
function _A_VileChase($actor) {
 $actor = $actor|0;
 var $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0, $add11 = 0, $add17 = 0, $add8 = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $arrayidx = 0, $arrayidx6 = 0, $bx$030 = 0, $by$028 = 0;
 var $call = 0, $call$i = 0, $call10$i = 0, $call11$i = 0, $cmp = 0, $cmp19 = 0, $cmp1929 = 0, $cmp21 = 0, $cmp2127 = 0, $flags = 0, $flags$i = 0, $flags29 = 0, $flags6$i = 0, $health = 0, $height = 0, $inc = 0, $inc32 = 0, $info1 = 0, $info27 = 0, $movedir = 0;
 var $mul = 0, $mul7 = 0, $or$cond = 0, $raisestate = 0, $shl = 0, $shl$i = 0, $shr = 0, $shr12 = 0, $shr15 = 0, $shr18 = 0, $spawnhealth = 0, $speed = 0, $sub = 0, $sub$i = 0, $sub13 = 0, $sub14 = 0, $sub9 = 0, $target = 0, $target30 = 0, $tobool = 0;
 var $tobool$i = 0, $tobool8$i = 0, $x = 0, $x2$i = 0, $y = 0, $y4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $movedir = ((($actor)) + 112|0);
 $0 = HEAP32[$movedir>>2]|0;
 $cmp = ($0|0)==(8);
 L1: do {
  if (!($cmp)) {
   $x = ((($actor)) + 12|0);
   $1 = HEAP32[$x>>2]|0;
   $info1 = ((($actor)) + 92|0);
   $2 = HEAP32[$info1>>2]|0;
   $speed = ((($2)) + 60|0);
   $3 = HEAP32[$speed>>2]|0;
   $arrayidx = (49328 + ($0<<2)|0);
   $4 = HEAP32[$arrayidx>>2]|0;
   $mul = Math_imul($4, $3)|0;
   $add = (($mul) + ($1))|0;
   HEAP32[99407] = $add;
   $y = ((($actor)) + 16|0);
   $5 = HEAP32[$y>>2]|0;
   $arrayidx6 = (49360 + ($0<<2)|0);
   $6 = HEAP32[$arrayidx6>>2]|0;
   $mul7 = Math_imul($6, $3)|0;
   $add8 = (($mul7) + ($5))|0;
   HEAP32[99408] = $add8;
   $7 = HEAP32[99512]|0;
   $sub = (($add) - ($7))|0;
   $sub9 = (($sub) + -4194304)|0;
   $shr = $sub9 >> 23;
   $add11 = (($sub) + 4194304)|0;
   $shr12 = $add11 >> 23;
   $8 = HEAP32[99513]|0;
   $sub13 = (($add8) - ($8))|0;
   $sub14 = (($sub13) + -4194304)|0;
   $shr15 = $sub14 >> 23;
   $add17 = (($sub13) + 4194304)|0;
   $shr18 = $add17 >> 23;
   HEAP32[99410] = $actor;
   $cmp1929 = ($shr|0)>($shr12|0);
   $cmp2127 = ($shr15|0)>($shr18|0);
   $or$cond = $cmp1929 | $cmp2127;
   if (!($or$cond)) {
    $bx$030 = $shr;
    L4: while(1) {
     $by$028 = $shr15;
     while(1) {
      $call = (_P_BlockThingsIterator($bx$030,$by$028,137)|0);
      $tobool = ($call|0)==(0);
      if ($tobool) {
       break L4;
      }
      $inc = (($by$028) + 1)|0;
      $cmp21 = ($by$028|0)<($shr18|0);
      if ($cmp21) {
       $by$028 = $inc;
      } else {
       break;
      }
     }
     $inc32 = (($bx$030) + 1)|0;
     $cmp19 = ($bx$030|0)<($shr12|0);
     if ($cmp19) {
      $bx$030 = $inc32;
     } else {
      break L1;
     }
    }
    $target = ((($actor)) + 120|0);
    $9 = HEAP32[$target>>2]|0;
    $10 = HEAP32[99409]|0;
    HEAP32[$target>>2] = $10;
    $$cast = $10;
    $tobool$i = ($10|0)==(0);
    if (!($tobool$i)) {
     $flags$i = ((($actor)) + 104|0);
     $11 = HEAP32[$flags$i>>2]|0;
     $and$i = $11 & -33;
     HEAP32[$flags$i>>2] = $and$i;
     $12 = HEAP32[$x>>2]|0;
     $13 = HEAP32[$y>>2]|0;
     $x2$i = ((($$cast)) + 12|0);
     $14 = HEAP32[$x2$i>>2]|0;
     $y4$i = ((($$cast)) + 16|0);
     $15 = HEAP32[$y4$i>>2]|0;
     $call$i = (_R_PointToAngle2($12,$13,$14,$15)|0);
     $angle$i = ((($actor)) + 32|0);
     HEAP32[$angle$i>>2] = $call$i;
     $16 = HEAP32[$target>>2]|0;
     $flags6$i = ((($16)) + 104|0);
     $17 = HEAP32[$flags6$i>>2]|0;
     $and7$i = $17 & 262144;
     $tobool8$i = ($and7$i|0)==(0);
     if (!($tobool8$i)) {
      $call10$i = (_P_Random()|0);
      $call11$i = (_P_Random()|0);
      $sub$i = (($call10$i) - ($call11$i))|0;
      $shl$i = $sub$i << 21;
      $18 = HEAP32[$angle$i>>2]|0;
      $add$i = (($shl$i) + ($18))|0;
      HEAP32[$angle$i>>2] = $add$i;
     }
    }
    HEAP32[$target>>2] = $9;
    (_P_SetMobjState($actor,266)|0);
    $19 = HEAP32[99409]|0;
    _S_StartSound($19,31);
    $20 = HEAP32[99409]|0;
    $info27 = ((($20)) + 92|0);
    $21 = HEAP32[$info27>>2]|0;
    $raisestate = ((($21)) + 88|0);
    $22 = HEAP32[$raisestate>>2]|0;
    (_P_SetMobjState($20,$22)|0);
    $23 = HEAP32[99409]|0;
    $height = ((($23)) + 68|0);
    $24 = HEAP32[$height>>2]|0;
    $shl = $24 << 2;
    HEAP32[$height>>2] = $shl;
    $flags = ((($21)) + 84|0);
    $25 = HEAP32[$flags>>2]|0;
    $flags29 = ((($23)) + 104|0);
    HEAP32[$flags29>>2] = $25;
    $spawnhealth = ((($21)) + 8|0);
    $26 = HEAP32[$spawnhealth>>2]|0;
    $health = ((($23)) + 108|0);
    HEAP32[$health>>2] = $26;
    $target30 = ((($23)) + 120|0);
    HEAP32[$target30>>2] = 0;
    return;
   }
  }
 } while(0);
 _A_Chase($actor);
 return;
}
function _A_VileStart($actor) {
 $actor = $actor|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _S_StartSound($actor,54);
 return;
}
function _A_StartFire($actor) {
 $actor = $actor|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _S_StartSound($actor,92);
 _A_Fire($actor);
 return;
}
function _A_Fire($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add = 0, $add10 = 0, $angle = 0, $arrayidx = 0, $arrayidx8 = 0, $call = 0, $call2 = 0, $call6 = 0, $call9 = 0, $shr = 0, $target1 = 0, $tobool = 0;
 var $tobool3 = 0, $tracer = 0, $x = 0, $x7 = 0, $y = 0, $y11 = 0, $z = 0, $z12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tracer = ((($actor)) + 152|0);
 $0 = HEAP32[$tracer>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  return;
 }
 $target1 = ((($actor)) + 120|0);
 $1 = HEAP32[$target1>>2]|0;
 $call = (_P_SubstNullMobj($1)|0);
 $call2 = (_P_CheckSight($call,$0)|0);
 $tobool3 = ($call2|0)==(0);
 if ($tobool3) {
  return;
 }
 $angle = ((($0)) + 32|0);
 $2 = HEAP32[$angle>>2]|0;
 $shr = $2 >>> 19;
 _P_UnsetThingPosition($actor);
 $x = ((($0)) + 12|0);
 $3 = HEAP32[$x>>2]|0;
 $arrayidx = ((82912) + ($shr<<2)|0);
 $4 = HEAP32[$arrayidx>>2]|0;
 $call6 = (_FixedMul(1572864,$4)|0);
 $add = (($call6) + ($3))|0;
 $x7 = ((($actor)) + 12|0);
 HEAP32[$x7>>2] = $add;
 $y = ((($0)) + 16|0);
 $5 = HEAP32[$y>>2]|0;
 $arrayidx8 = (74720 + ($shr<<2)|0);
 $6 = HEAP32[$arrayidx8>>2]|0;
 $call9 = (_FixedMul(1572864,$6)|0);
 $add10 = (($call9) + ($5))|0;
 $y11 = ((($actor)) + 16|0);
 HEAP32[$y11>>2] = $add10;
 $z = ((($0)) + 20|0);
 $7 = HEAP32[$z>>2]|0;
 $z12 = ((($actor)) + 20|0);
 HEAP32[$z12>>2] = $7;
 _P_SetThingPosition($actor);
 return;
}
function _A_FireCrackle($actor) {
 $actor = $actor|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _S_StartSound($actor,91);
 _A_Fire($actor);
 return;
}
function _A_VileTarget($actor) {
 $actor = $actor|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $call = 0, $call$i = 0;
 var $call10$i = 0, $call11$i = 0, $flags$i = 0, $flags6$i = 0, $shl$i = 0, $sub$i = 0, $target = 0, $target5 = 0, $tobool = 0, $tobool8$i = 0, $tracer = 0, $tracer7 = 0, $x = 0, $x$i = 0, $x2$i = 0, $y$i = 0, $y4$i = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target = ((($actor)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  return;
 }
 $flags$i = ((($actor)) + 104|0);
 $1 = HEAP32[$flags$i>>2]|0;
 $and$i = $1 & -33;
 HEAP32[$flags$i>>2] = $and$i;
 $x$i = ((($actor)) + 12|0);
 $2 = HEAP32[$x$i>>2]|0;
 $y$i = ((($actor)) + 16|0);
 $3 = HEAP32[$y$i>>2]|0;
 $x2$i = ((($0)) + 12|0);
 $4 = HEAP32[$x2$i>>2]|0;
 $y4$i = ((($0)) + 16|0);
 $5 = HEAP32[$y4$i>>2]|0;
 $call$i = (_R_PointToAngle2($2,$3,$4,$5)|0);
 $angle$i = ((($actor)) + 32|0);
 HEAP32[$angle$i>>2] = $call$i;
 $6 = HEAP32[$target>>2]|0;
 $flags6$i = ((($6)) + 104|0);
 $7 = HEAP32[$flags6$i>>2]|0;
 $and7$i = $7 & 262144;
 $tobool8$i = ($and7$i|0)==(0);
 if ($tobool8$i) {
  $9 = $6;
 } else {
  $call10$i = (_P_Random()|0);
  $call11$i = (_P_Random()|0);
  $sub$i = (($call10$i) - ($call11$i))|0;
  $shl$i = $sub$i << 21;
  $8 = HEAP32[$angle$i>>2]|0;
  $add$i = (($shl$i) + ($8))|0;
  HEAP32[$angle$i>>2] = $add$i;
  $$pre = HEAP32[$target>>2]|0;
  $9 = $$pre;
 }
 $x = ((($9)) + 12|0);
 $10 = HEAP32[$x>>2]|0;
 $z = ((($9)) + 20|0);
 $11 = HEAP32[$z>>2]|0;
 $call = (_P_SpawnMobj($10,$10,$11,4)|0);
 $tracer = ((($actor)) + 152|0);
 HEAP32[$tracer>>2] = $call;
 $target5 = ((($call)) + 120|0);
 HEAP32[$target5>>2] = $actor;
 $12 = HEAP32[$target>>2]|0;
 $tracer7 = ((($call)) + 152|0);
 HEAP32[$tracer7>>2] = $12;
 _A_Fire($call);
 return;
}
function _A_VileAttack($actor) {
 $actor = $actor|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add$i = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $arrayidx = 0, $arrayidx15 = 0, $call = 0, $call$i = 0, $call10$i = 0, $call11$i = 0, $call12 = 0, $call16 = 0, $div = 0, $flags$i = 0, $flags6$i = 0, $info = 0, $mass = 0, $momz = 0;
 var $shl$i = 0, $shr = 0, $sub = 0, $sub$i = 0, $sub17 = 0, $target = 0, $tobool = 0, $tobool2 = 0, $tobool8 = 0, $tobool8$i = 0, $tracer = 0, $x = 0, $x$i = 0, $x13 = 0, $x2$i = 0, $y = 0, $y$i = 0, $y18 = 0, $y4$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $target = ((($actor)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  return;
 }
 $flags$i = ((($actor)) + 104|0);
 $1 = HEAP32[$flags$i>>2]|0;
 $and$i = $1 & -33;
 HEAP32[$flags$i>>2] = $and$i;
 $x$i = ((($actor)) + 12|0);
 $2 = HEAP32[$x$i>>2]|0;
 $y$i = ((($actor)) + 16|0);
 $3 = HEAP32[$y$i>>2]|0;
 $x2$i = ((($0)) + 12|0);
 $4 = HEAP32[$x2$i>>2]|0;
 $y4$i = ((($0)) + 16|0);
 $5 = HEAP32[$y4$i>>2]|0;
 $call$i = (_R_PointToAngle2($2,$3,$4,$5)|0);
 $angle$i = ((($actor)) + 32|0);
 HEAP32[$angle$i>>2] = $call$i;
 $6 = HEAP32[$target>>2]|0;
 $flags6$i = ((($6)) + 104|0);
 $7 = HEAP32[$flags6$i>>2]|0;
 $and7$i = $7 & 262144;
 $tobool8$i = ($and7$i|0)==(0);
 if ($tobool8$i) {
  $9 = $6;
 } else {
  $call10$i = (_P_Random()|0);
  $call11$i = (_P_Random()|0);
  $sub$i = (($call10$i) - ($call11$i))|0;
  $shl$i = $sub$i << 21;
  $8 = HEAP32[$angle$i>>2]|0;
  $add$i = (($shl$i) + ($8))|0;
  HEAP32[$angle$i>>2] = $add$i;
  $$pre = HEAP32[$target>>2]|0;
  $9 = $$pre;
 }
 $call = (_P_CheckSight($actor,$9)|0);
 $tobool2 = ($call|0)==(0);
 if ($tobool2) {
  return;
 }
 _S_StartSound($actor,82);
 $10 = HEAP32[$target>>2]|0;
 _P_DamageMobj($10,$actor,$actor,20);
 $11 = HEAP32[$target>>2]|0;
 $info = ((($11)) + 92|0);
 $12 = HEAP32[$info>>2]|0;
 $mass = ((($12)) + 72|0);
 $13 = HEAP32[$mass>>2]|0;
 $div = (65536000 / ($13|0))&-1;
 $momz = ((($11)) + 80|0);
 HEAP32[$momz>>2] = $div;
 $14 = HEAP32[$angle$i>>2]|0;
 $shr = $14 >>> 19;
 $tracer = ((($actor)) + 152|0);
 $15 = HEAP32[$tracer>>2]|0;
 $tobool8 = ($15|0)==(0|0);
 if ($tobool8) {
  return;
 }
 $x = ((($11)) + 12|0);
 $16 = HEAP32[$x>>2]|0;
 $arrayidx = ((82912) + ($shr<<2)|0);
 $17 = HEAP32[$arrayidx>>2]|0;
 $call12 = (_FixedMul(1572864,$17)|0);
 $sub = (($16) - ($call12))|0;
 $x13 = ((($15)) + 12|0);
 HEAP32[$x13>>2] = $sub;
 $18 = HEAP32[$target>>2]|0;
 $y = ((($18)) + 16|0);
 $19 = HEAP32[$y>>2]|0;
 $arrayidx15 = (74720 + ($shr<<2)|0);
 $20 = HEAP32[$arrayidx15>>2]|0;
 $call16 = (_FixedMul(1572864,$20)|0);
 $sub17 = (($19) - ($call16))|0;
 $y18 = ((($15)) + 16|0);
 HEAP32[$y18>>2] = $sub17;
 _P_RadiusAttack($15,$actor,70);
 return;
}
function _A_FatRaise($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$i = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $call$i = 0, $call10$i = 0, $call11$i = 0, $flags$i = 0, $flags6$i = 0, $shl$i = 0, $sub$i = 0;
 var $target$i = 0, $tobool$i = 0, $tobool8$i = 0, $x$i = 0, $x2$i = 0, $y$i = 0, $y4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target$i = ((($actor)) + 120|0);
 $0 = HEAP32[$target$i>>2]|0;
 $tobool$i = ($0|0)==(0|0);
 if ($tobool$i) {
  _S_StartSound($actor,99);
  return;
 }
 $flags$i = ((($actor)) + 104|0);
 $1 = HEAP32[$flags$i>>2]|0;
 $and$i = $1 & -33;
 HEAP32[$flags$i>>2] = $and$i;
 $x$i = ((($actor)) + 12|0);
 $2 = HEAP32[$x$i>>2]|0;
 $y$i = ((($actor)) + 16|0);
 $3 = HEAP32[$y$i>>2]|0;
 $x2$i = ((($0)) + 12|0);
 $4 = HEAP32[$x2$i>>2]|0;
 $y4$i = ((($0)) + 16|0);
 $5 = HEAP32[$y4$i>>2]|0;
 $call$i = (_R_PointToAngle2($2,$3,$4,$5)|0);
 $angle$i = ((($actor)) + 32|0);
 HEAP32[$angle$i>>2] = $call$i;
 $6 = HEAP32[$target$i>>2]|0;
 $flags6$i = ((($6)) + 104|0);
 $7 = HEAP32[$flags6$i>>2]|0;
 $and7$i = $7 & 262144;
 $tobool8$i = ($and7$i|0)==(0);
 if ($tobool8$i) {
  _S_StartSound($actor,99);
  return;
 }
 $call10$i = (_P_Random()|0);
 $call11$i = (_P_Random()|0);
 $sub$i = (($call10$i) - ($call11$i))|0;
 $shl$i = $sub$i << 21;
 $8 = HEAP32[$angle$i>>2]|0;
 $add$i = (($shl$i) + ($8))|0;
 HEAP32[$angle$i>>2] = $add$i;
 _S_StartSound($actor,99);
 return;
}
function _A_FatAttack1($actor) {
 $actor = $actor|0;
 var $$pre = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add$i = 0, $add5 = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $angle$phi$trans$insert = 0, $angle$pre$phiZ2D = 0, $angle4 = 0, $arrayidx = 0, $arrayidx10 = 0, $call = 0, $call$i = 0, $call10$i = 0, $call11 = 0, $call11$i = 0, $call3 = 0, $call7 = 0, $flags$i = 0, $flags6$i = 0;
 var $info = 0, $momx = 0, $momy = 0, $shl$i = 0, $shr = 0, $speed = 0, $speed9 = 0, $sub$i = 0, $target$i = 0, $tobool$i = 0, $tobool8$i = 0, $x$i = 0, $x2$i = 0, $y$i = 0, $y4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target$i = ((($actor)) + 120|0);
 $0 = HEAP32[$target$i>>2]|0;
 $tobool$i = ($0|0)==(0|0);
 if ($tobool$i) {
  $angle$phi$trans$insert = ((($actor)) + 32|0);
  $$pre = HEAP32[$angle$phi$trans$insert>>2]|0;
  $10 = 0;$9 = $$pre;$angle$pre$phiZ2D = $angle$phi$trans$insert;
 } else {
  $flags$i = ((($actor)) + 104|0);
  $1 = HEAP32[$flags$i>>2]|0;
  $and$i = $1 & -33;
  HEAP32[$flags$i>>2] = $and$i;
  $x$i = ((($actor)) + 12|0);
  $2 = HEAP32[$x$i>>2]|0;
  $y$i = ((($actor)) + 16|0);
  $3 = HEAP32[$y$i>>2]|0;
  $x2$i = ((($0)) + 12|0);
  $4 = HEAP32[$x2$i>>2]|0;
  $y4$i = ((($0)) + 16|0);
  $5 = HEAP32[$y4$i>>2]|0;
  $call$i = (_R_PointToAngle2($2,$3,$4,$5)|0);
  $angle$i = ((($actor)) + 32|0);
  HEAP32[$angle$i>>2] = $call$i;
  $6 = HEAP32[$target$i>>2]|0;
  $flags6$i = ((($6)) + 104|0);
  $7 = HEAP32[$flags6$i>>2]|0;
  $and7$i = $7 & 262144;
  $tobool8$i = ($and7$i|0)==(0);
  if ($tobool8$i) {
   $10 = $6;$9 = $call$i;$angle$pre$phiZ2D = $angle$i;
  } else {
   $call10$i = (_P_Random()|0);
   $call11$i = (_P_Random()|0);
   $sub$i = (($call10$i) - ($call11$i))|0;
   $shl$i = $sub$i << 21;
   $8 = HEAP32[$angle$i>>2]|0;
   $add$i = (($shl$i) + ($8))|0;
   HEAP32[$angle$i>>2] = $add$i;
   $$pre15 = HEAP32[$target$i>>2]|0;
   $10 = $$pre15;$9 = $add$i;$angle$pre$phiZ2D = $angle$i;
  }
 }
 $add = (($9) + 134217728)|0;
 HEAP32[$angle$pre$phiZ2D>>2] = $add;
 $call = (_P_SubstNullMobj($10)|0);
 (_P_SpawnMissile($actor,$call,9)|0);
 $call3 = (_P_SpawnMissile($actor,$call,9)|0);
 $angle4 = ((($call3)) + 32|0);
 $11 = HEAP32[$angle4>>2]|0;
 $add5 = (($11) + 134217728)|0;
 HEAP32[$angle4>>2] = $add5;
 $shr = $add5 >>> 19;
 $info = ((($call3)) + 92|0);
 $12 = HEAP32[$info>>2]|0;
 $speed = ((($12)) + 60|0);
 $13 = HEAP32[$speed>>2]|0;
 $arrayidx = ((82912) + ($shr<<2)|0);
 $14 = HEAP32[$arrayidx>>2]|0;
 $call7 = (_FixedMul($13,$14)|0);
 $momx = ((($call3)) + 72|0);
 HEAP32[$momx>>2] = $call7;
 $15 = HEAP32[$info>>2]|0;
 $speed9 = ((($15)) + 60|0);
 $16 = HEAP32[$speed9>>2]|0;
 $arrayidx10 = (74720 + ($shr<<2)|0);
 $17 = HEAP32[$arrayidx10>>2]|0;
 $call11 = (_FixedMul($16,$17)|0);
 $momy = ((($call3)) + 76|0);
 HEAP32[$momy>>2] = $call11;
 return;
}
function _A_FatAttack2($actor) {
 $actor = $actor|0;
 var $$pre = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add$i = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $angle$phi$trans$insert = 0, $angle$pre$phiZ2D = 0, $angle4 = 0, $arrayidx = 0, $arrayidx10 = 0, $call = 0, $call$i = 0, $call10$i = 0, $call11 = 0, $call11$i = 0, $call3 = 0, $call7 = 0, $flags$i = 0, $flags6$i = 0, $info = 0, $momx = 0;
 var $momy = 0, $shl$i = 0, $shr = 0, $speed = 0, $speed9 = 0, $sub = 0, $sub$i = 0, $sub5 = 0, $target$i = 0, $tobool$i = 0, $tobool8$i = 0, $x$i = 0, $x2$i = 0, $y$i = 0, $y4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target$i = ((($actor)) + 120|0);
 $0 = HEAP32[$target$i>>2]|0;
 $tobool$i = ($0|0)==(0|0);
 if ($tobool$i) {
  $angle$phi$trans$insert = ((($actor)) + 32|0);
  $$pre = HEAP32[$angle$phi$trans$insert>>2]|0;
  $10 = 0;$9 = $$pre;$angle$pre$phiZ2D = $angle$phi$trans$insert;
 } else {
  $flags$i = ((($actor)) + 104|0);
  $1 = HEAP32[$flags$i>>2]|0;
  $and$i = $1 & -33;
  HEAP32[$flags$i>>2] = $and$i;
  $x$i = ((($actor)) + 12|0);
  $2 = HEAP32[$x$i>>2]|0;
  $y$i = ((($actor)) + 16|0);
  $3 = HEAP32[$y$i>>2]|0;
  $x2$i = ((($0)) + 12|0);
  $4 = HEAP32[$x2$i>>2]|0;
  $y4$i = ((($0)) + 16|0);
  $5 = HEAP32[$y4$i>>2]|0;
  $call$i = (_R_PointToAngle2($2,$3,$4,$5)|0);
  $angle$i = ((($actor)) + 32|0);
  HEAP32[$angle$i>>2] = $call$i;
  $6 = HEAP32[$target$i>>2]|0;
  $flags6$i = ((($6)) + 104|0);
  $7 = HEAP32[$flags6$i>>2]|0;
  $and7$i = $7 & 262144;
  $tobool8$i = ($and7$i|0)==(0);
  if ($tobool8$i) {
   $10 = $6;$9 = $call$i;$angle$pre$phiZ2D = $angle$i;
  } else {
   $call10$i = (_P_Random()|0);
   $call11$i = (_P_Random()|0);
   $sub$i = (($call10$i) - ($call11$i))|0;
   $shl$i = $sub$i << 21;
   $8 = HEAP32[$angle$i>>2]|0;
   $add$i = (($shl$i) + ($8))|0;
   HEAP32[$angle$i>>2] = $add$i;
   $$pre15 = HEAP32[$target$i>>2]|0;
   $10 = $$pre15;$9 = $add$i;$angle$pre$phiZ2D = $angle$i;
  }
 }
 $sub = (($9) + -134217728)|0;
 HEAP32[$angle$pre$phiZ2D>>2] = $sub;
 $call = (_P_SubstNullMobj($10)|0);
 (_P_SpawnMissile($actor,$call,9)|0);
 $call3 = (_P_SpawnMissile($actor,$call,9)|0);
 $angle4 = ((($call3)) + 32|0);
 $11 = HEAP32[$angle4>>2]|0;
 $sub5 = (($11) + -268435456)|0;
 HEAP32[$angle4>>2] = $sub5;
 $shr = $sub5 >>> 19;
 $info = ((($call3)) + 92|0);
 $12 = HEAP32[$info>>2]|0;
 $speed = ((($12)) + 60|0);
 $13 = HEAP32[$speed>>2]|0;
 $arrayidx = ((82912) + ($shr<<2)|0);
 $14 = HEAP32[$arrayidx>>2]|0;
 $call7 = (_FixedMul($13,$14)|0);
 $momx = ((($call3)) + 72|0);
 HEAP32[$momx>>2] = $call7;
 $15 = HEAP32[$info>>2]|0;
 $speed9 = ((($15)) + 60|0);
 $16 = HEAP32[$speed9>>2]|0;
 $arrayidx10 = (74720 + ($shr<<2)|0);
 $17 = HEAP32[$arrayidx10>>2]|0;
 $call11 = (_FixedMul($16,$17)|0);
 $momy = ((($call3)) + 76|0);
 HEAP32[$momy>>2] = $call11;
 return;
}
function _A_FatAttack3($actor) {
 $actor = $actor|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0, $and$i = 0, $and7$i = 0, $angle = 0, $angle$i = 0, $angle10 = 0, $arrayidx = 0, $arrayidx15 = 0, $arrayidx20 = 0, $arrayidx7 = 0, $call = 0, $call$i = 0, $call10$i = 0, $call11$i = 0;
 var $call16 = 0, $call2 = 0, $call21 = 0, $call4 = 0, $call8 = 0, $call9 = 0, $flags$i = 0, $flags6$i = 0, $info = 0, $info13 = 0, $momx = 0, $momx17 = 0, $momy = 0, $momy22 = 0, $shl$i = 0, $shr = 0, $shr12 = 0, $speed = 0, $speed14 = 0, $speed19 = 0;
 var $speed6 = 0, $sub = 0, $sub$i = 0, $target$i = 0, $tobool$i = 0, $tobool8$i = 0, $x$i = 0, $x2$i = 0, $y$i = 0, $y4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target$i = ((($actor)) + 120|0);
 $0 = HEAP32[$target$i>>2]|0;
 $tobool$i = ($0|0)==(0|0);
 if ($tobool$i) {
  $9 = 0;
 } else {
  $flags$i = ((($actor)) + 104|0);
  $1 = HEAP32[$flags$i>>2]|0;
  $and$i = $1 & -33;
  HEAP32[$flags$i>>2] = $and$i;
  $x$i = ((($actor)) + 12|0);
  $2 = HEAP32[$x$i>>2]|0;
  $y$i = ((($actor)) + 16|0);
  $3 = HEAP32[$y$i>>2]|0;
  $x2$i = ((($0)) + 12|0);
  $4 = HEAP32[$x2$i>>2]|0;
  $y4$i = ((($0)) + 16|0);
  $5 = HEAP32[$y4$i>>2]|0;
  $call$i = (_R_PointToAngle2($2,$3,$4,$5)|0);
  $angle$i = ((($actor)) + 32|0);
  HEAP32[$angle$i>>2] = $call$i;
  $6 = HEAP32[$target$i>>2]|0;
  $flags6$i = ((($6)) + 104|0);
  $7 = HEAP32[$flags6$i>>2]|0;
  $and7$i = $7 & 262144;
  $tobool8$i = ($and7$i|0)==(0);
  if ($tobool8$i) {
   $9 = $6;
  } else {
   $call10$i = (_P_Random()|0);
   $call11$i = (_P_Random()|0);
   $sub$i = (($call10$i) - ($call11$i))|0;
   $shl$i = $sub$i << 21;
   $8 = HEAP32[$angle$i>>2]|0;
   $add$i = (($shl$i) + ($8))|0;
   HEAP32[$angle$i>>2] = $add$i;
   $$pre = HEAP32[$target$i>>2]|0;
   $9 = $$pre;
  }
 }
 $call = (_P_SubstNullMobj($9)|0);
 $call2 = (_P_SpawnMissile($actor,$call,9)|0);
 $angle = ((($call2)) + 32|0);
 $10 = HEAP32[$angle>>2]|0;
 $sub = (($10) + -67108864)|0;
 HEAP32[$angle>>2] = $sub;
 $shr = $sub >>> 19;
 $info = ((($call2)) + 92|0);
 $11 = HEAP32[$info>>2]|0;
 $speed = ((($11)) + 60|0);
 $12 = HEAP32[$speed>>2]|0;
 $arrayidx = ((82912) + ($shr<<2)|0);
 $13 = HEAP32[$arrayidx>>2]|0;
 $call4 = (_FixedMul($12,$13)|0);
 $momx = ((($call2)) + 72|0);
 HEAP32[$momx>>2] = $call4;
 $14 = HEAP32[$info>>2]|0;
 $speed6 = ((($14)) + 60|0);
 $15 = HEAP32[$speed6>>2]|0;
 $arrayidx7 = (74720 + ($shr<<2)|0);
 $16 = HEAP32[$arrayidx7>>2]|0;
 $call8 = (_FixedMul($15,$16)|0);
 $momy = ((($call2)) + 76|0);
 HEAP32[$momy>>2] = $call8;
 $call9 = (_P_SpawnMissile($actor,$call,9)|0);
 $angle10 = ((($call9)) + 32|0);
 $17 = HEAP32[$angle10>>2]|0;
 $add = (($17) + 67108864)|0;
 HEAP32[$angle10>>2] = $add;
 $shr12 = $add >>> 19;
 $info13 = ((($call9)) + 92|0);
 $18 = HEAP32[$info13>>2]|0;
 $speed14 = ((($18)) + 60|0);
 $19 = HEAP32[$speed14>>2]|0;
 $arrayidx15 = ((82912) + ($shr12<<2)|0);
 $20 = HEAP32[$arrayidx15>>2]|0;
 $call16 = (_FixedMul($19,$20)|0);
 $momx17 = ((($call9)) + 72|0);
 HEAP32[$momx17>>2] = $call16;
 $21 = HEAP32[$info13>>2]|0;
 $speed19 = ((($21)) + 60|0);
 $22 = HEAP32[$speed19>>2]|0;
 $arrayidx20 = (74720 + ($shr12<<2)|0);
 $23 = HEAP32[$arrayidx20>>2]|0;
 $call21 = (_FixedMul($22,$23)|0);
 $momy22 = ((($call9)) + 76|0);
 HEAP32[$momy22>>2] = $call21;
 return;
}
function _A_SkullAttack($actor) {
 $actor = $actor|0;
 var $$pre = 0, $$pre22 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $angle$phi$trans$insert = 0, $arrayidx = 0, $arrayidx2 = 0, $attacksound = 0, $call = 0, $call$i = 0, $call10$i = 0, $call11$i = 0;
 var $call3 = 0, $call7 = 0, $div = 0, $div13 = 0, $flags = 0, $flags6$i = 0, $height = 0, $info = 0, $momx = 0, $momy = 0, $momz = 0, $or = 0, $shl$i = 0, $shr = 0, $shr10 = 0, $spec$store$select = 0, $sub = 0, $sub$i = 0, $sub12 = 0, $sub6 = 0;
 var $target = 0, $tobool = 0, $tobool$i = 0, $tobool8$i = 0, $x = 0, $x$i = 0, $x2$i = 0, $x4$pre$phiZ2D = 0, $y = 0, $y$i = 0, $y4$i = 0, $y5$pre$phiZ2D = 0, $z = 0, $z11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target = ((($actor)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  return;
 }
 $flags = ((($actor)) + 104|0);
 $1 = HEAP32[$flags>>2]|0;
 $or = $1 | 16777216;
 HEAP32[$flags>>2] = $or;
 $info = ((($actor)) + 92|0);
 $2 = HEAP32[$info>>2]|0;
 $attacksound = ((($2)) + 24|0);
 $3 = HEAP32[$attacksound>>2]|0;
 _S_StartSound($actor,$3);
 $4 = HEAP32[$target>>2]|0;
 $tobool$i = ($4|0)==(0|0);
 if ($tobool$i) {
  $angle$phi$trans$insert = ((($actor)) + 32|0);
  $$pre = HEAP32[$angle$phi$trans$insert>>2]|0;
  $$pre22 = ((($actor)) + 12|0);
  $$pre23 = ((($actor)) + 16|0);
  $13 = $$pre;$x4$pre$phiZ2D = $$pre22;$y5$pre$phiZ2D = $$pre23;
 } else {
  $5 = HEAP32[$flags>>2]|0;
  $and$i = $5 & -33;
  HEAP32[$flags>>2] = $and$i;
  $x$i = ((($actor)) + 12|0);
  $6 = HEAP32[$x$i>>2]|0;
  $y$i = ((($actor)) + 16|0);
  $7 = HEAP32[$y$i>>2]|0;
  $x2$i = ((($4)) + 12|0);
  $8 = HEAP32[$x2$i>>2]|0;
  $y4$i = ((($4)) + 16|0);
  $9 = HEAP32[$y4$i>>2]|0;
  $call$i = (_R_PointToAngle2($6,$7,$8,$9)|0);
  $angle$i = ((($actor)) + 32|0);
  HEAP32[$angle$i>>2] = $call$i;
  $10 = HEAP32[$target>>2]|0;
  $flags6$i = ((($10)) + 104|0);
  $11 = HEAP32[$flags6$i>>2]|0;
  $and7$i = $11 & 262144;
  $tobool8$i = ($and7$i|0)==(0);
  if ($tobool8$i) {
   $13 = $call$i;$x4$pre$phiZ2D = $x$i;$y5$pre$phiZ2D = $y$i;
  } else {
   $call10$i = (_P_Random()|0);
   $call11$i = (_P_Random()|0);
   $sub$i = (($call10$i) - ($call11$i))|0;
   $shl$i = $sub$i << 21;
   $12 = HEAP32[$angle$i>>2]|0;
   $add$i = (($shl$i) + ($12))|0;
   HEAP32[$angle$i>>2] = $add$i;
   $13 = $add$i;$x4$pre$phiZ2D = $x$i;$y5$pre$phiZ2D = $y$i;
  }
 }
 $shr = $13 >>> 19;
 $arrayidx = ((82912) + ($shr<<2)|0);
 $14 = HEAP32[$arrayidx>>2]|0;
 $call = (_FixedMul(1310720,$14)|0);
 $momx = ((($actor)) + 72|0);
 HEAP32[$momx>>2] = $call;
 $arrayidx2 = (74720 + ($shr<<2)|0);
 $15 = HEAP32[$arrayidx2>>2]|0;
 $call3 = (_FixedMul(1310720,$15)|0);
 $momy = ((($actor)) + 76|0);
 HEAP32[$momy>>2] = $call3;
 $x = ((($0)) + 12|0);
 $16 = HEAP32[$x>>2]|0;
 $17 = HEAP32[$x4$pre$phiZ2D>>2]|0;
 $sub = (($16) - ($17))|0;
 $y = ((($0)) + 16|0);
 $18 = HEAP32[$y>>2]|0;
 $19 = HEAP32[$y5$pre$phiZ2D>>2]|0;
 $sub6 = (($18) - ($19))|0;
 $call7 = (_P_AproxDistance($sub,$sub6)|0);
 $div = (($call7|0) / 1310720)&-1;
 $20 = ($div|0)>(1);
 $spec$store$select = $20 ? $div : 1;
 $z = ((($0)) + 20|0);
 $21 = HEAP32[$z>>2]|0;
 $height = ((($0)) + 68|0);
 $22 = HEAP32[$height>>2]|0;
 $shr10 = $22 >> 1;
 $add = (($shr10) + ($21))|0;
 $z11 = ((($actor)) + 20|0);
 $23 = HEAP32[$z11>>2]|0;
 $sub12 = (($add) - ($23))|0;
 $div13 = (($sub12|0) / ($spec$store$select|0))&-1;
 $momz = ((($actor)) + 80|0);
 HEAP32[$momz>>2] = $div13;
 return;
}
function _A_PainShootSkull($actor,$angle) {
 $actor = $actor|0;
 $angle = $angle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add12 = 0, $add14 = 0, $add6 = 0, $add8 = 0, $arrayidx = 0, $arrayidx10 = 0;
 var $call = 0, $call11 = 0, $call15 = 0, $call18 = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $cmp27 = 0, $cmp3 = 0, $count$028 = 0, $count$1 = 0, $currentthinker$0 = 0, $currentthinker$026 = 0, $currentthinker$029 = 0, $div = 0, $function = 0, $inc = 0, $info = 0, $mul = 0, $next = 0;
 var $radius = 0, $shr = 0, $spec$select = 0, $target = 0, $target21 = 0, $tobool = 0, $type = 0, $x16 = 0, $x7 = 0, $y17 = 0, $y9 = 0, $z13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $currentthinker$026 = HEAP32[(398220)>>2]|0;
 $cmp27 = ($currentthinker$026|0)==(398216|0);
 if (!($cmp27)) {
  $count$028 = 0;$currentthinker$029 = $currentthinker$026;
  while(1) {
   $function = ((($currentthinker$029)) + 8|0);
   $0 = HEAP32[$function>>2]|0;
   $cmp1 = ($0|0)==(136|0);
   if ($cmp1) {
    $type = ((($currentthinker$029)) + 88|0);
    $1 = HEAP32[$type>>2]|0;
    $cmp2 = ($1|0)==(18);
    $inc = $cmp2&1;
    $spec$select = (($count$028) + ($inc))|0;
    $count$1 = $spec$select;
   } else {
    $count$1 = $count$028;
   }
   $next = ((($currentthinker$029)) + 4|0);
   $currentthinker$0 = HEAP32[$next>>2]|0;
   $cmp = ($currentthinker$0|0)==(398216|0);
   if ($cmp) {
    break;
   } else {
    $count$028 = $count$1;$currentthinker$029 = $currentthinker$0;
   }
  }
  $cmp3 = ($count$1|0)>(20);
  if ($cmp3) {
   return;
  }
 }
 $shr = $angle >>> 19;
 $info = ((($actor)) + 92|0);
 $2 = HEAP32[$info>>2]|0;
 $radius = ((($2)) + 64|0);
 $3 = HEAP32[$radius>>2]|0;
 $4 = HEAP32[(32296)>>2]|0;
 $add = (($4) + ($3))|0;
 $mul = ($add*3)|0;
 $div = (($mul|0) / 2)&-1;
 $add6 = (($div) + 262144)|0;
 $x7 = ((($actor)) + 12|0);
 $5 = HEAP32[$x7>>2]|0;
 $arrayidx = ((82912) + ($shr<<2)|0);
 $6 = HEAP32[$arrayidx>>2]|0;
 $call = (_FixedMul($add6,$6)|0);
 $add8 = (($call) + ($5))|0;
 $y9 = ((($actor)) + 16|0);
 $7 = HEAP32[$y9>>2]|0;
 $arrayidx10 = (74720 + ($shr<<2)|0);
 $8 = HEAP32[$arrayidx10>>2]|0;
 $call11 = (_FixedMul($add6,$8)|0);
 $add12 = (($call11) + ($7))|0;
 $z13 = ((($actor)) + 20|0);
 $9 = HEAP32[$z13>>2]|0;
 $add14 = (($9) + 524288)|0;
 $call15 = (_P_SpawnMobj($add8,$add12,$add14,18)|0);
 $x16 = ((($call15)) + 12|0);
 $10 = HEAP32[$x16>>2]|0;
 $y17 = ((($call15)) + 16|0);
 $11 = HEAP32[$y17>>2]|0;
 $call18 = (_P_TryMove($call15,$10,$11)|0);
 $tobool = ($call18|0)==(0);
 if ($tobool) {
  _P_DamageMobj($call15,$actor,$actor,10000);
  return;
 } else {
  $target = ((($actor)) + 120|0);
  $12 = HEAP32[$target>>2]|0;
  $target21 = ((($call15)) + 120|0);
  HEAP32[$target21>>2] = $12;
  _A_SkullAttack($call15);
  return;
 }
}
function _A_PainAttack($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $and$i = 0, $and7$i = 0, $angle$i = 0, $call$i = 0, $call10$i = 0, $call11$i = 0, $flags$i = 0, $flags6$i = 0, $shl$i = 0;
 var $sub$i = 0, $target = 0, $tobool = 0, $tobool8$i = 0, $x$i = 0, $x2$i = 0, $y$i = 0, $y4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target = ((($actor)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  return;
 }
 $flags$i = ((($actor)) + 104|0);
 $1 = HEAP32[$flags$i>>2]|0;
 $and$i = $1 & -33;
 HEAP32[$flags$i>>2] = $and$i;
 $x$i = ((($actor)) + 12|0);
 $2 = HEAP32[$x$i>>2]|0;
 $y$i = ((($actor)) + 16|0);
 $3 = HEAP32[$y$i>>2]|0;
 $x2$i = ((($0)) + 12|0);
 $4 = HEAP32[$x2$i>>2]|0;
 $y4$i = ((($0)) + 16|0);
 $5 = HEAP32[$y4$i>>2]|0;
 $call$i = (_R_PointToAngle2($2,$3,$4,$5)|0);
 $angle$i = ((($actor)) + 32|0);
 HEAP32[$angle$i>>2] = $call$i;
 $6 = HEAP32[$target>>2]|0;
 $flags6$i = ((($6)) + 104|0);
 $7 = HEAP32[$flags6$i>>2]|0;
 $and7$i = $7 & 262144;
 $tobool8$i = ($and7$i|0)==(0);
 if ($tobool8$i) {
  $9 = $call$i;
 } else {
  $call10$i = (_P_Random()|0);
  $call11$i = (_P_Random()|0);
  $sub$i = (($call10$i) - ($call11$i))|0;
  $shl$i = $sub$i << 21;
  $8 = HEAP32[$angle$i>>2]|0;
  $add$i = (($shl$i) + ($8))|0;
  HEAP32[$angle$i>>2] = $add$i;
  $9 = $add$i;
 }
 _A_PainShootSkull($actor,$9);
 return;
}
function _A_PainDie($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0, $add2 = 0, $add4 = 0, $and$i = 0, $angle = 0, $flags$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $flags$i = ((($actor)) + 104|0);
 $0 = HEAP32[$flags$i>>2]|0;
 $and$i = $0 & -3;
 HEAP32[$flags$i>>2] = $and$i;
 $angle = ((($actor)) + 32|0);
 $1 = HEAP32[$angle>>2]|0;
 $add = (($1) + 1073741824)|0;
 _A_PainShootSkull($actor,$add);
 $2 = HEAP32[$angle>>2]|0;
 $add2 = $2 ^ -2147483648;
 _A_PainShootSkull($actor,$add2);
 $3 = HEAP32[$angle>>2]|0;
 $add4 = (($3) + -1073741824)|0;
 _A_PainShootSkull($actor,$add4);
 return;
}
function _A_Scream($actor) {
 $actor = $actor|0;
 var $$sink = 0, $$sink7 = 0, $0 = 0, $1 = 0, $2 = 0, $add5 = 0, $call3 = 0, $deathsound = 0, $info = 0, $rem4 = 0, $sound$0 = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $info = ((($actor)) + 92|0);
 $0 = HEAP32[$info>>2]|0;
 $deathsound = ((($0)) + 56|0);
 $1 = HEAP32[$deathsound>>2]|0;
 switch ($1|0) {
 case 61: case 60: case 59:  {
  $$sink = 59;$$sink7 = 3;
  label = 3;
  break;
 }
 case 63: case 62:  {
  $$sink = 62;$$sink7 = 2;
  label = 3;
  break;
 }
 case 0:  {
  return;
  break;
 }
 default: {
  $sound$0 = $1;
 }
 }
 if ((label|0) == 3) {
  $call3 = (_P_Random()|0);
  $rem4 = (($call3|0) % ($$sink7|0))&-1;
  $add5 = (($rem4) + ($$sink))|0;
  $sound$0 = $add5;
 }
 $type = ((($actor)) + 88|0);
 $2 = HEAP32[$type>>2]|0;
 switch ($2|0) {
 case 21: case 19:  {
  _S_StartSound(0,$sound$0);
  return;
  break;
 }
 default: {
  _S_StartSound($actor,$sound$0);
  return;
 }
 }
}
function _A_XScream($actor) {
 $actor = $actor|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _S_StartSound($actor,31);
 return;
}
function _A_Pain($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $info = 0, $painsound = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $info = ((($actor)) + 92|0);
 $0 = HEAP32[$info>>2]|0;
 $painsound = ((($0)) + 36|0);
 $1 = HEAP32[$painsound>>2]|0;
 $tobool = ($1|0)==(0);
 if ($tobool) {
  return;
 }
 _S_StartSound($actor,$1);
 return;
}
function _A_Explode($thingy) {
 $thingy = $thingy|0;
 var $0 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $target = ((($thingy)) + 120|0);
 $0 = HEAP32[$target>>2]|0;
 _P_RadiusAttack($thingy,$0,128);
 return;
}
function _A_BossDeath($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp$i = 0, $cmp1 = 0, $cmp1$i = 0, $cmp10$i = 0, $cmp12$i = 0, $cmp16 = 0, $cmp16$1 = 0, $cmp16$2 = 0;
 var $cmp16$3 = 0, $cmp16$i = 0, $cmp18$i = 0, $cmp22$i = 0, $cmp23 = 0, $cmp2323 = 0, $cmp24$i = 0, $cmp25 = 0, $cmp25$i = 0, $cmp27$i = 0, $cmp28 = 0, $cmp3$i = 0, $cmp30$i = 0, $cmp32 = 0, $cmp35 = 0, $cmp4$i = 0, $cmp42 = 0, $cmp7$i = 0, $cmp8$i = 0, $function = 0;
 var $health34 = 0, $junk = 0, $narrow$i = 0, $next = 0, $not$or$cond$i = 0, $or$cond = 0, $or$cond1$i = 0, $or$cond26 = 0, $or$cond27 = 0, $or$cond28 = 0, $or$cond29 = 0, $tag = 0, $tag52 = 0, $tag57 = 0, $tag61 = 0, $tag64 = 0, $th$0 = 0, $th$022 = 0, $th$024 = 0, $tobool13 = 0;
 var $tobool13$1 = 0, $tobool13$2 = 0, $tobool13$3 = 0, $type = 0, $type30 = 0, $type8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $junk = sp;
 $0 = HEAP32[32140]|0;
 $cmp = ($0|0)==(2);
 L1: do {
  if ($cmp) {
   $1 = HEAP32[99084]|0;
   $cmp1 = ($1|0)==(7);
   if (!($cmp1)) {
    STACKTOP = sp;return;
   }
   $type = ((($mo)) + 88|0);
   $2 = HEAP32[$type>>2]|0;
   switch ($2|0) {
   case 20: case 8:  {
    $23 = $2;$25 = 7;
    break L1;
    break;
   }
   default: {
   }
   }
   STACKTOP = sp;return;
  } else {
   $type8 = ((($mo)) + 88|0);
   $3 = HEAP32[$type8>>2]|0;
   $4 = HEAP32[32141]|0;
   $cmp$i = ($4>>>0)<(6);
   if ($cmp$i) {
    $5 = HEAP32[99084]|0;
    $cmp1$i = ($5|0)==(8);
    if (!($cmp1$i)) {
     STACKTOP = sp;return;
    }
    $cmp3$i = ($3|0)!=(15);
    $16 = HEAP32[99085]|0;
    $cmp4$i = ($16|0)==(1);
    $not$or$cond$i = $cmp3$i | $cmp4$i;
    if ($not$or$cond$i) {
     $23 = $3;$25 = 8;
     break;
    }
    STACKTOP = sp;return;
   }
   $6 = HEAP32[99085]|0;
   switch ($6|0) {
   case 1:  {
    $7 = HEAP32[99084]|0;
    $cmp7$i = ($7|0)==(8);
    $cmp8$i = ($3|0)==(15);
    $8 = $cmp8$i & $cmp7$i;
    if ($8) {
     $23 = 15;$25 = 8;
     break L1;
    }
    STACKTOP = sp;return;
    break;
   }
   case 2:  {
    $9 = HEAP32[99084]|0;
    $cmp10$i = ($9|0)==(8);
    $cmp12$i = ($3|0)==(21);
    $10 = $cmp12$i & $cmp10$i;
    if ($10) {
     $23 = 21;$25 = 8;
     break L1;
    }
    STACKTOP = sp;return;
    break;
   }
   case 3:  {
    $11 = HEAP32[99084]|0;
    $cmp16$i = ($11|0)==(8);
    $cmp18$i = ($3|0)==(19);
    $12 = $cmp18$i & $cmp16$i;
    if ($12) {
     $23 = 19;$25 = 8;
     break L1;
    }
    STACKTOP = sp;return;
    break;
   }
   case 4:  {
    $13 = HEAP32[99084]|0;
    $cmp22$i = ($13|0)==(6);
    $cmp24$i = ($3|0)==(21);
    $or$cond1$i = $cmp24$i & $cmp22$i;
    $cmp25$i = ($13|0)==(8);
    $cmp27$i = ($3|0)==(19);
    $14 = $cmp27$i & $cmp25$i;
    $narrow$i = $or$cond1$i | $14;
    if ($narrow$i) {
     $23 = $3;$25 = $13;
     break L1;
    }
    STACKTOP = sp;return;
    break;
   }
   default: {
    $15 = HEAP32[99084]|0;
    $cmp30$i = ($15|0)==(8);
    if ($cmp30$i) {
     $23 = $3;$25 = 8;
     break L1;
    }
    STACKTOP = sp;return;
   }
   }
  }
 } while(0);
 $17 = HEAP32[45416]|0;
 $tobool13 = ($17|0)!=(0);
 $18 = HEAP32[(181720)>>2]|0;
 $cmp16 = ($18|0)>(0);
 $or$cond26 = $tobool13 & $cmp16;
 if (!($or$cond26)) {
  $19 = HEAP32[(181668)>>2]|0;
  $tobool13$1 = ($19|0)!=(0);
  $20 = HEAP32[(182008)>>2]|0;
  $cmp16$1 = ($20|0)>(0);
  $or$cond27 = $tobool13$1 & $cmp16$1;
  if (!($or$cond27)) {
   $27 = HEAP32[(181672)>>2]|0;
   $tobool13$2 = ($27|0)!=(0);
   $28 = HEAP32[(182296)>>2]|0;
   $cmp16$2 = ($28|0)>(0);
   $or$cond28 = $tobool13$2 & $cmp16$2;
   if (!($or$cond28)) {
    $29 = HEAP32[(181676)>>2]|0;
    $tobool13$3 = ($29|0)!=(0);
    $30 = HEAP32[(182584)>>2]|0;
    $cmp16$3 = ($30|0)>(0);
    $or$cond29 = $tobool13$3 & $cmp16$3;
    if (!($or$cond29)) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $th$022 = HEAP32[(398220)>>2]|0;
 $cmp2323 = ($th$022|0)==(398216|0);
 L33: do {
  if (!($cmp2323)) {
   $th$024 = $th$022;
   while(1) {
    $function = ((($th$024)) + 8|0);
    $21 = HEAP32[$function>>2]|0;
    $cmp25 = ($21|0)!=(136|0);
    $cmp28 = ($th$024|0)==($mo|0);
    $or$cond = $cmp28 | $cmp25;
    if (!($or$cond)) {
     $type30 = ((($th$024)) + 88|0);
     $22 = HEAP32[$type30>>2]|0;
     $cmp32 = ($22|0)==($23|0);
     if ($cmp32) {
      $health34 = ((($th$024)) + 108|0);
      $24 = HEAP32[$health34>>2]|0;
      $cmp35 = ($24|0)>(0);
      if ($cmp35) {
       break;
      }
     }
    }
    $next = ((($th$024)) + 4|0);
    $th$0 = HEAP32[$next>>2]|0;
    $cmp23 = ($th$0|0)==(398216|0);
    if ($cmp23) {
     break L33;
    } else {
     $th$024 = $th$0;
    }
   }
   STACKTOP = sp;return;
  }
 } while(0);
 L43: do {
  if ($cmp) {
   $cmp42 = ($25|0)==(7);
   if ($cmp42) {
    switch ($23|0) {
    case 8:  {
     $tag = ((($junk)) + 20|0);
     HEAP16[$tag>>1] = 666;
     (_EV_DoFloor($junk,1)|0);
     STACKTOP = sp;return;
     break;
    }
    case 20:  {
     $tag52 = ((($junk)) + 20|0);
     HEAP16[$tag52>>1] = 667;
     (_EV_DoFloor($junk,5)|0);
     STACKTOP = sp;return;
     break;
    }
    default: {
     break L43;
    }
    }
   }
  } else {
   $26 = HEAP32[99085]|0;
   switch ($26|0) {
   case 1:  {
    $tag57 = ((($junk)) + 20|0);
    HEAP16[$tag57>>1] = 666;
    (_EV_DoFloor($junk,1)|0);
    STACKTOP = sp;return;
    break;
   }
   case 4:  {
    break;
   }
   default: {
    break L43;
   }
   }
   switch ($25|0) {
   case 6:  {
    $tag61 = ((($junk)) + 20|0);
    HEAP16[$tag61>>1] = 666;
    (_EV_DoDoor($junk,6)|0);
    STACKTOP = sp;return;
    break;
   }
   case 8:  {
    $tag64 = ((($junk)) + 20|0);
    HEAP16[$tag64>>1] = 666;
    (_EV_DoFloor($junk,1)|0);
    STACKTOP = sp;return;
    break;
   }
   default: {
    break L43;
   }
   }
  }
 } while(0);
 _G_ExitLevel();
 STACKTOP = sp;return;
}
function _A_Hoof($mo) {
 $mo = $mo|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _S_StartSound($mo,84);
 _A_Chase($mo);
 return;
}
function _A_Metal($mo) {
 $mo = $mo|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _S_StartSound($mo,85);
 _A_Chase($mo);
 return;
}
function _A_BabyMetal($mo) {
 $mo = $mo|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _S_StartSound($mo,79);
 _A_Chase($mo);
 return;
}
function _A_OpenShotgun2($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$player>>2]|0;
 _S_StartSound($0,5);
 return;
}
function _A_LoadShotgun2($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$player>>2]|0;
 _S_StartSound($0,7);
 return;
}
function _A_CloseShotgun2($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$player>>2]|0;
 _S_StartSound($0,6);
 _A_ReFire($player,$psp);
 return;
}
function _A_BrainAwake($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $cmp8 = 0, $function = 0, $inc = 0, $next = 0, $thinker$0 = 0, $thinker$07 = 0, $thinker$09 = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99412] = 0;
 HEAP32[99411] = 0;
 $thinker$07 = HEAP32[(398220)>>2]|0;
 $cmp8 = ($thinker$07|0)==(398216|0);
 if ($cmp8) {
  _S_StartSound(0,96);
  return;
 }
 $2 = 0;$thinker$09 = $thinker$07;
 while(1) {
  $function = ((($thinker$09)) + 8|0);
  $0 = HEAP32[$function>>2]|0;
  $cmp1 = ($0|0)==(136|0);
  if ($cmp1) {
   $type = ((($thinker$09)) + 88|0);
   $1 = HEAP32[$type>>2]|0;
   $cmp2 = ($1|0)==(27);
   if ($cmp2) {
    $arrayidx = (186144 + ($2<<2)|0);
    HEAP32[$arrayidx>>2] = $thinker$09;
    $inc = (($2) + 1)|0;
    HEAP32[99412] = $inc;
    $3 = $inc;
   } else {
    $3 = $2;
   }
  } else {
   $3 = $2;
  }
  $next = ((($thinker$09)) + 4|0);
  $thinker$0 = HEAP32[$next>>2]|0;
  $cmp = ($thinker$0|0)==(398216|0);
  if ($cmp) {
   break;
  } else {
   $2 = $3;$thinker$09 = $thinker$0;
  }
 }
 _S_StartSound(0,96);
 return;
}
function _A_BrainPain($mo) {
 $mo = $mo|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _S_StartSound(0,97);
 return;
}
function _A_BrainScream($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add16 = 0, $add6 = 0, $and = 0, $call = 0, $call11 = 0, $call7 = 0, $call8 = 0, $cmp = 0, $momz = 0, $mul5 = 0, $mul9 = 0, $spec$select = 0, $sub = 0, $sub12 = 0;
 var $sub4 = 0, $tics = 0, $x$015 = 0, $x1 = 0, $y3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $x1 = ((($mo)) + 12|0);
 $0 = HEAP32[$x1>>2]|0;
 $sub = (($0) + -12845056)|0;
 $y3 = ((($mo)) + 16|0);
 $x$015 = $sub;
 while(1) {
  $1 = HEAP32[$y3>>2]|0;
  $sub4 = (($1) + -20971520)|0;
  $call = (_P_Random()|0);
  $mul5 = $call << 17;
  $add6 = $mul5 | 128;
  $call7 = (_P_SpawnMobj($x$015,$sub4,$add6,33)|0);
  $call8 = (_P_Random()|0);
  $mul9 = $call8 << 9;
  $momz = ((($call7)) + 80|0);
  HEAP32[$momz>>2] = $mul9;
  (_P_SetMobjState($call7,799)|0);
  $call11 = (_P_Random()|0);
  $and = $call11 & 7;
  $tics = ((($call7)) + 96|0);
  $2 = HEAP32[$tics>>2]|0;
  $sub12 = (($2) - ($and))|0;
  $3 = ($sub12|0)>(1);
  $spec$select = $3 ? $sub12 : 1;
  HEAP32[$tics>>2] = $spec$select;
  $add16 = (($x$015) + 524288)|0;
  $4 = HEAP32[$x1>>2]|0;
  $5 = (($4) + 20447232)|0;
  $cmp = ($x$015|0)<($5|0);
  if ($cmp) {
   $x$015 = $add16;
  } else {
   break;
  }
 }
 _S_StartSound(0,98);
 return;
}
function _A_BrainExplode($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0, $add7 = 0, $and = 0, $call = 0, $call12 = 0, $call2 = 0, $call4 = 0, $call8 = 0, $call9 = 0, $momz = 0, $mul = 0, $mul10 = 0, $mul6 = 0, $spec$select = 0, $sub = 0, $sub13 = 0;
 var $tics = 0, $x1 = 0, $y3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $x1 = ((($mo)) + 12|0);
 $0 = HEAP32[$x1>>2]|0;
 $call = (_P_Random()|0);
 $call2 = (_P_Random()|0);
 $sub = (($call) - ($call2))|0;
 $mul = $sub << 11;
 $add = (($mul) + ($0))|0;
 $y3 = ((($mo)) + 16|0);
 $1 = HEAP32[$y3>>2]|0;
 $call4 = (_P_Random()|0);
 $mul6 = $call4 << 17;
 $add7 = $mul6 | 128;
 $call8 = (_P_SpawnMobj($add,$1,$add7,33)|0);
 $call9 = (_P_Random()|0);
 $mul10 = $call9 << 9;
 $momz = ((($call8)) + 80|0);
 HEAP32[$momz>>2] = $mul10;
 (_P_SetMobjState($call8,799)|0);
 $call12 = (_P_Random()|0);
 $and = $call12 & 7;
 $tics = ((($call8)) + 96|0);
 $2 = HEAP32[$tics>>2]|0;
 $sub13 = (($2) - ($and))|0;
 $3 = ($sub13|0)>(1);
 $spec$select = $3 ? $sub13 : 1;
 HEAP32[$tics>>2] = $spec$select;
 return;
}
function _A_BrainDie($mo) {
 $mo = $mo|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _G_ExitLevel();
 return;
}
function _A_BrainSpit($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $call = 0, $cmp = 0, $div = 0, $div2 = 0, $momy = 0, $or$cond = 0, $reactiontime = 0, $rem = 0;
 var $state = 0, $sub = 0, $target = 0, $tics = 0, $tobool = 0, $xor = 0, $y = 0, $y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99413]|0;
 $xor = $0 ^ 1;
 HEAP32[99413] = $xor;
 $1 = HEAP32[99086]|0;
 $cmp = ($1|0)>(1);
 $tobool = ($xor|0)!=(0);
 $or$cond = $tobool | $cmp;
 if (!($or$cond)) {
  return;
 }
 $2 = HEAP32[99411]|0;
 $arrayidx = (186144 + ($2<<2)|0);
 $3 = HEAP32[$arrayidx>>2]|0;
 $add = (($2) + 1)|0;
 $4 = HEAP32[99412]|0;
 $rem = (($add|0) % ($4|0))&-1;
 HEAP32[99411] = $rem;
 $call = (_P_SpawnMissile($mo,$3,28)|0);
 $target = ((($call)) + 120|0);
 HEAP32[$target>>2] = $3;
 $y = ((($3)) + 16|0);
 $5 = HEAP32[$y>>2]|0;
 $y1 = ((($mo)) + 16|0);
 $6 = HEAP32[$y1>>2]|0;
 $sub = (($5) - ($6))|0;
 $momy = ((($call)) + 76|0);
 $7 = HEAP32[$momy>>2]|0;
 $div = (($sub|0) / ($7|0))&-1;
 $state = ((($call)) + 100|0);
 $8 = HEAP32[$state>>2]|0;
 $tics = ((($8)) + 8|0);
 $9 = HEAP32[$tics>>2]|0;
 $div2 = (($div|0) / ($9|0))&-1;
 $reactiontime = ((($call)) + 124|0);
 HEAP32[$reactiontime>>2] = $div2;
 _S_StartSound(0,94);
 return;
}
function _A_SpawnSound($mo) {
 $mo = $mo|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _S_StartSound($mo,95);
 _A_SpawnFly($mo);
 return;
}
function _A_SpawnFly($mo) {
 $mo = $mo|0;
 var $$ = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add$i = 0, $and$i = 0, $and41$i = 0, $arrayidx$i = 0, $c$0$i = 0, $c$1$i = 0, $call = 0, $call$i = 0, $call1 = 0, $call2 = 0, $call44 = 0, $cmp = 0, $cmp$i = 0, $cmp10 = 0, $cmp13 = 0, $cmp16 = 0, $cmp19 = 0, $cmp22 = 0, $cmp25 = 0;
 var $cmp28 = 0, $cmp3$i = 0, $cmp4 = 0, $cmp7 = 0, $cmp8$i = 0, $dec = 0, $health$i = 0, $inc$i = 0, $info = 0, $lastlook$i = 0, $mo$i = 0, $or$cond$i = 0, $reactiontime = 0, $seestate = 0, $spec$select = 0, $sub$i = 0, $target = 0, $target$i = 0, $tobool = 0, $tobool$i = 0;
 var $tobool11$i = 0, $type$0 = 0, $x = 0, $x50 = 0, $y = 0, $y51 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $reactiontime = ((($mo)) + 124|0);
 $0 = HEAP32[$reactiontime>>2]|0;
 $dec = (($0) + -1)|0;
 HEAP32[$reactiontime>>2] = $dec;
 $tobool = ($dec|0)==(0);
 if (!($tobool)) {
  return;
 }
 $target = ((($mo)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $call = (_P_SubstNullMobj($1)|0);
 $x = ((($call)) + 12|0);
 $2 = HEAP32[$x>>2]|0;
 $y = ((($call)) + 16|0);
 $3 = HEAP32[$y>>2]|0;
 $z = ((($call)) + 20|0);
 $4 = HEAP32[$z>>2]|0;
 $call1 = (_P_SpawnMobj($2,$3,$4,29)|0);
 _S_StartSound($call1,35);
 $call2 = (_P_Random()|0);
 $cmp = ($call2|0)<(50);
 if ($cmp) {
  $type$0 = 11;
 } else {
  $cmp4 = ($call2|0)<(90);
  if ($cmp4) {
   $type$0 = 12;
  } else {
   $cmp7 = ($call2|0)<(120);
   if ($cmp7) {
    $type$0 = 13;
   } else {
    $cmp10 = ($call2|0)<(130);
    if ($cmp10) {
     $type$0 = 22;
    } else {
     $cmp13 = ($call2|0)<(160);
     if ($cmp13) {
      $type$0 = 14;
     } else {
      $cmp16 = ($call2|0)<(162);
      if ($cmp16) {
       $type$0 = 3;
      } else {
       $cmp19 = ($call2|0)<(172);
       if ($cmp19) {
        $type$0 = 5;
       } else {
        $cmp22 = ($call2|0)<(192);
        if ($cmp22) {
         $type$0 = 20;
        } else {
         $cmp25 = ($call2|0)<(222);
         $cmp28 = ($call2|0)<(246);
         $$ = $cmp28 ? 17 : 15;
         $spec$select = $cmp25 ? 8 : $$;
         $type$0 = $spec$select;
        }
       }
      }
     }
    }
   }
  }
 }
 $5 = HEAP32[$x>>2]|0;
 $6 = HEAP32[$y>>2]|0;
 $7 = HEAP32[$z>>2]|0;
 $call44 = (_P_SpawnMobj($5,$6,$7,$type$0)|0);
 $lastlook$i = ((($call44)) + 136|0);
 $8 = HEAP32[$lastlook$i>>2]|0;
 $sub$i = (($8) + 3)|0;
 $and$i = $sub$i & 3;
 $9 = $8;$c$0$i = 0;
 while(1) {
  $arrayidx$i = (181664 + ($9<<2)|0);
  $10 = HEAP32[$arrayidx$i>>2]|0;
  $tobool$i = ($10|0)==(0);
  if ($tobool$i) {
   $13 = $9;$c$1$i = $c$0$i;
  } else {
   $inc$i = (($c$0$i) + 1)|0;
   $cmp$i = ($c$0$i|0)==(2);
   $cmp3$i = ($9|0)==($and$i|0);
   $or$cond$i = $cmp3$i | $cmp$i;
   if ($or$cond$i) {
    break;
   }
   $health$i = (((181680 + (($9*288)|0)|0)) + 40|0);
   $11 = HEAP32[$health$i>>2]|0;
   $cmp8$i = ($11|0)<(1);
   if ($cmp8$i) {
    $13 = $9;$c$1$i = $inc$i;
   } else {
    $mo$i = (181680 + (($9*288)|0)|0);
    $12 = HEAP32[$mo$i>>2]|0;
    $call$i = (_P_CheckSight($call44,$12)|0);
    $tobool11$i = ($call$i|0)==(0);
    if (!($tobool11$i)) {
     label = 18;
     break;
    }
    $$pre$i = HEAP32[$lastlook$i>>2]|0;
    $13 = $$pre$i;$c$1$i = $inc$i;
   }
  }
  $add$i = (($13) + 1)|0;
  $and41$i = $add$i & 3;
  HEAP32[$lastlook$i>>2] = $and41$i;
  $9 = $and41$i;$c$0$i = $c$1$i;
 }
 if ((label|0) == 18) {
  $14 = HEAP32[$mo$i>>2]|0;
  $target$i = ((($call44)) + 120|0);
  HEAP32[$target$i>>2] = $14;
  $info = ((($call44)) + 92|0);
  $15 = HEAP32[$info>>2]|0;
  $seestate = ((($15)) + 12|0);
  $16 = HEAP32[$seestate>>2]|0;
  (_P_SetMobjState($call44,$16)|0);
 }
 $x50 = ((($call44)) + 12|0);
 $17 = HEAP32[$x50>>2]|0;
 $y51 = ((($call44)) + 16|0);
 $18 = HEAP32[$y51>>2]|0;
 (_P_TeleportMove($call44,$17,$18)|0);
 _P_RemoveMobj($mo);
 return;
}
function _A_PlayerScream($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $cmp = 0, $cmp1 = 0, $health = 0, $sound$0 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32140]|0;
 $cmp = ($0|0)==(2);
 if (!($cmp)) {
  $sound$0 = 57;
  _S_StartSound($mo,$sound$0);
  return;
 }
 $health = ((($mo)) + 108|0);
 $1 = HEAP32[$health>>2]|0;
 $cmp1 = ($1|0)<(-50);
 $spec$select = $cmp1 ? 58 : 57;
 $sound$0 = $spec$select;
 _S_StartSound($mo,$sound$0);
 return;
}
function _T_MovePlane($sector,$speed,$dest,$crush,$floorOrCeiling,$direction) {
 $sector = $sector|0;
 $speed = $speed|0;
 $dest = $dest|0;
 $crush = $crush|0;
 $floorOrCeiling = $floorOrCeiling|0;
 $direction = $direction|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0, $add73 = 0, $call = 0, $call11 = 0, $call24 = 0, $call34 = 0, $call51 = 0, $call61 = 0, $call78 = 0, $ceilingheight = 0, $ceilingheight72 = 0, $cmp = 0, $cmp12 = 0, $cmp20 = 0, $cmp25 = 0, $cmp35 = 0;
 var $cmp37 = 0, $cmp4 = 0, $cmp47 = 0, $cmp52 = 0, $cmp62 = 0, $cmp64 = 0, $cmp74 = 0, $cmp79 = 0, $retval$0 = 0, $sub = 0, $sub46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: do {
  switch ($floorOrCeiling|0) {
  case 0:  {
   switch ($direction|0) {
   case -1:  {
    $0 = HEAP32[$sector>>2]|0;
    $sub = (($0) - ($speed))|0;
    $cmp = ($sub|0)<($dest|0);
    if ($cmp) {
     HEAP32[$sector>>2] = $dest;
     $call = (_P_ChangeSector($sector,$crush)|0);
     $cmp4 = ($call|0)==(1);
     if (!($cmp4)) {
      $retval$0 = 2;
      break L1;
     }
     HEAP32[$sector>>2] = $0;
     (_P_ChangeSector($sector,$crush)|0);
     $retval$0 = 2;
     break L1;
    } else {
     HEAP32[$sector>>2] = $sub;
     $call11 = (_P_ChangeSector($sector,$crush)|0);
     $cmp12 = ($call11|0)==(1);
     if (!($cmp12)) {
      $retval$0 = 0;
      break L1;
     }
     HEAP32[$sector>>2] = $0;
     (_P_ChangeSector($sector,$crush)|0);
     $retval$0 = 1;
     break L1;
    }
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $retval$0 = 0;
    break L1;
   }
   }
   $1 = HEAP32[$sector>>2]|0;
   $add = (($1) + ($speed))|0;
   $cmp20 = ($add|0)>($dest|0);
   if ($cmp20) {
    HEAP32[$sector>>2] = $dest;
    $call24 = (_P_ChangeSector($sector,$crush)|0);
    $cmp25 = ($call24|0)==(1);
    if (!($cmp25)) {
     $retval$0 = 2;
     break L1;
    }
    HEAP32[$sector>>2] = $1;
    (_P_ChangeSector($sector,$crush)|0);
    $retval$0 = 2;
    break L1;
   }
   HEAP32[$sector>>2] = $add;
   $call34 = (_P_ChangeSector($sector,$crush)|0);
   $cmp35 = ($call34|0)==(1);
   if ($cmp35) {
    $cmp37 = ($crush|0)==(1);
    if ($cmp37) {
     $retval$0 = 1;
    } else {
     HEAP32[$sector>>2] = $1;
     (_P_ChangeSector($sector,$crush)|0);
     $retval$0 = 1;
    }
   } else {
    $retval$0 = 0;
   }
   break;
  }
  case 1:  {
   switch ($direction|0) {
   case -1:  {
    break;
   }
   case 1:  {
    $ceilingheight72 = ((($sector)) + 4|0);
    $3 = HEAP32[$ceilingheight72>>2]|0;
    $add73 = (($3) + ($speed))|0;
    $cmp74 = ($add73|0)>($dest|0);
    if (!($cmp74)) {
     HEAP32[$ceilingheight72>>2] = $add73;
     (_P_ChangeSector($sector,$crush)|0);
     $retval$0 = 0;
     break L1;
    }
    HEAP32[$ceilingheight72>>2] = $dest;
    $call78 = (_P_ChangeSector($sector,$crush)|0);
    $cmp79 = ($call78|0)==(1);
    if (!($cmp79)) {
     $retval$0 = 2;
     break L1;
    }
    HEAP32[$ceilingheight72>>2] = $3;
    (_P_ChangeSector($sector,$crush)|0);
    $retval$0 = 2;
    break L1;
    break;
   }
   default: {
    $retval$0 = 0;
    break L1;
   }
   }
   $ceilingheight = ((($sector)) + 4|0);
   $2 = HEAP32[$ceilingheight>>2]|0;
   $sub46 = (($2) - ($speed))|0;
   $cmp47 = ($sub46|0)<($dest|0);
   if ($cmp47) {
    HEAP32[$ceilingheight>>2] = $dest;
    $call51 = (_P_ChangeSector($sector,$crush)|0);
    $cmp52 = ($call51|0)==(1);
    if (!($cmp52)) {
     $retval$0 = 2;
     break L1;
    }
    HEAP32[$ceilingheight>>2] = $2;
    (_P_ChangeSector($sector,$crush)|0);
    $retval$0 = 2;
    break L1;
   }
   HEAP32[$ceilingheight>>2] = $sub46;
   $call61 = (_P_ChangeSector($sector,$crush)|0);
   $cmp62 = ($call61|0)==(1);
   if ($cmp62) {
    $cmp64 = ($crush|0)==(1);
    if ($cmp64) {
     $retval$0 = 1;
    } else {
     HEAP32[$ceilingheight>>2] = $2;
     (_P_ChangeSector($sector,$crush)|0);
     $retval$0 = 1;
    }
   } else {
    $retval$0 = 0;
   }
   break;
  }
  default: {
   $retval$0 = 0;
  }
  }
 } while(0);
 return ($retval$0|0);
}
function _T_MoveFloor($floor) {
 $floor = $floor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $call = 0, $cmp = 0, $cond = 0;
 var $cond1 = 0, $conv = 0, $conv16 = 0, $crush = 0, $direction = 0, $floordestheight = 0, $floorpic = 0, $floorpic21 = 0, $newspecial = 0, $newspecial15 = 0, $sector = 0, $soundorg = 0, $soundorg27 = 0, $special = 0, $special18 = 0, $specialdata = 0, $speed = 0, $texture = 0, $texture19 = 0, $tobool = 0;
 var $type = 0, $type13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sector = ((($floor)) + 20|0);
 $0 = HEAP32[$sector>>2]|0;
 $speed = ((($floor)) + 40|0);
 $1 = HEAP32[$speed>>2]|0;
 $floordestheight = ((($floor)) + 36|0);
 $2 = HEAP32[$floordestheight>>2]|0;
 $crush = ((($floor)) + 16|0);
 $3 = HEAP32[$crush>>2]|0;
 $direction = ((($floor)) + 24|0);
 $4 = HEAP32[$direction>>2]|0;
 $call = (_T_MovePlane($0,$1,$2,$3,0,$4)|0);
 $5 = HEAP32[99557]|0;
 $and = $5 & 7;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $6 = HEAP32[$sector>>2]|0;
  $soundorg = ((($6)) + 44|0);
  _S_StartSound($soundorg,22);
 }
 $cmp = ($call|0)==(2);
 if (!($cmp)) {
  return;
 }
 $7 = HEAP32[$sector>>2]|0;
 $specialdata = ((($7)) + 76|0);
 HEAP32[$specialdata>>2] = 0;
 $8 = HEAP32[$direction>>2]|0;
 switch ($8|0) {
 case 1:  {
  $type = ((($floor)) + 12|0);
  $9 = HEAP32[$type>>2]|0;
  $cond1 = ($9|0)==(11);
  if ($cond1) {
   $newspecial = ((($floor)) + 28|0);
   $10 = HEAP32[$newspecial>>2]|0;
   $conv = $10&65535;
   $special = ((($7)) + 14|0);
   HEAP16[$special>>1] = $conv;
   $texture = ((($floor)) + 32|0);
   $11 = HEAP16[$texture>>1]|0;
   $floorpic = ((($7)) + 8|0);
   HEAP16[$floorpic>>1] = $11;
  }
  break;
 }
 case -1:  {
  $type13 = ((($floor)) + 12|0);
  $12 = HEAP32[$type13>>2]|0;
  $cond = ($12|0)==(6);
  if ($cond) {
   $newspecial15 = ((($floor)) + 28|0);
   $13 = HEAP32[$newspecial15>>2]|0;
   $conv16 = $13&65535;
   $special18 = ((($7)) + 14|0);
   HEAP16[$special18>>1] = $conv16;
   $texture19 = ((($floor)) + 32|0);
   $14 = HEAP16[$texture19>>1]|0;
   $floorpic21 = ((($7)) + 8|0);
   HEAP16[$floorpic21>>1] = $14;
  }
  break;
 }
 default: {
 }
 }
 _P_RemoveThinker($floor);
 $15 = HEAP32[$sector>>2]|0;
 $soundorg27 = ((($15)) + 44|0);
 _S_StartSound($soundorg27,19);
 return;
}
function _EV_DoFloor($line,$floortype) {
 $line = $line|0;
 $floortype = $floortype|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add123 = 0, $add58 = 0, $add66 = 0;
 var $add74 = 0, $arrayidx$le = 0, $arrayidx111 = 0, $arrayidx94 = 0, $bottomtexture = 0, $bottomtexture104 = 0, $call = 0, $call1 = 0, $call103 = 0, $call129 = 0, $call137 = 0, $call138 = 0, $call138152 = 0, $call138155 = 0, $call140 = 0, $call141 = 0, $call145 = 0, $call15 = 0, $call156 = 0, $call28 = 0;
 var $call4 = 0, $call43 = 0, $call50 = 0, $call85 = 0, $call88 = 0, $call9 = 0, $ceilingheight = 0, $cmp = 0, $cmp106 = 0, $cmp112 = 0, $cmp134 = 0, $cmp134145 = 0, $cmp139 = 0, $cmp139153 = 0, $cmp142 = 0, $cmp148 = 0, $cmp159 = 0, $cmp18 = 0, $cmp31 = 0, $cmp36 = 0;
 var $cmp83 = 0, $cmp83148 = 0, $cmp90 = 0, $cmp95 = 0, $conv = 0, $conv105 = 0, $conv154 = 0, $conv165 = 0, $conv89 = 0, $crush = 0, $direction = 0, $direction12 = 0, $direction126 = 0, $direction25 = 0, $direction39 = 0, $direction46 = 0, $direction53 = 0, $direction6 = 0, $direction61 = 0, $direction69 = 0;
 var $direction80 = 0, $floordestheight = 0, $floordestheight10 = 0, $floordestheight124 = 0, $floordestheight130 = 0, $floordestheight16 = 0, $floordestheight29 = 0, $floordestheight44 = 0, $floordestheight51 = 0, $floordestheight59 = 0, $floordestheight67 = 0, $floordestheight75 = 0, $floorpic = 0, $floorpic131 = 0, $floorpic151 = 0, $floorpic162 = 0, $floorpic76 = 0, $frontsector = 0, $function = 0, $i$0149 = 0;
 var $i$1146 = 0, $inc = 0, $inc171 = 0, $linecount = 0, $linecount133 = 0, $linecount133144 = 0, $minsize$0$lcssa = 0, $minsize$0150 = 0, $minsize$1 = 0, $minsize$2 = 0, $mul = 0, $newspecial = 0, $newspecial166 = 0, $rtn$0$ph$lcssa = 0, $rtn$0$ph154 = 0, $sec$0147 = 0, $sec$1 = 0, $sector = 0, $sector127 = 0, $sector13 = 0;
 var $sector141 = 0, $sector26 = 0, $sector40 = 0, $sector47 = 0, $sector54 = 0, $sector62 = 0, $sector7 = 0, $sector70 = 0, $sector81 = 0, $spec$select = 0, $spec$select136 = 0, $spec$store$select = 0, $special = 0, $special153 = 0, $special164 = 0, $special78 = 0, $specialdata = 0, $speed = 0, $speed128 = 0, $speed14 = 0;
 var $speed27 = 0, $speed41 = 0, $speed48 = 0, $speed55 = 0, $speed63 = 0, $speed71 = 0, $speed8 = 0, $speed82 = 0, $sub = 0, $sub$ptr$div = 0, $sub$ptr$sub = 0, $texture = 0, $tobool = 0, $tobool138 = 0, $tobool86 = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call138152 = (_P_FindSectorFromLineTag($line,-1)|0);
 $cmp139153 = ($call138152|0)>(-1);
 if (!($cmp139153)) {
  $rtn$0$ph$lcssa = 0;
  return ($rtn$0$ph$lcssa|0);
 }
 $cmp36 = ($floortype|0)==(9);
 $conv = $cmp36&1;
 $mul = $conv << 19;
 $frontsector = ((($line)) + 48|0);
 $call138155 = $call138152;$rtn$0$ph154 = 0;
 L4: while(1) {
  $call141 = $call138155;
  while(1) {
   $0 = HEAP32[99506]|0;
   $specialdata = (((($0) + (($call141*88)|0)|0)) + 76|0);
   $1 = HEAP32[$specialdata>>2]|0;
   $tobool = ($1|0)==(0|0);
   if ($tobool) {
    break;
   }
   $call = (_P_FindSectorFromLineTag($line,$call141)|0);
   $cmp = ($call|0)>(-1);
   if ($cmp) {
    $call141 = $call;
   } else {
    $rtn$0$ph$lcssa = $rtn$0$ph154;
    label = 38;
    break L4;
   }
  }
  $arrayidx$le = (($0) + (($call141*88)|0)|0);
  $call1 = (_Z_Malloc(44,6,0)|0);
  _P_AddThinker($call1);
  HEAP32[$specialdata>>2] = $call1;
  $function = ((($call1)) + 8|0);
  HEAP32[$function>>2] = 138;
  $type = ((($call1)) + 12|0);
  HEAP32[$type>>2] = $floortype;
  $crush = ((($call1)) + 16|0);
  HEAP32[$crush>>2] = 0;
  L10: do {
   switch ($floortype|0) {
   case 0:  {
    $direction = ((($call1)) + 24|0);
    HEAP32[$direction>>2] = -1;
    $sector = ((($call1)) + 20|0);
    HEAP32[$sector>>2] = $arrayidx$le;
    $speed = ((($call1)) + 40|0);
    HEAP32[$speed>>2] = 65536;
    $call4 = (_P_FindHighestFloorSurrounding($arrayidx$le)|0);
    $floordestheight = ((($call1)) + 36|0);
    HEAP32[$floordestheight>>2] = $call4;
    break;
   }
   case 1:  {
    $direction6 = ((($call1)) + 24|0);
    HEAP32[$direction6>>2] = -1;
    $sector7 = ((($call1)) + 20|0);
    HEAP32[$sector7>>2] = $arrayidx$le;
    $speed8 = ((($call1)) + 40|0);
    HEAP32[$speed8>>2] = 65536;
    $call9 = (_P_FindLowestFloorSurrounding($arrayidx$le)|0);
    $floordestheight10 = ((($call1)) + 36|0);
    HEAP32[$floordestheight10>>2] = $call9;
    break;
   }
   case 2:  {
    $direction12 = ((($call1)) + 24|0);
    HEAP32[$direction12>>2] = -1;
    $sector13 = ((($call1)) + 20|0);
    HEAP32[$sector13>>2] = $arrayidx$le;
    $speed14 = ((($call1)) + 40|0);
    HEAP32[$speed14>>2] = 262144;
    $call15 = (_P_FindHighestFloorSurrounding($arrayidx$le)|0);
    $floordestheight16 = ((($call1)) + 36|0);
    HEAP32[$floordestheight16>>2] = $call15;
    $2 = HEAP32[$arrayidx$le>>2]|0;
    $cmp18 = ($call15|0)==($2|0);
    if (!($cmp18)) {
     $add = (($call15) + 524288)|0;
     HEAP32[$floordestheight16>>2] = $add;
    }
    break;
   }
   case 9:  {
    HEAP32[$crush>>2] = 1;
    label = 12;
    break;
   }
   case 3:  {
    label = 12;
    break;
   }
   case 10:  {
    $direction39 = ((($call1)) + 24|0);
    HEAP32[$direction39>>2] = 1;
    $sector40 = ((($call1)) + 20|0);
    HEAP32[$sector40>>2] = $arrayidx$le;
    $speed41 = ((($call1)) + 40|0);
    HEAP32[$speed41>>2] = 262144;
    $4 = HEAP32[$arrayidx$le>>2]|0;
    $call43 = (_P_FindNextHighestFloor($arrayidx$le,$4)|0);
    $floordestheight44 = ((($call1)) + 36|0);
    HEAP32[$floordestheight44>>2] = $call43;
    break;
   }
   case 4:  {
    $direction46 = ((($call1)) + 24|0);
    HEAP32[$direction46>>2] = 1;
    $sector47 = ((($call1)) + 20|0);
    HEAP32[$sector47>>2] = $arrayidx$le;
    $speed48 = ((($call1)) + 40|0);
    HEAP32[$speed48>>2] = 65536;
    $5 = HEAP32[$arrayidx$le>>2]|0;
    $call50 = (_P_FindNextHighestFloor($arrayidx$le,$5)|0);
    $floordestheight51 = ((($call1)) + 36|0);
    HEAP32[$floordestheight51>>2] = $call50;
    break;
   }
   case 7:  {
    $direction53 = ((($call1)) + 24|0);
    HEAP32[$direction53>>2] = 1;
    $sector54 = ((($call1)) + 20|0);
    HEAP32[$sector54>>2] = $arrayidx$le;
    $speed55 = ((($call1)) + 40|0);
    HEAP32[$speed55>>2] = 65536;
    $6 = HEAP32[$arrayidx$le>>2]|0;
    $add58 = (($6) + 1572864)|0;
    $floordestheight59 = ((($call1)) + 36|0);
    HEAP32[$floordestheight59>>2] = $add58;
    break;
   }
   case 12:  {
    $direction61 = ((($call1)) + 24|0);
    HEAP32[$direction61>>2] = 1;
    $sector62 = ((($call1)) + 20|0);
    HEAP32[$sector62>>2] = $arrayidx$le;
    $speed63 = ((($call1)) + 40|0);
    HEAP32[$speed63>>2] = 65536;
    $7 = HEAP32[$arrayidx$le>>2]|0;
    $add66 = (($7) + 33554432)|0;
    $floordestheight67 = ((($call1)) + 36|0);
    HEAP32[$floordestheight67>>2] = $add66;
    break;
   }
   case 8:  {
    $direction69 = ((($call1)) + 24|0);
    HEAP32[$direction69>>2] = 1;
    $sector70 = ((($call1)) + 20|0);
    HEAP32[$sector70>>2] = $arrayidx$le;
    $speed71 = ((($call1)) + 40|0);
    HEAP32[$speed71>>2] = 65536;
    $8 = HEAP32[$arrayidx$le>>2]|0;
    $add74 = (($8) + 1572864)|0;
    $floordestheight75 = ((($call1)) + 36|0);
    HEAP32[$floordestheight75>>2] = $add74;
    $9 = HEAP32[$frontsector>>2]|0;
    $floorpic = ((($9)) + 8|0);
    $10 = HEAP16[$floorpic>>1]|0;
    $floorpic76 = (((($0) + (($call141*88)|0)|0)) + 8|0);
    HEAP16[$floorpic76>>1] = $10;
    $special = ((($9)) + 14|0);
    $11 = HEAP16[$special>>1]|0;
    $special78 = (((($0) + (($call141*88)|0)|0)) + 14|0);
    HEAP16[$special78>>1] = $11;
    break;
   }
   case 5:  {
    $direction80 = ((($call1)) + 24|0);
    HEAP32[$direction80>>2] = 1;
    $sector81 = ((($call1)) + 20|0);
    HEAP32[$sector81>>2] = $arrayidx$le;
    $speed82 = ((($call1)) + 40|0);
    HEAP32[$speed82>>2] = 65536;
    $linecount = (((($0) + (($call141*88)|0)|0)) + 80|0);
    $12 = HEAP32[$linecount>>2]|0;
    $cmp83148 = ($12|0)>(0);
    if ($cmp83148) {
     $i$0149 = 0;$minsize$0150 = 2147483647;
     while(1) {
      $call85 = (_twoSided($call141,$i$0149)|0);
      $tobool86 = ($call85|0)==(0);
      if ($tobool86) {
       $minsize$2 = $minsize$0150;
      } else {
       $call88 = (_getSide($call141,$i$0149,0)|0);
       $bottomtexture = ((($call88)) + 10|0);
       $13 = HEAP16[$bottomtexture>>1]|0;
       $cmp90 = ($13<<16>>16)>(-1);
       if ($cmp90) {
        $conv89 = $13 << 16 >> 16;
        $14 = HEAP32[99573]|0;
        $arrayidx94 = (($14) + ($conv89<<2)|0);
        $15 = HEAP32[$arrayidx94>>2]|0;
        $cmp95 = ($15|0)<($minsize$0150|0);
        $spec$select = $cmp95 ? $15 : $minsize$0150;
        $minsize$1 = $spec$select;
       } else {
        $minsize$1 = $minsize$0150;
       }
       $call103 = (_getSide($call141,$i$0149,1)|0);
       $bottomtexture104 = ((($call103)) + 10|0);
       $16 = HEAP16[$bottomtexture104>>1]|0;
       $cmp106 = ($16<<16>>16)>(-1);
       if ($cmp106) {
        $conv105 = $16 << 16 >> 16;
        $17 = HEAP32[99573]|0;
        $arrayidx111 = (($17) + ($conv105<<2)|0);
        $18 = HEAP32[$arrayidx111>>2]|0;
        $cmp112 = ($18|0)<($minsize$1|0);
        $spec$select136 = $cmp112 ? $18 : $minsize$1;
        $minsize$2 = $spec$select136;
       } else {
        $minsize$2 = $minsize$1;
       }
      }
      $inc = (($i$0149) + 1)|0;
      $19 = HEAP32[$linecount>>2]|0;
      $cmp83 = ($inc|0)<($19|0);
      if ($cmp83) {
       $i$0149 = $inc;$minsize$0150 = $minsize$2;
      } else {
       break;
      }
     }
     $$pre = HEAP32[$sector81>>2]|0;
     $21 = $$pre;$minsize$0$lcssa = $minsize$2;
    } else {
     $21 = $arrayidx$le;$minsize$0$lcssa = 2147483647;
    }
    $20 = HEAP32[$21>>2]|0;
    $add123 = (($20) + ($minsize$0$lcssa))|0;
    $floordestheight124 = ((($call1)) + 36|0);
    HEAP32[$floordestheight124>>2] = $add123;
    break;
   }
   case 6:  {
    $direction126 = ((($call1)) + 24|0);
    HEAP32[$direction126>>2] = -1;
    $sector127 = ((($call1)) + 20|0);
    HEAP32[$sector127>>2] = $arrayidx$le;
    $speed128 = ((($call1)) + 40|0);
    HEAP32[$speed128>>2] = 65536;
    $call129 = (_P_FindLowestFloorSurrounding($arrayidx$le)|0);
    $floordestheight130 = ((($call1)) + 36|0);
    HEAP32[$floordestheight130>>2] = $call129;
    $floorpic131 = (((($0) + (($call141*88)|0)|0)) + 8|0);
    $22 = HEAP16[$floorpic131>>1]|0;
    $texture = ((($call1)) + 32|0);
    HEAP16[$texture>>1] = $22;
    $linecount133144 = (((($0) + (($call141*88)|0)|0)) + 80|0);
    $23 = HEAP32[$linecount133144>>2]|0;
    $cmp134145 = ($23|0)>(0);
    if ($cmp134145) {
     $i$1146 = 0;$sec$0147 = $arrayidx$le;
     L37: while(1) {
      $call137 = (_twoSided($call141,$i$1146)|0);
      $tobool138 = ($call137|0)==(0);
      do {
       if ($tobool138) {
        $sec$1 = $sec$0147;
       } else {
        $call140 = (_getSide($call141,$i$1146,0)|0);
        $sector141 = ((($call140)) + 16|0);
        $24 = HEAP32[$sector141>>2]|0;
        $25 = HEAP32[99506]|0;
        $sub$ptr$sub = (($24) - ($25))|0;
        $sub$ptr$div = (($sub$ptr$sub|0) / 88)&-1;
        $cmp142 = ($sub$ptr$div|0)==($call141|0);
        if ($cmp142) {
         $call145 = (_getSector($call141,$i$1146,1)|0);
         $26 = HEAP32[$call145>>2]|0;
         $27 = HEAP32[$floordestheight130>>2]|0;
         $cmp148 = ($26|0)==($27|0);
         if ($cmp148) {
          label = 33;
          break L37;
         } else {
          $sec$1 = $call145;
          break;
         }
        } else {
         $call156 = (_getSector($call141,$i$1146,0)|0);
         $30 = HEAP32[$call156>>2]|0;
         $31 = HEAP32[$floordestheight130>>2]|0;
         $cmp159 = ($30|0)==($31|0);
         if ($cmp159) {
          label = 35;
          break L37;
         } else {
          $sec$1 = $call156;
          break;
         }
        }
       }
      } while(0);
      $inc171 = (($i$1146) + 1)|0;
      $linecount133 = ((($sec$1)) + 80|0);
      $34 = HEAP32[$linecount133>>2]|0;
      $cmp134 = ($inc171|0)<($34|0);
      if ($cmp134) {
       $i$1146 = $inc171;$sec$0147 = $sec$1;
      } else {
       break L10;
      }
     }
     if ((label|0) == 33) {
      label = 0;
      $floorpic151 = ((($call145)) + 8|0);
      $28 = HEAP16[$floorpic151>>1]|0;
      HEAP16[$texture>>1] = $28;
      $special153 = ((($call145)) + 14|0);
      $29 = HEAP16[$special153>>1]|0;
      $conv154 = $29 << 16 >> 16;
      $newspecial = ((($call1)) + 28|0);
      HEAP32[$newspecial>>2] = $conv154;
      break L10;
     }
     else if ((label|0) == 35) {
      label = 0;
      $floorpic162 = ((($call156)) + 8|0);
      $32 = HEAP16[$floorpic162>>1]|0;
      HEAP16[$texture>>1] = $32;
      $special164 = ((($call156)) + 14|0);
      $33 = HEAP16[$special164>>1]|0;
      $conv165 = $33 << 16 >> 16;
      $newspecial166 = ((($call1)) + 28|0);
      HEAP32[$newspecial166>>2] = $conv165;
      break L10;
     }
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   $direction25 = ((($call1)) + 24|0);
   HEAP32[$direction25>>2] = 1;
   $sector26 = ((($call1)) + 20|0);
   HEAP32[$sector26>>2] = $arrayidx$le;
   $speed27 = ((($call1)) + 40|0);
   HEAP32[$speed27>>2] = 65536;
   $call28 = (_P_FindLowestCeilingSurrounding($arrayidx$le)|0);
   $floordestheight29 = ((($call1)) + 36|0);
   $ceilingheight = (((($0) + (($call141*88)|0)|0)) + 4|0);
   $3 = HEAP32[$ceilingheight>>2]|0;
   $cmp31 = ($call28|0)>($3|0);
   $spec$store$select = $cmp31 ? $3 : $call28;
   $sub = (($spec$store$select) - ($mul))|0;
   HEAP32[$floordestheight29>>2] = $sub;
  }
  $call138 = (_P_FindSectorFromLineTag($line,$call141)|0);
  $cmp139 = ($call138|0)>(-1);
  if ($cmp139) {
   $call138155 = $call138;$rtn$0$ph154 = 1;
  } else {
   $rtn$0$ph$lcssa = 1;
   label = 38;
   break;
  }
 }
 if ((label|0) == 38) {
  return ($rtn$0$ph$lcssa|0);
 }
 return (0)|0;
}
function _EV_BuildStairs($line,$type) {
 $line = $line|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$us = 0, $add31 = 0, $add31$us = 0, $arrayidx$le = 0, $arrayidx$le$us = 0, $arrayidx8 = 0;
 var $arrayidx8$us = 0, $backsector = 0, $backsector$us = 0, $call = 0, $call$us = 0, $call1 = 0, $call1$us = 0, $call36 = 0, $call36$us = 0, $call55 = 0, $call55$us = 0, $call5575 = 0, $call5580 = 0, $call5580$us = 0, $call57 = 0, $call57$us = 0, $cmp = 0, $cmp$us = 0, $cmp15 = 0, $cmp15$us = 0;
 var $cmp27 = 0, $cmp27$us = 0, $cmp56 = 0, $cmp56$us = 0, $cmp5676 = 0, $cmp6 = 0, $cmp6$us = 0, $cmp660 = 0, $cmp660$us = 0, $cmp66069 = 0, $cmp66069$us = 0, $cond = 0, $direction = 0, $direction$us = 0, $direction42 = 0, $direction42$us = 0, $flags = 0, $flags$us = 0, $floordestheight = 0, $floordestheight$us = 0;
 var $floordestheight45 = 0, $floordestheight45$us = 0, $floorpic = 0, $floorpic$us = 0, $floorpic25 = 0, $floorpic25$us = 0, $frontsector = 0, $frontsector$us = 0, $function = 0, $function$us = 0, $function40 = 0, $function40$us = 0, $height$070 = 0, $height$070$us = 0, $height$161 = 0, $height$161$us = 0, $height$2 = 0, $height$2$us = 0, $i$062 = 0, $i$062$us = 0;
 var $inc = 0, $inc$us = 0, $linecount = 0, $linecount$us = 0, $linecount68 = 0, $linecount68$us = 0, $lines = 0, $lines$us = 0, $rtn$0$ph$lcssa = 0, $rtn$0$ph77 = 0, $rtn$0$ph77$us = 0, $sec$072 = 0, $sec$072$us = 0, $secnum$1$lcssa = 0, $secnum$1$lcssa$us = 0, $secnum$171 = 0, $secnum$171$us = 0, $sector = 0, $sector$us = 0, $sector43 = 0;
 var $sector43$us = 0, $spec$select = 0, $spec$select82 = 0, $specialdata = 0, $specialdata$us = 0, $specialdata32 = 0, $specialdata32$le = 0, $specialdata32$us = 0, $specialdata32$us$le = 0, $speed$0$ph79 = 0, $speed44 = 0, $speed44$us = 0, $speed5 = 0, $speed5$us = 0, $stairsize$0$ph78 = 0, $sub$ptr$div = 0, $sub$ptr$div$us = 0, $sub$ptr$div24$le = 0, $sub$ptr$div24$le$us = 0, $sub$ptr$lhs$cast21$le = 0;
 var $sub$ptr$lhs$cast21$le$us = 0, $sub$ptr$sub = 0, $sub$ptr$sub$us = 0, $sub$ptr$sub23$le = 0, $sub$ptr$sub23$le$us = 0, $tobool = 0, $tobool$us = 0, $tobool10 = 0, $tobool10$us = 0, $tobool33 = 0, $tobool33$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call5575 = (_P_FindSectorFromLineTag($line,-1)|0);
 $cmp5676 = ($call5575|0)>(-1);
 if (!($cmp5676)) {
  $rtn$0$ph$lcssa = 0;
  return ($rtn$0$ph$lcssa|0);
 }
 $0 = ($type|0)==(0);
 if ($0) {
  $call5580$us = $call5575;$rtn$0$ph77$us = 0;
  L6: while(1) {
   $call57$us = $call5580$us;
   while(1) {
    $1 = HEAP32[99506]|0;
    $specialdata$us = (((($1) + (($call57$us*88)|0)|0)) + 76|0);
    $2 = HEAP32[$specialdata$us>>2]|0;
    $tobool$us = ($2|0)==(0|0);
    if ($tobool$us) {
     break;
    }
    $call$us = (_P_FindSectorFromLineTag($line,$call57$us)|0);
    $cmp$us = ($call$us|0)>(-1);
    if ($cmp$us) {
     $call57$us = $call$us;
    } else {
     $rtn$0$ph$lcssa = $rtn$0$ph77$us;
     label = 31;
     break L6;
    }
   }
   $arrayidx$le$us = (($1) + (($call57$us*88)|0)|0);
   $call1$us = (_Z_Malloc(44,6,0)|0);
   _P_AddThinker($call1$us);
   HEAP32[$specialdata$us>>2] = $call1$us;
   $function$us = ((($call1$us)) + 8|0);
   HEAP32[$function$us>>2] = 138;
   $direction$us = ((($call1$us)) + 24|0);
   HEAP32[$direction$us>>2] = 1;
   $sector$us = ((($call1$us)) + 20|0);
   HEAP32[$sector$us>>2] = $arrayidx$le$us;
   $speed5$us = ((($call1$us)) + 40|0);
   HEAP32[$speed5$us>>2] = 16384;
   $3 = HEAP32[$arrayidx$le$us>>2]|0;
   $add$us = (($3) + 524288)|0;
   $floordestheight$us = ((($call1$us)) + 36|0);
   HEAP32[$floordestheight$us>>2] = $add$us;
   $floorpic$us = (((($1) + (($call57$us*88)|0)|0)) + 8|0);
   $4 = HEAP16[$floorpic$us>>1]|0;
   $linecount68$us = (((($1) + (($call57$us*88)|0)|0)) + 80|0);
   $5 = HEAP32[$linecount68$us>>2]|0;
   $cmp66069$us = ($5|0)>(0);
   L12: do {
    if ($cmp66069$us) {
     $16 = $5;$height$070$us = $add$us;$sec$072$us = $arrayidx$le$us;$secnum$171$us = $call57$us;
     while(1) {
      $lines$us = ((($sec$072$us)) + 84|0);
      $6 = HEAP32[$lines$us>>2]|0;
      $11 = HEAP32[99506]|0;
      $height$161$us = $height$070$us;$i$062$us = 0;
      while(1) {
       $arrayidx8$us = (($6) + ($i$062$us<<2)|0);
       $7 = HEAP32[$arrayidx8$us>>2]|0;
       $flags$us = ((($7)) + 16|0);
       $8 = HEAP16[$flags$us>>1]|0;
       $9 = $8 & 4;
       $tobool10$us = ($9<<16>>16)==(0);
       if ($tobool10$us) {
        $height$2$us = $height$161$us;
       } else {
        $frontsector$us = ((($7)) + 48|0);
        $10 = HEAP32[$frontsector$us>>2]|0;
        $sub$ptr$sub$us = (($10) - ($11))|0;
        $sub$ptr$div$us = (($sub$ptr$sub$us|0) / 88)&-1;
        $cmp15$us = ($secnum$171$us|0)==($sub$ptr$div$us|0);
        if ($cmp15$us) {
         $backsector$us = ((($7)) + 52|0);
         $12 = HEAP32[$backsector$us>>2]|0;
         $floorpic25$us = ((($12)) + 8|0);
         $13 = HEAP16[$floorpic25$us>>1]|0;
         $cmp27$us = ($13<<16>>16)==($4<<16>>16);
         if ($cmp27$us) {
          $add31$us = (($height$161$us) + 524288)|0;
          $specialdata32$us = ((($12)) + 76|0);
          $14 = HEAP32[$specialdata32$us>>2]|0;
          $tobool33$us = ($14|0)==(0|0);
          if ($tobool33$us) {
           break;
          } else {
           $height$2$us = $add31$us;
          }
         } else {
          $height$2$us = $height$161$us;
         }
        } else {
         $height$2$us = $height$161$us;
        }
       }
       $inc$us = (($i$062$us) + 1)|0;
       $cmp6$us = ($inc$us|0)<($16|0);
       if ($cmp6$us) {
        $height$161$us = $height$2$us;$i$062$us = $inc$us;
       } else {
        $secnum$1$lcssa$us = $secnum$171$us;
        break L12;
       }
      }
      $specialdata32$us$le = ((($12)) + 76|0);
      $sub$ptr$lhs$cast21$le$us = $12;
      $sub$ptr$sub23$le$us = (($sub$ptr$lhs$cast21$le$us) - ($11))|0;
      $sub$ptr$div24$le$us = (($sub$ptr$sub23$le$us|0) / 88)&-1;
      $call36$us = (_Z_Malloc(44,6,0)|0);
      _P_AddThinker($call36$us);
      HEAP32[$specialdata32$us$le>>2] = $call36$us;
      $function40$us = ((($call36$us)) + 8|0);
      HEAP32[$function40$us>>2] = 138;
      $direction42$us = ((($call36$us)) + 24|0);
      HEAP32[$direction42$us>>2] = 1;
      $sector43$us = ((($call36$us)) + 20|0);
      HEAP32[$sector43$us>>2] = $12;
      $speed44$us = ((($call36$us)) + 40|0);
      HEAP32[$speed44$us>>2] = 16384;
      $floordestheight45$us = ((($call36$us)) + 36|0);
      HEAP32[$floordestheight45$us>>2] = $add31$us;
      $linecount$us = ((($12)) + 80|0);
      $15 = HEAP32[$linecount$us>>2]|0;
      $cmp660$us = ($15|0)>(0);
      if ($cmp660$us) {
       $16 = $15;$height$070$us = $add31$us;$sec$072$us = $12;$secnum$171$us = $sub$ptr$div24$le$us;
      } else {
       $secnum$1$lcssa$us = $sub$ptr$div24$le$us;
       break;
      }
     }
    } else {
     $secnum$1$lcssa$us = $call57$us;
    }
   } while(0);
   $call55$us = (_P_FindSectorFromLineTag($line,$secnum$1$lcssa$us)|0);
   $cmp56$us = ($call55$us|0)>(-1);
   if ($cmp56$us) {
    $call5580$us = $call55$us;$rtn$0$ph77$us = 1;
   } else {
    $rtn$0$ph$lcssa = 1;
    label = 31;
    break;
   }
  }
  if ((label|0) == 31) {
   return ($rtn$0$ph$lcssa|0);
  }
 } else {
  $cond = ($type|0)==(1);
  $call5580 = $call5575;$rtn$0$ph77 = 0;$speed$0$ph79 = 0;$stairsize$0$ph78 = 0;
  L29: while(1) {
   $call57 = $call5580;
   while(1) {
    $17 = HEAP32[99506]|0;
    $specialdata = (((($17) + (($call57*88)|0)|0)) + 76|0);
    $18 = HEAP32[$specialdata>>2]|0;
    $tobool = ($18|0)==(0|0);
    if ($tobool) {
     break;
    }
    $call = (_P_FindSectorFromLineTag($line,$call57)|0);
    $cmp = ($call|0)>(-1);
    if ($cmp) {
     $call57 = $call;
    } else {
     $rtn$0$ph$lcssa = $rtn$0$ph77;
     label = 31;
     break L29;
    }
   }
   $arrayidx$le = (($17) + (($call57*88)|0)|0);
   $call1 = (_Z_Malloc(44,6,0)|0);
   _P_AddThinker($call1);
   HEAP32[$specialdata>>2] = $call1;
   $function = ((($call1)) + 8|0);
   HEAP32[$function>>2] = 138;
   $direction = ((($call1)) + 24|0);
   HEAP32[$direction>>2] = 1;
   $sector = ((($call1)) + 20|0);
   HEAP32[$sector>>2] = $arrayidx$le;
   $spec$select = $cond ? 1048576 : $stairsize$0$ph78;
   $spec$select82 = $cond ? 262144 : $speed$0$ph79;
   $speed5 = ((($call1)) + 40|0);
   HEAP32[$speed5>>2] = $spec$select82;
   $19 = HEAP32[$arrayidx$le>>2]|0;
   $add = (($19) + ($spec$select))|0;
   $floordestheight = ((($call1)) + 36|0);
   HEAP32[$floordestheight>>2] = $add;
   $floorpic = (((($17) + (($call57*88)|0)|0)) + 8|0);
   $20 = HEAP16[$floorpic>>1]|0;
   $linecount68 = (((($17) + (($call57*88)|0)|0)) + 80|0);
   $21 = HEAP32[$linecount68>>2]|0;
   $cmp66069 = ($21|0)>(0);
   L35: do {
    if ($cmp66069) {
     $32 = $21;$height$070 = $add;$sec$072 = $arrayidx$le;$secnum$171 = $call57;
     while(1) {
      $lines = ((($sec$072)) + 84|0);
      $22 = HEAP32[$lines>>2]|0;
      $23 = HEAP32[99506]|0;
      $height$161 = $height$070;$i$062 = 0;
      while(1) {
       $arrayidx8 = (($22) + ($i$062<<2)|0);
       $24 = HEAP32[$arrayidx8>>2]|0;
       $flags = ((($24)) + 16|0);
       $25 = HEAP16[$flags>>1]|0;
       $26 = $25 & 4;
       $tobool10 = ($26<<16>>16)==(0);
       if ($tobool10) {
        $height$2 = $height$161;
       } else {
        $frontsector = ((($24)) + 48|0);
        $27 = HEAP32[$frontsector>>2]|0;
        $sub$ptr$sub = (($27) - ($23))|0;
        $sub$ptr$div = (($sub$ptr$sub|0) / 88)&-1;
        $cmp15 = ($secnum$171|0)==($sub$ptr$div|0);
        if ($cmp15) {
         $backsector = ((($24)) + 52|0);
         $28 = HEAP32[$backsector>>2]|0;
         $floorpic25 = ((($28)) + 8|0);
         $29 = HEAP16[$floorpic25>>1]|0;
         $cmp27 = ($29<<16>>16)==($20<<16>>16);
         if ($cmp27) {
          $add31 = (($height$161) + ($spec$select))|0;
          $specialdata32 = ((($28)) + 76|0);
          $30 = HEAP32[$specialdata32>>2]|0;
          $tobool33 = ($30|0)==(0|0);
          if ($tobool33) {
           break;
          } else {
           $height$2 = $add31;
          }
         } else {
          $height$2 = $height$161;
         }
        } else {
         $height$2 = $height$161;
        }
       }
       $inc = (($i$062) + 1)|0;
       $cmp6 = ($inc|0)<($32|0);
       if ($cmp6) {
        $height$161 = $height$2;$i$062 = $inc;
       } else {
        $secnum$1$lcssa = $secnum$171;
        break L35;
       }
      }
      $specialdata32$le = ((($28)) + 76|0);
      $sub$ptr$lhs$cast21$le = $28;
      $sub$ptr$sub23$le = (($sub$ptr$lhs$cast21$le) - ($23))|0;
      $sub$ptr$div24$le = (($sub$ptr$sub23$le|0) / 88)&-1;
      $call36 = (_Z_Malloc(44,6,0)|0);
      _P_AddThinker($call36);
      HEAP32[$specialdata32$le>>2] = $call36;
      $function40 = ((($call36)) + 8|0);
      HEAP32[$function40>>2] = 138;
      $direction42 = ((($call36)) + 24|0);
      HEAP32[$direction42>>2] = 1;
      $sector43 = ((($call36)) + 20|0);
      HEAP32[$sector43>>2] = $28;
      $speed44 = ((($call36)) + 40|0);
      HEAP32[$speed44>>2] = $spec$select82;
      $floordestheight45 = ((($call36)) + 36|0);
      HEAP32[$floordestheight45>>2] = $add31;
      $linecount = ((($28)) + 80|0);
      $31 = HEAP32[$linecount>>2]|0;
      $cmp660 = ($31|0)>(0);
      if ($cmp660) {
       $32 = $31;$height$070 = $add31;$sec$072 = $28;$secnum$171 = $sub$ptr$div24$le;
      } else {
       $secnum$1$lcssa = $sub$ptr$div24$le;
       break;
      }
     }
    } else {
     $secnum$1$lcssa = $call57;
    }
   } while(0);
   $call55 = (_P_FindSectorFromLineTag($line,$secnum$1$lcssa)|0);
   $cmp56 = ($call55|0)>(-1);
   if ($cmp56) {
    $call5580 = $call55;$rtn$0$ph77 = 1;$speed$0$ph79 = $spec$select82;$stairsize$0$ph78 = $spec$select;
   } else {
    $rtn$0$ph$lcssa = 1;
    label = 31;
    break;
   }
  }
  if ((label|0) == 31) {
   return ($rtn$0$ph$lcssa|0);
  }
 }
 return (0)|0;
}
function _P_GiveAmmo($player,$ammo,$num) {
 $player = $player|0;
 $ammo = $ammo|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx37 = 0, $arrayidx5 = 0, $arrayidx52 = 0;
 var $arrayidx66 = 0, $arrayidx77 = 0, $cmp = 0, $cmp1 = 0, $cmp25 = 0, $cmp35 = 0, $cmp6 = 0, $cmp74 = 0, $div = 0, $mul = 0, $num$addr$0 = 0, $pendingweapon = 0, $pendingweapon55 = 0, $pendingweapon69 = 0, $pendingweapon80 = 0, $readyweapon = 0, $readyweapon45 = 0, $readyweapon59 = 0, $readyweapon73 = 0, $retval$0 = 0;
 var $shl = 0, $spec$select = 0, $spec$store$select = 0, $switch = 0, $switch38 = 0, $tobool = 0, $tobool32 = 0, $tobool38 = 0, $tobool53 = 0, $tobool67 = 0, $tobool78 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $cmp = ($ammo|0)==(5);
 L1: do {
  if ($cmp) {
   $retval$0 = 0;
  } else {
   $cmp1 = ($ammo>>>0)>(4);
   if ($cmp1) {
    HEAP32[$vararg_buffer>>2] = $ammo;
    _I_Error(151758,$vararg_buffer);
    // unreachable;
   }
   $arrayidx = (((($player)) + 164|0) + ($ammo<<2)|0);
   $0 = HEAP32[$arrayidx>>2]|0;
   $arrayidx5 = (((($player)) + 180|0) + ($ammo<<2)|0);
   $1 = HEAP32[$arrayidx5>>2]|0;
   $cmp6 = ($0|0)==($1|0);
   if ($cmp6) {
    $retval$0 = 0;
   } else {
    $tobool = ($num|0)==(0);
    $arrayidx10 = (49408 + ($ammo<<2)|0);
    $2 = HEAP32[$arrayidx10>>2]|0;
    if ($tobool) {
     $div = (($2|0) / 2)&-1;
     $num$addr$0 = $div;
    } else {
     $mul = Math_imul($2, $num)|0;
     $num$addr$0 = $mul;
    }
    $3 = HEAP32[99086]|0;
    $4 = $3 | 4;
    $5 = ($4|0)==(4);
    $shl = $5&1;
    $spec$select = $num$addr$0 << $shl;
    $add = (($spec$select) + ($0))|0;
    $cmp25 = ($add|0)>($1|0);
    $spec$store$select = $cmp25 ? $1 : $add;
    HEAP32[$arrayidx>>2] = $spec$store$select;
    $tobool32 = ($0|0)==(0);
    if ($tobool32) {
     switch ($ammo|0) {
     case 0:  {
      $readyweapon = ((($player)) + 120|0);
      $6 = HEAP32[$readyweapon>>2]|0;
      $cmp35 = ($6|0)==(0);
      if (!($cmp35)) {
       $retval$0 = 1;
       break L1;
      }
      $arrayidx37 = ((($player)) + 140|0);
      $7 = HEAP32[$arrayidx37>>2]|0;
      $tobool38 = ($7|0)==(0);
      $pendingweapon = ((($player)) + 124|0);
      if ($tobool38) {
       HEAP32[$pendingweapon>>2] = 1;
       $retval$0 = 1;
       break L1;
      } else {
       HEAP32[$pendingweapon>>2] = 3;
       $retval$0 = 1;
       break L1;
      }
      break;
     }
     case 1:  {
      $readyweapon45 = ((($player)) + 120|0);
      $8 = HEAP32[$readyweapon45>>2]|0;
      $switch = ($8>>>0)<(2);
      if (!($switch)) {
       $retval$0 = 1;
       break L1;
      }
      $arrayidx52 = ((($player)) + 136|0);
      $9 = HEAP32[$arrayidx52>>2]|0;
      $tobool53 = ($9|0)==(0);
      if ($tobool53) {
       $retval$0 = 1;
       break L1;
      }
      $pendingweapon55 = ((($player)) + 124|0);
      HEAP32[$pendingweapon55>>2] = 2;
      $retval$0 = 1;
      break L1;
      break;
     }
     case 2:  {
      $readyweapon59 = ((($player)) + 120|0);
      $10 = HEAP32[$readyweapon59>>2]|0;
      $switch38 = ($10>>>0)<(2);
      if (!($switch38)) {
       $retval$0 = 1;
       break L1;
      }
      $arrayidx66 = ((($player)) + 148|0);
      $11 = HEAP32[$arrayidx66>>2]|0;
      $tobool67 = ($11|0)==(0);
      if ($tobool67) {
       $retval$0 = 1;
       break L1;
      }
      $pendingweapon69 = ((($player)) + 124|0);
      HEAP32[$pendingweapon69>>2] = 5;
      $retval$0 = 1;
      break L1;
      break;
     }
     case 3:  {
      $readyweapon73 = ((($player)) + 120|0);
      $12 = HEAP32[$readyweapon73>>2]|0;
      $cmp74 = ($12|0)==(0);
      if (!($cmp74)) {
       $retval$0 = 1;
       break L1;
      }
      $arrayidx77 = ((($player)) + 144|0);
      $13 = HEAP32[$arrayidx77>>2]|0;
      $tobool78 = ($13|0)==(0);
      if ($tobool78) {
       $retval$0 = 1;
       break L1;
      }
      $pendingweapon80 = ((($player)) + 124|0);
      HEAP32[$pendingweapon80>>2] = 4;
      $retval$0 = 1;
      break L1;
      break;
     }
     default: {
      $retval$0 = 1;
      break L1;
     }
     }
    } else {
     $retval$0 = 1;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function _P_GiveWeapon($player,$weapon,$dropped) {
 $player = $player|0;
 $weapon = $weapon|0;
 $dropped = $dropped|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $ammo = 0, $ammo20 = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx36 = 0, $bonuscount = 0, $call27 = 0, $cmp = 0, $cmp15 = 0;
 var $cmp21 = 0, $gaveammo$0 = 0, $gaveweapon$0 = 0, $lor$ext = 0, $or$cond$not = 0, $or$cond1 = 0, $pendingweapon = 0, $pendingweapon42 = 0, $retval$0 = 0, $tobool = 0, $tobool2 = 0, $tobool3 = 0, $tobool37 = 0, $tobool45 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99094]|0;
 $tobool = ($0|0)==(0);
 $1 = HEAP32[99091]|0;
 $cmp = ($1|0)==(2);
 $or$cond$not = $tobool | $cmp;
 $tobool2 = ($dropped|0)!=(0);
 $or$cond1 = $tobool2 | $or$cond$not;
 if ($or$cond1) {
  $ammo20 = (496 + (($weapon*24)|0)|0);
  $6 = HEAP32[$ammo20>>2]|0;
  $cmp21 = ($6|0)==(5);
  if ($cmp21) {
   $gaveammo$0 = 0;
  } else {
   $$ = $tobool2 ? 1 : 2;
   $call27 = (_P_GiveAmmo($player,$6,$$)|0);
   $gaveammo$0 = $call27;
  }
  $arrayidx36 = (((($player)) + 128|0) + ($weapon<<2)|0);
  $7 = HEAP32[$arrayidx36>>2]|0;
  $tobool37 = ($7|0)==(0);
  if ($tobool37) {
   HEAP32[$arrayidx36>>2] = 1;
   $pendingweapon42 = ((($player)) + 124|0);
   HEAP32[$pendingweapon42>>2] = $weapon;
   $gaveweapon$0 = 1;
  } else {
   $gaveweapon$0 = 0;
  }
  $tobool45 = ($gaveammo$0|0)!=(0);
  $8 = $tobool45 | $gaveweapon$0;
  $lor$ext = $8&1;
  $retval$0 = $lor$ext;
  return ($retval$0|0);
 }
 $arrayidx = (((($player)) + 128|0) + ($weapon<<2)|0);
 $2 = HEAP32[$arrayidx>>2]|0;
 $tobool3 = ($2|0)==(0);
 if (!($tobool3)) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $bonuscount = ((($player)) + 232|0);
 $3 = HEAP32[$bonuscount>>2]|0;
 $add = (($3) + 6)|0;
 HEAP32[$bonuscount>>2] = $add;
 HEAP32[$arrayidx>>2] = 1;
 $tobool7 = ($1|0)==(0);
 $ammo = (496 + (($weapon*24)|0)|0);
 $4 = HEAP32[$ammo>>2]|0;
 if ($tobool7) {
  (_P_GiveAmmo($player,$4,2)|0);
 } else {
  (_P_GiveAmmo($player,$4,5)|0);
 }
 $pendingweapon = ((($player)) + 124|0);
 HEAP32[$pendingweapon>>2] = $weapon;
 $5 = HEAP32[99076]|0;
 $arrayidx14 = (181680 + (($5*288)|0)|0);
 $cmp15 = ($arrayidx14|0)==($player|0);
 if (!($cmp15)) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 _S_StartSound(0,33);
 $retval$0 = 0;
 return ($retval$0|0);
}
function _P_GivePower($player,$power) {
 $player = $player|0;
 $power = $power|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add$i = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx19 = 0, $arrayidx22 = 0, $arrayidx4 = 0, $arrayidx9 = 0, $cmp$i = 0, $flags = 0, $health$i = 0, $health8$i = 0, $or = 0, $retval$0 = 0, $spec$select$i = 0;
 var $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($power|0) {
 case 0:  {
  $arrayidx = ((($player)) + 52|0);
  HEAP32[$arrayidx>>2] = 1050;
  $retval$0 = 1;
  return ($retval$0|0);
  break;
 }
 case 2:  {
  $arrayidx4 = ((($player)) + 60|0);
  HEAP32[$arrayidx4>>2] = 2100;
  $0 = HEAP32[$player>>2]|0;
  $flags = ((($0)) + 104|0);
  $1 = HEAP32[$flags>>2]|0;
  $or = $1 | 262144;
  HEAP32[$flags>>2] = $or;
  $retval$0 = 1;
  return ($retval$0|0);
  break;
 }
 case 5:  {
  $arrayidx9 = ((($player)) + 72|0);
  HEAP32[$arrayidx9>>2] = 4200;
  $retval$0 = 1;
  return ($retval$0|0);
  break;
 }
 case 3:  {
  $arrayidx14 = ((($player)) + 64|0);
  HEAP32[$arrayidx14>>2] = 2100;
  $retval$0 = 1;
  return ($retval$0|0);
  break;
 }
 case 1:  {
  $health$i = ((($player)) + 40|0);
  $2 = HEAP32[$health$i>>2]|0;
  $cmp$i = ($2|0)>(99);
  $add$i = (($2) + 100)|0;
  $3 = ($add$i|0)<(100);
  $spec$select$i = $3 ? $add$i : 100;
  if (!($cmp$i)) {
   HEAP32[$health$i>>2] = $spec$select$i;
   $4 = HEAP32[$player>>2]|0;
   $health8$i = ((($4)) + 108|0);
   HEAP32[$health8$i>>2] = $spec$select$i;
  }
  $arrayidx19 = ((($player)) + 56|0);
  HEAP32[$arrayidx19>>2] = 1;
  $retval$0 = 1;
  return ($retval$0|0);
  break;
 }
 default: {
  $arrayidx22 = (((($player)) + 52|0) + ($power<<2)|0);
  $5 = HEAP32[$arrayidx22>>2]|0;
  $tobool = ($5|0)==(0);
  if (!($tobool)) {
   $retval$0 = 0;
   return ($retval$0|0);
  }
  HEAP32[$arrayidx22>>2] = 1;
  $retval$0 = 1;
  return ($retval$0|0);
 }
 }
 return (0)|0;
}
function _P_TouchSpecialThing($special,$toucher) {
 $special = $special|0;
 $toucher = $toucher|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add$i = 0, $add$i$i = 0, $add$i172 = 0;
 var $add$i194 = 0, $add$i208 = 0, $add$i230 = 0, $add$i244 = 0, $add$i266 = 0, $add$i280 = 0, $add$i302 = 0, $add$i327 = 0, $add$i334 = 0, $add303 = 0, $and = 0, $and252 = 0, $and252$lobit = 0, $and279 = 0, $and279$lobit = 0, $and289 = 0, $and289$lobit = 0, $and298 = 0, $armorpoints = 0, $armorpoints$i = 0;
 var $armorpoints$i124 = 0, $armorpoints$i130 = 0, $armortype = 0, $armortype1$i = 0, $armortype1$i126 = 0, $armortype1$i132 = 0, $arrayidx = 0, $arrayidx$i163 = 0, $arrayidx$i166 = 0, $arrayidx$i187 = 0, $arrayidx$i202 = 0, $arrayidx$i223 = 0, $arrayidx$i238 = 0, $arrayidx$i259 = 0, $arrayidx$i274 = 0, $arrayidx$i324 = 0, $arrayidx108 = 0, $arrayidx14$i = 0, $arrayidx19$i = 0, $arrayidx22$i = 0;
 var $arrayidx232 = 0, $arrayidx232$1 = 0, $arrayidx232$2 = 0, $arrayidx232$3 = 0, $arrayidx304 = 0, $arrayidx37$i = 0, $arrayidx37$i287 = 0, $arrayidx37$i309 = 0, $arrayidx4$i = 0, $arrayidx5$i = 0, $arrayidx5$i167 = 0, $arrayidx5$i188 = 0, $arrayidx5$i203 = 0, $arrayidx5$i224 = 0, $arrayidx5$i239 = 0, $arrayidx5$i260 = 0, $arrayidx5$i275 = 0, $arrayidx52$i = 0, $arrayidx52$i179 = 0, $arrayidx66$i = 0;
 var $arrayidx66$i215 = 0, $arrayidx68 = 0, $arrayidx77$i = 0, $arrayidx77$i251 = 0, $arrayidx78 = 0, $arrayidx88 = 0, $arrayidx9$i = 0, $arrayidx98 = 0, $backpack = 0, $bonuscount = 0, $bonuscount$i = 0, $bonuscount$i139 = 0, $bonuscount$i144 = 0, $bonuscount$i149 = 0, $bonuscount$i154 = 0, $bonuscount$i159 = 0, $call245 = 0, $call254 = 0, $call260 = 0, $call266 = 0;
 var $call272 = 0, $call282 = 0, $call292 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i125 = 0, $cmp$i131 = 0, $cmp$i326 = 0, $cmp$i333 = 0, $cmp128 = 0, $cmp145 = 0, $cmp18 = 0, $cmp2 = 0, $cmp25$i = 0, $cmp25$i173 = 0, $cmp25$i195 = 0, $cmp25$i209 = 0, $cmp25$i231 = 0, $cmp25$i245 = 0;
 var $cmp25$i267 = 0, $cmp25$i281 = 0, $cmp25$i303 = 0, $cmp28 = 0, $cmp305 = 0, $cmp35$i = 0, $cmp35$i286 = 0, $cmp35$i308 = 0, $cmp4 = 0, $cmp40 = 0, $cmp49 = 0, $cmp6$i = 0, $cmp6$i168 = 0, $cmp6$i189 = 0, $cmp6$i204 = 0, $cmp6$i225 = 0, $cmp6$i240 = 0, $cmp6$i261 = 0, $cmp6$i276 = 0, $cmp74$i = 0;
 var $cmp74$i250 = 0, $div$i = 0, $flags = 0, $flags$i = 0, $flags251 = 0, $flags278 = 0, $flags288 = 0, $flags297 = 0, $health = 0, $health$i = 0, $health$i$i = 0, $health$i332 = 0, $health16 = 0, $health23 = 0, $health38 = 0, $health46 = 0, $health52 = 0, $health55 = 0, $health8$i = 0, $health8$i$i = 0;
 var $health8$i337 = 0, $height = 0, $inc = 0, $inc26 = 0, $inc301 = 0, $itemcount = 0, $message = 0, $message101 = 0, $message111 = 0, $message121 = 0, $message130 = 0, $message138 = 0, $message14 = 0, $message144 = 0, $message153 = 0, $message159 = 0, $message165 = 0, $message171 = 0, $message185 = 0, $message191 = 0;
 var $message197 = 0, $message203 = 0, $message209 = 0, $message215 = 0, $message221 = 0, $message227 = 0, $message24 = 0, $message243 = 0, $message249 = 0, $message258 = 0, $message264 = 0, $message270 = 0, $message276 = 0, $message286 = 0, $message296 = 0, $message36 = 0, $message47 = 0, $message57 = 0, $message61 = 0, $message71 = 0;
 var $message81 = 0, $message91 = 0, $mul = 0, $mul$1 = 0, $mul$2 = 0, $mul$3 = 0, $mul$i = 0, $mul$i191 = 0, $mul$i227 = 0, $mul$i263 = 0, $or$cond = 0, $or$i = 0, $pendingweapon = 0, $pendingweapon$i = 0, $pendingweapon$i289 = 0, $pendingweapon$i311 = 0, $pendingweapon55$i = 0, $pendingweapon55$i182 = 0, $pendingweapon69$i = 0, $pendingweapon69$i218 = 0;
 var $pendingweapon80$i = 0, $pendingweapon80$i254 = 0, $player3 = 0, $readyweapon = 0, $readyweapon$i = 0, $readyweapon$i285 = 0, $readyweapon$i307 = 0, $readyweapon45$i = 0, $readyweapon45$i177 = 0, $readyweapon59$i = 0, $readyweapon59$i213 = 0, $readyweapon73$i = 0, $readyweapon73$i249 = 0, $shl$i = 0, $shl$i170 = 0, $shl$i192 = 0, $shl$i206 = 0, $shl$i228 = 0, $shl$i242 = 0, $shl$i264 = 0;
 var $shl$i278 = 0, $shl$i300 = 0, $sound$0 = 0, $spec$select = 0, $spec$select$i = 0, $spec$select$i$i = 0, $spec$select$i171 = 0, $spec$select$i193 = 0, $spec$select$i207 = 0, $spec$select$i229 = 0, $spec$select$i243 = 0, $spec$select$i265 = 0, $spec$select$i279 = 0, $spec$select$i301 = 0, $spec$select$i328 = 0, $spec$select$i335 = 0, $spec$select122 = 0, $spec$select123 = 0, $spec$store$select$i = 0, $spec$store$select$i174 = 0;
 var $spec$store$select$i196 = 0, $spec$store$select$i210 = 0, $spec$store$select$i232 = 0, $spec$store$select$i246 = 0, $spec$store$select$i268 = 0, $spec$store$select$i282 = 0, $spec$store$select$i304 = 0, $sprite = 0, $sub = 0, $switch$i = 0, $switch$i178 = 0, $switch38$i = 0, $switch38$i214 = 0, $tobool$i318 = 0, $tobool103 = 0, $tobool109 = 0, $tobool113 = 0, $tobool173 = 0, $tobool229 = 0, $tobool246 = 0;
 var $tobool255 = 0, $tobool261 = 0, $tobool267 = 0, $tobool273 = 0, $tobool283 = 0, $tobool293 = 0, $tobool299 = 0, $tobool32 = 0, $tobool32$i = 0, $tobool32$i175 = 0, $tobool32$i197 = 0, $tobool32$i211 = 0, $tobool32$i233 = 0, $tobool32$i247 = 0, $tobool32$i269 = 0, $tobool32$i283 = 0, $tobool32$i305 = 0, $tobool38$i = 0, $tobool38$i288 = 0, $tobool38$i310 = 0;
 var $tobool53$i = 0, $tobool53$i180 = 0, $tobool59 = 0, $tobool63 = 0, $tobool67$i = 0, $tobool67$i216 = 0, $tobool69 = 0, $tobool73 = 0, $tobool78$i = 0, $tobool78$i252 = 0, $tobool79 = 0, $tobool83 = 0, $tobool89 = 0, $tobool93 = 0, $tobool99 = 0, $vararg_buffer = 0, $z = 0, $z1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $z = ((($special)) + 20|0);
 $0 = HEAP32[$z>>2]|0;
 $z1 = ((($toucher)) + 20|0);
 $1 = HEAP32[$z1>>2]|0;
 $sub = (($0) - ($1))|0;
 $height = ((($toucher)) + 68|0);
 $2 = HEAP32[$height>>2]|0;
 $cmp = ($sub|0)>($2|0);
 $cmp2 = ($sub|0)<(-524288);
 $or$cond = $cmp | $cmp2;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $player3 = ((($toucher)) + 132|0);
 $3 = HEAP32[$player3>>2]|0;
 $health = ((($toucher)) + 108|0);
 $4 = HEAP32[$health>>2]|0;
 $cmp4 = ($4|0)<(1);
 if ($cmp4) {
  STACKTOP = sp;return;
 }
 $sprite = ((($special)) + 36|0);
 $5 = HEAP32[$sprite>>2]|0;
 L7: do {
  switch ($5|0) {
  case 55:  {
   $armorpoints$i = ((($3)) + 44|0);
   $6 = HEAP32[$armorpoints$i>>2]|0;
   $cmp$i = ($6|0)<(100);
   if ($cmp$i) {
    $armortype1$i = ((($3)) + 48|0);
    HEAP32[$armortype1$i>>2] = 1;
    HEAP32[$armorpoints$i>>2] = 100;
    $message = ((($3)) + 224|0);
    HEAP32[$message>>2] = 151782;
    $sound$0 = 32;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 56:  {
   $armorpoints$i124 = ((($3)) + 44|0);
   $7 = HEAP32[$armorpoints$i124>>2]|0;
   $cmp$i125 = ($7|0)<(200);
   if ($cmp$i125) {
    $armortype1$i126 = ((($3)) + 48|0);
    HEAP32[$armortype1$i126>>2] = 2;
    HEAP32[$armorpoints$i124>>2] = 200;
    $message14 = ((($3)) + 224|0);
    HEAP32[$message14>>2] = 151803;
    $sound$0 = 32;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 60:  {
   $health16 = ((($3)) + 40|0);
   $8 = HEAP32[$health16>>2]|0;
   $inc = (($8) + 1)|0;
   $cmp18 = ($8|0)>(199);
   $spec$select = $cmp18 ? 200 : $inc;
   HEAP32[$health16>>2] = $spec$select;
   $9 = HEAP32[$3>>2]|0;
   $health23 = ((($9)) + 108|0);
   HEAP32[$health23>>2] = $spec$select;
   $message24 = ((($3)) + 224|0);
   HEAP32[$message24>>2] = 151828;
   $sound$0 = 32;
   break;
  }
  case 61:  {
   $armorpoints = ((($3)) + 44|0);
   $10 = HEAP32[$armorpoints>>2]|0;
   $inc26 = (($10) + 1)|0;
   $cmp28 = ($10|0)>(199);
   $spec$select122 = $cmp28 ? 200 : $inc26;
   HEAP32[$armorpoints>>2] = $spec$select122;
   $armortype = ((($3)) + 48|0);
   $11 = HEAP32[$armortype>>2]|0;
   $tobool32 = ($11|0)==(0);
   if ($tobool32) {
    HEAP32[$armortype>>2] = 1;
   }
   $message36 = ((($3)) + 224|0);
   HEAP32[$message36>>2] = 151854;
   $sound$0 = 32;
   break;
  }
  case 70:  {
   $health38 = ((($3)) + 40|0);
   $12 = HEAP32[$health38>>2]|0;
   $add = (($12) + 100)|0;
   $cmp40 = ($12|0)>(100);
   $spec$select123 = $cmp40 ? 200 : $add;
   HEAP32[$health38>>2] = $spec$select123;
   $13 = HEAP32[$3>>2]|0;
   $health46 = ((($13)) + 108|0);
   HEAP32[$health46>>2] = $spec$select123;
   $message47 = ((($3)) + 224|0);
   HEAP32[$message47>>2] = 151880;
   $sound$0 = 93;
   break;
  }
  case 74:  {
   $14 = HEAP32[32140]|0;
   $cmp49 = ($14|0)==(2);
   if (!($cmp49)) {
    STACKTOP = sp;return;
   }
   $health52 = ((($3)) + 40|0);
   HEAP32[$health52>>2] = 200;
   $15 = HEAP32[$3>>2]|0;
   $health55 = ((($15)) + 108|0);
   HEAP32[$health55>>2] = 200;
   $armorpoints$i130 = ((($3)) + 44|0);
   $16 = HEAP32[$armorpoints$i130>>2]|0;
   $cmp$i131 = ($16|0)<(200);
   if ($cmp$i131) {
    $armortype1$i132 = ((($3)) + 48|0);
    HEAP32[$armortype1$i132>>2] = 2;
    HEAP32[$armorpoints$i130>>2] = 200;
   }
   $message57 = ((($3)) + 224|0);
   HEAP32[$message57>>2] = 151893;
   $sound$0 = 93;
   break;
  }
  case 62:  {
   $arrayidx = ((($3)) + 76|0);
   $17 = HEAP32[$arrayidx>>2]|0;
   $tobool59 = ($17|0)==(0);
   if ($tobool59) {
    $message61 = ((($3)) + 224|0);
    HEAP32[$message61>>2] = 151905;
    $bonuscount$i = ((($3)) + 232|0);
    HEAP32[$bonuscount$i>>2] = 6;
    HEAP32[$arrayidx>>2] = 1;
   }
   $18 = HEAP32[99094]|0;
   $tobool63 = ($18|0)==(0);
   if ($tobool63) {
    $sound$0 = 32;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 64:  {
   $arrayidx68 = ((($3)) + 80|0);
   $19 = HEAP32[$arrayidx68>>2]|0;
   $tobool69 = ($19|0)==(0);
   if ($tobool69) {
    $message71 = ((($3)) + 224|0);
    HEAP32[$message71>>2] = 151931;
    $bonuscount$i139 = ((($3)) + 232|0);
    HEAP32[$bonuscount$i139>>2] = 6;
    HEAP32[$arrayidx68>>2] = 1;
   }
   $20 = HEAP32[99094]|0;
   $tobool73 = ($20|0)==(0);
   if ($tobool73) {
    $sound$0 = 32;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 63:  {
   $arrayidx78 = ((($3)) + 84|0);
   $21 = HEAP32[$arrayidx78>>2]|0;
   $tobool79 = ($21|0)==(0);
   if ($tobool79) {
    $message81 = ((($3)) + 224|0);
    HEAP32[$message81>>2] = 151959;
    $bonuscount$i144 = ((($3)) + 232|0);
    HEAP32[$bonuscount$i144>>2] = 6;
    HEAP32[$arrayidx78>>2] = 1;
   }
   $22 = HEAP32[99094]|0;
   $tobool83 = ($22|0)==(0);
   if ($tobool83) {
    $sound$0 = 32;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 65:  {
   $arrayidx88 = ((($3)) + 88|0);
   $23 = HEAP32[$arrayidx88>>2]|0;
   $tobool89 = ($23|0)==(0);
   if ($tobool89) {
    $message91 = ((($3)) + 224|0);
    HEAP32[$message91>>2] = 151984;
    $bonuscount$i149 = ((($3)) + 232|0);
    HEAP32[$bonuscount$i149>>2] = 6;
    HEAP32[$arrayidx88>>2] = 1;
   }
   $24 = HEAP32[99094]|0;
   $tobool93 = ($24|0)==(0);
   if ($tobool93) {
    $sound$0 = 32;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 67:  {
   $arrayidx98 = ((($3)) + 92|0);
   $25 = HEAP32[$arrayidx98>>2]|0;
   $tobool99 = ($25|0)==(0);
   if ($tobool99) {
    $message101 = ((($3)) + 224|0);
    HEAP32[$message101>>2] = 152012;
    $bonuscount$i154 = ((($3)) + 232|0);
    HEAP32[$bonuscount$i154>>2] = 6;
    HEAP32[$arrayidx98>>2] = 1;
   }
   $26 = HEAP32[99094]|0;
   $tobool103 = ($26|0)==(0);
   if ($tobool103) {
    $sound$0 = 32;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 66:  {
   $arrayidx108 = ((($3)) + 96|0);
   $27 = HEAP32[$arrayidx108>>2]|0;
   $tobool109 = ($27|0)==(0);
   if ($tobool109) {
    $message111 = ((($3)) + 224|0);
    HEAP32[$message111>>2] = 152042;
    $bonuscount$i159 = ((($3)) + 232|0);
    HEAP32[$bonuscount$i159>>2] = 6;
    HEAP32[$arrayidx108>>2] = 1;
   }
   $28 = HEAP32[99094]|0;
   $tobool113 = ($28|0)==(0);
   if ($tobool113) {
    $sound$0 = 32;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 68:  {
   $health$i332 = ((($3)) + 40|0);
   $29 = HEAP32[$health$i332>>2]|0;
   $cmp$i333 = ($29|0)>(99);
   $add$i334 = (($29) + 10)|0;
   $30 = ($add$i334|0)<(100);
   $spec$select$i335 = $30 ? $add$i334 : 100;
   if ($cmp$i333) {
    STACKTOP = sp;return;
   } else {
    HEAP32[$health$i332>>2] = $spec$select$i335;
    $31 = HEAP32[$3>>2]|0;
    $health8$i337 = ((($31)) + 108|0);
    HEAP32[$health8$i337>>2] = $spec$select$i335;
    $message121 = ((($3)) + 224|0);
    HEAP32[$message121>>2] = 152069;
    $sound$0 = 32;
    break L7;
   }
   break;
  }
  case 69:  {
   $health$i = ((($3)) + 40|0);
   $32 = HEAP32[$health$i>>2]|0;
   $cmp$i326 = ($32|0)>(99);
   $add$i327 = (($32) + 25)|0;
   $33 = ($add$i327|0)<(100);
   $spec$select$i328 = $33 ? $add$i327 : 100;
   if ($cmp$i326) {
    STACKTOP = sp;return;
   }
   HEAP32[$health$i>>2] = $spec$select$i328;
   $34 = HEAP32[$3>>2]|0;
   $health8$i = ((($34)) + 108|0);
   HEAP32[$health8$i>>2] = $spec$select$i328;
   $cmp128 = ($spec$select$i328|0)<(25);
   $message130 = ((($3)) + 224|0);
   if ($cmp128) {
    HEAP32[$message130>>2] = 152091;
    $sound$0 = 32;
    break L7;
   } else {
    HEAP32[$message130>>2] = 152133;
    $sound$0 = 32;
    break L7;
   }
   break;
  }
  case 71:  {
   $arrayidx$i324 = ((($3)) + 52|0);
   HEAP32[$arrayidx$i324>>2] = 1050;
   $message138 = ((($3)) + 224|0);
   HEAP32[$message138>>2] = 152154;
   $sound$0 = 93;
   break;
  }
  case 72:  {
   $health$i$i = ((($3)) + 40|0);
   $35 = HEAP32[$health$i$i>>2]|0;
   $cmp$i$i = ($35|0)>(99);
   $add$i$i = (($35) + 100)|0;
   $36 = ($add$i$i|0)<(100);
   $spec$select$i$i = $36 ? $add$i$i : 100;
   if (!($cmp$i$i)) {
    HEAP32[$health$i$i>>2] = $spec$select$i$i;
    $37 = HEAP32[$3>>2]|0;
    $health8$i$i = ((($37)) + 108|0);
    HEAP32[$health8$i$i>>2] = $spec$select$i$i;
   }
   $arrayidx19$i = ((($3)) + 56|0);
   HEAP32[$arrayidx19$i>>2] = 1;
   $message144 = ((($3)) + 224|0);
   HEAP32[$message144>>2] = 152171;
   $readyweapon = ((($3)) + 120|0);
   $38 = HEAP32[$readyweapon>>2]|0;
   $cmp145 = ($38|0)==(0);
   if ($cmp145) {
    $sound$0 = 93;
   } else {
    $pendingweapon = ((($3)) + 124|0);
    HEAP32[$pendingweapon>>2] = 0;
    $sound$0 = 93;
   }
   break;
  }
  case 73:  {
   $arrayidx4$i = ((($3)) + 60|0);
   HEAP32[$arrayidx4$i>>2] = 2100;
   $39 = HEAP32[$3>>2]|0;
   $flags$i = ((($39)) + 104|0);
   $40 = HEAP32[$flags$i>>2]|0;
   $or$i = $40 | 262144;
   HEAP32[$flags$i>>2] = $or$i;
   $message153 = ((($3)) + 224|0);
   HEAP32[$message153>>2] = 152180;
   $sound$0 = 93;
   break;
  }
  case 75:  {
   $arrayidx14$i = ((($3)) + 64|0);
   HEAP32[$arrayidx14$i>>2] = 2100;
   $message159 = ((($3)) + 224|0);
   HEAP32[$message159>>2] = 152201;
   $sound$0 = 93;
   break;
  }
  case 76:  {
   $arrayidx22$i = ((($3)) + 68|0);
   $41 = HEAP32[$arrayidx22$i>>2]|0;
   $tobool$i318 = ($41|0)==(0);
   if ($tobool$i318) {
    HEAP32[$arrayidx22$i>>2] = 1;
    $message165 = ((($3)) + 224|0);
    HEAP32[$message165>>2] = 152226;
    $sound$0 = 93;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 77:  {
   $arrayidx9$i = ((($3)) + 72|0);
   HEAP32[$arrayidx9$i>>2] = 4200;
   $message171 = ((($3)) + 224|0);
   HEAP32[$message171>>2] = 152244;
   $sound$0 = 93;
   break;
  }
  case 78:  {
   $flags = ((($special)) + 104|0);
   $42 = HEAP32[$flags>>2]|0;
   $and = $42 & 131072;
   $tobool173 = ($and|0)==(0);
   $arrayidx$i274 = ((($3)) + 164|0);
   $43 = HEAP32[$arrayidx$i274>>2]|0;
   $arrayidx5$i275 = ((($3)) + 180|0);
   $44 = HEAP32[$arrayidx5$i275>>2]|0;
   $cmp6$i276 = ($43|0)==($44|0);
   do {
    if ($tobool173) {
     if ($cmp6$i276) {
      STACKTOP = sp;return;
     }
     $50 = HEAP32[99086]|0;
     $51 = $50 | 4;
     $52 = ($51|0)==(4);
     $shl$i278 = $52&1;
     $spec$select$i279 = 10 << $shl$i278;
     $add$i280 = (($spec$select$i279) + ($43))|0;
     $cmp25$i281 = ($add$i280|0)>($44|0);
     $spec$store$select$i282 = $cmp25$i281 ? $44 : $add$i280;
     HEAP32[$arrayidx$i274>>2] = $spec$store$select$i282;
     $tobool32$i283 = ($43|0)==(0);
     if ($tobool32$i283) {
      $readyweapon$i285 = ((($3)) + 120|0);
      $53 = HEAP32[$readyweapon$i285>>2]|0;
      $cmp35$i286 = ($53|0)==(0);
      if ($cmp35$i286) {
       $arrayidx37$i287 = ((($3)) + 140|0);
       $54 = HEAP32[$arrayidx37$i287>>2]|0;
       $tobool38$i288 = ($54|0)==(0);
       $pendingweapon$i289 = ((($3)) + 124|0);
       if ($tobool38$i288) {
        HEAP32[$pendingweapon$i289>>2] = 1;
        break;
       } else {
        HEAP32[$pendingweapon$i289>>2] = 3;
        break;
       }
      }
     }
    } else {
     if ($cmp6$i276) {
      STACKTOP = sp;return;
     }
     $div$i = (10 / 2)&-1;
     $45 = HEAP32[99086]|0;
     $46 = $45 | 4;
     $47 = ($46|0)==(4);
     $shl$i300 = $47&1;
     $spec$select$i301 = $div$i << $shl$i300;
     $add$i302 = (($spec$select$i301) + ($43))|0;
     $cmp25$i303 = ($add$i302|0)>($44|0);
     $spec$store$select$i304 = $cmp25$i303 ? $44 : $add$i302;
     HEAP32[$arrayidx$i274>>2] = $spec$store$select$i304;
     $tobool32$i305 = ($43|0)==(0);
     if ($tobool32$i305) {
      $readyweapon$i307 = ((($3)) + 120|0);
      $48 = HEAP32[$readyweapon$i307>>2]|0;
      $cmp35$i308 = ($48|0)==(0);
      if ($cmp35$i308) {
       $arrayidx37$i309 = ((($3)) + 140|0);
       $49 = HEAP32[$arrayidx37$i309>>2]|0;
       $tobool38$i310 = ($49|0)==(0);
       $pendingweapon$i311 = ((($3)) + 124|0);
       if ($tobool38$i310) {
        HEAP32[$pendingweapon$i311>>2] = 1;
        break;
       } else {
        HEAP32[$pendingweapon$i311>>2] = 3;
        break;
       }
      }
     }
    }
   } while(0);
   $message185 = ((($3)) + 224|0);
   HEAP32[$message185>>2] = 152270;
   $sound$0 = 32;
   break;
  }
  case 79:  {
   $arrayidx$i259 = ((($3)) + 164|0);
   $55 = HEAP32[$arrayidx$i259>>2]|0;
   $arrayidx5$i260 = ((($3)) + 180|0);
   $56 = HEAP32[$arrayidx5$i260>>2]|0;
   $cmp6$i261 = ($55|0)==($56|0);
   if ($cmp6$i261) {
    STACKTOP = sp;return;
   }
   $mul$i263 = (5*10)|0;
   $57 = HEAP32[99086]|0;
   $58 = $57 | 4;
   $59 = ($58|0)==(4);
   $shl$i264 = $59&1;
   $spec$select$i265 = $mul$i263 << $shl$i264;
   $add$i266 = (($spec$select$i265) + ($55))|0;
   $cmp25$i267 = ($add$i266|0)>($56|0);
   $spec$store$select$i268 = $cmp25$i267 ? $56 : $add$i266;
   HEAP32[$arrayidx$i259>>2] = $spec$store$select$i268;
   $tobool32$i269 = ($55|0)==(0);
   do {
    if ($tobool32$i269) {
     $readyweapon$i = ((($3)) + 120|0);
     $60 = HEAP32[$readyweapon$i>>2]|0;
     $cmp35$i = ($60|0)==(0);
     if ($cmp35$i) {
      $arrayidx37$i = ((($3)) + 140|0);
      $61 = HEAP32[$arrayidx37$i>>2]|0;
      $tobool38$i = ($61|0)==(0);
      $pendingweapon$i = ((($3)) + 124|0);
      if ($tobool38$i) {
       HEAP32[$pendingweapon$i>>2] = 1;
       break;
      } else {
       HEAP32[$pendingweapon$i>>2] = 3;
       break;
      }
     }
    }
   } while(0);
   $message191 = ((($3)) + 224|0);
   HEAP32[$message191>>2] = 152288;
   $sound$0 = 32;
   break;
  }
  case 80:  {
   $arrayidx$i238 = ((($3)) + 176|0);
   $62 = HEAP32[$arrayidx$i238>>2]|0;
   $arrayidx5$i239 = ((($3)) + 192|0);
   $63 = HEAP32[$arrayidx5$i239>>2]|0;
   $cmp6$i240 = ($62|0)==($63|0);
   if ($cmp6$i240) {
    STACKTOP = sp;return;
   }
   $64 = HEAP32[99086]|0;
   $65 = $64 | 4;
   $66 = ($65|0)==(4);
   $shl$i242 = $66&1;
   $spec$select$i243 = 1 << $shl$i242;
   $add$i244 = (($spec$select$i243) + ($62))|0;
   $cmp25$i245 = ($add$i244|0)>($63|0);
   $spec$store$select$i246 = $cmp25$i245 ? $63 : $add$i244;
   HEAP32[$arrayidx$i238>>2] = $spec$store$select$i246;
   $tobool32$i247 = ($62|0)==(0);
   if ($tobool32$i247) {
    $readyweapon73$i249 = ((($3)) + 120|0);
    $67 = HEAP32[$readyweapon73$i249>>2]|0;
    $cmp74$i250 = ($67|0)==(0);
    if ($cmp74$i250) {
     $arrayidx77$i251 = ((($3)) + 144|0);
     $68 = HEAP32[$arrayidx77$i251>>2]|0;
     $tobool78$i252 = ($68|0)==(0);
     if (!($tobool78$i252)) {
      $pendingweapon80$i254 = ((($3)) + 124|0);
      HEAP32[$pendingweapon80$i254>>2] = 4;
     }
    }
   }
   $message197 = ((($3)) + 224|0);
   HEAP32[$message197>>2] = 152316;
   $sound$0 = 32;
   break;
  }
  case 81:  {
   $arrayidx$i223 = ((($3)) + 176|0);
   $69 = HEAP32[$arrayidx$i223>>2]|0;
   $arrayidx5$i224 = ((($3)) + 192|0);
   $70 = HEAP32[$arrayidx5$i224>>2]|0;
   $cmp6$i225 = ($69|0)==($70|0);
   if ($cmp6$i225) {
    STACKTOP = sp;return;
   }
   $mul$i227 = 5;
   $71 = HEAP32[99086]|0;
   $72 = $71 | 4;
   $73 = ($72|0)==(4);
   $shl$i228 = $73&1;
   $spec$select$i229 = $mul$i227 << $shl$i228;
   $add$i230 = (($spec$select$i229) + ($69))|0;
   $cmp25$i231 = ($add$i230|0)>($70|0);
   $spec$store$select$i232 = $cmp25$i231 ? $70 : $add$i230;
   HEAP32[$arrayidx$i223>>2] = $spec$store$select$i232;
   $tobool32$i233 = ($69|0)==(0);
   if ($tobool32$i233) {
    $readyweapon73$i = ((($3)) + 120|0);
    $74 = HEAP32[$readyweapon73$i>>2]|0;
    $cmp74$i = ($74|0)==(0);
    if ($cmp74$i) {
     $arrayidx77$i = ((($3)) + 144|0);
     $75 = HEAP32[$arrayidx77$i>>2]|0;
     $tobool78$i = ($75|0)==(0);
     if (!($tobool78$i)) {
      $pendingweapon80$i = ((($3)) + 124|0);
      HEAP32[$pendingweapon80$i>>2] = 4;
     }
    }
   }
   $message203 = ((($3)) + 224|0);
   HEAP32[$message203>>2] = 152336;
   $sound$0 = 32;
   break;
  }
  case 82:  {
   $arrayidx$i202 = ((($3)) + 172|0);
   $76 = HEAP32[$arrayidx$i202>>2]|0;
   $arrayidx5$i203 = ((($3)) + 188|0);
   $77 = HEAP32[$arrayidx5$i203>>2]|0;
   $cmp6$i204 = ($76|0)==($77|0);
   if ($cmp6$i204) {
    STACKTOP = sp;return;
   }
   $78 = HEAP32[99086]|0;
   $79 = $78 | 4;
   $80 = ($79|0)==(4);
   $shl$i206 = $80&1;
   $spec$select$i207 = 20 << $shl$i206;
   $add$i208 = (($spec$select$i207) + ($76))|0;
   $cmp25$i209 = ($add$i208|0)>($77|0);
   $spec$store$select$i210 = $cmp25$i209 ? $77 : $add$i208;
   HEAP32[$arrayidx$i202>>2] = $spec$store$select$i210;
   $tobool32$i211 = ($76|0)==(0);
   if ($tobool32$i211) {
    $readyweapon59$i213 = ((($3)) + 120|0);
    $81 = HEAP32[$readyweapon59$i213>>2]|0;
    $switch38$i214 = ($81>>>0)<(2);
    if ($switch38$i214) {
     $arrayidx66$i215 = ((($3)) + 148|0);
     $82 = HEAP32[$arrayidx66$i215>>2]|0;
     $tobool67$i216 = ($82|0)==(0);
     if (!($tobool67$i216)) {
      $pendingweapon69$i218 = ((($3)) + 124|0);
      HEAP32[$pendingweapon69$i218>>2] = 5;
     }
    }
   }
   $message209 = ((($3)) + 224|0);
   HEAP32[$message209>>2] = 152364;
   $sound$0 = 32;
   break;
  }
  case 83:  {
   $arrayidx$i187 = ((($3)) + 172|0);
   $83 = HEAP32[$arrayidx$i187>>2]|0;
   $arrayidx5$i188 = ((($3)) + 188|0);
   $84 = HEAP32[$arrayidx5$i188>>2]|0;
   $cmp6$i189 = ($83|0)==($84|0);
   if ($cmp6$i189) {
    STACKTOP = sp;return;
   }
   $mul$i191 = (5*20)|0;
   $85 = HEAP32[99086]|0;
   $86 = $85 | 4;
   $87 = ($86|0)==(4);
   $shl$i192 = $87&1;
   $spec$select$i193 = $mul$i191 << $shl$i192;
   $add$i194 = (($spec$select$i193) + ($83))|0;
   $cmp25$i195 = ($add$i194|0)>($84|0);
   $spec$store$select$i196 = $cmp25$i195 ? $84 : $add$i194;
   HEAP32[$arrayidx$i187>>2] = $spec$store$select$i196;
   $tobool32$i197 = ($83|0)==(0);
   if ($tobool32$i197) {
    $readyweapon59$i = ((($3)) + 120|0);
    $88 = HEAP32[$readyweapon59$i>>2]|0;
    $switch38$i = ($88>>>0)<(2);
    if ($switch38$i) {
     $arrayidx66$i = ((($3)) + 148|0);
     $89 = HEAP32[$arrayidx66$i>>2]|0;
     $tobool67$i = ($89|0)==(0);
     if (!($tobool67$i)) {
      $pendingweapon69$i = ((($3)) + 124|0);
      HEAP32[$pendingweapon69$i>>2] = 5;
     }
    }
   }
   $message215 = ((($3)) + 224|0);
   HEAP32[$message215>>2] = 152390;
   $sound$0 = 32;
   break;
  }
  case 84:  {
   $arrayidx$i166 = ((($3)) + 168|0);
   $90 = HEAP32[$arrayidx$i166>>2]|0;
   $arrayidx5$i167 = ((($3)) + 184|0);
   $91 = HEAP32[$arrayidx5$i167>>2]|0;
   $cmp6$i168 = ($90|0)==($91|0);
   if ($cmp6$i168) {
    STACKTOP = sp;return;
   }
   $92 = HEAP32[99086]|0;
   $93 = $92 | 4;
   $94 = ($93|0)==(4);
   $shl$i170 = $94&1;
   $spec$select$i171 = 4 << $shl$i170;
   $add$i172 = (($spec$select$i171) + ($90))|0;
   $cmp25$i173 = ($add$i172|0)>($91|0);
   $spec$store$select$i174 = $cmp25$i173 ? $91 : $add$i172;
   HEAP32[$arrayidx$i166>>2] = $spec$store$select$i174;
   $tobool32$i175 = ($90|0)==(0);
   if ($tobool32$i175) {
    $readyweapon45$i177 = ((($3)) + 120|0);
    $95 = HEAP32[$readyweapon45$i177>>2]|0;
    $switch$i178 = ($95>>>0)<(2);
    if ($switch$i178) {
     $arrayidx52$i179 = ((($3)) + 136|0);
     $96 = HEAP32[$arrayidx52$i179>>2]|0;
     $tobool53$i180 = ($96|0)==(0);
     if (!($tobool53$i180)) {
      $pendingweapon55$i182 = ((($3)) + 124|0);
      HEAP32[$pendingweapon55$i182>>2] = 2;
     }
    }
   }
   $message221 = ((($3)) + 224|0);
   HEAP32[$message221>>2] = 152421;
   $sound$0 = 32;
   break;
  }
  case 85:  {
   $arrayidx$i163 = ((($3)) + 168|0);
   $97 = HEAP32[$arrayidx$i163>>2]|0;
   $arrayidx5$i = ((($3)) + 184|0);
   $98 = HEAP32[$arrayidx5$i>>2]|0;
   $cmp6$i = ($97|0)==($98|0);
   if ($cmp6$i) {
    STACKTOP = sp;return;
   }
   $mul$i = 5<<2;
   $99 = HEAP32[99086]|0;
   $100 = $99 | 4;
   $101 = ($100|0)==(4);
   $shl$i = $101&1;
   $spec$select$i = $mul$i << $shl$i;
   $add$i = (($spec$select$i) + ($97))|0;
   $cmp25$i = ($add$i|0)>($98|0);
   $spec$store$select$i = $cmp25$i ? $98 : $add$i;
   HEAP32[$arrayidx$i163>>2] = $spec$store$select$i;
   $tobool32$i = ($97|0)==(0);
   if ($tobool32$i) {
    $readyweapon45$i = ((($3)) + 120|0);
    $102 = HEAP32[$readyweapon45$i>>2]|0;
    $switch$i = ($102>>>0)<(2);
    if ($switch$i) {
     $arrayidx52$i = ((($3)) + 136|0);
     $103 = HEAP32[$arrayidx52$i>>2]|0;
     $tobool53$i = ($103|0)==(0);
     if (!($tobool53$i)) {
      $pendingweapon55$i = ((($3)) + 124|0);
      HEAP32[$pendingweapon55$i>>2] = 2;
     }
    }
   }
   $message227 = ((($3)) + 224|0);
   HEAP32[$message227>>2] = 152449;
   $sound$0 = 32;
   break;
  }
  case 86:  {
   $backpack = ((($3)) + 100|0);
   $104 = HEAP32[$backpack>>2]|0;
   $tobool229 = ($104|0)==(0);
   if ($tobool229) {
    $arrayidx232 = ((($3)) + 180|0);
    $105 = HEAP32[$arrayidx232>>2]|0;
    $mul = $105 << 1;
    HEAP32[$arrayidx232>>2] = $mul;
    $arrayidx232$1 = ((($3)) + 184|0);
    $106 = HEAP32[$arrayidx232$1>>2]|0;
    $mul$1 = $106 << 1;
    HEAP32[$arrayidx232$1>>2] = $mul$1;
    $arrayidx232$2 = ((($3)) + 188|0);
    $107 = HEAP32[$arrayidx232$2>>2]|0;
    $mul$2 = $107 << 1;
    HEAP32[$arrayidx232$2>>2] = $mul$2;
    $arrayidx232$3 = ((($3)) + 192|0);
    $108 = HEAP32[$arrayidx232$3>>2]|0;
    $mul$3 = $108 << 1;
    HEAP32[$arrayidx232$3>>2] = $mul$3;
    HEAP32[$backpack>>2] = 1;
   }
   (_P_GiveAmmo($3,0,1)|0);
   (_P_GiveAmmo($3,1,1)|0);
   (_P_GiveAmmo($3,2,1)|0);
   (_P_GiveAmmo($3,3,1)|0);
   $message243 = ((($3)) + 224|0);
   HEAP32[$message243>>2] = 152484;
   $sound$0 = 32;
   break;
  }
  case 87:  {
   $call245 = (_P_GiveWeapon($3,6,0)|0);
   $tobool246 = ($call245|0)==(0);
   if ($tobool246) {
    STACKTOP = sp;return;
   } else {
    $message249 = ((($3)) + 224|0);
    HEAP32[$message249>>2] = 152519;
    $sound$0 = 33;
    break L7;
   }
   break;
  }
  case 88:  {
   $flags251 = ((($special)) + 104|0);
   $109 = HEAP32[$flags251>>2]|0;
   $and252 = $109 >>> 17;
   $and252$lobit = $and252 & 1;
   $call254 = (_P_GiveWeapon($3,3,$and252$lobit)|0);
   $tobool255 = ($call254|0)==(0);
   if ($tobool255) {
    STACKTOP = sp;return;
   } else {
    $message258 = ((($3)) + 224|0);
    HEAP32[$message258>>2] = 152550;
    $sound$0 = 33;
    break L7;
   }
   break;
  }
  case 89:  {
   $call260 = (_P_GiveWeapon($3,7,0)|0);
   $tobool261 = ($call260|0)==(0);
   if ($tobool261) {
    STACKTOP = sp;return;
   } else {
    $message264 = ((($3)) + 224|0);
    HEAP32[$message264>>2] = 152572;
    $sound$0 = 33;
    break L7;
   }
   break;
  }
  case 90:  {
   $call266 = (_P_GiveWeapon($3,4,0)|0);
   $tobool267 = ($call266|0)==(0);
   if ($tobool267) {
    STACKTOP = sp;return;
   } else {
    $message270 = ((($3)) + 224|0);
    HEAP32[$message270>>2] = 152601;
    $sound$0 = 33;
    break L7;
   }
   break;
  }
  case 91:  {
   $call272 = (_P_GiveWeapon($3,5,0)|0);
   $tobool273 = ($call272|0)==(0);
   if ($tobool273) {
    STACKTOP = sp;return;
   } else {
    $message276 = ((($3)) + 224|0);
    HEAP32[$message276>>2] = 152630;
    $sound$0 = 33;
    break L7;
   }
   break;
  }
  case 92:  {
   $flags278 = ((($special)) + 104|0);
   $110 = HEAP32[$flags278>>2]|0;
   $and279 = $110 >>> 17;
   $and279$lobit = $and279 & 1;
   $call282 = (_P_GiveWeapon($3,2,$and279$lobit)|0);
   $tobool283 = ($call282|0)==(0);
   if ($tobool283) {
    STACKTOP = sp;return;
   } else {
    $message286 = ((($3)) + 224|0);
    HEAP32[$message286>>2] = 152654;
    $sound$0 = 33;
    break L7;
   }
   break;
  }
  case 93:  {
   $flags288 = ((($special)) + 104|0);
   $111 = HEAP32[$flags288>>2]|0;
   $and289 = $111 >>> 17;
   $and289$lobit = $and289 & 1;
   $call292 = (_P_GiveWeapon($3,8,$and289$lobit)|0);
   $tobool293 = ($call292|0)==(0);
   if ($tobool293) {
    STACKTOP = sp;return;
   } else {
    $message296 = ((($3)) + 224|0);
    HEAP32[$message296>>2] = 152675;
    $sound$0 = 33;
    break L7;
   }
   break;
  }
  default: {
   _I_Error(152702,$vararg_buffer);
   // unreachable;
  }
  }
 } while(0);
 $flags297 = ((($special)) + 104|0);
 $112 = HEAP32[$flags297>>2]|0;
 $and298 = $112 & 8388608;
 $tobool299 = ($and298|0)==(0);
 if (!($tobool299)) {
  $itemcount = ((($3)) + 216|0);
  $113 = HEAP32[$itemcount>>2]|0;
  $inc301 = (($113) + 1)|0;
  HEAP32[$itemcount>>2] = $inc301;
 }
 _P_RemoveMobj($special);
 $bonuscount = ((($3)) + 232|0);
 $114 = HEAP32[$bonuscount>>2]|0;
 $add303 = (($114) + 6)|0;
 HEAP32[$bonuscount>>2] = $add303;
 $115 = HEAP32[99076]|0;
 $arrayidx304 = (181680 + (($115*288)|0)|0);
 $cmp305 = ($3|0)==($arrayidx304|0);
 if (!($cmp305)) {
  STACKTOP = sp;return;
 }
 _S_StartSound(0,$sound$0);
 STACKTOP = sp;return;
}
function _P_KillMobj($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and2 = 0, $and22 = 0, $and43 = 0, $and66 = 0, $and7 = 0, $arrayidx = 0, $arrayidx39 = 0, $arrayidx47 = 0, $call65 = 0, $call79 = 0, $cmp = 0;
 var $cmp48 = 0, $cmp54 = 0, $cmp73 = 0, $deathstate = 0, $flags = 0, $flags80 = 0, $health = 0, $height = 0, $inc = 0, $inc17 = 0, $inc25 = 0, $inc40 = 0, $info = 0, $item$0 = 0, $killcount = 0, $or = 0, $or$cond = 0, $or$cond35 = 0, $or81 = 0, $player = 0;
 var $player12 = 0, $player28 = 0, $playerstate = 0, $shr = 0, $spawnhealth = 0, $spec$select = 0, $sub = 0, $sub$ptr$div = 0, $sub$ptr$div38 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast36 = 0, $sub$ptr$sub = 0, $sub$ptr$sub37 = 0, $sub67 = 0, $tics = 0, $tobool = 0, $tobool13 = 0, $tobool19 = 0, $tobool23 = 0, $tobool29 = 0;
 var $tobool4 = 0, $tobool50 = 0, $tobool57 = 0, $tobool8 = 0, $type = 0, $x = 0, $xdeathstate = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $flags = ((($target)) + 104|0);
 $0 = HEAP32[$flags>>2]|0;
 $and = $0 & -16793605;
 HEAP32[$flags>>2] = $and;
 $type = ((($target)) + 88|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(18);
 if ($cmp) {
  $2 = $and;
 } else {
  $and2 = $0 & -16794117;
  HEAP32[$flags>>2] = $and2;
  $2 = $and2;
 }
 $or = $2 | 1049600;
 HEAP32[$flags>>2] = $or;
 $height = ((($target)) + 68|0);
 $3 = HEAP32[$height>>2]|0;
 $shr = $3 >> 2;
 HEAP32[$height>>2] = $shr;
 $tobool = ($source|0)!=(0|0);
 if ($tobool) {
  $player = ((($source)) + 132|0);
  $4 = HEAP32[$player>>2]|0;
  $tobool4 = ($4|0)==(0|0);
  if ($tobool4) {
   label = 9;
  } else {
   $and7 = $2 & 4194304;
   $tobool8 = ($and7|0)==(0);
   if (!($tobool8)) {
    $killcount = ((($4)) + 212|0);
    $5 = HEAP32[$killcount>>2]|0;
    $inc = (($5) + 1)|0;
    HEAP32[$killcount>>2] = $inc;
   }
   $player12 = ((($target)) + 132|0);
   $6 = HEAP32[$player12>>2]|0;
   $tobool13 = ($6|0)==(0|0);
   if (!($tobool13)) {
    $sub$ptr$lhs$cast = $6;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - (181680))|0;
    $sub$ptr$div = (($sub$ptr$sub|0) / 288)&-1;
    $arrayidx = (((($4)) + 104|0) + ($sub$ptr$div<<2)|0);
    $7 = HEAP32[$arrayidx>>2]|0;
    $inc17 = (($7) + 1)|0;
    HEAP32[$arrayidx>>2] = $inc17;
   }
  }
 } else {
  label = 9;
 }
 if ((label|0) == 9) {
  $8 = HEAP32[99094]|0;
  $tobool19 = ($8|0)!=(0);
  $and22 = $2 & 4194304;
  $tobool23 = ($and22|0)==(0);
  $or$cond35 = $tobool23 | $tobool19;
  if (!($or$cond35)) {
   $9 = HEAP32[(181892)>>2]|0;
   $inc25 = (($9) + 1)|0;
   HEAP32[(181892)>>2] = $inc25;
  }
 }
 $player28 = ((($target)) + 132|0);
 $10 = HEAP32[$player28>>2]|0;
 $tobool29 = ($10|0)==(0|0);
 if (!($tobool29)) {
  if (!($tobool)) {
   $sub$ptr$lhs$cast36 = $10;
   $sub$ptr$sub37 = (($sub$ptr$lhs$cast36) - (181680))|0;
   $sub$ptr$div38 = (($sub$ptr$sub37|0) / 288)&-1;
   $arrayidx39 = (((($10)) + 104|0) + ($sub$ptr$div38<<2)|0);
   $11 = HEAP32[$arrayidx39>>2]|0;
   $inc40 = (($11) + 1)|0;
   HEAP32[$arrayidx39>>2] = $inc40;
  }
  $12 = HEAP32[$flags>>2]|0;
  $and43 = $12 & -3;
  HEAP32[$flags>>2] = $and43;
  $playerstate = ((($10)) + 4|0);
  HEAP32[$playerstate>>2] = 1;
  _P_DropWeapon($10);
  $13 = HEAP32[$player28>>2]|0;
  $14 = HEAP32[99076]|0;
  $arrayidx47 = (181680 + (($14*288)|0)|0);
  $cmp48 = ($13|0)==($arrayidx47|0);
  $15 = HEAP32[98972]|0;
  $tobool50 = ($15|0)!=(0);
  $or$cond = $cmp48 & $tobool50;
  if ($or$cond) {
   _AM_Stop();
  }
 }
 $health = ((($target)) + 108|0);
 $16 = HEAP32[$health>>2]|0;
 $info = ((($target)) + 92|0);
 $17 = HEAP32[$info>>2]|0;
 $spawnhealth = ((($17)) + 8|0);
 $18 = HEAP32[$spawnhealth>>2]|0;
 $sub = (0 - ($18))|0;
 $cmp54 = ($16|0)<($sub|0);
 if ($cmp54) {
  $xdeathstate = ((($17)) + 52|0);
  $19 = HEAP32[$xdeathstate>>2]|0;
  $tobool57 = ($19|0)==(0);
  if ($tobool57) {
   label = 19;
  } else {
   (_P_SetMobjState($target,$19)|0);
  }
 } else {
  label = 19;
 }
 if ((label|0) == 19) {
  $deathstate = ((($17)) + 48|0);
  $20 = HEAP32[$deathstate>>2]|0;
  (_P_SetMobjState($target,$20)|0);
 }
 $call65 = (_P_Random()|0);
 $and66 = $call65 & 3;
 $tics = ((($target)) + 96|0);
 $21 = HEAP32[$tics>>2]|0;
 $sub67 = (($21) - ($and66))|0;
 $22 = ($sub67|0)>(1);
 $spec$select = $22 ? $sub67 : 1;
 HEAP32[$tics>>2] = $spec$select;
 $23 = HEAP32[32141]|0;
 $cmp73 = ($23|0)==(9);
 if ($cmp73) {
  return;
 }
 $24 = HEAP32[$type>>2]|0;
 switch ($24|0) {
 case 1: case 23:  {
  $item$0 = 63;
  break;
 }
 case 2:  {
  $item$0 = 77;
  break;
 }
 case 10:  {
  $item$0 = 73;
  break;
 }
 default: {
  return;
 }
 }
 $x = ((($target)) + 12|0);
 $25 = HEAP32[$x>>2]|0;
 $y = ((($target)) + 16|0);
 $26 = HEAP32[$y>>2]|0;
 $call79 = (_P_SpawnMobj($25,$26,-2147483648,$item$0)|0);
 $flags80 = ((($call79)) + 104|0);
 $27 = HEAP32[$flags80>>2]|0;
 $or81 = $27 | 131072;
 HEAP32[$flags80>>2] = $or81;
 return;
}
function _P_DamageMobj($target,$inflictor,$source,$damage) {
 $target = $target|0;
 $inflictor = $inflictor|0;
 $source = $source|0;
 $damage = $damage|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add101 = 0, $add46 = 0, $add50 = 0, $and = 0, $and131 = 0, $and16 = 0, $and38 = 0, $and4 = 0, $and67 = 0, $ang$0 = 0, $armorpoints = 0, $armortype = 0, $arrayidx = 0, $arrayidx110 = 0;
 var $arrayidx155 = 0, $arrayidx47 = 0, $arrayidx70 = 0, $attacker = 0, $call = 0, $call125 = 0, $call37 = 0, $call44 = 0, $call48 = 0, $cheats = 0, $cmp = 0, $cmp10 = 0, $cmp111 = 0, $cmp121 = 0, $cmp127 = 0, $cmp140 = 0, $cmp145 = 0, $cmp145$old = 0, $cmp149 = 0, $cmp156 = 0;
 var $cmp160 = 0, $cmp24 = 0, $cmp29 = 0, $cmp32 = 0, $cmp35 = 0, $cmp54 = 0, $cmp58 = 0, $cmp64 = 0, $cmp83 = 0, $damage$addr$1 = 0, $damage$addr$2 = 0, $damage$addr$3 = 0, $damagecount = 0, $div = 0, $div81 = 0, $flags = 0, $health = 0, $health93 = 0, $info = 0, $info126 = 0;
 var $mass = 0, $momx = 0, $momx45 = 0, $momy = 0, $momy49 = 0, $momz = 0, $mul28 = 0, $mul41 = 0, $or = 0, $or$cond = 0, $or$cond1$not = 0, $or$cond93 = 0, $or$cond94 = 0, $or$cond95 = 0, $painchance = 0, $painstate = 0, $player20 = 0, $player8 = 0, $reactiontime = 0, $readyweapon = 0;
 var $saved$1 = 0, $seestate = 0, $shr = 0, $shr43 = 0, $spawnstate = 0, $spec$select = 0, $spec$select91 = 0, $spec$select92 = 0, $spec$select96 = 0, $spec$select97 = 0, $special = 0, $state = 0, $storemerge = 0, $sub = 0, $sub119 = 0, $sub62 = 0, $sub90 = 0, $sub91 = 0, $sub94 = 0, $subsector = 0;
 var $target152 = 0, $threshold = 0, $thrust$0 = 0, $tobool = 0, $tobool13 = 0, $tobool132 = 0, $tobool138 = 0, $tobool143 = 0, $tobool143$old = 0, $tobool17 = 0, $tobool19 = 0, $tobool21 = 0, $tobool39 = 0, $tobool5 = 0, $tobool68 = 0, $tobool71 = 0, $tobool9 = 0, $type = 0, $type148 = 0, $x = 0;
 var $x26 = 0, $y = 0, $y27 = 0, $z = 0, $z34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $flags = ((($target)) + 104|0);
 $0 = HEAP32[$flags>>2]|0;
 $and = $0 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  return;
 }
 $health = ((($target)) + 108|0);
 $1 = HEAP32[$health>>2]|0;
 $cmp = ($1|0)<(1);
 if ($cmp) {
  return;
 }
 $and4 = $0 & 16777216;
 $tobool5 = ($and4|0)==(0);
 if (!($tobool5)) {
  $momz = ((($target)) + 80|0);
  HEAP32[$momz>>2] = 0;
  $momy = ((($target)) + 76|0);
  HEAP32[$momy>>2] = 0;
  $momx = ((($target)) + 72|0);
  HEAP32[$momx>>2] = 0;
 }
 $player8 = ((($target)) + 132|0);
 $2 = HEAP32[$player8>>2]|0;
 $tobool9 = ($2|0)!=(0|0);
 $3 = HEAP32[99086]|0;
 $cmp10 = ($3|0)==(0);
 $or$cond = $tobool9 & $cmp10;
 $shr = $or$cond&1;
 $spec$select = $damage >> $shr;
 $tobool13 = ($inflictor|0)!=(0|0);
 $and16 = $0 & 4096;
 $tobool17 = ($and16|0)==(0);
 $or$cond95 = $tobool13 & $tobool17;
 do {
  if ($or$cond95) {
   $tobool19 = ($source|0)==(0|0);
   if (!($tobool19)) {
    $player20 = ((($source)) + 132|0);
    $4 = HEAP32[$player20>>2]|0;
    $tobool21 = ($4|0)==(0|0);
    if (!($tobool21)) {
     $readyweapon = ((($4)) + 120|0);
     $5 = HEAP32[$readyweapon>>2]|0;
     $cmp24 = ($5|0)==(7);
     if ($cmp24) {
      break;
     }
    }
   }
   $x = ((($inflictor)) + 12|0);
   $6 = HEAP32[$x>>2]|0;
   $y = ((($inflictor)) + 16|0);
   $7 = HEAP32[$y>>2]|0;
   $x26 = ((($target)) + 12|0);
   $8 = HEAP32[$x26>>2]|0;
   $y27 = ((($target)) + 16|0);
   $9 = HEAP32[$y27>>2]|0;
   $call = (_R_PointToAngle2($6,$7,$8,$9)|0);
   $mul28 = ($spec$select*819200)|0;
   $info = ((($target)) + 92|0);
   $10 = HEAP32[$info>>2]|0;
   $mass = ((($10)) + 72|0);
   $11 = HEAP32[$mass>>2]|0;
   $div = (($mul28|0) / ($11|0))&-1;
   $cmp29 = ($spec$select|0)<(40);
   if ($cmp29) {
    $12 = HEAP32[$health>>2]|0;
    $cmp32 = ($spec$select|0)>($12|0);
    if ($cmp32) {
     $z = ((($target)) + 20|0);
     $13 = HEAP32[$z>>2]|0;
     $z34 = ((($inflictor)) + 20|0);
     $14 = HEAP32[$z34>>2]|0;
     $sub = (($13) - ($14))|0;
     $cmp35 = ($sub|0)>(4194304);
     if ($cmp35) {
      $call37 = (_P_Random()|0);
      $and38 = $call37 & 1;
      $tobool39 = ($and38|0)==(0);
      $add = $call ^ -2147483648;
      $mul41 = $div << 2;
      $spec$select96 = $tobool39 ? $call : $add;
      $spec$select97 = $tobool39 ? $div : $mul41;
      $ang$0 = $spec$select96;$thrust$0 = $spec$select97;
     } else {
      $ang$0 = $call;$thrust$0 = $div;
     }
    } else {
     $ang$0 = $call;$thrust$0 = $div;
    }
   } else {
    $ang$0 = $call;$thrust$0 = $div;
   }
   $shr43 = $ang$0 >>> 19;
   $arrayidx = ((82912) + ($shr43<<2)|0);
   $15 = HEAP32[$arrayidx>>2]|0;
   $call44 = (_FixedMul($thrust$0,$15)|0);
   $momx45 = ((($target)) + 72|0);
   $16 = HEAP32[$momx45>>2]|0;
   $add46 = (($16) + ($call44))|0;
   HEAP32[$momx45>>2] = $add46;
   $arrayidx47 = (74720 + ($shr43<<2)|0);
   $17 = HEAP32[$arrayidx47>>2]|0;
   $call48 = (_FixedMul($thrust$0,$17)|0);
   $momy49 = ((($target)) + 76|0);
   $18 = HEAP32[$momy49>>2]|0;
   $add50 = (($18) + ($call48))|0;
   HEAP32[$momy49>>2] = $add50;
  }
 } while(0);
 if ($tobool9) {
  $subsector = ((($target)) + 52|0);
  $19 = HEAP32[$subsector>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $special = ((($20)) + 14|0);
  $21 = HEAP16[$special>>1]|0;
  $cmp54 = ($21<<16>>16)==(11);
  if ($cmp54) {
   $22 = HEAP32[$health>>2]|0;
   $cmp58 = ($spec$select|0)<($22|0);
   $sub62 = (($22) + -1)|0;
   $spec$select91 = $cmp58 ? $spec$select : $sub62;
   $damage$addr$1 = $spec$select91;
  } else {
   $damage$addr$1 = $spec$select;
  }
  $cmp64 = ($damage$addr$1|0)<(1000);
  if ($cmp64) {
   $cheats = ((($2)) + 204|0);
   $23 = HEAP32[$cheats>>2]|0;
   $and67 = $23 & 2;
   $tobool68 = ($and67|0)==(0);
   if (!($tobool68)) {
    return;
   }
   $arrayidx70 = ((($2)) + 52|0);
   $24 = HEAP32[$arrayidx70>>2]|0;
   $tobool71 = ($24|0)==(0);
   if (!($tobool71)) {
    return;
   }
  }
  $armortype = ((($2)) + 48|0);
  $25 = HEAP32[$armortype>>2]|0;
  switch ($25|0) {
  case 0:  {
   $damage$addr$2 = $damage$addr$1;
   break;
  }
  case 1:  {
   $$sink = 3;
   label = 22;
   break;
  }
  default: {
   $$sink = 2;
   label = 22;
  }
  }
  if ((label|0) == 22) {
   $div81 = (($damage$addr$1|0) / ($$sink|0))&-1;
   $armorpoints = ((($2)) + 44|0);
   $26 = HEAP32[$armorpoints>>2]|0;
   $cmp83 = ($26|0)>($div81|0);
   if ($cmp83) {
    $saved$1 = $div81;
   } else {
    HEAP32[$armortype>>2] = 0;
    $saved$1 = $26;
   }
   $sub90 = (($26) - ($saved$1))|0;
   HEAP32[$armorpoints>>2] = $sub90;
   $sub91 = (($damage$addr$1) - ($saved$1))|0;
   $damage$addr$2 = $sub91;
  }
  $health93 = ((($2)) + 40|0);
  $27 = HEAP32[$health93>>2]|0;
  $sub94 = (($27) - ($damage$addr$2))|0;
  $28 = ($sub94|0)>(0);
  $spec$select92 = $28 ? $sub94 : 0;
  HEAP32[$health93>>2] = $spec$select92;
  $attacker = ((($2)) + 236|0);
  HEAP32[$attacker>>2] = $source;
  $damagecount = ((($2)) + 228|0);
  $29 = HEAP32[$damagecount>>2]|0;
  $add101 = (($29) + ($damage$addr$2))|0;
  $30 = ($add101|0)<(100);
  $storemerge = $30 ? $add101 : 100;
  HEAP32[$damagecount>>2] = $storemerge;
  $31 = HEAP32[99076]|0;
  $arrayidx110 = (181680 + (($31*288)|0)|0);
  $cmp111 = ($2|0)==($arrayidx110|0);
  if ($cmp111) {
   $damage$addr$3 = $damage$addr$2;
  } else {
   $damage$addr$3 = $damage$addr$2;
  }
 } else {
  $damage$addr$3 = $damage;
 }
 $32 = HEAP32[$health>>2]|0;
 $sub119 = (($32) - ($damage$addr$3))|0;
 HEAP32[$health>>2] = $sub119;
 $cmp121 = ($sub119|0)<(1);
 if ($cmp121) {
  _P_KillMobj($source,$target);
  return;
 }
 $call125 = (_P_Random()|0);
 $info126 = ((($target)) + 92|0);
 $33 = HEAP32[$info126>>2]|0;
 $painchance = ((($33)) + 32|0);
 $34 = HEAP32[$painchance>>2]|0;
 $cmp127 = ($call125|0)<($34|0);
 if ($cmp127) {
  $35 = HEAP32[$flags>>2]|0;
  $and131 = $35 & 16777216;
  $tobool132 = ($and131|0)==(0);
  if ($tobool132) {
   $painstate = ((($33)) + 28|0);
   $or = $35 | 64;
   HEAP32[$flags>>2] = $or;
   $36 = HEAP32[$painstate>>2]|0;
   (_P_SetMobjState($target,$36)|0);
  }
 }
 $reactiontime = ((($target)) + 124|0);
 HEAP32[$reactiontime>>2] = 0;
 $threshold = ((($target)) + 128|0);
 $37 = HEAP32[$threshold>>2]|0;
 $tobool138 = ($37|0)==(0);
 if ($tobool138) {
  $tobool143$old = ($source|0)==(0|0);
  $cmp145 = ($source|0)==($target|0);
  $or$cond93 = $tobool143$old | $cmp145;
  if ($or$cond93) {
   return;
  }
 } else {
  $type = ((($target)) + 88|0);
  $38 = HEAP32[$type>>2]|0;
  $cmp140 = ($38|0)!=(3);
  $tobool143 = ($source|0)==(0|0);
  $or$cond1$not = $tobool143 | $cmp140;
  $cmp145$old = ($source|0)==($target|0);
  $or$cond94 = $cmp145$old | $or$cond1$not;
  if ($or$cond94) {
   return;
  }
 }
 $type148 = ((($source)) + 88|0);
 $39 = HEAP32[$type148>>2]|0;
 $cmp149 = ($39|0)==(3);
 if ($cmp149) {
  return;
 }
 $target152 = ((($target)) + 120|0);
 HEAP32[$target152>>2] = $source;
 HEAP32[$threshold>>2] = 100;
 $state = ((($target)) + 100|0);
 $40 = HEAP32[$state>>2]|0;
 $41 = HEAP32[$info126>>2]|0;
 $spawnstate = ((($41)) + 4|0);
 $42 = HEAP32[$spawnstate>>2]|0;
 $arrayidx155 = (3488 + (($42*28)|0)|0);
 $cmp156 = ($40|0)==($arrayidx155|0);
 if (!($cmp156)) {
  return;
 }
 $seestate = ((($41)) + 12|0);
 $43 = HEAP32[$seestate>>2]|0;
 $cmp160 = ($43|0)==(0);
 if ($cmp160) {
  return;
 }
 (_P_SetMobjState($target,$43)|0);
 return;
}
function _T_FireFlicker($flick) {
 $flick = $flick|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $and = 0, $call = 0, $cmp = 0, $conv = 0, $count = 0, $dec = 0, $lightlevel = 0, $maxlight = 0, $minlight = 0, $mul = 0, $sector = 0, $storemerge = 0, $storemerge$in = 0, $sub = 0, $sub7 = 0;
 var $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $count = ((($flick)) + 16|0);
 $0 = HEAP32[$count>>2]|0;
 $dec = (($0) + -1)|0;
 HEAP32[$count>>2] = $dec;
 $tobool = ($dec|0)==(0);
 if (!($tobool)) {
  return;
 }
 $call = (_P_Random()|0);
 $and = $call << 4;
 $mul = $and & 48;
 $sector = ((($flick)) + 12|0);
 $1 = HEAP32[$sector>>2]|0;
 $lightlevel = ((($1)) + 12|0);
 $2 = HEAP16[$lightlevel>>1]|0;
 $conv = $2 << 16 >> 16;
 $sub = (($conv) - ($mul))|0;
 $minlight = ((($flick)) + 24|0);
 $3 = HEAP32[$minlight>>2]|0;
 $cmp = ($sub|0)<($3|0);
 if ($cmp) {
  $storemerge$in = $3;
 } else {
  $maxlight = ((($flick)) + 20|0);
  $4 = HEAP32[$maxlight>>2]|0;
  $sub7 = (($4) - ($mul))|0;
  $storemerge$in = $sub7;
 }
 $storemerge = $storemerge$in&65535;
 HEAP16[$lightlevel>>1] = $storemerge;
 HEAP32[$count>>2] = 4;
 return;
}
function _P_SpawnFireFlicker($sector) {
 $sector = $sector|0;
 var $0 = 0, $add = 0, $call = 0, $call5 = 0, $conv = 0, $count = 0, $function = 0, $lightlevel = 0, $maxlight = 0, $minlight = 0, $sector2 = 0, $special = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $special = ((($sector)) + 14|0);
 HEAP16[$special>>1] = 0;
 $call = (_Z_Malloc(28,6,0)|0);
 _P_AddThinker($call);
 $function = ((($call)) + 8|0);
 HEAP32[$function>>2] = 139;
 $sector2 = ((($call)) + 12|0);
 HEAP32[$sector2>>2] = $sector;
 $lightlevel = ((($sector)) + 12|0);
 $0 = HEAP16[$lightlevel>>1]|0;
 $conv = $0 << 16 >> 16;
 $maxlight = ((($call)) + 20|0);
 HEAP32[$maxlight>>2] = $conv;
 $call5 = (_P_FindMinSurroundingLight($sector,$conv)|0);
 $add = (($call5) + 16)|0;
 $minlight = ((($call)) + 24|0);
 HEAP32[$minlight>>2] = $add;
 $count = ((($call)) + 16|0);
 HEAP32[$count>>2] = 4;
 return;
}
function _T_LightFlash($flash) {
 $flash = $flash|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add13 = 0, $and12 = 0, $call = 0, $call11 = 0, $call11$sink = 0, $cmp = 0, $conv = 0, $conv3 = 0, $conv8 = 0, $count = 0, $dec = 0, $lightlevel = 0, $maxlight = 0, $maxtime = 0;
 var $maxtime$sink = 0, $minlight = 0, $mintime = 0, $sector = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $count = ((($flash)) + 16|0);
 $0 = HEAP32[$count>>2]|0;
 $dec = (($0) + -1)|0;
 HEAP32[$count>>2] = $dec;
 $tobool = ($dec|0)==(0);
 if (!($tobool)) {
  return;
 }
 $sector = ((($flash)) + 12|0);
 $1 = HEAP32[$sector>>2]|0;
 $lightlevel = ((($1)) + 12|0);
 $2 = HEAP16[$lightlevel>>1]|0;
 $conv = $2 << 16 >> 16;
 $maxlight = ((($flash)) + 20|0);
 $3 = HEAP32[$maxlight>>2]|0;
 $cmp = ($3|0)==($conv|0);
 if ($cmp) {
  $minlight = ((($flash)) + 24|0);
  $4 = HEAP32[$minlight>>2]|0;
  $conv3 = $4&65535;
  HEAP16[$lightlevel>>1] = $conv3;
  $call = (_P_Random()|0);
  $mintime = ((($flash)) + 32|0);
  $call11$sink = $call;$maxtime$sink = $mintime;
 } else {
  $conv8 = $3&65535;
  HEAP16[$lightlevel>>1] = $conv8;
  $call11 = (_P_Random()|0);
  $maxtime = ((($flash)) + 28|0);
  $call11$sink = $call11;$maxtime$sink = $maxtime;
 }
 $5 = HEAP32[$maxtime$sink>>2]|0;
 $and12 = $5 & $call11$sink;
 $add13 = (($and12) + 1)|0;
 HEAP32[$count>>2] = $add13;
 return;
}
function _P_SpawnLightFlash($sector) {
 $sector = $sector|0;
 var $0 = 0, $1 = 0, $add = 0, $and = 0, $call = 0, $call5 = 0, $call6 = 0, $conv = 0, $count = 0, $function = 0, $lightlevel = 0, $maxlight = 0, $maxtime = 0, $minlight = 0, $mintime = 0, $sector2 = 0, $special = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $special = ((($sector)) + 14|0);
 HEAP16[$special>>1] = 0;
 $call = (_Z_Malloc(36,6,0)|0);
 _P_AddThinker($call);
 $function = ((($call)) + 8|0);
 HEAP32[$function>>2] = 140;
 $sector2 = ((($call)) + 12|0);
 HEAP32[$sector2>>2] = $sector;
 $lightlevel = ((($sector)) + 12|0);
 $0 = HEAP16[$lightlevel>>1]|0;
 $conv = $0 << 16 >> 16;
 $maxlight = ((($call)) + 20|0);
 HEAP32[$maxlight>>2] = $conv;
 $call5 = (_P_FindMinSurroundingLight($sector,$conv)|0);
 $minlight = ((($call)) + 24|0);
 HEAP32[$minlight>>2] = $call5;
 $maxtime = ((($call)) + 28|0);
 HEAP32[$maxtime>>2] = 64;
 $mintime = ((($call)) + 32|0);
 HEAP32[$mintime>>2] = 7;
 $call6 = (_P_Random()|0);
 $1 = HEAP32[$maxtime>>2]|0;
 $and = $1 & $call6;
 $add = (($and) + 1)|0;
 $count = ((($call)) + 16|0);
 HEAP32[$count>>2] = $add;
 return;
}
function _T_StrobeFlash($flash) {
 $flash = $flash|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $brighttime = 0, $cmp = 0, $conv = 0, $conv3 = 0, $conv8 = 0, $count = 0, $darktime = 0, $darktime$sink = 0, $dec = 0, $lightlevel = 0, $maxlight = 0, $minlight = 0, $sector = 0, $tobool = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $count = ((($flash)) + 16|0);
 $0 = HEAP32[$count>>2]|0;
 $dec = (($0) + -1)|0;
 HEAP32[$count>>2] = $dec;
 $tobool = ($dec|0)==(0);
 if (!($tobool)) {
  return;
 }
 $sector = ((($flash)) + 12|0);
 $1 = HEAP32[$sector>>2]|0;
 $lightlevel = ((($1)) + 12|0);
 $2 = HEAP16[$lightlevel>>1]|0;
 $conv = $2 << 16 >> 16;
 $minlight = ((($flash)) + 20|0);
 $3 = HEAP32[$minlight>>2]|0;
 $cmp = ($3|0)==($conv|0);
 if ($cmp) {
  $maxlight = ((($flash)) + 24|0);
  $4 = HEAP32[$maxlight>>2]|0;
  $conv3 = $4&65535;
  HEAP16[$lightlevel>>1] = $conv3;
  $brighttime = ((($flash)) + 32|0);
  $darktime$sink = $brighttime;
 } else {
  $conv8 = $3&65535;
  HEAP16[$lightlevel>>1] = $conv8;
  $darktime = ((($flash)) + 28|0);
  $darktime$sink = $darktime;
 }
 $5 = HEAP32[$darktime$sink>>2]|0;
 HEAP32[$count>>2] = $5;
 return;
}
function _P_SpawnStrobeFlash($sector,$fastOrSlow,$inSync) {
 $sector = $sector|0;
 $fastOrSlow = $fastOrSlow|0;
 $inSync = $inSync|0;
 var $$sink = 0, $0 = 0, $1 = 0, $add = 0, $and = 0, $brighttime = 0, $call = 0, $call11 = 0, $call5 = 0, $cmp = 0, $conv = 0, $count12 = 0, $darktime = 0, $function = 0, $lightlevel = 0, $maxlight = 0, $minlight = 0, $sector1 = 0, $spec$store$select = 0, $special = 0;
 var $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_Z_Malloc(36,6,0)|0);
 _P_AddThinker($call);
 $sector1 = ((($call)) + 12|0);
 HEAP32[$sector1>>2] = $sector;
 $darktime = ((($call)) + 28|0);
 HEAP32[$darktime>>2] = $fastOrSlow;
 $brighttime = ((($call)) + 32|0);
 HEAP32[$brighttime>>2] = 5;
 $function = ((($call)) + 8|0);
 HEAP32[$function>>2] = 141;
 $lightlevel = ((($sector)) + 12|0);
 $0 = HEAP16[$lightlevel>>1]|0;
 $conv = $0 << 16 >> 16;
 $maxlight = ((($call)) + 24|0);
 HEAP32[$maxlight>>2] = $conv;
 $call5 = (_P_FindMinSurroundingLight($sector,$conv)|0);
 $minlight = ((($call)) + 20|0);
 $1 = HEAP32[$maxlight>>2]|0;
 $cmp = ($call5|0)==($1|0);
 $spec$store$select = $cmp ? 0 : $call5;
 HEAP32[$minlight>>2] = $spec$store$select;
 $special = ((($sector)) + 14|0);
 HEAP16[$special>>1] = 0;
 $tobool = ($inSync|0)==(0);
 if (!($tobool)) {
  $$sink = 1;
  $count12 = ((($call)) + 16|0);
  HEAP32[$count12>>2] = $$sink;
  return;
 }
 $call11 = (_P_Random()|0);
 $and = $call11 & 7;
 $add = (($and) + 1)|0;
 $$sink = $add;
 $count12 = ((($call)) + 16|0);
 HEAP32[$count12>>2] = $$sink;
 return;
}
function _EV_StartLightStrobing($line) {
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add$i = 0, $and$i = 0, $arrayidx = 0, $brighttime$i = 0, $call = 0, $call$i = 0, $call11$i = 0, $call5 = 0, $call5$i = 0, $call7 = 0, $cmp = 0, $cmp$i = 0, $cmp6 = 0, $conv$i = 0, $count$i = 0, $darktime$i = 0;
 var $function$i = 0, $lightlevel$i = 0, $maxlight$i = 0, $minlight$i = 0, $sector1$i = 0, $spec$store$select$i = 0, $special$i = 0, $specialdata = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call5 = (_P_FindSectorFromLineTag($line,-1)|0);
 $cmp6 = ($call5|0)>(-1);
 if (!($cmp6)) {
  return;
 }
 $call7 = $call5;
 while(1) {
  $0 = HEAP32[99506]|0;
  $specialdata = (((($0) + (($call7*88)|0)|0)) + 76|0);
  $1 = HEAP32[$specialdata>>2]|0;
  $tobool = ($1|0)==(0|0);
  if ($tobool) {
   $arrayidx = (($0) + (($call7*88)|0)|0);
   $call$i = (_Z_Malloc(36,6,0)|0);
   _P_AddThinker($call$i);
   $sector1$i = ((($call$i)) + 12|0);
   HEAP32[$sector1$i>>2] = $arrayidx;
   $darktime$i = ((($call$i)) + 28|0);
   HEAP32[$darktime$i>>2] = 35;
   $brighttime$i = ((($call$i)) + 32|0);
   HEAP32[$brighttime$i>>2] = 5;
   $function$i = ((($call$i)) + 8|0);
   HEAP32[$function$i>>2] = 141;
   $lightlevel$i = (((($0) + (($call7*88)|0)|0)) + 12|0);
   $2 = HEAP16[$lightlevel$i>>1]|0;
   $conv$i = $2 << 16 >> 16;
   $maxlight$i = ((($call$i)) + 24|0);
   HEAP32[$maxlight$i>>2] = $conv$i;
   $call5$i = (_P_FindMinSurroundingLight($arrayidx,$conv$i)|0);
   $minlight$i = ((($call$i)) + 20|0);
   $3 = HEAP32[$maxlight$i>>2]|0;
   $cmp$i = ($call5$i|0)==($3|0);
   $spec$store$select$i = $cmp$i ? 0 : $call5$i;
   HEAP32[$minlight$i>>2] = $spec$store$select$i;
   $special$i = (((($0) + (($call7*88)|0)|0)) + 14|0);
   HEAP16[$special$i>>1] = 0;
   $call11$i = (_P_Random()|0);
   $and$i = $call11$i & 7;
   $add$i = (($and$i) + 1)|0;
   $count$i = ((($call$i)) + 16|0);
   HEAP32[$count$i>>2] = $add$i;
  }
  $call = (_P_FindSectorFromLineTag($line,$call7)|0);
  $cmp = ($call|0)>(-1);
  if ($cmp) {
   $call7 = $call;
  } else {
   break;
  }
 }
 return;
}
function _EV_TurnTagLightsOff($line) {
 $line = $line|0;
 var $$pre = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp13 = 0, $cmp22 = 0, $cmp3 = 0;
 var $cmp7 = 0, $cmp719 = 0, $conv12 = 0, $conv19 = 0, $conv5 = 0, $i$021 = 0, $inc = 0, $inc23 = 0, $incdec$ptr = 0, $j$024 = 0, $lightlevel = 0, $lightlevel11 = 0, $linecount = 0, $lines = 0, $min$0$lcssa = 0, $min$020 = 0, $min$1 = 0, $sector$023 = 0, $spec$select = 0, $tag = 0;
 var $tag1 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99505]|0;
 $cmp22 = ($0|0)>(0);
 if (!($cmp22)) {
  return;
 }
 $1 = HEAP32[99506]|0;
 $tag1 = ((($line)) + 20|0);
 $11 = $0;$j$024 = 0;$sector$023 = $1;
 while(1) {
  $tag = ((($sector$023)) + 16|0);
  $2 = HEAP16[$tag>>1]|0;
  $3 = HEAP16[$tag1>>1]|0;
  $cmp3 = ($2<<16>>16)==($3<<16>>16);
  if ($cmp3) {
   $lightlevel = ((($sector$023)) + 12|0);
   $4 = HEAP16[$lightlevel>>1]|0;
   $conv5 = $4 << 16 >> 16;
   $linecount = ((($sector$023)) + 80|0);
   $5 = HEAP32[$linecount>>2]|0;
   $cmp719 = ($5|0)>(0);
   if ($cmp719) {
    $lines = ((($sector$023)) + 84|0);
    $i$021 = 0;$min$020 = $conv5;
    while(1) {
     $6 = HEAP32[$lines>>2]|0;
     $arrayidx = (($6) + ($i$021<<2)|0);
     $7 = HEAP32[$arrayidx>>2]|0;
     $call = (_getNextSector($7,$sector$023)|0);
     $tobool = ($call|0)==(0|0);
     if ($tobool) {
      $min$1 = $min$020;
     } else {
      $lightlevel11 = ((($call)) + 12|0);
      $8 = HEAP16[$lightlevel11>>1]|0;
      $conv12 = $8 << 16 >> 16;
      $cmp13 = ($min$020|0)>($conv12|0);
      $spec$select = $cmp13 ? $conv12 : $min$020;
      $min$1 = $spec$select;
     }
     $inc = (($i$021) + 1)|0;
     $9 = HEAP32[$linecount>>2]|0;
     $cmp7 = ($inc|0)<($9|0);
     if ($cmp7) {
      $i$021 = $inc;$min$020 = $min$1;
     } else {
      break;
     }
    }
    $$pre$pre = HEAP32[99505]|0;
    $$pre = $$pre$pre;$min$0$lcssa = $min$1;
   } else {
    $$pre = $11;$min$0$lcssa = $conv5;
   }
   $conv19 = $min$0$lcssa&65535;
   HEAP16[$lightlevel>>1] = $conv19;
   $10 = $$pre;
  } else {
   $10 = $11;
  }
  $inc23 = (($j$024) + 1)|0;
  $incdec$ptr = ((($sector$023)) + 88|0);
  $cmp = ($inc23|0)<($10|0);
  if ($cmp) {
   $11 = $10;$j$024 = $inc23;$sector$023 = $incdec$ptr;
  } else {
   break;
  }
 }
 return;
}
function _EV_LightTurnOn($line,$bright) {
 $line = $line|0;
 $bright = $bright|0;
 var $$pre = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $bright$addr$027 = 0, $bright$addr$120 = 0, $bright$addr$2 = 0, $bright$addr$3 = 0, $bright$addr$4 = 0, $call = 0;
 var $cmp = 0, $cmp13 = 0, $cmp21 = 0, $cmp3 = 0, $cmp7 = 0, $cmp718 = 0, $conv12 = 0, $conv20 = 0, $i$026 = 0, $inc = 0, $inc24 = 0, $incdec$ptr = 0, $j$019 = 0, $lightlevel = 0, $lightlevel21 = 0, $linecount = 0, $lines = 0, $sector$022 = 0, $spec$select = 0, $tag = 0;
 var $tag1 = 0, $tobool = 0, $tobool10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99505]|0;
 $cmp21 = ($0|0)>(0);
 if (!($cmp21)) {
  return;
 }
 $1 = HEAP32[99506]|0;
 $tag1 = ((($line)) + 20|0);
 $10 = $0;$bright$addr$027 = $bright;$i$026 = 0;$sector$022 = $1;
 while(1) {
  $tag = ((($sector$022)) + 16|0);
  $2 = HEAP16[$tag>>1]|0;
  $3 = HEAP16[$tag1>>1]|0;
  $cmp3 = ($2<<16>>16)==($3<<16>>16);
  if ($cmp3) {
   $tobool = ($bright$addr$027|0)==(0);
   if ($tobool) {
    $linecount = ((($sector$022)) + 80|0);
    $4 = HEAP32[$linecount>>2]|0;
    $cmp718 = ($4|0)>(0);
    if ($cmp718) {
     $lines = ((($sector$022)) + 84|0);
     $bright$addr$120 = 0;$j$019 = 0;
     while(1) {
      $5 = HEAP32[$lines>>2]|0;
      $arrayidx = (($5) + ($j$019<<2)|0);
      $6 = HEAP32[$arrayidx>>2]|0;
      $call = (_getNextSector($6,$sector$022)|0);
      $tobool10 = ($call|0)==(0|0);
      if ($tobool10) {
       $bright$addr$2 = $bright$addr$120;
      } else {
       $lightlevel = ((($call)) + 12|0);
       $7 = HEAP16[$lightlevel>>1]|0;
       $conv12 = $7 << 16 >> 16;
       $cmp13 = ($bright$addr$120|0)<($conv12|0);
       $spec$select = $cmp13 ? $conv12 : $bright$addr$120;
       $bright$addr$2 = $spec$select;
      }
      $inc = (($j$019) + 1)|0;
      $8 = HEAP32[$linecount>>2]|0;
      $cmp7 = ($inc|0)<($8|0);
      if ($cmp7) {
       $bright$addr$120 = $bright$addr$2;$j$019 = $inc;
      } else {
       break;
      }
     }
     $$pre$pre = HEAP32[99505]|0;
     $$pre = $$pre$pre;$bright$addr$3 = $bright$addr$2;
    } else {
     $$pre = $10;$bright$addr$3 = 0;
    }
   } else {
    $$pre = $10;$bright$addr$3 = $bright$addr$027;
   }
   $conv20 = $bright$addr$3&65535;
   $lightlevel21 = ((($sector$022)) + 12|0);
   HEAP16[$lightlevel21>>1] = $conv20;
   $9 = $$pre;$bright$addr$4 = $bright$addr$3;
  } else {
   $9 = $10;$bright$addr$4 = $bright$addr$027;
  }
  $inc24 = (($i$026) + 1)|0;
  $incdec$ptr = ((($sector$022)) + 88|0);
  $cmp = ($inc24|0)<($9|0);
  if ($cmp) {
   $10 = $9;$bright$addr$027 = $bright$addr$4;$i$026 = $inc24;$sector$022 = $incdec$ptr;
  } else {
   break;
  }
 }
 return;
}
function _T_Glow($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $add15 = 0, $cmp = 0, $cmp20 = 0, $conv1 = 0, $conv12 = 0, $conv1411 = 0, $conv16 = 0, $conv19 = 0, $conv27 = 0, $conv4 = 0, $conv9 = 0, $direction = 0;
 var $lightlevel = 0, $lightlevel13 = 0, $maxlight = 0, $minlight = 0, $sector = 0, $sector12 = 0, $sext = 0, $sext13 = 0, $sub = 0, $sub26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $direction = ((($g)) + 24|0);
 $0 = HEAP32[$direction>>2]|0;
 switch ($0|0) {
 case -1:  {
  $sector = ((($g)) + 12|0);
  $1 = HEAP32[$sector>>2]|0;
  $lightlevel = ((($1)) + 12|0);
  $2 = HEAP16[$lightlevel>>1]|0;
  $conv12 = $2&65535;
  $sub = (($conv12) + 65528)|0;
  $conv1 = $sub&65535;
  HEAP16[$lightlevel>>1] = $conv1;
  $sext13 = $sub << 16;
  $conv4 = $sext13 >> 16;
  $minlight = ((($g)) + 16|0);
  $3 = HEAP32[$minlight>>2]|0;
  $cmp = ($3|0)<($conv4|0);
  if ($cmp) {
   return;
  }
  $add = (($conv4) + 8)|0;
  $conv9 = $add&65535;
  HEAP16[$lightlevel>>1] = $conv9;
  HEAP32[$direction>>2] = 1;
  return;
  break;
 }
 case 1:  {
  $sector12 = ((($g)) + 12|0);
  $4 = HEAP32[$sector12>>2]|0;
  $lightlevel13 = ((($4)) + 12|0);
  $5 = HEAP16[$lightlevel13>>1]|0;
  $conv1411 = $5&65535;
  $add15 = (($conv1411) + 8)|0;
  $conv16 = $add15&65535;
  HEAP16[$lightlevel13>>1] = $conv16;
  $sext = $add15 << 16;
  $conv19 = $sext >> 16;
  $maxlight = ((($g)) + 20|0);
  $6 = HEAP32[$maxlight>>2]|0;
  $cmp20 = ($6|0)>($conv19|0);
  if ($cmp20) {
   return;
  }
  $sub26 = (($conv19) + 65528)|0;
  $conv27 = $sub26&65535;
  HEAP16[$lightlevel13>>1] = $conv27;
  HEAP32[$direction>>2] = -1;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _P_SpawnGlowingLight($sector) {
 $sector = $sector|0;
 var $0 = 0, $1 = 0, $call = 0, $call2 = 0, $conv = 0, $conv4 = 0, $direction = 0, $function = 0, $lightlevel = 0, $maxlight = 0, $minlight = 0, $sector1 = 0, $special = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_Z_Malloc(28,6,0)|0);
 _P_AddThinker($call);
 $sector1 = ((($call)) + 12|0);
 HEAP32[$sector1>>2] = $sector;
 $lightlevel = ((($sector)) + 12|0);
 $0 = HEAP16[$lightlevel>>1]|0;
 $conv = $0 << 16 >> 16;
 $call2 = (_P_FindMinSurroundingLight($sector,$conv)|0);
 $minlight = ((($call)) + 16|0);
 HEAP32[$minlight>>2] = $call2;
 $1 = HEAP16[$lightlevel>>1]|0;
 $conv4 = $1 << 16 >> 16;
 $maxlight = ((($call)) + 20|0);
 HEAP32[$maxlight>>2] = $conv4;
 $function = ((($call)) + 8|0);
 HEAP32[$function>>2] = 142;
 $direction = ((($call)) + 24|0);
 HEAP32[$direction>>2] = -1;
 $special = ((($sector)) + 14|0);
 HEAP16[$special>>1] = 0;
 return;
}
function _PIT_StompThing($thing) {
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $cmp = 0, $cmp11 = 0, $cmp4 = 0, $cmp7 = 0, $flags = 0, $ispos = 0;
 var $ispos8 = 0, $neg = 0, $neg9 = 0, $or$cond = 0, $or$cond10 = 0, $player = 0, $radius = 0, $radius1 = 0, $retval$0 = 0, $sub = 0, $sub2 = 0, $tobool = 0, $tobool10 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $flags = ((($thing)) + 104|0);
 $0 = HEAP32[$flags>>2]|0;
 $and = $0 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $radius = ((($thing)) + 64|0);
 $1 = HEAP32[$radius>>2]|0;
 $2 = HEAP32[99414]|0;
 $radius1 = ((($2)) + 64|0);
 $3 = HEAP32[$radius1>>2]|0;
 $add = (($3) + ($1))|0;
 $x = ((($thing)) + 12|0);
 $4 = HEAP32[$x>>2]|0;
 $5 = HEAP32[99415]|0;
 $sub = (($4) - ($5))|0;
 $ispos = ($sub|0)>(-1);
 $neg = (0 - ($sub))|0;
 $6 = $ispos ? $sub : $neg;
 $cmp = ($6|0)<($add|0);
 if (!($cmp)) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $y = ((($thing)) + 16|0);
 $7 = HEAP32[$y>>2]|0;
 $8 = HEAP32[99416]|0;
 $sub2 = (($7) - ($8))|0;
 $ispos8 = ($sub2|0)>(-1);
 $neg9 = (0 - ($sub2))|0;
 $9 = $ispos8 ? $sub2 : $neg9;
 $cmp4 = ($9|0)>=($add|0);
 $cmp7 = ($2|0)==($thing|0);
 $or$cond10 = $cmp7 | $cmp4;
 if ($or$cond10) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $player = ((($2)) + 132|0);
 $10 = HEAP32[$player>>2]|0;
 $tobool10 = ($10|0)==(0|0);
 $11 = HEAP32[99084]|0;
 $cmp11 = ($11|0)!=(30);
 $or$cond = $tobool10 & $cmp11;
 if ($or$cond) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 _P_DamageMobj($thing,$2,$2,10000);
 $retval$0 = 1;
 return ($retval$0|0);
}
function _P_TeleportMove($thing,$x,$y) {
 $thing = $thing|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add10 = 0, $add16 = 0, $add3 = 0, $bx$031 = 0, $by$029 = 0;
 var $call = 0, $call21 = 0, $ceilingheight = 0, $ceilingz = 0, $cmp = 0, $cmp19 = 0, $cmp1928 = 0, $cmp30 = 0, $flags = 0, $floorz = 0, $inc = 0, $inc22 = 0, $inc24 = 0, $or$cond = 0, $radius = 0, $retval$0 = 0, $shr = 0, $shr11 = 0, $shr14 = 0, $shr17 = 0;
 var $sub = 0, $sub12 = 0, $sub13 = 0, $sub15 = 0, $sub5 = 0, $sub7 = 0, $sub8 = 0, $sub9 = 0, $tobool = 0, $x26 = 0, $y27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99414] = $thing;
 $flags = ((($thing)) + 104|0);
 $0 = HEAP32[$flags>>2]|0;
 HEAP32[99417] = $0;
 HEAP32[99415] = $x;
 HEAP32[99416] = $y;
 $radius = ((($thing)) + 64|0);
 $1 = HEAP32[$radius>>2]|0;
 $add = (($1) + ($y))|0;
 HEAP32[46568] = $add;
 $sub = (($y) - ($1))|0;
 HEAP32[(186276)>>2] = $sub;
 $add3 = (($1) + ($x))|0;
 HEAP32[(186284)>>2] = $add3;
 $sub5 = (($x) - ($1))|0;
 HEAP32[(186280)>>2] = $sub5;
 $call = (_R_PointInSubsector($x,$y)|0);
 HEAP32[99418] = 0;
 $2 = HEAP32[$call>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[99419] = $3;
 HEAP32[99420] = $3;
 $ceilingheight = ((($2)) + 4|0);
 $4 = HEAP32[$ceilingheight>>2]|0;
 HEAP32[99421] = $4;
 $5 = HEAP32[32309]|0;
 $inc = (($5) + 1)|0;
 HEAP32[32309] = $inc;
 HEAP32[99422] = 0;
 $6 = HEAP32[(186280)>>2]|0;
 $7 = HEAP32[99512]|0;
 $sub7 = (($6) + -2097152)|0;
 $sub8 = (($sub7) - ($7))|0;
 $shr = $sub8 >> 23;
 $8 = HEAP32[(186284)>>2]|0;
 $sub9 = (2097152 - ($7))|0;
 $add10 = (($sub9) + ($8))|0;
 $shr11 = $add10 >> 23;
 $9 = HEAP32[(186276)>>2]|0;
 $10 = HEAP32[99513]|0;
 $sub12 = (($9) + -2097152)|0;
 $sub13 = (($sub12) - ($10))|0;
 $shr14 = $sub13 >> 23;
 $11 = HEAP32[46568]|0;
 $sub15 = (2097152 - ($10))|0;
 $add16 = (($sub15) + ($11))|0;
 $shr17 = $add16 >> 23;
 $cmp30 = ($shr|0)>($shr11|0);
 $cmp1928 = ($shr14|0)>($shr17|0);
 $or$cond = $cmp30 | $cmp1928;
 L1: do {
  if (!($or$cond)) {
   $bx$031 = $shr;
   L3: while(1) {
    $by$029 = $shr14;
    while(1) {
     $call21 = (_P_BlockThingsIterator($bx$031,$by$029,143)|0);
     $tobool = ($call21|0)==(0);
     if ($tobool) {
      $retval$0 = 0;
      break L3;
     }
     $inc22 = (($by$029) + 1)|0;
     $cmp19 = ($by$029|0)<($shr17|0);
     if ($cmp19) {
      $by$029 = $inc22;
     } else {
      break;
     }
    }
    $inc24 = (($bx$031) + 1)|0;
    $cmp = ($bx$031|0)<($shr11|0);
    if ($cmp) {
     $bx$031 = $inc24;
    } else {
     break L1;
    }
   }
   return ($retval$0|0);
  }
 } while(0);
 _P_UnsetThingPosition($thing);
 $12 = HEAP32[99420]|0;
 $floorz = ((($thing)) + 56|0);
 HEAP32[$floorz>>2] = $12;
 $13 = HEAP32[99421]|0;
 $ceilingz = ((($thing)) + 60|0);
 HEAP32[$ceilingz>>2] = $13;
 $x26 = ((($thing)) + 12|0);
 HEAP32[$x26>>2] = $x;
 $y27 = ((($thing)) + 16|0);
 HEAP32[$y27>>2] = $y;
 _P_SetThingPosition($thing);
 $retval$0 = 1;
 return ($retval$0|0);
}
function _PIT_CheckLine($ld) {
 $ld = $ld|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add5$i = 0, $and = 0, $and20 = 0, $and27 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx10 = 0, $arrayidx2 = 0, $arrayidx46 = 0, $arrayidx6 = 0;
 var $arrayidx6$i = 0, $backsector = 0, $call = 0, $call$i = 0, $cmp = 0, $cmp$i = 0, $cmp1$i = 0, $cmp11 = 0, $cmp12 = 0, $cmp3 = 0, $cmp32 = 0, $cmp36 = 0, $cmp40 = 0, $cmp47 = 0, $cmp7 = 0, $conv = 0, $flags = 0, $flags19 = 0, $inc = 0, $mul$i = 0;
 var $or$cond = 0, $player = 0, $retval$0 = 0, $special = 0, $sub$i = 0, $sub$ptr$div$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$sub$i = 0, $tobool = 0, $tobool17 = 0, $tobool21 = 0, $tobool24 = 0, $tobool28 = 0, $tobool44 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[(186284)>>2]|0;
 $arrayidx = ((($ld)) + 36|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $cmp = ($0|0)>($1|0);
 if (!($cmp)) {
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $2 = HEAP32[(186280)>>2]|0;
 $arrayidx2 = ((($ld)) + 40|0);
 $3 = HEAP32[$arrayidx2>>2]|0;
 $cmp3 = ($2|0)<($3|0);
 if (!($cmp3)) {
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $4 = HEAP32[46568]|0;
 $arrayidx6 = ((($ld)) + 32|0);
 $5 = HEAP32[$arrayidx6>>2]|0;
 $cmp7 = ($4|0)>($5|0);
 if (!($cmp7)) {
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $6 = HEAP32[(186276)>>2]|0;
 $arrayidx10 = ((($ld)) + 28|0);
 $7 = HEAP32[$arrayidx10>>2]|0;
 $cmp11 = ($6|0)<($7|0);
 if (!($cmp11)) {
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $call = (_P_BoxOnLineSide(186272,$ld)|0);
 $cmp12 = ($call|0)==(-1);
 if (!($cmp12)) {
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $backsector = ((($ld)) + 52|0);
 $8 = HEAP32[$backsector>>2]|0;
 $tobool = ($8|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $9 = HEAP32[99414]|0;
 $flags = ((($9)) + 104|0);
 $10 = HEAP32[$flags>>2]|0;
 $and = $10 & 65536;
 $tobool17 = ($and|0)==(0);
 if ($tobool17) {
  $flags19 = ((($ld)) + 16|0);
  $11 = HEAP16[$flags19>>1]|0;
  $conv = $11 << 16 >> 16;
  $and20 = $conv & 1;
  $tobool21 = ($and20|0)==(0);
  if (!($tobool21)) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
  $player = ((($9)) + 132|0);
  $12 = HEAP32[$player>>2]|0;
  $tobool24 = ($12|0)!=(0|0);
  $and27 = $conv & 2;
  $tobool28 = ($and27|0)==(0);
  $or$cond = $tobool28 | $tobool24;
  if (!($or$cond)) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 _P_LineOpening($ld);
 $13 = HEAP32[99444]|0;
 $14 = HEAP32[99421]|0;
 $cmp32 = ($13|0)<($14|0);
 if ($cmp32) {
  HEAP32[99421] = $13;
  HEAP32[99418] = $ld;
 }
 $15 = HEAP32[99445]|0;
 $16 = HEAP32[99420]|0;
 $cmp36 = ($15|0)>($16|0);
 if ($cmp36) {
  HEAP32[99420] = $15;
 }
 $17 = HEAP32[99446]|0;
 $18 = HEAP32[99419]|0;
 $cmp40 = ($17|0)<($18|0);
 if ($cmp40) {
  HEAP32[99419] = $17;
 }
 $special = ((($ld)) + 18|0);
 $19 = HEAP16[$special>>1]|0;
 $tobool44 = ($19<<16>>16)==(0);
 if ($tobool44) {
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $20 = HEAP32[99422]|0;
 $arrayidx46 = (186288 + ($20<<2)|0);
 HEAP32[$arrayidx46>>2] = $ld;
 $inc = (($20) + 1)|0;
 HEAP32[99422] = $inc;
 $cmp47 = ($20|0)>(7);
 if (!($cmp47)) {
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $21 = HEAP32[99442]|0;
 $cmp$i = ($21|0)==(0);
 do {
  if ($cmp$i) {
   $call$i = (_M_CheckParmWithArgs(152741,1)|0);
   $cmp1$i = ($call$i|0)>(0);
   if ($cmp1$i) {
    $22 = HEAP32[99374]|0;
    $add$i = (($call$i) + 1)|0;
    $arrayidx$i = (($22) + ($add$i<<2)|0);
    $23 = HEAP32[$arrayidx$i>>2]|0;
    (_M_StrToInt($23,397768)|0);
    $$pre$i = HEAP32[99442]|0;
    $25 = $$pre$i;
    break;
   } else {
    HEAP32[99442] = 29400216;
    $25 = 29400216;
    break;
   }
  } else {
   $25 = $21;
  }
 } while(0);
 $24 = HEAP32[99500]|0;
 $sub$ptr$lhs$cast$i = $ld;
 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($24))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 6;
 $mul$i = ($sub$ptr$div$i*62)|0;
 $add5$i = (($mul$i) + ($25))|0;
 $26 = HEAP32[99422]|0;
 switch ($26|0) {
 case 12: case 11: case 10: case 9:  {
  $sub$i = (($26) + -9)|0;
  $arrayidx6$i = (186272 + ($sub$i<<2)|0);
  HEAP32[$arrayidx6$i>>2] = $add5$i;
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
  break;
 }
 case 13:  {
  HEAP32[99441] = $add5$i;
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
  break;
 }
 case 14:  {
  HEAP32[99440] = $add5$i;
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
  break;
 }
 default: {
  $27 = HEAP32[32441]|0;
  HEAP32[$vararg_buffer>>2] = $26;
  (_fprintf($27,152750,$vararg_buffer)|0);
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 }
 return (0)|0;
}
function _PIT_CheckThing($thing) {
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add15 = 0, $add27 = 0, $add33 = 0, $add76 = 0, $and = 0, $and11 = 0, $and18 = 0, $and23 = 0, $and67 = 0;
 var $and71 = 0, $and83 = 0, $and87 = 0, $and88 = 0, $call14 = 0, $call74 = 0, $cmp = 0, $cmp28 = 0, $cmp35 = 0, $cmp4 = 0, $cmp41 = 0, $cmp45 = 0, $cmp48 = 0, $cmp52 = 0, $cmp55 = 0, $cmp58 = 0, $cmp62 = 0, $cmp7 = 0, $damage16 = 0, $damage78 = 0;
 var $flags = 0, $flags10 = 0, $flags17 = 0, $height = 0, $height32 = 0, $info = 0, $info19 = 0, $info77 = 0, $ispos = 0, $ispos25 = 0, $momx = 0, $momy = 0, $momz = 0, $mul = 0, $mul79 = 0, $neg = 0, $neg26 = 0, $or$cond = 0, $or$cond27 = 0, $or$cond28 = 0;
 var $radius = 0, $radius1 = 0, $rem = 0, $rem75 = 0, $retval$0 = 0, $retval$0$shrunk = 0, $spawnstate = 0, $sub = 0, $sub2 = 0, $target = 0, $target80 = 0, $tobool = 0, $tobool12 = 0, $tobool24 = 0, $tobool38 = 0, $tobool68 = 0, $tobool72 = 0, $tobool84 = 0, $tobool89 = 0, $tobool92 = 0;
 var $tobool98 = 0, $type = 0, $type40 = 0, $x = 0, $y = 0, $z = 0, $z26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $flags = ((($thing)) + 104|0);
 $0 = HEAP32[$flags>>2]|0;
 $and = $0 & 7;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $retval$0$shrunk = 1;
  $retval$0 = $retval$0$shrunk&1;
  return ($retval$0|0);
 }
 $radius = ((($thing)) + 64|0);
 $1 = HEAP32[$radius>>2]|0;
 $2 = HEAP32[99414]|0;
 $radius1 = ((($2)) + 64|0);
 $3 = HEAP32[$radius1>>2]|0;
 $add = (($3) + ($1))|0;
 $x = ((($thing)) + 12|0);
 $4 = HEAP32[$x>>2]|0;
 $5 = HEAP32[99415]|0;
 $sub = (($4) - ($5))|0;
 $ispos = ($sub|0)>(-1);
 $neg = (0 - ($sub))|0;
 $6 = $ispos ? $sub : $neg;
 $cmp = ($6|0)<($add|0);
 if (!($cmp)) {
  $retval$0$shrunk = 1;
  $retval$0 = $retval$0$shrunk&1;
  return ($retval$0|0);
 }
 $y = ((($thing)) + 16|0);
 $7 = HEAP32[$y>>2]|0;
 $8 = HEAP32[99416]|0;
 $sub2 = (($7) - ($8))|0;
 $ispos25 = ($sub2|0)>(-1);
 $neg26 = (0 - ($sub2))|0;
 $9 = $ispos25 ? $sub2 : $neg26;
 $cmp4 = ($9|0)>=($add|0);
 $cmp7 = ($2|0)==($thing|0);
 $or$cond27 = $cmp7 | $cmp4;
 if ($or$cond27) {
  $retval$0$shrunk = 1;
  $retval$0 = $retval$0$shrunk&1;
  return ($retval$0|0);
 }
 $flags10 = ((($2)) + 104|0);
 $10 = HEAP32[$flags10>>2]|0;
 $and11 = $10 & 16777216;
 $tobool12 = ($and11|0)==(0);
 if (!($tobool12)) {
  $call14 = (_P_Random()|0);
  $rem = (($call14|0) % 8)&-1;
  $add15 = (($rem) + 1)|0;
  $11 = HEAP32[99414]|0;
  $info = ((($11)) + 92|0);
  $12 = HEAP32[$info>>2]|0;
  $damage16 = ((($12)) + 76|0);
  $13 = HEAP32[$damage16>>2]|0;
  $mul = Math_imul($13, $add15)|0;
  _P_DamageMobj($thing,$11,$11,$mul);
  $14 = HEAP32[99414]|0;
  $flags17 = ((($14)) + 104|0);
  $15 = HEAP32[$flags17>>2]|0;
  $and18 = $15 & -16777217;
  HEAP32[$flags17>>2] = $and18;
  $momz = ((($14)) + 80|0);
  HEAP32[$momz>>2] = 0;
  $momy = ((($14)) + 76|0);
  HEAP32[$momy>>2] = 0;
  $momx = ((($14)) + 72|0);
  HEAP32[$momx>>2] = 0;
  $info19 = ((($14)) + 92|0);
  $16 = HEAP32[$info19>>2]|0;
  $spawnstate = ((($16)) + 4|0);
  $17 = HEAP32[$spawnstate>>2]|0;
  (_P_SetMobjState($14,$17)|0);
  $retval$0$shrunk = 0;
  $retval$0 = $retval$0$shrunk&1;
  return ($retval$0|0);
 }
 $and23 = $10 & 65536;
 $tobool24 = ($and23|0)==(0);
 if ($tobool24) {
  $and83 = $0 & 1;
  $tobool84 = ($and83|0)==(0);
  $and87 = $0 & 2;
  if ($tobool84) {
   $tobool98 = ($and87|0)==(0);
   $retval$0$shrunk = $tobool98;
   $retval$0 = $retval$0$shrunk&1;
   return ($retval$0|0);
  }
  $29 = HEAP32[99417]|0;
  $and88 = $29 & 2048;
  $tobool89 = ($and88|0)==(0);
  if (!($tobool89)) {
   _P_TouchSpecialThing($thing,$2);
  }
  $tobool92 = ($and87|0)==(0);
  $retval$0$shrunk = $tobool92;
  $retval$0 = $retval$0$shrunk&1;
  return ($retval$0|0);
 }
 $z = ((($2)) + 20|0);
 $18 = HEAP32[$z>>2]|0;
 $z26 = ((($thing)) + 20|0);
 $19 = HEAP32[$z26>>2]|0;
 $height = ((($thing)) + 68|0);
 $20 = HEAP32[$height>>2]|0;
 $add27 = (($20) + ($19))|0;
 $cmp28 = ($18|0)>($add27|0);
 if ($cmp28) {
  $retval$0$shrunk = 1;
  $retval$0 = $retval$0$shrunk&1;
  return ($retval$0|0);
 }
 $height32 = ((($2)) + 68|0);
 $21 = HEAP32[$height32>>2]|0;
 $add33 = (($21) + ($18))|0;
 $cmp35 = ($add33|0)<($19|0);
 if ($cmp35) {
  $retval$0$shrunk = 1;
  $retval$0 = $retval$0$shrunk&1;
  return ($retval$0|0);
 }
 $target = ((($2)) + 120|0);
 $22 = HEAP32[$target>>2]|0;
 $tobool38 = ($22|0)==(0|0);
 do {
  if (!($tobool38)) {
   $type = ((($22)) + 88|0);
   $23 = HEAP32[$type>>2]|0;
   $type40 = ((($thing)) + 88|0);
   $24 = HEAP32[$type40>>2]|0;
   $cmp41 = ($23|0)==($24|0);
   if (!($cmp41)) {
    $cmp45 = ($23|0)==(17);
    $cmp48 = ($24|0)==(15);
    $or$cond = $cmp45 & $cmp48;
    if (!($or$cond)) {
     $cmp52 = ($23|0)==(15);
     $cmp55 = ($24|0)==(17);
     $or$cond28 = $cmp52 & $cmp55;
     if (!($or$cond28)) {
      break;
     }
    }
   }
   $cmp58 = ($22|0)==($thing|0);
   if ($cmp58) {
    $retval$0$shrunk = 1;
    $retval$0 = $retval$0$shrunk&1;
    return ($retval$0|0);
   }
   $cmp62 = ($24|0)==(0);
   if (!($cmp62)) {
    $retval$0$shrunk = 0;
    $retval$0 = $retval$0$shrunk&1;
    return ($retval$0|0);
   }
  }
 } while(0);
 $and67 = $0 & 4;
 $tobool68 = ($and67|0)==(0);
 if ($tobool68) {
  $and71 = $0 & 2;
  $tobool72 = ($and71|0)==(0);
  $retval$0$shrunk = $tobool72;
  $retval$0 = $retval$0$shrunk&1;
  return ($retval$0|0);
 } else {
  $call74 = (_P_Random()|0);
  $rem75 = (($call74|0) % 8)&-1;
  $add76 = (($rem75) + 1)|0;
  $25 = HEAP32[99414]|0;
  $info77 = ((($25)) + 92|0);
  $26 = HEAP32[$info77>>2]|0;
  $damage78 = ((($26)) + 76|0);
  $27 = HEAP32[$damage78>>2]|0;
  $mul79 = Math_imul($27, $add76)|0;
  $target80 = ((($25)) + 120|0);
  $28 = HEAP32[$target80>>2]|0;
  _P_DamageMobj($thing,$25,$28,$mul79);
  $retval$0$shrunk = 0;
  $retval$0 = $retval$0$shrunk&1;
  return ($retval$0|0);
 }
 return (0)|0;
}
function _P_CheckPosition($thing,$x,$y) {
 $thing = $thing|0;
 $x = $x|0;
 $y = $y|0;
 var $$pre = 0, $$pre43 = 0, $$pre44 = 0, $$pre45 = 0, $$pre46 = 0, $$pre47 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add10 = 0, $add16 = 0, $add3 = 0, $and = 0, $bx$038 = 0, $bx$134 = 0, $by$036 = 0, $by$132 = 0, $call = 0, $call21 = 0, $call43 = 0, $ceilingheight = 0, $cmp = 0, $cmp19 = 0;
 var $cmp1935 = 0, $cmp37 = 0, $cmp38 = 0, $cmp3833 = 0, $cmp41 = 0, $cmp4131 = 0, $flags = 0, $inc = 0, $inc25 = 0, $inc27 = 0, $inc48 = 0, $inc51 = 0, $or$cond = 0, $or$cond50 = 0, $radius = 0, $retval$0 = 0, $shr = 0, $shr11 = 0, $shr14 = 0, $shr17 = 0;
 var $shr30 = 0, $shr32 = 0, $shr34 = 0, $shr36 = 0, $sub = 0, $sub12 = 0, $sub13 = 0, $sub15 = 0, $sub29 = 0, $sub31 = 0, $sub33 = 0, $sub35 = 0, $sub5 = 0, $sub7 = 0, $sub8 = 0, $sub9 = 0, $tobool = 0, $tobool22 = 0, $tobool44 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[99414] = $thing;
 $flags = ((($thing)) + 104|0);
 $0 = HEAP32[$flags>>2]|0;
 HEAP32[99417] = $0;
 HEAP32[99415] = $x;
 HEAP32[99416] = $y;
 $radius = ((($thing)) + 64|0);
 $1 = HEAP32[$radius>>2]|0;
 $add = (($1) + ($y))|0;
 HEAP32[46568] = $add;
 $sub = (($y) - ($1))|0;
 HEAP32[(186276)>>2] = $sub;
 $add3 = (($1) + ($x))|0;
 HEAP32[(186284)>>2] = $add3;
 $sub5 = (($x) - ($1))|0;
 HEAP32[(186280)>>2] = $sub5;
 $call = (_R_PointInSubsector($x,$y)|0);
 HEAP32[99418] = 0;
 $2 = HEAP32[$call>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[99419] = $3;
 HEAP32[99420] = $3;
 $ceilingheight = ((($2)) + 4|0);
 $4 = HEAP32[$ceilingheight>>2]|0;
 HEAP32[99421] = $4;
 $5 = HEAP32[32309]|0;
 $inc = (($5) + 1)|0;
 HEAP32[32309] = $inc;
 HEAP32[99422] = 0;
 $6 = HEAP32[99417]|0;
 $and = $6 & 4096;
 $tobool = ($and|0)==(0);
 if (!($tobool)) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $7 = HEAP32[(186280)>>2]|0;
 $8 = HEAP32[99512]|0;
 $sub7 = (($7) + -2097152)|0;
 $sub8 = (($sub7) - ($8))|0;
 $shr = $sub8 >> 23;
 $9 = HEAP32[(186284)>>2]|0;
 $sub9 = (2097152 - ($8))|0;
 $add10 = (($sub9) + ($9))|0;
 $shr11 = $add10 >> 23;
 $10 = HEAP32[(186276)>>2]|0;
 $11 = HEAP32[99513]|0;
 $sub12 = (($10) + -2097152)|0;
 $sub13 = (($sub12) - ($11))|0;
 $shr14 = $sub13 >> 23;
 $12 = HEAP32[46568]|0;
 $sub15 = (2097152 - ($11))|0;
 $add16 = (($sub15) + ($12))|0;
 $shr17 = $add16 >> 23;
 $cmp37 = ($shr|0)>($shr11|0);
 $cmp1935 = ($shr14|0)>($shr17|0);
 $or$cond = $cmp37 | $cmp1935;
 do {
  if ($or$cond) {
   $13 = $7;$14 = $8;$15 = $9;$16 = $10;$17 = $11;$18 = $12;
  } else {
   $bx$038 = $shr;
   L6: while(1) {
    $by$036 = $shr14;
    while(1) {
     $call21 = (_P_BlockThingsIterator($bx$038,$by$036,144)|0);
     $tobool22 = ($call21|0)==(0);
     if ($tobool22) {
      $retval$0 = 0;
      label = 15;
      break L6;
     }
     $inc25 = (($by$036) + 1)|0;
     $cmp19 = ($by$036|0)<($shr17|0);
     if ($cmp19) {
      $by$036 = $inc25;
     } else {
      break;
     }
    }
    $inc27 = (($bx$038) + 1)|0;
    $cmp = ($bx$038|0)<($shr11|0);
    if ($cmp) {
     $bx$038 = $inc27;
    } else {
     label = 8;
     break;
    }
   }
   if ((label|0) == 8) {
    $$pre = HEAP32[(186280)>>2]|0;
    $$pre43 = HEAP32[99512]|0;
    $$pre44 = HEAP32[(186284)>>2]|0;
    $$pre45 = HEAP32[(186276)>>2]|0;
    $$pre46 = HEAP32[99513]|0;
    $$pre47 = HEAP32[46568]|0;
    $13 = $$pre;$14 = $$pre43;$15 = $$pre44;$16 = $$pre45;$17 = $$pre46;$18 = $$pre47;
    break;
   }
   else if ((label|0) == 15) {
    return ($retval$0|0);
   }
  }
 } while(0);
 $sub29 = (($13) - ($14))|0;
 $shr30 = $sub29 >> 23;
 $sub31 = (($15) - ($14))|0;
 $shr32 = $sub31 >> 23;
 $sub33 = (($16) - ($17))|0;
 $shr34 = $sub33 >> 23;
 $sub35 = (($18) - ($17))|0;
 $shr36 = $sub35 >> 23;
 $cmp3833 = ($shr30|0)>($shr32|0);
 $cmp4131 = ($shr34|0)>($shr36|0);
 $or$cond50 = $cmp3833 | $cmp4131;
 if ($or$cond50) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $bx$134 = $shr30;
 L19: while(1) {
  $by$132 = $shr34;
  while(1) {
   $call43 = (_P_BlockLinesIterator($bx$134,$by$132,145)|0);
   $tobool44 = ($call43|0)==(0);
   if ($tobool44) {
    $retval$0 = 0;
    label = 15;
    break L19;
   }
   $inc48 = (($by$132) + 1)|0;
   $cmp41 = ($by$132|0)<($shr36|0);
   if ($cmp41) {
    $by$132 = $inc48;
   } else {
    break;
   }
  }
  $inc51 = (($bx$134) + 1)|0;
  $cmp38 = ($bx$134|0)<($shr32|0);
  if ($cmp38) {
   $bx$134 = $inc51;
  } else {
   $retval$0 = 1;
   label = 15;
   break;
  }
 }
 if ((label|0) == 15) {
  return ($retval$0|0);
 }
 return (0)|0;
}
function _P_TryMove($thing,$x,$y) {
 $thing = $thing|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and23 = 0;
 var $and36 = 0, $and6 = 0, $arrayidx = 0, $call = 0, $call42 = 0, $call43 = 0, $ceilingz = 0, $cmp = 0, $cmp10 = 0, $cmp19 = 0, $cmp27 = 0, $cmp44 = 0, $dec = 0, $dec32 = 0, $dec34 = 0, $flags = 0, $floorz = 0, $height = 0, $or$cond = 0, $retval$0 = 0;
 var $special = 0, $sub = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0, $sub18 = 0, $sub26 = 0, $sub8 = 0, $tobool = 0, $tobool1 = 0, $tobool24 = 0, $tobool37 = 0, $tobool39 = 0, $tobool3933 = 0, $tobool46 = 0, $tobool7 = 0, $x31 = 0, $y32 = 0, $z = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[99423] = 0;
 $call = (_P_CheckPosition($thing,$x,$y)|0);
 $tobool = ($call|0)==(0);
 if ($tobool) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $flags = ((($thing)) + 104|0);
 $0 = HEAP32[$flags>>2]|0;
 $and = $0 & 4096;
 $tobool1 = ($and|0)==(0);
 if ($tobool1) {
  $1 = HEAP32[99421]|0;
  $2 = HEAP32[99420]|0;
  $sub = (($1) - ($2))|0;
  $height = ((($thing)) + 68|0);
  $3 = HEAP32[$height>>2]|0;
  $cmp = ($sub|0)<($3|0);
  if ($cmp) {
   $retval$0 = 0;
   return ($retval$0|0);
  }
  HEAP32[99423] = 1;
  $and6 = $0 & 32768;
  $tobool7 = ($and6|0)==(0);
  if ($tobool7) {
   $z = ((($thing)) + 20|0);
   $4 = HEAP32[$z>>2]|0;
   $sub8 = (($1) - ($4))|0;
   $cmp10 = ($sub8|0)<($3|0);
   $sub18 = (($2) - ($4))|0;
   $cmp19 = ($sub18|0)>(1572864);
   $or$cond = $cmp10 | $cmp19;
   if ($or$cond) {
    $retval$0 = 0;
    return ($retval$0|0);
   }
  }
  $and23 = $0 & 17408;
  $tobool24 = ($and23|0)==(0);
  if ($tobool24) {
   $5 = HEAP32[99419]|0;
   $sub26 = (($2) - ($5))|0;
   $cmp27 = ($sub26|0)>(1572864);
   if ($cmp27) {
    $retval$0 = 0;
    return ($retval$0|0);
   }
  }
 }
 _P_UnsetThingPosition($thing);
 $x31 = ((($thing)) + 12|0);
 $6 = HEAP32[$x31>>2]|0;
 $y32 = ((($thing)) + 16|0);
 $7 = HEAP32[$y32>>2]|0;
 $8 = HEAP32[99420]|0;
 $floorz = ((($thing)) + 56|0);
 HEAP32[$floorz>>2] = $8;
 $9 = HEAP32[99421]|0;
 $ceilingz = ((($thing)) + 60|0);
 HEAP32[$ceilingz>>2] = $9;
 HEAP32[$x31>>2] = $x;
 HEAP32[$y32>>2] = $y;
 _P_SetThingPosition($thing);
 $10 = HEAP32[$flags>>2]|0;
 $and36 = $10 & 36864;
 $tobool37 = ($and36|0)==(0);
 if (!($tobool37)) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $11 = HEAP32[99422]|0;
 $dec32 = (($11) + -1)|0;
 HEAP32[99422] = $dec32;
 $tobool3933 = ($11|0)==(0);
 if ($tobool3933) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $dec34 = $dec32;
 while(1) {
  $arrayidx = (186288 + ($dec34<<2)|0);
  $12 = HEAP32[$arrayidx>>2]|0;
  $13 = HEAP32[$x31>>2]|0;
  $14 = HEAP32[$y32>>2]|0;
  $call42 = (_P_PointOnLineSide($13,$14,$12)|0);
  $call43 = (_P_PointOnLineSide($6,$7,$12)|0);
  $cmp44 = ($call42|0)==($call43|0);
  if (!($cmp44)) {
   $special = ((($12)) + 18|0);
   $15 = HEAP16[$special>>1]|0;
   $tobool46 = ($15<<16>>16)==(0);
   if (!($tobool46)) {
    $16 = HEAP32[99500]|0;
    $sub$ptr$lhs$cast = $12;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($16))|0;
    $sub$ptr$div = $sub$ptr$sub >> 6;
    _P_CrossSpecialLine($sub$ptr$div,$call43,$thing);
   }
  }
  $17 = HEAP32[99422]|0;
  $dec = (($17) + -1)|0;
  HEAP32[99422] = $dec;
  $tobool39 = ($17|0)==(0);
  if ($tobool39) {
   $retval$0 = 1;
   break;
  } else {
   $dec34 = $dec;
  }
 }
 return ($retval$0|0);
}
function _P_HitSlideLine($ld) {
 $ld = $ld|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx17 = 0, $arrayidx19 = 0, $call = 0;
 var $call15 = 0, $call16 = 0, $call18 = 0, $call20 = 0, $call5 = 0, $call9 = 0, $cmp10 = 0, $cmp6 = 0, $dx = 0, $dy = 0, $shr = 0, $shr14 = 0, $slopetype = 0, $spec$select = 0, $sub = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $slopetype = ((($ld)) + 44|0);
 $0 = HEAP32[$slopetype>>2]|0;
 switch ($0|0) {
 case 0:  {
  HEAP32[99424] = 0;
  return;
  break;
 }
 case 1:  {
  HEAP32[99425] = 0;
  return;
  break;
 }
 default: {
  $1 = HEAP32[99426]|0;
  $x = ((($1)) + 12|0);
  $2 = HEAP32[$x>>2]|0;
  $y = ((($1)) + 16|0);
  $3 = HEAP32[$y>>2]|0;
  $call = (_P_PointOnLineSide($2,$3,$ld)|0);
  $dx = ((($ld)) + 8|0);
  $4 = HEAP32[$dx>>2]|0;
  $dy = ((($ld)) + 12|0);
  $5 = HEAP32[$dy>>2]|0;
  $call5 = (_R_PointToAngle2(0,0,$4,$5)|0);
  $cmp6 = ($call|0)==(1);
  $add = $call5 ^ -2147483648;
  $spec$select = $cmp6 ? $add : $call5;
  $6 = HEAP32[99425]|0;
  $7 = HEAP32[99424]|0;
  $call9 = (_R_PointToAngle2(0,0,$6,$7)|0);
  $sub = (($call9) - ($spec$select))|0;
  $cmp10 = ($sub>>>0)>(2147483648);
  $shr = $spec$select >>> 19;
  $8 = $sub >>> 19;
  $9 = $8 ^ 4096;
  $shr14 = $cmp10 ? $9 : $8;
  $10 = HEAP32[99425]|0;
  $11 = HEAP32[99424]|0;
  $call15 = (_P_AproxDistance($10,$11)|0);
  $arrayidx = ((82912) + ($shr14<<2)|0);
  $12 = HEAP32[$arrayidx>>2]|0;
  $call16 = (_FixedMul($call15,$12)|0);
  $arrayidx17 = ((82912) + ($shr<<2)|0);
  $13 = HEAP32[$arrayidx17>>2]|0;
  $call18 = (_FixedMul($call16,$13)|0);
  HEAP32[99425] = $call18;
  $arrayidx19 = (74720 + ($shr<<2)|0);
  $14 = HEAP32[$arrayidx19>>2]|0;
  $call20 = (_FixedMul($call16,$14)|0);
  HEAP32[99424] = $call20;
  return;
 }
 }
}
function _PTR_SlideTraverse($in) {
 $in = $in|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $cmp11 = 0;
 var $cmp17 = 0, $cmp21 = 0, $d = 0, $flags = 0, $height = 0, $isaline = 0, $retval$0 = 0, $sub = 0, $sub16 = 0, $tobool = 0, $tobool1 = 0, $tobool3 = 0, $vararg_buffer = 0, $x = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $isaline = ((($in)) + 4|0);
 $0 = HEAP32[$isaline>>2]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  _I_Error(152824,$vararg_buffer);
  // unreachable;
 }
 $d = ((($in)) + 8|0);
 $1 = HEAP32[$d>>2]|0;
 $flags = ((($1)) + 16|0);
 $2 = HEAP16[$flags>>1]|0;
 $3 = $2 & 4;
 $tobool1 = ($3<<16>>16)==(0);
 if ($tobool1) {
  $4 = HEAP32[99426]|0;
  $x = ((($4)) + 12|0);
  $5 = HEAP32[$x>>2]|0;
  $y = ((($4)) + 16|0);
  $6 = HEAP32[$y>>2]|0;
  $call = (_P_PointOnLineSide($5,$6,$1)|0);
  $tobool3 = ($call|0)==(0);
  if (!($tobool3)) {
   $retval$0 = 1;
   STACKTOP = sp;return ($retval$0|0);
  }
 } else {
  _P_LineOpening($1);
  $7 = HEAP32[99443]|0;
  $8 = HEAP32[99426]|0;
  $height = ((($8)) + 68|0);
  $9 = HEAP32[$height>>2]|0;
  $cmp = ($7|0)<($9|0);
  if (!($cmp)) {
   $10 = HEAP32[99444]|0;
   $z = ((($8)) + 20|0);
   $11 = HEAP32[$z>>2]|0;
   $sub = (($10) - ($11))|0;
   $cmp11 = ($sub|0)<($9|0);
   if (!($cmp11)) {
    $12 = HEAP32[99445]|0;
    $sub16 = (($12) - ($11))|0;
    $cmp17 = ($sub16|0)>(1572864);
    if (!($cmp17)) {
     $retval$0 = 1;
     STACKTOP = sp;return ($retval$0|0);
    }
   }
  }
 }
 $13 = HEAP32[$in>>2]|0;
 $14 = HEAP32[99427]|0;
 $cmp21 = ($13|0)<($14|0);
 if (!($cmp21)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $15 = HEAP32[99428]|0;
 HEAP32[99429] = $15;
 $16 = HEAP32[$in>>2]|0;
 HEAP32[99427] = $16;
 HEAP32[99428] = $1;
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _P_SlideMove($mo) {
 $mo = $mo|0;
 var $$pre = 0, $$pre57 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$1 = 0;
 var $add15 = 0, $add15$1 = 0, $add28 = 0, $add28$1 = 0, $add30 = 0, $add30$1 = 0, $add32 = 0, $add32$1 = 0, $add34 = 0, $add34$1 = 0, $add37 = 0, $add37$1 = 0, $add39 = 0, $add39$1 = 0, $add46 = 0, $add51 = 0, $add64 = 0, $add64$1 = 0, $add66 = 0, $add66$1 = 0;
 var $add87 = 0, $add87$1 = 0, $add89 = 0, $add89$1 = 0, $call47 = 0, $call60 = 0, $call60$1 = 0, $call62 = 0, $call62$1 = 0, $call67 = 0, $call67$1 = 0, $call81 = 0, $call81$1 = 0, $call83 = 0, $call83$1 = 0, $call90 = 0, $call90$1 = 0, $cmp1 = 0, $cmp1$1 = 0, $cmp12 = 0;
 var $cmp12$1 = 0, $cmp41 = 0, $cmp41$1 = 0, $cmp57 = 0, $cmp57$1 = 0, $cmp77 = 0, $cmp77$1 = 0, $leadx$0 = 0, $leadx$0$1 = 0, $leady$0 = 0, $leady$0$1 = 0, $momx = 0, $momy = 0, $radius = 0, $spec$store$select = 0, $spec$store$select$1 = 0, $sub = 0, $sub$1 = 0, $sub18 = 0, $sub18$1 = 0;
 var $sub56 = 0, $sub56$1 = 0, $sub73 = 0, $sub73$1 = 0, $tobool = 0, $tobool68 = 0, $tobool68$1 = 0, $tobool91 = 0, $tobool91$1 = 0, $trailx$0 = 0, $trailx$0$1 = 0, $traily$0 = 0, $traily$0$1 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99426] = $mo;
 $momx = ((($mo)) + 72|0);
 $x = ((($mo)) + 12|0);
 $radius = ((($mo)) + 64|0);
 $momy = ((($mo)) + 76|0);
 $y = ((($mo)) + 16|0);
 $0 = HEAP32[$momx>>2]|0;
 $cmp1 = ($0|0)>(0);
 $1 = HEAP32[$x>>2]|0;
 $2 = HEAP32[$radius>>2]|0;
 $add = (($2) + ($1))|0;
 $sub = (($1) - ($2))|0;
 $trailx$0 = $cmp1 ? $sub : $add;
 $leadx$0 = $cmp1 ? $add : $sub;
 $3 = HEAP32[$momy>>2]|0;
 $cmp12 = ($3|0)>(0);
 $4 = HEAP32[$y>>2]|0;
 $add15 = (($4) + ($2))|0;
 $sub18 = (($4) - ($2))|0;
 $traily$0 = $cmp12 ? $sub18 : $add15;
 $leady$0 = $cmp12 ? $add15 : $sub18;
 HEAP32[99427] = 65537;
 $add28 = (($leadx$0) + ($0))|0;
 $add30 = (($leady$0) + ($3))|0;
 (_P_PathTraverse($leadx$0,$leady$0,$add28,$add30,1,146)|0);
 $5 = HEAP32[$momx>>2]|0;
 $add32 = (($5) + ($trailx$0))|0;
 $6 = HEAP32[$momy>>2]|0;
 $add34 = (($6) + ($leady$0))|0;
 (_P_PathTraverse($trailx$0,$leady$0,$add32,$add34,1,146)|0);
 $7 = HEAP32[$momx>>2]|0;
 $add37 = (($7) + ($leadx$0))|0;
 $8 = HEAP32[$momy>>2]|0;
 $add39 = (($8) + ($traily$0))|0;
 (_P_PathTraverse($leadx$0,$traily$0,$add37,$add39,1,146)|0);
 $9 = HEAP32[99427]|0;
 $cmp41 = ($9|0)==(65537);
 do {
  if (!($cmp41)) {
   $sub56 = (($9) + -2048)|0;
   HEAP32[99427] = $sub56;
   $cmp57 = ($9|0)>(2048);
   if ($cmp57) {
    $26 = HEAP32[$momx>>2]|0;
    $call60 = (_FixedMul($26,$sub56)|0);
    $27 = HEAP32[$momy>>2]|0;
    $28 = HEAP32[99427]|0;
    $call62 = (_FixedMul($27,$28)|0);
    $29 = HEAP32[$x>>2]|0;
    $add64 = (($29) + ($call60))|0;
    $30 = HEAP32[$y>>2]|0;
    $add66 = (($30) + ($call62))|0;
    $call67 = (_P_TryMove($mo,$add64,$add66)|0);
    $tobool68 = ($call67|0)==(0);
    if ($tobool68) {
     break;
    }
    $$pre = HEAP32[99427]|0;
    $31 = $$pre;
   } else {
    $31 = $sub56;
   }
   $sub73 = (63488 - ($31))|0;
   $32 = ($sub73|0)<(65536);
   $spec$store$select = $32 ? $sub73 : 65536;
   HEAP32[99427] = $spec$store$select;
   $cmp77 = ($spec$store$select|0)<(1);
   if ($cmp77) {
    return;
   }
   $33 = HEAP32[$momx>>2]|0;
   $call81 = (_FixedMul($33,$spec$store$select)|0);
   HEAP32[99425] = $call81;
   $34 = HEAP32[$momy>>2]|0;
   $35 = HEAP32[99427]|0;
   $call83 = (_FixedMul($34,$35)|0);
   HEAP32[99424] = $call83;
   $36 = HEAP32[99428]|0;
   _P_HitSlideLine($36);
   $37 = HEAP32[99425]|0;
   HEAP32[$momx>>2] = $37;
   $38 = HEAP32[99424]|0;
   HEAP32[$momy>>2] = $38;
   $39 = HEAP32[$x>>2]|0;
   $add87 = (($39) + ($37))|0;
   $40 = HEAP32[$y>>2]|0;
   $add89 = (($40) + ($38))|0;
   $call90 = (_P_TryMove($mo,$add87,$add89)|0);
   $tobool91 = ($call90|0)==(0);
   if (!($tobool91)) {
    return;
   }
   $10 = HEAP32[$momx>>2]|0;
   $cmp1$1 = ($10|0)>(0);
   $11 = HEAP32[$x>>2]|0;
   $12 = HEAP32[$radius>>2]|0;
   $add$1 = (($12) + ($11))|0;
   $sub$1 = (($11) - ($12))|0;
   $trailx$0$1 = $cmp1$1 ? $sub$1 : $add$1;
   $leadx$0$1 = $cmp1$1 ? $add$1 : $sub$1;
   $13 = HEAP32[$momy>>2]|0;
   $cmp12$1 = ($13|0)>(0);
   $14 = HEAP32[$y>>2]|0;
   $add15$1 = (($14) + ($12))|0;
   $sub18$1 = (($14) - ($12))|0;
   $traily$0$1 = $cmp12$1 ? $sub18$1 : $add15$1;
   $leady$0$1 = $cmp12$1 ? $add15$1 : $sub18$1;
   HEAP32[99427] = 65537;
   $add28$1 = (($leadx$0$1) + ($10))|0;
   $add30$1 = (($leady$0$1) + ($13))|0;
   (_P_PathTraverse($leadx$0$1,$leady$0$1,$add28$1,$add30$1,1,146)|0);
   $15 = HEAP32[$momx>>2]|0;
   $add32$1 = (($15) + ($trailx$0$1))|0;
   $16 = HEAP32[$momy>>2]|0;
   $add34$1 = (($16) + ($leady$0$1))|0;
   (_P_PathTraverse($trailx$0$1,$leady$0$1,$add32$1,$add34$1,1,146)|0);
   $17 = HEAP32[$momx>>2]|0;
   $add37$1 = (($17) + ($leadx$0$1))|0;
   $18 = HEAP32[$momy>>2]|0;
   $add39$1 = (($18) + ($traily$0$1))|0;
   (_P_PathTraverse($leadx$0$1,$traily$0$1,$add37$1,$add39$1,1,146)|0);
   $19 = HEAP32[99427]|0;
   $cmp41$1 = ($19|0)==(65537);
   if (!($cmp41$1)) {
    $sub56$1 = (($19) + -2048)|0;
    HEAP32[99427] = $sub56$1;
    $cmp57$1 = ($19|0)>(2048);
    if ($cmp57$1) {
     $41 = HEAP32[$momx>>2]|0;
     $call60$1 = (_FixedMul($41,$sub56$1)|0);
     $42 = HEAP32[$momy>>2]|0;
     $43 = HEAP32[99427]|0;
     $call62$1 = (_FixedMul($42,$43)|0);
     $44 = HEAP32[$x>>2]|0;
     $add64$1 = (($44) + ($call60$1))|0;
     $45 = HEAP32[$y>>2]|0;
     $add66$1 = (($45) + ($call62$1))|0;
     $call67$1 = (_P_TryMove($mo,$add64$1,$add66$1)|0);
     $tobool68$1 = ($call67$1|0)==(0);
     if ($tobool68$1) {
      break;
     }
     $$pre57 = HEAP32[99427]|0;
     $46 = $$pre57;
    } else {
     $46 = $sub56$1;
    }
    $sub73$1 = (63488 - ($46))|0;
    $47 = ($sub73$1|0)<(65536);
    $spec$store$select$1 = $47 ? $sub73$1 : 65536;
    HEAP32[99427] = $spec$store$select$1;
    $cmp77$1 = ($spec$store$select$1|0)<(1);
    if ($cmp77$1) {
     return;
    }
    $48 = HEAP32[$momx>>2]|0;
    $call81$1 = (_FixedMul($48,$spec$store$select$1)|0);
    HEAP32[99425] = $call81$1;
    $49 = HEAP32[$momy>>2]|0;
    $50 = HEAP32[99427]|0;
    $call83$1 = (_FixedMul($49,$50)|0);
    HEAP32[99424] = $call83$1;
    $51 = HEAP32[99428]|0;
    _P_HitSlideLine($51);
    $52 = HEAP32[99425]|0;
    HEAP32[$momx>>2] = $52;
    $53 = HEAP32[99424]|0;
    HEAP32[$momy>>2] = $53;
    $54 = HEAP32[$x>>2]|0;
    $add87$1 = (($54) + ($52))|0;
    $55 = HEAP32[$y>>2]|0;
    $add89$1 = (($55) + ($53))|0;
    $call90$1 = (_P_TryMove($mo,$add87$1,$add89$1)|0);
    $tobool91$1 = ($call90$1|0)==(0);
    if (!($tobool91$1)) {
     return;
    }
   }
  }
 } while(0);
 $20 = HEAP32[$x>>2]|0;
 $21 = HEAP32[$y>>2]|0;
 $22 = HEAP32[$momy>>2]|0;
 $add46 = (($22) + ($21))|0;
 $call47 = (_P_TryMove($mo,$20,$add46)|0);
 $tobool = ($call47|0)==(0);
 if (!($tobool)) {
  return;
 }
 $23 = HEAP32[$x>>2]|0;
 $24 = HEAP32[$momx>>2]|0;
 $add51 = (($24) + ($23))|0;
 $25 = HEAP32[$y>>2]|0;
 (_P_TryMove($mo,$add51,$25)|0);
 return;
}
function _PTR_AimTraverse($in) {
 $in = $in|0;
 var $$ = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add74 = 0, $and47 = 0, $backsector = 0, $call = 0, $call13 = 0, $call30 = 0, $call52 = 0, $call54 = 0, $call61 = 0, $ceilingheight = 0, $ceilingheight25 = 0, $cmp = 0, $cmp10 = 0, $cmp14 = 0, $cmp20 = 0, $cmp26 = 0, $cmp31 = 0, $cmp36 = 0, $cmp42 = 0, $cmp55 = 0;
 var $cmp6 = 0, $cmp62 = 0, $cmp66 = 0, $cmp70 = 0, $d = 0, $div = 0, $flags = 0, $flags46 = 0, $frontsector = 0, $frontsector23 = 0, $height = 0, $isaline = 0, $retval$0 = 0, $spec$select = 0, $sub = 0, $sub29 = 0, $sub53 = 0, $sub60 = 0, $thingbottomslope$0 = 0, $tobool = 0;
 var $tobool1 = 0, $tobool48 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isaline = ((($in)) + 4|0);
 $0 = HEAP32[$isaline>>2]|0;
 $tobool = ($0|0)==(0);
 $d = ((($in)) + 8|0);
 if ($tobool) {
  $24 = HEAP32[$d>>2]|0;
  $25 = HEAP32[99432]|0;
  $cmp42 = ($24|0)==($25|0);
  if ($cmp42) {
   $retval$0 = 1;
   return ($retval$0|0);
  }
  $flags46 = ((($24)) + 104|0);
  $26 = HEAP32[$flags46>>2]|0;
  $and47 = $26 & 4;
  $tobool48 = ($and47|0)==(0);
  if ($tobool48) {
   $retval$0 = 1;
   return ($retval$0|0);
  }
  $27 = HEAP32[99430]|0;
  $28 = HEAP32[$in>>2]|0;
  $call52 = (_FixedMul($27,$28)|0);
  $z = ((($24)) + 20|0);
  $29 = HEAP32[$z>>2]|0;
  $height = ((($24)) + 68|0);
  $30 = HEAP32[$height>>2]|0;
  $add = (($30) + ($29))|0;
  $31 = HEAP32[99431]|0;
  $sub53 = (($add) - ($31))|0;
  $call54 = (_FixedDiv($sub53,$call52)|0);
  $32 = HEAP32[99546]|0;
  $cmp55 = ($call54|0)<($32|0);
  if ($cmp55) {
   $retval$0 = 1;
   return ($retval$0|0);
  }
  $33 = HEAP32[$z>>2]|0;
  $34 = HEAP32[99431]|0;
  $sub60 = (($33) - ($34))|0;
  $call61 = (_FixedDiv($sub60,$call52)|0);
  $35 = HEAP32[99547]|0;
  $cmp62 = ($call61|0)>($35|0);
  if ($cmp62) {
   $retval$0 = 1;
   return ($retval$0|0);
  }
  $cmp66 = ($call54|0)>($35|0);
  $spec$select = $cmp66 ? $35 : $call54;
  $36 = HEAP32[99546]|0;
  $cmp70 = ($call61|0)<($36|0);
  $thingbottomslope$0 = $cmp70 ? $36 : $call61;
  $add74 = (($thingbottomslope$0) + ($spec$select))|0;
  $div = (($add74|0) / 2)&-1;
  HEAP32[99433] = $div;
  HEAP32[99434] = $24;
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $1 = HEAP32[$d>>2]|0;
 $flags = ((($1)) + 16|0);
 $2 = HEAP16[$flags>>1]|0;
 $3 = $2 & 4;
 $tobool1 = ($3<<16>>16)==(0);
 if ($tobool1) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 _P_LineOpening($1);
 $4 = HEAP32[99445]|0;
 $5 = HEAP32[99444]|0;
 $cmp = ($4|0)<($5|0);
 if (!($cmp)) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $6 = HEAP32[99430]|0;
 $7 = HEAP32[$in>>2]|0;
 $call = (_FixedMul($6,$7)|0);
 $backsector = ((($1)) + 52|0);
 $8 = HEAP32[$backsector>>2]|0;
 $cmp6 = ($8|0)==(0|0);
 if ($cmp6) {
  label = 6;
 } else {
  $frontsector = ((($1)) + 48|0);
  $9 = HEAP32[$frontsector>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$8>>2]|0;
  $cmp10 = ($10|0)==($11|0);
  if (!($cmp10)) {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  $12 = HEAP32[99445]|0;
  $13 = HEAP32[99431]|0;
  $sub = (($12) - ($13))|0;
  $call13 = (_FixedDiv($sub,$call)|0);
  $14 = HEAP32[99546]|0;
  $cmp14 = ($call13|0)>($14|0);
  if ($cmp14) {
   HEAP32[99546] = $call13;
  }
 }
 $15 = HEAP32[$backsector>>2]|0;
 $cmp20 = ($15|0)==(0|0);
 if ($cmp20) {
  label = 11;
 } else {
  $frontsector23 = ((($1)) + 48|0);
  $16 = HEAP32[$frontsector23>>2]|0;
  $ceilingheight = ((($16)) + 4|0);
  $17 = HEAP32[$ceilingheight>>2]|0;
  $ceilingheight25 = ((($15)) + 4|0);
  $18 = HEAP32[$ceilingheight25>>2]|0;
  $cmp26 = ($17|0)==($18|0);
  if ($cmp26) {
   $$pre = HEAP32[99547]|0;
   $23 = $$pre;
  } else {
   label = 11;
  }
 }
 if ((label|0) == 11) {
  $19 = HEAP32[99444]|0;
  $20 = HEAP32[99431]|0;
  $sub29 = (($19) - ($20))|0;
  $call30 = (_FixedDiv($sub29,$call)|0);
  $21 = HEAP32[99547]|0;
  $cmp31 = ($call30|0)<($21|0);
  if ($cmp31) {
   HEAP32[99547] = $call30;
   $23 = $call30;
  } else {
   $23 = $21;
  }
 }
 $22 = HEAP32[99546]|0;
 $cmp36 = ($23|0)>($22|0);
 $$ = $cmp36&1;
 $retval$0 = $$;
 return ($retval$0|0);
}
function _PTR_ShootTraverse($in) {
 $in = $in|0;
 var $$pre = 0, $$pre52 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add108 = 0, $add110 = 0, $add113 = 0, $add51 = 0, $add54 = 0, $add90 = 0, $and117 = 0, $and83 = 0;
 var $backsector = 0, $backsector66 = 0, $call = 0, $call105 = 0, $call107 = 0, $call109 = 0, $call111 = 0, $call112 = 0, $call15 = 0, $call26 = 0, $call39 = 0, $call47 = 0, $call49 = 0, $call50 = 0, $call52 = 0, $call53 = 0, $call88 = 0, $call9 = 0, $call92 = 0, $call99 = 0;
 var $ceilingheight = 0, $ceilingheight34 = 0, $ceilingheight61 = 0, $ceilingpic = 0, $ceilingpic69 = 0, $cmp = 0, $cmp10 = 0, $cmp100 = 0, $cmp16 = 0, $cmp22 = 0, $cmp27 = 0, $cmp35 = 0, $cmp40 = 0, $cmp57 = 0, $cmp62 = 0, $cmp71 = 0, $cmp78 = 0, $cmp93 = 0, $conv56 = 0, $d = 0;
 var $flags = 0, $flags116 = 0, $flags82 = 0, $frac46$pre$phiZ2D = 0, $frontsector = 0, $frontsector55 = 0, $height = 0, $isaline = 0, $retval$0 = 0, $special = 0, $sub = 0, $sub106 = 0, $sub14 = 0, $sub25 = 0, $sub38 = 0, $sub48 = 0, $sub91 = 0, $sub98 = 0, $tobool = 0, $tobool1 = 0;
 var $tobool118 = 0, $tobool122 = 0, $tobool3 = 0, $tobool67 = 0, $tobool84 = 0, $z89 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isaline = ((($in)) + 4|0);
 $0 = HEAP32[$isaline>>2]|0;
 $tobool = ($0|0)==(0);
 $d = ((($in)) + 8|0);
 if ($tobool) {
  $43 = HEAP32[$d>>2]|0;
  $44 = HEAP32[99432]|0;
  $cmp78 = ($43|0)==($44|0);
  if ($cmp78) {
   $retval$0 = 1;
   return ($retval$0|0);
  }
  $flags82 = ((($43)) + 104|0);
  $45 = HEAP32[$flags82>>2]|0;
  $and83 = $45 & 4;
  $tobool84 = ($and83|0)==(0);
  if ($tobool84) {
   $retval$0 = 1;
   return ($retval$0|0);
  }
  $46 = HEAP32[99430]|0;
  $47 = HEAP32[$in>>2]|0;
  $call88 = (_FixedMul($46,$47)|0);
  $z89 = ((($43)) + 20|0);
  $48 = HEAP32[$z89>>2]|0;
  $height = ((($43)) + 68|0);
  $49 = HEAP32[$height>>2]|0;
  $add90 = (($49) + ($48))|0;
  $50 = HEAP32[99431]|0;
  $sub91 = (($add90) - ($50))|0;
  $call92 = (_FixedDiv($sub91,$call88)|0);
  $51 = HEAP32[99433]|0;
  $cmp93 = ($call92|0)<($51|0);
  if ($cmp93) {
   $retval$0 = 1;
   return ($retval$0|0);
  }
  $52 = HEAP32[$z89>>2]|0;
  $53 = HEAP32[99431]|0;
  $sub98 = (($52) - ($53))|0;
  $call99 = (_FixedDiv($sub98,$call88)|0);
  $54 = HEAP32[99433]|0;
  $cmp100 = ($call99|0)>($54|0);
  if ($cmp100) {
   $retval$0 = 1;
   return ($retval$0|0);
  }
  $55 = HEAP32[$in>>2]|0;
  $56 = HEAP32[99430]|0;
  $call105 = (_FixedDiv(655360,$56)|0);
  $sub106 = (($55) - ($call105))|0;
  $57 = HEAP32[100017]|0;
  $58 = HEAP32[100019]|0;
  $call107 = (_FixedMul($58,$sub106)|0);
  $add108 = (($call107) + ($57))|0;
  $59 = HEAP32[100018]|0;
  $60 = HEAP32[100020]|0;
  $call109 = (_FixedMul($60,$sub106)|0);
  $add110 = (($call109) + ($59))|0;
  $61 = HEAP32[99431]|0;
  $62 = HEAP32[99433]|0;
  $63 = HEAP32[99430]|0;
  $call111 = (_FixedMul($sub106,$63)|0);
  $call112 = (_FixedMul($62,$call111)|0);
  $add113 = (($call112) + ($61))|0;
  $64 = HEAP32[$d>>2]|0;
  $flags116 = ((($64)) + 104|0);
  $65 = HEAP32[$flags116>>2]|0;
  $and117 = $65 & 524288;
  $tobool118 = ($and117|0)==(0);
  if ($tobool118) {
   $66 = HEAP32[99435]|0;
   _P_SpawnBlood($add108,$add110,$add113,$66);
  } else {
   _P_SpawnPuff($add108,$add110,$add113);
  }
  $67 = HEAP32[99435]|0;
  $tobool122 = ($67|0)==(0);
  if ($tobool122) {
   $retval$0 = 0;
   return ($retval$0|0);
  }
  $68 = HEAP32[99432]|0;
  _P_DamageMobj($43,$68,$68,$67);
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $1 = HEAP32[$d>>2]|0;
 $special = ((($1)) + 18|0);
 $2 = HEAP16[$special>>1]|0;
 $tobool1 = ($2<<16>>16)==(0);
 if (!($tobool1)) {
  $3 = HEAP32[99432]|0;
  _P_ShootSpecialLine($3,$1);
 }
 $flags = ((($1)) + 16|0);
 $4 = HEAP16[$flags>>1]|0;
 $5 = $4 & 4;
 $tobool3 = ($5<<16>>16)==(0);
 do {
  if ($tobool3) {
   $frac46$pre$phiZ2D = $in;
  } else {
   _P_LineOpening($1);
   $6 = HEAP32[99430]|0;
   $7 = HEAP32[$in>>2]|0;
   $call = (_FixedMul($6,$7)|0);
   $backsector = ((($1)) + 52|0);
   $8 = HEAP32[$backsector>>2]|0;
   $cmp = ($8|0)==(0|0);
   if ($cmp) {
    $9 = HEAP32[99445]|0;
    $10 = HEAP32[99431]|0;
    $sub = (($9) - ($10))|0;
    $call9 = (_FixedDiv($sub,$call)|0);
    $11 = HEAP32[99433]|0;
    $cmp10 = ($call9|0)>($11|0);
    if ($cmp10) {
     $frac46$pre$phiZ2D = $in;
     break;
    }
    $12 = HEAP32[99444]|0;
    $13 = HEAP32[99431]|0;
    $sub14 = (($12) - ($13))|0;
    $call15 = (_FixedDiv($sub14,$call)|0);
    $14 = HEAP32[99433]|0;
    $cmp16 = ($call15|0)<($14|0);
    if ($cmp16) {
     $frac46$pre$phiZ2D = $in;
     break;
    } else {
     $retval$0 = 1;
    }
    return ($retval$0|0);
   }
   $frontsector = ((($1)) + 48|0);
   $15 = HEAP32[$frontsector>>2]|0;
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$8>>2]|0;
   $cmp22 = ($16|0)==($17|0);
   if ($cmp22) {
    $21 = $15;$23 = $8;
   } else {
    $18 = HEAP32[99445]|0;
    $19 = HEAP32[99431]|0;
    $sub25 = (($18) - ($19))|0;
    $call26 = (_FixedDiv($sub25,$call)|0);
    $20 = HEAP32[99433]|0;
    $cmp27 = ($call26|0)>($20|0);
    if ($cmp27) {
     $frac46$pre$phiZ2D = $in;
     break;
    }
    $$pre = HEAP32[$frontsector>>2]|0;
    $$pre52 = HEAP32[$backsector>>2]|0;
    $21 = $$pre;$23 = $$pre52;
   }
   $ceilingheight = ((($21)) + 4|0);
   $22 = HEAP32[$ceilingheight>>2]|0;
   $ceilingheight34 = ((($23)) + 4|0);
   $24 = HEAP32[$ceilingheight34>>2]|0;
   $cmp35 = ($22|0)==($24|0);
   if ($cmp35) {
    $retval$0 = 1;
    return ($retval$0|0);
   }
   $25 = HEAP32[99444]|0;
   $26 = HEAP32[99431]|0;
   $sub38 = (($25) - ($26))|0;
   $call39 = (_FixedDiv($sub38,$call)|0);
   $27 = HEAP32[99433]|0;
   $cmp40 = ($call39|0)<($27|0);
   if ($cmp40) {
    $frac46$pre$phiZ2D = $in;
   } else {
    $retval$0 = 1;
    return ($retval$0|0);
   }
  }
 } while(0);
 $28 = HEAP32[$frac46$pre$phiZ2D>>2]|0;
 $29 = HEAP32[99430]|0;
 $call47 = (_FixedDiv(262144,$29)|0);
 $sub48 = (($28) - ($call47))|0;
 $30 = HEAP32[100017]|0;
 $31 = HEAP32[100019]|0;
 $call49 = (_FixedMul($31,$sub48)|0);
 $add = (($call49) + ($30))|0;
 $32 = HEAP32[100018]|0;
 $33 = HEAP32[100020]|0;
 $call50 = (_FixedMul($33,$sub48)|0);
 $add51 = (($call50) + ($32))|0;
 $34 = HEAP32[99431]|0;
 $35 = HEAP32[99433]|0;
 $36 = HEAP32[99430]|0;
 $call52 = (_FixedMul($sub48,$36)|0);
 $call53 = (_FixedMul($35,$call52)|0);
 $add54 = (($call53) + ($34))|0;
 $frontsector55 = ((($1)) + 48|0);
 $37 = HEAP32[$frontsector55>>2]|0;
 $ceilingpic = ((($37)) + 10|0);
 $38 = HEAP16[$ceilingpic>>1]|0;
 $conv56 = $38 << 16 >> 16;
 $39 = HEAP32[99682]|0;
 $cmp57 = ($39|0)==($conv56|0);
 if ($cmp57) {
  $ceilingheight61 = ((($37)) + 4|0);
  $40 = HEAP32[$ceilingheight61>>2]|0;
  $cmp62 = ($add54|0)>($40|0);
  if ($cmp62) {
   $retval$0 = 0;
   return ($retval$0|0);
  }
  $backsector66 = ((($1)) + 52|0);
  $41 = HEAP32[$backsector66>>2]|0;
  $tobool67 = ($41|0)==(0|0);
  if (!($tobool67)) {
   $ceilingpic69 = ((($41)) + 10|0);
   $42 = HEAP16[$ceilingpic69>>1]|0;
   $cmp71 = ($38<<16>>16)==($42<<16>>16);
   if ($cmp71) {
    $retval$0 = 0;
    return ($retval$0|0);
   }
  }
 }
 _P_SpawnPuff($add,$add51,$add54);
 $retval$0 = 0;
 return ($retval$0|0);
}
function _P_AimLineAttack($t1,$angle,$distance) {
 $t1 = $t1|0;
 $angle = $angle|0;
 $distance = $distance|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add = 0, $add5 = 0, $add7 = 0, $add8 = 0, $arrayidx = 0, $arrayidx3 = 0, $call = 0, $height = 0, $mul = 0, $mul4 = 0, $retval$0 = 0, $shr = 0;
 var $shr1 = 0, $shr6 = 0, $tobool = 0, $x = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_P_SubstNullMobj($t1)|0);
 $shr = $angle >>> 19;
 HEAP32[99432] = $call;
 $x = ((($call)) + 12|0);
 $0 = HEAP32[$x>>2]|0;
 $shr1 = $distance >> 16;
 $arrayidx = ((82912) + ($shr<<2)|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $mul = Math_imul($1, $shr1)|0;
 $add = (($mul) + ($0))|0;
 $y = ((($call)) + 16|0);
 $2 = HEAP32[$y>>2]|0;
 $arrayidx3 = (74720 + ($shr<<2)|0);
 $3 = HEAP32[$arrayidx3>>2]|0;
 $mul4 = Math_imul($3, $shr1)|0;
 $add5 = (($mul4) + ($2))|0;
 $z = ((($call)) + 20|0);
 $4 = HEAP32[$z>>2]|0;
 $height = ((($call)) + 68|0);
 $5 = HEAP32[$height>>2]|0;
 $shr6 = $5 >> 1;
 $add7 = (($4) + 524288)|0;
 $add8 = (($add7) + ($shr6))|0;
 HEAP32[99431] = $add8;
 HEAP32[99547] = 40960;
 HEAP32[99546] = -40960;
 HEAP32[99430] = $distance;
 HEAP32[99434] = 0;
 (_P_PathTraverse($0,$2,$add,$add5,3,147)|0);
 $6 = HEAP32[99434]|0;
 $tobool = ($6|0)==(0|0);
 $7 = HEAP32[99433]|0;
 $retval$0 = $tobool ? 0 : $7;
 return ($retval$0|0);
}
function _P_LineAttack($t1,$angle,$distance,$slope,$damage) {
 $t1 = $t1|0;
 $angle = $angle|0;
 $distance = $distance|0;
 $slope = $slope|0;
 $damage = $damage|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add = 0, $add5 = 0, $add7 = 0, $add8 = 0, $arrayidx = 0, $arrayidx3 = 0, $height = 0, $mul = 0, $mul4 = 0, $shr = 0, $shr1 = 0, $shr6 = 0, $x = 0, $y = 0;
 var $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $shr = $angle >>> 19;
 HEAP32[99432] = $t1;
 HEAP32[99435] = $damage;
 $x = ((($t1)) + 12|0);
 $0 = HEAP32[$x>>2]|0;
 $shr1 = $distance >> 16;
 $arrayidx = ((82912) + ($shr<<2)|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $mul = Math_imul($1, $shr1)|0;
 $add = (($mul) + ($0))|0;
 $y = ((($t1)) + 16|0);
 $2 = HEAP32[$y>>2]|0;
 $arrayidx3 = (74720 + ($shr<<2)|0);
 $3 = HEAP32[$arrayidx3>>2]|0;
 $mul4 = Math_imul($3, $shr1)|0;
 $add5 = (($mul4) + ($2))|0;
 $z = ((($t1)) + 20|0);
 $4 = HEAP32[$z>>2]|0;
 $height = ((($t1)) + 68|0);
 $5 = HEAP32[$height>>2]|0;
 $shr6 = $5 >> 1;
 $add7 = (($4) + 524288)|0;
 $add8 = (($add7) + ($shr6))|0;
 HEAP32[99431] = $add8;
 HEAP32[99430] = $distance;
 HEAP32[99433] = $slope;
 (_P_PathTraverse($0,$2,$add,$add5,3,148)|0);
 return;
}
function _PTR_UseTraverse($in) {
 $in = $in|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $cmp = 0, $cmp7 = 0, $d = 0, $retval$0 = 0, $spec$select = 0, $special = 0, $tobool = 0, $x = 0, $y = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $d = ((($in)) + 8|0);
 $0 = HEAP32[$d>>2]|0;
 $special = ((($0)) + 18|0);
 $1 = HEAP16[$special>>1]|0;
 $tobool = ($1<<16>>16)==(0);
 if (!($tobool)) {
  $4 = HEAP32[99436]|0;
  $x = ((($4)) + 12|0);
  $5 = HEAP32[$x>>2]|0;
  $y = ((($4)) + 16|0);
  $6 = HEAP32[$y>>2]|0;
  $call = (_P_PointOnLineSide($5,$6,$0)|0);
  $cmp7 = ($call|0)==(1);
  $spec$select = $cmp7&1;
  $7 = HEAP32[99436]|0;
  $8 = HEAP32[$d>>2]|0;
  (_P_UseSpecialLine($7,$8,$spec$select)|0);
  $retval$0 = 0;
  return ($retval$0|0);
 }
 _P_LineOpening($0);
 $2 = HEAP32[99443]|0;
 $cmp = ($2|0)<(1);
 if (!($cmp)) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $3 = HEAP32[99436]|0;
 _S_StartSound($3,81);
 $retval$0 = 0;
 return ($retval$0|0);
}
function _P_UseLines($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $add7 = 0, $angle2 = 0, $arrayidx = 0, $arrayidx5 = 0, $mul = 0, $mul6 = 0, $shr = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$player>>2]|0;
 HEAP32[99436] = $0;
 $1 = HEAP32[$player>>2]|0;
 $angle2 = ((($1)) + 32|0);
 $2 = HEAP32[$angle2>>2]|0;
 $shr = $2 >>> 19;
 $x = ((($1)) + 12|0);
 $3 = HEAP32[$x>>2]|0;
 $y = ((($1)) + 16|0);
 $4 = HEAP32[$y>>2]|0;
 $arrayidx = ((82912) + ($shr<<2)|0);
 $5 = HEAP32[$arrayidx>>2]|0;
 $mul = $5 << 6;
 $add = (($mul) + ($3))|0;
 $arrayidx5 = (74720 + ($shr<<2)|0);
 $6 = HEAP32[$arrayidx5>>2]|0;
 $mul6 = $6 << 6;
 $add7 = (($mul6) + ($4))|0;
 (_P_PathTraverse($3,$4,$add,$add7,1,149)|0);
 return;
}
function _PIT_RadiusAttack($thing) {
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $call17 = 0, $cmp14 = 0, $cmp9 = 0, $cond = 0;
 var $flags = 0, $ispos = 0, $ispos16 = 0, $neg = 0, $neg17 = 0, $radius = 0, $shr = 0, $spec$store$select = 0, $sub = 0, $sub10 = 0, $sub20 = 0, $sub7 = 0, $tobool = 0, $tobool18 = 0, $type = 0, $x = 0, $x5 = 0, $y = 0, $y6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $flags = ((($thing)) + 104|0);
 $0 = HEAP32[$flags>>2]|0;
 $and = $0 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  return 1;
 }
 $type = ((($thing)) + 88|0);
 $1 = HEAP32[$type>>2]|0;
 switch ($1|0) {
 case 19: case 21:  {
  return 1;
  break;
 }
 default: {
 }
 }
 $x = ((($thing)) + 12|0);
 $2 = HEAP32[$x>>2]|0;
 $3 = HEAP32[99437]|0;
 $x5 = ((($3)) + 12|0);
 $4 = HEAP32[$x5>>2]|0;
 $sub = (($2) - ($4))|0;
 $ispos = ($sub|0)>(-1);
 $neg = (0 - ($sub))|0;
 $5 = $ispos ? $sub : $neg;
 $y = ((($thing)) + 16|0);
 $6 = HEAP32[$y>>2]|0;
 $y6 = ((($3)) + 16|0);
 $7 = HEAP32[$y6>>2]|0;
 $sub7 = (($6) - ($7))|0;
 $ispos16 = ($sub7|0)>(-1);
 $neg17 = (0 - ($sub7))|0;
 $8 = $ispos16 ? $sub7 : $neg17;
 $cmp9 = ($5|0)>($8|0);
 $cond = $cmp9 ? $5 : $8;
 $radius = ((($thing)) + 64|0);
 $9 = HEAP32[$radius>>2]|0;
 $sub10 = (($cond) - ($9))|0;
 $shr = $sub10 >> 16;
 $10 = ($shr|0)>(0);
 $spec$store$select = $10 ? $shr : 0;
 $11 = HEAP32[99438]|0;
 $cmp14 = ($spec$store$select|0)<($11|0);
 if (!($cmp14)) {
  return 1;
 }
 $call17 = (_P_CheckSight($thing,$3)|0);
 $tobool18 = ($call17|0)==(0);
 if ($tobool18) {
  return 1;
 }
 $12 = HEAP32[99437]|0;
 $13 = HEAP32[99439]|0;
 $14 = HEAP32[99438]|0;
 $sub20 = (($14) - ($spec$store$select))|0;
 _P_DamageMobj($thing,$12,$13,$sub20);
 return 1;
}
function _P_RadiusAttack($spot,$source,$damage) {
 $spot = $spot|0;
 $source = $source|0;
 $damage = $damage|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add2 = 0, $add8 = 0, $cmp = 0, $cmp16 = 0, $cmp1621 = 0, $cmp23 = 0, $inc = 0, $inc19 = 0, $or$cond = 0, $shl = 0, $shr = 0, $shr10 = 0, $shr14 = 0, $shr6 = 0, $sub = 0, $sub12 = 0;
 var $sub13 = 0, $sub4 = 0, $sub5 = 0, $sub9 = 0, $x$022 = 0, $x7 = 0, $y$024 = 0, $y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $shl = $damage << 16;
 $y1 = ((($spot)) + 16|0);
 $0 = HEAP32[$y1>>2]|0;
 $add2 = (($0) + ($shl))|0;
 $1 = HEAP32[99513]|0;
 $sub = (($add2) - ($1))|0;
 $shr = $sub >> 23;
 $sub4 = (($0) - ($shl))|0;
 $sub5 = (($sub4) - ($1))|0;
 $shr6 = $sub5 >> 23;
 $x7 = ((($spot)) + 12|0);
 $2 = HEAP32[$x7>>2]|0;
 $add8 = (($2) + ($shl))|0;
 $3 = HEAP32[99512]|0;
 $sub9 = (($add8) - ($3))|0;
 $shr10 = $sub9 >> 23;
 $sub12 = (($2) - ($shl))|0;
 $sub13 = (($sub12) - ($3))|0;
 $shr14 = $sub13 >> 23;
 HEAP32[99437] = $spot;
 HEAP32[99439] = $source;
 HEAP32[99438] = $damage;
 $cmp23 = ($shr6|0)>($shr|0);
 $cmp1621 = ($shr14|0)>($shr10|0);
 $or$cond = $cmp23 | $cmp1621;
 if ($or$cond) {
  return;
 }
 $y$024 = $shr6;
 while(1) {
  $x$022 = $shr14;
  while(1) {
   (_P_BlockThingsIterator($x$022,$y$024,150)|0);
   $inc = (($x$022) + 1)|0;
   $cmp16 = ($x$022|0)<($shr10|0);
   if ($cmp16) {
    $x$022 = $inc;
   } else {
    break;
   }
  }
  $inc19 = (($y$024) + 1)|0;
  $cmp = ($y$024|0)<($shr|0);
  if ($cmp) {
   $y$024 = $inc19;
  } else {
   break;
  }
 }
 return;
}
function _PIT_ChangeSector($thing) {
 $thing = $thing|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add$i = 0, $and = 0, $and10 = 0, $and15 = 0, $and5 = 0, $call19 = 0, $call20 = 0, $call21 = 0, $call22 = 0, $call23 = 0, $ceilingz$i = 0, $cmp = 0, $cmp$i = 0, $cmp17$i = 0, $cmp6$i = 0, $div = 0, $flags = 0, $flags4 = 0, $floorz$i = 0, $health = 0;
 var $height = 0, $height$i = 0, $height16$phi$trans$insert$i = 0, $height18 = 0, $momx = 0, $momy = 0, $radius = 0, $shl = 0, $shl25 = 0, $sub = 0, $sub$i = 0, $sub15$i = 0, $sub24 = 0, $tobool11 = 0, $tobool14 = 0, $tobool16 = 0, $tobool6 = 0, $x$i = 0, $y$i = 0, $z$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $z$i = ((($thing)) + 20|0);
 $0 = HEAP32[$z$i>>2]|0;
 $floorz$i = ((($thing)) + 56|0);
 $1 = HEAP32[$floorz$i>>2]|0;
 $cmp$i = ($0|0)==($1|0);
 $x$i = ((($thing)) + 12|0);
 $2 = HEAP32[$x$i>>2]|0;
 $y$i = ((($thing)) + 16|0);
 $3 = HEAP32[$y$i>>2]|0;
 (_P_CheckPosition($thing,$2,$3)|0);
 $4 = HEAP32[99420]|0;
 HEAP32[$floorz$i>>2] = $4;
 $5 = HEAP32[99421]|0;
 $ceilingz$i = ((($thing)) + 60|0);
 HEAP32[$ceilingz$i>>2] = $5;
 if ($cmp$i) {
  HEAP32[$z$i>>2] = $4;
  $height16$phi$trans$insert$i = ((($thing)) + 68|0);
  $$pre$i = HEAP32[$height16$phi$trans$insert$i>>2]|0;
  $8 = $$pre$i;
 } else {
  $6 = HEAP32[$z$i>>2]|0;
  $height$i = ((($thing)) + 68|0);
  $7 = HEAP32[$height$i>>2]|0;
  $add$i = (($7) + ($6))|0;
  $cmp6$i = ($add$i|0)>($5|0);
  if ($cmp6$i) {
   $sub$i = (($5) - ($7))|0;
   HEAP32[$z$i>>2] = $sub$i;
   $8 = $7;
  } else {
   $8 = $7;
  }
 }
 $sub15$i = (($5) - ($4))|0;
 $cmp17$i = ($sub15$i|0)<($8|0);
 if (!($cmp17$i)) {
  return 1;
 }
 $health = ((($thing)) + 108|0);
 $9 = HEAP32[$health>>2]|0;
 $cmp = ($9|0)<(1);
 if ($cmp) {
  (_P_SetMobjState($thing,895)|0);
  $flags = ((($thing)) + 104|0);
  $10 = HEAP32[$flags>>2]|0;
  $and = $10 & -3;
  HEAP32[$flags>>2] = $and;
  $height = ((($thing)) + 68|0);
  HEAP32[$height>>2] = 0;
  $radius = ((($thing)) + 64|0);
  HEAP32[$radius>>2] = 0;
  return 1;
 }
 $flags4 = ((($thing)) + 104|0);
 $11 = HEAP32[$flags4>>2]|0;
 $and5 = $11 & 131072;
 $tobool6 = ($and5|0)==(0);
 if (!($tobool6)) {
  _P_RemoveMobj($thing);
  return 1;
 }
 $and10 = $11 & 4;
 $tobool11 = ($and10|0)==(0);
 if ($tobool11) {
  return 1;
 }
 HEAP32[99440] = 1;
 $12 = HEAP32[99441]|0;
 $tobool14 = ($12|0)==(0);
 if ($tobool14) {
  return 1;
 }
 $13 = HEAP32[99557]|0;
 $and15 = $13 & 3;
 $tobool16 = ($and15|0)==(0);
 if (!($tobool16)) {
  return 1;
 }
 _P_DamageMobj($thing,0,0,10);
 $14 = HEAP32[$x$i>>2]|0;
 $15 = HEAP32[$y$i>>2]|0;
 $16 = HEAP32[$z$i>>2]|0;
 $height18 = ((($thing)) + 68|0);
 $17 = HEAP32[$height18>>2]|0;
 $div = (($17|0) / 2)&-1;
 $add = (($div) + ($16))|0;
 $call19 = (_P_SpawnMobj($14,$15,$add,38)|0);
 $call20 = (_P_Random()|0);
 $call21 = (_P_Random()|0);
 $sub = (($call20) - ($call21))|0;
 $shl = $sub << 12;
 $momx = ((($call19)) + 72|0);
 HEAP32[$momx>>2] = $shl;
 $call22 = (_P_Random()|0);
 $call23 = (_P_Random()|0);
 $sub24 = (($call22) - ($call23))|0;
 $shl25 = $sub24 << 12;
 $momy = ((($call19)) + 76|0);
 HEAP32[$momy>>2] = $shl25;
 return 1;
}
function _P_ChangeSector($sector,$crunch) {
 $sector = $sector|0;
 $crunch = $crunch|0;
 var $$pre = 0, $$pre13 = 0, $$pre14 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx4 = 0, $arrayidx7 = 0, $cmp = 0, $cmp11 = 0, $cmp8 = 0, $cmp89 = 0;
 var $inc = 0, $inc11 = 0, $x$012 = 0, $y$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99440] = 0;
 HEAP32[99441] = $crunch;
 $arrayidx = ((($sector)) + 36|0);
 $0 = HEAP32[$arrayidx>>2]|0;
 $arrayidx2 = ((($sector)) + 40|0);
 $1 = HEAP32[$arrayidx2>>2]|0;
 $cmp11 = ($0|0)>($1|0);
 if ($cmp11) {
  $6 = 0;
  return ($6|0);
 }
 $arrayidx4 = ((($sector)) + 32|0);
 $arrayidx7 = ((($sector)) + 28|0);
 $$pre = HEAP32[$arrayidx7>>2]|0;
 $3 = $$pre;$7 = $1;$x$012 = $0;
 while(1) {
  $2 = HEAP32[$arrayidx4>>2]|0;
  $cmp89 = ($2|0)>($3|0);
  if ($cmp89) {
   $5 = $7;$8 = $3;
  } else {
   $y$010 = $2;
   while(1) {
    (_P_BlockThingsIterator($x$012,$y$010,151)|0);
    $inc = (($y$010) + 1)|0;
    $4 = HEAP32[$arrayidx7>>2]|0;
    $cmp8 = ($y$010|0)<($4|0);
    if ($cmp8) {
     $y$010 = $inc;
    } else {
     break;
    }
   }
   $$pre13 = HEAP32[$arrayidx2>>2]|0;
   $5 = $$pre13;$8 = $4;
  }
  $inc11 = (($x$012) + 1)|0;
  $cmp = ($x$012|0)<($5|0);
  if ($cmp) {
   $3 = $8;$7 = $5;$x$012 = $inc11;
  } else {
   break;
  }
 }
 $$pre14 = HEAP32[99440]|0;
 $6 = $$pre14;
 return ($6|0);
}
function _P_AproxDistance($dx,$dy) {
 $dx = $dx|0;
 $dy = $dy|0;
 var $$ = 0, $0 = 0, $1 = 0, $add = 0, $cmp = 0, $ispos = 0, $ispos7 = 0, $neg = 0, $neg8 = 0, $retval$0 = 0, $shr$pn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ispos = ($dx|0)>(-1);
 $neg = (0 - ($dx))|0;
 $0 = $ispos ? $dx : $neg;
 $ispos7 = ($dy|0)>(-1);
 $neg8 = (0 - ($dy))|0;
 $1 = $ispos7 ? $dy : $neg8;
 $cmp = ($0|0)<($1|0);
 $add = (($1) + ($0))|0;
 $$ = $cmp ? $0 : $1;
 $shr$pn = $$ >> 1;
 $retval$0 = (($add) - ($shr$pn))|0;
 return ($retval$0|0);
}
function _P_PointOnLineSide($x,$y,$line) {
 $x = $x|0;
 $y = $y|0;
 $line = $line|0;
 var $$ = 0, $$lobit = 0, $$lobit16 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call34 = 0, $cmp = 0, $cmp15 = 0, $cmp23 = 0, $cmp35 = 0, $cmp5 = 0;
 var $conv = 0, $conv24 = 0, $dx1 = 0, $dy10 = 0, $dy4 = 0, $retval$0 = 0, $shr = 0, $shr33 = 0, $sub = 0, $sub30 = 0, $tobool = 0, $tobool11 = 0, $y14 = 0, $y29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $dx1 = ((($line)) + 8|0);
 $0 = HEAP32[$dx1>>2]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  $1 = HEAP32[$line>>2]|0;
  $2 = HEAP32[$1>>2]|0;
  $cmp = ($2|0)<($x|0);
  $dy4 = ((($line)) + 12|0);
  $3 = HEAP32[$dy4>>2]|0;
  if ($cmp) {
   $$lobit = $3 >>> 31;
   $retval$0 = $$lobit;
   return ($retval$0|0);
  } else {
   $cmp5 = ($3|0)>(0);
   $conv = $cmp5&1;
   $retval$0 = $conv;
   return ($retval$0|0);
  }
 }
 $dy10 = ((($line)) + 12|0);
 $4 = HEAP32[$dy10>>2]|0;
 $tobool11 = ($4|0)==(0);
 $5 = HEAP32[$line>>2]|0;
 if (!($tobool11)) {
  $7 = HEAP32[$5>>2]|0;
  $sub = (($x) - ($7))|0;
  $y29 = ((($5)) + 4|0);
  $8 = HEAP32[$y29>>2]|0;
  $sub30 = (($y) - ($8))|0;
  $shr = $4 >> 16;
  $call = (_FixedMul($shr,$sub)|0);
  $9 = HEAP32[$dx1>>2]|0;
  $shr33 = $9 >> 16;
  $call34 = (_FixedMul($sub30,$shr33)|0);
  $cmp35 = ($call34|0)>=($call|0);
  $$ = $cmp35&1;
  $retval$0 = $$;
  return ($retval$0|0);
 }
 $y14 = ((($5)) + 4|0);
 $6 = HEAP32[$y14>>2]|0;
 $cmp15 = ($6|0)<($y|0);
 if ($cmp15) {
  $cmp23 = ($0|0)>(0);
  $conv24 = $cmp23&1;
  $retval$0 = $conv24;
  return ($retval$0|0);
 } else {
  $$lobit16 = $0 >>> 31;
  $retval$0 = $$lobit16;
  return ($retval$0|0);
 }
 return (0)|0;
}
function _P_BoxOnLineSide($tmbox,$ld) {
 $tmbox = $tmbox|0;
 $ld = $ld|0;
 var $$$i = 0, $$$i136 = 0, $$$i62 = 0, $$$i99 = 0, $$in = 0, $$in169 = 0, $$lobit = 0, $$lobit$i = 0, $$lobit$i113 = 0, $$lobit$i39 = 0, $$lobit$i76 = 0, $$lobit144 = 0, $$lobit16$i = 0, $$lobit16$i122 = 0, $$lobit16$i48 = 0, $$lobit16$i85 = 0, $$pre = 0, $$pre146 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0, $arrayidx10 = 0, $arrayidx14 = 0, $arrayidx26 = 0, $arrayidx28 = 0, $arrayidx28147 = 0, $arrayidx28154 = 0, $arrayidx32 = 0, $arrayidx35 = 0, $arrayidx35158 = 0, $arrayidx35165 = 0, $call$i = 0, $call$i132 = 0, $call$i58 = 0, $call$i95 = 0;
 var $call34$i = 0, $call34$i134 = 0, $call34$i60 = 0, $call34$i97 = 0, $cmp = 0, $cmp$i = 0, $cmp$i107 = 0, $cmp$i33 = 0, $cmp$i70 = 0, $cmp12 = 0, $cmp15$i = 0, $cmp15$i120 = 0, $cmp15$i46 = 0, $cmp15$i83 = 0, $cmp17 = 0, $cmp23$i = 0, $cmp23$i124 = 0, $cmp23$i50 = 0, $cmp23$i87 = 0, $cmp35$i = 0;
 var $cmp35$i135 = 0, $cmp35$i61 = 0, $cmp35$i98 = 0, $cmp38 = 0, $cmp4 = 0, $cmp5$i = 0, $cmp5$i110 = 0, $cmp5$i36 = 0, $cmp5$i73 = 0, $conv = 0, $conv$i = 0, $conv$i111 = 0, $conv$i37 = 0, $conv$i74 = 0, $conv13 = 0, $conv18 = 0, $conv24$i = 0, $conv24$i125 = 0, $conv24$i51 = 0, $conv24$i88 = 0;
 var $conv5 = 0, $dx = 0, $dx1$i = 0, $dx1$i66 = 0, $dy = 0, $dy10$i = 0, $dy10$i115 = 0, $dy10$i41 = 0, $dy10$i78 = 0, $dy4$i = 0, $dy4$i108 = 0, $dy4$i34 = 0, $dy4$i71 = 0, $p1$0 = 0, $p1$0$ = 0, $p2$0 = 0, $retval$0$i$ph = 0, $retval$0$i$ph152 = 0, $retval$0$i101$ph = 0, $retval$0$i101$ph163 = 0;
 var $retval$0$i101161 = 0, $retval$0$i101168 = 0, $retval$0$i150 = 0, $retval$0$i157 = 0, $shr$i = 0, $shr$i131 = 0, $shr$i57 = 0, $shr$i94 = 0, $shr33$i = 0, $shr33$i133 = 0, $shr33$i59 = 0, $shr33$i96 = 0, $slopetype = 0, $spec$select = 0, $spec$select140 = 0, $spec$select141 = 0, $spec$select142 = 0, $sub$i = 0, $sub$i128 = 0, $sub$i54 = 0;
 var $sub$i91 = 0, $sub30$i = 0, $sub30$i130 = 0, $sub30$i56 = 0, $sub30$i93 = 0, $tobool$i = 0, $tobool$i104 = 0, $tobool$i30 = 0, $tobool$i67 = 0, $tobool11$i = 0, $tobool11$i116 = 0, $tobool11$i42 = 0, $tobool11$i79 = 0, $y = 0, $y14$i = 0, $y14$i119 = 0, $y14$i45 = 0, $y14$i82 = 0, $y29$i = 0, $y29$i129 = 0;
 var $y29$i55 = 0, $y29$i92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $slopetype = ((($ld)) + 44|0);
 $0 = HEAP32[$slopetype>>2]|0;
 switch ($0|0) {
 case 0:  {
  $1 = HEAP32[$tmbox>>2]|0;
  $2 = HEAP32[$ld>>2]|0;
  $y = ((($2)) + 4|0);
  $3 = HEAP32[$y>>2]|0;
  $cmp = ($1|0)>($3|0);
  $conv = $cmp&1;
  $arrayidx1 = ((($tmbox)) + 4|0);
  $4 = HEAP32[$arrayidx1>>2]|0;
  $cmp4 = ($4|0)>($3|0);
  $conv5 = $cmp4&1;
  $dx = ((($ld)) + 8|0);
  $5 = HEAP32[$dx>>2]|0;
  $$lobit144 = $5 >>> 31;
  $spec$select = $$lobit144 ^ $conv;
  $spec$select140 = $$lobit144 ^ $conv5;
  $p1$0 = $spec$select;$p2$0 = $spec$select140;
  $cmp38 = ($p1$0|0)==($p2$0|0);
  $p1$0$ = $cmp38 ? $p1$0 : -1;
  return ($p1$0$|0);
  break;
 }
 case 1:  {
  $arrayidx10 = ((($tmbox)) + 12|0);
  $6 = HEAP32[$arrayidx10>>2]|0;
  $7 = HEAP32[$ld>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $cmp12 = ($6|0)<($8|0);
  $conv13 = $cmp12&1;
  $arrayidx14 = ((($tmbox)) + 8|0);
  $9 = HEAP32[$arrayidx14>>2]|0;
  $cmp17 = ($9|0)<($8|0);
  $conv18 = $cmp17&1;
  $dy = ((($ld)) + 12|0);
  $10 = HEAP32[$dy>>2]|0;
  $$lobit = $10 >>> 31;
  $spec$select141 = $$lobit ^ $conv13;
  $spec$select142 = $$lobit ^ $conv18;
  $p1$0 = $spec$select141;$p2$0 = $spec$select142;
  $cmp38 = ($p1$0|0)==($p2$0|0);
  $p1$0$ = $cmp38 ? $p1$0 : -1;
  return ($p1$0$|0);
  break;
 }
 case 2:  {
  $arrayidx26 = ((($tmbox)) + 8|0);
  $11 = HEAP32[$arrayidx26>>2]|0;
  $12 = HEAP32[$tmbox>>2]|0;
  $dx1$i = ((($ld)) + 8|0);
  $13 = HEAP32[$dx1$i>>2]|0;
  $tobool$i = ($13|0)==(0);
  do {
   if ($tobool$i) {
    $14 = HEAP32[$ld>>2]|0;
    $15 = HEAP32[$14>>2]|0;
    $cmp$i = ($15|0)<($11|0);
    $dy4$i = ((($ld)) + 12|0);
    $16 = HEAP32[$dy4$i>>2]|0;
    $$lobit$i = $16 >>> 31;
    $cmp5$i = ($16|0)>(0);
    $conv$i = $cmp5$i&1;
    $retval$0$i$ph = $cmp$i ? $$lobit$i : $conv$i;
    $arrayidx28147 = ((($tmbox)) + 12|0);
    $17 = HEAP32[$arrayidx28147>>2]|0;
    $28 = $17;$retval$0$i150 = $retval$0$i$ph;
   } else {
    $dy10$i = ((($ld)) + 12|0);
    $18 = HEAP32[$dy10$i>>2]|0;
    $tobool11$i = ($18|0)==(0);
    $19 = HEAP32[$ld>>2]|0;
    if ($tobool11$i) {
     $y14$i = ((($19)) + 4|0);
     $20 = HEAP32[$y14$i>>2]|0;
     $cmp15$i = ($20|0)<($12|0);
     $cmp23$i = ($13|0)>(0);
     $conv24$i = $cmp23$i&1;
     $$lobit16$i = $13 >>> 31;
     $retval$0$i$ph152 = $cmp15$i ? $conv24$i : $$lobit16$i;
     $arrayidx28154 = ((($tmbox)) + 12|0);
     $21 = HEAP32[$arrayidx28154>>2]|0;
     $34 = $13;$36 = $21;$retval$0$i157 = $retval$0$i$ph152;
    } else {
     $22 = HEAP32[$19>>2]|0;
     $sub$i = (($11) - ($22))|0;
     $y29$i = ((($19)) + 4|0);
     $23 = HEAP32[$y29$i>>2]|0;
     $sub30$i = (($12) - ($23))|0;
     $shr$i = $18 >> 16;
     $call$i = (_FixedMul($shr$i,$sub$i)|0);
     $24 = HEAP32[$dx1$i>>2]|0;
     $shr33$i = $24 >> 16;
     $call34$i = (_FixedMul($sub30$i,$shr33$i)|0);
     $cmp35$i = ($call34$i|0)>=($call$i|0);
     $$$i = $cmp35$i&1;
     $$pre146 = HEAP32[$dx1$i>>2]|0;
     $arrayidx28 = ((($tmbox)) + 12|0);
     $25 = HEAP32[$arrayidx28>>2]|0;
     $tobool$i30 = ($$pre146|0)==(0);
     if ($tobool$i30) {
      $28 = $25;$retval$0$i150 = $$$i;
      break;
     } else {
      $34 = $$pre146;$36 = $25;$retval$0$i157 = $$$i;
     }
    }
    $$in169 = ((($tmbox)) + 4|0);
    $30 = HEAP32[$$in169>>2]|0;
    $dy10$i41 = ((($ld)) + 12|0);
    $31 = HEAP32[$dy10$i41>>2]|0;
    $tobool11$i42 = ($31|0)==(0);
    $32 = HEAP32[$ld>>2]|0;
    if (!($tobool11$i42)) {
     $35 = HEAP32[$32>>2]|0;
     $sub$i54 = (($36) - ($35))|0;
     $y29$i55 = ((($32)) + 4|0);
     $37 = HEAP32[$y29$i55>>2]|0;
     $sub30$i56 = (($30) - ($37))|0;
     $shr$i57 = $31 >> 16;
     $call$i58 = (_FixedMul($shr$i57,$sub$i54)|0);
     $38 = HEAP32[$dx1$i>>2]|0;
     $shr33$i59 = $38 >> 16;
     $call34$i60 = (_FixedMul($sub30$i56,$shr33$i59)|0);
     $cmp35$i61 = ($call34$i60|0)>=($call$i58|0);
     $$$i62 = $cmp35$i61&1;
     $p1$0 = $retval$0$i157;$p2$0 = $$$i62;
     $cmp38 = ($p1$0|0)==($p2$0|0);
     $p1$0$ = $cmp38 ? $p1$0 : -1;
     return ($p1$0$|0);
    }
    $y14$i45 = ((($32)) + 4|0);
    $33 = HEAP32[$y14$i45>>2]|0;
    $cmp15$i46 = ($33|0)<($30|0);
    if ($cmp15$i46) {
     $cmp23$i50 = ($34|0)>(0);
     $conv24$i51 = $cmp23$i50&1;
     $p1$0 = $retval$0$i157;$p2$0 = $conv24$i51;
     $cmp38 = ($p1$0|0)==($p2$0|0);
     $p1$0$ = $cmp38 ? $p1$0 : -1;
     return ($p1$0$|0);
    } else {
     $$lobit16$i48 = $34 >>> 31;
     $p1$0 = $retval$0$i157;$p2$0 = $$lobit16$i48;
     $cmp38 = ($p1$0|0)==($p2$0|0);
     $p1$0$ = $cmp38 ? $p1$0 : -1;
     return ($p1$0$|0);
    }
   }
  } while(0);
  $26 = HEAP32[$ld>>2]|0;
  $27 = HEAP32[$26>>2]|0;
  $cmp$i33 = ($27|0)<($28|0);
  $dy4$i34 = ((($ld)) + 12|0);
  $29 = HEAP32[$dy4$i34>>2]|0;
  if ($cmp$i33) {
   $$lobit$i39 = $29 >>> 31;
   $p1$0 = $retval$0$i150;$p2$0 = $$lobit$i39;
   $cmp38 = ($p1$0|0)==($p2$0|0);
   $p1$0$ = $cmp38 ? $p1$0 : -1;
   return ($p1$0$|0);
  } else {
   $cmp5$i36 = ($29|0)>(0);
   $conv$i37 = $cmp5$i36&1;
   $p1$0 = $retval$0$i150;$p2$0 = $conv$i37;
   $cmp38 = ($p1$0|0)==($p2$0|0);
   $p1$0$ = $cmp38 ? $p1$0 : -1;
   return ($p1$0$|0);
  }
  break;
 }
 case 3:  {
  $arrayidx32 = ((($tmbox)) + 12|0);
  $39 = HEAP32[$arrayidx32>>2]|0;
  $40 = HEAP32[$tmbox>>2]|0;
  $dx1$i66 = ((($ld)) + 8|0);
  $41 = HEAP32[$dx1$i66>>2]|0;
  $tobool$i67 = ($41|0)==(0);
  do {
   if ($tobool$i67) {
    $42 = HEAP32[$ld>>2]|0;
    $43 = HEAP32[$42>>2]|0;
    $cmp$i70 = ($43|0)<($39|0);
    $dy4$i71 = ((($ld)) + 12|0);
    $44 = HEAP32[$dy4$i71>>2]|0;
    $$lobit$i76 = $44 >>> 31;
    $cmp5$i73 = ($44|0)>(0);
    $conv$i74 = $cmp5$i73&1;
    $retval$0$i101$ph = $cmp$i70 ? $$lobit$i76 : $conv$i74;
    $arrayidx35158 = ((($tmbox)) + 8|0);
    $45 = HEAP32[$arrayidx35158>>2]|0;
    $56 = $45;$retval$0$i101161 = $retval$0$i101$ph;
   } else {
    $dy10$i78 = ((($ld)) + 12|0);
    $46 = HEAP32[$dy10$i78>>2]|0;
    $tobool11$i79 = ($46|0)==(0);
    $47 = HEAP32[$ld>>2]|0;
    if ($tobool11$i79) {
     $y14$i82 = ((($47)) + 4|0);
     $48 = HEAP32[$y14$i82>>2]|0;
     $cmp15$i83 = ($48|0)<($40|0);
     $cmp23$i87 = ($41|0)>(0);
     $conv24$i88 = $cmp23$i87&1;
     $$lobit16$i85 = $41 >>> 31;
     $retval$0$i101$ph163 = $cmp15$i83 ? $conv24$i88 : $$lobit16$i85;
     $arrayidx35165 = ((($tmbox)) + 8|0);
     $49 = HEAP32[$arrayidx35165>>2]|0;
     $62 = $41;$64 = $49;$retval$0$i101168 = $retval$0$i101$ph163;
    } else {
     $50 = HEAP32[$47>>2]|0;
     $sub$i91 = (($39) - ($50))|0;
     $y29$i92 = ((($47)) + 4|0);
     $51 = HEAP32[$y29$i92>>2]|0;
     $sub30$i93 = (($40) - ($51))|0;
     $shr$i94 = $46 >> 16;
     $call$i95 = (_FixedMul($shr$i94,$sub$i91)|0);
     $52 = HEAP32[$dx1$i66>>2]|0;
     $shr33$i96 = $52 >> 16;
     $call34$i97 = (_FixedMul($sub30$i93,$shr33$i96)|0);
     $cmp35$i98 = ($call34$i97|0)>=($call$i95|0);
     $$$i99 = $cmp35$i98&1;
     $$pre = HEAP32[$dx1$i66>>2]|0;
     $arrayidx35 = ((($tmbox)) + 8|0);
     $53 = HEAP32[$arrayidx35>>2]|0;
     $tobool$i104 = ($$pre|0)==(0);
     if ($tobool$i104) {
      $56 = $53;$retval$0$i101161 = $$$i99;
      break;
     } else {
      $62 = $$pre;$64 = $53;$retval$0$i101168 = $$$i99;
     }
    }
    $$in = ((($tmbox)) + 4|0);
    $58 = HEAP32[$$in>>2]|0;
    $dy10$i115 = ((($ld)) + 12|0);
    $59 = HEAP32[$dy10$i115>>2]|0;
    $tobool11$i116 = ($59|0)==(0);
    $60 = HEAP32[$ld>>2]|0;
    if (!($tobool11$i116)) {
     $63 = HEAP32[$60>>2]|0;
     $sub$i128 = (($64) - ($63))|0;
     $y29$i129 = ((($60)) + 4|0);
     $65 = HEAP32[$y29$i129>>2]|0;
     $sub30$i130 = (($58) - ($65))|0;
     $shr$i131 = $59 >> 16;
     $call$i132 = (_FixedMul($shr$i131,$sub$i128)|0);
     $66 = HEAP32[$dx1$i66>>2]|0;
     $shr33$i133 = $66 >> 16;
     $call34$i134 = (_FixedMul($sub30$i130,$shr33$i133)|0);
     $cmp35$i135 = ($call34$i134|0)>=($call$i132|0);
     $$$i136 = $cmp35$i135&1;
     $p1$0 = $retval$0$i101168;$p2$0 = $$$i136;
     $cmp38 = ($p1$0|0)==($p2$0|0);
     $p1$0$ = $cmp38 ? $p1$0 : -1;
     return ($p1$0$|0);
    }
    $y14$i119 = ((($60)) + 4|0);
    $61 = HEAP32[$y14$i119>>2]|0;
    $cmp15$i120 = ($61|0)<($58|0);
    if ($cmp15$i120) {
     $cmp23$i124 = ($62|0)>(0);
     $conv24$i125 = $cmp23$i124&1;
     $p1$0 = $retval$0$i101168;$p2$0 = $conv24$i125;
     $cmp38 = ($p1$0|0)==($p2$0|0);
     $p1$0$ = $cmp38 ? $p1$0 : -1;
     return ($p1$0$|0);
    } else {
     $$lobit16$i122 = $62 >>> 31;
     $p1$0 = $retval$0$i101168;$p2$0 = $$lobit16$i122;
     $cmp38 = ($p1$0|0)==($p2$0|0);
     $p1$0$ = $cmp38 ? $p1$0 : -1;
     return ($p1$0$|0);
    }
   }
  } while(0);
  $54 = HEAP32[$ld>>2]|0;
  $55 = HEAP32[$54>>2]|0;
  $cmp$i107 = ($55|0)<($56|0);
  $dy4$i108 = ((($ld)) + 12|0);
  $57 = HEAP32[$dy4$i108>>2]|0;
  if ($cmp$i107) {
   $$lobit$i113 = $57 >>> 31;
   $p1$0 = $retval$0$i101161;$p2$0 = $$lobit$i113;
   $cmp38 = ($p1$0|0)==($p2$0|0);
   $p1$0$ = $cmp38 ? $p1$0 : -1;
   return ($p1$0$|0);
  } else {
   $cmp5$i110 = ($57|0)>(0);
   $conv$i111 = $cmp5$i110&1;
   $p1$0 = $retval$0$i101161;$p2$0 = $conv$i111;
   $cmp38 = ($p1$0|0)==($p2$0|0);
   $p1$0$ = $cmp38 ? $p1$0 : -1;
   return ($p1$0$|0);
  }
  break;
 }
 default: {
  $p1$0 = 0;$p2$0 = 0;
  $cmp38 = ($p1$0|0)==($p2$0|0);
  $p1$0$ = $cmp38 ? $p1$0 : -1;
  return ($p1$0$|0);
 }
 }
 return (0)|0;
}
function _P_LineOpening($linedef) {
 $linedef = $linedef|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arrayidx = 0, $backsector = 0, $ceilingheight = 0, $ceilingheight2 = 0, $cmp = 0, $cmp10 = 0, $cmp3 = 0, $floorheight$val = 0, $floorheight9$val = 0, $frontsector = 0, $storemerge13 = 0, $storemerge14 = 0;
 var $storemerge15 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arrayidx = ((($linedef)) + 24|0);
 $0 = HEAP16[$arrayidx>>1]|0;
 $cmp = ($0<<16>>16)==(-1);
 if ($cmp) {
  $storemerge14 = 0;
  HEAP32[99443] = $storemerge14;
  return;
 }
 $frontsector = ((($linedef)) + 48|0);
 $1 = HEAP32[$frontsector>>2]|0;
 $backsector = ((($linedef)) + 52|0);
 $2 = HEAP32[$backsector>>2]|0;
 $ceilingheight = ((($1)) + 4|0);
 $3 = HEAP32[$ceilingheight>>2]|0;
 $ceilingheight2 = ((($2)) + 4|0);
 $4 = HEAP32[$ceilingheight2>>2]|0;
 $cmp3 = ($3|0)<($4|0);
 $$ = $cmp3 ? $3 : $4;
 HEAP32[99444] = $$;
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$2>>2]|0;
 $cmp10 = ($5|0)>($6|0);
 $storemerge15 = $cmp10 ? $5 : $6;
 HEAP32[99445] = $storemerge15;
 $floorheight9$val = HEAP32[$2>>2]|0;
 $floorheight$val = HEAP32[$1>>2]|0;
 $storemerge13 = $cmp10 ? $floorheight9$val : $floorheight$val;
 HEAP32[99446] = $storemerge13;
 $sub = (($$) - ($storemerge15))|0;
 $storemerge14 = $sub;
 HEAP32[99443] = $storemerge14;
 return;
}
function _P_UnsetThingPosition($thing) {
 $thing = $thing|0;
 var $$pre = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $and = 0, $and15 = 0, $arrayidx = 0, $bnext = 0, $bnext28 = 0, $bprev21 = 0, $cmp = 0, $cmp32 = 0, $cmp34 = 0, $cmp36 = 0, $flags = 0, $mul = 0, $or$cond = 0, $or$cond22 = 0, $shr = 0, $shr31 = 0, $snext = 0, $snext10 = 0, $snext10$sink = 0;
 var $sprev4 = 0, $sub = 0, $sub30 = 0, $subsector = 0, $thinglist = 0, $tobool = 0, $tobool1 = 0, $tobool16 = 0, $tobool18 = 0, $tobool24 = 0, $tobool6 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $flags = ((($thing)) + 104|0);
 $0 = HEAP32[$flags>>2]|0;
 $and = $0 & 8;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $snext = ((($thing)) + 24|0);
  $1 = HEAP32[$snext>>2]|0;
  $tobool1 = ($1|0)==(0|0);
  $2 = $1;
  $$pre = ((($thing)) + 28|0);
  if (!($tobool1)) {
   $3 = HEAP32[$$pre>>2]|0;
   $sprev4 = ((($1)) + 28|0);
   HEAP32[$sprev4>>2] = $3;
  }
  $4 = HEAP32[$$pre>>2]|0;
  $tobool6 = ($4|0)==(0|0);
  if ($tobool6) {
   $subsector = ((($thing)) + 52|0);
   $5 = HEAP32[$subsector>>2]|0;
   $6 = HEAP32[$5>>2]|0;
   $thinglist = ((($6)) + 72|0);
   $snext10$sink = $thinglist;
  } else {
   $snext10 = ((($4)) + 24|0);
   $snext10$sink = $snext10;
  }
  HEAP32[$snext10$sink>>2] = $2;
 }
 $and15 = $0 & 16;
 $tobool16 = ($and15|0)==(0);
 if (!($tobool16)) {
  return;
 }
 $bnext = ((($thing)) + 44|0);
 $7 = HEAP32[$bnext>>2]|0;
 $tobool18 = ($7|0)==(0|0);
 $8 = $7;
 $$pre23 = ((($thing)) + 48|0);
 if (!($tobool18)) {
  $9 = HEAP32[$$pre23>>2]|0;
  $bprev21 = ((($7)) + 48|0);
  HEAP32[$bprev21>>2] = $9;
 }
 $10 = HEAP32[$$pre23>>2]|0;
 $tobool24 = ($10|0)==(0|0);
 if (!($tobool24)) {
  $bnext28 = ((($10)) + 44|0);
  HEAP32[$bnext28>>2] = $8;
  return;
 }
 $x = ((($thing)) + 12|0);
 $11 = HEAP32[$x>>2]|0;
 $12 = HEAP32[99512]|0;
 $sub = (($11) - ($12))|0;
 $shr = $sub >> 23;
 $y = ((($thing)) + 16|0);
 $13 = HEAP32[$y>>2]|0;
 $14 = HEAP32[99513]|0;
 $sub30 = (($13) - ($14))|0;
 $shr31 = $sub30 >> 23;
 $cmp = ($sub|0)>(-1);
 if (!($cmp)) {
  return;
 }
 $15 = HEAP32[99514]|0;
 $cmp32 = ($shr|0)<($15|0);
 $cmp34 = ($sub30|0)>(-1);
 $or$cond = $cmp34 & $cmp32;
 $16 = HEAP32[99515]|0;
 $cmp36 = ($shr31|0)<($16|0);
 $or$cond22 = $or$cond & $cmp36;
 if (!($or$cond22)) {
  return;
 }
 $17 = HEAP32[99516]|0;
 $mul = Math_imul($15, $shr31)|0;
 $add = (($mul) + ($shr))|0;
 $arrayidx = (($17) + ($add<<2)|0);
 HEAP32[$arrayidx>>2] = $8;
 return;
}
function _P_SetThingPosition($thing) {
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $and9 = 0, $arrayidx = 0, $bnext = 0;
 var $bnext27 = 0, $bprev = 0, $bprev24 = 0, $bprev26 = 0, $call = 0, $cmp = 0, $cmp16 = 0, $cmp18 = 0, $cmp20 = 0, $flags = 0, $mul = 0, $or$cond = 0, $or$cond33 = 0, $shr = 0, $shr15 = 0, $snext = 0, $sprev = 0, $sprev5 = 0, $sub = 0, $sub14 = 0;
 var $subsector = 0, $thinglist = 0, $tobool = 0, $tobool10 = 0, $tobool2 = 0, $tobool22 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $x = ((($thing)) + 12|0);
 $0 = HEAP32[$x>>2]|0;
 $y = ((($thing)) + 16|0);
 $1 = HEAP32[$y>>2]|0;
 $call = (_R_PointInSubsector($0,$1)|0);
 $subsector = ((($thing)) + 52|0);
 HEAP32[$subsector>>2] = $call;
 $flags = ((($thing)) + 104|0);
 $2 = HEAP32[$flags>>2]|0;
 $and = $2 & 8;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $3 = HEAP32[$call>>2]|0;
  $sprev = ((($thing)) + 28|0);
  HEAP32[$sprev>>2] = 0;
  $thinglist = ((($3)) + 72|0);
  $4 = HEAP32[$thinglist>>2]|0;
  $snext = ((($thing)) + 24|0);
  HEAP32[$snext>>2] = $4;
  $tobool2 = ($4|0)==(0);
  if (!($tobool2)) {
   $5 = $4;
   $sprev5 = ((($5)) + 28|0);
   HEAP32[$sprev5>>2] = $thing;
  }
  HEAP32[$thinglist>>2] = $thing;
 }
 $and9 = $2 & 16;
 $tobool10 = ($and9|0)==(0);
 if (!($tobool10)) {
  return;
 }
 $6 = HEAP32[$x>>2]|0;
 $7 = HEAP32[99512]|0;
 $sub = (($6) - ($7))|0;
 $shr = $sub >> 23;
 $8 = HEAP32[$y>>2]|0;
 $9 = HEAP32[99513]|0;
 $sub14 = (($8) - ($9))|0;
 $shr15 = $sub14 >> 23;
 $cmp = ($sub|0)>(-1);
 if ($cmp) {
  $10 = HEAP32[99514]|0;
  $cmp16 = ($shr|0)<($10|0);
  $cmp18 = ($sub14|0)>(-1);
  $or$cond = $cmp18 & $cmp16;
  $11 = HEAP32[99515]|0;
  $cmp20 = ($shr15|0)<($11|0);
  $or$cond33 = $or$cond & $cmp20;
  if ($or$cond33) {
   $12 = HEAP32[99516]|0;
   $mul = Math_imul($10, $shr15)|0;
   $add = (($mul) + ($shr))|0;
   $arrayidx = (($12) + ($add<<2)|0);
   $bprev = ((($thing)) + 48|0);
   HEAP32[$bprev>>2] = 0;
   $13 = HEAP32[$arrayidx>>2]|0;
   $bnext = ((($thing)) + 44|0);
   HEAP32[$bnext>>2] = $13;
   $14 = HEAP32[$arrayidx>>2]|0;
   $tobool22 = ($14|0)==(0|0);
   if (!($tobool22)) {
    $bprev24 = ((($14)) + 48|0);
    HEAP32[$bprev24>>2] = $thing;
   }
   HEAP32[$arrayidx>>2] = $thing;
   return;
  }
 }
 $bprev26 = ((($thing)) + 48|0);
 HEAP32[$bprev26>>2] = 0;
 $bnext27 = ((($thing)) + 44|0);
 HEAP32[$bnext27>>2] = 0;
 return;
}
function _P_BlockLinesIterator($x,$y,$func) {
 $x = $x|0;
 $y = $y|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr6 = 0, $arrayidx = 0, $call = 0, $cmp10 = 0, $cmp3 = 0;
 var $cmp5 = 0, $cmp8 = 0, $cmp813 = 0, $conv = 0, $conv7 = 0, $incdec$ptr = 0, $list$014 = 0, $mul = 0, $or$cond = 0, $retval$0 = 0, $tobool = 0, $validcount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $y | $x;
 $1 = ($0|0)<(0);
 if ($1) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $2 = HEAP32[99514]|0;
 $cmp3 = ($2|0)>($x|0);
 $3 = HEAP32[99515]|0;
 $cmp5 = ($3|0)>($y|0);
 $or$cond = $cmp3 & $cmp5;
 if (!($or$cond)) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $mul = Math_imul($2, $y)|0;
 $add = (($mul) + ($x))|0;
 $4 = HEAP32[99511]|0;
 $add$ptr = (($4) + ($add<<1)|0);
 $5 = HEAP16[$add$ptr>>1]|0;
 $conv = $5 << 16 >> 16;
 $6 = HEAP32[99510]|0;
 $add$ptr6 = (($6) + ($conv<<1)|0);
 $7 = HEAP16[$add$ptr6>>1]|0;
 $cmp813 = ($7<<16>>16)==(-1);
 if ($cmp813) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $8 = $7;$list$014 = $add$ptr6;
 while(1) {
  $conv7 = $8 << 16 >> 16;
  $9 = HEAP32[99500]|0;
  $validcount = (((($9) + ($conv7<<6)|0)) + 56|0);
  $10 = HEAP32[$validcount>>2]|0;
  $11 = HEAP32[32309]|0;
  $cmp10 = ($10|0)==($11|0);
  if (!($cmp10)) {
   $arrayidx = (($9) + ($conv7<<6)|0);
   HEAP32[$validcount>>2] = $11;
   $call = (FUNCTION_TABLE_ii[$func & 255]($arrayidx)|0);
   $tobool = ($call|0)==(0);
   if ($tobool) {
    $retval$0 = 0;
    label = 8;
    break;
   }
  }
  $incdec$ptr = ((($list$014)) + 2|0);
  $12 = HEAP16[$incdec$ptr>>1]|0;
  $cmp8 = ($12<<16>>16)==(-1);
  if ($cmp8) {
   $retval$0 = 1;
   label = 8;
   break;
  } else {
   $8 = $12;$list$014 = $incdec$ptr;
  }
 }
 if ((label|0) == 8) {
  return ($retval$0|0);
 }
 return (0)|0;
}
function _P_BlockThingsIterator($x,$y,$func) {
 $x = $x|0;
 $y = $y|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add = 0, $arrayidx = 0, $bnext = 0, $call = 0, $cmp3 = 0, $cmp5 = 0, $mobj$0 = 0, $mobj$010 = 0, $mobj$08 = 0, $mul = 0, $or$cond = 0, $retval$0 = 0, $tobool = 0, $tobool6 = 0, $tobool9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $y | $x;
 $1 = ($0|0)<(0);
 if ($1) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $2 = HEAP32[99514]|0;
 $cmp3 = ($2|0)>($x|0);
 $3 = HEAP32[99515]|0;
 $cmp5 = ($3|0)>($y|0);
 $or$cond = $cmp3 & $cmp5;
 if (!($or$cond)) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $4 = HEAP32[99516]|0;
 $mul = Math_imul($2, $y)|0;
 $add = (($mul) + ($x))|0;
 $arrayidx = (($4) + ($add<<2)|0);
 $mobj$08 = HEAP32[$arrayidx>>2]|0;
 $tobool9 = ($mobj$08|0)==(0|0);
 if ($tobool9) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $mobj$010 = $mobj$08;
 while(1) {
  $call = (FUNCTION_TABLE_ii[$func & 255]($mobj$010)|0);
  $tobool6 = ($call|0)==(0);
  if ($tobool6) {
   $retval$0 = 0;
   label = 7;
   break;
  }
  $bnext = ((($mobj$010)) + 44|0);
  $mobj$0 = HEAP32[$bnext>>2]|0;
  $tobool = ($mobj$0|0)==(0|0);
  if ($tobool) {
   $retval$0 = 1;
   label = 7;
   break;
  } else {
   $mobj$010 = $mobj$0;
  }
 }
 if ((label|0) == 7) {
  return ($retval$0|0);
 }
 return (0)|0;
}
function _PIT_AddLineIntercepts($ld) {
 $ld = $ld|0;
 var $$$i = 0, $$$i103 = 0, $$22$i = 0, $$22$i51 = 0, $$lobit$i = 0, $$lobit$i24 = 0, $$lobit$i61 = 0, $$lobit$i80 = 0, $$lobit16$i = 0, $$lobit16$i89 = 0, $$lobit21$i = 0, $$lobit21$i30 = 0, $$off = 0, $$off17 = 0, $$pre = 0, $$pre128 = 0, $$pre129 = 0, $$pre130 = 0, $$pre131 = 0, $$pre132 = 0;
 var $$pre133 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add = 0, $add$i = 0, $add$i118 = 0, $add12 = 0, $add12143 = 0, $add12147 = 0, $add134 = 0, $add138 = 0, $add142 = 0, $add146 = 0, $add2$i = 0, $backsector = 0, $call$i = 0, $call$i110 = 0, $call$i46 = 0, $call$i68 = 0, $call$i99 = 0, $call14$i = 0;
 var $call15$i = 0, $call34$i = 0, $call34$i101 = 0, $call4$i = 0, $call46$i = 0, $call46$i49 = 0, $call9$i = 0, $cmp$i = 0, $cmp$i113 = 0, $cmp$i117 = 0, $cmp$i19 = 0, $cmp$i56 = 0, $cmp$i74 = 0, $cmp14 = 0, $cmp14$i = 0, $cmp14$i28 = 0, $cmp15$i = 0, $cmp15$i87 = 0, $cmp18 = 0, $cmp21 = 0;
 var $cmp22$i = 0, $cmp22$i32 = 0, $cmp23$i = 0, $cmp23$i91 = 0, $cmp35$i = 0, $cmp35$i102 = 0, $cmp47$i = 0, $cmp47$i50 = 0, $cmp5$i = 0, $cmp5$i21 = 0, $cmp5$i58 = 0, $cmp5$i77 = 0, $conv$i = 0, $conv$i22 = 0, $conv$i59 = 0, $conv$i78 = 0, $conv23$i = 0, $conv23$i33 = 0, $conv24$i = 0, $conv24$i92 = 0;
 var $d = 0, $dx$i = 0, $dx1$i = 0, $dy$i = 0, $dy10$i = 0, $dy10$i82 = 0, $dy4$i = 0, $dy4$i75 = 0, $incdec$ptr = 0, $isaline = 0, $mul$i = 0, $or$cond3 = 0, $retval$0 = 0, $retval$0$i = 0, $retval$0$i116127 = 0, $retval$0$i69$ph = 0, $retval$0$i69$ph140 = 0, $retval$0$i69137 = 0, $retval$0$i69145 = 0, $s1$0 = 0;
 var $s2$0 = 0, $shr$i = 0, $shr$i109 = 0, $shr$i44 = 0, $shr$i67 = 0, $shr$i98 = 0, $shr12$i = 0, $shr2$i = 0, $shr33$i = 0, $shr33$i100 = 0, $shr42$i = 0, $shr42$i45 = 0, $shr43$i = 0, $shr43$i47 = 0, $shr45$i = 0, $shr45$i48 = 0, $shr7$i = 0, $sub$i = 0, $sub$i112 = 0, $sub$i35 = 0;
 var $sub$i66 = 0, $sub$i95 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0, $sub11$i = 0, $sub27$i = 0, $sub27$i36 = 0, $sub30$i = 0, $sub30$i97 = 0, $sub6$i = 0, $thing$i = 0, $tobool = 0, $tobool$i = 0, $tobool$i18 = 0, $tobool$i55 = 0, $tobool$i71 = 0, $tobool11$i = 0, $tobool11$i26 = 0, $tobool11$i63 = 0, $tobool11$i83 = 0;
 var $tobool23 = 0, $tobool32$i = 0, $tobool32$i40 = 0, $v2 = 0, $xor$i = 0, $xor$i37 = 0, $xor30$i = 0, $xor30$i38 = 0, $xor31$i = 0, $xor31$i39 = 0, $xor35$lobit$i = 0, $xor35$lobit$i42 = 0, $y = 0, $y$i = 0, $y14$i = 0, $y14$i86 = 0, $y29$i = 0, $y29$i96 = 0, $y9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[100019]|0;
 $1 = HEAP32[100020]|0;
 $$off = (($0) + 1048576)|0;
 $2 = ($$off>>>0)>(2097152);
 $$off17 = (($1) + 1048576)|0;
 $3 = ($$off17>>>0)>(2097152);
 $4 = $2 | $3;
 L1: do {
  if ($4) {
   $5 = HEAP32[$ld>>2]|0;
   $6 = HEAP32[$5>>2]|0;
   $y = ((($5)) + 4|0);
   $7 = HEAP32[$y>>2]|0;
   $tobool$i = ($0|0)==(0);
   do {
    if ($tobool$i) {
     $8 = HEAP32[100017]|0;
     $cmp$i = ($8|0)<($6|0);
     if ($cmp$i) {
      $$lobit$i = $1 >>> 31;
      $16 = 0;$retval$0$i = $$lobit$i;
      break;
     } else {
      $cmp5$i = ($1|0)>(0);
      $conv$i = $cmp5$i&1;
      $16 = 0;$retval$0$i = $conv$i;
      break;
     }
    } else {
     $tobool11$i = ($1|0)==(0);
     if ($tobool11$i) {
      $9 = HEAP32[100018]|0;
      $cmp14$i = ($9|0)<($7|0);
      if ($cmp14$i) {
       $cmp22$i = ($0|0)>(0);
       $conv23$i = $cmp22$i&1;
       $16 = $0;$retval$0$i = $conv23$i;
       break;
      } else {
       $$lobit21$i = $0 >>> 31;
       $16 = $0;$retval$0$i = $$lobit21$i;
       break;
      }
     } else {
      $10 = HEAP32[100017]|0;
      $sub$i = (($6) - ($10))|0;
      $11 = HEAP32[100018]|0;
      $sub27$i = (($7) - ($11))|0;
      $xor$i = $sub$i ^ $1;
      $xor30$i = $xor$i ^ $0;
      $xor31$i = $xor30$i ^ $sub27$i;
      $tobool32$i = ($xor31$i|0)<(0);
      if ($tobool32$i) {
       $xor35$lobit$i = $xor$i >>> 31;
       $16 = $0;$retval$0$i = $xor35$lobit$i;
       break;
      } else {
       $shr$i = $1 >> 8;
       $shr42$i = $sub$i >> 8;
       $call$i = (_FixedMul($shr$i,$shr42$i)|0);
       $shr43$i = $sub27$i >> 8;
       $12 = HEAP32[100019]|0;
       $shr45$i = $12 >> 8;
       $call46$i = (_FixedMul($shr43$i,$shr45$i)|0);
       $cmp47$i = ($call46$i|0)>=($call$i|0);
       $$22$i = $cmp47$i&1;
       $$pre132 = HEAP32[100019]|0;
       $16 = $$pre132;$retval$0$i = $$22$i;
       break;
      }
     }
    }
   } while(0);
   $v2 = ((($ld)) + 4|0);
   $13 = HEAP32[$v2>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $y9 = ((($13)) + 4|0);
   $15 = HEAP32[$y9>>2]|0;
   $tobool$i18 = ($16|0)==(0);
   if ($tobool$i18) {
    $17 = HEAP32[100017]|0;
    $cmp$i19 = ($17|0)<($14|0);
    $18 = HEAP32[100020]|0;
    if ($cmp$i19) {
     $$lobit$i24 = $18 >>> 31;
     $s1$0 = $retval$0$i;$s2$0 = $$lobit$i24;
     break;
    } else {
     $cmp5$i21 = ($18|0)>(0);
     $conv$i22 = $cmp5$i21&1;
     $s1$0 = $retval$0$i;$s2$0 = $conv$i22;
     break;
    }
   }
   $19 = HEAP32[100020]|0;
   $tobool11$i26 = ($19|0)==(0);
   if ($tobool11$i26) {
    $20 = HEAP32[100018]|0;
    $cmp14$i28 = ($20|0)<($15|0);
    if ($cmp14$i28) {
     $cmp22$i32 = ($16|0)>(0);
     $conv23$i33 = $cmp22$i32&1;
     $s1$0 = $retval$0$i;$s2$0 = $conv23$i33;
     break;
    } else {
     $$lobit21$i30 = $16 >>> 31;
     $s1$0 = $retval$0$i;$s2$0 = $$lobit21$i30;
     break;
    }
   } else {
    $21 = HEAP32[100017]|0;
    $sub$i35 = (($14) - ($21))|0;
    $22 = HEAP32[100018]|0;
    $sub27$i36 = (($15) - ($22))|0;
    $xor$i37 = $sub$i35 ^ $19;
    $xor30$i38 = $xor$i37 ^ $16;
    $xor31$i39 = $xor30$i38 ^ $sub27$i36;
    $tobool32$i40 = ($xor31$i39|0)<(0);
    if ($tobool32$i40) {
     $xor35$lobit$i42 = $xor$i37 >>> 31;
     $s1$0 = $retval$0$i;$s2$0 = $xor35$lobit$i42;
     break;
    } else {
     $shr$i44 = $19 >> 8;
     $shr42$i45 = $sub$i35 >> 8;
     $call$i46 = (_FixedMul($shr$i44,$shr42$i45)|0);
     $shr43$i47 = $sub27$i36 >> 8;
     $23 = HEAP32[100019]|0;
     $shr45$i48 = $23 >> 8;
     $call46$i49 = (_FixedMul($shr43$i47,$shr45$i48)|0);
     $cmp47$i50 = ($call46$i49|0)>=($call$i46|0);
     $$22$i51 = $cmp47$i50&1;
     $s1$0 = $retval$0$i;$s2$0 = $$22$i51;
     break;
    }
   }
  } else {
   $24 = HEAP32[100017]|0;
   $25 = HEAP32[100018]|0;
   $dx1$i = ((($ld)) + 8|0);
   $26 = HEAP32[$dx1$i>>2]|0;
   $tobool$i55 = ($26|0)==(0);
   do {
    if ($tobool$i55) {
     $27 = HEAP32[$ld>>2]|0;
     $28 = HEAP32[$27>>2]|0;
     $cmp$i56 = ($28|0)<($24|0);
     $dy4$i = ((($ld)) + 12|0);
     $29 = HEAP32[$dy4$i>>2]|0;
     $$lobit$i61 = $29 >>> 31;
     $cmp5$i58 = ($29|0)>(0);
     $conv$i59 = $cmp5$i58&1;
     $retval$0$i69$ph = $cmp$i56 ? $$lobit$i61 : $conv$i59;
     $add134 = (($0) + ($24))|0;
     $add138 = $add134;$retval$0$i69137 = $retval$0$i69$ph;
    } else {
     $dy10$i = ((($ld)) + 12|0);
     $30 = HEAP32[$dy10$i>>2]|0;
     $tobool11$i63 = ($30|0)==(0);
     $31 = HEAP32[$ld>>2]|0;
     if ($tobool11$i63) {
      $y14$i = ((($31)) + 4|0);
      $32 = HEAP32[$y14$i>>2]|0;
      $cmp15$i = ($32|0)<($25|0);
      $cmp23$i = ($26|0)>(0);
      $conv24$i = $cmp23$i&1;
      $$lobit16$i = $26 >>> 31;
      $retval$0$i69$ph140 = $cmp15$i ? $conv24$i : $$lobit16$i;
      $add142 = (($0) + ($24))|0;
      $add12143 = (($1) + ($25))|0;
      $42 = $26;$add12147 = $add12143;$add146 = $add142;$retval$0$i69145 = $retval$0$i69$ph140;
     } else {
      $33 = HEAP32[$31>>2]|0;
      $sub$i66 = (($24) - ($33))|0;
      $y29$i = ((($31)) + 4|0);
      $34 = HEAP32[$y29$i>>2]|0;
      $sub30$i = (($25) - ($34))|0;
      $shr$i67 = $30 >> 16;
      $call$i68 = (_FixedMul($shr$i67,$sub$i66)|0);
      $35 = HEAP32[$dx1$i>>2]|0;
      $shr33$i = $35 >> 16;
      $call34$i = (_FixedMul($sub30$i,$shr33$i)|0);
      $cmp35$i = ($call34$i|0)>=($call$i68|0);
      $$$i = $cmp35$i&1;
      $$pre = HEAP32[100017]|0;
      $$pre128 = HEAP32[100019]|0;
      $$pre129 = HEAP32[100018]|0;
      $$pre130 = HEAP32[100020]|0;
      $$pre131 = HEAP32[$dx1$i>>2]|0;
      $add = (($$pre128) + ($$pre))|0;
      $add12 = (($$pre130) + ($$pre129))|0;
      $tobool$i71 = ($$pre131|0)==(0);
      if ($tobool$i71) {
       $add138 = $add;$retval$0$i69137 = $$$i;
       break;
      } else {
       $42 = $$pre131;$add12147 = $add12;$add146 = $add;$retval$0$i69145 = $$$i;
      }
     }
     $dy10$i82 = ((($ld)) + 12|0);
     $39 = HEAP32[$dy10$i82>>2]|0;
     $tobool11$i83 = ($39|0)==(0);
     $40 = HEAP32[$ld>>2]|0;
     if (!($tobool11$i83)) {
      $43 = HEAP32[$40>>2]|0;
      $sub$i95 = (($add146) - ($43))|0;
      $y29$i96 = ((($40)) + 4|0);
      $44 = HEAP32[$y29$i96>>2]|0;
      $sub30$i97 = (($add12147) - ($44))|0;
      $shr$i98 = $39 >> 16;
      $call$i99 = (_FixedMul($shr$i98,$sub$i95)|0);
      $45 = HEAP32[$dx1$i>>2]|0;
      $shr33$i100 = $45 >> 16;
      $call34$i101 = (_FixedMul($sub30$i97,$shr33$i100)|0);
      $cmp35$i102 = ($call34$i101|0)>=($call$i99|0);
      $$$i103 = $cmp35$i102&1;
      $s1$0 = $retval$0$i69145;$s2$0 = $$$i103;
      break L1;
     }
     $y14$i86 = ((($40)) + 4|0);
     $41 = HEAP32[$y14$i86>>2]|0;
     $cmp15$i87 = ($41|0)<($add12147|0);
     if ($cmp15$i87) {
      $cmp23$i91 = ($42|0)>(0);
      $conv24$i92 = $cmp23$i91&1;
      $s1$0 = $retval$0$i69145;$s2$0 = $conv24$i92;
      break L1;
     } else {
      $$lobit16$i89 = $42 >>> 31;
      $s1$0 = $retval$0$i69145;$s2$0 = $$lobit16$i89;
      break L1;
     }
    }
   } while(0);
   $36 = HEAP32[$ld>>2]|0;
   $37 = HEAP32[$36>>2]|0;
   $cmp$i74 = ($37|0)<($add138|0);
   $dy4$i75 = ((($ld)) + 12|0);
   $38 = HEAP32[$dy4$i75>>2]|0;
   if ($cmp$i74) {
    $$lobit$i80 = $38 >>> 31;
    $s1$0 = $retval$0$i69137;$s2$0 = $$lobit$i80;
    break;
   } else {
    $cmp5$i77 = ($38|0)>(0);
    $conv$i78 = $cmp5$i77&1;
    $s1$0 = $retval$0$i69137;$s2$0 = $conv$i78;
    break;
   }
  }
 } while(0);
 $cmp14 = ($s1$0|0)==($s2$0|0);
 if ($cmp14) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $46 = HEAP32[$ld>>2]|0;
 $47 = HEAP32[$46>>2]|0;
 $y$i = ((($46)) + 4|0);
 $48 = HEAP32[$y$i>>2]|0;
 $dx$i = ((($ld)) + 8|0);
 $49 = HEAP32[$dx$i>>2]|0;
 $dy$i = ((($ld)) + 12|0);
 $50 = HEAP32[$dy$i>>2]|0;
 $shr$i109 = $50 >> 8;
 $51 = HEAP32[100019]|0;
 $call$i110 = (_FixedMul($shr$i109,$51)|0);
 $shr2$i = $49 >> 8;
 $52 = HEAP32[100020]|0;
 $call4$i = (_FixedMul($shr2$i,$52)|0);
 $sub$i112 = (($call$i110) - ($call4$i))|0;
 $cmp$i113 = ($sub$i112|0)==(0);
 if ($cmp$i113) {
  $retval$0$i116127 = 0;
 } else {
  $53 = HEAP32[100017]|0;
  $sub6$i = (($47) - ($53))|0;
  $shr7$i = $sub6$i >> 8;
  $call9$i = (_FixedMul($shr7$i,$50)|0);
  $54 = HEAP32[100018]|0;
  $sub11$i = (($54) - ($48))|0;
  $shr12$i = $sub11$i >> 8;
  $call14$i = (_FixedMul($shr12$i,$49)|0);
  $add$i = (($call14$i) + ($call9$i))|0;
  $call15$i = (_FixedDiv($add$i,$sub$i112)|0);
  $cmp18 = ($call15$i|0)<(0);
  if ($cmp18) {
   $retval$0 = 1;
   return ($retval$0|0);
  } else {
   $retval$0$i116127 = $call15$i;
  }
 }
 $55 = HEAP32[99447]|0;
 $tobool = ($55|0)!=(0);
 $cmp21 = ($retval$0$i116127|0)<(65536);
 $or$cond3 = $cmp21 & $tobool;
 if ($or$cond3) {
  $backsector = ((($ld)) + 52|0);
  $56 = HEAP32[$backsector>>2]|0;
  $tobool23 = ($56|0)==(0|0);
  if ($tobool23) {
   $retval$0 = 0;
   return ($retval$0|0);
  }
 }
 $57 = HEAP32[99448]|0;
 HEAP32[$57>>2] = $retval$0$i116127;
 $isaline = ((($57)) + 4|0);
 HEAP32[$isaline>>2] = 1;
 $d = ((($57)) + 8|0);
 HEAP32[$d>>2] = $ld;
 $sub$ptr$lhs$cast = $57;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - (186368))|0;
 $cmp$i117 = ($sub$ptr$sub|0)<(1548);
 if ($cmp$i117) {
  $60 = $57;
 } else {
  $mul$i = (($sub$ptr$sub) + -1548)|0;
  _InterceptsMemoryOverrun($mul$i,$retval$0$i116127);
  $add$i118 = (($sub$ptr$sub) + -1544)|0;
  $58 = HEAP32[$isaline>>2]|0;
  _InterceptsMemoryOverrun($add$i118,$58);
  $add2$i = (($sub$ptr$sub) + -1540)|0;
  $thing$i = ((($57)) + 8|0);
  $59 = HEAP32[$thing$i>>2]|0;
  _InterceptsMemoryOverrun($add2$i,$59);
  $$pre133 = HEAP32[99448]|0;
  $60 = $$pre133;
 }
 $incdec$ptr = ((($60)) + 12|0);
 HEAP32[99448] = $incdec$ptr;
 $retval$0 = 1;
 return ($retval$0|0);
}
function _InterceptsMemoryOverrun($location,$value) {
 $location = $location|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add13 = 0, $addr5 = 0, $arrayidx10 = 0, $arrayidx14 = 0, $arrayidx17 = 0, $cmp3 = 0, $cmp3$1 = 0, $cmp3$10 = 0, $cmp3$11 = 0, $cmp3$12 = 0, $cmp3$13 = 0, $cmp3$14 = 0, $cmp3$15 = 0, $cmp3$16 = 0, $cmp3$17 = 0, $cmp3$18 = 0;
 var $cmp3$19 = 0, $cmp3$2 = 0, $cmp3$20 = 0, $cmp3$21 = 0, $cmp3$3 = 0, $cmp3$4 = 0, $cmp3$5 = 0, $cmp3$6 = 0, $cmp3$7 = 0, $cmp3$8 = 0, $cmp3$9 = 0, $cmp6 = 0, $conv = 0, $conv12 = 0, $div = 0, $div16 = 0, $i$022$lcssa = 0, $offset$021$lcssa = 0, $sub = 0, $tobool = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $cmp3 = ($location|0)<(4);
 do {
  if ($cmp3) {
   $i$022$lcssa = 0;$offset$021$lcssa = 0;
  } else {
   $cmp3$1 = ($location|0)<(8);
   if ($cmp3$1) {
    $i$022$lcssa = 1;$offset$021$lcssa = 4;
   } else {
    $cmp3$2 = ($location|0)<(12);
    if ($cmp3$2) {
     $i$022$lcssa = 2;$offset$021$lcssa = 8;
    } else {
     $cmp3$3 = ($location|0)<(16);
     if ($cmp3$3) {
      $i$022$lcssa = 3;$offset$021$lcssa = 12;
     } else {
      $cmp3$4 = ($location|0)<(20);
      if ($cmp3$4) {
       $i$022$lcssa = 4;$offset$021$lcssa = 16;
      } else {
       $cmp3$5 = ($location|0)<(24);
       if ($cmp3$5) {
        $i$022$lcssa = 5;$offset$021$lcssa = 20;
       } else {
        $cmp3$6 = ($location|0)<(28);
        if ($cmp3$6) {
         $i$022$lcssa = 6;$offset$021$lcssa = 24;
        } else {
         $cmp3$7 = ($location|0)<(32);
         if ($cmp3$7) {
          $i$022$lcssa = 7;$offset$021$lcssa = 28;
         } else {
          $cmp3$8 = ($location|0)<(152);
          if ($cmp3$8) {
           $i$022$lcssa = 8;$offset$021$lcssa = 32;
          } else {
           $cmp3$9 = ($location|0)<(160);
           if ($cmp3$9) {
            $i$022$lcssa = 9;$offset$021$lcssa = 152;
           } else {
            $cmp3$10 = ($location|0)<(164);
            if ($cmp3$10) {
             $i$022$lcssa = 10;$offset$021$lcssa = 160;
            } else {
             $cmp3$11 = ($location|0)<(168);
             if ($cmp3$11) {
              $i$022$lcssa = 11;$offset$021$lcssa = 164;
             } else {
              $cmp3$12 = ($location|0)<(172);
              if ($cmp3$12) {
               $i$022$lcssa = 12;$offset$021$lcssa = 168;
              } else {
               $cmp3$13 = ($location|0)<(176);
               if ($cmp3$13) {
                $i$022$lcssa = 13;$offset$021$lcssa = 172;
               } else {
                $cmp3$14 = ($location|0)<(216);
                if ($cmp3$14) {
                 $i$022$lcssa = 14;$offset$021$lcssa = 176;
                } else {
                 $cmp3$15 = ($location|0)<(220);
                 if ($cmp3$15) {
                  $i$022$lcssa = 15;$offset$021$lcssa = 216;
                 } else {
                  $cmp3$16 = ($location|0)<(224);
                  if ($cmp3$16) {
                   $i$022$lcssa = 16;$offset$021$lcssa = 220;
                  } else {
                   $cmp3$17 = ($location|0)<(228);
                   if ($cmp3$17) {
                    $i$022$lcssa = 17;$offset$021$lcssa = 224;
                   } else {
                    $cmp3$18 = ($location|0)<(232);
                    if ($cmp3$18) {
                     $i$022$lcssa = 18;$offset$021$lcssa = 228;
                    } else {
                     $cmp3$19 = ($location|0)<(236);
                     if ($cmp3$19) {
                      $i$022$lcssa = 19;$offset$021$lcssa = 232;
                      break;
                     }
                     $cmp3$20 = ($location|0)<(240);
                     if ($cmp3$20) {
                      $i$022$lcssa = 20;$offset$021$lcssa = 236;
                      break;
                     }
                     $cmp3$21 = ($location|0)<(244);
                     if ($cmp3$21) {
                      $i$022$lcssa = 21;$offset$021$lcssa = 240;
                      break;
                     }
                     return;
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $addr5 = (((49424 + (($i$022$lcssa*12)|0)|0)) + 4|0);
 $0 = HEAP32[$addr5>>2]|0;
 $1 = 2966648 >>> $i$022$lcssa;
 $2 = $1 & 1;
 $cmp6 = ($2|0)==(0);
 if ($cmp6) {
  return;
 }
 $tobool = ($i$022$lcssa|0)==(14);
 $sub = (($location) - ($offset$021$lcssa))|0;
 if ($tobool) {
  $div = (($sub|0) / 2)&-1;
  $conv = $value&65535;
  $arrayidx10 = (($0) + ($div<<1)|0);
  HEAP16[$arrayidx10>>1] = $conv;
  $3 = $value >>> 16;
  $conv12 = $3&65535;
  $add13 = (($div) + 1)|0;
  $arrayidx14 = (($0) + ($add13<<1)|0);
  HEAP16[$arrayidx14>>1] = $conv12;
  return;
 } else {
  $div16 = (($sub|0) / 4)&-1;
  $arrayidx17 = (($0) + ($div16<<2)|0);
  HEAP32[$arrayidx17>>2] = $value;
  return;
 }
}
function _PIT_AddThingIntercepts($thing) {
 $thing = $thing|0;
 var $$22$i = 0, $$22$i61 = 0, $$lobit$i = 0, $$lobit$i34 = 0, $$lobit21$i = 0, $$lobit21$i40 = 0, $$pre = 0, $$pre82 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0, $add$i72 = 0, $add2$i = 0, $call$i = 0, $call$i56 = 0;
 var $call$i66 = 0, $call14$i = 0, $call15$i = 0, $call4$i = 0, $call46$i = 0, $call46$i59 = 0, $call9$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i29 = 0, $cmp$i68 = 0, $cmp$i71 = 0, $cmp14$i = 0, $cmp14$i38 = 0, $cmp22 = 0, $cmp22$i = 0, $cmp22$i42 = 0, $cmp31 = 0, $cmp47$i = 0, $cmp47$i60 = 0;
 var $cmp5$i = 0, $cmp5$i31 = 0, $conv$i = 0, $conv$i32 = 0, $conv23$i = 0, $conv23$i43 = 0, $incdec$ptr = 0, $isaline = 0, $mul$i = 0, $radius = 0, $retval$0$i63 = 0, $retval$0$i7081 = 0, $retval$0$i84 = 0, $retval$0$i85 = 0, $retval$0$i90 = 0, $shr$i = 0, $shr$i54 = 0, $shr$i65 = 0, $shr12$i = 0, $shr2$i = 0;
 var $shr42$i = 0, $shr42$i55 = 0, $shr43$i = 0, $shr43$i57 = 0, $shr45$i = 0, $shr45$i58 = 0, $shr7$i = 0, $sub = 0, $sub$i = 0, $sub$i45 = 0, $sub$i67 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0, $sub11$i = 0, $sub27$i = 0, $sub27$i46 = 0, $sub28 = 0, $sub29 = 0, $sub6$i = 0, $sub8 = 0;
 var $thing36 = 0, $tobool$i = 0, $tobool$i28 = 0, $tobool11$i = 0, $tobool11$i36 = 0, $tobool32$i = 0, $tobool32$i50 = 0, $x = 0, $x2$0 = 0, $xor = 0, $xor$i = 0, $xor$i47 = 0, $xor30$i = 0, $xor30$i48 = 0, $xor31$i = 0, $xor31$i49 = 0, $xor35$lobit$i = 0, $xor35$lobit$i52 = 0, $y = 0, $y1$0 = 0;
 var $y2$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[100019]|0;
 $1 = HEAP32[100020]|0;
 $xor = $1 ^ $0;
 $cmp = ($xor|0)>(0);
 $x = ((($thing)) + 12|0);
 $2 = HEAP32[$x>>2]|0;
 $radius = ((($thing)) + 64|0);
 $3 = HEAP32[$radius>>2]|0;
 $sub = (($2) - ($3))|0;
 $y = ((($thing)) + 16|0);
 $4 = HEAP32[$y>>2]|0;
 $add = (($4) + ($3))|0;
 $sub8 = (($4) - ($3))|0;
 $y2$0 = $cmp ? $sub8 : $add;
 $y1$0 = $cmp ? $add : $sub8;
 $x2$0 = (($3) + ($2))|0;
 $tobool$i = ($0|0)==(0);
 L1: do {
  if ($tobool$i) {
   $5 = HEAP32[100017]|0;
   $cmp$i = ($5|0)<($sub|0);
   if ($cmp$i) {
    $$lobit$i = $1 >>> 31;
    $retval$0$i90 = $$lobit$i;
    label = 12;
    break;
   } else {
    $cmp5$i = ($1|0)>(0);
    $conv$i = $cmp5$i&1;
    $retval$0$i90 = $conv$i;
    label = 12;
    break;
   }
  } else {
   $tobool11$i = ($1|0)==(0);
   do {
    if ($tobool11$i) {
     $6 = HEAP32[100018]|0;
     $cmp14$i = ($6|0)<($y1$0|0);
     if ($cmp14$i) {
      $cmp22$i = ($0|0)>(0);
      $conv23$i = $cmp22$i&1;
      $14 = $0;$retval$0$i85 = $conv23$i;
      break;
     } else {
      $$lobit21$i = $0 >>> 31;
      $14 = $0;$retval$0$i85 = $$lobit21$i;
      break;
     }
    } else {
     $7 = HEAP32[100017]|0;
     $sub$i = (($sub) - ($7))|0;
     $8 = HEAP32[100018]|0;
     $sub27$i = (($y1$0) - ($8))|0;
     $xor$i = $sub$i ^ $1;
     $xor30$i = $xor$i ^ $0;
     $xor31$i = $xor30$i ^ $sub27$i;
     $tobool32$i = ($xor31$i|0)<(0);
     if ($tobool32$i) {
      $xor35$lobit$i = $xor$i >>> 31;
      $14 = $0;$retval$0$i85 = $xor35$lobit$i;
      break;
     } else {
      $shr$i = $1 >> 8;
      $shr42$i = $sub$i >> 8;
      $call$i = (_FixedMul($shr$i,$shr42$i)|0);
      $shr43$i = $sub27$i >> 8;
      $9 = HEAP32[100019]|0;
      $shr45$i = $9 >> 8;
      $call46$i = (_FixedMul($shr43$i,$shr45$i)|0);
      $cmp47$i = ($call46$i|0)>=($call$i|0);
      $$22$i = $cmp47$i&1;
      $$pre = HEAP32[100019]|0;
      $tobool$i28 = ($$pre|0)==(0);
      if ($tobool$i28) {
       $retval$0$i90 = $$22$i;
       label = 12;
       break L1;
      } else {
       $14 = $$pre;$retval$0$i85 = $$22$i;
       break;
      }
     }
    }
   } while(0);
   $12 = HEAP32[100020]|0;
   $tobool11$i36 = ($12|0)==(0);
   if ($tobool11$i36) {
    $13 = HEAP32[100018]|0;
    $cmp14$i38 = ($13|0)<($y2$0|0);
    if ($cmp14$i38) {
     $cmp22$i42 = ($14|0)>(0);
     $conv23$i43 = $cmp22$i42&1;
     $retval$0$i63 = $conv23$i43;$retval$0$i84 = $retval$0$i85;
     break;
    } else {
     $$lobit21$i40 = $14 >>> 31;
     $retval$0$i63 = $$lobit21$i40;$retval$0$i84 = $retval$0$i85;
     break;
    }
   } else {
    $15 = HEAP32[100017]|0;
    $sub$i45 = (($x2$0) - ($15))|0;
    $16 = HEAP32[100018]|0;
    $sub27$i46 = (($y2$0) - ($16))|0;
    $xor$i47 = $sub$i45 ^ $12;
    $xor30$i48 = $xor$i47 ^ $14;
    $xor31$i49 = $xor30$i48 ^ $sub27$i46;
    $tobool32$i50 = ($xor31$i49|0)<(0);
    if ($tobool32$i50) {
     $xor35$lobit$i52 = $xor$i47 >>> 31;
     $retval$0$i63 = $xor35$lobit$i52;$retval$0$i84 = $retval$0$i85;
     break;
    } else {
     $shr$i54 = $12 >> 8;
     $shr42$i55 = $sub$i45 >> 8;
     $call$i56 = (_FixedMul($shr$i54,$shr42$i55)|0);
     $shr43$i57 = $sub27$i46 >> 8;
     $17 = HEAP32[100019]|0;
     $shr45$i58 = $17 >> 8;
     $call46$i59 = (_FixedMul($shr43$i57,$shr45$i58)|0);
     $cmp47$i60 = ($call46$i59|0)>=($call$i56|0);
     $$22$i61 = $cmp47$i60&1;
     $retval$0$i63 = $$22$i61;$retval$0$i84 = $retval$0$i85;
     break;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 12) {
   $10 = HEAP32[100017]|0;
   $cmp$i29 = ($10|0)<($x2$0|0);
   $11 = HEAP32[100020]|0;
   if ($cmp$i29) {
    $$lobit$i34 = $11 >>> 31;
    $retval$0$i63 = $$lobit$i34;$retval$0$i84 = $retval$0$i90;
    break;
   } else {
    $cmp5$i31 = ($11|0)>(0);
    $conv$i32 = $cmp5$i31&1;
    $retval$0$i63 = $conv$i32;$retval$0$i84 = $retval$0$i90;
    break;
   }
  }
 } while(0);
 $cmp22 = ($retval$0$i84|0)==($retval$0$i63|0);
 if ($cmp22) {
  return 1;
 }
 $sub28 = (($x2$0) - ($sub))|0;
 $sub29 = (($y2$0) - ($y1$0))|0;
 $shr$i65 = $sub29 >> 8;
 $18 = HEAP32[100019]|0;
 $call$i66 = (_FixedMul($shr$i65,$18)|0);
 $shr2$i = $sub28 >> 8;
 $19 = HEAP32[100020]|0;
 $call4$i = (_FixedMul($shr2$i,$19)|0);
 $sub$i67 = (($call$i66) - ($call4$i))|0;
 $cmp$i68 = ($sub$i67|0)==(0);
 if ($cmp$i68) {
  $retval$0$i7081 = 0;
 } else {
  $20 = HEAP32[100017]|0;
  $sub6$i = (($sub) - ($20))|0;
  $shr7$i = $sub6$i >> 8;
  $call9$i = (_FixedMul($shr7$i,$sub29)|0);
  $21 = HEAP32[100018]|0;
  $sub11$i = (($21) - ($y1$0))|0;
  $shr12$i = $sub11$i >> 8;
  $call14$i = (_FixedMul($shr12$i,$sub28)|0);
  $add$i = (($call14$i) + ($call9$i))|0;
  $call15$i = (_FixedDiv($add$i,$sub$i67)|0);
  $cmp31 = ($call15$i|0)<(0);
  if ($cmp31) {
   return 1;
  } else {
   $retval$0$i7081 = $call15$i;
  }
 }
 $22 = HEAP32[99448]|0;
 HEAP32[$22>>2] = $retval$0$i7081;
 $isaline = ((($22)) + 4|0);
 HEAP32[$isaline>>2] = 0;
 $thing36 = ((($22)) + 8|0);
 HEAP32[$thing36>>2] = $thing;
 $sub$ptr$lhs$cast = $22;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - (186368))|0;
 $cmp$i71 = ($sub$ptr$sub|0)<(1548);
 if ($cmp$i71) {
  $25 = $22;
 } else {
  $mul$i = (($sub$ptr$sub) + -1548)|0;
  _InterceptsMemoryOverrun($mul$i,$retval$0$i7081);
  $add$i72 = (($sub$ptr$sub) + -1544)|0;
  $23 = HEAP32[$isaline>>2]|0;
  _InterceptsMemoryOverrun($add$i72,$23);
  $add2$i = (($sub$ptr$sub) + -1540)|0;
  $24 = HEAP32[$thing36>>2]|0;
  _InterceptsMemoryOverrun($add2$i,$24);
  $$pre82 = HEAP32[99448]|0;
  $25 = $$pre82;
 }
 $incdec$ptr = ((($25)) + 12|0);
 HEAP32[99448] = $incdec$ptr;
 return 1;
}
function _P_PathTraverse($x1,$y1,$x2,$y2,$flags,$trav) {
 $x1 = $x1|0;
 $y1 = $y1|0;
 $x2 = $x2|0;
 $y2 = $y2|0;
 $flags = $flags|0;
 $trav = $trav|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0, $add$i86 = 0, $add$i86$us = 0;
 var $add$ptr$i = 0, $add$ptr6$i = 0, $add38 = 0, $add6 = 0, $add62 = 0, $add86 = 0, $add86$us = 0, $add87 = 0, $add87$us = 0, $add92 = 0, $add92$us = 0, $add93 = 0, $add93$us = 0, $and = 0, $and1 = 0, $and20 = 0, $and28 = 0, $and3 = 0, $and42 = 0, $and52 = 0;
 var $and64 = 0, $and71 = 0, $arrayidx$i = 0, $arrayidx$i87 = 0, $arrayidx$i87$us = 0, $bnext$i = 0, $bnext$i$us = 0, $call$i = 0, $call$i91 = 0, $call$i91$us = 0, $call$i98 = 0, $call24 = 0, $call32 = 0, $call37 = 0, $call47 = 0, $call56 = 0, $call61 = 0, $cmp = 0, $cmp$i = 0, $cmp1$i = 0;
 var $cmp10$i = 0, $cmp12$i = 0, $cmp12$i114 = 0, $cmp17 = 0, $cmp25 = 0, $cmp3$i = 0, $cmp3$i81 = 0, $cmp3$i81$us = 0, $cmp3$i97 = 0, $cmp39 = 0, $cmp4 = 0, $cmp49 = 0, $cmp5$i = 0, $cmp5$i82 = 0, $cmp5$i82$us = 0, $cmp63 = 0, $cmp63$us = 0, $cmp79 = 0, $cmp79$us = 0, $cmp8$i = 0;
 var $cmp80 = 0, $cmp80$us = 0, $cmp813$i = 0, $cmp84 = 0, $cmp84$us = 0, $cmp90 = 0, $cmp90$us = 0, $conv$i = 0, $conv7$i = 0, $count$0124 = 0, $count$0124$us = 0, $dec20$i116 = 0, $dec20$i116$in = 0, $dist$013$i = 0, $in$019$i115 = 0, $in$115$i = 0, $inc = 0, $inc96 = 0, $inc96$us = 0, $incdec$ptr$i = 0;
 var $incdec$ptr$i95 = 0, $ispos = 0, $ispos75 = 0, $ispos77 = 0, $ispos79 = 0, $list$014$i = 0, $mapx$0122 = 0, $mapx$0122$us = 0, $mapx$1 = 0, $mapx$1$us = 0, $mapxstep$0 = 0, $mapy$0123 = 0, $mapy$0123$us = 0, $mapy$1 = 0, $mapy$1$us = 0, $mapystep$0 = 0, $mobj$0$i = 0, $mobj$0$i$us = 0, $mobj$010$i = 0, $mobj$010$i$us = 0;
 var $mobj$08$i = 0, $mobj$08$i$us = 0, $mul$i = 0, $mul$i85 = 0, $mul$i85$us = 0, $neg = 0, $neg76 = 0, $neg78 = 0, $neg80 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i83 = 0, $or$cond$i83$us = 0, $or$cond$us = 0, $or$cond108 = 0, $or$cond108$us = 0, $partial$0 = 0, $partial$1 = 0, $retval$0 = 0, $scan$014$i = 0;
 var $shr = 0, $shr12 = 0, $shr15 = 0, $shr16 = 0, $shr36 = 0, $shr60 = 0, $shr83 = 0, $shr83$us = 0, $shr89 = 0, $shr89$us = 0, $spec$select = 0, $spec$select$i = 0, $spec$select109 = 0, $spec$select109$us = 0, $spec$select11$i = 0, $spec$select110 = 0, $spec$select110$us = 0, $sub = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0;
 var $sub10 = 0, $sub11 = 0, $sub13 = 0, $sub14 = 0, $sub2 = 0, $sub21 = 0, $sub22 = 0, $sub23 = 0, $sub29 = 0, $sub30 = 0, $sub43 = 0, $sub44 = 0, $sub45 = 0, $sub53 = 0, $sub54 = 0, $sub8 = 0, $sub9 = 0, $tobool = 0, $tobool$i = 0, $tobool$i100 = 0;
 var $tobool$i90 = 0, $tobool$i90$us = 0, $tobool6$i = 0, $tobool6$i$us = 0, $tobool6$i99 = 0, $tobool72 = 0, $tobool9$i = 0, $tobool9$i$us = 0, $validcount$i = 0, $xintercept$0120 = 0, $xintercept$0120$us = 0, $xintercept$1 = 0, $xintercept$1$us = 0, $xstep$0 = 0, $y1$addr$0 = 0, $yintercept$0121 = 0, $yintercept$0121$us = 0, $yintercept$1 = 0, $yintercept$1$us = 0, $ystep$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $and = $flags & 4;
 HEAP32[99447] = $and;
 $0 = HEAP32[32309]|0;
 $inc = (($0) + 1)|0;
 HEAP32[32309] = $inc;
 HEAP32[99448] = 186368;
 $1 = HEAP32[99512]|0;
 $sub = (($x1) - ($1))|0;
 $and1 = $sub & 8388607;
 $cmp = ($and1|0)==(0);
 $add = (($x1) + 65536)|0;
 $spec$select = $cmp ? $add : $x1;
 $2 = HEAP32[99513]|0;
 $sub2 = (($y1) - ($2))|0;
 $and3 = $sub2 & 8388607;
 $cmp4 = ($and3|0)==(0);
 $add6 = (($y1) + 65536)|0;
 $y1$addr$0 = $cmp4 ? $add6 : $y1;
 HEAP32[100017] = $spec$select;
 HEAP32[100018] = $y1$addr$0;
 $sub8 = (($x2) - ($spec$select))|0;
 HEAP32[100019] = $sub8;
 $sub9 = (($y2) - ($y1$addr$0))|0;
 HEAP32[100020] = $sub9;
 $sub10 = (($spec$select) - ($1))|0;
 $sub11 = (($y1$addr$0) - ($2))|0;
 $shr = $sub10 >> 23;
 $shr12 = $sub11 >> 23;
 $sub13 = (($x2) - ($1))|0;
 $sub14 = (($y2) - ($2))|0;
 $shr15 = $sub13 >> 23;
 $shr16 = $sub14 >> 23;
 $cmp17 = ($shr15|0)>($shr|0);
 if ($cmp17) {
  $3 = $sub10 >>> 7;
  $and20 = $3 & 65535;
  $sub21 = (65536 - ($and20))|0;
  $sub22 = (($sub14) - ($sub11))|0;
  $sub23 = (($sub13) - ($sub10))|0;
  $ispos79 = ($sub23|0)>(-1);
  $neg80 = (0 - ($sub23))|0;
  $4 = $ispos79 ? $sub23 : $neg80;
  $call24 = (_FixedDiv($sub22,$4)|0);
  $mapxstep$0 = 1;$partial$0 = $sub21;$ystep$0 = $call24;
 } else {
  $cmp25 = ($shr15|0)<($shr|0);
  $sub30 = (($sub13) - ($sub10))|0;
  if ($cmp25) {
   $ispos77 = ($sub30|0)>(-1);
   $neg78 = (0 - ($sub30))|0;
   $5 = $ispos77 ? $sub30 : $neg78;
   $sub29 = (($sub14) - ($sub11))|0;
   $6 = $sub10 >>> 7;
   $and28 = $6 & 65535;
   $call32 = (_FixedDiv($sub29,$5)|0);
   $mapxstep$0 = -1;$partial$0 = $and28;$ystep$0 = $call32;
  } else {
   $mapxstep$0 = 0;$partial$0 = 65536;$ystep$0 = 16777216;
  }
 }
 $shr36 = $sub11 >> 7;
 $call37 = (_FixedMul($partial$0,$ystep$0)|0);
 $add38 = (($call37) + ($shr36))|0;
 $cmp39 = ($shr16|0)>($shr12|0);
 if ($cmp39) {
  $and42 = $shr36 & 65535;
  $sub43 = (65536 - ($and42))|0;
  $sub44 = (($sub13) - ($sub10))|0;
  $sub45 = (($sub14) - ($sub11))|0;
  $ispos75 = ($sub45|0)>(-1);
  $neg76 = (0 - ($sub45))|0;
  $7 = $ispos75 ? $sub45 : $neg76;
  $call47 = (_FixedDiv($sub44,$7)|0);
  $mapystep$0 = 1;$partial$1 = $sub43;$xstep$0 = $call47;
 } else {
  $cmp49 = ($shr16|0)<($shr12|0);
  $sub54 = (($sub14) - ($sub11))|0;
  if ($cmp49) {
   $ispos = ($sub54|0)>(-1);
   $neg = (0 - ($sub54))|0;
   $8 = $ispos ? $sub54 : $neg;
   $sub53 = (($sub13) - ($sub10))|0;
   $and52 = $shr36 & 65535;
   $call56 = (_FixedDiv($sub53,$8)|0);
   $mapystep$0 = -1;$partial$1 = $and52;$xstep$0 = $call56;
  } else {
   $mapystep$0 = 0;$partial$1 = 65536;$xstep$0 = 16777216;
  }
 }
 $shr60 = $sub10 >> 7;
 $call61 = (_FixedMul($partial$1,$xstep$0)|0);
 $add62 = (($call61) + ($shr60))|0;
 $and64 = $flags & 1;
 $tobool = ($and64|0)==(0);
 $and71 = $flags & 2;
 $tobool72 = ($and71|0)==(0);
 L11: do {
  if ($tobool) {
   $count$0124$us = 0;$mapx$0122$us = $shr;$mapy$0123$us = $shr12;$xintercept$0120$us = $add62;$yintercept$0121$us = $add38;
   L13: while(1) {
    $9 = $mapy$0123$us | $mapx$0122$us;
    $10 = ($9|0)<(0);
    $or$cond108$us = $tobool72 | $10;
    if (!($or$cond108$us)) {
     $11 = HEAP32[99514]|0;
     $cmp3$i81$us = ($11|0)>($mapx$0122$us|0);
     $12 = HEAP32[99515]|0;
     $cmp5$i82$us = ($12|0)>($mapy$0123$us|0);
     $or$cond$i83$us = $cmp3$i81$us & $cmp5$i82$us;
     if ($or$cond$i83$us) {
      $13 = HEAP32[99516]|0;
      $mul$i85$us = Math_imul($11, $mapy$0123$us)|0;
      $add$i86$us = (($mul$i85$us) + ($mapx$0122$us))|0;
      $arrayidx$i87$us = (($13) + ($add$i86$us<<2)|0);
      $mobj$08$i$us = HEAP32[$arrayidx$i87$us>>2]|0;
      $tobool9$i$us = ($mobj$08$i$us|0)==(0|0);
      if (!($tobool9$i$us)) {
       $mobj$010$i$us = $mobj$08$i$us;
       while(1) {
        $call$i91$us = (_PIT_AddThingIntercepts($mobj$010$i$us)|0);
        $tobool6$i$us = ($call$i91$us|0)==(0);
        if ($tobool6$i$us) {
         $retval$0 = 0;
         break L13;
        }
        $bnext$i$us = ((($mobj$010$i$us)) + 44|0);
        $mobj$0$i$us = HEAP32[$bnext$i$us>>2]|0;
        $tobool$i90$us = ($mobj$0$i$us|0)==(0|0);
        if ($tobool$i90$us) {
         break;
        } else {
         $mobj$010$i$us = $mobj$0$i$us;
        }
       }
      }
     }
    }
    $cmp79$us = ($mapx$0122$us|0)==($shr15|0);
    $cmp80$us = ($mapy$0123$us|0)==($shr16|0);
    $or$cond$us = $cmp79$us & $cmp80$us;
    if ($or$cond$us) {
     break L11;
    }
    $shr83$us = $yintercept$0121$us >> 16;
    $cmp84$us = ($shr83$us|0)==($mapy$0123$us|0);
    if ($cmp84$us) {
     $add86$us = (($yintercept$0121$us) + ($ystep$0))|0;
     $add87$us = (($mapx$0122$us) + ($mapxstep$0))|0;
     $mapx$1$us = $add87$us;$mapy$1$us = $mapy$0123$us;$xintercept$1$us = $xintercept$0120$us;$yintercept$1$us = $add86$us;
    } else {
     $shr89$us = $xintercept$0120$us >> 16;
     $cmp90$us = ($shr89$us|0)==($mapx$0122$us|0);
     $add92$us = $cmp90$us ? $xstep$0 : 0;
     $spec$select109$us = (($add92$us) + ($xintercept$0120$us))|0;
     $add93$us = $cmp90$us ? $mapystep$0 : 0;
     $spec$select110$us = (($add93$us) + ($mapy$0123$us))|0;
     $mapx$1$us = $mapx$0122$us;$mapy$1$us = $spec$select110$us;$xintercept$1$us = $spec$select109$us;$yintercept$1$us = $yintercept$0121$us;
    }
    $inc96$us = (($count$0124$us) + 1)|0;
    $cmp63$us = ($inc96$us>>>0)<(64);
    if ($cmp63$us) {
     $count$0124$us = $inc96$us;$mapx$0122$us = $mapx$1$us;$mapy$0123$us = $mapy$1$us;$xintercept$0120$us = $xintercept$1$us;$yintercept$0121$us = $yintercept$1$us;
    } else {
     break L11;
    }
   }
   return ($retval$0|0);
  } else {
   $count$0124 = 0;$mapx$0122 = $shr;$mapy$0123 = $shr12;$xintercept$0120 = $add62;$yintercept$0121 = $add38;
   L30: while(1) {
    $14 = $mapy$0123 | $mapx$0122;
    $15 = ($14|0)<(0);
    if (!($15)) {
     $16 = HEAP32[99514]|0;
     $cmp3$i = ($16|0)>($mapx$0122|0);
     $17 = HEAP32[99515]|0;
     $cmp5$i = ($17|0)>($mapy$0123|0);
     $or$cond$i = $cmp3$i & $cmp5$i;
     if ($or$cond$i) {
      $mul$i = Math_imul($16, $mapy$0123)|0;
      $add$i = (($mul$i) + ($mapx$0122))|0;
      $18 = HEAP32[99511]|0;
      $add$ptr$i = (($18) + ($add$i<<1)|0);
      $19 = HEAP16[$add$ptr$i>>1]|0;
      $conv$i = $19 << 16 >> 16;
      $20 = HEAP32[99510]|0;
      $add$ptr6$i = (($20) + ($conv$i<<1)|0);
      $21 = HEAP16[$add$ptr6$i>>1]|0;
      $cmp813$i = ($21<<16>>16)==(-1);
      if (!($cmp813$i)) {
       $22 = $21;$list$014$i = $add$ptr6$i;
       while(1) {
        $conv7$i = $22 << 16 >> 16;
        $23 = HEAP32[99500]|0;
        $validcount$i = (((($23) + ($conv7$i<<6)|0)) + 56|0);
        $24 = HEAP32[$validcount$i>>2]|0;
        $25 = HEAP32[32309]|0;
        $cmp10$i = ($24|0)==($25|0);
        if (!($cmp10$i)) {
         $arrayidx$i = (($23) + ($conv7$i<<6)|0);
         HEAP32[$validcount$i>>2] = $25;
         $call$i = (_PIT_AddLineIntercepts($arrayidx$i)|0);
         $tobool$i = ($call$i|0)==(0);
         if ($tobool$i) {
          $retval$0 = 0;
          label = 50;
          break L30;
         }
        }
        $incdec$ptr$i = ((($list$014$i)) + 2|0);
        $26 = HEAP16[$incdec$ptr$i>>1]|0;
        $cmp8$i = ($26<<16>>16)==(-1);
        if ($cmp8$i) {
         break;
        } else {
         $22 = $26;$list$014$i = $incdec$ptr$i;
        }
       }
      }
     }
     $or$cond108 = $tobool72 | $15;
     if (!($or$cond108)) {
      $27 = HEAP32[99514]|0;
      $cmp3$i81 = ($27|0)>($mapx$0122|0);
      $28 = HEAP32[99515]|0;
      $cmp5$i82 = ($28|0)>($mapy$0123|0);
      $or$cond$i83 = $cmp3$i81 & $cmp5$i82;
      if ($or$cond$i83) {
       $29 = HEAP32[99516]|0;
       $mul$i85 = Math_imul($27, $mapy$0123)|0;
       $add$i86 = (($mul$i85) + ($mapx$0122))|0;
       $arrayidx$i87 = (($29) + ($add$i86<<2)|0);
       $mobj$08$i = HEAP32[$arrayidx$i87>>2]|0;
       $tobool9$i = ($mobj$08$i|0)==(0|0);
       if (!($tobool9$i)) {
        $mobj$010$i = $mobj$08$i;
        while(1) {
         $call$i91 = (_PIT_AddThingIntercepts($mobj$010$i)|0);
         $tobool6$i = ($call$i91|0)==(0);
         if ($tobool6$i) {
          $retval$0 = 0;
          label = 50;
          break L30;
         }
         $bnext$i = ((($mobj$010$i)) + 44|0);
         $mobj$0$i = HEAP32[$bnext$i>>2]|0;
         $tobool$i90 = ($mobj$0$i|0)==(0|0);
         if ($tobool$i90) {
          break;
         } else {
          $mobj$010$i = $mobj$0$i;
         }
        }
       }
      }
     }
    }
    $cmp79 = ($mapx$0122|0)==($shr15|0);
    $cmp80 = ($mapy$0123|0)==($shr16|0);
    $or$cond = $cmp79 & $cmp80;
    if ($or$cond) {
     break L11;
    }
    $shr83 = $yintercept$0121 >> 16;
    $cmp84 = ($shr83|0)==($mapy$0123|0);
    if ($cmp84) {
     $add86 = (($yintercept$0121) + ($ystep$0))|0;
     $add87 = (($mapx$0122) + ($mapxstep$0))|0;
     $mapx$1 = $add87;$mapy$1 = $mapy$0123;$xintercept$1 = $xintercept$0120;$yintercept$1 = $add86;
    } else {
     $shr89 = $xintercept$0120 >> 16;
     $cmp90 = ($shr89|0)==($mapx$0122|0);
     $add92 = $cmp90 ? $xstep$0 : 0;
     $spec$select109 = (($add92) + ($xintercept$0120))|0;
     $add93 = $cmp90 ? $mapystep$0 : 0;
     $spec$select110 = (($add93) + ($mapy$0123))|0;
     $mapx$1 = $mapx$0122;$mapy$1 = $spec$select110;$xintercept$1 = $spec$select109;$yintercept$1 = $yintercept$0121;
    }
    $inc96 = (($count$0124) + 1)|0;
    $cmp63 = ($inc96>>>0)<(64);
    if ($cmp63) {
     $count$0124 = $inc96;$mapx$0122 = $mapx$1;$mapy$0123 = $mapy$1;$xintercept$0120 = $xintercept$1;$yintercept$0121 = $yintercept$1;
    } else {
     break L11;
    }
   }
   if ((label|0) == 50) {
    return ($retval$0|0);
   }
  }
 } while(0);
 $30 = HEAP32[99448]|0;
 $sub$ptr$sub$i = (($30) - (186368))|0;
 $31 = ($sub$ptr$sub$i|0)==(0);
 if ($31) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $32 = $30;
 $cmp12$i114 = ($32>>>0)>(186368>>>0);
 if (!($cmp12$i114)) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 12)&-1;
 $34 = $32;$dec20$i116$in = $sub$ptr$div$i;$in$019$i115 = 0;
 while(1) {
  $dist$013$i = 2147483647;$in$115$i = $in$019$i115;$scan$014$i = 186368;
  while(1) {
   $33 = HEAP32[$scan$014$i>>2]|0;
   $cmp1$i = ($33|0)<($dist$013$i|0);
   $spec$select$i = $cmp1$i ? $33 : $dist$013$i;
   $spec$select11$i = $cmp1$i ? $scan$014$i : $in$115$i;
   $incdec$ptr$i95 = ((($scan$014$i)) + 12|0);
   $cmp$i = ($incdec$ptr$i95>>>0)<($34>>>0);
   if ($cmp$i) {
    $dist$013$i = $spec$select$i;$in$115$i = $spec$select11$i;$scan$014$i = $incdec$ptr$i95;
   } else {
    break;
   }
  }
  $dec20$i116 = (($dec20$i116$in) + -1)|0;
  $cmp3$i97 = ($spec$select$i|0)>(65536);
  if ($cmp3$i97) {
   $retval$0 = 1;
   label = 50;
   break;
  }
  $call$i98 = (FUNCTION_TABLE_ii[$trav & 255]($spec$select11$i)|0);
  $tobool6$i99 = ($call$i98|0)==(0);
  if ($tobool6$i99) {
   $retval$0 = 0;
   label = 50;
   break;
  }
  HEAP32[$spec$select11$i>>2] = 2147483647;
  $tobool$i100 = ($dec20$i116|0)==(0);
  if ($tobool$i100) {
   $retval$0 = 1;
   label = 50;
   break;
  }
  $$pre$i = HEAP32[99448]|0;
  $cmp12$i = ($$pre$i>>>0)>(186368>>>0);
  if ($cmp12$i) {
   $34 = $$pre$i;$dec20$i116$in = $dec20$i116;$in$019$i115 = $spec$select11$i;
  } else {
   $retval$0 = 1;
   label = 50;
   break;
  }
 }
 if ((label|0) == 50) {
  return ($retval$0|0);
 }
 return (0)|0;
}
function _P_SetMobjState($mobj,$state) {
 $mobj = $mobj|0;
 $state = $state|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $action = 0, $add$i = 0, $add12$i = 0, $and13$i = 0, $and9$i = 0, $arrayidx = 0;
 var $arrayidx$i = 0, $arrayidx8$i = 0, $cmp = 0, $cmp10$i = 0, $flags$i = 0, $frame = 0, $frame5 = 0, $nextstate = 0, $retval$0 = 0, $spawnpoint$i = 0, $sprite4 = 0, $state$addr$0 = 0, $state2 = 0, $tics = 0, $tics3 = 0, $tobool = 0, $tobool11 = 0, $type$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $state2 = ((($mobj)) + 100|0);
 $tics3 = ((($mobj)) + 96|0);
 $sprite4 = ((($mobj)) + 36|0);
 $frame5 = ((($mobj)) + 40|0);
 $state$addr$0 = $state;
 while(1) {
  $cmp = ($state$addr$0|0)==(0);
  if ($cmp) {
   break;
  }
  $arrayidx = (3488 + (($state$addr$0*28)|0)|0);
  HEAP32[$state2>>2] = $arrayidx;
  $tics = (((3488 + (($state$addr$0*28)|0)|0)) + 8|0);
  $7 = HEAP32[$tics>>2]|0;
  HEAP32[$tics3>>2] = $7;
  $8 = HEAP32[$arrayidx>>2]|0;
  HEAP32[$sprite4>>2] = $8;
  $frame = (((3488 + (($state$addr$0*28)|0)|0)) + 4|0);
  $9 = HEAP32[$frame>>2]|0;
  HEAP32[$frame5>>2] = $9;
  $action = (((3488 + (($state$addr$0*28)|0)|0)) + 12|0);
  $10 = HEAP32[$action>>2]|0;
  $tobool = ($10|0)==(0|0);
  if ($tobool) {
   $12 = $7;
  } else {
   FUNCTION_TABLE_vi[$10 & 255]($mobj);
   $$pre = HEAP32[$tics3>>2]|0;
   $12 = $$pre;
  }
  $nextstate = (((3488 + (($state$addr$0*28)|0)|0)) + 16|0);
  $11 = HEAP32[$nextstate>>2]|0;
  $tobool11 = ($12|0)==(0);
  if ($tobool11) {
   $state$addr$0 = $11;
  } else {
   $retval$0 = 1;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  return ($retval$0|0);
 }
 HEAP32[$state2>>2] = 0;
 $flags$i = ((($mobj)) + 104|0);
 $0 = HEAP32[$flags$i>>2]|0;
 $1 = $0 & 131073;
 $2 = ($1|0)==(1);
 L10: do {
  if ($2) {
   $type$i = ((($mobj)) + 88|0);
   $3 = HEAP32[$type$i>>2]|0;
   switch ($3|0) {
   case 58: case 56:  {
    break L10;
    break;
   }
   default: {
   }
   }
   $4 = HEAP32[99449]|0;
   $arrayidx$i = (188640 + (($4*10)|0)|0);
   $spawnpoint$i = ((($mobj)) + 140|0);
   ;HEAP16[$arrayidx$i>>1]=HEAP16[$spawnpoint$i>>1]|0;HEAP16[$arrayidx$i+2>>1]=HEAP16[$spawnpoint$i+2>>1]|0;HEAP16[$arrayidx$i+4>>1]=HEAP16[$spawnpoint$i+4>>1]|0;HEAP16[$arrayidx$i+6>>1]=HEAP16[$spawnpoint$i+6>>1]|0;HEAP16[$arrayidx$i+8>>1]=HEAP16[$spawnpoint$i+8>>1]|0;
   $5 = HEAP32[99557]|0;
   $arrayidx8$i = (189920 + ($4<<2)|0);
   HEAP32[$arrayidx8$i>>2] = $5;
   $add$i = (($4) + 1)|0;
   $and9$i = $add$i & 127;
   HEAP32[99449] = $and9$i;
   $6 = HEAP32[99450]|0;
   $cmp10$i = ($and9$i|0)==($6|0);
   if ($cmp10$i) {
    $add12$i = (($4) + 2)|0;
    $and13$i = $add12$i & 127;
    HEAP32[99450] = $and13$i;
   }
  }
 } while(0);
 _P_UnsetThingPosition($mobj);
 _S_StopSound($mobj);
 _P_RemoveThinker($mobj);
 $retval$0 = 0;
 return ($retval$0|0);
}
function _P_RemoveMobj($mobj) {
 $mobj = $mobj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $add12 = 0, $and13 = 0, $and9 = 0, $arrayidx = 0, $arrayidx8 = 0, $cmp10 = 0, $flags = 0, $spawnpoint = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $flags = ((($mobj)) + 104|0);
 $0 = HEAP32[$flags>>2]|0;
 $1 = $0 & 131073;
 $2 = ($1|0)==(1);
 L1: do {
  if ($2) {
   $type = ((($mobj)) + 88|0);
   $3 = HEAP32[$type>>2]|0;
   switch ($3|0) {
   case 58: case 56:  {
    break L1;
    break;
   }
   default: {
   }
   }
   $4 = HEAP32[99449]|0;
   $arrayidx = (188640 + (($4*10)|0)|0);
   $spawnpoint = ((($mobj)) + 140|0);
   ;HEAP16[$arrayidx>>1]=HEAP16[$spawnpoint>>1]|0;HEAP16[$arrayidx+2>>1]=HEAP16[$spawnpoint+2>>1]|0;HEAP16[$arrayidx+4>>1]=HEAP16[$spawnpoint+4>>1]|0;HEAP16[$arrayidx+6>>1]=HEAP16[$spawnpoint+6>>1]|0;HEAP16[$arrayidx+8>>1]=HEAP16[$spawnpoint+8>>1]|0;
   $5 = HEAP32[99557]|0;
   $arrayidx8 = (189920 + ($4<<2)|0);
   HEAP32[$arrayidx8>>2] = $5;
   $add = (($4) + 1)|0;
   $and9 = $add & 127;
   HEAP32[99449] = $and9;
   $6 = HEAP32[99450]|0;
   $cmp10 = ($and9|0)==($6|0);
   if ($cmp10) {
    $add12 = (($4) + 2)|0;
    $and13 = $add12 & 127;
    HEAP32[99450] = $and13;
   }
  }
 } while(0);
 _P_UnsetThingPosition($mobj);
 _S_StopSound($mobj);
 _P_RemoveThinker($mobj);
 return;
}
function _P_XYMovement($mo) {
 $mo = $mo|0;
 var $$off = 0, $$off80 = 0, $$off81 = 0, $$off82 = 0, $$pre = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0;
 var $add12$i = 0, $add36 = 0, $add42 = 0, $and = 0, $and$i = 0, $and13$i = 0, $and4$i = 0, $and5 = 0, $and52 = 0, $and74 = 0, $and81 = 0, $and9$i = 0, $and90 = 0, $arrayidx$i = 0, $arrayidx8$i = 0, $backsector = 0, $call1$i = 0, $call156 = 0, $call159 = 0, $call44 = 0;
 var $ceilingpic = 0, $cheats = 0, $cmp = 0, $cmp10$i = 0, $cmp110 = 0, $cmp135 = 0, $cmp14 = 0, $cmp140 = 0, $cmp146 = 0, $cmp20 = 0, $cmp25 = 0, $cmp32 = 0, $cmp33 = 0, $cmp60 = 0, $cmp85 = 0, $conv = 0, $deathsound$i = 0, $deathstate$i = 0, $div = 0, $div$pn = 0;
 var $div35 = 0, $flags = 0, $flags51 = 0, $floorz = 0, $forwardmove = 0, $info = 0, $info$i = 0, $momx = 0, $momy = 0, $momy19 = 0, $momz = 0, $momz$i = 0, $or$cond = 0, $player9 = 0, $player975 = 0, $player977 = 0, $ptryx$0 = 0, $ptryy$0 = 0, $shr = 0, $shr37 = 0;
 var $sidemove = 0, $spawnpoint$i = 0, $spawnstate = 0, $spec$select$i = 0, $state = 0, $storemerge = 0, $sub = 0, $sub$i = 0, $sub$ptr$div = 0, $sub$ptr$sub = 0, $subsector = 0, $tics$i = 0, $tobool = 0, $tobool$i = 0, $tobool1 = 0, $tobool2 = 0, $tobool45 = 0, $tobool48 = 0, $tobool53 = 0, $tobool55 = 0;
 var $tobool57 = 0, $tobool72 = 0, $tobool75 = 0, $tobool82 = 0, $tobool91 = 0, $type$i73 = 0, $x = 0, $xmove$0 = 0, $xmove$1 = 0, $y = 0, $ymove$0 = 0, $ymove$1 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $momx = ((($mo)) + 72|0);
 $0 = HEAP32[$momx>>2]|0;
 $tobool = ($0|0)==(0);
 do {
  if ($tobool) {
   $momy = ((($mo)) + 76|0);
   $1 = HEAP32[$momy>>2]|0;
   $tobool1 = ($1|0)==(0);
   if (!($tobool1)) {
    $player975 = ((($mo)) + 132|0);
    $2 = HEAP32[$player975>>2]|0;
    $32 = $2;$51 = 0;$player977 = $player975;
    break;
   }
   $flags = ((($mo)) + 104|0);
   $3 = HEAP32[$flags>>2]|0;
   $and = $3 & 16777216;
   $tobool2 = ($and|0)==(0);
   if ($tobool2) {
    return;
   }
   $and5 = $3 & -16777217;
   HEAP32[$flags>>2] = $and5;
   $momz = ((($mo)) + 80|0);
   HEAP32[$momz>>2] = 0;
   HEAP32[$momy>>2] = 0;
   HEAP32[$momx>>2] = 0;
   $info = ((($mo)) + 92|0);
   $4 = HEAP32[$info>>2]|0;
   $spawnstate = ((($4)) + 4|0);
   $5 = HEAP32[$spawnstate>>2]|0;
   (_P_SetMobjState($mo,$5)|0);
   return;
  } else {
   $player9 = ((($mo)) + 132|0);
   $6 = HEAP32[$player9>>2]|0;
   $cmp = ($0|0)>(1966080);
   if ($cmp) {
    HEAP32[$momx>>2] = 1966080;
    $32 = $6;$51 = 1966080;$player977 = $player9;
    break;
   }
   $cmp14 = ($0|0)<(-1966080);
   if ($cmp14) {
    HEAP32[$momx>>2] = -1966080;
    $32 = $6;$51 = -1966080;$player977 = $player9;
   } else {
    $32 = $6;$51 = $0;$player977 = $player9;
   }
  }
 } while(0);
 $momy19 = ((($mo)) + 76|0);
 $7 = HEAP32[$momy19>>2]|0;
 $cmp20 = ($7|0)>(1966080);
 if ($cmp20) {
  $$sink = 1966080;
  label = 12;
 } else {
  $cmp25 = ($7|0)<(-1966080);
  if ($cmp25) {
   $$sink = -1966080;
   label = 12;
  } else {
   $52 = $7;
  }
 }
 if ((label|0) == 12) {
  HEAP32[$momy19>>2] = $$sink;
  $52 = $$sink;
 }
 $x = ((($mo)) + 12|0);
 $y = ((($mo)) + 16|0);
 $flags51 = ((($mo)) + 104|0);
 $momz$i = ((($mo)) + 80|0);
 $type$i73 = ((($mo)) + 88|0);
 $tics$i = ((($mo)) + 96|0);
 $info$i = ((($mo)) + 92|0);
 $xmove$0 = $51;$ymove$0 = $52;
 L21: while(1) {
  $cmp32 = ($xmove$0|0)>(983040);
  $cmp33 = ($ymove$0|0)>(983040);
  $or$cond = $cmp32 | $cmp33;
  $8 = HEAP32[$x>>2]|0;
  if ($or$cond) {
   $div = (($xmove$0|0) / 2)&-1;
   $9 = HEAP32[$y>>2]|0;
   $div35 = (($ymove$0|0) / 2)&-1;
   $add36 = (($9) + ($div35))|0;
   $shr = $xmove$0 >> 1;
   $shr37 = $ymove$0 >> 1;
   $div$pn = $div;$ptryy$0 = $add36;$xmove$1 = $shr;$ymove$1 = $shr37;
  } else {
   $10 = HEAP32[$y>>2]|0;
   $add42 = (($10) + ($ymove$0))|0;
   $div$pn = $xmove$0;$ptryy$0 = $add42;$xmove$1 = 0;$ymove$1 = 0;
  }
  $ptryx$0 = (($div$pn) + ($8))|0;
  $call44 = (_P_TryMove($mo,$ptryx$0,$ptryy$0)|0);
  $tobool45 = ($call44|0)==(0);
  do {
   if ($tobool45) {
    $11 = HEAP32[$player977>>2]|0;
    $tobool48 = ($11|0)==(0|0);
    if (!($tobool48)) {
     _P_SlideMove($mo);
     break;
    }
    $12 = HEAP32[$flags51>>2]|0;
    $and52 = $12 & 65536;
    $tobool53 = ($and52|0)==(0);
    if ($tobool53) {
     HEAP32[$momy19>>2] = 0;
     HEAP32[$momx>>2] = 0;
     break;
    }
    $13 = HEAP32[99418]|0;
    $tobool55 = ($13|0)==(0|0);
    if (!($tobool55)) {
     $backsector = ((($13)) + 52|0);
     $14 = HEAP32[$backsector>>2]|0;
     $tobool57 = ($14|0)==(0|0);
     if (!($tobool57)) {
      $ceilingpic = ((($14)) + 10|0);
      $15 = HEAP16[$ceilingpic>>1]|0;
      $conv = $15 << 16 >> 16;
      $16 = HEAP32[99682]|0;
      $cmp60 = ($16|0)==($conv|0);
      if ($cmp60) {
       label = 24;
       break L21;
      }
     }
    }
    HEAP32[$momz$i>>2] = 0;
    HEAP32[$momy19>>2] = 0;
    HEAP32[$momx>>2] = 0;
    $23 = HEAP32[$type$i73>>2]|0;
    $deathstate$i = (((30576 + (($23*92)|0)|0)) + 48|0);
    $24 = HEAP32[$deathstate$i>>2]|0;
    (_P_SetMobjState($mo,$24)|0);
    $call1$i = (_P_Random()|0);
    $and$i = $call1$i & 3;
    $25 = HEAP32[$tics$i>>2]|0;
    $sub$i = (($25) - ($and$i))|0;
    $26 = ($sub$i|0)>(1);
    $spec$select$i = $26 ? $sub$i : 1;
    HEAP32[$tics$i>>2] = $spec$select$i;
    $27 = HEAP32[$flags51>>2]|0;
    $and4$i = $27 & -65537;
    HEAP32[$flags51>>2] = $and4$i;
    $28 = HEAP32[$info$i>>2]|0;
    $deathsound$i = ((($28)) + 56|0);
    $29 = HEAP32[$deathsound$i>>2]|0;
    $tobool$i = ($29|0)==(0);
    if (!($tobool$i)) {
     _S_StartSound($mo,$29);
    }
   }
  } while(0);
  $30 = $ymove$1 | $xmove$1;
  $31 = ($30|0)==(0);
  if ($31) {
   break;
  } else {
   $xmove$0 = $xmove$1;$ymove$0 = $ymove$1;
  }
 }
 if ((label|0) == 24) {
  $17 = $12 & 131073;
  $18 = ($17|0)==(1);
  L43: do {
   if ($18) {
    $19 = HEAP32[$type$i73>>2]|0;
    switch ($19|0) {
    case 58: case 56:  {
     break L43;
     break;
    }
    default: {
    }
    }
    $20 = HEAP32[99449]|0;
    $arrayidx$i = (188640 + (($20*10)|0)|0);
    $spawnpoint$i = ((($mo)) + 140|0);
    ;HEAP16[$arrayidx$i>>1]=HEAP16[$spawnpoint$i>>1]|0;HEAP16[$arrayidx$i+2>>1]=HEAP16[$spawnpoint$i+2>>1]|0;HEAP16[$arrayidx$i+4>>1]=HEAP16[$spawnpoint$i+4>>1]|0;HEAP16[$arrayidx$i+6>>1]=HEAP16[$spawnpoint$i+6>>1]|0;HEAP16[$arrayidx$i+8>>1]=HEAP16[$spawnpoint$i+8>>1]|0;
    $21 = HEAP32[99557]|0;
    $arrayidx8$i = (189920 + ($20<<2)|0);
    HEAP32[$arrayidx8$i>>2] = $21;
    $add$i = (($20) + 1)|0;
    $and9$i = $add$i & 127;
    HEAP32[99449] = $and9$i;
    $22 = HEAP32[99450]|0;
    $cmp10$i = ($and9$i|0)==($22|0);
    if ($cmp10$i) {
     $add12$i = (($20) + 2)|0;
     $and13$i = $add12$i & 127;
     HEAP32[99450] = $and13$i;
    }
   }
  } while(0);
  _P_UnsetThingPosition($mo);
  _S_StopSound($mo);
  _P_RemoveThinker($mo);
  return;
 }
 $tobool72 = ($32|0)!=(0|0);
 if ($tobool72) {
  $cheats = ((($32)) + 204|0);
  $33 = HEAP32[$cheats>>2]|0;
  $and74 = $33 & 4;
  $tobool75 = ($and74|0)==(0);
  if (!($tobool75)) {
   HEAP32[$momy19>>2] = 0;
   HEAP32[$momx>>2] = 0;
   return;
  }
 }
 $34 = HEAP32[$flags51>>2]|0;
 $and81 = $34 & 16842752;
 $tobool82 = ($and81|0)==(0);
 if (!($tobool82)) {
  return;
 }
 $z = ((($mo)) + 20|0);
 $35 = HEAP32[$z>>2]|0;
 $floorz = ((($mo)) + 56|0);
 $36 = HEAP32[$floorz>>2]|0;
 $cmp85 = ($35|0)>($36|0);
 if ($cmp85) {
  return;
 }
 $and90 = $34 & 1048576;
 $tobool91 = ($and90|0)==(0);
 $$pre = HEAP32[$momx>>2]|0;
 do {
  if (!($tobool91)) {
   $$off = (($$pre) + 16384)|0;
   $37 = ($$off>>>0)>(32768);
   if (!($37)) {
    $38 = HEAP32[$momy19>>2]|0;
    $$off80 = (($38) + 16384)|0;
    $39 = ($$off80>>>0)>(32768);
    if (!($39)) {
     break;
    }
   }
   $subsector = ((($mo)) + 52|0);
   $40 = HEAP32[$subsector>>2]|0;
   $41 = HEAP32[$40>>2]|0;
   $42 = HEAP32[$41>>2]|0;
   $cmp110 = ($36|0)==($42|0);
   if (!($cmp110)) {
    return;
   }
  }
 } while(0);
 $$off81 = (($$pre) + 4095)|0;
 $43 = ($$off81>>>0)<(8191);
 do {
  if ($43) {
   $44 = HEAP32[$momy19>>2]|0;
   $$off82 = (($44) + 4095)|0;
   $45 = ($$off82>>>0)<(8191);
   if ($45) {
    if ($tobool72) {
     $forwardmove = ((($32)) + 8|0);
     $46 = HEAP8[$forwardmove>>0]|0;
     $cmp135 = ($46<<24>>24)==(0);
     if (!($cmp135)) {
      label = 50;
      break;
     }
     $sidemove = ((($32)) + 9|0);
     $47 = HEAP8[$sidemove>>0]|0;
     $cmp140 = ($47<<24>>24)==(0);
     if (!($cmp140)) {
      label = 50;
      break;
     }
     $48 = HEAP32[$32>>2]|0;
     $state = ((($48)) + 100|0);
     $49 = HEAP32[$state>>2]|0;
     $sub$ptr$sub = (($49) - (3488))|0;
     $sub$ptr$div = (($sub$ptr$sub|0) / 28)&-1;
     $sub = (($sub$ptr$div) + -150)|0;
     $cmp146 = ($sub>>>0)<(4);
     if ($cmp146) {
      (_P_SetMobjState($48,149)|0);
     }
    }
    HEAP32[$momx>>2] = 0;
    $storemerge = 0;
   } else {
    label = 50;
   }
  } else {
   label = 50;
  }
 } while(0);
 if ((label|0) == 50) {
  $call156 = (_FixedMul($$pre,59392)|0);
  HEAP32[$momx>>2] = $call156;
  $50 = HEAP32[$momy19>>2]|0;
  $call159 = (_FixedMul($50,59392)|0);
  $storemerge = $call159;
 }
 HEAP32[$momy19>>2] = $storemerge;
 return;
}
function _P_ZMovement($mo) {
 $mo = $mo|0;
 var $$pr = 0, $$pre = 0, $$pre93 = 0, $$pre93$pre = 0, $$pre94 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add124 = 0;
 var $add31 = 0, $add47 = 0, $and = 0, $and$i = 0, $and$i82 = 0, $and108 = 0, $and139 = 0, $and4$i = 0, $and4$i87 = 0, $and60 = 0, $and90 = 0, $call = 0, $call1$i = 0, $call1$i81 = 0, $ceilingz = 0, $cmp = 0, $cmp112 = 0, $cmp125 = 0, $cmp129 = 0, $cmp34 = 0;
 var $cmp37 = 0, $cmp41 = 0, $cmp44 = 0, $cmp54 = 0, $cmp56 = 0, $cmp68 = 0, $cmp75 = 0, $deathsound$i = 0, $deathsound$i89 = 0, $deathstate$i = 0, $deathstate$i79 = 0, $deltaviewheight = 0, $deltaviewheight81 = 0, $flags = 0, $floorz = 0, $floorz53 = 0, $height = 0, $height123 = 0, $info$i = 0, $info$i88 = 0;
 var $momx$i = 0, $momx$i77 = 0, $momy$i = 0, $momy$i76 = 0, $momz = 0, $mul43 = 0, $or$cond = 0, $or$cond70 = 0, $or$cond71 = 0, $or$cond72 = 0, $player = 0, $shr = 0, $shr30 = 0, $shr79 = 0, $spec$select$i = 0, $spec$select$i85 = 0, $sub$i = 0, $sub$i84 = 0, $sub118 = 0, $sub136 = 0;
 var $sub143 = 0, $sub24 = 0, $sub27 = 0, $sub33 = 0, $sub4 = 0, $sub40 = 0, $sub64 = 0, $sub68 = 0, $sub7 = 0, $sub94 = 0, $target = 0, $tics$i = 0, $tics$i83 = 0, $tobool = 0, $tobool$i = 0, $tobool$i90 = 0, $tobool10 = 0, $tobool109 = 0, $tobool12 = 0, $tobool140 = 0;
 var $tobool61 = 0, $tobool72 = 0, $tobool91 = 0, $type$i = 0, $type$i78 = 0, $viewheight = 0, $x = 0, $x23 = 0, $y = 0, $y26 = 0, $z29 = 0, $z9$phi$trans$insert = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $player = ((($mo)) + 132|0);
 $0 = HEAP32[$player>>2]|0;
 $tobool = ($0|0)==(0|0);
 $z9$phi$trans$insert = ((($mo)) + 20|0);
 $$pre = HEAP32[$z9$phi$trans$insert>>2]|0;
 if (!($tobool)) {
  $floorz = ((($mo)) + 56|0);
  $1 = HEAP32[$floorz>>2]|0;
  $cmp = ($$pre|0)<($1|0);
  if ($cmp) {
   $viewheight = ((($0)) + 28|0);
   $2 = HEAP32[$viewheight>>2]|0;
   $sub68 = (($$pre) - ($1))|0;
   $sub4 = (($2) + ($sub68))|0;
   HEAP32[$viewheight>>2] = $sub4;
   $sub7 = (2686976 - ($sub4))|0;
   $shr = $sub7 >> 3;
   $deltaviewheight = ((($0)) + 32|0);
   HEAP32[$deltaviewheight>>2] = $shr;
  }
 }
 $momz = ((($mo)) + 80|0);
 $3 = HEAP32[$momz>>2]|0;
 $add = (($$pre) + ($3))|0;
 HEAP32[$z9$phi$trans$insert>>2] = $add;
 $flags = ((($mo)) + 104|0);
 $4 = HEAP32[$flags>>2]|0;
 $and = $4 & 16384;
 $tobool10 = ($and|0)==(0);
 do {
  if ($tobool10) {
   $19 = $add;
  } else {
   $target = ((($mo)) + 120|0);
   $5 = HEAP32[$target>>2]|0;
   $tobool12 = ($5|0)!=(0|0);
   $6 = $4 & 18874368;
   $7 = ($6|0)==(0);
   $8 = $7 & $tobool12;
   if ($8) {
    $x = ((($mo)) + 12|0);
    $9 = HEAP32[$x>>2]|0;
    $x23 = ((($5)) + 12|0);
    $10 = HEAP32[$x23>>2]|0;
    $sub24 = (($9) - ($10))|0;
    $y = ((($mo)) + 16|0);
    $11 = HEAP32[$y>>2]|0;
    $y26 = ((($5)) + 16|0);
    $12 = HEAP32[$y26>>2]|0;
    $sub27 = (($11) - ($12))|0;
    $call = (_P_AproxDistance($sub24,$sub27)|0);
    $13 = HEAP32[$target>>2]|0;
    $z29 = ((($13)) + 20|0);
    $14 = HEAP32[$z29>>2]|0;
    $height = ((($mo)) + 68|0);
    $15 = HEAP32[$height>>2]|0;
    $shr30 = $15 >> 1;
    $add31 = (($shr30) + ($14))|0;
    $16 = HEAP32[$z9$phi$trans$insert>>2]|0;
    $sub33 = (($add31) - ($16))|0;
    $cmp34 = ($sub33|0)<(0);
    $17 = Math_imul($sub33, -3)|0;
    $cmp37 = ($call|0)<($17|0);
    $or$cond70 = $cmp34 & $cmp37;
    if ($or$cond70) {
     $sub40 = (($16) + -262144)|0;
     HEAP32[$z9$phi$trans$insert>>2] = $sub40;
     $19 = $sub40;
     break;
    }
    $cmp41 = ($sub33|0)>(0);
    $mul43 = ($sub33*3)|0;
    $cmp44 = ($call|0)<($mul43|0);
    $or$cond71 = $cmp41 & $cmp44;
    if ($or$cond71) {
     $add47 = (($16) + 262144)|0;
     HEAP32[$z9$phi$trans$insert>>2] = $add47;
     $19 = $add47;
    } else {
     $19 = $16;
    }
   } else {
    $19 = $add;
   }
  }
 } while(0);
 $floorz53 = ((($mo)) + 56|0);
 $18 = HEAP32[$floorz53>>2]|0;
 $cmp54 = ($19|0)>($18|0);
 do {
  if ($cmp54) {
   $36 = HEAP32[$flags>>2]|0;
   $and108 = $36 & 512;
   $tobool109 = ($and108|0)==(0);
   if ($tobool109) {
    $37 = HEAP32[$momz>>2]|0;
    $cmp112 = ($37|0)==(0);
    if ($cmp112) {
     HEAP32[$momz>>2] = -131072;
     $39 = $19;$42 = $36;
     break;
    } else {
     $sub118 = (($37) + -65536)|0;
     HEAP32[$momz>>2] = $sub118;
     $39 = $19;$42 = $36;
     break;
    }
   } else {
    $39 = $19;$42 = $36;
   }
  } else {
   $20 = HEAP32[32141]|0;
   $cmp56 = ($20>>>0)>(5);
   if ($cmp56) {
    $21 = HEAP32[$flags>>2]|0;
    $and60 = $21 & 16777216;
    $tobool61 = ($and60|0)==(0);
    if ($tobool61) {
     label = 14;
    } else {
     $22 = HEAP32[$momz>>2]|0;
     $sub64 = (0 - ($22))|0;
     HEAP32[$momz>>2] = $sub64;
     $23 = $sub64;
    }
   } else {
    label = 14;
   }
   if ((label|0) == 14) {
    $$pr = HEAP32[$momz>>2]|0;
    $23 = $$pr;
   }
   $cmp68 = ($23|0)<(0);
   if ($cmp68) {
    $24 = HEAP32[$player>>2]|0;
    $tobool72 = ($24|0)!=(0|0);
    $cmp75 = ($23|0)<(-524288);
    $or$cond72 = $cmp75 & $tobool72;
    if ($or$cond72) {
     $deltaviewheight81 = ((($24)) + 32|0);
     $shr79 = $23 >> 3;
     HEAP32[$deltaviewheight81>>2] = $shr79;
     _S_StartSound($mo,34);
     $$pre93$pre = HEAP32[$floorz53>>2]|0;
     $$pre93 = $$pre93$pre;
    } else {
     $$pre93 = $18;
    }
    HEAP32[$momz>>2] = 0;
    $25 = $$pre93;$26 = 0;
   } else {
    $25 = $18;$26 = $23;
   }
   HEAP32[$z9$phi$trans$insert>>2] = $25;
   $$pre94 = HEAP32[$flags>>2]|0;
   $and90 = $$pre94 & 16777216;
   $tobool91 = ($and90|0)==(0);
   $or$cond = $cmp56 | $tobool91;
   if (!($or$cond)) {
    $sub94 = (0 - ($26))|0;
    HEAP32[$momz>>2] = $sub94;
   }
   $27 = $$pre94 & 69632;
   $28 = ($27|0)==(65536);
   if ($28) {
    HEAP32[$momz>>2] = 0;
    $momy$i = ((($mo)) + 76|0);
    HEAP32[$momy$i>>2] = 0;
    $momx$i = ((($mo)) + 72|0);
    HEAP32[$momx$i>>2] = 0;
    $type$i = ((($mo)) + 88|0);
    $29 = HEAP32[$type$i>>2]|0;
    $deathstate$i = (((30576 + (($29*92)|0)|0)) + 48|0);
    $30 = HEAP32[$deathstate$i>>2]|0;
    (_P_SetMobjState($mo,$30)|0);
    $call1$i = (_P_Random()|0);
    $and$i = $call1$i & 3;
    $tics$i = ((($mo)) + 96|0);
    $31 = HEAP32[$tics$i>>2]|0;
    $sub$i = (($31) - ($and$i))|0;
    $32 = ($sub$i|0)>(1);
    $spec$select$i = $32 ? $sub$i : 1;
    HEAP32[$tics$i>>2] = $spec$select$i;
    $33 = HEAP32[$flags>>2]|0;
    $and4$i = $33 & -65537;
    HEAP32[$flags>>2] = $and4$i;
    $info$i = ((($mo)) + 92|0);
    $34 = HEAP32[$info$i>>2]|0;
    $deathsound$i = ((($34)) + 56|0);
    $35 = HEAP32[$deathsound$i>>2]|0;
    $tobool$i = ($35|0)==(0);
    if ($tobool$i) {
     return;
    }
    _S_StartSound($mo,$35);
    return;
   } else {
    $39 = $25;$42 = $$pre94;
   }
  }
 } while(0);
 $height123 = ((($mo)) + 68|0);
 $38 = HEAP32[$height123>>2]|0;
 $add124 = (($38) + ($39))|0;
 $ceilingz = ((($mo)) + 60|0);
 $40 = HEAP32[$ceilingz>>2]|0;
 $cmp125 = ($add124|0)>($40|0);
 if (!($cmp125)) {
  return;
 }
 $41 = HEAP32[$momz>>2]|0;
 $cmp129 = ($41|0)>(0);
 if ($cmp129) {
  HEAP32[$momz>>2] = 0;
  $43 = 0;
 } else {
  $43 = $41;
 }
 $sub136 = (($40) - ($38))|0;
 HEAP32[$z9$phi$trans$insert>>2] = $sub136;
 $and139 = $42 & 16777216;
 $tobool140 = ($and139|0)==(0);
 if (!($tobool140)) {
  $sub143 = (0 - ($43))|0;
  HEAP32[$momz>>2] = $sub143;
 }
 $44 = $42 & 69632;
 $45 = ($44|0)==(65536);
 if (!($45)) {
  return;
 }
 HEAP32[$momz>>2] = 0;
 $momy$i76 = ((($mo)) + 76|0);
 HEAP32[$momy$i76>>2] = 0;
 $momx$i77 = ((($mo)) + 72|0);
 HEAP32[$momx$i77>>2] = 0;
 $type$i78 = ((($mo)) + 88|0);
 $46 = HEAP32[$type$i78>>2]|0;
 $deathstate$i79 = (((30576 + (($46*92)|0)|0)) + 48|0);
 $47 = HEAP32[$deathstate$i79>>2]|0;
 (_P_SetMobjState($mo,$47)|0);
 $call1$i81 = (_P_Random()|0);
 $and$i82 = $call1$i81 & 3;
 $tics$i83 = ((($mo)) + 96|0);
 $48 = HEAP32[$tics$i83>>2]|0;
 $sub$i84 = (($48) - ($and$i82))|0;
 $49 = ($sub$i84|0)>(1);
 $spec$select$i85 = $49 ? $sub$i84 : 1;
 HEAP32[$tics$i83>>2] = $spec$select$i85;
 $50 = HEAP32[$flags>>2]|0;
 $and4$i87 = $50 & -65537;
 HEAP32[$flags>>2] = $and4$i87;
 $info$i88 = ((($mo)) + 92|0);
 $51 = HEAP32[$info$i88>>2]|0;
 $deathsound$i89 = ((($51)) + 56|0);
 $52 = HEAP32[$deathsound$i89>>2]|0;
 $tobool$i90 = ($52|0)==(0);
 if ($tobool$i90) {
  return;
 }
 _S_StartSound($mo,$52);
 return;
}
function _P_NightmareRespawn($mobj) {
 $mobj = $mobj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add12$i = 0, $and = 0, $and13$i = 0, $and9$i = 0, $angle = 0, $angle21 = 0, $arrayidx$i = 0, $arrayidx8$i = 0, $call = 0, $call12 = 0, $call17 = 0, $call8 = 0, $call9 = 0;
 var $cmp10$i = 0, $conv29 = 0, $conv430 = 0, $div = 0, $flags = 0, $flags$i = 0, $flags26 = 0, $info = 0, $mul = 0, $options = 0, $or = 0, $reactiontime = 0, $shl = 0, $shl5 = 0, $spawnpoint = 0, $spawnpoint18 = 0, $subsector = 0, $tobool = 0, $tobool24 = 0, $type = 0;
 var $x6 = 0, $y3 = 0, $y7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $spawnpoint = ((($mobj)) + 140|0);
 $0 = HEAP16[$spawnpoint>>1]|0;
 $conv29 = $0&65535;
 $shl = $conv29 << 16;
 $y3 = ((($mobj)) + 142|0);
 $1 = HEAP16[$y3>>1]|0;
 $conv430 = $1&65535;
 $shl5 = $conv430 << 16;
 $call = (_P_CheckPosition($mobj,$shl,$shl5)|0);
 $tobool = ($call|0)==(0);
 if ($tobool) {
  return;
 }
 $x6 = ((($mobj)) + 12|0);
 $2 = HEAP32[$x6>>2]|0;
 $y7 = ((($mobj)) + 16|0);
 $3 = HEAP32[$y7>>2]|0;
 $subsector = ((($mobj)) + 52|0);
 $4 = HEAP32[$subsector>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $call8 = (_P_SpawnMobj($2,$3,$6,39)|0);
 _S_StartSound($call8,35);
 $call9 = (_R_PointInSubsector($shl,$shl5)|0);
 $7 = HEAP32[$call9>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $call12 = (_P_SpawnMobj($shl,$shl5,$8,39)|0);
 _S_StartSound($call12,35);
 $info = ((($mobj)) + 92|0);
 $9 = HEAP32[$info>>2]|0;
 $flags = ((($9)) + 84|0);
 $10 = HEAP32[$flags>>2]|0;
 $and = $10 >>> 8;
 $11 = $and & 1;
 $12 = (-2147483648 - ($11))|0;
 $type = ((($mobj)) + 88|0);
 $13 = HEAP32[$type>>2]|0;
 $call17 = (_P_SpawnMobj($shl,$shl5,$12,$13)|0);
 $spawnpoint18 = ((($call17)) + 140|0);
 ;HEAP32[$spawnpoint18>>2]=HEAP32[$spawnpoint>>2]|0;HEAP32[$spawnpoint18+4>>2]=HEAP32[$spawnpoint+4>>2]|0;HEAP16[$spawnpoint18+8>>1]=HEAP16[$spawnpoint+8>>1]|0;
 $angle = ((($mobj)) + 144|0);
 $14 = HEAPU8[$angle>>0]|(HEAPU8[$angle+1>>0]<<8);
 $15 = (($14<<16>>16) / 45)&-1;
 $div = $15 << 16 >> 16;
 $mul = $div << 29;
 $angle21 = ((($call17)) + 32|0);
 HEAP32[$angle21>>2] = $mul;
 $options = ((($mobj)) + 148|0);
 $16 = HEAPU8[$options>>0]|(HEAPU8[$options+1>>0]<<8);
 $17 = $16 & 8;
 $tobool24 = ($17<<16>>16)==(0);
 if (!($tobool24)) {
  $flags26 = ((($call17)) + 104|0);
  $18 = HEAP32[$flags26>>2]|0;
  $or = $18 | 32;
  HEAP32[$flags26>>2] = $or;
 }
 $reactiontime = ((($call17)) + 124|0);
 HEAP32[$reactiontime>>2] = 18;
 $flags$i = ((($mobj)) + 104|0);
 $19 = HEAP32[$flags$i>>2]|0;
 $20 = $19 & 131073;
 $21 = ($20|0)==(1);
 L7: do {
  if ($21) {
   $22 = HEAP32[$type>>2]|0;
   switch ($22|0) {
   case 58: case 56:  {
    break L7;
    break;
   }
   default: {
   }
   }
   $23 = HEAP32[99449]|0;
   $arrayidx$i = (188640 + (($23*10)|0)|0);
   ;HEAP16[$arrayidx$i>>1]=HEAP16[$spawnpoint>>1]|0;HEAP16[$arrayidx$i+2>>1]=HEAP16[$spawnpoint+2>>1]|0;HEAP16[$arrayidx$i+4>>1]=HEAP16[$spawnpoint+4>>1]|0;HEAP16[$arrayidx$i+6>>1]=HEAP16[$spawnpoint+6>>1]|0;HEAP16[$arrayidx$i+8>>1]=HEAP16[$spawnpoint+8>>1]|0;
   $24 = HEAP32[99557]|0;
   $arrayidx8$i = (189920 + ($23<<2)|0);
   HEAP32[$arrayidx8$i>>2] = $24;
   $add$i = (($23) + 1)|0;
   $and9$i = $add$i & 127;
   HEAP32[99449] = $and9$i;
   $25 = HEAP32[99450]|0;
   $cmp10$i = ($and9$i|0)==($25|0);
   if ($cmp10$i) {
    $add12$i = (($23) + 2)|0;
    $and13$i = $add12$i & 127;
    HEAP32[99450] = $and13$i;
   }
  }
 } while(0);
 _P_UnsetThingPosition($mobj);
 _S_StopSound($mobj);
 _P_RemoveThinker($mobj);
 return;
}
function _P_SpawnMobj($x,$y,$z,$type) {
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx10 = 0, $call = 0, $call9 = 0;
 var $ceilingheight = 0, $ceilingz = 0, $cmp = 0, $flags = 0, $flags7 = 0, $floorz = 0, $frame = 0, $frame13 = 0, $function = 0, $health = 0, $height = 0, $height24 = 0, $height6 = 0, $info2 = 0, $lastlook = 0, $radius = 0, $radius5 = 0, $reactiontime = 0, $reactiontime8 = 0, $rem = 0;
 var $spawnhealth = 0, $spawnstate = 0, $sprite12 = 0, $state = 0, $sub = 0, $sub$sink = 0, $subsector = 0, $switch$split2D = 0, $tics = 0, $tics11 = 0, $type1 = 0, $x3 = 0, $y4 = 0, $z25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_Z_Malloc(156,5,0)|0);
 _memset(($call|0),0,156)|0;
 $arrayidx = (30576 + (($type*92)|0)|0);
 $type1 = ((($call)) + 88|0);
 HEAP32[$type1>>2] = $type;
 $info2 = ((($call)) + 92|0);
 HEAP32[$info2>>2] = $arrayidx;
 $x3 = ((($call)) + 12|0);
 HEAP32[$x3>>2] = $x;
 $y4 = ((($call)) + 16|0);
 HEAP32[$y4>>2] = $y;
 $radius = (((30576 + (($type*92)|0)|0)) + 64|0);
 $0 = HEAP32[$radius>>2]|0;
 $radius5 = ((($call)) + 64|0);
 HEAP32[$radius5>>2] = $0;
 $height = (((30576 + (($type*92)|0)|0)) + 68|0);
 $1 = HEAP32[$height>>2]|0;
 $height6 = ((($call)) + 68|0);
 HEAP32[$height6>>2] = $1;
 $flags = (((30576 + (($type*92)|0)|0)) + 84|0);
 $2 = HEAP32[$flags>>2]|0;
 $flags7 = ((($call)) + 104|0);
 HEAP32[$flags7>>2] = $2;
 $spawnhealth = (((30576 + (($type*92)|0)|0)) + 8|0);
 $3 = HEAP32[$spawnhealth>>2]|0;
 $health = ((($call)) + 108|0);
 HEAP32[$health>>2] = $3;
 $4 = HEAP32[99086]|0;
 $cmp = ($4|0)==(4);
 if (!($cmp)) {
  $reactiontime8 = ((($call)) + 124|0);
  $reactiontime = (((30576 + (($type*92)|0)|0)) + 20|0);
  $5 = HEAP32[$reactiontime>>2]|0;
  HEAP32[$reactiontime8>>2] = $5;
 }
 $call9 = (_P_Random()|0);
 $rem = (($call9|0) % 4)&-1;
 $lastlook = ((($call)) + 136|0);
 HEAP32[$lastlook>>2] = $rem;
 $spawnstate = (((30576 + (($type*92)|0)|0)) + 4|0);
 $6 = HEAP32[$spawnstate>>2]|0;
 $arrayidx10 = (3488 + (($6*28)|0)|0);
 $state = ((($call)) + 100|0);
 HEAP32[$state>>2] = $arrayidx10;
 $tics = (((3488 + (($6*28)|0)|0)) + 8|0);
 $7 = HEAP32[$tics>>2]|0;
 $tics11 = ((($call)) + 96|0);
 HEAP32[$tics11>>2] = $7;
 $8 = HEAP32[$arrayidx10>>2]|0;
 $sprite12 = ((($call)) + 36|0);
 HEAP32[$sprite12>>2] = $8;
 $frame = (((3488 + (($6*28)|0)|0)) + 4|0);
 $9 = HEAP32[$frame>>2]|0;
 $frame13 = ((($call)) + 40|0);
 HEAP32[$frame13>>2] = $9;
 _P_SetThingPosition($call);
 $subsector = ((($call)) + 52|0);
 $10 = HEAP32[$subsector>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $floorz = ((($call)) + 56|0);
 HEAP32[$floorz>>2] = $12;
 $ceilingheight = ((($11)) + 4|0);
 $13 = HEAP32[$ceilingheight>>2]|0;
 $ceilingz = ((($call)) + 60|0);
 HEAP32[$ceilingz>>2] = $13;
 $switch$split2D = ($z|0)<(2147483647);
 L4: do {
  if ($switch$split2D) {
   switch ($z|0) {
   case -2147483648:  {
    $sub$sink = $12;
    break;
   }
   default: {
    break L4;
   }
   }
   $z25 = ((($call)) + 20|0);
   HEAP32[$z25>>2] = $sub$sink;
   $function = ((($call)) + 8|0);
   HEAP32[$function>>2] = 136;
   _P_AddThinker($call);
   return ($call|0);
  } else {
   switch ($z|0) {
   case 2147483647:  {
    break;
   }
   default: {
    break L4;
   }
   }
   $14 = HEAP32[$info2>>2]|0;
   $height24 = ((($14)) + 68|0);
   $15 = HEAP32[$height24>>2]|0;
   $sub = (($13) - ($15))|0;
   $sub$sink = $sub;
   $z25 = ((($call)) + 20|0);
   HEAP32[$z25>>2] = $sub$sink;
   $function = ((($call)) + 8|0);
   HEAP32[$function>>2] = 136;
   _P_AddThinker($call);
   return ($call|0);
  }
 } while(0);
 $sub$sink = $z;
 $z25 = ((($call)) + 20|0);
 HEAP32[$z25>>2] = $sub$sink;
 $function = ((($call)) + 8|0);
 HEAP32[$function>>2] = 136;
 _P_AddThinker($call);
 return ($call|0);
}
function _P_MobjThinker($mobj) {
 $mobj = $mobj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $acv = 0, $acv12 = 0, $and = 0, $and28 = 0, $and39 = 0;
 var $call43 = 0, $cmp = 0, $cmp13 = 0, $cmp17 = 0, $cmp36 = 0, $cmp44 = 0, $cmp6 = 0, $dec = 0, $flags = 0, $flags27 = 0, $floorz = 0, $inc = 0, $momx = 0, $momy = 0, $momz = 0, $movecount = 0, $nextstate = 0, $or$cond = 0, $state = 0, $tics = 0;
 var $tobool = 0, $tobool1 = 0, $tobool21 = 0, $tobool29 = 0, $tobool3 = 0, $tobool32 = 0, $tobool40 = 0, $tobool8 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $momx = ((($mobj)) + 72|0);
 $0 = HEAP32[$momx>>2]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  $momy = ((($mobj)) + 76|0);
  $1 = HEAP32[$momy>>2]|0;
  $tobool1 = ($1|0)==(0);
  if ($tobool1) {
   $flags = ((($mobj)) + 104|0);
   $2 = HEAP32[$flags>>2]|0;
   $and = $2 & 16777216;
   $tobool3 = ($and|0)==(0);
   if (!($tobool3)) {
    label = 4;
   }
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  _P_XYMovement($mobj);
  $acv = ((($mobj)) + 8|0);
  $3 = HEAP32[$acv>>2]|0;
  $cmp = ($3|0)==((-1)|0);
  if ($cmp) {
   return;
  }
 }
 $z = ((($mobj)) + 20|0);
 $4 = HEAP32[$z>>2]|0;
 $floorz = ((($mobj)) + 56|0);
 $5 = HEAP32[$floorz>>2]|0;
 $cmp6 = ($4|0)==($5|0);
 if ($cmp6) {
  $momz = ((($mobj)) + 80|0);
  $6 = HEAP32[$momz>>2]|0;
  $tobool8 = ($6|0)==(0);
  if (!($tobool8)) {
   label = 7;
  }
 } else {
  label = 7;
 }
 if ((label|0) == 7) {
  _P_ZMovement($mobj);
  $acv12 = ((($mobj)) + 8|0);
  $7 = HEAP32[$acv12>>2]|0;
  $cmp13 = ($7|0)==((-1)|0);
  if ($cmp13) {
   return;
  }
 }
 $tics = ((($mobj)) + 96|0);
 $8 = HEAP32[$tics>>2]|0;
 $cmp17 = ($8|0)==(-1);
 if (!($cmp17)) {
  $dec = (($8) + -1)|0;
  HEAP32[$tics>>2] = $dec;
  $tobool21 = ($dec|0)==(0);
  if ($tobool21) {
   $state = ((($mobj)) + 100|0);
   $9 = HEAP32[$state>>2]|0;
   $nextstate = ((($9)) + 16|0);
   $10 = HEAP32[$nextstate>>2]|0;
   (_P_SetMobjState($mobj,$10)|0);
   return;
  } else {
   return;
  }
 }
 $flags27 = ((($mobj)) + 104|0);
 $11 = HEAP32[$flags27>>2]|0;
 $and28 = $11 & 4194304;
 $tobool29 = ($and28|0)!=(0);
 $12 = HEAP32[99156]|0;
 $tobool32 = ($12|0)!=(0);
 $or$cond = $tobool29 & $tobool32;
 if (!($or$cond)) {
  return;
 }
 $movecount = ((($mobj)) + 116|0);
 $13 = HEAP32[$movecount>>2]|0;
 $inc = (($13) + 1)|0;
 HEAP32[$movecount>>2] = $inc;
 $cmp36 = ($13|0)<(419);
 if ($cmp36) {
  return;
 }
 $14 = HEAP32[99557]|0;
 $and39 = $14 & 31;
 $tobool40 = ($and39|0)==(0);
 if (!($tobool40)) {
  return;
 }
 $call43 = (_P_Random()|0);
 $cmp44 = ($call43|0)>(4);
 if ($cmp44) {
  return;
 }
 _P_NightmareRespawn($mobj);
 return;
}
function _P_RespawnSpecials() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0;
 var $and27 = 0, $angle = 0, $angle26 = 0, $arrayidx = 0, $arrayidx7 = 0, $call = 0, $call12 = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp17 = 0, $cmp4 = 0, $conv1023 = 0, $conv15 = 0, $conv22 = 0, $div = 0, $doomednum = 0, $flags = 0, $i$0$lcssa = 0, $i$024 = 0;
 var $inc = 0, $mul = 0, $shl = 0, $shl11 = 0, $spawnpoint = 0, $sub = 0, $type = 0, $y9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[99091]|0;
 $cmp = ($0|0)==(2);
 if (!($cmp)) {
  return;
 }
 $1 = HEAP32[99449]|0;
 $2 = HEAP32[99450]|0;
 $cmp1 = ($1|0)==($2|0);
 if ($cmp1) {
  return;
 }
 $3 = HEAP32[99557]|0;
 $arrayidx = (189920 + ($2<<2)|0);
 $4 = HEAP32[$arrayidx>>2]|0;
 $sub = (($3) - ($4))|0;
 $cmp4 = ($sub|0)<(1050);
 if ($cmp4) {
  return;
 }
 $arrayidx7 = (188640 + (($2*10)|0)|0);
 $5 = HEAP16[$arrayidx7>>1]|0;
 $conv22 = $5&65535;
 $shl = $conv22 << 16;
 $y9 = (((188640 + (($2*10)|0)|0)) + 2|0);
 $6 = HEAP16[$y9>>1]|0;
 $conv1023 = $6&65535;
 $shl11 = $conv1023 << 16;
 $call = (_R_PointInSubsector($shl,$shl11)|0);
 $7 = HEAP32[$call>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $call12 = (_P_SpawnMobj($shl,$shl11,$8,40)|0);
 _S_StartSound($call12,90);
 $type = (((188640 + (($2*10)|0)|0)) + 6|0);
 $9 = HEAP16[$type>>1]|0;
 $conv15 = $9 << 16 >> 16;
 $i$024 = 0;
 while(1) {
  $doomednum = (30576 + (($i$024*92)|0)|0);
  $10 = HEAP32[$doomednum>>2]|0;
  $cmp17 = ($10|0)==($conv15|0);
  if ($cmp17) {
   $i$0$lcssa = $i$024;
   break;
  }
  $inc = (($i$024) + 1)|0;
  $cmp13 = ($inc>>>0)<(137);
  if ($cmp13) {
   $i$024 = $inc;
  } else {
   $i$0$lcssa = 137;
   break;
  }
 }
 $flags = (((30576 + (($i$0$lcssa*92)|0)|0)) + 84|0);
 $11 = HEAP32[$flags>>2]|0;
 $and = $11 >>> 8;
 $12 = $and & 1;
 $13 = (-2147483648 - ($12))|0;
 $14 = (_P_SpawnMobj($shl,$shl11,$13,$i$0$lcssa)|0);
 $spawnpoint = ((($14)) + 140|0);
 dest=$spawnpoint; src=$arrayidx7; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $angle = (((188640 + (($2*10)|0)|0)) + 4|0);
 $15 = HEAP16[$angle>>1]|0;
 $16 = (($15<<16>>16) / 45)&-1;
 $div = $16 << 16 >> 16;
 $mul = $div << 29;
 $angle26 = ((($14)) + 32|0);
 HEAP32[$angle26>>2] = $mul;
 $17 = HEAP32[99450]|0;
 $add = (($17) + 1)|0;
 $and27 = $add & 127;
 HEAP32[99450] = $and27;
 return;
}
function _P_SpawnPlayer($mthing) {
 $mthing = $mthing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $angle = 0, $angle33 = 0, $arrayidx = 0, $arrayidx40 = 0, $arrayidx40$1 = 0, $arrayidx40$2 = 0, $arrayidx40$3 = 0;
 var $arrayidx40$4 = 0, $arrayidx40$5 = 0, $arrayidx9 = 0, $bonuscount = 0, $call = 0, $cmp = 0, $cmp10 = 0, $cmp24 = 0, $cmp45 = 0, $conv = 0, $conv1835 = 0, $conv2036 = 0, $conv2337 = 0, $conv43 = 0, $damagecount = 0, $div = 0, $extralight = 0, $fixedcolormap = 0, $flags = 0, $health = 0;
 var $health34 = 0, $message = 0, $mul = 0, $or = 0, $player = 0, $playerstate = 0, $refire = 0, $shl = 0, $shl21 = 0, $shl30 = 0, $sub = 0, $sub29 = 0, $sub44 = 0, $tobool = 0, $tobool36 = 0, $type = 0, $viewheight = 0, $y19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $type = ((($mthing)) + 6|0);
 $0 = HEAPU8[$type>>0]|(HEAPU8[$type+1>>0]<<8);
 $cmp = ($0<<16>>16)==(0);
 if ($cmp) {
  return;
 }
 $conv = $0 << 16 >> 16;
 $sub = (($conv) + -1)|0;
 $arrayidx = (181664 + ($sub<<2)|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $tobool = ($1|0)==(0);
 if ($tobool) {
  return;
 }
 $arrayidx9 = (181680 + (($sub*288)|0)|0);
 $playerstate = (((181680 + (($sub*288)|0)|0)) + 4|0);
 $2 = HEAP32[$playerstate>>2]|0;
 $cmp10 = ($2|0)==(2);
 if ($cmp10) {
  _G_PlayerReborn($sub);
 }
 $3 = HEAPU8[$mthing>>0]|(HEAPU8[$mthing+1>>0]<<8);
 $conv1835 = $3&65535;
 $shl = $conv1835 << 16;
 $y19 = ((($mthing)) + 2|0);
 $4 = HEAPU8[$y19>>0]|(HEAPU8[$y19+1>>0]<<8);
 $conv2036 = $4&65535;
 $shl21 = $conv2036 << 16;
 $call = (_P_SpawnMobj($shl,$shl21,-2147483648,0)|0);
 $5 = HEAPU8[$type>>0]|(HEAPU8[$type+1>>0]<<8);
 $cmp24 = ($5<<16>>16)>(1);
 $flags = ((($call)) + 104|0);
 if ($cmp24) {
  $conv2337 = $5&65535;
  $sub29 = $conv2337 << 26;
  $shl30 = (($sub29) + -67108864)|0;
  $6 = HEAP32[$flags>>2]|0;
  $or = $6 | $shl30;
  HEAP32[$flags>>2] = $or;
 }
 $angle = ((($mthing)) + 4|0);
 $7 = HEAPU8[$angle>>0]|(HEAPU8[$angle+1>>0]<<8);
 $8 = (($7<<16>>16) / 45)&-1;
 $div = $8 << 16 >> 16;
 $mul = $div << 29;
 $angle33 = ((($call)) + 32|0);
 HEAP32[$angle33>>2] = $mul;
 $player = ((($call)) + 132|0);
 HEAP32[$player>>2] = $arrayidx9;
 $health = (((181680 + (($sub*288)|0)|0)) + 40|0);
 $9 = HEAP32[$health>>2]|0;
 $health34 = ((($call)) + 108|0);
 HEAP32[$health34>>2] = $9;
 HEAP32[$arrayidx9>>2] = $call;
 HEAP32[$playerstate>>2] = 0;
 $refire = (((181680 + (($sub*288)|0)|0)) + 208|0);
 HEAP32[$refire>>2] = 0;
 $message = (((181680 + (($sub*288)|0)|0)) + 224|0);
 HEAP32[$message>>2] = 0;
 $damagecount = (((181680 + (($sub*288)|0)|0)) + 228|0);
 HEAP32[$damagecount>>2] = 0;
 $bonuscount = (((181680 + (($sub*288)|0)|0)) + 232|0);
 HEAP32[$bonuscount>>2] = 0;
 $extralight = (((181680 + (($sub*288)|0)|0)) + 240|0);
 HEAP32[$extralight>>2] = 0;
 $fixedcolormap = (((181680 + (($sub*288)|0)|0)) + 244|0);
 HEAP32[$fixedcolormap>>2] = 0;
 $viewheight = (((181680 + (($sub*288)|0)|0)) + 28|0);
 HEAP32[$viewheight>>2] = 2686976;
 _P_SetupPsprites($arrayidx9);
 $10 = HEAP32[99091]|0;
 $tobool36 = ($10|0)==(0);
 if (!($tobool36)) {
  $arrayidx40 = (((181680 + (($sub*288)|0)|0)) + 76|0);
  HEAP32[$arrayidx40>>2] = 1;
  $arrayidx40$1 = (((181680 + (($sub*288)|0)|0)) + 80|0);
  HEAP32[$arrayidx40$1>>2] = 1;
  $arrayidx40$2 = (((181680 + (($sub*288)|0)|0)) + 84|0);
  HEAP32[$arrayidx40$2>>2] = 1;
  $arrayidx40$3 = (((181680 + (($sub*288)|0)|0)) + 88|0);
  HEAP32[$arrayidx40$3>>2] = 1;
  $arrayidx40$4 = (((181680 + (($sub*288)|0)|0)) + 92|0);
  HEAP32[$arrayidx40$4>>2] = 1;
  $arrayidx40$5 = (((181680 + (($sub*288)|0)|0)) + 96|0);
  HEAP32[$arrayidx40$5>>2] = 1;
 }
 $11 = HEAPU8[$type>>0]|(HEAPU8[$type+1>>0]<<8);
 $conv43 = $11 << 16 >> 16;
 $sub44 = (($conv43) + -1)|0;
 $12 = HEAP32[99076]|0;
 $cmp45 = ($sub44|0)==($12|0);
 if (!($cmp45)) {
  return;
 }
 _ST_Start();
 _HU_Start();
 return;
}
function _P_SpawnMapThing($mthing) {
 $mthing = $mthing|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and100 = 0, $and106 = 0, $and39 = 0, $and65 = 0, $and75 = 0, $and87 = 0, $angle = 0;
 var $angle112 = 0, $arrayidx = 0, $bit$0 = 0, $call95 = 0, $cmp = 0, $cmp14 = 0, $cmp2 = 0, $cmp43 = 0, $cmp48 = 0, $cmp71 = 0, $cmp8 = 0, $cmp92 = 0, $conv = 0, $conv38 = 0, $conv58 = 0, $conv60 = 0, $conv8040 = 0, $conv8341 = 0, $div = 0, $doomednum = 0;
 var $flags = 0, $flags74 = 0, $flags86$phi$trans$insert = 0, $flags99 = 0, $i$046 = 0, $inc = 0, $inc103 = 0, $inc109 = 0, $incdec$ptr = 0, $mul = 0, $options = 0, $options37 = 0, $or = 0, $rem = 0, $shl = 0, $shl81 = 0, $shl84 = 0, $spawnpoint = 0, $sub = 0, $sub34 = 0;
 var $tics = 0, $tobool = 0, $tobool101 = 0, $tobool107 = 0, $tobool116 = 0, $tobool22 = 0, $tobool24 = 0, $tobool40 = 0, $tobool62 = 0, $tobool66 = 0, $tobool69 = 0, $tobool76 = 0, $type = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $y59 = 0, $y82 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $type = ((($mthing)) + 6|0);
 $0 = HEAPU8[$type>>0]|(HEAPU8[$type+1>>0]<<8);
 $conv = $0 << 16 >> 16;
 $cmp = ($0<<16>>16)==(11);
 if ($cmp) {
  $1 = HEAP32[99517]|0;
  $cmp2 = ($1>>>0)<((190660)>>>0);
  if (!($cmp2)) {
   STACKTOP = sp;return;
  }
  dest=$1; src=$mthing; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $2 = HEAP32[99517]|0;
  $incdec$ptr = ((($2)) + 10|0);
  HEAP32[99517] = $incdec$ptr;
  STACKTOP = sp;return;
 }
 $cmp8 = ($0<<16>>16)<(1);
 if ($cmp8) {
  STACKTOP = sp;return;
 }
 $cmp14 = ($0<<16>>16)<(5);
 if ($cmp14) {
  $sub = (($conv) + -1)|0;
  $arrayidx = (190672 + (($sub*10)|0)|0);
  dest=$arrayidx; src=$mthing; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $3 = HEAP32[99091]|0;
  $tobool = ($3|0)==(0);
  if (!($tobool)) {
   STACKTOP = sp;return;
  }
  _P_SpawnPlayer($mthing);
  STACKTOP = sp;return;
 }
 $4 = HEAP32[99094]|0;
 $tobool22 = ($4|0)==(0);
 if ($tobool22) {
  $options = ((($mthing)) + 8|0);
  $5 = HEAPU8[$options>>0]|(HEAPU8[$options+1>>0]<<8);
  $6 = $5 & 16;
  $tobool24 = ($6<<16>>16)==(0);
  if (!($tobool24)) {
   STACKTOP = sp;return;
  }
 }
 $7 = HEAP32[99086]|0;
 switch ($7|0) {
 case 0:  {
  $bit$0 = 1;
  break;
 }
 case 4:  {
  $bit$0 = 4;
  break;
 }
 default: {
  $sub34 = (($7) + -1)|0;
  $shl = 1 << $sub34;
  $bit$0 = $shl;
 }
 }
 $options37 = ((($mthing)) + 8|0);
 $8 = HEAPU8[$options37>>0]|(HEAPU8[$options37+1>>0]<<8);
 $conv38 = $8 << 16 >> 16;
 $and39 = $bit$0 & $conv38;
 $tobool40 = ($and39|0)==(0);
 if ($tobool40) {
  STACKTOP = sp;return;
 }
 $i$046 = 0;
 while(1) {
  $doomednum = (30576 + (($i$046*92)|0)|0);
  $9 = HEAP32[$doomednum>>2]|0;
  $cmp48 = ($9|0)==($conv|0);
  if ($cmp48) {
   break;
  }
  $inc = (($i$046) + 1)|0;
  $cmp43 = ($inc>>>0)<(137);
  if ($cmp43) {
   $i$046 = $inc;
  } else {
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  $10 = HEAPU8[$mthing>>0]|(HEAPU8[$mthing+1>>0]<<8);
  $conv58 = $10 << 16 >> 16;
  $y59 = ((($mthing)) + 2|0);
  $11 = HEAPU8[$y59>>0]|(HEAPU8[$y59+1>>0]<<8);
  $conv60 = $11 << 16 >> 16;
  HEAP32[$vararg_buffer>>2] = $conv;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $conv58;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $conv60;
  _I_Error(152855,$vararg_buffer);
  // unreachable;
 }
 $12 = HEAP32[99091]|0;
 $tobool62 = ($12|0)==(0);
 if (!($tobool62)) {
  $flags = (((30576 + (($i$046*92)|0)|0)) + 84|0);
  $13 = HEAP32[$flags>>2]|0;
  $and65 = $13 & 33554432;
  $tobool66 = ($and65|0)==(0);
  if (!($tobool66)) {
   STACKTOP = sp;return;
  }
 }
 $14 = HEAP32[99040]|0;
 $tobool69 = ($14|0)==(0);
 if ($tobool69) {
  $flags86$phi$trans$insert = (((30576 + (($i$046*92)|0)|0)) + 84|0);
  $$pre = HEAP32[$flags86$phi$trans$insert>>2]|0;
  $18 = $$pre;
 } else {
  $cmp71 = ($i$046|0)==(18);
  if ($cmp71) {
   STACKTOP = sp;return;
  }
  $flags74 = (((30576 + (($i$046*92)|0)|0)) + 84|0);
  $15 = HEAP32[$flags74>>2]|0;
  $and75 = $15 & 4194304;
  $tobool76 = ($and75|0)==(0);
  if ($tobool76) {
   $18 = $15;
  } else {
   STACKTOP = sp;return;
  }
 }
 $16 = HEAPU8[$mthing>>0]|(HEAPU8[$mthing+1>>0]<<8);
 $conv8040 = $16&65535;
 $shl81 = $conv8040 << 16;
 $y82 = ((($mthing)) + 2|0);
 $17 = HEAPU8[$y82>>0]|(HEAPU8[$y82+1>>0]<<8);
 $conv8341 = $17&65535;
 $shl84 = $conv8341 << 16;
 $and87 = $18 >>> 8;
 $19 = $and87 & 1;
 $20 = (-2147483648 - ($19))|0;
 $21 = (_P_SpawnMobj($shl81,$shl84,$20,$i$046)|0);
 $spawnpoint = ((($21)) + 140|0);
 dest=$spawnpoint; src=$mthing; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $tics = ((($21)) + 96|0);
 $22 = HEAP32[$tics>>2]|0;
 $cmp92 = ($22|0)>(0);
 if ($cmp92) {
  $call95 = (_P_Random()|0);
  $23 = HEAP32[$tics>>2]|0;
  $rem = (($call95|0) % ($23|0))&-1;
  $add = (($rem) + 1)|0;
  HEAP32[$tics>>2] = $add;
 }
 $flags99 = ((($21)) + 104|0);
 $24 = HEAP32[$flags99>>2]|0;
 $and100 = $24 & 4194304;
 $tobool101 = ($and100|0)==(0);
 if (!($tobool101)) {
  $25 = HEAP32[99149]|0;
  $inc103 = (($25) + 1)|0;
  HEAP32[99149] = $inc103;
 }
 $and106 = $24 & 8388608;
 $tobool107 = ($and106|0)==(0);
 if (!($tobool107)) {
  $26 = HEAP32[99150]|0;
  $inc109 = (($26) + 1)|0;
  HEAP32[99150] = $inc109;
 }
 $angle = ((($mthing)) + 4|0);
 $27 = HEAPU8[$angle>>0]|(HEAPU8[$angle+1>>0]<<8);
 $28 = (($27<<16>>16) / 45)&-1;
 $div = $28 << 16 >> 16;
 $mul = $div << 29;
 $angle112 = ((($21)) + 32|0);
 HEAP32[$angle112>>2] = $mul;
 $29 = HEAPU8[$options37>>0]|(HEAPU8[$options37+1>>0]<<8);
 $30 = $29 & 8;
 $tobool116 = ($30<<16>>16)==(0);
 if ($tobool116) {
  STACKTOP = sp;return;
 }
 $or = $24 | 32;
 HEAP32[$flags99>>2] = $or;
 STACKTOP = sp;return;
}
function _P_SpawnPuff($x,$y,$z) {
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $and = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $cmp7 = 0, $momz = 0, $shl = 0, $spec$select = 0, $sub = 0, $sub4 = 0, $tics = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_P_Random()|0);
 $call1 = (_P_Random()|0);
 $sub = (($call) - ($call1))|0;
 $shl = $sub << 10;
 $add = (($shl) + ($z))|0;
 $call2 = (_P_SpawnMobj($x,$y,$add,37)|0);
 $momz = ((($call2)) + 80|0);
 HEAP32[$momz>>2] = 65536;
 $call3 = (_P_Random()|0);
 $and = $call3 & 3;
 $tics = ((($call2)) + 96|0);
 $0 = HEAP32[$tics>>2]|0;
 $sub4 = (($0) - ($and))|0;
 $1 = ($sub4|0)>(1);
 $spec$select = $1 ? $sub4 : 1;
 HEAP32[$tics>>2] = $spec$select;
 $2 = HEAP32[99430]|0;
 $cmp7 = ($2|0)==(4194304);
 if (!($cmp7)) {
  return;
 }
 (_P_SetMobjState($call2,95)|0);
 return;
}
function _P_SpawnBlood($x,$y,$z,$damage) {
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 $damage = $damage|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $and = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $cmp11 = 0, $damage$off = 0, $momz = 0, $shl = 0, $spec$select = 0, $sub = 0, $sub4 = 0, $tics = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_P_Random()|0);
 $call1 = (_P_Random()|0);
 $sub = (($call) - ($call1))|0;
 $shl = $sub << 10;
 $add = (($shl) + ($z))|0;
 $call2 = (_P_SpawnMobj($x,$y,$add,38)|0);
 $momz = ((($call2)) + 80|0);
 HEAP32[$momz>>2] = 131072;
 $call3 = (_P_Random()|0);
 $and = $call3 & 3;
 $tics = ((($call2)) + 96|0);
 $0 = HEAP32[$tics>>2]|0;
 $sub4 = (($0) - ($and))|0;
 $1 = ($sub4|0)>(1);
 $spec$select = $1 ? $sub4 : 1;
 HEAP32[$tics>>2] = $spec$select;
 $damage$off = (($damage) + -9)|0;
 $2 = ($damage$off>>>0)<(4);
 if ($2) {
  (_P_SetMobjState($call2,91)|0);
  return;
 }
 $cmp11 = ($damage|0)<(9);
 if (!($cmp11)) {
  return;
 }
 (_P_SetMobjState($call2,92)|0);
 return;
}
function _P_CheckMissileSpawn($th) {
 $th = $th|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add4 = 0, $add6 = 0, $and = 0, $and$i = 0;
 var $and4$i = 0, $call = 0, $call1$i = 0, $call9 = 0, $deathsound$i = 0, $deathstate$i = 0, $flags$i = 0, $info$i = 0, $momx = 0, $momy = 0, $momz = 0, $shr = 0, $shr3 = 0, $shr5 = 0, $spec$select = 0, $spec$select$i = 0, $sub = 0, $sub$i = 0, $tics = 0, $tobool = 0;
 var $tobool$i = 0, $type$i = 0, $x = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_P_Random()|0);
 $and = $call & 3;
 $tics = ((($th)) + 96|0);
 $0 = HEAP32[$tics>>2]|0;
 $sub = (($0) - ($and))|0;
 $1 = ($sub|0)>(1);
 $spec$select = $1 ? $sub : 1;
 HEAP32[$tics>>2] = $spec$select;
 $momx = ((($th)) + 72|0);
 $2 = HEAP32[$momx>>2]|0;
 $shr = $2 >> 1;
 $x = ((($th)) + 12|0);
 $3 = HEAP32[$x>>2]|0;
 $add = (($3) + ($shr))|0;
 HEAP32[$x>>2] = $add;
 $momy = ((($th)) + 76|0);
 $4 = HEAP32[$momy>>2]|0;
 $shr3 = $4 >> 1;
 $y = ((($th)) + 16|0);
 $5 = HEAP32[$y>>2]|0;
 $add4 = (($5) + ($shr3))|0;
 HEAP32[$y>>2] = $add4;
 $momz = ((($th)) + 80|0);
 $6 = HEAP32[$momz>>2]|0;
 $shr5 = $6 >> 1;
 $z = ((($th)) + 20|0);
 $7 = HEAP32[$z>>2]|0;
 $add6 = (($7) + ($shr5))|0;
 HEAP32[$z>>2] = $add6;
 $call9 = (_P_TryMove($th,$add,$add4)|0);
 $tobool = ($call9|0)==(0);
 if (!($tobool)) {
  return;
 }
 HEAP32[$momz>>2] = 0;
 HEAP32[$momy>>2] = 0;
 HEAP32[$momx>>2] = 0;
 $type$i = ((($th)) + 88|0);
 $8 = HEAP32[$type$i>>2]|0;
 $deathstate$i = (((30576 + (($8*92)|0)|0)) + 48|0);
 $9 = HEAP32[$deathstate$i>>2]|0;
 (_P_SetMobjState($th,$9)|0);
 $call1$i = (_P_Random()|0);
 $and$i = $call1$i & 3;
 $10 = HEAP32[$tics>>2]|0;
 $sub$i = (($10) - ($and$i))|0;
 $11 = ($sub$i|0)>(1);
 $spec$select$i = $11 ? $sub$i : 1;
 HEAP32[$tics>>2] = $spec$select$i;
 $flags$i = ((($th)) + 104|0);
 $12 = HEAP32[$flags$i>>2]|0;
 $and4$i = $12 & -65537;
 HEAP32[$flags$i>>2] = $and4$i;
 $info$i = ((($th)) + 92|0);
 $13 = HEAP32[$info$i>>2]|0;
 $deathsound$i = ((($13)) + 56|0);
 $14 = HEAP32[$deathsound$i>>2]|0;
 $tobool$i = ($14|0)==(0);
 if ($tobool$i) {
  return;
 }
 _S_StartSound($th,$14);
 return;
}
function _P_SubstNullMobj($mobj) {
 $mobj = $mobj|0;
 var $cmp = 0, $mobj$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($mobj|0)==(0|0);
 if (!($cmp)) {
  $mobj$addr$0 = $mobj;
  return ($mobj$addr$0|0);
 }
 HEAP32[(397816)>>2] = 0;
 HEAP32[(397820)>>2] = 0;
 HEAP32[(397824)>>2] = 0;
 HEAP32[(397908)>>2] = 0;
 $mobj$addr$0 = 397804;
 return ($mobj$addr$0|0);
}
function _P_SpawnMissile($source,$dest,$type) {
 $source = $source|0;
 $dest = $dest|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add12 = 0, $an$0 = 0, $and = 0, $angle = 0, $arrayidx = 0, $arrayidx18 = 0, $call = 0, $call10 = 0, $call11 = 0, $call15 = 0, $call19 = 0, $call26 = 0, $call7 = 0, $div = 0;
 var $div34 = 0, $flags = 0, $info = 0, $momx = 0, $momy = 0, $momz = 0, $seesound = 0, $shl = 0, $shr = 0, $spec$store$select = 0, $speed = 0, $speed17 = 0, $speed28 = 0, $sub = 0, $sub22 = 0, $sub25 = 0, $sub33 = 0, $target = 0, $tobool = 0, $tobool8 = 0;
 var $x = 0, $x5 = 0, $y = 0, $y6 = 0, $z = 0, $z31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $x = ((($source)) + 12|0);
 $0 = HEAP32[$x>>2]|0;
 $y = ((($source)) + 16|0);
 $1 = HEAP32[$y>>2]|0;
 $z = ((($source)) + 20|0);
 $2 = HEAP32[$z>>2]|0;
 $add = (($2) + 2097152)|0;
 $call = (_P_SpawnMobj($0,$1,$add,$type)|0);
 $info = ((($call)) + 92|0);
 $3 = HEAP32[$info>>2]|0;
 $seesound = ((($3)) + 16|0);
 $4 = HEAP32[$seesound>>2]|0;
 $tobool = ($4|0)==(0);
 if (!($tobool)) {
  _S_StartSound($call,$4);
 }
 $target = ((($call)) + 120|0);
 HEAP32[$target>>2] = $source;
 $5 = HEAP32[$x>>2]|0;
 $6 = HEAP32[$y>>2]|0;
 $x5 = ((($dest)) + 12|0);
 $7 = HEAP32[$x5>>2]|0;
 $y6 = ((($dest)) + 16|0);
 $8 = HEAP32[$y6>>2]|0;
 $call7 = (_R_PointToAngle2($5,$6,$7,$8)|0);
 $flags = ((($dest)) + 104|0);
 $9 = HEAP32[$flags>>2]|0;
 $and = $9 & 262144;
 $tobool8 = ($and|0)==(0);
 if ($tobool8) {
  $an$0 = $call7;
 } else {
  $call10 = (_P_Random()|0);
  $call11 = (_P_Random()|0);
  $sub = (($call10) - ($call11))|0;
  $shl = $sub << 20;
  $add12 = (($shl) + ($call7))|0;
  $an$0 = $add12;
 }
 $angle = ((($call)) + 32|0);
 HEAP32[$angle>>2] = $an$0;
 $shr = $an$0 >>> 19;
 $10 = HEAP32[$info>>2]|0;
 $speed = ((($10)) + 60|0);
 $11 = HEAP32[$speed>>2]|0;
 $arrayidx = ((82912) + ($shr<<2)|0);
 $12 = HEAP32[$arrayidx>>2]|0;
 $call15 = (_FixedMul($11,$12)|0);
 $momx = ((($call)) + 72|0);
 HEAP32[$momx>>2] = $call15;
 $13 = HEAP32[$info>>2]|0;
 $speed17 = ((($13)) + 60|0);
 $14 = HEAP32[$speed17>>2]|0;
 $arrayidx18 = (74720 + ($shr<<2)|0);
 $15 = HEAP32[$arrayidx18>>2]|0;
 $call19 = (_FixedMul($14,$15)|0);
 $momy = ((($call)) + 76|0);
 HEAP32[$momy>>2] = $call19;
 $16 = HEAP32[$x5>>2]|0;
 $17 = HEAP32[$x>>2]|0;
 $sub22 = (($16) - ($17))|0;
 $18 = HEAP32[$y6>>2]|0;
 $19 = HEAP32[$y>>2]|0;
 $sub25 = (($18) - ($19))|0;
 $call26 = (_P_AproxDistance($sub22,$sub25)|0);
 $20 = HEAP32[$info>>2]|0;
 $speed28 = ((($20)) + 60|0);
 $21 = HEAP32[$speed28>>2]|0;
 $div = (($call26|0) / ($21|0))&-1;
 $22 = ($div|0)>(1);
 $spec$store$select = $22 ? $div : 1;
 $z31 = ((($dest)) + 20|0);
 $23 = HEAP32[$z31>>2]|0;
 $24 = HEAP32[$z>>2]|0;
 $sub33 = (($23) - ($24))|0;
 $div34 = (($sub33|0) / ($spec$store$select|0))&-1;
 $momz = ((($call)) + 80|0);
 HEAP32[$momz>>2] = $div34;
 _P_CheckMissileSpawn($call);
 return ($call|0);
}
function _P_SpawnPlayerMissile($source,$type) {
 $source = $source|0;
 $type = $type|0;
 var $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add13 = 0, $an$1 = 0, $angle = 0, $angle20 = 0, $arrayidx = 0, $arrayidx26 = 0, $call = 0, $call1 = 0, $call14 = 0, $call22 = 0, $call27 = 0, $call30 = 0, $call4 = 0, $info = 0, $momx = 0, $momy = 0, $momz = 0, $seesound = 0, $shr = 0, $slope$1 = 0;
 var $speed = 0, $speed24 = 0, $speed29 = 0, $sub = 0, $target = 0, $tobool = 0, $tobool15 = 0, $tobool2 = 0, $tobool5 = 0, $x10 = 0, $y11 = 0, $z12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $angle = ((($source)) + 32|0);
 $0 = HEAP32[$angle>>2]|0;
 $call = (_P_AimLineAttack($source,$0,67108864)|0);
 $1 = HEAP32[99434]|0;
 $tobool = ($1|0)==(0|0);
 if ($tobool) {
  $add = (($0) + 67108864)|0;
  $call1 = (_P_AimLineAttack($source,$add,67108864)|0);
  $2 = HEAP32[99434]|0;
  $tobool2 = ($2|0)==(0|0);
  $sub = (($0) + -67108864)|0;
  if ($tobool2) {
   $call4 = (_P_AimLineAttack($source,$sub,67108864)|0);
   $$pr = HEAP32[99434]|0;
   $tobool5 = ($$pr|0)==(0|0);
   if ($tobool5) {
    $3 = HEAP32[$angle>>2]|0;
    $an$1 = $3;$slope$1 = 0;
   } else {
    $an$1 = $sub;$slope$1 = $call4;
   }
  } else {
   $an$1 = $add;$slope$1 = $call1;
  }
 } else {
  $an$1 = $0;$slope$1 = $call;
 }
 $x10 = ((($source)) + 12|0);
 $4 = HEAP32[$x10>>2]|0;
 $y11 = ((($source)) + 16|0);
 $5 = HEAP32[$y11>>2]|0;
 $z12 = ((($source)) + 20|0);
 $6 = HEAP32[$z12>>2]|0;
 $add13 = (($6) + 2097152)|0;
 $call14 = (_P_SpawnMobj($4,$5,$add13,$type)|0);
 $info = ((($call14)) + 92|0);
 $7 = HEAP32[$info>>2]|0;
 $seesound = ((($7)) + 16|0);
 $8 = HEAP32[$seesound>>2]|0;
 $tobool15 = ($8|0)==(0);
 if ($tobool15) {
  $9 = $7;
 } else {
  _S_StartSound($call14,$8);
  $$pre = HEAP32[$info>>2]|0;
  $9 = $$pre;
 }
 $target = ((($call14)) + 120|0);
 HEAP32[$target>>2] = $source;
 $angle20 = ((($call14)) + 32|0);
 HEAP32[$angle20>>2] = $an$1;
 $speed = ((($9)) + 60|0);
 $10 = HEAP32[$speed>>2]|0;
 $shr = $an$1 >>> 19;
 $arrayidx = ((82912) + ($shr<<2)|0);
 $11 = HEAP32[$arrayidx>>2]|0;
 $call22 = (_FixedMul($10,$11)|0);
 $momx = ((($call14)) + 72|0);
 HEAP32[$momx>>2] = $call22;
 $12 = HEAP32[$info>>2]|0;
 $speed24 = ((($12)) + 60|0);
 $13 = HEAP32[$speed24>>2]|0;
 $arrayidx26 = (74720 + ($shr<<2)|0);
 $14 = HEAP32[$arrayidx26>>2]|0;
 $call27 = (_FixedMul($13,$14)|0);
 $momy = ((($call14)) + 76|0);
 HEAP32[$momy>>2] = $call27;
 $15 = HEAP32[$info>>2]|0;
 $speed29 = ((($15)) + 60|0);
 $16 = HEAP32[$speed29>>2]|0;
 $call30 = (_FixedMul($16,$slope$1)|0);
 $momz = ((($call14)) + 80|0);
 HEAP32[$momz>>2] = $call30;
 _P_CheckMissileSpawn($call14);
 return;
}
function _T_PlatRaise($plat) {
 $plat = $plat|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $call = 0, $call28 = 0, $cmp29 = 0, $cmp43 = 0, $count = 0, $count16 = 0, $count32 = 0, $count38 = 0, $crush = 0, $dec = 0, $high = 0, $low = 0, $low42 = 0, $sector = 0;
 var $sector26 = 0, $sector41 = 0, $soundorg = 0, $soundorg12 = 0, $soundorg19 = 0, $soundorg35 = 0, $soundorg50 = 0, $speed = 0, $speed27 = 0, $status = 0, $switch = 0, $tobool = 0, $tobool39 = 0, $tobool8 = 0, $type = 0, $wait = 0, $wait15 = 0, $wait31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $status = ((($plat)) + 36|0);
 $0 = HEAP32[$status>>2]|0;
 switch ($0|0) {
 case 0:  {
  $sector = ((($plat)) + 12|0);
  $1 = HEAP32[$sector>>2]|0;
  $speed = ((($plat)) + 16|0);
  $2 = HEAP32[$speed>>2]|0;
  $high = ((($plat)) + 24|0);
  $3 = HEAP32[$high>>2]|0;
  $crush = ((($plat)) + 44|0);
  $4 = HEAP32[$crush>>2]|0;
  $call = (_T_MovePlane($1,$2,$3,$4,0,1)|0);
  $type = ((($plat)) + 52|0);
  $5 = HEAP32[$type>>2]|0;
  $6 = $5 & -2;
  $switch = ($6|0)==(2);
  if ($switch) {
   $7 = HEAP32[99557]|0;
   $and = $7 & 7;
   $tobool = ($and|0)==(0);
   if ($tobool) {
    $8 = HEAP32[$sector>>2]|0;
    $soundorg = ((($8)) + 44|0);
    _S_StartSound($soundorg,22);
   }
  }
  switch ($call|0) {
  case 1:  {
   $9 = HEAP32[$crush>>2]|0;
   $tobool8 = ($9|0)==(0);
   if (!($tobool8)) {
    return;
   }
   $wait = ((($plat)) + 28|0);
   $10 = HEAP32[$wait>>2]|0;
   $count = ((($plat)) + 32|0);
   HEAP32[$count>>2] = $10;
   HEAP32[$status>>2] = 1;
   $11 = HEAP32[$sector>>2]|0;
   $soundorg12 = ((($11)) + 44|0);
   _S_StartSound($soundorg12,18);
   return;
   break;
  }
  case 2:  {
   $wait15 = ((($plat)) + 28|0);
   $12 = HEAP32[$wait15>>2]|0;
   $count16 = ((($plat)) + 32|0);
   HEAP32[$count16>>2] = $12;
   HEAP32[$status>>2] = 2;
   $13 = HEAP32[$sector>>2]|0;
   $soundorg19 = ((($13)) + 44|0);
   _S_StartSound($soundorg19,19);
   $14 = HEAP32[$type>>2]|0;
   switch ($14|0) {
   case 1: case 4:  {
    _P_RemoveActivePlat($plat);
    return;
    break;
   }
   case 3: case 2:  {
    _P_RemoveActivePlat($plat);
    return;
    break;
   }
   default: {
    return;
   }
   }
   break;
  }
  default: {
   return;
  }
  }
  break;
 }
 case 1:  {
  $sector26 = ((($plat)) + 12|0);
  $15 = HEAP32[$sector26>>2]|0;
  $speed27 = ((($plat)) + 16|0);
  $16 = HEAP32[$speed27>>2]|0;
  $low = ((($plat)) + 20|0);
  $17 = HEAP32[$low>>2]|0;
  $call28 = (_T_MovePlane($15,$16,$17,0,0,-1)|0);
  $cmp29 = ($call28|0)==(2);
  if (!($cmp29)) {
   return;
  }
  $wait31 = ((($plat)) + 28|0);
  $18 = HEAP32[$wait31>>2]|0;
  $count32 = ((($plat)) + 32|0);
  HEAP32[$count32>>2] = $18;
  HEAP32[$status>>2] = 2;
  $19 = HEAP32[$sector26>>2]|0;
  $soundorg35 = ((($19)) + 44|0);
  _S_StartSound($soundorg35,19);
  return;
  break;
 }
 case 2:  {
  $count38 = ((($plat)) + 32|0);
  $20 = HEAP32[$count38>>2]|0;
  $dec = (($20) + -1)|0;
  HEAP32[$count38>>2] = $dec;
  $tobool39 = ($dec|0)==(0);
  if (!($tobool39)) {
   return;
  }
  $sector41 = ((($plat)) + 12|0);
  $21 = HEAP32[$sector41>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $low42 = ((($plat)) + 20|0);
  $23 = HEAP32[$low42>>2]|0;
  $cmp43 = ($22|0)!=($23|0);
  $$ = $cmp43&1;
  HEAP32[$status>>2] = $$;
  $soundorg50 = ((($21)) + 44|0);
  _S_StartSound($soundorg50,18);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _P_RemoveActivePlat($plat) {
 $plat = $plat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx$lcssa = 0, $cmp1 = 0, $cmp1$1 = 0, $cmp1$10 = 0, $cmp1$11 = 0, $cmp1$12 = 0, $cmp1$13 = 0, $cmp1$14 = 0;
 var $cmp1$15 = 0, $cmp1$16 = 0, $cmp1$17 = 0, $cmp1$18 = 0, $cmp1$19 = 0, $cmp1$2 = 0, $cmp1$20 = 0, $cmp1$21 = 0, $cmp1$22 = 0, $cmp1$23 = 0, $cmp1$24 = 0, $cmp1$25 = 0, $cmp1$26 = 0, $cmp1$27 = 0, $cmp1$28 = 0, $cmp1$29 = 0, $cmp1$3 = 0, $cmp1$4 = 0, $cmp1$5 = 0, $cmp1$6 = 0;
 var $cmp1$7 = 0, $cmp1$8 = 0, $cmp1$9 = 0, $sector = 0, $specialdata = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[47608]|0;
 $cmp1 = ($0|0)==($plat|0);
 do {
  if ($cmp1) {
   $arrayidx$lcssa = 190432;
  } else {
   $1 = HEAP32[(190436)>>2]|0;
   $cmp1$1 = ($1|0)==($plat|0);
   if ($cmp1$1) {
    $arrayidx$lcssa = (190436);
   } else {
    $4 = HEAP32[(190440)>>2]|0;
    $cmp1$2 = ($4|0)==($plat|0);
    if ($cmp1$2) {
     $arrayidx$lcssa = (190440);
    } else {
     $5 = HEAP32[(190444)>>2]|0;
     $cmp1$3 = ($5|0)==($plat|0);
     if ($cmp1$3) {
      $arrayidx$lcssa = (190444);
     } else {
      $6 = HEAP32[(190448)>>2]|0;
      $cmp1$4 = ($6|0)==($plat|0);
      if ($cmp1$4) {
       $arrayidx$lcssa = (190448);
      } else {
       $7 = HEAP32[(190452)>>2]|0;
       $cmp1$5 = ($7|0)==($plat|0);
       if ($cmp1$5) {
        $arrayidx$lcssa = (190452);
       } else {
        $8 = HEAP32[(190456)>>2]|0;
        $cmp1$6 = ($8|0)==($plat|0);
        if ($cmp1$6) {
         $arrayidx$lcssa = (190456);
        } else {
         $9 = HEAP32[(190460)>>2]|0;
         $cmp1$7 = ($9|0)==($plat|0);
         if ($cmp1$7) {
          $arrayidx$lcssa = (190460);
         } else {
          $10 = HEAP32[(190464)>>2]|0;
          $cmp1$8 = ($10|0)==($plat|0);
          if ($cmp1$8) {
           $arrayidx$lcssa = (190464);
          } else {
           $11 = HEAP32[(190468)>>2]|0;
           $cmp1$9 = ($11|0)==($plat|0);
           if ($cmp1$9) {
            $arrayidx$lcssa = (190468);
           } else {
            $12 = HEAP32[(190472)>>2]|0;
            $cmp1$10 = ($12|0)==($plat|0);
            if ($cmp1$10) {
             $arrayidx$lcssa = (190472);
            } else {
             $13 = HEAP32[(190476)>>2]|0;
             $cmp1$11 = ($13|0)==($plat|0);
             if ($cmp1$11) {
              $arrayidx$lcssa = (190476);
             } else {
              $14 = HEAP32[(190480)>>2]|0;
              $cmp1$12 = ($14|0)==($plat|0);
              if ($cmp1$12) {
               $arrayidx$lcssa = (190480);
              } else {
               $15 = HEAP32[(190484)>>2]|0;
               $cmp1$13 = ($15|0)==($plat|0);
               if ($cmp1$13) {
                $arrayidx$lcssa = (190484);
               } else {
                $16 = HEAP32[(190488)>>2]|0;
                $cmp1$14 = ($16|0)==($plat|0);
                if ($cmp1$14) {
                 $arrayidx$lcssa = (190488);
                } else {
                 $17 = HEAP32[(190492)>>2]|0;
                 $cmp1$15 = ($17|0)==($plat|0);
                 if ($cmp1$15) {
                  $arrayidx$lcssa = (190492);
                 } else {
                  $18 = HEAP32[(190496)>>2]|0;
                  $cmp1$16 = ($18|0)==($plat|0);
                  if ($cmp1$16) {
                   $arrayidx$lcssa = (190496);
                  } else {
                   $19 = HEAP32[(190500)>>2]|0;
                   $cmp1$17 = ($19|0)==($plat|0);
                   if ($cmp1$17) {
                    $arrayidx$lcssa = (190500);
                   } else {
                    $20 = HEAP32[(190504)>>2]|0;
                    $cmp1$18 = ($20|0)==($plat|0);
                    if ($cmp1$18) {
                     $arrayidx$lcssa = (190504);
                    } else {
                     $21 = HEAP32[(190508)>>2]|0;
                     $cmp1$19 = ($21|0)==($plat|0);
                     if ($cmp1$19) {
                      $arrayidx$lcssa = (190508);
                      break;
                     }
                     $22 = HEAP32[(190512)>>2]|0;
                     $cmp1$20 = ($22|0)==($plat|0);
                     if ($cmp1$20) {
                      $arrayidx$lcssa = (190512);
                      break;
                     }
                     $23 = HEAP32[(190516)>>2]|0;
                     $cmp1$21 = ($23|0)==($plat|0);
                     if ($cmp1$21) {
                      $arrayidx$lcssa = (190516);
                      break;
                     }
                     $24 = HEAP32[(190520)>>2]|0;
                     $cmp1$22 = ($24|0)==($plat|0);
                     if ($cmp1$22) {
                      $arrayidx$lcssa = (190520);
                      break;
                     }
                     $25 = HEAP32[(190524)>>2]|0;
                     $cmp1$23 = ($25|0)==($plat|0);
                     if ($cmp1$23) {
                      $arrayidx$lcssa = (190524);
                      break;
                     }
                     $26 = HEAP32[(190528)>>2]|0;
                     $cmp1$24 = ($26|0)==($plat|0);
                     if ($cmp1$24) {
                      $arrayidx$lcssa = (190528);
                      break;
                     }
                     $27 = HEAP32[(190532)>>2]|0;
                     $cmp1$25 = ($27|0)==($plat|0);
                     if ($cmp1$25) {
                      $arrayidx$lcssa = (190532);
                      break;
                     }
                     $28 = HEAP32[(190536)>>2]|0;
                     $cmp1$26 = ($28|0)==($plat|0);
                     if ($cmp1$26) {
                      $arrayidx$lcssa = (190536);
                      break;
                     }
                     $29 = HEAP32[(190540)>>2]|0;
                     $cmp1$27 = ($29|0)==($plat|0);
                     if ($cmp1$27) {
                      $arrayidx$lcssa = (190540);
                      break;
                     }
                     $30 = HEAP32[(190544)>>2]|0;
                     $cmp1$28 = ($30|0)==($plat|0);
                     if ($cmp1$28) {
                      $arrayidx$lcssa = (190544);
                      break;
                     }
                     $31 = HEAP32[(190548)>>2]|0;
                     $cmp1$29 = ($31|0)==($plat|0);
                     if ($cmp1$29) {
                      $arrayidx$lcssa = (190548);
                      break;
                     }
                     _I_Error(152900,$vararg_buffer);
                     // unreachable;
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $sector = ((($plat)) + 12|0);
 $2 = HEAP32[$sector>>2]|0;
 $specialdata = ((($2)) + 76|0);
 HEAP32[$specialdata>>2] = 0;
 $3 = HEAP32[$arrayidx$lcssa>>2]|0;
 _P_RemoveThinker($3);
 HEAP32[$arrayidx$lcssa>>2] = 0;
 STACKTOP = sp;return;
}
function _EV_DoPlat($line,$type,$amount) {
 $line = $line|0;
 $type = $type|0;
 $amount = $amount|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $arrayidx$i = 0, $arrayidx$le = 0, $arrayidx11 = 0, $call = 0, $call15 = 0, $call2 = 0, $call32 = 0, $call48 = 0, $call65 = 0, $call75 = 0, $call81 = 0, $call8186 = 0, $call8189 = 0, $call83 = 0;
 var $call86 = 0, $cmp = 0, $cmp3$i = 0, $cmp35 = 0, $cmp52 = 0, $cmp6$i = 0, $cmp69 = 0, $cmp79 = 0, $cmp82 = 0, $cmp8287 = 0, $cond = 0, $conv = 0, $conv8 = 0, $crush = 0, $exitcond$i = 0, $floorpic = 0, $floorpic14 = 0, $floorpic23 = 0, $floorpic24 = 0, $function = 0;
 var $function$i = 0, $high = 0, $high26 = 0, $high42 = 0, $high59 = 0, $high76 = 0, $i$09$i = 0, $idxprom = 0, $idxprom20 = 0, $inc$i = 0, $low = 0, $low49 = 0, $low66 = 0, $mul = 0, $oldstatus$i = 0, $rtn$0$ph$lcssa = 0, $rtn$0$ph88 = 0, $sector = 0, $sector13 = 0, $sector22 = 0;
 var $soundorg = 0, $soundorg29 = 0, $soundorg45 = 0, $soundorg62 = 0, $soundorg88 = 0, $spec$store$select = 0, $spec$store$select77 = 0, $spec$store$select78 = 0, $spec$store$select79 = 0, $special = 0, $specialdata = 0, $speed = 0, $speed17 = 0, $speed31 = 0, $speed47 = 0, $speed64 = 0, $status = 0, $status$i = 0, $status28 = 0, $status44 = 0;
 var $status61 = 0, $status87 = 0, $tag = 0, $tag2$i = 0, $tag7 = 0, $tag9 = 0, $tobool = 0, $tobool$i = 0, $type3 = 0, $wait = 0, $wait27 = 0, $wait43 = 0, $wait60 = 0, $wait85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cond = ($type|0)==(0);
 if ($cond) {
  $tag = ((($line)) + 20|0);
  $0 = HEAP16[$tag>>1]|0;
  $conv = $0 << 16 >> 16;
  $i$09$i = 0;
  while(1) {
   $arrayidx$i = (190432 + ($i$09$i<<2)|0);
   $1 = HEAP32[$arrayidx$i>>2]|0;
   $tobool$i = ($1|0)==(0|0);
   if (!($tobool$i)) {
    $tag2$i = ((($1)) + 48|0);
    $2 = HEAP32[$tag2$i>>2]|0;
    $cmp3$i = ($2|0)==($conv|0);
    if ($cmp3$i) {
     $status$i = ((($1)) + 36|0);
     $3 = HEAP32[$status$i>>2]|0;
     $cmp6$i = ($3|0)==(3);
     if ($cmp6$i) {
      $oldstatus$i = ((($1)) + 40|0);
      $4 = HEAP32[$oldstatus$i>>2]|0;
      HEAP32[$status$i>>2] = $4;
      $function$i = ((($1)) + 8|0);
      HEAP32[$function$i>>2] = 135;
     }
    }
   }
   $inc$i = (($i$09$i) + 1)|0;
   $exitcond$i = ($inc$i|0)==(30);
   if ($exitcond$i) {
    break;
   } else {
    $i$09$i = $inc$i;
   }
  }
 }
 $call8186 = (_P_FindSectorFromLineTag($line,-1)|0);
 $cmp8287 = ($call8186|0)>(-1);
 if (!($cmp8287)) {
  $rtn$0$ph$lcssa = 0;
  return ($rtn$0$ph$lcssa|0);
 }
 $tag7 = ((($line)) + 20|0);
 $arrayidx11 = ((($line)) + 22|0);
 $mul = $amount << 16;
 $call8189 = $call8186;$rtn$0$ph88 = 0;
 L14: while(1) {
  $call83 = $call8189;
  while(1) {
   $5 = HEAP32[99506]|0;
   $specialdata = (((($5) + (($call83*88)|0)|0)) + 76|0);
   $6 = HEAP32[$specialdata>>2]|0;
   $tobool = ($6|0)==(0|0);
   if ($tobool) {
    break;
   }
   $call = (_P_FindSectorFromLineTag($line,$call83)|0);
   $cmp = ($call|0)>(-1);
   if ($cmp) {
    $call83 = $call;
   } else {
    $rtn$0$ph$lcssa = $rtn$0$ph88;
    label = 20;
    break L14;
   }
  }
  $arrayidx$le = (($5) + (($call83*88)|0)|0);
  $call2 = (_Z_Malloc(56,6,0)|0);
  _P_AddThinker($call2);
  $type3 = ((($call2)) + 52|0);
  HEAP32[$type3>>2] = $type;
  $sector = ((($call2)) + 12|0);
  HEAP32[$sector>>2] = $arrayidx$le;
  HEAP32[$specialdata>>2] = $call2;
  $function = ((($call2)) + 8|0);
  HEAP32[$function>>2] = 135;
  $crush = ((($call2)) + 44|0);
  HEAP32[$crush>>2] = 0;
  $7 = HEAP16[$tag7>>1]|0;
  $conv8 = $7 << 16 >> 16;
  $tag9 = ((($call2)) + 48|0);
  HEAP32[$tag9>>2] = $conv8;
  switch ($type|0) {
  case 3:  {
   $speed = ((($call2)) + 16|0);
   HEAP32[$speed>>2] = 32768;
   $8 = HEAP32[99501]|0;
   $9 = HEAP16[$arrayidx11>>1]|0;
   $idxprom = $9 << 16 >> 16;
   $sector13 = (((($8) + (($idxprom*20)|0)|0)) + 16|0);
   $10 = HEAP32[$sector13>>2]|0;
   $floorpic = ((($10)) + 8|0);
   $11 = HEAP16[$floorpic>>1]|0;
   $floorpic14 = (((($5) + (($call83*88)|0)|0)) + 8|0);
   HEAP16[$floorpic14>>1] = $11;
   $12 = HEAP32[$arrayidx$le>>2]|0;
   $call15 = (_P_FindNextHighestFloor($arrayidx$le,$12)|0);
   $high = ((($call2)) + 24|0);
   HEAP32[$high>>2] = $call15;
   $wait = ((($call2)) + 28|0);
   HEAP32[$wait>>2] = 0;
   $status = ((($call2)) + 36|0);
   HEAP32[$status>>2] = 0;
   $special = (((($5) + (($call83*88)|0)|0)) + 14|0);
   HEAP16[$special>>1] = 0;
   $soundorg = (((($5) + (($call83*88)|0)|0)) + 44|0);
   _S_StartSound($soundorg,22);
   break;
  }
  case 2:  {
   $speed17 = ((($call2)) + 16|0);
   HEAP32[$speed17>>2] = 32768;
   $13 = HEAP32[99501]|0;
   $14 = HEAP16[$arrayidx11>>1]|0;
   $idxprom20 = $14 << 16 >> 16;
   $sector22 = (((($13) + (($idxprom20*20)|0)|0)) + 16|0);
   $15 = HEAP32[$sector22>>2]|0;
   $floorpic23 = ((($15)) + 8|0);
   $16 = HEAP16[$floorpic23>>1]|0;
   $floorpic24 = (((($5) + (($call83*88)|0)|0)) + 8|0);
   HEAP16[$floorpic24>>1] = $16;
   $17 = HEAP32[$arrayidx$le>>2]|0;
   $add = (($17) + ($mul))|0;
   $high26 = ((($call2)) + 24|0);
   HEAP32[$high26>>2] = $add;
   $wait27 = ((($call2)) + 28|0);
   HEAP32[$wait27>>2] = 0;
   $status28 = ((($call2)) + 36|0);
   HEAP32[$status28>>2] = 0;
   $soundorg29 = (((($5) + (($call83*88)|0)|0)) + 44|0);
   _S_StartSound($soundorg29,22);
   break;
  }
  case 1:  {
   $speed31 = ((($call2)) + 16|0);
   HEAP32[$speed31>>2] = 262144;
   $call32 = (_P_FindLowestFloorSurrounding($arrayidx$le)|0);
   $low = ((($call2)) + 20|0);
   HEAP32[$low>>2] = $call32;
   $18 = HEAP32[$arrayidx$le>>2]|0;
   $cmp35 = ($call32|0)>($18|0);
   $spec$store$select = $cmp35 ? $18 : $call32;
   HEAP32[$low>>2] = $spec$store$select;
   $19 = HEAP32[$arrayidx$le>>2]|0;
   $high42 = ((($call2)) + 24|0);
   HEAP32[$high42>>2] = $19;
   $wait43 = ((($call2)) + 28|0);
   HEAP32[$wait43>>2] = 105;
   $status44 = ((($call2)) + 36|0);
   HEAP32[$status44>>2] = 1;
   $soundorg45 = (((($5) + (($call83*88)|0)|0)) + 44|0);
   _S_StartSound($soundorg45,18);
   break;
  }
  case 4:  {
   $speed47 = ((($call2)) + 16|0);
   HEAP32[$speed47>>2] = 524288;
   $call48 = (_P_FindLowestFloorSurrounding($arrayidx$le)|0);
   $low49 = ((($call2)) + 20|0);
   HEAP32[$low49>>2] = $call48;
   $20 = HEAP32[$arrayidx$le>>2]|0;
   $cmp52 = ($call48|0)>($20|0);
   $spec$store$select77 = $cmp52 ? $20 : $call48;
   HEAP32[$low49>>2] = $spec$store$select77;
   $21 = HEAP32[$arrayidx$le>>2]|0;
   $high59 = ((($call2)) + 24|0);
   HEAP32[$high59>>2] = $21;
   $wait60 = ((($call2)) + 28|0);
   HEAP32[$wait60>>2] = 105;
   $status61 = ((($call2)) + 36|0);
   HEAP32[$status61>>2] = 1;
   $soundorg62 = (((($5) + (($call83*88)|0)|0)) + 44|0);
   _S_StartSound($soundorg62,18);
   break;
  }
  case 0:  {
   $speed64 = ((($call2)) + 16|0);
   HEAP32[$speed64>>2] = 65536;
   $call65 = (_P_FindLowestFloorSurrounding($arrayidx$le)|0);
   $low66 = ((($call2)) + 20|0);
   HEAP32[$low66>>2] = $call65;
   $22 = HEAP32[$arrayidx$le>>2]|0;
   $cmp69 = ($call65|0)>($22|0);
   $spec$store$select78 = $cmp69 ? $22 : $call65;
   HEAP32[$low66>>2] = $spec$store$select78;
   $call75 = (_P_FindHighestFloorSurrounding($arrayidx$le)|0);
   $high76 = ((($call2)) + 24|0);
   HEAP32[$high76>>2] = $call75;
   $23 = HEAP32[$arrayidx$le>>2]|0;
   $cmp79 = ($call75|0)<($23|0);
   $spec$store$select79 = $cmp79 ? $23 : $call75;
   HEAP32[$high76>>2] = $spec$store$select79;
   $wait85 = ((($call2)) + 28|0);
   HEAP32[$wait85>>2] = 105;
   $call86 = (_P_Random()|0);
   $and = $call86 & 1;
   $status87 = ((($call2)) + 36|0);
   HEAP32[$status87>>2] = $and;
   $soundorg88 = (((($5) + (($call83*88)|0)|0)) + 44|0);
   _S_StartSound($soundorg88,18);
   break;
  }
  default: {
  }
  }
  _P_AddActivePlat($call2);
  $call81 = (_P_FindSectorFromLineTag($line,$call83)|0);
  $cmp82 = ($call81|0)>(-1);
  if ($cmp82) {
   $call8189 = $call81;$rtn$0$ph88 = 1;
  } else {
   $rtn$0$ph$lcssa = 1;
   label = 20;
   break;
  }
 }
 if ((label|0) == 20) {
  return ($rtn$0$ph$lcssa|0);
 }
 return (0)|0;
}
function _P_AddActivePlat($plat) {
 $plat = $plat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx$lcssa = 0, $cmp1 = 0, $cmp1$1 = 0, $cmp1$10 = 0, $cmp1$11 = 0, $cmp1$12 = 0, $cmp1$13 = 0, $cmp1$14 = 0, $cmp1$15 = 0, $cmp1$16 = 0;
 var $cmp1$17 = 0, $cmp1$18 = 0, $cmp1$19 = 0, $cmp1$2 = 0, $cmp1$20 = 0, $cmp1$21 = 0, $cmp1$22 = 0, $cmp1$23 = 0, $cmp1$24 = 0, $cmp1$25 = 0, $cmp1$26 = 0, $cmp1$27 = 0, $cmp1$28 = 0, $cmp1$29 = 0, $cmp1$3 = 0, $cmp1$4 = 0, $cmp1$5 = 0, $cmp1$6 = 0, $cmp1$7 = 0, $cmp1$8 = 0;
 var $cmp1$9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[47608]|0;
 $cmp1 = ($0|0)==(0|0);
 do {
  if ($cmp1) {
   $arrayidx$lcssa = 190432;
  } else {
   $1 = HEAP32[(190436)>>2]|0;
   $cmp1$1 = ($1|0)==(0|0);
   if ($cmp1$1) {
    $arrayidx$lcssa = (190436);
   } else {
    $2 = HEAP32[(190440)>>2]|0;
    $cmp1$2 = ($2|0)==(0|0);
    if ($cmp1$2) {
     $arrayidx$lcssa = (190440);
    } else {
     $3 = HEAP32[(190444)>>2]|0;
     $cmp1$3 = ($3|0)==(0|0);
     if ($cmp1$3) {
      $arrayidx$lcssa = (190444);
     } else {
      $4 = HEAP32[(190448)>>2]|0;
      $cmp1$4 = ($4|0)==(0|0);
      if ($cmp1$4) {
       $arrayidx$lcssa = (190448);
      } else {
       $5 = HEAP32[(190452)>>2]|0;
       $cmp1$5 = ($5|0)==(0|0);
       if ($cmp1$5) {
        $arrayidx$lcssa = (190452);
       } else {
        $6 = HEAP32[(190456)>>2]|0;
        $cmp1$6 = ($6|0)==(0|0);
        if ($cmp1$6) {
         $arrayidx$lcssa = (190456);
        } else {
         $7 = HEAP32[(190460)>>2]|0;
         $cmp1$7 = ($7|0)==(0|0);
         if ($cmp1$7) {
          $arrayidx$lcssa = (190460);
         } else {
          $8 = HEAP32[(190464)>>2]|0;
          $cmp1$8 = ($8|0)==(0|0);
          if ($cmp1$8) {
           $arrayidx$lcssa = (190464);
          } else {
           $9 = HEAP32[(190468)>>2]|0;
           $cmp1$9 = ($9|0)==(0|0);
           if ($cmp1$9) {
            $arrayidx$lcssa = (190468);
           } else {
            $10 = HEAP32[(190472)>>2]|0;
            $cmp1$10 = ($10|0)==(0|0);
            if ($cmp1$10) {
             $arrayidx$lcssa = (190472);
            } else {
             $11 = HEAP32[(190476)>>2]|0;
             $cmp1$11 = ($11|0)==(0|0);
             if ($cmp1$11) {
              $arrayidx$lcssa = (190476);
             } else {
              $12 = HEAP32[(190480)>>2]|0;
              $cmp1$12 = ($12|0)==(0|0);
              if ($cmp1$12) {
               $arrayidx$lcssa = (190480);
              } else {
               $13 = HEAP32[(190484)>>2]|0;
               $cmp1$13 = ($13|0)==(0|0);
               if ($cmp1$13) {
                $arrayidx$lcssa = (190484);
               } else {
                $14 = HEAP32[(190488)>>2]|0;
                $cmp1$14 = ($14|0)==(0|0);
                if ($cmp1$14) {
                 $arrayidx$lcssa = (190488);
                } else {
                 $15 = HEAP32[(190492)>>2]|0;
                 $cmp1$15 = ($15|0)==(0|0);
                 if ($cmp1$15) {
                  $arrayidx$lcssa = (190492);
                 } else {
                  $16 = HEAP32[(190496)>>2]|0;
                  $cmp1$16 = ($16|0)==(0|0);
                  if ($cmp1$16) {
                   $arrayidx$lcssa = (190496);
                  } else {
                   $17 = HEAP32[(190500)>>2]|0;
                   $cmp1$17 = ($17|0)==(0|0);
                   if ($cmp1$17) {
                    $arrayidx$lcssa = (190500);
                   } else {
                    $18 = HEAP32[(190504)>>2]|0;
                    $cmp1$18 = ($18|0)==(0|0);
                    if ($cmp1$18) {
                     $arrayidx$lcssa = (190504);
                    } else {
                     $19 = HEAP32[(190508)>>2]|0;
                     $cmp1$19 = ($19|0)==(0|0);
                     if ($cmp1$19) {
                      $arrayidx$lcssa = (190508);
                      break;
                     }
                     $20 = HEAP32[(190512)>>2]|0;
                     $cmp1$20 = ($20|0)==(0|0);
                     if ($cmp1$20) {
                      $arrayidx$lcssa = (190512);
                      break;
                     }
                     $21 = HEAP32[(190516)>>2]|0;
                     $cmp1$21 = ($21|0)==(0|0);
                     if ($cmp1$21) {
                      $arrayidx$lcssa = (190516);
                      break;
                     }
                     $22 = HEAP32[(190520)>>2]|0;
                     $cmp1$22 = ($22|0)==(0|0);
                     if ($cmp1$22) {
                      $arrayidx$lcssa = (190520);
                      break;
                     }
                     $23 = HEAP32[(190524)>>2]|0;
                     $cmp1$23 = ($23|0)==(0|0);
                     if ($cmp1$23) {
                      $arrayidx$lcssa = (190524);
                      break;
                     }
                     $24 = HEAP32[(190528)>>2]|0;
                     $cmp1$24 = ($24|0)==(0|0);
                     if ($cmp1$24) {
                      $arrayidx$lcssa = (190528);
                      break;
                     }
                     $25 = HEAP32[(190532)>>2]|0;
                     $cmp1$25 = ($25|0)==(0|0);
                     if ($cmp1$25) {
                      $arrayidx$lcssa = (190532);
                      break;
                     }
                     $26 = HEAP32[(190536)>>2]|0;
                     $cmp1$26 = ($26|0)==(0|0);
                     if ($cmp1$26) {
                      $arrayidx$lcssa = (190536);
                      break;
                     }
                     $27 = HEAP32[(190540)>>2]|0;
                     $cmp1$27 = ($27|0)==(0|0);
                     if ($cmp1$27) {
                      $arrayidx$lcssa = (190540);
                      break;
                     }
                     $28 = HEAP32[(190544)>>2]|0;
                     $cmp1$28 = ($28|0)==(0|0);
                     if ($cmp1$28) {
                      $arrayidx$lcssa = (190544);
                      break;
                     }
                     $29 = HEAP32[(190548)>>2]|0;
                     $cmp1$29 = ($29|0)==(0|0);
                     if ($cmp1$29) {
                      $arrayidx$lcssa = (190548);
                      break;
                     }
                     _I_Error(152937,$vararg_buffer);
                     // unreachable;
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 HEAP32[$arrayidx$lcssa>>2] = $plat;
 STACKTOP = sp;return;
}
function _EV_StopPlat($line) {
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $acv = 0, $arrayidx = 0, $cmp2 = 0, $cmp6 = 0, $conv = 0, $exitcond = 0, $inc = 0, $j$010 = 0, $oldstatus = 0, $status = 0, $tag = 0, $tag5 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tag5 = ((($line)) + 20|0);
 $j$010 = 0;
 while(1) {
  $arrayidx = (190432 + ($j$010<<2)|0);
  $0 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($0|0)==(0|0);
  if (!($tobool)) {
   $status = ((($0)) + 36|0);
   $1 = HEAP32[$status>>2]|0;
   $cmp2 = ($1|0)==(3);
   if (!($cmp2)) {
    $tag = ((($0)) + 48|0);
    $2 = HEAP32[$tag>>2]|0;
    $3 = HEAP16[$tag5>>1]|0;
    $conv = $3 << 16 >> 16;
    $cmp6 = ($2|0)==($conv|0);
    if ($cmp6) {
     $oldstatus = ((($0)) + 40|0);
     HEAP32[$oldstatus>>2] = $1;
     HEAP32[$status>>2] = 3;
     $acv = ((($0)) + 8|0);
     HEAP32[$acv>>2] = 0;
    }
   }
  }
  $inc = (($j$010) + 1)|0;
  $exitcond = ($inc|0)==(30);
  if ($exitcond) {
   break;
  } else {
   $j$010 = $inc;
  }
 }
 return;
}
function _P_CheckAmmo($player) {
 $player = $player|0;
 var $$ = 0, $$pre = 0, $$pre$i = 0, $$pre36 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $action$i = 0;
 var $ammo1 = 0, $arrayidx$i = 0, $arrayidx10 = 0, $arrayidx14 = 0, $arrayidx16 = 0, $arrayidx2$i = 0, $arrayidx23 = 0, $arrayidx27 = 0, $arrayidx35 = 0, $arrayidx39 = 0, $arrayidx45 = 0, $arrayidx61 = 0, $arrayidx67 = 0, $arrayidx71 = 0, $arrayidx77 = 0, $cmp11 = 0, $cmp19 = 0, $cmp28 = 0, $cmp28$us = 0, $cmp30 = 0;
 var $cmp8 = 0, $cmp82 = 0, $cmp82$us = 0, $downstate = 0, $misc1$i = 0, $misc2$i = 0, $nextstate$i = 0, $or$cond = 0, $or$cond1 = 0, $or$cond1$us = 0, $or$cond2 = 0, $or$cond2$us = 0, $or$cond37 = 0, $pendingweapon97 = 0, $readyweapon = 0, $retval$0 = 0, $shl$i = 0, $shl8$i = 0, $stnum$addr$0$i = 0, $stnum$addr$0$i$in = 0;
 var $switch$select = 0, $switch$select34 = 0, $switch$selectcmp = 0, $switch$selectcmp33 = 0, $sx$i = 0, $sy$i = 0, $tics$i = 0, $tics4$i = 0, $tobool = 0, $tobool$i = 0, $tobool10$i = 0, $tobool15$i = 0, $tobool17 = 0, $tobool21$i = 0, $tobool24 = 0, $tobool24$us = 0, $tobool36 = 0, $tobool36$us = 0, $tobool40 = 0, $tobool40$us = 0;
 var $tobool46 = 0, $tobool46$us = 0, $tobool5$i = 0, $tobool50 = 0, $tobool50$us = 0, $tobool56 = 0, $tobool56$us = 0, $tobool62 = 0, $tobool62$us = 0, $tobool68 = 0, $tobool68$us = 0, $tobool72 = 0, $tobool72$us = 0, $tobool78 = 0, $tobool78$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $readyweapon = ((($player)) + 120|0);
 $0 = HEAP32[$readyweapon>>2]|0;
 $ammo1 = (496 + (($0*24)|0)|0);
 $1 = HEAP32[$ammo1>>2]|0;
 $cmp8 = ($1|0)==(5);
 if ($cmp8) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $switch$selectcmp33 = ($0|0)==(6);
 $switch$selectcmp = ($0|0)==(8);
 $switch$select = $switch$selectcmp ? 2 : 1;
 $switch$select34 = $switch$selectcmp33 ? 40 : $switch$select;
 $arrayidx10 = (((($player)) + 164|0) + ($1<<2)|0);
 $2 = HEAP32[$arrayidx10>>2]|0;
 $cmp11 = ($2|0)<($switch$select34|0);
 if (!($cmp11)) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $arrayidx14 = ((($player)) + 148|0);
 $3 = HEAP32[$arrayidx14>>2]|0;
 $tobool = ($3|0)==(0);
 $arrayidx23 = ((($player)) + 160|0);
 $pendingweapon97 = ((($player)) + 124|0);
 $arrayidx16 = ((($player)) + 172|0);
 $4 = HEAP32[32140]|0;
 $cmp19 = ($4|0)!=(0);
 $arrayidx35 = ((($player)) + 140|0);
 $arrayidx27 = ((($player)) + 168|0);
 $cmp30 = ($4|0)==(2);
 $arrayidx45 = ((($player)) + 136|0);
 $arrayidx39 = ((($player)) + 164|0);
 $arrayidx61 = ((($player)) + 156|0);
 $arrayidx67 = ((($player)) + 144|0);
 $arrayidx77 = ((($player)) + 152|0);
 $arrayidx71 = ((($player)) + 176|0);
 do {
  if ($tobool) {
   $$pre36 = HEAP32[$arrayidx23>>2]|0;
   $tobool24$us = ($$pre36|0)==(0);
   if (!($tobool24$us)) {
    $5 = HEAP32[$arrayidx27>>2]|0;
    $cmp28$us = ($5|0)>(2);
    $or$cond1$us = $cmp28$us & $cmp30;
    if ($or$cond1$us) {
     $$sink = 8;
     break;
    }
   }
   $6 = HEAP32[$arrayidx35>>2]|0;
   $tobool36$us = ($6|0)==(0);
   if (!($tobool36$us)) {
    $7 = HEAP32[$arrayidx39>>2]|0;
    $tobool40$us = ($7|0)==(0);
    if (!($tobool40$us)) {
     $$sink = 3;
     break;
    }
   }
   $8 = HEAP32[$arrayidx45>>2]|0;
   $tobool46$us = ($8|0)==(0);
   if (!($tobool46$us)) {
    $9 = HEAP32[$arrayidx27>>2]|0;
    $tobool50$us = ($9|0)==(0);
    if (!($tobool50$us)) {
     $$sink = 2;
     break;
    }
   }
   $10 = HEAP32[$arrayidx39>>2]|0;
   $tobool56$us = ($10|0)==(0);
   if ($tobool56$us) {
    $11 = HEAP32[$arrayidx61>>2]|0;
    $tobool62$us = ($11|0)==(0);
    if ($tobool62$us) {
     $12 = HEAP32[$arrayidx67>>2]|0;
     $tobool68$us = ($12|0)==(0);
     if (!($tobool68$us)) {
      $13 = HEAP32[$arrayidx71>>2]|0;
      $tobool72$us = ($13|0)==(0);
      if (!($tobool72$us)) {
       $$sink = 4;
       break;
      }
     }
     $14 = HEAP32[$arrayidx77>>2]|0;
     $tobool78$us = ($14|0)==(0);
     if (!($tobool78$us)) {
      $15 = HEAP32[$arrayidx16>>2]|0;
      $cmp82$us = ($15|0)>(40);
      $or$cond2$us = $cmp82$us & $cmp19;
      if ($or$cond2$us) {
       $$sink = 6;
       break;
      }
     }
     $$sink = 0;
    } else {
     $$sink = 7;
    }
   } else {
    $$sink = 1;
   }
  } else {
   $$pre = HEAP32[$arrayidx16>>2]|0;
   $tobool17 = ($$pre|0)!=(0);
   $or$cond = $tobool17 & $cmp19;
   if ($or$cond) {
    $$sink = 5;
   } else {
    $16 = HEAP32[$arrayidx23>>2]|0;
    $tobool24 = ($16|0)==(0);
    if (!($tobool24)) {
     $17 = HEAP32[$arrayidx27>>2]|0;
     $cmp28 = ($17|0)>(2);
     $or$cond1 = $cmp28 & $cmp30;
     if ($or$cond1) {
      $$sink = 8;
      break;
     }
    }
    $18 = HEAP32[$arrayidx35>>2]|0;
    $tobool36 = ($18|0)==(0);
    if (!($tobool36)) {
     $19 = HEAP32[$arrayidx39>>2]|0;
     $tobool40 = ($19|0)==(0);
     if (!($tobool40)) {
      $$sink = 3;
      break;
     }
    }
    $20 = HEAP32[$arrayidx45>>2]|0;
    $tobool46 = ($20|0)==(0);
    if (!($tobool46)) {
     $21 = HEAP32[$arrayidx27>>2]|0;
     $tobool50 = ($21|0)==(0);
     if (!($tobool50)) {
      $$sink = 2;
      break;
     }
    }
    $22 = HEAP32[$arrayidx39>>2]|0;
    $tobool56 = ($22|0)==(0);
    if ($tobool56) {
     $23 = HEAP32[$arrayidx61>>2]|0;
     $tobool62 = ($23|0)==(0);
     if ($tobool62) {
      $24 = HEAP32[$arrayidx67>>2]|0;
      $tobool68 = ($24|0)==(0);
      if (!($tobool68)) {
       $25 = HEAP32[$arrayidx71>>2]|0;
       $tobool72 = ($25|0)==(0);
       if (!($tobool72)) {
        $$sink = 4;
        break;
       }
      }
      $26 = HEAP32[$arrayidx77>>2]|0;
      $tobool78 = ($26|0)!=(0);
      $cmp82 = ($$pre|0)>(40);
      $or$cond2 = $cmp82 & $cmp19;
      $or$cond37 = $tobool78 & $or$cond2;
      $$ = $or$cond37 ? 6 : 0;
      $$sink = $$;
     } else {
      $$sink = 7;
     }
    } else {
     $$sink = 1;
    }
   }
  }
 } while(0);
 HEAP32[$pendingweapon97>>2] = $$sink;
 $downstate = (((496 + (($0*24)|0)|0)) + 8|0);
 $arrayidx$i = ((($player)) + 252|0);
 $tics4$i = ((($player)) + 256|0);
 $sy$i = ((($player)) + 264|0);
 $sx$i = ((($player)) + 260|0);
 $stnum$addr$0$i$in = $downstate;
 while(1) {
  $stnum$addr$0$i = HEAP32[$stnum$addr$0$i$in>>2]|0;
  $tobool$i = ($stnum$addr$0$i|0)==(0);
  if ($tobool$i) {
   label = 31;
   break;
  }
  $arrayidx2$i = (3488 + (($stnum$addr$0$i*28)|0)|0);
  HEAP32[$arrayidx$i>>2] = $arrayidx2$i;
  $tics$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 8|0);
  $27 = HEAP32[$tics$i>>2]|0;
  HEAP32[$tics4$i>>2] = $27;
  $misc1$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 20|0);
  $28 = HEAP32[$misc1$i>>2]|0;
  $tobool5$i = ($28|0)==(0);
  if (!($tobool5$i)) {
   $shl$i = $28 << 16;
   $misc2$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 24|0);
   HEAP32[$sx$i>>2] = $shl$i;
   $29 = HEAP32[$misc2$i>>2]|0;
   $shl8$i = $29 << 16;
   HEAP32[$sy$i>>2] = $shl8$i;
  }
  $action$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 12|0);
  $30 = HEAP32[$action$i>>2]|0;
  $tobool10$i = ($30|0)==(0|0);
  if ($tobool10$i) {
   $32 = $arrayidx2$i;$33 = $27;
  } else {
   FUNCTION_TABLE_vii[$30 & 255]($player,$arrayidx$i);
   $31 = HEAP32[$arrayidx$i>>2]|0;
   $tobool15$i = ($31|0)==(0|0);
   if ($tobool15$i) {
    $retval$0 = 0;
    label = 38;
    break;
   }
   $$pre$i = HEAP32[$tics4$i>>2]|0;
   $32 = $31;$33 = $$pre$i;
  }
  $nextstate$i = ((($32)) + 16|0);
  $tobool21$i = ($33|0)==(0);
  if ($tobool21$i) {
   $stnum$addr$0$i$in = $nextstate$i;
  } else {
   $retval$0 = 0;
   label = 38;
   break;
  }
 }
 if ((label|0) == 31) {
  HEAP32[$arrayidx$i>>2] = 0;
  $retval$0 = 0;
  return ($retval$0|0);
 }
 else if ((label|0) == 38) {
  return ($retval$0|0);
 }
 return (0)|0;
}
function _P_FireWeapon($player) {
 $player = $player|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $action$i = 0, $arrayidx$i = 0, $arrayidx2$i = 0, $atkstate = 0, $call = 0, $misc1$i = 0, $misc2$i = 0, $nextstate$i = 0, $readyweapon = 0;
 var $shl$i = 0, $shl8$i = 0, $stnum$addr$0$i = 0, $stnum$addr$0$i$in = 0, $sx$i = 0, $sy$i = 0, $tics$i = 0, $tics4$i = 0, $tobool = 0, $tobool$i = 0, $tobool10$i = 0, $tobool15$i = 0, $tobool21$i = 0, $tobool5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_P_CheckAmmo($player)|0);
 $tobool = ($call|0)==(0);
 if ($tobool) {
  return;
 }
 $0 = HEAP32[$player>>2]|0;
 (_P_SetMobjState($0,154)|0);
 $readyweapon = ((($player)) + 120|0);
 $1 = HEAP32[$readyweapon>>2]|0;
 $atkstate = (((496 + (($1*24)|0)|0)) + 16|0);
 $arrayidx$i = ((($player)) + 252|0);
 $tics4$i = ((($player)) + 256|0);
 $sy$i = ((($player)) + 264|0);
 $sx$i = ((($player)) + 260|0);
 $stnum$addr$0$i$in = $atkstate;
 while(1) {
  $stnum$addr$0$i = HEAP32[$stnum$addr$0$i$in>>2]|0;
  $tobool$i = ($stnum$addr$0$i|0)==(0);
  if ($tobool$i) {
   label = 4;
   break;
  }
  $arrayidx2$i = (3488 + (($stnum$addr$0$i*28)|0)|0);
  HEAP32[$arrayidx$i>>2] = $arrayidx2$i;
  $tics$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 8|0);
  $2 = HEAP32[$tics$i>>2]|0;
  HEAP32[$tics4$i>>2] = $2;
  $misc1$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 20|0);
  $3 = HEAP32[$misc1$i>>2]|0;
  $tobool5$i = ($3|0)==(0);
  if (!($tobool5$i)) {
   $shl$i = $3 << 16;
   $misc2$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 24|0);
   HEAP32[$sx$i>>2] = $shl$i;
   $4 = HEAP32[$misc2$i>>2]|0;
   $shl8$i = $4 << 16;
   HEAP32[$sy$i>>2] = $shl8$i;
  }
  $action$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 12|0);
  $5 = HEAP32[$action$i>>2]|0;
  $tobool10$i = ($5|0)==(0|0);
  if ($tobool10$i) {
   $7 = $arrayidx2$i;$8 = $2;
  } else {
   FUNCTION_TABLE_vii[$5 & 255]($player,$arrayidx$i);
   $6 = HEAP32[$arrayidx$i>>2]|0;
   $tobool15$i = ($6|0)==(0|0);
   if ($tobool15$i) {
    break;
   }
   $$pre$i = HEAP32[$tics4$i>>2]|0;
   $7 = $6;$8 = $$pre$i;
  }
  $nextstate$i = ((($7)) + 16|0);
  $tobool21$i = ($8|0)==(0);
  if ($tobool21$i) {
   $stnum$addr$0$i$in = $nextstate$i;
  } else {
   break;
  }
 }
 if ((label|0) == 4) {
  HEAP32[$arrayidx$i>>2] = 0;
 }
 $9 = HEAP32[$player>>2]|0;
 _P_NoiseAlert($9,$9);
 return;
}
function _P_DropWeapon($player) {
 $player = $player|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $action$i = 0, $arrayidx$i = 0, $arrayidx2$i = 0, $downstate = 0, $misc1$i = 0, $misc2$i = 0, $nextstate$i = 0, $readyweapon = 0, $shl$i = 0, $shl8$i = 0, $stnum$addr$0$i = 0;
 var $stnum$addr$0$i$in = 0, $sx$i = 0, $sy$i = 0, $tics$i = 0, $tics4$i = 0, $tobool$i = 0, $tobool10$i = 0, $tobool15$i = 0, $tobool21$i = 0, $tobool5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $readyweapon = ((($player)) + 120|0);
 $0 = HEAP32[$readyweapon>>2]|0;
 $downstate = (((496 + (($0*24)|0)|0)) + 8|0);
 $arrayidx$i = ((($player)) + 252|0);
 $tics4$i = ((($player)) + 256|0);
 $sy$i = ((($player)) + 264|0);
 $sx$i = ((($player)) + 260|0);
 $stnum$addr$0$i$in = $downstate;
 while(1) {
  $stnum$addr$0$i = HEAP32[$stnum$addr$0$i$in>>2]|0;
  $tobool$i = ($stnum$addr$0$i|0)==(0);
  if ($tobool$i) {
   label = 3;
   break;
  }
  $arrayidx2$i = (3488 + (($stnum$addr$0$i*28)|0)|0);
  HEAP32[$arrayidx$i>>2] = $arrayidx2$i;
  $tics$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 8|0);
  $1 = HEAP32[$tics$i>>2]|0;
  HEAP32[$tics4$i>>2] = $1;
  $misc1$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 20|0);
  $2 = HEAP32[$misc1$i>>2]|0;
  $tobool5$i = ($2|0)==(0);
  if (!($tobool5$i)) {
   $shl$i = $2 << 16;
   $misc2$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 24|0);
   HEAP32[$sx$i>>2] = $shl$i;
   $3 = HEAP32[$misc2$i>>2]|0;
   $shl8$i = $3 << 16;
   HEAP32[$sy$i>>2] = $shl8$i;
  }
  $action$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 12|0);
  $4 = HEAP32[$action$i>>2]|0;
  $tobool10$i = ($4|0)==(0|0);
  if ($tobool10$i) {
   $6 = $arrayidx2$i;$7 = $1;
  } else {
   FUNCTION_TABLE_vii[$4 & 255]($player,$arrayidx$i);
   $5 = HEAP32[$arrayidx$i>>2]|0;
   $tobool15$i = ($5|0)==(0|0);
   if ($tobool15$i) {
    label = 10;
    break;
   }
   $$pre$i = HEAP32[$tics4$i>>2]|0;
   $6 = $5;$7 = $$pre$i;
  }
  $nextstate$i = ((($6)) + 16|0);
  $tobool21$i = ($7|0)==(0);
  if ($tobool21$i) {
   $stnum$addr$0$i$in = $nextstate$i;
  } else {
   label = 10;
   break;
  }
 }
 if ((label|0) == 3) {
  HEAP32[$arrayidx$i>>2] = 0;
  return;
 }
 else if ((label|0) == 10) {
  return;
 }
}
function _A_WeaponReady($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $action$i = 0, $add = 0, $add39 = 0, $and32 = 0, $and35 = 0, $arrayidx$i = 0, $arrayidx2$i = 0, $arrayidx33 = 0, $arrayidx37 = 0, $attackdown = 0, $bob = 0, $buttons = 0, $call34 = 0, $call38 = 0, $cmp = 0;
 var $cmp11 = 0, $cmp3 = 0, $cmp5 = 0, $cmp7 = 0, $downstate = 0, $health = 0, $misc1$i = 0, $misc2$i = 0, $mul = 0, $nextstate$i = 0, $or$cond = 0, $pendingweapon = 0, $readyweapon = 0, $shl$i = 0, $shl8$i = 0, $state = 0, $stnum$addr$0$i = 0, $stnum$addr$0$i$in = 0, $sx = 0, $sx$i = 0;
 var $sy = 0, $sy$i = 0, $tics$i = 0, $tics4$i = 0, $tobool = 0, $tobool$i = 0, $tobool10$i = 0, $tobool15$i = 0, $tobool16 = 0, $tobool18 = 0, $tobool21$i = 0, $tobool5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$player>>2]|0;
 $state = ((($0)) + 100|0);
 $1 = HEAP32[$state>>2]|0;
 $cmp = ($1|0)==((7800)|0);
 $cmp3 = ($1|0)==((7828)|0);
 $or$cond = $cmp | $cmp3;
 if ($or$cond) {
  (_P_SetMobjState($0,149)|0);
 }
 $readyweapon = ((($player)) + 120|0);
 $2 = HEAP32[$readyweapon>>2]|0;
 $cmp5 = ($2|0)==(7);
 if ($cmp5) {
  $3 = HEAP32[$psp>>2]|0;
  $cmp7 = ($3|0)==((5364)|0);
  if ($cmp7) {
   $4 = HEAP32[$player>>2]|0;
   _S_StartSound($4,11);
  }
 }
 $pendingweapon = ((($player)) + 124|0);
 $5 = HEAP32[$pendingweapon>>2]|0;
 $cmp11 = ($5|0)==(10);
 if ($cmp11) {
  $health = ((($player)) + 40|0);
  $6 = HEAP32[$health>>2]|0;
  $tobool = ($6|0)==(0);
  if (!($tobool)) {
   $buttons = ((($player)) + 13|0);
   $15 = HEAP8[$buttons>>0]|0;
   $16 = $15 & 1;
   $tobool16 = ($16<<24>>24)==(0);
   $attackdown = ((($player)) + 196|0);
   L11: do {
    if ($tobool16) {
     HEAP32[$attackdown>>2] = 0;
    } else {
     $17 = HEAP32[$attackdown>>2]|0;
     $tobool18 = ($17|0)==(0);
     if (!($tobool18)) {
      $18 = HEAP32[$readyweapon>>2]|0;
      switch ($18|0) {
      case 6: case 4:  {
       break L11;
       break;
      }
      default: {
      }
      }
     }
     HEAP32[$attackdown>>2] = 1;
     _P_FireWeapon($player);
     return;
    }
   } while(0);
   $19 = HEAP32[99557]|0;
   $mul = $19 << 7;
   $and32 = $mul & 8064;
   $bob = ((($player)) + 36|0);
   $20 = HEAP32[$bob>>2]|0;
   $arrayidx33 = ((82912) + ($and32<<2)|0);
   $21 = HEAP32[$arrayidx33>>2]|0;
   $call34 = (_FixedMul($20,$21)|0);
   $add = (($call34) + 65536)|0;
   $sx = ((($psp)) + 8|0);
   HEAP32[$sx>>2] = $add;
   $and35 = $mul & 3968;
   $22 = HEAP32[$bob>>2]|0;
   $arrayidx37 = (74720 + ($and35<<2)|0);
   $23 = HEAP32[$arrayidx37>>2]|0;
   $call38 = (_FixedMul($22,$23)|0);
   $add39 = (($call38) + 2097152)|0;
   $sy = ((($psp)) + 12|0);
   HEAP32[$sy>>2] = $add39;
   return;
  }
 }
 $7 = HEAP32[$readyweapon>>2]|0;
 $downstate = (((496 + (($7*24)|0)|0)) + 8|0);
 $arrayidx$i = ((($player)) + 252|0);
 $tics4$i = ((($player)) + 256|0);
 $sy$i = ((($player)) + 264|0);
 $sx$i = ((($player)) + 260|0);
 $stnum$addr$0$i$in = $downstate;
 while(1) {
  $stnum$addr$0$i = HEAP32[$stnum$addr$0$i$in>>2]|0;
  $tobool$i = ($stnum$addr$0$i|0)==(0);
  if ($tobool$i) {
   label = 10;
   break;
  }
  $arrayidx2$i = (3488 + (($stnum$addr$0$i*28)|0)|0);
  HEAP32[$arrayidx$i>>2] = $arrayidx2$i;
  $tics$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 8|0);
  $8 = HEAP32[$tics$i>>2]|0;
  HEAP32[$tics4$i>>2] = $8;
  $misc1$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 20|0);
  $9 = HEAP32[$misc1$i>>2]|0;
  $tobool5$i = ($9|0)==(0);
  if (!($tobool5$i)) {
   $shl$i = $9 << 16;
   $misc2$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 24|0);
   HEAP32[$sx$i>>2] = $shl$i;
   $10 = HEAP32[$misc2$i>>2]|0;
   $shl8$i = $10 << 16;
   HEAP32[$sy$i>>2] = $shl8$i;
  }
  $action$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 12|0);
  $11 = HEAP32[$action$i>>2]|0;
  $tobool10$i = ($11|0)==(0|0);
  if ($tobool10$i) {
   $13 = $arrayidx2$i;$14 = $8;
  } else {
   FUNCTION_TABLE_vii[$11 & 255]($player,$arrayidx$i);
   $12 = HEAP32[$arrayidx$i>>2]|0;
   $tobool15$i = ($12|0)==(0|0);
   if ($tobool15$i) {
    label = 23;
    break;
   }
   $$pre$i = HEAP32[$tics4$i>>2]|0;
   $13 = $12;$14 = $$pre$i;
  }
  $nextstate$i = ((($13)) + 16|0);
  $tobool21$i = ($14|0)==(0);
  if ($tobool21$i) {
   $stnum$addr$0$i$in = $nextstate$i;
  } else {
   label = 23;
   break;
  }
 }
 if ((label|0) == 10) {
  HEAP32[$arrayidx$i>>2] = 0;
  return;
 }
 else if ((label|0) == 23) {
  return;
 }
}
function _A_ReFire($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $buttons = 0, $cmp = 0, $health = 0, $inc = 0, $pendingweapon = 0, $refire = 0, $refire4 = 0, $tobool = 0, $tobool3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $buttons = ((($player)) + 13|0);
 $0 = HEAP8[$buttons>>0]|0;
 $1 = $0 & 1;
 $tobool = ($1<<24>>24)==(0);
 if (!($tobool)) {
  $pendingweapon = ((($player)) + 124|0);
  $2 = HEAP32[$pendingweapon>>2]|0;
  $cmp = ($2|0)==(10);
  if ($cmp) {
   $health = ((($player)) + 40|0);
   $3 = HEAP32[$health>>2]|0;
   $tobool3 = ($3|0)==(0);
   if (!($tobool3)) {
    $refire = ((($player)) + 208|0);
    $4 = HEAP32[$refire>>2]|0;
    $inc = (($4) + 1)|0;
    HEAP32[$refire>>2] = $inc;
    _P_FireWeapon($player);
    return;
   }
  }
 }
 $refire4 = ((($player)) + 208|0);
 HEAP32[$refire4>>2] = 0;
 (_P_CheckAmmo($player)|0);
 return;
}
function _A_CheckReload($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_P_CheckAmmo($player)|0);
 return;
}
function _A_Lower($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $$pre$i$i = 0, $$pre$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $action$i$i = 0, $add = 0, $arrayidx$i$i = 0;
 var $arrayidx2$i$i = 0, $cmp = 0, $cmp2 = 0, $cmp3$i = 0, $health = 0, $misc1$i$i = 0, $misc2$i$i = 0, $nextstate$i$i = 0, $pendingweapon = 0, $playerstate = 0, $readyweapon = 0, $shl$i$i = 0, $shl8$i$i = 0, $state3$i = 0, $stnum$addr$0$i$i = 0, $sx$i$i = 0, $sy = 0, $sy$i10 = 0, $tics$i$i = 0, $tics4$i$i = 0;
 var $tobool = 0, $tobool$i$i = 0, $tobool10$i$i = 0, $tobool15$i$i = 0, $tobool21$i$i = 0, $tobool5$i$i = 0, $upstate$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sy = ((($psp)) + 12|0);
 $0 = HEAP32[$sy>>2]|0;
 $add = (($0) + 393216)|0;
 HEAP32[$sy>>2] = $add;
 $cmp = ($0|0)<(7995392);
 if ($cmp) {
  return;
 }
 $playerstate = ((($player)) + 4|0);
 $1 = HEAP32[$playerstate>>2]|0;
 $cmp2 = ($1|0)==(1);
 if ($cmp2) {
  HEAP32[$sy>>2] = 8388608;
  return;
 }
 $health = ((($player)) + 40|0);
 $2 = HEAP32[$health>>2]|0;
 $tobool = ($2|0)==(0);
 if ($tobool) {
  $state3$i = ((($player)) + 252|0);
  HEAP32[$state3$i>>2] = 0;
  return;
 }
 $pendingweapon = ((($player)) + 124|0);
 $3 = HEAP32[$pendingweapon>>2]|0;
 $readyweapon = ((($player)) + 120|0);
 HEAP32[$readyweapon>>2] = $3;
 $cmp3$i = ($3|0)==(7);
 if ($cmp3$i) {
  $4 = HEAP32[$player>>2]|0;
  _S_StartSound($4,10);
  $$pre$i9 = HEAP32[$pendingweapon>>2]|0;
  $5 = $$pre$i9;
 } else {
  $5 = $3;
 }
 $upstate$i = (((496 + (($5*24)|0)|0)) + 4|0);
 $6 = HEAP32[$upstate$i>>2]|0;
 HEAP32[$pendingweapon>>2] = 10;
 $sy$i10 = ((($player)) + 264|0);
 HEAP32[$sy$i10>>2] = 8388608;
 $arrayidx$i$i = ((($player)) + 252|0);
 $tics4$i$i = ((($player)) + 256|0);
 $sx$i$i = ((($player)) + 260|0);
 $stnum$addr$0$i$i = $6;
 while(1) {
  $tobool$i$i = ($stnum$addr$0$i$i|0)==(0);
  if ($tobool$i$i) {
   label = 10;
   break;
  }
  $arrayidx2$i$i = (3488 + (($stnum$addr$0$i$i*28)|0)|0);
  HEAP32[$arrayidx$i$i>>2] = $arrayidx2$i$i;
  $tics$i$i = (((3488 + (($stnum$addr$0$i$i*28)|0)|0)) + 8|0);
  $7 = HEAP32[$tics$i$i>>2]|0;
  HEAP32[$tics4$i$i>>2] = $7;
  $misc1$i$i = (((3488 + (($stnum$addr$0$i$i*28)|0)|0)) + 20|0);
  $8 = HEAP32[$misc1$i$i>>2]|0;
  $tobool5$i$i = ($8|0)==(0);
  if (!($tobool5$i$i)) {
   $misc2$i$i = (((3488 + (($stnum$addr$0$i$i*28)|0)|0)) + 24|0);
   $shl$i$i = $8 << 16;
   HEAP32[$sx$i$i>>2] = $shl$i$i;
   $9 = HEAP32[$misc2$i$i>>2]|0;
   $shl8$i$i = $9 << 16;
   HEAP32[$sy$i10>>2] = $shl8$i$i;
  }
  $action$i$i = (((3488 + (($stnum$addr$0$i$i*28)|0)|0)) + 12|0);
  $10 = HEAP32[$action$i$i>>2]|0;
  $tobool10$i$i = ($10|0)==(0|0);
  if ($tobool10$i$i) {
   $12 = $arrayidx2$i$i;$14 = $7;
  } else {
   FUNCTION_TABLE_vii[$10 & 255]($player,$arrayidx$i$i);
   $11 = HEAP32[$arrayidx$i$i>>2]|0;
   $tobool15$i$i = ($11|0)==(0|0);
   if ($tobool15$i$i) {
    label = 17;
    break;
   }
   $$pre$i$i = HEAP32[$tics4$i$i>>2]|0;
   $12 = $11;$14 = $$pre$i$i;
  }
  $nextstate$i$i = ((($12)) + 16|0);
  $13 = HEAP32[$nextstate$i$i>>2]|0;
  $tobool21$i$i = ($14|0)==(0);
  if ($tobool21$i$i) {
   $stnum$addr$0$i$i = $13;
  } else {
   label = 17;
   break;
  }
 }
 if ((label|0) == 10) {
  HEAP32[$arrayidx$i$i>>2] = 0;
  return;
 }
 else if ((label|0) == 17) {
  return;
 }
}
function _A_Raise($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $action$i = 0, $arrayidx$i = 0, $arrayidx2$i = 0, $cmp = 0, $misc1$i = 0, $misc2$i = 0, $nextstate$i = 0, $readystate = 0, $readyweapon = 0, $shl$i = 0;
 var $shl8$i = 0, $stnum$addr$0$i = 0, $stnum$addr$0$i$in = 0, $sub = 0, $sx$i = 0, $sy = 0, $sy$i = 0, $tics$i = 0, $tics4$i = 0, $tobool$i = 0, $tobool10$i = 0, $tobool15$i = 0, $tobool21$i = 0, $tobool5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sy = ((($psp)) + 12|0);
 $0 = HEAP32[$sy>>2]|0;
 $sub = (($0) + -393216)|0;
 HEAP32[$sy>>2] = $sub;
 $cmp = ($0|0)>(2490368);
 if ($cmp) {
  return;
 }
 HEAP32[$sy>>2] = 2097152;
 $readyweapon = ((($player)) + 120|0);
 $1 = HEAP32[$readyweapon>>2]|0;
 $readystate = (((496 + (($1*24)|0)|0)) + 12|0);
 $arrayidx$i = ((($player)) + 252|0);
 $tics4$i = ((($player)) + 256|0);
 $sy$i = ((($player)) + 264|0);
 $sx$i = ((($player)) + 260|0);
 $stnum$addr$0$i$in = $readystate;
 while(1) {
  $stnum$addr$0$i = HEAP32[$stnum$addr$0$i$in>>2]|0;
  $tobool$i = ($stnum$addr$0$i|0)==(0);
  if ($tobool$i) {
   label = 4;
   break;
  }
  $arrayidx2$i = (3488 + (($stnum$addr$0$i*28)|0)|0);
  HEAP32[$arrayidx$i>>2] = $arrayidx2$i;
  $tics$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 8|0);
  $2 = HEAP32[$tics$i>>2]|0;
  HEAP32[$tics4$i>>2] = $2;
  $misc1$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 20|0);
  $3 = HEAP32[$misc1$i>>2]|0;
  $tobool5$i = ($3|0)==(0);
  if (!($tobool5$i)) {
   $shl$i = $3 << 16;
   $misc2$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 24|0);
   HEAP32[$sx$i>>2] = $shl$i;
   $4 = HEAP32[$misc2$i>>2]|0;
   $shl8$i = $4 << 16;
   HEAP32[$sy$i>>2] = $shl8$i;
  }
  $action$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 12|0);
  $5 = HEAP32[$action$i>>2]|0;
  $tobool10$i = ($5|0)==(0|0);
  if ($tobool10$i) {
   $7 = $arrayidx2$i;$8 = $2;
  } else {
   FUNCTION_TABLE_vii[$5 & 255]($player,$arrayidx$i);
   $6 = HEAP32[$arrayidx$i>>2]|0;
   $tobool15$i = ($6|0)==(0|0);
   if ($tobool15$i) {
    label = 11;
    break;
   }
   $$pre$i = HEAP32[$tics4$i>>2]|0;
   $7 = $6;$8 = $$pre$i;
  }
  $nextstate$i = ((($7)) + 16|0);
  $tobool21$i = ($8|0)==(0);
  if ($tobool21$i) {
   $stnum$addr$0$i$in = $nextstate$i;
  } else {
   label = 11;
   break;
  }
 }
 if ((label|0) == 4) {
  HEAP32[$arrayidx$i>>2] = 0;
  return;
 }
 else if ((label|0) == 11) {
  return;
 }
}
function _A_GunFlash($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $action$i = 0, $arrayidx$i = 0, $arrayidx2$i = 0, $flashstate = 0, $misc1$i = 0, $misc2$i = 0, $nextstate$i = 0, $readyweapon = 0, $shl$i = 0, $shl8$i = 0;
 var $stnum$addr$0$i = 0, $stnum$addr$0$i$in = 0, $sx$i = 0, $sy$i = 0, $tics$i = 0, $tics4$i = 0, $tobool$i = 0, $tobool10$i = 0, $tobool15$i = 0, $tobool21$i = 0, $tobool5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$player>>2]|0;
 (_P_SetMobjState($0,155)|0);
 $readyweapon = ((($player)) + 120|0);
 $1 = HEAP32[$readyweapon>>2]|0;
 $flashstate = (((496 + (($1*24)|0)|0)) + 20|0);
 $arrayidx$i = ((($player)) + 268|0);
 $tics4$i = ((($player)) + 272|0);
 $sy$i = ((($player)) + 280|0);
 $sx$i = ((($player)) + 276|0);
 $stnum$addr$0$i$in = $flashstate;
 while(1) {
  $stnum$addr$0$i = HEAP32[$stnum$addr$0$i$in>>2]|0;
  $tobool$i = ($stnum$addr$0$i|0)==(0);
  if ($tobool$i) {
   label = 3;
   break;
  }
  $arrayidx2$i = (3488 + (($stnum$addr$0$i*28)|0)|0);
  HEAP32[$arrayidx$i>>2] = $arrayidx2$i;
  $tics$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 8|0);
  $2 = HEAP32[$tics$i>>2]|0;
  HEAP32[$tics4$i>>2] = $2;
  $misc1$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 20|0);
  $3 = HEAP32[$misc1$i>>2]|0;
  $tobool5$i = ($3|0)==(0);
  if (!($tobool5$i)) {
   $shl$i = $3 << 16;
   $misc2$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 24|0);
   HEAP32[$sx$i>>2] = $shl$i;
   $4 = HEAP32[$misc2$i>>2]|0;
   $shl8$i = $4 << 16;
   HEAP32[$sy$i>>2] = $shl8$i;
  }
  $action$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 12|0);
  $5 = HEAP32[$action$i>>2]|0;
  $tobool10$i = ($5|0)==(0|0);
  if ($tobool10$i) {
   $7 = $arrayidx2$i;$8 = $2;
  } else {
   FUNCTION_TABLE_vii[$5 & 255]($player,$arrayidx$i);
   $6 = HEAP32[$arrayidx$i>>2]|0;
   $tobool15$i = ($6|0)==(0|0);
   if ($tobool15$i) {
    label = 10;
    break;
   }
   $$pre$i = HEAP32[$tics4$i>>2]|0;
   $7 = $6;$8 = $$pre$i;
  }
  $nextstate$i = ((($7)) + 16|0);
  $tobool21$i = ($8|0)==(0);
  if ($tobool21$i) {
   $stnum$addr$0$i$in = $nextstate$i;
  } else {
   label = 10;
   break;
  }
 }
 if ((label|0) == 3) {
  HEAP32[$arrayidx$i>>2] = 0;
  return;
 }
 else if ((label|0) == 10) {
  return;
 }
}
function _A_Punch($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add5 = 0, $angle1 = 0, $angle18 = 0, $arrayidx = 0, $call = 0;
 var $call16 = 0, $call2 = 0, $call3 = 0, $call7 = 0, $mul = 0, $rem = 0, $shl = 0, $shl4 = 0, $spec$select = 0, $sub = 0, $tobool = 0, $tobool9 = 0, $x = 0, $x14 = 0, $y = 0, $y15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_P_Random()|0);
 $rem = (($call|0) % 10)&-1;
 $add = $rem << 1;
 $shl = (($add) + 2)|0;
 $arrayidx = ((($player)) + 56|0);
 $0 = HEAP32[$arrayidx>>2]|0;
 $tobool = ($0|0)==(0);
 $mul = ($shl*10)|0;
 $spec$select = $tobool ? $shl : $mul;
 $1 = HEAP32[$player>>2]|0;
 $angle1 = ((($1)) + 32|0);
 $2 = HEAP32[$angle1>>2]|0;
 $call2 = (_P_Random()|0);
 $call3 = (_P_Random()|0);
 $sub = (($call2) - ($call3))|0;
 $shl4 = $sub << 18;
 $add5 = (($shl4) + ($2))|0;
 $3 = HEAP32[$player>>2]|0;
 $call7 = (_P_AimLineAttack($3,$add5,4194304)|0);
 $4 = HEAP32[$player>>2]|0;
 _P_LineAttack($4,$add5,4194304,$call7,$spec$select);
 $5 = HEAP32[99434]|0;
 $tobool9 = ($5|0)==(0|0);
 if ($tobool9) {
  return;
 }
 $6 = HEAP32[$player>>2]|0;
 _S_StartSound($6,83);
 $7 = HEAP32[$player>>2]|0;
 $x = ((($7)) + 12|0);
 $8 = HEAP32[$x>>2]|0;
 $y = ((($7)) + 16|0);
 $9 = HEAP32[$y>>2]|0;
 $10 = HEAP32[99434]|0;
 $x14 = ((($10)) + 12|0);
 $11 = HEAP32[$x14>>2]|0;
 $y15 = ((($10)) + 16|0);
 $12 = HEAP32[$y15>>2]|0;
 $call16 = (_R_PointToAngle2($8,$9,$11,$12)|0);
 $13 = HEAP32[$player>>2]|0;
 $angle18 = ((($13)) + 32|0);
 HEAP32[$angle18>>2] = $call16;
 return;
}
function _A_Saw($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add24 = 0, $add4 = 0, $add43 = 0, $angle1 = 0;
 var $angle16 = 0, $call = 0, $call14 = 0, $call2 = 0, $call3 = 0, $call6 = 0, $cmp = 0, $cmp22 = 0, $cmp35 = 0, $flags = 0, $mul = 0, $or = 0, $rem = 0, $shl = 0, $sub = 0, $sub17 = 0, $sub29 = 0, $sub37 = 0, $sub37$sink = 0, $tobool = 0;
 var $x = 0, $x12 = 0, $y = 0, $y13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_P_Random()|0);
 $rem = (($call|0) % 10)&-1;
 $add = $rem << 1;
 $mul = (($add) + 2)|0;
 $0 = HEAP32[$player>>2]|0;
 $angle1 = ((($0)) + 32|0);
 $1 = HEAP32[$angle1>>2]|0;
 $call2 = (_P_Random()|0);
 $call3 = (_P_Random()|0);
 $sub = (($call2) - ($call3))|0;
 $shl = $sub << 18;
 $add4 = (($shl) + ($1))|0;
 $2 = HEAP32[$player>>2]|0;
 $call6 = (_P_AimLineAttack($2,$add4,4194305)|0);
 $3 = HEAP32[$player>>2]|0;
 _P_LineAttack($3,$add4,4194305,$call6,$mul);
 $4 = HEAP32[99434]|0;
 $tobool = ($4|0)==(0|0);
 $5 = HEAP32[$player>>2]|0;
 if ($tobool) {
  _S_StartSound($5,12);
  return;
 }
 _S_StartSound($5,13);
 $6 = HEAP32[$player>>2]|0;
 $x = ((($6)) + 12|0);
 $7 = HEAP32[$x>>2]|0;
 $y = ((($6)) + 16|0);
 $8 = HEAP32[$y>>2]|0;
 $9 = HEAP32[99434]|0;
 $x12 = ((($9)) + 12|0);
 $10 = HEAP32[$x12>>2]|0;
 $y13 = ((($9)) + 16|0);
 $11 = HEAP32[$y13>>2]|0;
 $call14 = (_R_PointToAngle2($7,$8,$10,$11)|0);
 $12 = HEAP32[$player>>2]|0;
 $angle16 = ((($12)) + 32|0);
 $13 = HEAP32[$angle16>>2]|0;
 $sub17 = (($call14) - ($13))|0;
 $cmp = ($sub17>>>0)>(2147483648);
 do {
  if ($cmp) {
   $cmp22 = ($sub17|0)<(-53687091);
   if ($cmp22) {
    $add24 = (($call14) + 51130563)|0;
    $sub37$sink = $add24;
    break;
   } else {
    $sub29 = (($13) + -53687091)|0;
    $sub37$sink = $sub29;
    break;
   }
  } else {
   $cmp35 = ($sub17>>>0)>(53687091);
   if ($cmp35) {
    $sub37 = (($call14) + -51130563)|0;
    $sub37$sink = $sub37;
    break;
   } else {
    $add43 = (($13) + 53687091)|0;
    $sub37$sink = $add43;
    break;
   }
  }
 } while(0);
 HEAP32[$angle16>>2] = $sub37$sink;
 $flags = ((($12)) + 104|0);
 $14 = HEAP32[$flags>>2]|0;
 $or = $14 | 128;
 HEAP32[$flags>>2] = $or;
 return;
}
function _A_FireMissile($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $ammo = 0, $arrayidx$i = 0, $arrayidx$i$sink = 0, $arrayidx$i$sink3 = 0, $arrayidx2$i = 0, $cmp$i = 0, $readyweapon = 0, $sub$i = 0, $sub1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $readyweapon = ((($player)) + 120|0);
 $0 = HEAP32[$readyweapon>>2]|0;
 $ammo = (496 + (($0*24)|0)|0);
 $1 = HEAP32[$ammo>>2]|0;
 $cmp$i = ($1|0)<(4);
 $arrayidx$i = (((($player)) + 164|0) + ($1<<2)|0);
 $sub1$i = (($1) + -4)|0;
 $arrayidx2$i = (((($player)) + 180|0) + ($sub1$i<<2)|0);
 $arrayidx$i$sink3 = $cmp$i ? $arrayidx$i : $arrayidx2$i;
 $arrayidx$i$sink = $cmp$i ? $arrayidx$i : $arrayidx2$i;
 $2 = HEAP32[$arrayidx$i$sink3>>2]|0;
 $sub$i = (($2) + -1)|0;
 HEAP32[$arrayidx$i$sink>>2] = $sub$i;
 $3 = HEAP32[$player>>2]|0;
 _P_SpawnPlayerMissile($3,33);
 return;
}
function _A_FireBFG($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $ammo = 0, $arrayidx$i = 0, $arrayidx$i$sink = 0, $arrayidx$i$sink3 = 0, $arrayidx2$i = 0, $cmp$i = 0, $readyweapon = 0, $sub$i = 0, $sub1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $readyweapon = ((($player)) + 120|0);
 $0 = HEAP32[$readyweapon>>2]|0;
 $ammo = (496 + (($0*24)|0)|0);
 $1 = HEAP32[$ammo>>2]|0;
 $cmp$i = ($1|0)<(4);
 $arrayidx$i = (((($player)) + 164|0) + ($1<<2)|0);
 $sub1$i = (($1) + -4)|0;
 $arrayidx2$i = (((($player)) + 180|0) + ($sub1$i<<2)|0);
 $arrayidx$i$sink3 = $cmp$i ? $arrayidx$i : $arrayidx2$i;
 $arrayidx$i$sink = $cmp$i ? $arrayidx$i : $arrayidx2$i;
 $2 = HEAP32[$arrayidx$i$sink3>>2]|0;
 $sub$i = (($2) + -40)|0;
 HEAP32[$arrayidx$i$sink>>2] = $sub$i;
 $3 = HEAP32[$player>>2]|0;
 _P_SpawnPlayerMissile($3,35);
 return;
}
function _A_FirePlasma($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $action$i = 0, $add = 0, $ammo = 0, $and = 0, $arrayidx$i = 0, $arrayidx$i$sink = 0;
 var $arrayidx$i$sink8 = 0, $arrayidx$i5 = 0, $arrayidx2$i = 0, $arrayidx2$i7 = 0, $call = 0, $cmp$i = 0, $flashstate = 0, $misc1$i = 0, $misc2$i = 0, $nextstate$i = 0, $readyweapon = 0, $shl$i = 0, $shl8$i = 0, $stnum$addr$0$i = 0, $sub$i = 0, $sub1$i = 0, $sx$i = 0, $sy$i = 0, $tics$i = 0, $tics4$i = 0;
 var $tobool$i = 0, $tobool10$i = 0, $tobool15$i = 0, $tobool21$i = 0, $tobool5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $readyweapon = ((($player)) + 120|0);
 $0 = HEAP32[$readyweapon>>2]|0;
 $ammo = (496 + (($0*24)|0)|0);
 $1 = HEAP32[$ammo>>2]|0;
 $cmp$i = ($1|0)<(4);
 $arrayidx$i = (((($player)) + 164|0) + ($1<<2)|0);
 $sub1$i = (($1) + -4)|0;
 $arrayidx2$i = (((($player)) + 180|0) + ($sub1$i<<2)|0);
 $arrayidx$i$sink8 = $cmp$i ? $arrayidx$i : $arrayidx2$i;
 $arrayidx$i$sink = $cmp$i ? $arrayidx$i : $arrayidx2$i;
 $2 = HEAP32[$arrayidx$i$sink8>>2]|0;
 $sub$i = (($2) + -1)|0;
 HEAP32[$arrayidx$i$sink>>2] = $sub$i;
 $flashstate = (((496 + (($0*24)|0)|0)) + 20|0);
 $3 = HEAP32[$flashstate>>2]|0;
 $call = (_P_Random()|0);
 $and = $call & 1;
 $add = (($and) + ($3))|0;
 $arrayidx$i5 = ((($player)) + 268|0);
 $tics4$i = ((($player)) + 272|0);
 $sy$i = ((($player)) + 280|0);
 $sx$i = ((($player)) + 276|0);
 $stnum$addr$0$i = $add;
 while(1) {
  $tobool$i = ($stnum$addr$0$i|0)==(0);
  if ($tobool$i) {
   label = 3;
   break;
  }
  $arrayidx2$i7 = (3488 + (($stnum$addr$0$i*28)|0)|0);
  HEAP32[$arrayidx$i5>>2] = $arrayidx2$i7;
  $tics$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 8|0);
  $4 = HEAP32[$tics$i>>2]|0;
  HEAP32[$tics4$i>>2] = $4;
  $misc1$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 20|0);
  $5 = HEAP32[$misc1$i>>2]|0;
  $tobool5$i = ($5|0)==(0);
  if (!($tobool5$i)) {
   $shl$i = $5 << 16;
   $misc2$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 24|0);
   HEAP32[$sx$i>>2] = $shl$i;
   $6 = HEAP32[$misc2$i>>2]|0;
   $shl8$i = $6 << 16;
   HEAP32[$sy$i>>2] = $shl8$i;
  }
  $action$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 12|0);
  $7 = HEAP32[$action$i>>2]|0;
  $tobool10$i = ($7|0)==(0|0);
  if ($tobool10$i) {
   $11 = $4;$9 = $arrayidx2$i7;
  } else {
   FUNCTION_TABLE_vii[$7 & 255]($player,$arrayidx$i5);
   $8 = HEAP32[$arrayidx$i5>>2]|0;
   $tobool15$i = ($8|0)==(0|0);
   if ($tobool15$i) {
    label = 10;
    break;
   }
   $$pre$i = HEAP32[$tics4$i>>2]|0;
   $11 = $$pre$i;$9 = $8;
  }
  $nextstate$i = ((($9)) + 16|0);
  $10 = HEAP32[$nextstate$i>>2]|0;
  $tobool21$i = ($11|0)==(0);
  if ($tobool21$i) {
   $stnum$addr$0$i = $10;
  } else {
   label = 10;
   break;
  }
 }
 if ((label|0) == 3) {
  HEAP32[$arrayidx$i5>>2] = 0;
  $12 = HEAP32[$player>>2]|0;
  _P_SpawnPlayerMissile($12,34);
  return;
 }
 else if ((label|0) == 10) {
  $12 = HEAP32[$player>>2]|0;
  _P_SpawnPlayerMissile($12,34);
  return;
 }
}
function _A_FirePistol($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $action$i = 0, $add$i = 0, $add4$i = 0, $ammo = 0, $angle$0$i = 0, $angle$i = 0, $angle1$i = 0, $arrayidx$i = 0, $arrayidx$i$sink = 0, $arrayidx$i$sink20 = 0, $arrayidx$i11 = 0, $arrayidx2$i = 0, $arrayidx2$i14 = 0, $call$i = 0, $call$i16 = 0, $call1$i = 0, $call2$i = 0, $call3$i = 0;
 var $call4$i = 0, $cmp$i = 0, $flashstate = 0, $misc1$i = 0, $misc2$i = 0, $mul$i = 0, $nextstate$i = 0, $readyweapon = 0, $refire = 0, $rem$i = 0, $shl$i = 0, $shl$i15 = 0, $shl8$i = 0, $stnum$addr$0$i = 0, $stnum$addr$0$i$in = 0, $sub$i = 0, $sub$i19 = 0, $sub$i9 = 0, $sub1$i = 0, $sx$i = 0;
 var $sy$i = 0, $tics$i = 0, $tics4$i = 0, $tobool = 0, $tobool$i12 = 0, $tobool$i17 = 0, $tobool10$i = 0, $tobool15$i = 0, $tobool2$i = 0, $tobool21$i = 0, $tobool5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$player>>2]|0;
 _S_StartSound($0,1);
 $1 = HEAP32[$player>>2]|0;
 (_P_SetMobjState($1,155)|0);
 $readyweapon = ((($player)) + 120|0);
 $2 = HEAP32[$readyweapon>>2]|0;
 $ammo = (496 + (($2*24)|0)|0);
 $3 = HEAP32[$ammo>>2]|0;
 $cmp$i = ($3|0)<(4);
 $arrayidx$i = (((($player)) + 164|0) + ($3<<2)|0);
 $sub1$i = (($3) + -4)|0;
 $arrayidx2$i = (((($player)) + 180|0) + ($sub1$i<<2)|0);
 $arrayidx$i$sink20 = $cmp$i ? $arrayidx$i : $arrayidx2$i;
 $arrayidx$i$sink = $cmp$i ? $arrayidx$i : $arrayidx2$i;
 $4 = HEAP32[$arrayidx$i$sink20>>2]|0;
 $sub$i = (($4) + -1)|0;
 HEAP32[$arrayidx$i$sink>>2] = $sub$i;
 $flashstate = (((496 + (($2*24)|0)|0)) + 20|0);
 $arrayidx$i11 = ((($player)) + 268|0);
 $tics4$i = ((($player)) + 272|0);
 $sy$i = ((($player)) + 280|0);
 $sx$i = ((($player)) + 276|0);
 $stnum$addr$0$i$in = $flashstate;
 while(1) {
  $stnum$addr$0$i = HEAP32[$stnum$addr$0$i$in>>2]|0;
  $tobool$i12 = ($stnum$addr$0$i|0)==(0);
  if ($tobool$i12) {
   label = 3;
   break;
  }
  $arrayidx2$i14 = (3488 + (($stnum$addr$0$i*28)|0)|0);
  HEAP32[$arrayidx$i11>>2] = $arrayidx2$i14;
  $tics$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 8|0);
  $5 = HEAP32[$tics$i>>2]|0;
  HEAP32[$tics4$i>>2] = $5;
  $misc1$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 20|0);
  $6 = HEAP32[$misc1$i>>2]|0;
  $tobool5$i = ($6|0)==(0);
  if (!($tobool5$i)) {
   $shl$i15 = $6 << 16;
   $misc2$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 24|0);
   HEAP32[$sx$i>>2] = $shl$i15;
   $7 = HEAP32[$misc2$i>>2]|0;
   $shl8$i = $7 << 16;
   HEAP32[$sy$i>>2] = $shl8$i;
  }
  $action$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 12|0);
  $8 = HEAP32[$action$i>>2]|0;
  $tobool10$i = ($8|0)==(0|0);
  if ($tobool10$i) {
   $10 = $arrayidx2$i14;$11 = $5;
  } else {
   FUNCTION_TABLE_vii[$8 & 255]($player,$arrayidx$i11);
   $9 = HEAP32[$arrayidx$i11>>2]|0;
   $tobool15$i = ($9|0)==(0|0);
   if ($tobool15$i) {
    break;
   }
   $$pre$i = HEAP32[$tics4$i>>2]|0;
   $10 = $9;$11 = $$pre$i;
  }
  $nextstate$i = ((($10)) + 16|0);
  $tobool21$i = ($11|0)==(0);
  if ($tobool21$i) {
   $stnum$addr$0$i$in = $nextstate$i;
  } else {
   break;
  }
 }
 if ((label|0) == 3) {
  HEAP32[$arrayidx$i11>>2] = 0;
 }
 $12 = HEAP32[$player>>2]|0;
 $angle$i = ((($12)) + 32|0);
 $13 = HEAP32[$angle$i>>2]|0;
 $call$i16 = (_P_AimLineAttack($12,$13,67108864)|0);
 HEAP32[99490] = $call$i16;
 $14 = HEAP32[99434]|0;
 $tobool$i17 = ($14|0)==(0|0);
 if ($tobool$i17) {
  $add$i = (($13) + 67108864)|0;
  $call1$i = (_P_AimLineAttack($12,$add$i,67108864)|0);
  HEAP32[99490] = $call1$i;
  $15 = HEAP32[99434]|0;
  $tobool2$i = ($15|0)==(0|0);
  if ($tobool2$i) {
   $sub$i19 = (($13) + -67108864)|0;
   $call4$i = (_P_AimLineAttack($12,$sub$i19,67108864)|0);
   HEAP32[99490] = $call4$i;
  }
 }
 $16 = HEAP32[$player>>2]|0;
 $refire = ((($player)) + 208|0);
 $17 = HEAP32[$refire>>2]|0;
 $tobool = ($17|0)==(0);
 $call$i = (_P_Random()|0);
 $rem$i = (($call$i|0) % 3)&-1;
 $18 = ($rem$i*5)|0;
 $mul$i = (($18) + 5)|0;
 $angle1$i = ((($16)) + 32|0);
 $19 = HEAP32[$angle1$i>>2]|0;
 if ($tobool) {
  $angle$0$i = $19;
  $20 = HEAP32[99490]|0;
  _P_LineAttack($16,$angle$0$i,134217728,$20,$mul$i);
  return;
 }
 $call2$i = (_P_Random()|0);
 $call3$i = (_P_Random()|0);
 $sub$i9 = (($call2$i) - ($call3$i))|0;
 $shl$i = $sub$i9 << 18;
 $add4$i = (($shl$i) + ($19))|0;
 $angle$0$i = $add4$i;
 $20 = HEAP32[99490]|0;
 _P_LineAttack($16,$angle$0$i,134217728,$20,$mul$i);
 return;
}
function _A_FireShotgun($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $action$i = 0, $add$i = 0, $add4$i = 0, $add4$i$1 = 0, $add4$i$2 = 0, $add4$i$3 = 0, $add4$i$4 = 0, $add4$i$5 = 0, $add4$i$6 = 0, $ammo = 0, $angle$i = 0, $angle1$i = 0, $angle1$i$1 = 0, $angle1$i$2 = 0, $angle1$i$3 = 0;
 var $angle1$i$4 = 0, $angle1$i$5 = 0, $angle1$i$6 = 0, $arrayidx$i = 0, $arrayidx$i$sink = 0, $arrayidx$i$sink21 = 0, $arrayidx$i12 = 0, $arrayidx2$i = 0, $arrayidx2$i14 = 0, $call$i = 0, $call$i$1 = 0, $call$i$2 = 0, $call$i$3 = 0, $call$i$4 = 0, $call$i$5 = 0, $call$i$6 = 0, $call$i16 = 0, $call1$i = 0, $call2$i = 0, $call2$i$1 = 0;
 var $call2$i$2 = 0, $call2$i$3 = 0, $call2$i$4 = 0, $call2$i$5 = 0, $call2$i$6 = 0, $call3$i = 0, $call3$i$1 = 0, $call3$i$2 = 0, $call3$i$3 = 0, $call3$i$4 = 0, $call3$i$5 = 0, $call3$i$6 = 0, $call4$i = 0, $cmp$i = 0, $flashstate = 0, $misc1$i = 0, $misc2$i = 0, $mul$i = 0, $mul$i$1 = 0, $mul$i$2 = 0;
 var $mul$i$3 = 0, $mul$i$4 = 0, $mul$i$5 = 0, $mul$i$6 = 0, $nextstate$i = 0, $readyweapon = 0, $rem$i = 0, $rem$i$1 = 0, $rem$i$2 = 0, $rem$i$3 = 0, $rem$i$4 = 0, $rem$i$5 = 0, $rem$i$6 = 0, $shl$i = 0, $shl$i$1 = 0, $shl$i$2 = 0, $shl$i$3 = 0, $shl$i$4 = 0, $shl$i$5 = 0, $shl$i$6 = 0;
 var $shl$i15 = 0, $shl8$i = 0, $stnum$addr$0$i = 0, $stnum$addr$0$i$in = 0, $sub$i = 0, $sub$i10 = 0, $sub$i10$1 = 0, $sub$i10$2 = 0, $sub$i10$3 = 0, $sub$i10$4 = 0, $sub$i10$5 = 0, $sub$i10$6 = 0, $sub$i19 = 0, $sub1$i = 0, $sx$i = 0, $sy$i = 0, $tics$i = 0, $tics4$i = 0, $tobool$i = 0, $tobool$i17 = 0;
 var $tobool10$i = 0, $tobool15$i = 0, $tobool2$i = 0, $tobool21$i = 0, $tobool5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$player>>2]|0;
 _S_StartSound($0,2);
 $1 = HEAP32[$player>>2]|0;
 (_P_SetMobjState($1,155)|0);
 $readyweapon = ((($player)) + 120|0);
 $2 = HEAP32[$readyweapon>>2]|0;
 $ammo = (496 + (($2*24)|0)|0);
 $3 = HEAP32[$ammo>>2]|0;
 $cmp$i = ($3|0)<(4);
 $arrayidx$i = (((($player)) + 164|0) + ($3<<2)|0);
 $sub1$i = (($3) + -4)|0;
 $arrayidx2$i = (((($player)) + 180|0) + ($sub1$i<<2)|0);
 $arrayidx$i$sink21 = $cmp$i ? $arrayidx$i : $arrayidx2$i;
 $arrayidx$i$sink = $cmp$i ? $arrayidx$i : $arrayidx2$i;
 $4 = HEAP32[$arrayidx$i$sink21>>2]|0;
 $sub$i = (($4) + -1)|0;
 HEAP32[$arrayidx$i$sink>>2] = $sub$i;
 $flashstate = (((496 + (($2*24)|0)|0)) + 20|0);
 $arrayidx$i12 = ((($player)) + 268|0);
 $tics4$i = ((($player)) + 272|0);
 $sy$i = ((($player)) + 280|0);
 $sx$i = ((($player)) + 276|0);
 $stnum$addr$0$i$in = $flashstate;
 while(1) {
  $stnum$addr$0$i = HEAP32[$stnum$addr$0$i$in>>2]|0;
  $tobool$i = ($stnum$addr$0$i|0)==(0);
  if ($tobool$i) {
   label = 3;
   break;
  }
  $arrayidx2$i14 = (3488 + (($stnum$addr$0$i*28)|0)|0);
  HEAP32[$arrayidx$i12>>2] = $arrayidx2$i14;
  $tics$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 8|0);
  $5 = HEAP32[$tics$i>>2]|0;
  HEAP32[$tics4$i>>2] = $5;
  $misc1$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 20|0);
  $6 = HEAP32[$misc1$i>>2]|0;
  $tobool5$i = ($6|0)==(0);
  if (!($tobool5$i)) {
   $shl$i15 = $6 << 16;
   $misc2$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 24|0);
   HEAP32[$sx$i>>2] = $shl$i15;
   $7 = HEAP32[$misc2$i>>2]|0;
   $shl8$i = $7 << 16;
   HEAP32[$sy$i>>2] = $shl8$i;
  }
  $action$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 12|0);
  $8 = HEAP32[$action$i>>2]|0;
  $tobool10$i = ($8|0)==(0|0);
  if ($tobool10$i) {
   $10 = $arrayidx2$i14;$11 = $5;
  } else {
   FUNCTION_TABLE_vii[$8 & 255]($player,$arrayidx$i12);
   $9 = HEAP32[$arrayidx$i12>>2]|0;
   $tobool15$i = ($9|0)==(0|0);
   if ($tobool15$i) {
    break;
   }
   $$pre$i = HEAP32[$tics4$i>>2]|0;
   $10 = $9;$11 = $$pre$i;
  }
  $nextstate$i = ((($10)) + 16|0);
  $tobool21$i = ($11|0)==(0);
  if ($tobool21$i) {
   $stnum$addr$0$i$in = $nextstate$i;
  } else {
   break;
  }
 }
 if ((label|0) == 3) {
  HEAP32[$arrayidx$i12>>2] = 0;
 }
 $12 = HEAP32[$player>>2]|0;
 $angle$i = ((($12)) + 32|0);
 $13 = HEAP32[$angle$i>>2]|0;
 $call$i16 = (_P_AimLineAttack($12,$13,67108864)|0);
 HEAP32[99490] = $call$i16;
 $14 = HEAP32[99434]|0;
 $tobool$i17 = ($14|0)==(0|0);
 if ($tobool$i17) {
  $add$i = (($13) + 67108864)|0;
  $call1$i = (_P_AimLineAttack($12,$add$i,67108864)|0);
  HEAP32[99490] = $call1$i;
  $15 = HEAP32[99434]|0;
  $tobool2$i = ($15|0)==(0|0);
  if ($tobool2$i) {
   $sub$i19 = (($13) + -67108864)|0;
   $call4$i = (_P_AimLineAttack($12,$sub$i19,67108864)|0);
   HEAP32[99490] = $call4$i;
  }
 }
 $16 = HEAP32[$player>>2]|0;
 $call$i = (_P_Random()|0);
 $rem$i = (($call$i|0) % 3)&-1;
 $17 = ($rem$i*5)|0;
 $mul$i = (($17) + 5)|0;
 $angle1$i = ((($16)) + 32|0);
 $18 = HEAP32[$angle1$i>>2]|0;
 $call2$i = (_P_Random()|0);
 $call3$i = (_P_Random()|0);
 $sub$i10 = (($call2$i) - ($call3$i))|0;
 $shl$i = $sub$i10 << 18;
 $add4$i = (($shl$i) + ($18))|0;
 $19 = HEAP32[99490]|0;
 _P_LineAttack($16,$add4$i,134217728,$19,$mul$i);
 $20 = HEAP32[$player>>2]|0;
 $call$i$1 = (_P_Random()|0);
 $rem$i$1 = (($call$i$1|0) % 3)&-1;
 $21 = ($rem$i$1*5)|0;
 $mul$i$1 = (($21) + 5)|0;
 $angle1$i$1 = ((($20)) + 32|0);
 $22 = HEAP32[$angle1$i$1>>2]|0;
 $call2$i$1 = (_P_Random()|0);
 $call3$i$1 = (_P_Random()|0);
 $sub$i10$1 = (($call2$i$1) - ($call3$i$1))|0;
 $shl$i$1 = $sub$i10$1 << 18;
 $add4$i$1 = (($shl$i$1) + ($22))|0;
 $23 = HEAP32[99490]|0;
 _P_LineAttack($20,$add4$i$1,134217728,$23,$mul$i$1);
 $24 = HEAP32[$player>>2]|0;
 $call$i$2 = (_P_Random()|0);
 $rem$i$2 = (($call$i$2|0) % 3)&-1;
 $25 = ($rem$i$2*5)|0;
 $mul$i$2 = (($25) + 5)|0;
 $angle1$i$2 = ((($24)) + 32|0);
 $26 = HEAP32[$angle1$i$2>>2]|0;
 $call2$i$2 = (_P_Random()|0);
 $call3$i$2 = (_P_Random()|0);
 $sub$i10$2 = (($call2$i$2) - ($call3$i$2))|0;
 $shl$i$2 = $sub$i10$2 << 18;
 $add4$i$2 = (($shl$i$2) + ($26))|0;
 $27 = HEAP32[99490]|0;
 _P_LineAttack($24,$add4$i$2,134217728,$27,$mul$i$2);
 $28 = HEAP32[$player>>2]|0;
 $call$i$3 = (_P_Random()|0);
 $rem$i$3 = (($call$i$3|0) % 3)&-1;
 $29 = ($rem$i$3*5)|0;
 $mul$i$3 = (($29) + 5)|0;
 $angle1$i$3 = ((($28)) + 32|0);
 $30 = HEAP32[$angle1$i$3>>2]|0;
 $call2$i$3 = (_P_Random()|0);
 $call3$i$3 = (_P_Random()|0);
 $sub$i10$3 = (($call2$i$3) - ($call3$i$3))|0;
 $shl$i$3 = $sub$i10$3 << 18;
 $add4$i$3 = (($shl$i$3) + ($30))|0;
 $31 = HEAP32[99490]|0;
 _P_LineAttack($28,$add4$i$3,134217728,$31,$mul$i$3);
 $32 = HEAP32[$player>>2]|0;
 $call$i$4 = (_P_Random()|0);
 $rem$i$4 = (($call$i$4|0) % 3)&-1;
 $33 = ($rem$i$4*5)|0;
 $mul$i$4 = (($33) + 5)|0;
 $angle1$i$4 = ((($32)) + 32|0);
 $34 = HEAP32[$angle1$i$4>>2]|0;
 $call2$i$4 = (_P_Random()|0);
 $call3$i$4 = (_P_Random()|0);
 $sub$i10$4 = (($call2$i$4) - ($call3$i$4))|0;
 $shl$i$4 = $sub$i10$4 << 18;
 $add4$i$4 = (($shl$i$4) + ($34))|0;
 $35 = HEAP32[99490]|0;
 _P_LineAttack($32,$add4$i$4,134217728,$35,$mul$i$4);
 $36 = HEAP32[$player>>2]|0;
 $call$i$5 = (_P_Random()|0);
 $rem$i$5 = (($call$i$5|0) % 3)&-1;
 $37 = ($rem$i$5*5)|0;
 $mul$i$5 = (($37) + 5)|0;
 $angle1$i$5 = ((($36)) + 32|0);
 $38 = HEAP32[$angle1$i$5>>2]|0;
 $call2$i$5 = (_P_Random()|0);
 $call3$i$5 = (_P_Random()|0);
 $sub$i10$5 = (($call2$i$5) - ($call3$i$5))|0;
 $shl$i$5 = $sub$i10$5 << 18;
 $add4$i$5 = (($shl$i$5) + ($38))|0;
 $39 = HEAP32[99490]|0;
 _P_LineAttack($36,$add4$i$5,134217728,$39,$mul$i$5);
 $40 = HEAP32[$player>>2]|0;
 $call$i$6 = (_P_Random()|0);
 $rem$i$6 = (($call$i$6|0) % 3)&-1;
 $41 = ($rem$i$6*5)|0;
 $mul$i$6 = (($41) + 5)|0;
 $angle1$i$6 = ((($40)) + 32|0);
 $42 = HEAP32[$angle1$i$6>>2]|0;
 $call2$i$6 = (_P_Random()|0);
 $call3$i$6 = (_P_Random()|0);
 $sub$i10$6 = (($call2$i$6) - ($call3$i$6))|0;
 $shl$i$6 = $sub$i10$6 << 18;
 $add4$i$6 = (($shl$i$6) + ($42))|0;
 $43 = HEAP32[99490]|0;
 _P_LineAttack($40,$add4$i$6,134217728,$43,$mul$i$6);
 return;
}
function _A_FireShotgun2($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $action$i = 0, $add$i = 0, $add10 = 0, $add16 = 0, $ammo = 0, $angle$i = 0, $angle7 = 0, $arrayidx$i = 0, $arrayidx$i$sink = 0, $arrayidx$i$sink21 = 0, $arrayidx$i16 = 0, $arrayidx2$i = 0, $arrayidx2$i19 = 0, $call$i = 0, $call1$i = 0, $call12 = 0, $call13 = 0, $call4$i = 0;
 var $call5 = 0, $call8 = 0, $call9 = 0, $cmp$i = 0, $exitcond = 0, $flashstate = 0, $i$020 = 0, $inc = 0, $misc1$i = 0, $misc2$i = 0, $mul = 0, $nextstate$i = 0, $readyweapon = 0, $rem = 0, $shl = 0, $shl$i = 0, $shl15 = 0, $shl8$i = 0, $stnum$addr$0$i = 0, $stnum$addr$0$i$in = 0;
 var $sub = 0, $sub$i = 0, $sub$i15 = 0, $sub1$i = 0, $sub14 = 0, $sx$i = 0, $sy$i = 0, $tics$i = 0, $tics4$i = 0, $tobool$i = 0, $tobool$i17 = 0, $tobool10$i = 0, $tobool15$i = 0, $tobool2$i = 0, $tobool21$i = 0, $tobool5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$player>>2]|0;
 _S_StartSound($0,4);
 $1 = HEAP32[$player>>2]|0;
 (_P_SetMobjState($1,155)|0);
 $readyweapon = ((($player)) + 120|0);
 $2 = HEAP32[$readyweapon>>2]|0;
 $ammo = (496 + (($2*24)|0)|0);
 $3 = HEAP32[$ammo>>2]|0;
 $cmp$i = ($3|0)<(4);
 $arrayidx$i = (((($player)) + 164|0) + ($3<<2)|0);
 $sub1$i = (($3) + -4)|0;
 $arrayidx2$i = (((($player)) + 180|0) + ($sub1$i<<2)|0);
 $arrayidx$i$sink21 = $cmp$i ? $arrayidx$i : $arrayidx2$i;
 $arrayidx$i$sink = $cmp$i ? $arrayidx$i : $arrayidx2$i;
 $4 = HEAP32[$arrayidx$i$sink21>>2]|0;
 $sub$i = (($4) + -2)|0;
 HEAP32[$arrayidx$i$sink>>2] = $sub$i;
 $flashstate = (((496 + (($2*24)|0)|0)) + 20|0);
 $arrayidx$i16 = ((($player)) + 268|0);
 $tics4$i = ((($player)) + 272|0);
 $sy$i = ((($player)) + 280|0);
 $sx$i = ((($player)) + 276|0);
 $stnum$addr$0$i$in = $flashstate;
 while(1) {
  $stnum$addr$0$i = HEAP32[$stnum$addr$0$i$in>>2]|0;
  $tobool$i17 = ($stnum$addr$0$i|0)==(0);
  if ($tobool$i17) {
   label = 3;
   break;
  }
  $arrayidx2$i19 = (3488 + (($stnum$addr$0$i*28)|0)|0);
  HEAP32[$arrayidx$i16>>2] = $arrayidx2$i19;
  $tics$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 8|0);
  $5 = HEAP32[$tics$i>>2]|0;
  HEAP32[$tics4$i>>2] = $5;
  $misc1$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 20|0);
  $6 = HEAP32[$misc1$i>>2]|0;
  $tobool5$i = ($6|0)==(0);
  if (!($tobool5$i)) {
   $shl$i = $6 << 16;
   $misc2$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 24|0);
   HEAP32[$sx$i>>2] = $shl$i;
   $7 = HEAP32[$misc2$i>>2]|0;
   $shl8$i = $7 << 16;
   HEAP32[$sy$i>>2] = $shl8$i;
  }
  $action$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 12|0);
  $8 = HEAP32[$action$i>>2]|0;
  $tobool10$i = ($8|0)==(0|0);
  if ($tobool10$i) {
   $10 = $arrayidx2$i19;$11 = $5;
  } else {
   FUNCTION_TABLE_vii[$8 & 255]($player,$arrayidx$i16);
   $9 = HEAP32[$arrayidx$i16>>2]|0;
   $tobool15$i = ($9|0)==(0|0);
   if ($tobool15$i) {
    break;
   }
   $$pre$i = HEAP32[$tics4$i>>2]|0;
   $10 = $9;$11 = $$pre$i;
  }
  $nextstate$i = ((($10)) + 16|0);
  $tobool21$i = ($11|0)==(0);
  if ($tobool21$i) {
   $stnum$addr$0$i$in = $nextstate$i;
  } else {
   break;
  }
 }
 if ((label|0) == 3) {
  HEAP32[$arrayidx$i16>>2] = 0;
 }
 $12 = HEAP32[$player>>2]|0;
 $angle$i = ((($12)) + 32|0);
 $13 = HEAP32[$angle$i>>2]|0;
 $call$i = (_P_AimLineAttack($12,$13,67108864)|0);
 HEAP32[99490] = $call$i;
 $14 = HEAP32[99434]|0;
 $tobool$i = ($14|0)==(0|0);
 if ($tobool$i) {
  $add$i = (($13) + 67108864)|0;
  $call1$i = (_P_AimLineAttack($12,$add$i,67108864)|0);
  HEAP32[99490] = $call1$i;
  $15 = HEAP32[99434]|0;
  $tobool2$i = ($15|0)==(0|0);
  if ($tobool2$i) {
   $sub$i15 = (($13) + -67108864)|0;
   $call4$i = (_P_AimLineAttack($12,$sub$i15,67108864)|0);
   HEAP32[99490] = $call4$i;
  }
 }
 $i$020 = 0;
 while(1) {
  $call5 = (_P_Random()|0);
  $rem = (($call5|0) % 3)&-1;
  $16 = ($rem*5)|0;
  $mul = (($16) + 5)|0;
  $17 = HEAP32[$player>>2]|0;
  $angle7 = ((($17)) + 32|0);
  $18 = HEAP32[$angle7>>2]|0;
  $call8 = (_P_Random()|0);
  $call9 = (_P_Random()|0);
  $sub = (($call8) - ($call9))|0;
  $shl = $sub << 19;
  $add10 = (($shl) + ($18))|0;
  $19 = HEAP32[$player>>2]|0;
  $20 = HEAP32[99490]|0;
  $call12 = (_P_Random()|0);
  $call13 = (_P_Random()|0);
  $sub14 = (($call12) - ($call13))|0;
  $shl15 = $sub14 << 5;
  $add16 = (($shl15) + ($20))|0;
  _P_LineAttack($19,$add10,134217728,$add16,$mul);
  $inc = (($i$020) + 1)|0;
  $exitcond = ($inc|0)==(20);
  if ($exitcond) {
   break;
  } else {
   $i$020 = $inc;
  }
 }
 return;
}
function _A_FireCGun($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $action$i = 0, $add$i = 0, $add$ptr = 0, $add4$i = 0, $ammo1 = 0, $ammo6 = 0, $angle$0$i = 0, $angle$i = 0, $angle1$i = 0, $arrayidx$i = 0, $arrayidx$i$sink = 0, $arrayidx$i$sink22 = 0;
 var $arrayidx$i13 = 0, $arrayidx2 = 0, $arrayidx2$i = 0, $arrayidx2$i16 = 0, $call$i = 0, $call$i18 = 0, $call1$i = 0, $call2$i = 0, $call3$i = 0, $call4$i = 0, $cmp$i = 0, $flashstate = 0, $misc1$i = 0, $misc2$i = 0, $mul$i = 0, $nextstate$i = 0, $readyweapon = 0, $refire = 0, $rem$i = 0, $shl$i = 0;
 var $shl$i17 = 0, $shl8$i = 0, $stnum$addr$0$i = 0, $sub$i = 0, $sub$i11 = 0, $sub$i21 = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0, $sub1$i = 0, $sx$i = 0, $sy$i = 0, $tics$i = 0, $tics4$i = 0, $tobool = 0, $tobool$i14 = 0, $tobool$i19 = 0, $tobool10$i = 0, $tobool11 = 0, $tobool15$i = 0;
 var $tobool2$i = 0, $tobool21$i = 0, $tobool5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$player>>2]|0;
 _S_StartSound($0,1);
 $readyweapon = ((($player)) + 120|0);
 $1 = HEAP32[$readyweapon>>2]|0;
 $ammo1 = (496 + (($1*24)|0)|0);
 $2 = HEAP32[$ammo1>>2]|0;
 $arrayidx2 = (((($player)) + 164|0) + ($2<<2)|0);
 $3 = HEAP32[$arrayidx2>>2]|0;
 $tobool = ($3|0)==(0);
 if ($tobool) {
  return;
 }
 $4 = HEAP32[$player>>2]|0;
 (_P_SetMobjState($4,155)|0);
 $5 = HEAP32[$readyweapon>>2]|0;
 $ammo6 = (496 + (($5*24)|0)|0);
 $6 = HEAP32[$ammo6>>2]|0;
 $cmp$i = ($6|0)<(4);
 $arrayidx$i = (((($player)) + 164|0) + ($6<<2)|0);
 $sub1$i = (($6) + -4)|0;
 $arrayidx2$i = (((($player)) + 180|0) + ($sub1$i<<2)|0);
 $arrayidx$i$sink22 = $cmp$i ? $arrayidx$i : $arrayidx2$i;
 $arrayidx$i$sink = $cmp$i ? $arrayidx$i : $arrayidx2$i;
 $7 = HEAP32[$arrayidx$i$sink22>>2]|0;
 $sub$i = (($7) + -1)|0;
 HEAP32[$arrayidx$i$sink>>2] = $sub$i;
 $flashstate = (((496 + (($5*24)|0)|0)) + 20|0);
 $8 = HEAP32[$flashstate>>2]|0;
 $9 = HEAP32[$psp>>2]|0;
 $add$ptr = (($9) + (($8*28)|0)|0);
 $sub$ptr$lhs$cast = $add$ptr;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ((4944)))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 28)&-1;
 $arrayidx$i13 = ((($player)) + 268|0);
 $tics4$i = ((($player)) + 272|0);
 $sy$i = ((($player)) + 280|0);
 $sx$i = ((($player)) + 276|0);
 $stnum$addr$0$i = $sub$ptr$div;
 while(1) {
  $tobool$i14 = ($stnum$addr$0$i|0)==(0);
  if ($tobool$i14) {
   label = 4;
   break;
  }
  $arrayidx2$i16 = (3488 + (($stnum$addr$0$i*28)|0)|0);
  HEAP32[$arrayidx$i13>>2] = $arrayidx2$i16;
  $tics$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 8|0);
  $10 = HEAP32[$tics$i>>2]|0;
  HEAP32[$tics4$i>>2] = $10;
  $misc1$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 20|0);
  $11 = HEAP32[$misc1$i>>2]|0;
  $tobool5$i = ($11|0)==(0);
  if (!($tobool5$i)) {
   $shl$i17 = $11 << 16;
   $misc2$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 24|0);
   HEAP32[$sx$i>>2] = $shl$i17;
   $12 = HEAP32[$misc2$i>>2]|0;
   $shl8$i = $12 << 16;
   HEAP32[$sy$i>>2] = $shl8$i;
  }
  $action$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 12|0);
  $13 = HEAP32[$action$i>>2]|0;
  $tobool10$i = ($13|0)==(0|0);
  if ($tobool10$i) {
   $15 = $arrayidx2$i16;$17 = $10;
  } else {
   FUNCTION_TABLE_vii[$13 & 255]($player,$arrayidx$i13);
   $14 = HEAP32[$arrayidx$i13>>2]|0;
   $tobool15$i = ($14|0)==(0|0);
   if ($tobool15$i) {
    break;
   }
   $$pre$i = HEAP32[$tics4$i>>2]|0;
   $15 = $14;$17 = $$pre$i;
  }
  $nextstate$i = ((($15)) + 16|0);
  $16 = HEAP32[$nextstate$i>>2]|0;
  $tobool21$i = ($17|0)==(0);
  if ($tobool21$i) {
   $stnum$addr$0$i = $16;
  } else {
   break;
  }
 }
 if ((label|0) == 4) {
  HEAP32[$arrayidx$i13>>2] = 0;
 }
 $18 = HEAP32[$player>>2]|0;
 $angle$i = ((($18)) + 32|0);
 $19 = HEAP32[$angle$i>>2]|0;
 $call$i18 = (_P_AimLineAttack($18,$19,67108864)|0);
 HEAP32[99490] = $call$i18;
 $20 = HEAP32[99434]|0;
 $tobool$i19 = ($20|0)==(0|0);
 if ($tobool$i19) {
  $add$i = (($19) + 67108864)|0;
  $call1$i = (_P_AimLineAttack($18,$add$i,67108864)|0);
  HEAP32[99490] = $call1$i;
  $21 = HEAP32[99434]|0;
  $tobool2$i = ($21|0)==(0|0);
  if ($tobool2$i) {
   $sub$i21 = (($19) + -67108864)|0;
   $call4$i = (_P_AimLineAttack($18,$sub$i21,67108864)|0);
   HEAP32[99490] = $call4$i;
  }
 }
 $22 = HEAP32[$player>>2]|0;
 $refire = ((($player)) + 208|0);
 $23 = HEAP32[$refire>>2]|0;
 $tobool11 = ($23|0)==(0);
 $call$i = (_P_Random()|0);
 $rem$i = (($call$i|0) % 3)&-1;
 $24 = ($rem$i*5)|0;
 $mul$i = (($24) + 5)|0;
 $angle1$i = ((($22)) + 32|0);
 $25 = HEAP32[$angle1$i>>2]|0;
 if ($tobool11) {
  $angle$0$i = $25;
 } else {
  $call2$i = (_P_Random()|0);
  $call3$i = (_P_Random()|0);
  $sub$i11 = (($call2$i) - ($call3$i))|0;
  $shl$i = $sub$i11 << 18;
  $add4$i = (($shl$i) + ($25))|0;
  $angle$0$i = $add4$i;
 }
 $26 = HEAP32[99490]|0;
 _P_LineAttack($22,$angle$0$i,134217728,$26,$mul$i);
 return;
}
function _A_Light0($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $extralight = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $extralight = ((($player)) + 240|0);
 HEAP32[$extralight>>2] = 0;
 return;
}
function _A_Light1($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $extralight = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $extralight = ((($player)) + 240|0);
 HEAP32[$extralight>>2] = 1;
 return;
}
function _A_Light2($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $extralight = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $extralight = ((($player)) + 240|0);
 HEAP32[$extralight>>2] = 2;
 return;
}
function _A_BFGSpray($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $add1 = 0, $add7$1 = 0, $add7$10 = 0, $add7$11 = 0, $add7$12 = 0, $add7$13 = 0, $add7$14 = 0, $add7$2 = 0, $add7$3 = 0, $add7$4 = 0;
 var $add7$5 = 0, $add7$6 = 0, $add7$7 = 0, $add7$8 = 0, $add7$9 = 0, $add8$1 = 0, $add8$10 = 0, $add8$11 = 0, $add8$12 = 0, $add8$13 = 0, $add8$14 = 0, $add8$2 = 0, $add8$3 = 0, $add8$4 = 0, $add8$5 = 0, $add8$6 = 0, $add8$7 = 0, $add8$8 = 0, $add8$9 = 0, $and = 0;
 var $and$1 = 0, $and$10 = 0, $and$11 = 0, $and$12 = 0, $and$13 = 0, $and$14 = 0, $and$2 = 0, $and$3 = 0, $and$4 = 0, $and$5 = 0, $and$6 = 0, $and$7 = 0, $and$8 = 0, $and$9 = 0, $angle = 0, $call6 = 0, $call6$1 = 0, $call6$10 = 0, $call6$11 = 0, $call6$12 = 0;
 var $call6$13 = 0, $call6$14 = 0, $call6$2 = 0, $call6$3 = 0, $call6$4 = 0, $call6$5 = 0, $call6$6 = 0, $call6$7 = 0, $call6$8 = 0, $call6$9 = 0, $exitcond = 0, $height = 0, $i$014 = 0, $inc12 = 0, $mul = 0, $shr = 0, $sub = 0, $target = 0, $tobool = 0, $x = 0;
 var $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $angle = ((($mo)) + 32|0);
 $target = ((($mo)) + 120|0);
 $i$014 = 0;
 while(1) {
  $0 = HEAP32[$angle>>2]|0;
  $mul = Math_imul($i$014, 26843545)|0;
  $sub = (($mul) + -536870912)|0;
  $add = (($sub) + ($0))|0;
  $1 = HEAP32[$target>>2]|0;
  (_P_AimLineAttack($1,$add,67108864)|0);
  $2 = HEAP32[99434]|0;
  $tobool = ($2|0)==(0|0);
  if (!($tobool)) {
   $x = ((($2)) + 12|0);
   $3 = HEAP32[$x>>2]|0;
   $y = ((($2)) + 16|0);
   $4 = HEAP32[$y>>2]|0;
   $z = ((($2)) + 20|0);
   $5 = HEAP32[$z>>2]|0;
   $height = ((($2)) + 68|0);
   $6 = HEAP32[$height>>2]|0;
   $shr = $6 >> 2;
   $add1 = (($shr) + ($5))|0;
   (_P_SpawnMobj($3,$4,$add1,42)|0);
   $call6 = (_P_Random()|0);
   $and = $call6 & 7;
   $call6$1 = (_P_Random()|0);
   $and$1 = $call6$1 & 7;
   $add7$1 = (($and) + 2)|0;
   $add8$1 = (($add7$1) + ($and$1))|0;
   $call6$2 = (_P_Random()|0);
   $and$2 = $call6$2 & 7;
   $add7$2 = (($add8$1) + 1)|0;
   $add8$2 = (($add7$2) + ($and$2))|0;
   $call6$3 = (_P_Random()|0);
   $and$3 = $call6$3 & 7;
   $add7$3 = (($add8$2) + 1)|0;
   $add8$3 = (($add7$3) + ($and$3))|0;
   $call6$4 = (_P_Random()|0);
   $and$4 = $call6$4 & 7;
   $add7$4 = (($add8$3) + 1)|0;
   $add8$4 = (($add7$4) + ($and$4))|0;
   $call6$5 = (_P_Random()|0);
   $and$5 = $call6$5 & 7;
   $add7$5 = (($add8$4) + 1)|0;
   $add8$5 = (($add7$5) + ($and$5))|0;
   $call6$6 = (_P_Random()|0);
   $and$6 = $call6$6 & 7;
   $add7$6 = (($add8$5) + 1)|0;
   $add8$6 = (($add7$6) + ($and$6))|0;
   $call6$7 = (_P_Random()|0);
   $and$7 = $call6$7 & 7;
   $add7$7 = (($add8$6) + 1)|0;
   $add8$7 = (($add7$7) + ($and$7))|0;
   $call6$8 = (_P_Random()|0);
   $and$8 = $call6$8 & 7;
   $add7$8 = (($add8$7) + 1)|0;
   $add8$8 = (($add7$8) + ($and$8))|0;
   $call6$9 = (_P_Random()|0);
   $and$9 = $call6$9 & 7;
   $add7$9 = (($add8$8) + 1)|0;
   $add8$9 = (($add7$9) + ($and$9))|0;
   $call6$10 = (_P_Random()|0);
   $and$10 = $call6$10 & 7;
   $add7$10 = (($add8$9) + 1)|0;
   $add8$10 = (($add7$10) + ($and$10))|0;
   $call6$11 = (_P_Random()|0);
   $and$11 = $call6$11 & 7;
   $add7$11 = (($add8$10) + 1)|0;
   $add8$11 = (($add7$11) + ($and$11))|0;
   $call6$12 = (_P_Random()|0);
   $and$12 = $call6$12 & 7;
   $add7$12 = (($add8$11) + 1)|0;
   $add8$12 = (($add7$12) + ($and$12))|0;
   $call6$13 = (_P_Random()|0);
   $and$13 = $call6$13 & 7;
   $add7$13 = (($add8$12) + 1)|0;
   $add8$13 = (($add7$13) + ($and$13))|0;
   $call6$14 = (_P_Random()|0);
   $and$14 = $call6$14 & 7;
   $add7$14 = (($add8$13) + 1)|0;
   $add8$14 = (($add7$14) + ($and$14))|0;
   $7 = HEAP32[99434]|0;
   $8 = HEAP32[$target>>2]|0;
   _P_DamageMobj($7,$8,$8,$add8$14);
  }
  $inc12 = (($i$014) + 1)|0;
  $exitcond = ($inc12|0)==(40);
  if ($exitcond) {
   break;
  } else {
   $i$014 = $inc12;
  }
 }
 return;
}
function _A_BFGsound($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$player>>2]|0;
 _S_StartSound($0,9);
 return;
}
function _P_SetupPsprites($player) {
 $player = $player|0;
 var $$pre$i = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $action$i$i = 0, $arrayidx$i$i = 0, $arrayidx2$i$i = 0, $misc1$i$i = 0, $misc2$i$i = 0, $nextstate$i$i = 0;
 var $pendingweapon = 0, $readyweapon = 0, $shl$i$i = 0, $shl8$i$i = 0, $state = 0, $state$1 = 0, $stnum$addr$0$i$i = 0, $sx$i$i = 0, $sy$i = 0, $tics$i$i = 0, $tics4$i$i = 0, $tobool$i$i = 0, $tobool10$i$i = 0, $tobool15$i$i = 0, $tobool21$i$i = 0, $tobool5$i$i = 0, $upstate$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $state = ((($player)) + 252|0);
 HEAP32[$state>>2] = 0;
 $state$1 = ((($player)) + 268|0);
 HEAP32[$state$1>>2] = 0;
 $readyweapon = ((($player)) + 120|0);
 $0 = HEAP32[$readyweapon>>2]|0;
 $pendingweapon = ((($player)) + 124|0);
 HEAP32[$pendingweapon>>2] = $0;
 switch ($0|0) {
 case 10:  {
  HEAP32[$pendingweapon>>2] = 10;
  $2 = 10;
  break;
 }
 case 7:  {
  $1 = HEAP32[$player>>2]|0;
  _S_StartSound($1,10);
  $$pre$i = HEAP32[$pendingweapon>>2]|0;
  $2 = $$pre$i;
  break;
 }
 default: {
  $2 = $0;
 }
 }
 $upstate$i = (((496 + (($2*24)|0)|0)) + 4|0);
 $3 = HEAP32[$upstate$i>>2]|0;
 HEAP32[$pendingweapon>>2] = 10;
 $sy$i = ((($player)) + 264|0);
 HEAP32[$sy$i>>2] = 8388608;
 $arrayidx$i$i = ((($player)) + 252|0);
 $tics4$i$i = ((($player)) + 256|0);
 $sx$i$i = ((($player)) + 260|0);
 $stnum$addr$0$i$i = $3;
 while(1) {
  $tobool$i$i = ($stnum$addr$0$i$i|0)==(0);
  if ($tobool$i$i) {
   label = 6;
   break;
  }
  $arrayidx2$i$i = (3488 + (($stnum$addr$0$i$i*28)|0)|0);
  HEAP32[$arrayidx$i$i>>2] = $arrayidx2$i$i;
  $tics$i$i = (((3488 + (($stnum$addr$0$i$i*28)|0)|0)) + 8|0);
  $4 = HEAP32[$tics$i$i>>2]|0;
  HEAP32[$tics4$i$i>>2] = $4;
  $misc1$i$i = (((3488 + (($stnum$addr$0$i$i*28)|0)|0)) + 20|0);
  $5 = HEAP32[$misc1$i$i>>2]|0;
  $tobool5$i$i = ($5|0)==(0);
  if (!($tobool5$i$i)) {
   $misc2$i$i = (((3488 + (($stnum$addr$0$i$i*28)|0)|0)) + 24|0);
   $shl$i$i = $5 << 16;
   HEAP32[$sx$i$i>>2] = $shl$i$i;
   $6 = HEAP32[$misc2$i$i>>2]|0;
   $shl8$i$i = $6 << 16;
   HEAP32[$sy$i>>2] = $shl8$i$i;
  }
  $action$i$i = (((3488 + (($stnum$addr$0$i$i*28)|0)|0)) + 12|0);
  $7 = HEAP32[$action$i$i>>2]|0;
  $tobool10$i$i = ($7|0)==(0|0);
  if ($tobool10$i$i) {
   $11 = $4;$9 = $arrayidx2$i$i;
  } else {
   FUNCTION_TABLE_vii[$7 & 255]($player,$arrayidx$i$i);
   $8 = HEAP32[$arrayidx$i$i>>2]|0;
   $tobool15$i$i = ($8|0)==(0|0);
   if ($tobool15$i$i) {
    label = 13;
    break;
   }
   $$pre$i$i = HEAP32[$tics4$i$i>>2]|0;
   $11 = $$pre$i$i;$9 = $8;
  }
  $nextstate$i$i = ((($9)) + 16|0);
  $10 = HEAP32[$nextstate$i$i>>2]|0;
  $tobool21$i$i = ($11|0)==(0);
  if ($tobool21$i$i) {
   $stnum$addr$0$i$i = $10;
  } else {
   label = 13;
   break;
  }
 }
 if ((label|0) == 6) {
  HEAP32[$arrayidx$i$i>>2] = 0;
  return;
 }
 else if ((label|0) == 13) {
  return;
 }
}
function _P_MovePsprites($player) {
 $player = $player|0;
 var $$pn = 0, $$pn$1 = 0, $$pre$i = 0, $$pre$i$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $action$i = 0, $action$i$1 = 0, $arrayidx = 0, $arrayidx$i$1 = 0, $arrayidx2$i = 0, $arrayidx2$i$1 = 0, $cmp2 = 0, $cmp2$1 = 0, $dec = 0, $dec$1 = 0, $misc1$i = 0, $misc1$i$1 = 0, $misc2$i = 0, $misc2$i$1 = 0, $shl$i = 0, $shl$i$1 = 0;
 var $shl8$i = 0, $shl8$i$1 = 0, $state1$1 = 0, $stnum$addr$0$i = 0, $stnum$addr$0$i$1 = 0, $stnum$addr$0$i$in = 0, $stnum$addr$0$i$in$1 = 0, $sx = 0, $sx$i = 0, $sx$i$1 = 0, $sx15 = 0, $sy = 0, $sy$i = 0, $sy$i$1 = 0, $sy20 = 0, $tics = 0, $tics$1 = 0, $tics$i = 0, $tics$i$1 = 0, $tics4$i = 0;
 var $tics4$i$1 = 0, $tobool = 0, $tobool$1 = 0, $tobool$i = 0, $tobool$i$1 = 0, $tobool10$i = 0, $tobool10$i$1 = 0, $tobool15$i = 0, $tobool15$i$1 = 0, $tobool21$i = 0, $tobool21$i$1 = 0, $tobool5$i = 0, $tobool5$i$1 = 0, $tobool6 = 0, $tobool6$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arrayidx = ((($player)) + 252|0);
 $0 = HEAP32[$arrayidx>>2]|0;
 $tobool = ($0|0)==(0|0);
 L1: do {
  if (!($tobool)) {
   $tics = ((($player)) + 256|0);
   $1 = HEAP32[$tics>>2]|0;
   $cmp2 = ($1|0)==(-1);
   if (!($cmp2)) {
    $dec = (($1) + -1)|0;
    HEAP32[$tics>>2] = $dec;
    $tobool6 = ($dec|0)==(0);
    if ($tobool6) {
     $tics4$i = ((($player)) + 256|0);
     $sy$i = ((($player)) + 264|0);
     $sx$i = ((($player)) + 260|0);
     $$pn = $0;
     while(1) {
      $stnum$addr$0$i$in = ((($$pn)) + 16|0);
      $stnum$addr$0$i = HEAP32[$stnum$addr$0$i$in>>2]|0;
      $tobool$i = ($stnum$addr$0$i|0)==(0);
      if ($tobool$i) {
       break;
      }
      $arrayidx2$i = (3488 + (($stnum$addr$0$i*28)|0)|0);
      HEAP32[$arrayidx>>2] = $arrayidx2$i;
      $tics$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 8|0);
      $2 = HEAP32[$tics$i>>2]|0;
      HEAP32[$tics4$i>>2] = $2;
      $misc1$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 20|0);
      $3 = HEAP32[$misc1$i>>2]|0;
      $tobool5$i = ($3|0)==(0);
      if (!($tobool5$i)) {
       $shl$i = $3 << 16;
       $misc2$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 24|0);
       HEAP32[$sx$i>>2] = $shl$i;
       $4 = HEAP32[$misc2$i>>2]|0;
       $shl8$i = $4 << 16;
       HEAP32[$sy$i>>2] = $shl8$i;
      }
      $action$i = (((3488 + (($stnum$addr$0$i*28)|0)|0)) + 12|0);
      $5 = HEAP32[$action$i>>2]|0;
      $tobool10$i = ($5|0)==(0|0);
      if ($tobool10$i) {
       $18 = $arrayidx2$i;$7 = $2;
      } else {
       FUNCTION_TABLE_vii[$5 & 255]($player,$arrayidx);
       $6 = HEAP32[$arrayidx>>2]|0;
       $tobool15$i = ($6|0)==(0|0);
       if ($tobool15$i) {
        break L1;
       }
       $$pre$i = HEAP32[$tics4$i>>2]|0;
       $18 = $6;$7 = $$pre$i;
      }
      $tobool21$i = ($7|0)==(0);
      if ($tobool21$i) {
       $$pn = $18;
      } else {
       break L1;
      }
     }
     HEAP32[$arrayidx>>2] = 0;
    }
   }
  }
 } while(0);
 $state1$1 = ((($player)) + 268|0);
 $8 = HEAP32[$state1$1>>2]|0;
 $tobool$1 = ($8|0)==(0|0);
 L17: do {
  if (!($tobool$1)) {
   $tics$1 = ((($player)) + 272|0);
   $9 = HEAP32[$tics$1>>2]|0;
   $cmp2$1 = ($9|0)==(-1);
   if (!($cmp2$1)) {
    $dec$1 = (($9) + -1)|0;
    HEAP32[$tics$1>>2] = $dec$1;
    $tobool6$1 = ($dec$1|0)==(0);
    if ($tobool6$1) {
     $arrayidx$i$1 = ((($player)) + 268|0);
     $tics4$i$1 = ((($player)) + 272|0);
     $sy$i$1 = ((($player)) + 280|0);
     $sx$i$1 = ((($player)) + 276|0);
     $$pn$1 = $8;
     while(1) {
      $stnum$addr$0$i$in$1 = ((($$pn$1)) + 16|0);
      $stnum$addr$0$i$1 = HEAP32[$stnum$addr$0$i$in$1>>2]|0;
      $tobool$i$1 = ($stnum$addr$0$i$1|0)==(0);
      if ($tobool$i$1) {
       break;
      }
      $arrayidx2$i$1 = (3488 + (($stnum$addr$0$i$1*28)|0)|0);
      HEAP32[$arrayidx$i$1>>2] = $arrayidx2$i$1;
      $tics$i$1 = (((3488 + (($stnum$addr$0$i$1*28)|0)|0)) + 8|0);
      $10 = HEAP32[$tics$i$1>>2]|0;
      HEAP32[$tics4$i$1>>2] = $10;
      $misc1$i$1 = (((3488 + (($stnum$addr$0$i$1*28)|0)|0)) + 20|0);
      $11 = HEAP32[$misc1$i$1>>2]|0;
      $tobool5$i$1 = ($11|0)==(0);
      if (!($tobool5$i$1)) {
       $shl$i$1 = $11 << 16;
       $misc2$i$1 = (((3488 + (($stnum$addr$0$i$1*28)|0)|0)) + 24|0);
       HEAP32[$sx$i$1>>2] = $shl$i$1;
       $12 = HEAP32[$misc2$i$1>>2]|0;
       $shl8$i$1 = $12 << 16;
       HEAP32[$sy$i$1>>2] = $shl8$i$1;
      }
      $action$i$1 = (((3488 + (($stnum$addr$0$i$1*28)|0)|0)) + 12|0);
      $13 = HEAP32[$action$i$1>>2]|0;
      $tobool10$i$1 = ($13|0)==(0|0);
      if ($tobool10$i$1) {
       $15 = $10;$19 = $arrayidx2$i$1;
      } else {
       FUNCTION_TABLE_vii[$13 & 255]($player,$arrayidx$i$1);
       $14 = HEAP32[$arrayidx$i$1>>2]|0;
       $tobool15$i$1 = ($14|0)==(0|0);
       if ($tobool15$i$1) {
        break L17;
       }
       $$pre$i$1 = HEAP32[$tics4$i$1>>2]|0;
       $15 = $$pre$i$1;$19 = $14;
      }
      $tobool21$i$1 = ($15|0)==(0);
      if ($tobool21$i$1) {
       $$pn$1 = $19;
      } else {
       break L17;
      }
     }
     HEAP32[$arrayidx$i$1>>2] = 0;
    }
   }
  }
 } while(0);
 $sx = ((($player)) + 260|0);
 $16 = HEAP32[$sx>>2]|0;
 $sx15 = ((($player)) + 276|0);
 HEAP32[$sx15>>2] = $16;
 $sy = ((($player)) + 264|0);
 $17 = HEAP32[$sy>>2]|0;
 $sy20 = ((($player)) + 280|0);
 HEAP32[$sy20>>2] = $17;
 return;
}
function _P_TempSaveGameFile() {
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $cmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99493]|0;
 $cmp = ($0|0)==(0|0);
 if (!($cmp)) {
  $2 = $0;
  STACKTOP = sp;return ($2|0);
 }
 $1 = HEAP32[99045]|0;
 HEAP32[$vararg_buffer>>2] = 152969;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $call = (_M_StringJoin($1,$vararg_buffer)|0);
 HEAP32[99493] = $call;
 $2 = $call;
 STACKTOP = sp;return ($2|0);
}
function _P_SaveGameFile($slot) {
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add = 0, $basename = 0, $call = 0, $call1 = 0, $cmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 40|0;
 $vararg_buffer = sp + 32|0;
 $basename = sp;
 $0 = HEAP32[99494]|0;
 $cmp = ($0|0)==(0|0);
 if ($cmp) {
  $1 = HEAP32[99045]|0;
  $call = (_strlen($1)|0);
  $add = (($call) + 32)|0;
  HEAP32[99495] = $add;
  $call1 = (_malloc($add)|0);
  HEAP32[99494] = $call1;
 }
 HEAP32[$vararg_buffer>>2] = $slot;
 (_snprintf($basename,32,152978,$vararg_buffer)|0);
 $2 = HEAP32[99494]|0;
 $3 = HEAP32[99495]|0;
 $4 = HEAP32[99045]|0;
 HEAP32[$vararg_buffer1>>2] = $4;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $basename;
 (_M_snprintf($2,$3,152992,$vararg_buffer1)|0);
 $5 = HEAP32[99494]|0;
 STACKTOP = sp;return ($5|0);
}
function _P_WriteSaveGameHeader($description) {
 $description = $description|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx16 = 0, $call = 0, $call$i = 0, $call$i14 = 0, $call$i18 = 0, $call$i22 = 0, $call$i26 = 0;
 var $call$i30 = 0, $call$i34 = 0, $call$i34$1 = 0, $call$i34$2 = 0, $call$i34$3 = 0, $call$i38 = 0, $call$i42 = 0, $call$i46 = 0, $cmp = 0, $cmp451 = 0, $cmp53 = 0, $conv20 = 0, $conv21 = 0, $conv22 = 0, $conv28 = 0, $conv28$1 = 0, $conv28$2 = 0, $conv28$3 = 0, $conv32 = 0, $conv35 = 0;
 var $conv37 = 0, $exitcond = 0, $exitcond55 = 0, $i$0$lcssa57 = 0, $i$054 = 0, $i$152 = 0, $i$250 = 0, $inc = 0, $inc18 = 0, $inc8 = 0, $name = 0, $value$addr$i = 0, $value$addr$i13 = 0, $value$addr$i17 = 0, $value$addr$i21 = 0, $value$addr$i25 = 0, $value$addr$i29 = 0, $value$addr$i33 = 0, $value$addr$i37 = 0, $value$addr$i41 = 0;
 var $value$addr$i45 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $value$addr$i45 = sp + 29|0;
 $value$addr$i41 = sp + 28|0;
 $value$addr$i37 = sp + 27|0;
 $value$addr$i33 = sp + 26|0;
 $value$addr$i29 = sp + 25|0;
 $value$addr$i25 = sp + 24|0;
 $value$addr$i21 = sp + 23|0;
 $value$addr$i17 = sp + 22|0;
 $value$addr$i13 = sp + 21|0;
 $value$addr$i = sp + 20|0;
 $name = sp;
 $0 = HEAP8[$description>>0]|0;
 $cmp53 = ($0<<24>>24)==(0);
 if ($cmp53) {
  $i$0$lcssa57 = 0;
  label = 8;
 } else {
  $1 = HEAP32[32441]|0;
  $2 = $0;$i$054 = 0;
  while(1) {
   HEAP8[$value$addr$i>>0] = $2;
   $3 = HEAP32[99491]|0;
   $call$i = (_fwrite($value$addr$i,1,1,$3)|0);
   $4 = HEAP32[99492]|0;
   $5 = $4 | $call$i;
   $6 = ($5|0)==(0);
   if ($6) {
    (_fwrite(152997,44,1,$1)|0);
    HEAP32[99492] = 1;
   }
   $inc = (($i$054) + 1)|0;
   $arrayidx = (($description) + ($inc)|0);
   $7 = HEAP8[$arrayidx>>0]|0;
   $cmp = ($7<<24>>24)==(0);
   if ($cmp) {
    break;
   } else {
    $2 = $7;$i$054 = $inc;
   }
  }
  $cmp451 = ($inc>>>0)<(24);
  if ($cmp451) {
   $i$0$lcssa57 = $inc;
   label = 8;
  } else {
   $$pre = HEAP32[32441]|0;
   $18 = $$pre;
  }
 }
 if ((label|0) == 8) {
  $8 = HEAP32[32441]|0;
  $i$152 = $i$0$lcssa57;
  while(1) {
   HEAP8[$value$addr$i13>>0] = 0;
   $9 = HEAP32[99491]|0;
   $call$i14 = (_fwrite($value$addr$i13,1,1,$9)|0);
   $10 = HEAP32[99492]|0;
   $11 = $10 | $call$i14;
   $12 = ($11|0)==(0);
   if ($12) {
    (_fwrite(152997,44,1,$8)|0);
    HEAP32[99492] = 1;
   }
   $inc8 = (($i$152) + 1)|0;
   $exitcond55 = ($inc8|0)==(24);
   if ($exitcond55) {
    $18 = $8;
    break;
   } else {
    $i$152 = $inc8;
   }
  }
 }
 ;HEAP32[$name>>2]=0|0;HEAP32[$name+4>>2]=0|0;HEAP32[$name+8>>2]=0|0;HEAP32[$name+12>>2]=0|0;
 $call = (_G_VanillaVersionCode()|0);
 HEAP32[$vararg_buffer>>2] = $call;
 (_M_snprintf($name,16,153042,$vararg_buffer)|0);
 $i$250 = 0;
 while(1) {
  $arrayidx16 = (($name) + ($i$250)|0);
  $13 = HEAP8[$arrayidx16>>0]|0;
  HEAP8[$value$addr$i17>>0] = $13;
  $14 = HEAP32[99491]|0;
  $call$i18 = (_fwrite($value$addr$i17,1,1,$14)|0);
  $15 = HEAP32[99492]|0;
  $16 = $15 | $call$i18;
  $17 = ($16|0)==(0);
  if ($17) {
   (_fwrite(152997,44,1,$18)|0);
   HEAP32[99492] = 1;
  }
  $inc18 = (($i$250) + 1)|0;
  $exitcond = ($inc18|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $i$250 = $inc18;
  }
 }
 $19 = HEAP32[99086]|0;
 $conv20 = $19&255;
 HEAP8[$value$addr$i21>>0] = $conv20;
 $20 = HEAP32[99491]|0;
 $call$i22 = (_fwrite($value$addr$i21,1,1,$20)|0);
 $21 = HEAP32[99492]|0;
 $22 = $21 | $call$i22;
 $23 = ($22|0)==(0);
 if ($23) {
  (_fwrite(152997,44,1,$18)|0);
  HEAP32[99492] = 1;
 }
 $24 = HEAP32[99085]|0;
 $conv21 = $24&255;
 HEAP8[$value$addr$i25>>0] = $conv21;
 $25 = HEAP32[99491]|0;
 $call$i26 = (_fwrite($value$addr$i25,1,1,$25)|0);
 $26 = HEAP32[99492]|0;
 $27 = $26 | $call$i26;
 $28 = ($27|0)==(0);
 if ($28) {
  (_fwrite(152997,44,1,$18)|0);
  HEAP32[99492] = 1;
 }
 $29 = HEAP32[99084]|0;
 $conv22 = $29&255;
 HEAP8[$value$addr$i29>>0] = $conv22;
 $30 = HEAP32[99491]|0;
 $call$i30 = (_fwrite($value$addr$i29,1,1,$30)|0);
 $31 = HEAP32[99492]|0;
 $32 = $31 | $call$i30;
 $33 = ($32|0)==(0);
 if ($33) {
  (_fwrite(152997,44,1,$18)|0);
  HEAP32[99492] = 1;
 }
 $34 = HEAP32[45416]|0;
 $conv28 = $34&255;
 HEAP8[$value$addr$i33>>0] = $conv28;
 $35 = HEAP32[99491]|0;
 $call$i34 = (_fwrite($value$addr$i33,1,1,$35)|0);
 $36 = HEAP32[99492]|0;
 $37 = $36 | $call$i34;
 $38 = ($37|0)==(0);
 if ($38) {
  (_fwrite(152997,44,1,$18)|0);
  HEAP32[99492] = 1;
 }
 $39 = HEAP32[(181668)>>2]|0;
 $conv28$1 = $39&255;
 HEAP8[$value$addr$i33>>0] = $conv28$1;
 $40 = HEAP32[99491]|0;
 $call$i34$1 = (_fwrite($value$addr$i33,1,1,$40)|0);
 $41 = HEAP32[99492]|0;
 $42 = $41 | $call$i34$1;
 $43 = ($42|0)==(0);
 if ($43) {
  (_fwrite(152997,44,1,$18)|0);
  HEAP32[99492] = 1;
 }
 $55 = HEAP32[(181672)>>2]|0;
 $conv28$2 = $55&255;
 HEAP8[$value$addr$i33>>0] = $conv28$2;
 $56 = HEAP32[99491]|0;
 $call$i34$2 = (_fwrite($value$addr$i33,1,1,$56)|0);
 $57 = HEAP32[99492]|0;
 $58 = $57 | $call$i34$2;
 $59 = ($58|0)==(0);
 if ($59) {
  (_fwrite(152997,44,1,$18)|0);
  HEAP32[99492] = 1;
 }
 $60 = HEAP32[(181676)>>2]|0;
 $conv28$3 = $60&255;
 HEAP8[$value$addr$i33>>0] = $conv28$3;
 $61 = HEAP32[99491]|0;
 $call$i34$3 = (_fwrite($value$addr$i33,1,1,$61)|0);
 $62 = HEAP32[99492]|0;
 $63 = $62 | $call$i34$3;
 $64 = ($63|0)==(0);
 if ($64) {
  (_fwrite(152997,44,1,$18)|0);
  HEAP32[99492] = 1;
 }
 $65 = HEAP32[99557]|0;
 $66 = $65 >>> 16;
 $conv32 = $66&255;
 HEAP8[$value$addr$i37>>0] = $conv32;
 $67 = HEAP32[99491]|0;
 $call$i38 = (_fwrite($value$addr$i37,1,1,$67)|0);
 $68 = HEAP32[99492]|0;
 $69 = $68 | $call$i38;
 $70 = ($69|0)==(0);
 if ($70) {
  (_fwrite(152997,44,1,$18)|0);
  HEAP32[99492] = 1;
 }
 $44 = HEAP32[99557]|0;
 $45 = $44 >>> 8;
 $conv35 = $45&255;
 HEAP8[$value$addr$i41>>0] = $conv35;
 $46 = HEAP32[99491]|0;
 $call$i42 = (_fwrite($value$addr$i41,1,1,$46)|0);
 $47 = HEAP32[99492]|0;
 $48 = $47 | $call$i42;
 $49 = ($48|0)==(0);
 if ($49) {
  (_fwrite(152997,44,1,$18)|0);
  HEAP32[99492] = 1;
 }
 $50 = HEAP32[99557]|0;
 $conv37 = $50&255;
 HEAP8[$value$addr$i45>>0] = $conv37;
 $51 = HEAP32[99491]|0;
 $call$i46 = (_fwrite($value$addr$i45,1,1,$51)|0);
 $52 = HEAP32[99492]|0;
 $53 = $52 | $call$i46;
 $54 = ($53|0)==(0);
 if (!($54)) {
  STACKTOP = sp;return;
 }
 (_fwrite(152997,44,1,$18)|0);
 HEAP32[99492] = 1;
 STACKTOP = sp;return;
}
function _P_ReadSaveGameHeader() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add37 = 0, $arrayidx = 0, $arrayidx26 = 0, $call$i = 0, $call$i10 = 0, $call$i14 = 0, $call$i18 = 0, $call$i22 = 0, $call$i26 = 0, $call$i30 = 0, $call$i34 = 0, $call13 = 0, $call9 = 0, $cmp14 = 0, $cmp21 = 0, $conv = 0, $conv17 = 0, $conv19 = 0, $conv25 = 0;
 var $conv33 = 0, $conv34 = 0, $conv36 = 0, $exitcond = 0, $exitcond39 = 0, $i$038 = 0, $i$137 = 0, $i$2 = 0, $inc = 0, $inc28 = 0, $inc6 = 0, $read_vcheck = 0, $result$i = 0, $result$i13 = 0, $result$i17 = 0, $result$i21 = 0, $result$i25 = 0, $result$i29 = 0, $result$i33 = 0, $result$i9 = 0;
 var $retval$0 = 0, $shl = 0, $shl35 = 0, $vararg_buffer = 0, $vcheck = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp + 32|0;
 $result$i33 = sp + 43|0;
 $result$i29 = sp + 42|0;
 $result$i25 = sp + 41|0;
 $result$i21 = sp + 40|0;
 $result$i17 = sp + 39|0;
 $result$i13 = sp + 38|0;
 $result$i9 = sp + 37|0;
 $result$i = sp + 36|0;
 $vcheck = sp + 16|0;
 $read_vcheck = sp;
 $0 = HEAP32[32441]|0;
 $i$038 = 0;
 while(1) {
  $1 = HEAP32[99491]|0;
  $call$i = (_fread($result$i,1,1,$1)|0);
  $2 = HEAP32[99492]|0;
  $3 = $2 | $call$i;
  $4 = ($3|0)==(0);
  if ($4) {
   (_fwrite(153053,60,1,$0)|0);
   HEAP32[99492] = 1;
  }
  $inc = (($i$038) + 1)|0;
  $exitcond39 = ($inc|0)==(24);
  if ($exitcond39) {
   break;
  } else {
   $i$038 = $inc;
  }
 }
 $i$137 = 0;
 while(1) {
  $5 = HEAP32[99491]|0;
  $call$i10 = (_fread($result$i9,1,1,$5)|0);
  $6 = HEAP32[99492]|0;
  $7 = $6 | $call$i10;
  $8 = ($7|0)==(0);
  if ($8) {
   (_fwrite(153053,60,1,$0)|0);
   HEAP32[99492] = 1;
  }
  $9 = HEAP8[$result$i9>>0]|0;
  $arrayidx = (($read_vcheck) + ($i$137)|0);
  HEAP8[$arrayidx>>0] = $9;
  $inc6 = (($i$137) + 1)|0;
  $exitcond = ($inc6|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $i$137 = $inc6;
  }
 }
 ;HEAP32[$vcheck>>2]=0|0;HEAP32[$vcheck+4>>2]=0|0;HEAP32[$vcheck+8>>2]=0|0;HEAP32[$vcheck+12>>2]=0|0;
 $call9 = (_G_VanillaVersionCode()|0);
 HEAP32[$vararg_buffer>>2] = $call9;
 (_M_snprintf($vcheck,16,153042,$vararg_buffer)|0);
 $call13 = (_strcmp($read_vcheck,$vcheck)|0);
 $cmp14 = ($call13|0)==(0);
 if (!($cmp14)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $10 = HEAP32[99491]|0;
 $call$i14 = (_fread($result$i13,1,1,$10)|0);
 $11 = HEAP32[99492]|0;
 $12 = $11 | $call$i14;
 $13 = ($12|0)==(0);
 if ($13) {
  (_fwrite(153053,60,1,$0)|0);
  HEAP32[99492] = 1;
 }
 $14 = HEAP8[$result$i13>>0]|0;
 $conv = $14&255;
 HEAP32[99086] = $conv;
 $15 = HEAP32[99491]|0;
 $call$i18 = (_fread($result$i17,1,1,$15)|0);
 $16 = HEAP32[99492]|0;
 $17 = $16 | $call$i18;
 $18 = ($17|0)==(0);
 if ($18) {
  (_fwrite(153053,60,1,$0)|0);
  HEAP32[99492] = 1;
 }
 $19 = HEAP8[$result$i17>>0]|0;
 $conv17 = $19&255;
 HEAP32[99085] = $conv17;
 $20 = HEAP32[99491]|0;
 $call$i22 = (_fread($result$i21,1,1,$20)|0);
 $21 = HEAP32[99492]|0;
 $22 = $21 | $call$i22;
 $23 = ($22|0)==(0);
 if ($23) {
  (_fwrite(153053,60,1,$0)|0);
  HEAP32[99492] = 1;
 }
 $24 = HEAP8[$result$i21>>0]|0;
 $conv19 = $24&255;
 HEAP32[99084] = $conv19;
 $i$2 = 0;
 while(1) {
  $cmp21 = ($i$2>>>0)<(4);
  $25 = HEAP32[99491]|0;
  $call$i26 = (_fread($result$i25,1,1,$25)|0);
  $26 = HEAP32[99492]|0;
  $27 = $26 | $call$i26;
  $28 = ($27|0)==(0);
  if ($28) {
   (_fwrite(153053,60,1,$0)|0);
   HEAP32[99492] = 1;
  }
  $29 = HEAP8[$result$i25>>0]|0;
  if (!($cmp21)) {
   break;
  }
  $conv25 = $29&255;
  $arrayidx26 = (181664 + ($i$2<<2)|0);
  HEAP32[$arrayidx26>>2] = $conv25;
  $inc28 = (($i$2) + 1)|0;
  $i$2 = $inc28;
 }
 $30 = HEAP32[99491]|0;
 $call$i30 = (_fread($result$i29,1,1,$30)|0);
 $31 = HEAP32[99492]|0;
 $32 = $31 | $call$i30;
 $33 = ($32|0)==(0);
 if ($33) {
  (_fwrite(153053,60,1,$0)|0);
  HEAP32[99492] = 1;
 }
 $34 = HEAP8[$result$i29>>0]|0;
 $35 = HEAP32[99491]|0;
 $call$i34 = (_fread($result$i33,1,1,$35)|0);
 $36 = HEAP32[99492]|0;
 $37 = $36 | $call$i34;
 $38 = ($37|0)==(0);
 if ($38) {
  (_fwrite(153053,60,1,$0)|0);
  HEAP32[99492] = 1;
 }
 $39 = HEAP8[$result$i33>>0]|0;
 $conv33 = $29&255;
 $shl = $conv33 << 16;
 $conv34 = $34&255;
 $shl35 = $conv34 << 8;
 $add = $shl35 | $shl;
 $conv36 = $39&255;
 $add37 = $add | $conv36;
 HEAP32[99557] = $add37;
 $retval$0 = 1;
 STACKTOP = sp;return ($retval$0|0);
}
function _P_ReadSaveGameEOF() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call$i = 0, $cmp = 0, $conv1 = 0, $result$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $result$i = sp;
 $0 = HEAP32[99491]|0;
 $call$i = (_fread($result$i,1,1,$0)|0);
 $1 = HEAP32[99492]|0;
 $2 = $1 | $call$i;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = HEAP32[32441]|0;
  (_fwrite(153053,60,1,$4)|0);
  HEAP32[99492] = 1;
 }
 $5 = HEAP8[$result$i>>0]|0;
 $cmp = ($5<<24>>24)==(29);
 $conv1 = $cmp&1;
 STACKTOP = sp;return ($conv1|0);
}
function _P_WriteSaveGameEOF() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call$i = 0, $value$addr$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value$addr$i = sp;
 HEAP8[$value$addr$i>>0] = 29;
 $0 = HEAP32[99491]|0;
 $call$i = (_fwrite($value$addr$i,1,1,$0)|0);
 $1 = HEAP32[99492]|0;
 $2 = $1 | $call$i;
 $3 = ($2|0)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[32441]|0;
 (_fwrite(152997,44,1,$4)|0);
 HEAP32[99492] = 1;
 STACKTOP = sp;return;
}
function _P_ArchivePlayers() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $and1$i = 0, $angleturn$i$i = 0, $armorpoints$i = 0, $armortype$i = 0, $arrayidx = 0, $arrayidx$1$i = 0;
 var $arrayidx$2$i = 0, $arrayidx$3$i = 0, $arrayidx$4$i = 0, $arrayidx$5$i = 0, $arrayidx$i = 0, $arrayidx1 = 0, $arrayidx11$1$i = 0, $arrayidx11$2$i = 0, $arrayidx11$3$i = 0, $arrayidx11$i = 0, $arrayidx18$1$i = 0, $arrayidx18$2$i = 0, $arrayidx18$3$i = 0, $arrayidx18$4$i = 0, $arrayidx18$5$i = 0, $arrayidx18$6$i = 0, $arrayidx18$7$i = 0, $arrayidx18$8$i = 0, $arrayidx18$i = 0, $arrayidx25$1$i = 0;
 var $arrayidx25$2$i = 0, $arrayidx25$3$i = 0, $arrayidx25$i = 0, $arrayidx32$1$i = 0, $arrayidx32$2$i = 0, $arrayidx32$3$i = 0, $arrayidx32$i = 0, $arrayidx4$1$i = 0, $arrayidx4$2$i = 0, $arrayidx4$3$i = 0, $arrayidx4$4$i = 0, $arrayidx4$5$i = 0, $arrayidx4$i = 0, $attackdown$i = 0, $attacker$i = 0, $backpack$i = 0, $bob$i = 0, $bonuscount$i = 0, $buttons$i$i = 0, $call$i = 0;
 var $call$i$i = 0, $call$i$i$i = 0, $call$i$i$i$i = 0, $call$i$i11$i$i = 0, $call$i15$i$i = 0, $call$i19$i$i = 0, $call$i23$i$i = 0, $call$i27$i$i = 0, $call$i7$i$i = 0, $chatchar$i$i = 0, $cheats$i = 0, $cmp5$i = 0, $colormap$i = 0, $consistancy$i$i = 0, $conv1$i$i$i = 0, $conv4$i$i$i = 0, $damagecount$i = 0, $deltaviewheight$i = 0, $didsecret$i = 0, $exitcond = 0;
 var $exitcond$i = 0, $extralight$i = 0, $fixedcolormap$i = 0, $forwardmove$i$i = 0, $health$i = 0, $i$05 = 0, $i$06$i = 0, $inc = 0, $inc$i = 0, $itemcount$i = 0, $killcount$i = 0, $message$i = 0, $pendingweapon$i = 0, $playerstate$i = 0, $readyweapon$i = 0, $refire$i = 0, $secretcount$i = 0, $sidemove$i$i = 0, $state$i$1$i = 0, $state$i$i = 0;
 var $sub$i = 0, $sub$ptr$div$i$1$i = 0, $sub$ptr$div$i$i = 0, $sub$ptr$lhs$cast$i$1$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$sub$i$1$i = 0, $sub$ptr$sub$i$i = 0, $sx$i$1$i = 0, $sx$i$i = 0, $sy$i$1$i = 0, $sy$i$i = 0, $tics$i$1$i = 0, $tics$i$i = 0, $tobool = 0, $tobool$i$1$i = 0, $tobool$i$i = 0, $usedown$i = 0, $value$addr$i$i = 0, $value$addr$i$i$i = 0, $value$addr$i$i$i$i = 0;
 var $value$addr$i$i10$i$i = 0, $value$addr$i14$i$i = 0, $value$addr$i18$i$i = 0, $value$addr$i22$i$i = 0, $value$addr$i26$i$i = 0, $value$addr$i6$i$i = 0, $viewheight$i = 0, $viewz$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value$addr$i26$i$i = sp + 8|0;
 $value$addr$i22$i$i = sp + 7|0;
 $value$addr$i18$i$i = sp + 6|0;
 $value$addr$i14$i$i = sp + 5|0;
 $value$addr$i$i10$i$i = sp + 4|0;
 $value$addr$i$i$i$i = sp + 3|0;
 $value$addr$i6$i$i = sp + 2|0;
 $value$addr$i$i$i = sp + 1|0;
 $value$addr$i$i = sp;
 $0 = HEAP32[32441]|0;
 $i$05 = 0;
 while(1) {
  $arrayidx = (181664 + ($i$05<<2)|0);
  $1 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   $2 = HEAP32[99491]|0;
   $call$i = (_ftell($2)|0);
   $sub$i = (0 - ($call$i))|0;
   $and1$i = $sub$i & 3;
   $cmp5$i = ($and1$i|0)==(0);
   if (!($cmp5$i)) {
    $i$06$i = 0;
    while(1) {
     HEAP8[$value$addr$i$i>>0] = 0;
     $3 = HEAP32[99491]|0;
     $call$i$i = (_fwrite($value$addr$i$i,1,1,$3)|0);
     $4 = HEAP32[99492]|0;
     $5 = $4 | $call$i$i;
     $6 = ($5|0)==(0);
     if ($6) {
      (_fwrite(152997,44,1,$0)|0);
      HEAP32[99492] = 1;
     }
     $inc$i = (($i$06$i) + 1)|0;
     $exitcond$i = ($inc$i|0)==($and1$i|0);
     if ($exitcond$i) {
      break;
     } else {
      $i$06$i = $inc$i;
     }
    }
   }
   $arrayidx1 = (181680 + (($i$05*288)|0)|0);
   $7 = HEAP32[$arrayidx1>>2]|0;
   _saveg_write32($7);
   $playerstate$i = (((181680 + (($i$05*288)|0)|0)) + 4|0);
   $8 = HEAP32[$playerstate$i>>2]|0;
   _saveg_write32($8);
   $forwardmove$i$i = (((181680 + (($i$05*288)|0)|0)) + 8|0);
   $9 = HEAP8[$forwardmove$i$i>>0]|0;
   HEAP8[$value$addr$i$i$i>>0] = $9;
   $10 = HEAP32[99491]|0;
   $call$i$i$i = (_fwrite($value$addr$i$i$i,1,1,$10)|0);
   $11 = HEAP32[99492]|0;
   $12 = $11 | $call$i$i$i;
   $13 = ($12|0)==(0);
   if ($13) {
    (_fwrite(152997,44,1,$0)|0);
    HEAP32[99492] = 1;
   }
   $sidemove$i$i = (((181680 + (($i$05*288)|0)|0)) + 9|0);
   $14 = HEAP8[$sidemove$i$i>>0]|0;
   HEAP8[$value$addr$i6$i$i>>0] = $14;
   $15 = HEAP32[99491]|0;
   $call$i7$i$i = (_fwrite($value$addr$i6$i$i,1,1,$15)|0);
   $16 = HEAP32[99492]|0;
   $17 = $16 | $call$i7$i$i;
   $18 = ($17|0)==(0);
   if ($18) {
    (_fwrite(152997,44,1,$0)|0);
    HEAP32[99492] = 1;
   }
   $angleturn$i$i = (((181680 + (($i$05*288)|0)|0)) + 10|0);
   $19 = HEAP16[$angleturn$i$i>>1]|0;
   $conv1$i$i$i = $19&255;
   HEAP8[$value$addr$i$i$i$i>>0] = $conv1$i$i$i;
   $20 = HEAP32[99491]|0;
   $call$i$i$i$i = (_fwrite($value$addr$i$i$i$i,1,1,$20)|0);
   $21 = HEAP32[99492]|0;
   $22 = $21 | $call$i$i$i$i;
   $23 = ($22|0)==(0);
   if ($23) {
    (_fwrite(152997,44,1,$0)|0);
    HEAP32[99492] = 1;
   }
   $24 = ($19&65535) >>> 8;
   $conv4$i$i$i = $24&255;
   HEAP8[$value$addr$i22$i$i>>0] = $conv4$i$i$i;
   $25 = HEAP32[99491]|0;
   $call$i23$i$i = (_fwrite($value$addr$i22$i$i,1,1,$25)|0);
   $26 = HEAP32[99492]|0;
   $27 = $26 | $call$i23$i$i;
   $28 = ($27|0)==(0);
   if ($28) {
    (_fwrite(152997,44,1,$0)|0);
    HEAP32[99492] = 1;
   }
   $consistancy$i$i = (((181680 + (($i$05*288)|0)|0)) + 14|0);
   $29 = HEAP8[$consistancy$i$i>>0]|0;
   HEAP8[$value$addr$i$i10$i$i>>0] = $29;
   $30 = HEAP32[99491]|0;
   $call$i$i11$i$i = (_fwrite($value$addr$i$i10$i$i,1,1,$30)|0);
   $31 = HEAP32[99492]|0;
   $32 = $31 | $call$i$i11$i$i;
   $33 = ($32|0)==(0);
   if ($33) {
    (_fwrite(152997,44,1,$0)|0);
    HEAP32[99492] = 1;
   }
   HEAP8[$value$addr$i26$i$i>>0] = 0;
   $34 = HEAP32[99491]|0;
   $call$i27$i$i = (_fwrite($value$addr$i26$i$i,1,1,$34)|0);
   $35 = HEAP32[99492]|0;
   $36 = $35 | $call$i27$i$i;
   $37 = ($36|0)==(0);
   if ($37) {
    (_fwrite(152997,44,1,$0)|0);
    HEAP32[99492] = 1;
   }
   $chatchar$i$i = (((181680 + (($i$05*288)|0)|0)) + 12|0);
   $38 = HEAP8[$chatchar$i$i>>0]|0;
   HEAP8[$value$addr$i14$i$i>>0] = $38;
   $39 = HEAP32[99491]|0;
   $call$i15$i$i = (_fwrite($value$addr$i14$i$i,1,1,$39)|0);
   $40 = HEAP32[99492]|0;
   $41 = $40 | $call$i15$i$i;
   $42 = ($41|0)==(0);
   if ($42) {
    (_fwrite(152997,44,1,$0)|0);
    HEAP32[99492] = 1;
   }
   $buttons$i$i = (((181680 + (($i$05*288)|0)|0)) + 13|0);
   $43 = HEAP8[$buttons$i$i>>0]|0;
   HEAP8[$value$addr$i18$i$i>>0] = $43;
   $44 = HEAP32[99491]|0;
   $call$i19$i$i = (_fwrite($value$addr$i18$i$i,1,1,$44)|0);
   $45 = HEAP32[99492]|0;
   $46 = $45 | $call$i19$i$i;
   $47 = ($46|0)==(0);
   if ($47) {
    (_fwrite(152997,44,1,$0)|0);
    HEAP32[99492] = 1;
   }
   $viewz$i = (((181680 + (($i$05*288)|0)|0)) + 24|0);
   $48 = HEAP32[$viewz$i>>2]|0;
   _saveg_write32($48);
   $viewheight$i = (((181680 + (($i$05*288)|0)|0)) + 28|0);
   $49 = HEAP32[$viewheight$i>>2]|0;
   _saveg_write32($49);
   $deltaviewheight$i = (((181680 + (($i$05*288)|0)|0)) + 32|0);
   $50 = HEAP32[$deltaviewheight$i>>2]|0;
   _saveg_write32($50);
   $bob$i = (((181680 + (($i$05*288)|0)|0)) + 36|0);
   $51 = HEAP32[$bob$i>>2]|0;
   _saveg_write32($51);
   $health$i = (((181680 + (($i$05*288)|0)|0)) + 40|0);
   $52 = HEAP32[$health$i>>2]|0;
   _saveg_write32($52);
   $armorpoints$i = (((181680 + (($i$05*288)|0)|0)) + 44|0);
   $53 = HEAP32[$armorpoints$i>>2]|0;
   _saveg_write32($53);
   $armortype$i = (((181680 + (($i$05*288)|0)|0)) + 48|0);
   $54 = HEAP32[$armortype$i>>2]|0;
   _saveg_write32($54);
   $arrayidx$i = (((181680 + (($i$05*288)|0)|0)) + 52|0);
   $55 = HEAP32[$arrayidx$i>>2]|0;
   _saveg_write32($55);
   $arrayidx$1$i = (((181680 + (($i$05*288)|0)|0)) + 56|0);
   $56 = HEAP32[$arrayidx$1$i>>2]|0;
   _saveg_write32($56);
   $arrayidx$2$i = (((181680 + (($i$05*288)|0)|0)) + 60|0);
   $57 = HEAP32[$arrayidx$2$i>>2]|0;
   _saveg_write32($57);
   $arrayidx$3$i = (((181680 + (($i$05*288)|0)|0)) + 64|0);
   $58 = HEAP32[$arrayidx$3$i>>2]|0;
   _saveg_write32($58);
   $arrayidx$4$i = (((181680 + (($i$05*288)|0)|0)) + 68|0);
   $59 = HEAP32[$arrayidx$4$i>>2]|0;
   _saveg_write32($59);
   $arrayidx$5$i = (((181680 + (($i$05*288)|0)|0)) + 72|0);
   $60 = HEAP32[$arrayidx$5$i>>2]|0;
   _saveg_write32($60);
   $arrayidx4$i = (((181680 + (($i$05*288)|0)|0)) + 76|0);
   $61 = HEAP32[$arrayidx4$i>>2]|0;
   _saveg_write32($61);
   $arrayidx4$1$i = (((181680 + (($i$05*288)|0)|0)) + 80|0);
   $62 = HEAP32[$arrayidx4$1$i>>2]|0;
   _saveg_write32($62);
   $arrayidx4$2$i = (((181680 + (($i$05*288)|0)|0)) + 84|0);
   $63 = HEAP32[$arrayidx4$2$i>>2]|0;
   _saveg_write32($63);
   $arrayidx4$3$i = (((181680 + (($i$05*288)|0)|0)) + 88|0);
   $64 = HEAP32[$arrayidx4$3$i>>2]|0;
   _saveg_write32($64);
   $arrayidx4$4$i = (((181680 + (($i$05*288)|0)|0)) + 92|0);
   $65 = HEAP32[$arrayidx4$4$i>>2]|0;
   _saveg_write32($65);
   $arrayidx4$5$i = (((181680 + (($i$05*288)|0)|0)) + 96|0);
   $66 = HEAP32[$arrayidx4$5$i>>2]|0;
   _saveg_write32($66);
   $backpack$i = (((181680 + (($i$05*288)|0)|0)) + 100|0);
   $67 = HEAP32[$backpack$i>>2]|0;
   _saveg_write32($67);
   $arrayidx11$i = (((181680 + (($i$05*288)|0)|0)) + 104|0);
   $68 = HEAP32[$arrayidx11$i>>2]|0;
   _saveg_write32($68);
   $arrayidx11$1$i = (((181680 + (($i$05*288)|0)|0)) + 108|0);
   $69 = HEAP32[$arrayidx11$1$i>>2]|0;
   _saveg_write32($69);
   $arrayidx11$2$i = (((181680 + (($i$05*288)|0)|0)) + 112|0);
   $70 = HEAP32[$arrayidx11$2$i>>2]|0;
   _saveg_write32($70);
   $arrayidx11$3$i = (((181680 + (($i$05*288)|0)|0)) + 116|0);
   $71 = HEAP32[$arrayidx11$3$i>>2]|0;
   _saveg_write32($71);
   $readyweapon$i = (((181680 + (($i$05*288)|0)|0)) + 120|0);
   $72 = HEAP32[$readyweapon$i>>2]|0;
   _saveg_write32($72);
   $pendingweapon$i = (((181680 + (($i$05*288)|0)|0)) + 124|0);
   $73 = HEAP32[$pendingweapon$i>>2]|0;
   _saveg_write32($73);
   $arrayidx18$i = (((181680 + (($i$05*288)|0)|0)) + 128|0);
   $74 = HEAP32[$arrayidx18$i>>2]|0;
   _saveg_write32($74);
   $arrayidx18$1$i = (((181680 + (($i$05*288)|0)|0)) + 132|0);
   $75 = HEAP32[$arrayidx18$1$i>>2]|0;
   _saveg_write32($75);
   $arrayidx18$2$i = (((181680 + (($i$05*288)|0)|0)) + 136|0);
   $76 = HEAP32[$arrayidx18$2$i>>2]|0;
   _saveg_write32($76);
   $arrayidx18$3$i = (((181680 + (($i$05*288)|0)|0)) + 140|0);
   $77 = HEAP32[$arrayidx18$3$i>>2]|0;
   _saveg_write32($77);
   $arrayidx18$4$i = (((181680 + (($i$05*288)|0)|0)) + 144|0);
   $78 = HEAP32[$arrayidx18$4$i>>2]|0;
   _saveg_write32($78);
   $arrayidx18$5$i = (((181680 + (($i$05*288)|0)|0)) + 148|0);
   $79 = HEAP32[$arrayidx18$5$i>>2]|0;
   _saveg_write32($79);
   $arrayidx18$6$i = (((181680 + (($i$05*288)|0)|0)) + 152|0);
   $80 = HEAP32[$arrayidx18$6$i>>2]|0;
   _saveg_write32($80);
   $arrayidx18$7$i = (((181680 + (($i$05*288)|0)|0)) + 156|0);
   $81 = HEAP32[$arrayidx18$7$i>>2]|0;
   _saveg_write32($81);
   $arrayidx18$8$i = (((181680 + (($i$05*288)|0)|0)) + 160|0);
   $82 = HEAP32[$arrayidx18$8$i>>2]|0;
   _saveg_write32($82);
   $arrayidx25$i = (((181680 + (($i$05*288)|0)|0)) + 164|0);
   $83 = HEAP32[$arrayidx25$i>>2]|0;
   _saveg_write32($83);
   $arrayidx25$1$i = (((181680 + (($i$05*288)|0)|0)) + 168|0);
   $84 = HEAP32[$arrayidx25$1$i>>2]|0;
   _saveg_write32($84);
   $arrayidx25$2$i = (((181680 + (($i$05*288)|0)|0)) + 172|0);
   $85 = HEAP32[$arrayidx25$2$i>>2]|0;
   _saveg_write32($85);
   $arrayidx25$3$i = (((181680 + (($i$05*288)|0)|0)) + 176|0);
   $86 = HEAP32[$arrayidx25$3$i>>2]|0;
   _saveg_write32($86);
   $arrayidx32$i = (((181680 + (($i$05*288)|0)|0)) + 180|0);
   $87 = HEAP32[$arrayidx32$i>>2]|0;
   _saveg_write32($87);
   $arrayidx32$1$i = (((181680 + (($i$05*288)|0)|0)) + 184|0);
   $88 = HEAP32[$arrayidx32$1$i>>2]|0;
   _saveg_write32($88);
   $arrayidx32$2$i = (((181680 + (($i$05*288)|0)|0)) + 188|0);
   $89 = HEAP32[$arrayidx32$2$i>>2]|0;
   _saveg_write32($89);
   $arrayidx32$3$i = (((181680 + (($i$05*288)|0)|0)) + 192|0);
   $90 = HEAP32[$arrayidx32$3$i>>2]|0;
   _saveg_write32($90);
   $attackdown$i = (((181680 + (($i$05*288)|0)|0)) + 196|0);
   $91 = HEAP32[$attackdown$i>>2]|0;
   _saveg_write32($91);
   $usedown$i = (((181680 + (($i$05*288)|0)|0)) + 200|0);
   $92 = HEAP32[$usedown$i>>2]|0;
   _saveg_write32($92);
   $cheats$i = (((181680 + (($i$05*288)|0)|0)) + 204|0);
   $93 = HEAP32[$cheats$i>>2]|0;
   _saveg_write32($93);
   $refire$i = (((181680 + (($i$05*288)|0)|0)) + 208|0);
   $94 = HEAP32[$refire$i>>2]|0;
   _saveg_write32($94);
   $killcount$i = (((181680 + (($i$05*288)|0)|0)) + 212|0);
   $95 = HEAP32[$killcount$i>>2]|0;
   _saveg_write32($95);
   $itemcount$i = (((181680 + (($i$05*288)|0)|0)) + 216|0);
   $96 = HEAP32[$itemcount$i>>2]|0;
   _saveg_write32($96);
   $secretcount$i = (((181680 + (($i$05*288)|0)|0)) + 220|0);
   $97 = HEAP32[$secretcount$i>>2]|0;
   _saveg_write32($97);
   $message$i = (((181680 + (($i$05*288)|0)|0)) + 224|0);
   $98 = HEAP32[$message$i>>2]|0;
   _saveg_write32($98);
   $damagecount$i = (((181680 + (($i$05*288)|0)|0)) + 228|0);
   $99 = HEAP32[$damagecount$i>>2]|0;
   _saveg_write32($99);
   $bonuscount$i = (((181680 + (($i$05*288)|0)|0)) + 232|0);
   $100 = HEAP32[$bonuscount$i>>2]|0;
   _saveg_write32($100);
   $attacker$i = (((181680 + (($i$05*288)|0)|0)) + 236|0);
   $101 = HEAP32[$attacker$i>>2]|0;
   _saveg_write32($101);
   $extralight$i = (((181680 + (($i$05*288)|0)|0)) + 240|0);
   $102 = HEAP32[$extralight$i>>2]|0;
   _saveg_write32($102);
   $fixedcolormap$i = (((181680 + (($i$05*288)|0)|0)) + 244|0);
   $103 = HEAP32[$fixedcolormap$i>>2]|0;
   _saveg_write32($103);
   $colormap$i = (((181680 + (($i$05*288)|0)|0)) + 248|0);
   $104 = HEAP32[$colormap$i>>2]|0;
   _saveg_write32($104);
   $state$i$i = (((181680 + (($i$05*288)|0)|0)) + 252|0);
   $105 = HEAP32[$state$i$i>>2]|0;
   $tobool$i$i = ($105|0)==(0|0);
   if ($tobool$i$i) {
    _saveg_write32(0);
   } else {
    $sub$ptr$lhs$cast$i$i = $105;
    $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - (3488))|0;
    $sub$ptr$div$i$i = (($sub$ptr$sub$i$i|0) / 28)&-1;
    _saveg_write32($sub$ptr$div$i$i);
   }
   $tics$i$i = (((181680 + (($i$05*288)|0)|0)) + 256|0);
   $106 = HEAP32[$tics$i$i>>2]|0;
   _saveg_write32($106);
   $sx$i$i = (((181680 + (($i$05*288)|0)|0)) + 260|0);
   $107 = HEAP32[$sx$i$i>>2]|0;
   _saveg_write32($107);
   $sy$i$i = (((181680 + (($i$05*288)|0)|0)) + 264|0);
   $108 = HEAP32[$sy$i$i>>2]|0;
   _saveg_write32($108);
   $state$i$1$i = (((181680 + (($i$05*288)|0)|0)) + 268|0);
   $109 = HEAP32[$state$i$1$i>>2]|0;
   $tobool$i$1$i = ($109|0)==(0|0);
   if ($tobool$i$1$i) {
    _saveg_write32(0);
   } else {
    $sub$ptr$lhs$cast$i$1$i = $109;
    $sub$ptr$sub$i$1$i = (($sub$ptr$lhs$cast$i$1$i) - (3488))|0;
    $sub$ptr$div$i$1$i = (($sub$ptr$sub$i$1$i|0) / 28)&-1;
    _saveg_write32($sub$ptr$div$i$1$i);
   }
   $tics$i$1$i = (((181680 + (($i$05*288)|0)|0)) + 272|0);
   $110 = HEAP32[$tics$i$1$i>>2]|0;
   _saveg_write32($110);
   $sx$i$1$i = (((181680 + (($i$05*288)|0)|0)) + 276|0);
   $111 = HEAP32[$sx$i$1$i>>2]|0;
   _saveg_write32($111);
   $sy$i$1$i = (((181680 + (($i$05*288)|0)|0)) + 280|0);
   $112 = HEAP32[$sy$i$1$i>>2]|0;
   _saveg_write32($112);
   $didsecret$i = (((181680 + (($i$05*288)|0)|0)) + 284|0);
   $113 = HEAP32[$didsecret$i>>2]|0;
   _saveg_write32($113);
  }
  $inc = (($i$05) + 1)|0;
  $exitcond = ($inc|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $i$05 = $inc;
  }
 }
 STACKTOP = sp;return;
}
function _saveg_write32($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $call$i = 0, $call$i13 = 0, $call$i5 = 0, $call$i9 = 0, $conv = 0, $conv2 = 0, $conv5 = 0, $conv8 = 0, $value$addr$i = 0, $value$addr$i12 = 0, $value$addr$i4 = 0, $value$addr$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value$addr$i12 = sp + 3|0;
 $value$addr$i8 = sp + 2|0;
 $value$addr$i4 = sp + 1|0;
 $value$addr$i = sp;
 $conv = $value&255;
 HEAP8[$value$addr$i>>0] = $conv;
 $0 = HEAP32[99491]|0;
 $call$i = (_fwrite($value$addr$i,1,1,$0)|0);
 $1 = HEAP32[99492]|0;
 $2 = $1 | $call$i;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = HEAP32[32441]|0;
  (_fwrite(152997,44,1,$4)|0);
  HEAP32[99492] = 1;
 }
 $5 = $value >>> 8;
 $conv2 = $5&255;
 HEAP8[$value$addr$i4>>0] = $conv2;
 $6 = HEAP32[99491]|0;
 $call$i5 = (_fwrite($value$addr$i4,1,1,$6)|0);
 $7 = HEAP32[99492]|0;
 $8 = $7 | $call$i5;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = HEAP32[32441]|0;
  (_fwrite(152997,44,1,$10)|0);
  HEAP32[99492] = 1;
 }
 $11 = $value >>> 16;
 $conv5 = $11&255;
 HEAP8[$value$addr$i8>>0] = $conv5;
 $12 = HEAP32[99491]|0;
 $call$i9 = (_fwrite($value$addr$i8,1,1,$12)|0);
 $13 = HEAP32[99492]|0;
 $14 = $13 | $call$i9;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = HEAP32[32441]|0;
  (_fwrite(152997,44,1,$16)|0);
  HEAP32[99492] = 1;
 }
 $17 = $value >>> 24;
 $conv8 = $17&255;
 HEAP8[$value$addr$i12>>0] = $conv8;
 $18 = HEAP32[99491]|0;
 $call$i13 = (_fwrite($value$addr$i12,1,1,$18)|0);
 $19 = HEAP32[99492]|0;
 $20 = $19 | $call$i13;
 $21 = ($20|0)==(0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = HEAP32[32441]|0;
 (_fwrite(152997,44,1,$22)|0);
 HEAP32[99492] = 1;
 STACKTOP = sp;return;
}
function _P_UnArchivePlayers() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and1$i = 0, $angleturn$i$i = 0, $armorpoints$i = 0, $armortype$i = 0, $arrayidx = 0, $arrayidx$1$i = 0, $arrayidx$2$i = 0, $arrayidx$3$i = 0, $arrayidx$4$i = 0;
 var $arrayidx$5$i = 0, $arrayidx$i = 0, $arrayidx$i$1$i = 0, $arrayidx$i$i = 0, $arrayidx1 = 0, $arrayidx14$1$i = 0, $arrayidx14$2$i = 0, $arrayidx14$3$i = 0, $arrayidx14$4$i = 0, $arrayidx14$5$i = 0, $arrayidx14$i = 0, $arrayidx23$1$i = 0, $arrayidx23$2$i = 0, $arrayidx23$3$i = 0, $arrayidx23$i = 0, $arrayidx33$1$i = 0, $arrayidx33$2$i = 0, $arrayidx33$3$i = 0, $arrayidx33$4$i = 0, $arrayidx33$5$i = 0;
 var $arrayidx33$6$i = 0, $arrayidx33$7$i = 0, $arrayidx33$8$i = 0, $arrayidx33$i = 0, $arrayidx41$1$i = 0, $arrayidx41$2$i = 0, $arrayidx41$3$i = 0, $arrayidx41$i = 0, $arrayidx49$1$i = 0, $arrayidx49$2$i = 0, $arrayidx49$3$i = 0, $arrayidx49$i = 0, $attackdown$i = 0, $attacker$i = 0, $backpack$i = 0, $bob$i = 0, $bonuscount$i = 0, $buttons$i$i = 0, $call$i = 0, $call$i$i = 0;
 var $call$i$i$i = 0, $call$i$i$i$i = 0, $call$i$i11$i$i = 0, $call$i$i8 = 0, $call$i21$i$i = 0, $call$i25$i$i = 0, $call$i29$i$i = 0, $call$i33$i$i = 0, $call$i53$i = 0, $call$i54$i = 0, $call$i55$1$i = 0, $call$i55$i = 0, $call$i7$i$i = 0, $call1$i = 0, $call13$1$i = 0, $call13$2$i = 0, $call13$3$i = 0, $call13$4$i = 0, $call13$5$i = 0, $call13$i = 0;
 var $call1365$i = 0, $call2$i = 0, $call22$1$i = 0, $call22$2$i = 0, $call22$3$i = 0, $call22$i = 0, $call2262$i = 0, $call28$i = 0, $call3$i = 0, $call3$i$1$i = 0, $call3$i$i = 0, $call32$1$i = 0, $call32$2$i = 0, $call32$3$i = 0, $call32$4$i = 0, $call32$5$i = 0, $call32$6$i = 0, $call32$7$i = 0, $call32$8$i = 0, $call32$i = 0;
 var $call4$i = 0, $call4$i$1$i = 0, $call4$i$i = 0, $call40$1$i = 0, $call40$2$i = 0, $call40$3$i = 0, $call40$i = 0, $call48$1$i = 0, $call48$2$i = 0, $call48$3$i = 0, $call48$i = 0, $call4857$i = 0, $call5$i = 0, $call5$i$1$i = 0, $call5$i$i = 0, $call54$i = 0, $call55$i = 0, $call56$i = 0, $call57$i = 0, $call58$i = 0;
 var $call59$i = 0, $call6$i = 0, $call61$i = 0, $call62$i = 0, $call64$i = 0, $call65$i = 0, $call66$i = 0, $call7$i = 0, $call74$i = 0, $call8$i = 0, $call9$1$i = 0, $call9$2$i = 0, $call9$3$i = 0, $call9$4$i = 0, $call9$5$i = 0, $call9$i = 0, $chatchar$i$i = 0, $cheats$i = 0, $cmp$i$1$i = 0, $cmp$i$i = 0;
 var $cmp5$i = 0, $colormap$i = 0, $consistancy$i$i = 0, $conv$i$i$i = 0, $conv2$i$i$i = 0, $conv3$i$i$i = 0, $damagecount$i = 0, $deltaviewheight$i = 0, $didsecret$i = 0, $exitcond = 0, $exitcond$i = 0, $extralight$i = 0, $fixedcolormap$i = 0, $forwardmove$i$i = 0, $health$i = 0, $i$06$i = 0, $i$09 = 0, $inc = 0, $inc$i = 0, $itemcount$i = 0;
 var $killcount$i = 0, $message$i = 0, $or$i$i$i = 0, $pendingweapon$i = 0, $playerstate$i = 0, $readyweapon$i = 0, $refire$i = 0, $result$i$i = 0, $result$i$i$i = 0, $result$i$i$i$i = 0, $result$i$i10$i$i = 0, $result$i20$i$i = 0, $result$i24$i$i = 0, $result$i28$i$i = 0, $result$i32$i$i = 0, $result$i6$i$i = 0, $secretcount$i = 0, $shl$i$i$i = 0, $sidemove$i$i = 0, $spec$select$i$1$i = 0;
 var $spec$select$i$i = 0, $sub$i = 0, $sx$i$1$i = 0, $sx$i$i = 0, $sy$i$1$i = 0, $sy$i$i = 0, $tics$i$1$i = 0, $tics$i$i = 0, $tobool = 0, $usedown$i = 0, $viewheight$i = 0, $viewz$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $result$i32$i$i = sp + 8|0;
 $result$i28$i$i = sp + 7|0;
 $result$i24$i$i = sp + 6|0;
 $result$i20$i$i = sp + 5|0;
 $result$i$i10$i$i = sp + 4|0;
 $result$i$i$i$i = sp + 3|0;
 $result$i6$i$i = sp + 2|0;
 $result$i$i$i = sp + 1|0;
 $result$i$i = sp;
 $0 = HEAP32[32441]|0;
 $i$09 = 0;
 while(1) {
  $arrayidx = (181664 + ($i$09<<2)|0);
  $1 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   $2 = HEAP32[99491]|0;
   $call$i = (_ftell($2)|0);
   $sub$i = (0 - ($call$i))|0;
   $and1$i = $sub$i & 3;
   $cmp5$i = ($and1$i|0)==(0);
   if (!($cmp5$i)) {
    $i$06$i = 0;
    while(1) {
     $3 = HEAP32[99491]|0;
     $call$i$i = (_fread($result$i$i,1,1,$3)|0);
     $4 = HEAP32[99492]|0;
     $5 = $4 | $call$i$i;
     $6 = ($5|0)==(0);
     if ($6) {
      (_fwrite(153053,60,1,$0)|0);
      HEAP32[99492] = 1;
     }
     $inc$i = (($i$06$i) + 1)|0;
     $exitcond$i = ($inc$i|0)==($and1$i|0);
     if ($exitcond$i) {
      break;
     } else {
      $i$06$i = $inc$i;
     }
    }
   }
   $arrayidx1 = (181680 + (($i$09*288)|0)|0);
   $call$i$i8 = (_saveg_read32()|0);
   $7 = $call$i$i8;
   HEAP32[$arrayidx1>>2] = $7;
   $call1$i = (_saveg_read32()|0);
   $playerstate$i = (((181680 + (($i$09*288)|0)|0)) + 4|0);
   HEAP32[$playerstate$i>>2] = $call1$i;
   $8 = HEAP32[99491]|0;
   $call$i$i$i = (_fread($result$i$i$i,1,1,$8)|0);
   $9 = HEAP32[99492]|0;
   $10 = $9 | $call$i$i$i;
   $11 = ($10|0)==(0);
   if ($11) {
    (_fwrite(153053,60,1,$0)|0);
    HEAP32[99492] = 1;
   }
   $12 = HEAP8[$result$i$i$i>>0]|0;
   $forwardmove$i$i = (((181680 + (($i$09*288)|0)|0)) + 8|0);
   HEAP8[$forwardmove$i$i>>0] = $12;
   $13 = HEAP32[99491]|0;
   $call$i7$i$i = (_fread($result$i6$i$i,1,1,$13)|0);
   $14 = HEAP32[99492]|0;
   $15 = $14 | $call$i7$i$i;
   $16 = ($15|0)==(0);
   if ($16) {
    (_fwrite(153053,60,1,$0)|0);
    HEAP32[99492] = 1;
   }
   $17 = HEAP8[$result$i6$i$i>>0]|0;
   $sidemove$i$i = (((181680 + (($i$09*288)|0)|0)) + 9|0);
   HEAP8[$sidemove$i$i>>0] = $17;
   $18 = HEAP32[99491]|0;
   $call$i$i$i$i = (_fread($result$i$i$i$i,1,1,$18)|0);
   $19 = HEAP32[99492]|0;
   $20 = $19 | $call$i$i$i$i;
   $21 = ($20|0)==(0);
   if ($21) {
    (_fwrite(153053,60,1,$0)|0);
    HEAP32[99492] = 1;
   }
   $22 = HEAP8[$result$i$i$i$i>>0]|0;
   $conv$i$i$i = $22&255;
   $23 = HEAP32[99491]|0;
   $call$i29$i$i = (_fread($result$i28$i$i,1,1,$23)|0);
   $24 = HEAP32[99492]|0;
   $25 = $24 | $call$i29$i$i;
   $26 = ($25|0)==(0);
   if ($26) {
    (_fwrite(153053,60,1,$0)|0);
    HEAP32[99492] = 1;
   }
   $27 = HEAP8[$result$i28$i$i>>0]|0;
   $conv2$i$i$i = $27&255;
   $shl$i$i$i = $conv2$i$i$i << 8;
   $or$i$i$i = $shl$i$i$i | $conv$i$i$i;
   $conv3$i$i$i = $or$i$i$i&65535;
   $angleturn$i$i = (((181680 + (($i$09*288)|0)|0)) + 10|0);
   HEAP16[$angleturn$i$i>>1] = $conv3$i$i$i;
   $28 = HEAP32[99491]|0;
   $call$i$i11$i$i = (_fread($result$i$i10$i$i,1,1,$28)|0);
   $29 = HEAP32[99492]|0;
   $30 = $29 | $call$i$i11$i$i;
   $31 = ($30|0)==(0);
   if ($31) {
    (_fwrite(153053,60,1,$0)|0);
    HEAP32[99492] = 1;
   }
   $32 = HEAP8[$result$i$i10$i$i>>0]|0;
   $33 = HEAP32[99491]|0;
   $call$i33$i$i = (_fread($result$i32$i$i,1,1,$33)|0);
   $34 = HEAP32[99492]|0;
   $35 = $34 | $call$i33$i$i;
   $36 = ($35|0)==(0);
   if ($36) {
    (_fwrite(153053,60,1,$0)|0);
    HEAP32[99492] = 1;
   }
   $consistancy$i$i = (((181680 + (($i$09*288)|0)|0)) + 14|0);
   HEAP8[$consistancy$i$i>>0] = $32;
   $37 = HEAP32[99491]|0;
   $call$i21$i$i = (_fread($result$i20$i$i,1,1,$37)|0);
   $38 = HEAP32[99492]|0;
   $39 = $38 | $call$i21$i$i;
   $40 = ($39|0)==(0);
   if ($40) {
    (_fwrite(153053,60,1,$0)|0);
    HEAP32[99492] = 1;
   }
   $41 = HEAP8[$result$i20$i$i>>0]|0;
   $chatchar$i$i = (((181680 + (($i$09*288)|0)|0)) + 12|0);
   HEAP8[$chatchar$i$i>>0] = $41;
   $42 = HEAP32[99491]|0;
   $call$i25$i$i = (_fread($result$i24$i$i,1,1,$42)|0);
   $43 = HEAP32[99492]|0;
   $44 = $43 | $call$i25$i$i;
   $45 = ($44|0)==(0);
   if ($45) {
    (_fwrite(153053,60,1,$0)|0);
    HEAP32[99492] = 1;
   }
   $46 = HEAP8[$result$i24$i$i>>0]|0;
   $buttons$i$i = (((181680 + (($i$09*288)|0)|0)) + 13|0);
   HEAP8[$buttons$i$i>>0] = $46;
   $call2$i = (_saveg_read32()|0);
   $viewz$i = (((181680 + (($i$09*288)|0)|0)) + 24|0);
   HEAP32[$viewz$i>>2] = $call2$i;
   $call3$i = (_saveg_read32()|0);
   $viewheight$i = (((181680 + (($i$09*288)|0)|0)) + 28|0);
   HEAP32[$viewheight$i>>2] = $call3$i;
   $call4$i = (_saveg_read32()|0);
   $deltaviewheight$i = (((181680 + (($i$09*288)|0)|0)) + 32|0);
   HEAP32[$deltaviewheight$i>>2] = $call4$i;
   $call5$i = (_saveg_read32()|0);
   $bob$i = (((181680 + (($i$09*288)|0)|0)) + 36|0);
   HEAP32[$bob$i>>2] = $call5$i;
   $call6$i = (_saveg_read32()|0);
   $health$i = (((181680 + (($i$09*288)|0)|0)) + 40|0);
   HEAP32[$health$i>>2] = $call6$i;
   $call7$i = (_saveg_read32()|0);
   $armorpoints$i = (((181680 + (($i$09*288)|0)|0)) + 44|0);
   HEAP32[$armorpoints$i>>2] = $call7$i;
   $call8$i = (_saveg_read32()|0);
   $armortype$i = (((181680 + (($i$09*288)|0)|0)) + 48|0);
   HEAP32[$armortype$i>>2] = $call8$i;
   $call9$i = (_saveg_read32()|0);
   $arrayidx$i = (((181680 + (($i$09*288)|0)|0)) + 52|0);
   HEAP32[$arrayidx$i>>2] = $call9$i;
   $call9$1$i = (_saveg_read32()|0);
   $arrayidx$1$i = (((181680 + (($i$09*288)|0)|0)) + 56|0);
   HEAP32[$arrayidx$1$i>>2] = $call9$1$i;
   $call9$2$i = (_saveg_read32()|0);
   $arrayidx$2$i = (((181680 + (($i$09*288)|0)|0)) + 60|0);
   HEAP32[$arrayidx$2$i>>2] = $call9$2$i;
   $call9$3$i = (_saveg_read32()|0);
   $arrayidx$3$i = (((181680 + (($i$09*288)|0)|0)) + 64|0);
   HEAP32[$arrayidx$3$i>>2] = $call9$3$i;
   $call9$4$i = (_saveg_read32()|0);
   $arrayidx$4$i = (((181680 + (($i$09*288)|0)|0)) + 68|0);
   HEAP32[$arrayidx$4$i>>2] = $call9$4$i;
   $call9$5$i = (_saveg_read32()|0);
   $arrayidx$5$i = (((181680 + (($i$09*288)|0)|0)) + 72|0);
   HEAP32[$arrayidx$5$i>>2] = $call9$5$i;
   $call1365$i = (_saveg_read32()|0);
   $arrayidx14$i = (((181680 + (($i$09*288)|0)|0)) + 76|0);
   HEAP32[$arrayidx14$i>>2] = $call1365$i;
   $call13$i = (_saveg_read32()|0);
   $arrayidx14$1$i = (((181680 + (($i$09*288)|0)|0)) + 80|0);
   HEAP32[$arrayidx14$1$i>>2] = $call13$i;
   $call13$1$i = (_saveg_read32()|0);
   $arrayidx14$2$i = (((181680 + (($i$09*288)|0)|0)) + 84|0);
   HEAP32[$arrayidx14$2$i>>2] = $call13$1$i;
   $call13$2$i = (_saveg_read32()|0);
   $arrayidx14$3$i = (((181680 + (($i$09*288)|0)|0)) + 88|0);
   HEAP32[$arrayidx14$3$i>>2] = $call13$2$i;
   $call13$3$i = (_saveg_read32()|0);
   $arrayidx14$4$i = (((181680 + (($i$09*288)|0)|0)) + 92|0);
   HEAP32[$arrayidx14$4$i>>2] = $call13$3$i;
   $call13$4$i = (_saveg_read32()|0);
   $arrayidx14$5$i = (((181680 + (($i$09*288)|0)|0)) + 96|0);
   HEAP32[$arrayidx14$5$i>>2] = $call13$4$i;
   $call13$5$i = (_saveg_read32()|0);
   $backpack$i = (((181680 + (($i$09*288)|0)|0)) + 100|0);
   HEAP32[$backpack$i>>2] = $call13$5$i;
   $call2262$i = (_saveg_read32()|0);
   $arrayidx23$i = (((181680 + (($i$09*288)|0)|0)) + 104|0);
   HEAP32[$arrayidx23$i>>2] = $call2262$i;
   $call22$i = (_saveg_read32()|0);
   $arrayidx23$1$i = (((181680 + (($i$09*288)|0)|0)) + 108|0);
   HEAP32[$arrayidx23$1$i>>2] = $call22$i;
   $call22$1$i = (_saveg_read32()|0);
   $arrayidx23$2$i = (((181680 + (($i$09*288)|0)|0)) + 112|0);
   HEAP32[$arrayidx23$2$i>>2] = $call22$1$i;
   $call22$2$i = (_saveg_read32()|0);
   $arrayidx23$3$i = (((181680 + (($i$09*288)|0)|0)) + 116|0);
   HEAP32[$arrayidx23$3$i>>2] = $call22$2$i;
   $call22$3$i = (_saveg_read32()|0);
   $readyweapon$i = (((181680 + (($i$09*288)|0)|0)) + 120|0);
   HEAP32[$readyweapon$i>>2] = $call22$3$i;
   $call28$i = (_saveg_read32()|0);
   $pendingweapon$i = (((181680 + (($i$09*288)|0)|0)) + 124|0);
   HEAP32[$pendingweapon$i>>2] = $call28$i;
   $call32$i = (_saveg_read32()|0);
   $arrayidx33$i = (((181680 + (($i$09*288)|0)|0)) + 128|0);
   HEAP32[$arrayidx33$i>>2] = $call32$i;
   $call32$1$i = (_saveg_read32()|0);
   $arrayidx33$1$i = (((181680 + (($i$09*288)|0)|0)) + 132|0);
   HEAP32[$arrayidx33$1$i>>2] = $call32$1$i;
   $call32$2$i = (_saveg_read32()|0);
   $arrayidx33$2$i = (((181680 + (($i$09*288)|0)|0)) + 136|0);
   HEAP32[$arrayidx33$2$i>>2] = $call32$2$i;
   $call32$3$i = (_saveg_read32()|0);
   $arrayidx33$3$i = (((181680 + (($i$09*288)|0)|0)) + 140|0);
   HEAP32[$arrayidx33$3$i>>2] = $call32$3$i;
   $call32$4$i = (_saveg_read32()|0);
   $arrayidx33$4$i = (((181680 + (($i$09*288)|0)|0)) + 144|0);
   HEAP32[$arrayidx33$4$i>>2] = $call32$4$i;
   $call32$5$i = (_saveg_read32()|0);
   $arrayidx33$5$i = (((181680 + (($i$09*288)|0)|0)) + 148|0);
   HEAP32[$arrayidx33$5$i>>2] = $call32$5$i;
   $call32$6$i = (_saveg_read32()|0);
   $arrayidx33$6$i = (((181680 + (($i$09*288)|0)|0)) + 152|0);
   HEAP32[$arrayidx33$6$i>>2] = $call32$6$i;
   $call32$7$i = (_saveg_read32()|0);
   $arrayidx33$7$i = (((181680 + (($i$09*288)|0)|0)) + 156|0);
   HEAP32[$arrayidx33$7$i>>2] = $call32$7$i;
   $call32$8$i = (_saveg_read32()|0);
   $arrayidx33$8$i = (((181680 + (($i$09*288)|0)|0)) + 160|0);
   HEAP32[$arrayidx33$8$i>>2] = $call32$8$i;
   $call40$i = (_saveg_read32()|0);
   $arrayidx41$i = (((181680 + (($i$09*288)|0)|0)) + 164|0);
   HEAP32[$arrayidx41$i>>2] = $call40$i;
   $call40$1$i = (_saveg_read32()|0);
   $arrayidx41$1$i = (((181680 + (($i$09*288)|0)|0)) + 168|0);
   HEAP32[$arrayidx41$1$i>>2] = $call40$1$i;
   $call40$2$i = (_saveg_read32()|0);
   $arrayidx41$2$i = (((181680 + (($i$09*288)|0)|0)) + 172|0);
   HEAP32[$arrayidx41$2$i>>2] = $call40$2$i;
   $call40$3$i = (_saveg_read32()|0);
   $arrayidx41$3$i = (((181680 + (($i$09*288)|0)|0)) + 176|0);
   HEAP32[$arrayidx41$3$i>>2] = $call40$3$i;
   $call4857$i = (_saveg_read32()|0);
   $arrayidx49$i = (((181680 + (($i$09*288)|0)|0)) + 180|0);
   HEAP32[$arrayidx49$i>>2] = $call4857$i;
   $call48$i = (_saveg_read32()|0);
   $arrayidx49$1$i = (((181680 + (($i$09*288)|0)|0)) + 184|0);
   HEAP32[$arrayidx49$1$i>>2] = $call48$i;
   $call48$1$i = (_saveg_read32()|0);
   $arrayidx49$2$i = (((181680 + (($i$09*288)|0)|0)) + 188|0);
   HEAP32[$arrayidx49$2$i>>2] = $call48$1$i;
   $call48$2$i = (_saveg_read32()|0);
   $arrayidx49$3$i = (((181680 + (($i$09*288)|0)|0)) + 192|0);
   HEAP32[$arrayidx49$3$i>>2] = $call48$2$i;
   $call48$3$i = (_saveg_read32()|0);
   $attackdown$i = (((181680 + (($i$09*288)|0)|0)) + 196|0);
   HEAP32[$attackdown$i>>2] = $call48$3$i;
   $call54$i = (_saveg_read32()|0);
   $usedown$i = (((181680 + (($i$09*288)|0)|0)) + 200|0);
   HEAP32[$usedown$i>>2] = $call54$i;
   $call55$i = (_saveg_read32()|0);
   $cheats$i = (((181680 + (($i$09*288)|0)|0)) + 204|0);
   HEAP32[$cheats$i>>2] = $call55$i;
   $call56$i = (_saveg_read32()|0);
   $refire$i = (((181680 + (($i$09*288)|0)|0)) + 208|0);
   HEAP32[$refire$i>>2] = $call56$i;
   $call57$i = (_saveg_read32()|0);
   $killcount$i = (((181680 + (($i$09*288)|0)|0)) + 212|0);
   HEAP32[$killcount$i>>2] = $call57$i;
   $call58$i = (_saveg_read32()|0);
   $itemcount$i = (((181680 + (($i$09*288)|0)|0)) + 216|0);
   HEAP32[$itemcount$i>>2] = $call58$i;
   $call59$i = (_saveg_read32()|0);
   $secretcount$i = (((181680 + (($i$09*288)|0)|0)) + 220|0);
   HEAP32[$secretcount$i>>2] = $call59$i;
   $call$i53$i = (_saveg_read32()|0);
   $47 = $call$i53$i;
   $message$i = (((181680 + (($i$09*288)|0)|0)) + 224|0);
   HEAP32[$message$i>>2] = $47;
   $call61$i = (_saveg_read32()|0);
   $damagecount$i = (((181680 + (($i$09*288)|0)|0)) + 228|0);
   HEAP32[$damagecount$i>>2] = $call61$i;
   $call62$i = (_saveg_read32()|0);
   $bonuscount$i = (((181680 + (($i$09*288)|0)|0)) + 232|0);
   HEAP32[$bonuscount$i>>2] = $call62$i;
   $call$i54$i = (_saveg_read32()|0);
   $48 = $call$i54$i;
   $attacker$i = (((181680 + (($i$09*288)|0)|0)) + 236|0);
   HEAP32[$attacker$i>>2] = $48;
   $call64$i = (_saveg_read32()|0);
   $extralight$i = (((181680 + (($i$09*288)|0)|0)) + 240|0);
   HEAP32[$extralight$i>>2] = $call64$i;
   $call65$i = (_saveg_read32()|0);
   $fixedcolormap$i = (((181680 + (($i$09*288)|0)|0)) + 244|0);
   HEAP32[$fixedcolormap$i>>2] = $call65$i;
   $call66$i = (_saveg_read32()|0);
   $colormap$i = (((181680 + (($i$09*288)|0)|0)) + 248|0);
   HEAP32[$colormap$i>>2] = $call66$i;
   $call$i55$i = (_saveg_read32()|0);
   $cmp$i$i = ($call$i55$i|0)>(0);
   $arrayidx$i$i = (3488 + (($call$i55$i*28)|0)|0);
   $spec$select$i$i = $cmp$i$i ? $arrayidx$i$i : 0;
   $49 = (((181680 + (($i$09*288)|0)|0)) + 252|0);
   HEAP32[$49>>2] = $spec$select$i$i;
   $call3$i$i = (_saveg_read32()|0);
   $tics$i$i = (((181680 + (($i$09*288)|0)|0)) + 256|0);
   HEAP32[$tics$i$i>>2] = $call3$i$i;
   $call4$i$i = (_saveg_read32()|0);
   $sx$i$i = (((181680 + (($i$09*288)|0)|0)) + 260|0);
   HEAP32[$sx$i$i>>2] = $call4$i$i;
   $call5$i$i = (_saveg_read32()|0);
   $sy$i$i = (((181680 + (($i$09*288)|0)|0)) + 264|0);
   HEAP32[$sy$i$i>>2] = $call5$i$i;
   $call$i55$1$i = (_saveg_read32()|0);
   $cmp$i$1$i = ($call$i55$1$i|0)>(0);
   $arrayidx$i$1$i = (3488 + (($call$i55$1$i*28)|0)|0);
   $spec$select$i$1$i = $cmp$i$1$i ? $arrayidx$i$1$i : 0;
   $50 = (((181680 + (($i$09*288)|0)|0)) + 268|0);
   HEAP32[$50>>2] = $spec$select$i$1$i;
   $call3$i$1$i = (_saveg_read32()|0);
   $tics$i$1$i = (((181680 + (($i$09*288)|0)|0)) + 272|0);
   HEAP32[$tics$i$1$i>>2] = $call3$i$1$i;
   $call4$i$1$i = (_saveg_read32()|0);
   $sx$i$1$i = (((181680 + (($i$09*288)|0)|0)) + 276|0);
   HEAP32[$sx$i$1$i>>2] = $call4$i$1$i;
   $call5$i$1$i = (_saveg_read32()|0);
   $sy$i$1$i = (((181680 + (($i$09*288)|0)|0)) + 280|0);
   HEAP32[$sy$i$1$i>>2] = $call5$i$1$i;
   $call74$i = (_saveg_read32()|0);
   $didsecret$i = (((181680 + (($i$09*288)|0)|0)) + 284|0);
   HEAP32[$didsecret$i>>2] = $call74$i;
   HEAP32[$arrayidx1>>2] = 0;
   HEAP32[$message$i>>2] = 0;
   HEAP32[$attacker$i>>2] = 0;
  }
  $inc = (($i$09) + 1)|0;
  $exitcond = ($inc|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $i$09 = $inc;
  }
 }
 STACKTOP = sp;return;
}
function _saveg_read32() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call$i = 0, $call$i10 = 0, $call$i14 = 0, $call$i6 = 0, $conv = 0, $conv2 = 0, $conv4 = 0, $conv8 = 0, $or = 0, $or10 = 0, $or6 = 0, $result$i = 0, $result$i13 = 0, $result$i5 = 0, $result$i9 = 0, $shl = 0;
 var $shl5 = 0, $shl9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $result$i13 = sp + 3|0;
 $result$i9 = sp + 2|0;
 $result$i5 = sp + 1|0;
 $result$i = sp;
 $0 = HEAP32[99491]|0;
 $call$i = (_fread($result$i,1,1,$0)|0);
 $1 = HEAP32[99492]|0;
 $2 = $1 | $call$i;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = HEAP32[32441]|0;
  (_fwrite(153053,60,1,$4)|0);
  HEAP32[99492] = 1;
 }
 $5 = HEAP8[$result$i>>0]|0;
 $conv = $5&255;
 $6 = HEAP32[99491]|0;
 $call$i6 = (_fread($result$i5,1,1,$6)|0);
 $7 = HEAP32[99492]|0;
 $8 = $7 | $call$i6;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = HEAP32[32441]|0;
  (_fwrite(153053,60,1,$10)|0);
  HEAP32[99492] = 1;
 }
 $11 = HEAP8[$result$i5>>0]|0;
 $conv2 = $11&255;
 $shl = $conv2 << 8;
 $or = $shl | $conv;
 $12 = HEAP32[99491]|0;
 $call$i10 = (_fread($result$i9,1,1,$12)|0);
 $13 = HEAP32[99492]|0;
 $14 = $13 | $call$i10;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = HEAP32[32441]|0;
  (_fwrite(153053,60,1,$16)|0);
  HEAP32[99492] = 1;
 }
 $17 = HEAP8[$result$i9>>0]|0;
 $conv4 = $17&255;
 $shl5 = $conv4 << 16;
 $or6 = $or | $shl5;
 $18 = HEAP32[99491]|0;
 $call$i14 = (_fread($result$i13,1,1,$18)|0);
 $19 = HEAP32[99492]|0;
 $20 = $19 | $call$i14;
 $21 = ($20|0)==(0);
 if (!($21)) {
  $23 = HEAP8[$result$i13>>0]|0;
  $conv8 = $23&255;
  $shl9 = $conv8 << 24;
  $or10 = $or6 | $shl9;
  STACKTOP = sp;return ($or10|0);
 }
 $22 = HEAP32[32441]|0;
 (_fwrite(153053,60,1,$22)|0);
 HEAP32[99492] = 1;
 $23 = HEAP8[$result$i13>>0]|0;
 $conv8 = $23&255;
 $shl9 = $conv8 << 24;
 $or10 = $or6 | $shl9;
 STACKTOP = sp;return ($or10|0);
}
function _P_ArchiveWorld() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arrayidx = 0, $bottomtexture = 0, $call$i = 0, $call$i$i = 0, $call$i$i102 = 0, $call$i$i108 = 0, $call$i$i30 = 0, $call$i$i36 = 0, $call$i$i42 = 0, $call$i$i48 = 0, $call$i$i54 = 0, $call$i$i60 = 0, $call$i$i66 = 0, $call$i$i72 = 0, $call$i$i78 = 0, $call$i$i84 = 0;
 var $call$i$i90 = 0, $call$i$i96 = 0, $call$i113 = 0, $call$i117 = 0, $call$i121 = 0, $call$i125 = 0, $call$i129 = 0, $call$i133 = 0, $call$i137 = 0, $call$i141 = 0, $call$i145 = 0, $call$i149 = 0, $call$i153 = 0, $call$i157 = 0, $call$i161 = 0, $call$i165 = 0, $ceilingheight = 0, $ceilingpic = 0, $cmp = 0, $cmp14 = 0;
 var $cmp176 = 0, $cmp4 = 0, $cmp4173 = 0, $conv1$i = 0, $conv1$i101 = 0, $conv1$i107 = 0, $conv1$i29 = 0, $conv1$i35 = 0, $conv1$i41 = 0, $conv1$i47 = 0, $conv1$i53 = 0, $conv1$i59 = 0, $conv1$i65 = 0, $conv1$i71 = 0, $conv1$i77 = 0, $conv1$i83 = 0, $conv1$i89 = 0, $conv1$i95 = 0, $conv13 = 0, $conv4$i = 0;
 var $conv4$i104 = 0, $conv4$i110 = 0, $conv4$i32 = 0, $conv4$i38 = 0, $conv4$i44 = 0, $conv4$i50 = 0, $conv4$i56 = 0, $conv4$i62 = 0, $conv4$i68 = 0, $conv4$i74 = 0, $conv4$i80 = 0, $conv4$i86 = 0, $conv4$i92 = 0, $conv4$i98 = 0, $exitcond = 0, $flags = 0, $floorpic = 0, $i$0178 = 0, $i$1175 = 0, $inc = 0;
 var $inc24 = 0, $inc27 = 0, $incdec$ptr = 0, $incdec$ptr28 = 0, $j$0172 = 0, $li$0174 = 0, $lightlevel = 0, $midtexture = 0, $rowoffset = 0, $sec$0177 = 0, $special = 0, $special7 = 0, $tag = 0, $tag8 = 0, $textureoffset = 0, $toptexture = 0, $value$addr$i = 0, $value$addr$i$i = 0, $value$addr$i$i100 = 0, $value$addr$i$i106 = 0;
 var $value$addr$i$i28 = 0, $value$addr$i$i34 = 0, $value$addr$i$i40 = 0, $value$addr$i$i46 = 0, $value$addr$i$i52 = 0, $value$addr$i$i58 = 0, $value$addr$i$i64 = 0, $value$addr$i$i70 = 0, $value$addr$i$i76 = 0, $value$addr$i$i82 = 0, $value$addr$i$i88 = 0, $value$addr$i$i94 = 0, $value$addr$i112 = 0, $value$addr$i116 = 0, $value$addr$i120 = 0, $value$addr$i124 = 0, $value$addr$i128 = 0, $value$addr$i132 = 0, $value$addr$i136 = 0, $value$addr$i140 = 0;
 var $value$addr$i144 = 0, $value$addr$i148 = 0, $value$addr$i152 = 0, $value$addr$i156 = 0, $value$addr$i160 = 0, $value$addr$i164 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $value$addr$i164 = sp + 29|0;
 $value$addr$i160 = sp + 28|0;
 $value$addr$i156 = sp + 27|0;
 $value$addr$i152 = sp + 26|0;
 $value$addr$i148 = sp + 25|0;
 $value$addr$i144 = sp + 24|0;
 $value$addr$i140 = sp + 23|0;
 $value$addr$i136 = sp + 22|0;
 $value$addr$i132 = sp + 21|0;
 $value$addr$i128 = sp + 20|0;
 $value$addr$i124 = sp + 19|0;
 $value$addr$i120 = sp + 18|0;
 $value$addr$i116 = sp + 17|0;
 $value$addr$i112 = sp + 16|0;
 $value$addr$i = sp + 15|0;
 $value$addr$i$i106 = sp + 14|0;
 $value$addr$i$i100 = sp + 13|0;
 $value$addr$i$i94 = sp + 12|0;
 $value$addr$i$i88 = sp + 11|0;
 $value$addr$i$i82 = sp + 10|0;
 $value$addr$i$i76 = sp + 9|0;
 $value$addr$i$i70 = sp + 8|0;
 $value$addr$i$i64 = sp + 7|0;
 $value$addr$i$i58 = sp + 6|0;
 $value$addr$i$i52 = sp + 5|0;
 $value$addr$i$i46 = sp + 4|0;
 $value$addr$i$i40 = sp + 3|0;
 $value$addr$i$i34 = sp + 2|0;
 $value$addr$i$i28 = sp + 1|0;
 $value$addr$i$i = sp;
 $0 = HEAP32[99505]|0;
 $cmp176 = ($0|0)>(0);
 if ($cmp176) {
  $1 = HEAP32[99506]|0;
  $2 = HEAP32[32441]|0;
  $i$0178 = 0;$sec$0177 = $1;
  while(1) {
   $3 = HEAP32[$sec$0177>>2]|0;
   $4 = $3 >>> 16;
   $conv1$i = $4&255;
   HEAP8[$value$addr$i$i>>0] = $conv1$i;
   $5 = HEAP32[99491]|0;
   $call$i$i = (_fwrite($value$addr$i$i,1,1,$5)|0);
   $6 = HEAP32[99492]|0;
   $7 = $6 | $call$i$i;
   $8 = ($7|0)==(0);
   if ($8) {
    (_fwrite(152997,44,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $9 = $3 >>> 24;
   $conv4$i = $9&255;
   HEAP8[$value$addr$i>>0] = $conv4$i;
   $10 = HEAP32[99491]|0;
   $call$i = (_fwrite($value$addr$i,1,1,$10)|0);
   $11 = HEAP32[99492]|0;
   $12 = $11 | $call$i;
   $13 = ($12|0)==(0);
   if ($13) {
    (_fwrite(152997,44,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $ceilingheight = ((($sec$0177)) + 4|0);
   $14 = HEAP32[$ceilingheight>>2]|0;
   $15 = $14 >>> 16;
   $conv1$i29 = $15&255;
   HEAP8[$value$addr$i$i28>>0] = $conv1$i29;
   $16 = HEAP32[99491]|0;
   $call$i$i30 = (_fwrite($value$addr$i$i28,1,1,$16)|0);
   $17 = HEAP32[99492]|0;
   $18 = $17 | $call$i$i30;
   $19 = ($18|0)==(0);
   if ($19) {
    (_fwrite(152997,44,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $20 = $14 >>> 24;
   $conv4$i32 = $20&255;
   HEAP8[$value$addr$i112>>0] = $conv4$i32;
   $21 = HEAP32[99491]|0;
   $call$i113 = (_fwrite($value$addr$i112,1,1,$21)|0);
   $22 = HEAP32[99492]|0;
   $23 = $22 | $call$i113;
   $24 = ($23|0)==(0);
   if ($24) {
    (_fwrite(152997,44,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $floorpic = ((($sec$0177)) + 8|0);
   $25 = HEAP16[$floorpic>>1]|0;
   $conv1$i35 = $25&255;
   HEAP8[$value$addr$i$i34>>0] = $conv1$i35;
   $26 = HEAP32[99491]|0;
   $call$i$i36 = (_fwrite($value$addr$i$i34,1,1,$26)|0);
   $27 = HEAP32[99492]|0;
   $28 = $27 | $call$i$i36;
   $29 = ($28|0)==(0);
   if ($29) {
    (_fwrite(152997,44,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $30 = ($25&65535) >>> 8;
   $conv4$i38 = $30&255;
   HEAP8[$value$addr$i116>>0] = $conv4$i38;
   $31 = HEAP32[99491]|0;
   $call$i117 = (_fwrite($value$addr$i116,1,1,$31)|0);
   $32 = HEAP32[99492]|0;
   $33 = $32 | $call$i117;
   $34 = ($33|0)==(0);
   if ($34) {
    (_fwrite(152997,44,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $ceilingpic = ((($sec$0177)) + 10|0);
   $35 = HEAP16[$ceilingpic>>1]|0;
   $conv1$i41 = $35&255;
   HEAP8[$value$addr$i$i40>>0] = $conv1$i41;
   $36 = HEAP32[99491]|0;
   $call$i$i42 = (_fwrite($value$addr$i$i40,1,1,$36)|0);
   $37 = HEAP32[99492]|0;
   $38 = $37 | $call$i$i42;
   $39 = ($38|0)==(0);
   if ($39) {
    (_fwrite(152997,44,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $40 = ($35&65535) >>> 8;
   $conv4$i44 = $40&255;
   HEAP8[$value$addr$i120>>0] = $conv4$i44;
   $41 = HEAP32[99491]|0;
   $call$i121 = (_fwrite($value$addr$i120,1,1,$41)|0);
   $42 = HEAP32[99492]|0;
   $43 = $42 | $call$i121;
   $44 = ($43|0)==(0);
   if ($44) {
    (_fwrite(152997,44,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $lightlevel = ((($sec$0177)) + 12|0);
   $45 = HEAP16[$lightlevel>>1]|0;
   $conv1$i47 = $45&255;
   HEAP8[$value$addr$i$i46>>0] = $conv1$i47;
   $46 = HEAP32[99491]|0;
   $call$i$i48 = (_fwrite($value$addr$i$i46,1,1,$46)|0);
   $47 = HEAP32[99492]|0;
   $48 = $47 | $call$i$i48;
   $49 = ($48|0)==(0);
   if ($49) {
    (_fwrite(152997,44,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $50 = ($45&65535) >>> 8;
   $conv4$i50 = $50&255;
   HEAP8[$value$addr$i124>>0] = $conv4$i50;
   $51 = HEAP32[99491]|0;
   $call$i125 = (_fwrite($value$addr$i124,1,1,$51)|0);
   $52 = HEAP32[99492]|0;
   $53 = $52 | $call$i125;
   $54 = ($53|0)==(0);
   if ($54) {
    (_fwrite(152997,44,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $special = ((($sec$0177)) + 14|0);
   $55 = HEAP16[$special>>1]|0;
   $conv1$i53 = $55&255;
   HEAP8[$value$addr$i$i52>>0] = $conv1$i53;
   $56 = HEAP32[99491]|0;
   $call$i$i54 = (_fwrite($value$addr$i$i52,1,1,$56)|0);
   $57 = HEAP32[99492]|0;
   $58 = $57 | $call$i$i54;
   $59 = ($58|0)==(0);
   if ($59) {
    (_fwrite(152997,44,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $60 = ($55&65535) >>> 8;
   $conv4$i56 = $60&255;
   HEAP8[$value$addr$i128>>0] = $conv4$i56;
   $61 = HEAP32[99491]|0;
   $call$i129 = (_fwrite($value$addr$i128,1,1,$61)|0);
   $62 = HEAP32[99492]|0;
   $63 = $62 | $call$i129;
   $64 = ($63|0)==(0);
   if ($64) {
    (_fwrite(152997,44,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $tag = ((($sec$0177)) + 16|0);
   $65 = HEAP16[$tag>>1]|0;
   $conv1$i59 = $65&255;
   HEAP8[$value$addr$i$i58>>0] = $conv1$i59;
   $66 = HEAP32[99491]|0;
   $call$i$i60 = (_fwrite($value$addr$i$i58,1,1,$66)|0);
   $67 = HEAP32[99492]|0;
   $68 = $67 | $call$i$i60;
   $69 = ($68|0)==(0);
   if ($69) {
    (_fwrite(152997,44,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $70 = ($65&65535) >>> 8;
   $conv4$i62 = $70&255;
   HEAP8[$value$addr$i132>>0] = $conv4$i62;
   $71 = HEAP32[99491]|0;
   $call$i133 = (_fwrite($value$addr$i132,1,1,$71)|0);
   $72 = HEAP32[99492]|0;
   $73 = $72 | $call$i133;
   $74 = ($73|0)==(0);
   if ($74) {
    (_fwrite(152997,44,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $inc = (($i$0178) + 1)|0;
   $incdec$ptr = ((($sec$0177)) + 88|0);
   $75 = HEAP32[99505]|0;
   $cmp = ($inc|0)<($75|0);
   if ($cmp) {
    $i$0178 = $inc;$sec$0177 = $incdec$ptr;
   } else {
    break;
   }
  }
 }
 $76 = HEAP32[99509]|0;
 $cmp4173 = ($76|0)>(0);
 if (!($cmp4173)) {
  STACKTOP = sp;return;
 }
 $77 = HEAP32[99500]|0;
 $78 = HEAP32[32441]|0;
 $i$1175 = 0;$li$0174 = $77;
 while(1) {
  $flags = ((($li$0174)) + 16|0);
  $79 = HEAP16[$flags>>1]|0;
  $conv1$i65 = $79&255;
  HEAP8[$value$addr$i$i64>>0] = $conv1$i65;
  $80 = HEAP32[99491]|0;
  $call$i$i66 = (_fwrite($value$addr$i$i64,1,1,$80)|0);
  $81 = HEAP32[99492]|0;
  $82 = $81 | $call$i$i66;
  $83 = ($82|0)==(0);
  if ($83) {
   (_fwrite(152997,44,1,$78)|0);
   HEAP32[99492] = 1;
  }
  $84 = ($79&65535) >>> 8;
  $conv4$i68 = $84&255;
  HEAP8[$value$addr$i136>>0] = $conv4$i68;
  $85 = HEAP32[99491]|0;
  $call$i137 = (_fwrite($value$addr$i136,1,1,$85)|0);
  $86 = HEAP32[99492]|0;
  $87 = $86 | $call$i137;
  $88 = ($87|0)==(0);
  if ($88) {
   (_fwrite(152997,44,1,$78)|0);
   HEAP32[99492] = 1;
  }
  $special7 = ((($li$0174)) + 18|0);
  $89 = HEAP16[$special7>>1]|0;
  $conv1$i71 = $89&255;
  HEAP8[$value$addr$i$i70>>0] = $conv1$i71;
  $90 = HEAP32[99491]|0;
  $call$i$i72 = (_fwrite($value$addr$i$i70,1,1,$90)|0);
  $91 = HEAP32[99492]|0;
  $92 = $91 | $call$i$i72;
  $93 = ($92|0)==(0);
  if ($93) {
   (_fwrite(152997,44,1,$78)|0);
   HEAP32[99492] = 1;
  }
  $94 = ($89&65535) >>> 8;
  $conv4$i74 = $94&255;
  HEAP8[$value$addr$i140>>0] = $conv4$i74;
  $95 = HEAP32[99491]|0;
  $call$i141 = (_fwrite($value$addr$i140,1,1,$95)|0);
  $96 = HEAP32[99492]|0;
  $97 = $96 | $call$i141;
  $98 = ($97|0)==(0);
  if ($98) {
   (_fwrite(152997,44,1,$78)|0);
   HEAP32[99492] = 1;
  }
  $tag8 = ((($li$0174)) + 20|0);
  $99 = HEAP16[$tag8>>1]|0;
  $conv1$i77 = $99&255;
  HEAP8[$value$addr$i$i76>>0] = $conv1$i77;
  $100 = HEAP32[99491]|0;
  $call$i$i78 = (_fwrite($value$addr$i$i76,1,1,$100)|0);
  $101 = HEAP32[99492]|0;
  $102 = $101 | $call$i$i78;
  $103 = ($102|0)==(0);
  if ($103) {
   (_fwrite(152997,44,1,$78)|0);
   HEAP32[99492] = 1;
  }
  $104 = ($99&65535) >>> 8;
  $conv4$i80 = $104&255;
  HEAP8[$value$addr$i144>>0] = $conv4$i80;
  $105 = HEAP32[99491]|0;
  $call$i145 = (_fwrite($value$addr$i144,1,1,$105)|0);
  $106 = HEAP32[99492]|0;
  $107 = $106 | $call$i145;
  $108 = ($107|0)==(0);
  if ($108) {
   (_fwrite(152997,44,1,$78)|0);
   HEAP32[99492] = 1;
  }
  $j$0172 = 0;
  while(1) {
   $arrayidx = (((($li$0174)) + 22|0) + ($j$0172<<1)|0);
   $109 = HEAP16[$arrayidx>>1]|0;
   $cmp14 = ($109<<16>>16)==(-1);
   if (!($cmp14)) {
    $conv13 = $109 << 16 >> 16;
    $110 = HEAP32[99501]|0;
    $textureoffset = (($110) + (($conv13*20)|0)|0);
    $111 = HEAP32[$textureoffset>>2]|0;
    $112 = $111 >>> 16;
    $conv1$i83 = $112&255;
    HEAP8[$value$addr$i$i82>>0] = $conv1$i83;
    $113 = HEAP32[99491]|0;
    $call$i$i84 = (_fwrite($value$addr$i$i82,1,1,$113)|0);
    $114 = HEAP32[99492]|0;
    $115 = $114 | $call$i$i84;
    $116 = ($115|0)==(0);
    if ($116) {
     (_fwrite(152997,44,1,$78)|0);
     HEAP32[99492] = 1;
    }
    $117 = $111 >>> 24;
    $conv4$i86 = $117&255;
    HEAP8[$value$addr$i148>>0] = $conv4$i86;
    $118 = HEAP32[99491]|0;
    $call$i149 = (_fwrite($value$addr$i148,1,1,$118)|0);
    $119 = HEAP32[99492]|0;
    $120 = $119 | $call$i149;
    $121 = ($120|0)==(0);
    if ($121) {
     (_fwrite(152997,44,1,$78)|0);
     HEAP32[99492] = 1;
    }
    $rowoffset = (((($110) + (($conv13*20)|0)|0)) + 4|0);
    $122 = HEAP32[$rowoffset>>2]|0;
    $123 = $122 >>> 16;
    $conv1$i89 = $123&255;
    HEAP8[$value$addr$i$i88>>0] = $conv1$i89;
    $124 = HEAP32[99491]|0;
    $call$i$i90 = (_fwrite($value$addr$i$i88,1,1,$124)|0);
    $125 = HEAP32[99492]|0;
    $126 = $125 | $call$i$i90;
    $127 = ($126|0)==(0);
    if ($127) {
     (_fwrite(152997,44,1,$78)|0);
     HEAP32[99492] = 1;
    }
    $128 = $122 >>> 24;
    $conv4$i92 = $128&255;
    HEAP8[$value$addr$i152>>0] = $conv4$i92;
    $129 = HEAP32[99491]|0;
    $call$i153 = (_fwrite($value$addr$i152,1,1,$129)|0);
    $130 = HEAP32[99492]|0;
    $131 = $130 | $call$i153;
    $132 = ($131|0)==(0);
    if ($132) {
     (_fwrite(152997,44,1,$78)|0);
     HEAP32[99492] = 1;
    }
    $toptexture = (((($110) + (($conv13*20)|0)|0)) + 8|0);
    $133 = HEAP16[$toptexture>>1]|0;
    $conv1$i95 = $133&255;
    HEAP8[$value$addr$i$i94>>0] = $conv1$i95;
    $134 = HEAP32[99491]|0;
    $call$i$i96 = (_fwrite($value$addr$i$i94,1,1,$134)|0);
    $135 = HEAP32[99492]|0;
    $136 = $135 | $call$i$i96;
    $137 = ($136|0)==(0);
    if ($137) {
     (_fwrite(152997,44,1,$78)|0);
     HEAP32[99492] = 1;
    }
    $138 = ($133&65535) >>> 8;
    $conv4$i98 = $138&255;
    HEAP8[$value$addr$i156>>0] = $conv4$i98;
    $139 = HEAP32[99491]|0;
    $call$i157 = (_fwrite($value$addr$i156,1,1,$139)|0);
    $140 = HEAP32[99492]|0;
    $141 = $140 | $call$i157;
    $142 = ($141|0)==(0);
    if ($142) {
     (_fwrite(152997,44,1,$78)|0);
     HEAP32[99492] = 1;
    }
    $bottomtexture = (((($110) + (($conv13*20)|0)|0)) + 10|0);
    $143 = HEAP16[$bottomtexture>>1]|0;
    $conv1$i101 = $143&255;
    HEAP8[$value$addr$i$i100>>0] = $conv1$i101;
    $144 = HEAP32[99491]|0;
    $call$i$i102 = (_fwrite($value$addr$i$i100,1,1,$144)|0);
    $145 = HEAP32[99492]|0;
    $146 = $145 | $call$i$i102;
    $147 = ($146|0)==(0);
    if ($147) {
     (_fwrite(152997,44,1,$78)|0);
     HEAP32[99492] = 1;
    }
    $148 = ($143&65535) >>> 8;
    $conv4$i104 = $148&255;
    HEAP8[$value$addr$i160>>0] = $conv4$i104;
    $149 = HEAP32[99491]|0;
    $call$i161 = (_fwrite($value$addr$i160,1,1,$149)|0);
    $150 = HEAP32[99492]|0;
    $151 = $150 | $call$i161;
    $152 = ($151|0)==(0);
    if ($152) {
     (_fwrite(152997,44,1,$78)|0);
     HEAP32[99492] = 1;
    }
    $midtexture = (((($110) + (($conv13*20)|0)|0)) + 12|0);
    $153 = HEAP16[$midtexture>>1]|0;
    $conv1$i107 = $153&255;
    HEAP8[$value$addr$i$i106>>0] = $conv1$i107;
    $154 = HEAP32[99491]|0;
    $call$i$i108 = (_fwrite($value$addr$i$i106,1,1,$154)|0);
    $155 = HEAP32[99492]|0;
    $156 = $155 | $call$i$i108;
    $157 = ($156|0)==(0);
    if ($157) {
     (_fwrite(152997,44,1,$78)|0);
     HEAP32[99492] = 1;
    }
    $158 = ($153&65535) >>> 8;
    $conv4$i110 = $158&255;
    HEAP8[$value$addr$i164>>0] = $conv4$i110;
    $159 = HEAP32[99491]|0;
    $call$i165 = (_fwrite($value$addr$i164,1,1,$159)|0);
    $160 = HEAP32[99492]|0;
    $161 = $160 | $call$i165;
    $162 = ($161|0)==(0);
    if ($162) {
     (_fwrite(152997,44,1,$78)|0);
     HEAP32[99492] = 1;
    }
   }
   $inc24 = (($j$0172) + 1)|0;
   $exitcond = ($inc24|0)==(2);
   if ($exitcond) {
    break;
   } else {
    $j$0172 = $inc24;
   }
  }
  $inc27 = (($i$1175) + 1)|0;
  $incdec$ptr28 = ((($li$0174)) + 64|0);
  $163 = HEAP32[99509]|0;
  $cmp4 = ($inc27|0)<($163|0);
  if ($cmp4) {
   $i$1175 = $inc27;$li$0174 = $incdec$ptr28;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _P_UnArchiveWorld() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arrayidx = 0, $bottomtexture = 0, $call$i = 0, $call$i$i = 0, $call$i$i106 = 0, $call$i$i116 = 0, $call$i$i126 = 0, $call$i$i136 = 0, $call$i$i146 = 0, $call$i$i156 = 0, $call$i$i166 = 0, $call$i$i36 = 0, $call$i$i46 = 0, $call$i$i56 = 0, $call$i$i66 = 0, $call$i$i76 = 0, $call$i$i86 = 0, $call$i$i96 = 0, $call$i176 = 0, $call$i180 = 0;
 var $call$i184 = 0, $call$i188 = 0, $call$i192 = 0, $call$i196 = 0, $call$i200 = 0, $call$i204 = 0, $call$i208 = 0, $call$i212 = 0, $call$i216 = 0, $call$i220 = 0, $call$i224 = 0, $call$i228 = 0, $ceilingheight = 0, $ceilingpic = 0, $cmp = 0, $cmp10 = 0, $cmp10232 = 0, $cmp23 = 0, $cmp235 = 0, $conv$i = 0;
 var $conv$i108 = 0, $conv$i118 = 0, $conv$i128 = 0, $conv$i138 = 0, $conv$i148 = 0, $conv$i158 = 0, $conv$i168 = 0, $conv$i38 = 0, $conv$i48 = 0, $conv$i58 = 0, $conv$i68 = 0, $conv$i78 = 0, $conv$i88 = 0, $conv$i98 = 0, $conv2$i = 0, $conv2$i100 = 0, $conv2$i110 = 0, $conv2$i120 = 0, $conv2$i130 = 0, $conv2$i140 = 0;
 var $conv2$i150 = 0, $conv2$i160 = 0, $conv2$i170 = 0, $conv2$i40 = 0, $conv2$i50 = 0, $conv2$i60 = 0, $conv2$i70 = 0, $conv2$i80 = 0, $conv2$i90 = 0, $conv22 = 0, $conv3$i103 = 0, $conv3$i113 = 0, $conv3$i123 = 0, $conv3$i153 = 0, $conv3$i163 = 0, $conv3$i173 = 0, $conv3$i53 = 0, $conv3$i63 = 0, $conv3$i73 = 0, $conv3$i83 = 0;
 var $conv3$i93 = 0, $exitcond = 0, $flags = 0, $floorpic = 0, $i$0237 = 0, $i$1234 = 0, $inc = 0, $inc38 = 0, $inc41 = 0, $incdec$ptr = 0, $incdec$ptr42 = 0, $j$0231 = 0, $li$0233 = 0, $lightlevel = 0, $midtexture = 0, $or$i = 0, $or$i102 = 0, $or$i112 = 0, $or$i122 = 0, $or$i132 = 0;
 var $or$i142 = 0, $or$i152 = 0, $or$i162 = 0, $or$i172 = 0, $or$i42 = 0, $or$i52 = 0, $or$i62 = 0, $or$i72 = 0, $or$i82 = 0, $or$i92 = 0, $result$i = 0, $result$i$i = 0, $result$i$i105 = 0, $result$i$i115 = 0, $result$i$i125 = 0, $result$i$i135 = 0, $result$i$i145 = 0, $result$i$i155 = 0, $result$i$i165 = 0, $result$i$i35 = 0;
 var $result$i$i45 = 0, $result$i$i55 = 0, $result$i$i65 = 0, $result$i$i75 = 0, $result$i$i85 = 0, $result$i$i95 = 0, $result$i175 = 0, $result$i179 = 0, $result$i183 = 0, $result$i187 = 0, $result$i191 = 0, $result$i195 = 0, $result$i199 = 0, $result$i203 = 0, $result$i207 = 0, $result$i211 = 0, $result$i215 = 0, $result$i219 = 0, $result$i223 = 0, $result$i227 = 0;
 var $rowoffset = 0, $sec$0236 = 0, $shl = 0, $shl$i = 0, $shl$i101 = 0, $shl$i111 = 0, $shl$i121 = 0, $shl$i131 = 0, $shl$i141 = 0, $shl$i151 = 0, $shl$i161 = 0, $shl$i171 = 0, $shl$i41 = 0, $shl$i51 = 0, $shl$i61 = 0, $shl$i71 = 0, $shl$i81 = 0, $shl$i91 = 0, $shl3 = 0, $shl30 = 0;
 var $shl33 = 0, $soundtarget = 0, $special = 0, $special15 = 0, $specialdata = 0, $tag = 0, $tag17 = 0, $textureoffset = 0, $toptexture = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $result$i227 = sp + 29|0;
 $result$i223 = sp + 28|0;
 $result$i219 = sp + 27|0;
 $result$i215 = sp + 26|0;
 $result$i211 = sp + 25|0;
 $result$i207 = sp + 24|0;
 $result$i203 = sp + 23|0;
 $result$i199 = sp + 22|0;
 $result$i195 = sp + 21|0;
 $result$i191 = sp + 20|0;
 $result$i187 = sp + 19|0;
 $result$i183 = sp + 18|0;
 $result$i179 = sp + 17|0;
 $result$i175 = sp + 16|0;
 $result$i = sp + 15|0;
 $result$i$i165 = sp + 14|0;
 $result$i$i155 = sp + 13|0;
 $result$i$i145 = sp + 12|0;
 $result$i$i135 = sp + 11|0;
 $result$i$i125 = sp + 10|0;
 $result$i$i115 = sp + 9|0;
 $result$i$i105 = sp + 8|0;
 $result$i$i95 = sp + 7|0;
 $result$i$i85 = sp + 6|0;
 $result$i$i75 = sp + 5|0;
 $result$i$i65 = sp + 4|0;
 $result$i$i55 = sp + 3|0;
 $result$i$i45 = sp + 2|0;
 $result$i$i35 = sp + 1|0;
 $result$i$i = sp;
 $0 = HEAP32[99505]|0;
 $cmp235 = ($0|0)>(0);
 if ($cmp235) {
  $1 = HEAP32[99506]|0;
  $2 = HEAP32[32441]|0;
  $i$0237 = 0;$sec$0236 = $1;
  while(1) {
   $3 = HEAP32[99491]|0;
   $call$i$i = (_fread($result$i$i,1,1,$3)|0);
   $4 = HEAP32[99492]|0;
   $5 = $4 | $call$i$i;
   $6 = ($5|0)==(0);
   if ($6) {
    (_fwrite(153053,60,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $7 = HEAP8[$result$i$i>>0]|0;
   $conv$i = $7&255;
   $8 = HEAP32[99491]|0;
   $call$i = (_fread($result$i,1,1,$8)|0);
   $9 = HEAP32[99492]|0;
   $10 = $9 | $call$i;
   $11 = ($10|0)==(0);
   if ($11) {
    (_fwrite(153053,60,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $12 = HEAP8[$result$i>>0]|0;
   $conv2$i = $12&255;
   $shl$i = $conv2$i << 8;
   $or$i = $shl$i | $conv$i;
   $shl = $or$i << 16;
   HEAP32[$sec$0236>>2] = $shl;
   $13 = HEAP32[99491]|0;
   $call$i$i36 = (_fread($result$i$i35,1,1,$13)|0);
   $14 = HEAP32[99492]|0;
   $15 = $14 | $call$i$i36;
   $16 = ($15|0)==(0);
   if ($16) {
    (_fwrite(153053,60,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $17 = HEAP8[$result$i$i35>>0]|0;
   $conv$i38 = $17&255;
   $18 = HEAP32[99491]|0;
   $call$i176 = (_fread($result$i175,1,1,$18)|0);
   $19 = HEAP32[99492]|0;
   $20 = $19 | $call$i176;
   $21 = ($20|0)==(0);
   if ($21) {
    (_fwrite(153053,60,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $22 = HEAP8[$result$i175>>0]|0;
   $conv2$i40 = $22&255;
   $shl$i41 = $conv2$i40 << 8;
   $or$i42 = $shl$i41 | $conv$i38;
   $shl3 = $or$i42 << 16;
   $ceilingheight = ((($sec$0236)) + 4|0);
   HEAP32[$ceilingheight>>2] = $shl3;
   $23 = HEAP32[99491]|0;
   $call$i$i46 = (_fread($result$i$i45,1,1,$23)|0);
   $24 = HEAP32[99492]|0;
   $25 = $24 | $call$i$i46;
   $26 = ($25|0)==(0);
   if ($26) {
    (_fwrite(153053,60,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $27 = HEAP8[$result$i$i45>>0]|0;
   $conv$i48 = $27&255;
   $28 = HEAP32[99491]|0;
   $call$i180 = (_fread($result$i179,1,1,$28)|0);
   $29 = HEAP32[99492]|0;
   $30 = $29 | $call$i180;
   $31 = ($30|0)==(0);
   if ($31) {
    (_fwrite(153053,60,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $32 = HEAP8[$result$i179>>0]|0;
   $conv2$i50 = $32&255;
   $shl$i51 = $conv2$i50 << 8;
   $or$i52 = $shl$i51 | $conv$i48;
   $conv3$i53 = $or$i52&65535;
   $floorpic = ((($sec$0236)) + 8|0);
   HEAP16[$floorpic>>1] = $conv3$i53;
   $33 = HEAP32[99491]|0;
   $call$i$i56 = (_fread($result$i$i55,1,1,$33)|0);
   $34 = HEAP32[99492]|0;
   $35 = $34 | $call$i$i56;
   $36 = ($35|0)==(0);
   if ($36) {
    (_fwrite(153053,60,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $37 = HEAP8[$result$i$i55>>0]|0;
   $conv$i58 = $37&255;
   $38 = HEAP32[99491]|0;
   $call$i184 = (_fread($result$i183,1,1,$38)|0);
   $39 = HEAP32[99492]|0;
   $40 = $39 | $call$i184;
   $41 = ($40|0)==(0);
   if ($41) {
    (_fwrite(153053,60,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $42 = HEAP8[$result$i183>>0]|0;
   $conv2$i60 = $42&255;
   $shl$i61 = $conv2$i60 << 8;
   $or$i62 = $shl$i61 | $conv$i58;
   $conv3$i63 = $or$i62&65535;
   $ceilingpic = ((($sec$0236)) + 10|0);
   HEAP16[$ceilingpic>>1] = $conv3$i63;
   $43 = HEAP32[99491]|0;
   $call$i$i66 = (_fread($result$i$i65,1,1,$43)|0);
   $44 = HEAP32[99492]|0;
   $45 = $44 | $call$i$i66;
   $46 = ($45|0)==(0);
   if ($46) {
    (_fwrite(153053,60,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $47 = HEAP8[$result$i$i65>>0]|0;
   $conv$i68 = $47&255;
   $48 = HEAP32[99491]|0;
   $call$i188 = (_fread($result$i187,1,1,$48)|0);
   $49 = HEAP32[99492]|0;
   $50 = $49 | $call$i188;
   $51 = ($50|0)==(0);
   if ($51) {
    (_fwrite(153053,60,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $52 = HEAP8[$result$i187>>0]|0;
   $conv2$i70 = $52&255;
   $shl$i71 = $conv2$i70 << 8;
   $or$i72 = $shl$i71 | $conv$i68;
   $conv3$i73 = $or$i72&65535;
   $lightlevel = ((($sec$0236)) + 12|0);
   HEAP16[$lightlevel>>1] = $conv3$i73;
   $53 = HEAP32[99491]|0;
   $call$i$i76 = (_fread($result$i$i75,1,1,$53)|0);
   $54 = HEAP32[99492]|0;
   $55 = $54 | $call$i$i76;
   $56 = ($55|0)==(0);
   if ($56) {
    (_fwrite(153053,60,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $57 = HEAP8[$result$i$i75>>0]|0;
   $conv$i78 = $57&255;
   $58 = HEAP32[99491]|0;
   $call$i192 = (_fread($result$i191,1,1,$58)|0);
   $59 = HEAP32[99492]|0;
   $60 = $59 | $call$i192;
   $61 = ($60|0)==(0);
   if ($61) {
    (_fwrite(153053,60,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $62 = HEAP8[$result$i191>>0]|0;
   $conv2$i80 = $62&255;
   $shl$i81 = $conv2$i80 << 8;
   $or$i82 = $shl$i81 | $conv$i78;
   $conv3$i83 = $or$i82&65535;
   $special = ((($sec$0236)) + 14|0);
   HEAP16[$special>>1] = $conv3$i83;
   $63 = HEAP32[99491]|0;
   $call$i$i86 = (_fread($result$i$i85,1,1,$63)|0);
   $64 = HEAP32[99492]|0;
   $65 = $64 | $call$i$i86;
   $66 = ($65|0)==(0);
   if ($66) {
    (_fwrite(153053,60,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $67 = HEAP8[$result$i$i85>>0]|0;
   $conv$i88 = $67&255;
   $68 = HEAP32[99491]|0;
   $call$i196 = (_fread($result$i195,1,1,$68)|0);
   $69 = HEAP32[99492]|0;
   $70 = $69 | $call$i196;
   $71 = ($70|0)==(0);
   if ($71) {
    (_fwrite(153053,60,1,$2)|0);
    HEAP32[99492] = 1;
   }
   $72 = HEAP8[$result$i195>>0]|0;
   $conv2$i90 = $72&255;
   $shl$i91 = $conv2$i90 << 8;
   $or$i92 = $shl$i91 | $conv$i88;
   $conv3$i93 = $or$i92&65535;
   $tag = ((($sec$0236)) + 16|0);
   HEAP16[$tag>>1] = $conv3$i93;
   $specialdata = ((($sec$0236)) + 76|0);
   HEAP32[$specialdata>>2] = 0;
   $soundtarget = ((($sec$0236)) + 24|0);
   HEAP32[$soundtarget>>2] = 0;
   $inc = (($i$0237) + 1)|0;
   $incdec$ptr = ((($sec$0236)) + 88|0);
   $73 = HEAP32[99505]|0;
   $cmp = ($inc|0)<($73|0);
   if ($cmp) {
    $i$0237 = $inc;$sec$0236 = $incdec$ptr;
   } else {
    break;
   }
  }
 }
 $74 = HEAP32[99509]|0;
 $cmp10232 = ($74|0)>(0);
 if (!($cmp10232)) {
  STACKTOP = sp;return;
 }
 $75 = HEAP32[99500]|0;
 $76 = HEAP32[32441]|0;
 $i$1234 = 0;$li$0233 = $75;
 while(1) {
  $77 = HEAP32[99491]|0;
  $call$i$i96 = (_fread($result$i$i95,1,1,$77)|0);
  $78 = HEAP32[99492]|0;
  $79 = $78 | $call$i$i96;
  $80 = ($79|0)==(0);
  if ($80) {
   (_fwrite(153053,60,1,$76)|0);
   HEAP32[99492] = 1;
  }
  $81 = HEAP8[$result$i$i95>>0]|0;
  $conv$i98 = $81&255;
  $82 = HEAP32[99491]|0;
  $call$i200 = (_fread($result$i199,1,1,$82)|0);
  $83 = HEAP32[99492]|0;
  $84 = $83 | $call$i200;
  $85 = ($84|0)==(0);
  if ($85) {
   (_fwrite(153053,60,1,$76)|0);
   HEAP32[99492] = 1;
  }
  $86 = HEAP8[$result$i199>>0]|0;
  $conv2$i100 = $86&255;
  $shl$i101 = $conv2$i100 << 8;
  $or$i102 = $shl$i101 | $conv$i98;
  $conv3$i103 = $or$i102&65535;
  $flags = ((($li$0233)) + 16|0);
  HEAP16[$flags>>1] = $conv3$i103;
  $87 = HEAP32[99491]|0;
  $call$i$i106 = (_fread($result$i$i105,1,1,$87)|0);
  $88 = HEAP32[99492]|0;
  $89 = $88 | $call$i$i106;
  $90 = ($89|0)==(0);
  if ($90) {
   (_fwrite(153053,60,1,$76)|0);
   HEAP32[99492] = 1;
  }
  $91 = HEAP8[$result$i$i105>>0]|0;
  $conv$i108 = $91&255;
  $92 = HEAP32[99491]|0;
  $call$i204 = (_fread($result$i203,1,1,$92)|0);
  $93 = HEAP32[99492]|0;
  $94 = $93 | $call$i204;
  $95 = ($94|0)==(0);
  if ($95) {
   (_fwrite(153053,60,1,$76)|0);
   HEAP32[99492] = 1;
  }
  $96 = HEAP8[$result$i203>>0]|0;
  $conv2$i110 = $96&255;
  $shl$i111 = $conv2$i110 << 8;
  $or$i112 = $shl$i111 | $conv$i108;
  $conv3$i113 = $or$i112&65535;
  $special15 = ((($li$0233)) + 18|0);
  HEAP16[$special15>>1] = $conv3$i113;
  $97 = HEAP32[99491]|0;
  $call$i$i116 = (_fread($result$i$i115,1,1,$97)|0);
  $98 = HEAP32[99492]|0;
  $99 = $98 | $call$i$i116;
  $100 = ($99|0)==(0);
  if ($100) {
   (_fwrite(153053,60,1,$76)|0);
   HEAP32[99492] = 1;
  }
  $101 = HEAP8[$result$i$i115>>0]|0;
  $conv$i118 = $101&255;
  $102 = HEAP32[99491]|0;
  $call$i208 = (_fread($result$i207,1,1,$102)|0);
  $103 = HEAP32[99492]|0;
  $104 = $103 | $call$i208;
  $105 = ($104|0)==(0);
  if ($105) {
   (_fwrite(153053,60,1,$76)|0);
   HEAP32[99492] = 1;
  }
  $106 = HEAP8[$result$i207>>0]|0;
  $conv2$i120 = $106&255;
  $shl$i121 = $conv2$i120 << 8;
  $or$i122 = $shl$i121 | $conv$i118;
  $conv3$i123 = $or$i122&65535;
  $tag17 = ((($li$0233)) + 20|0);
  HEAP16[$tag17>>1] = $conv3$i123;
  $j$0231 = 0;
  while(1) {
   $arrayidx = (((($li$0233)) + 22|0) + ($j$0231<<1)|0);
   $107 = HEAP16[$arrayidx>>1]|0;
   $cmp23 = ($107<<16>>16)==(-1);
   if (!($cmp23)) {
    $conv22 = $107 << 16 >> 16;
    $108 = HEAP32[99501]|0;
    $109 = HEAP32[99491]|0;
    $call$i$i126 = (_fread($result$i$i125,1,1,$109)|0);
    $110 = HEAP32[99492]|0;
    $111 = $110 | $call$i$i126;
    $112 = ($111|0)==(0);
    if ($112) {
     (_fwrite(153053,60,1,$76)|0);
     HEAP32[99492] = 1;
    }
    $113 = HEAP8[$result$i$i125>>0]|0;
    $conv$i128 = $113&255;
    $114 = HEAP32[99491]|0;
    $call$i212 = (_fread($result$i211,1,1,$114)|0);
    $115 = HEAP32[99492]|0;
    $116 = $115 | $call$i212;
    $117 = ($116|0)==(0);
    if ($117) {
     (_fwrite(153053,60,1,$76)|0);
     HEAP32[99492] = 1;
    }
    $118 = HEAP8[$result$i211>>0]|0;
    $conv2$i130 = $118&255;
    $shl$i131 = $conv2$i130 << 8;
    $or$i132 = $shl$i131 | $conv$i128;
    $shl30 = $or$i132 << 16;
    $textureoffset = (($108) + (($conv22*20)|0)|0);
    HEAP32[$textureoffset>>2] = $shl30;
    $119 = HEAP32[99491]|0;
    $call$i$i136 = (_fread($result$i$i135,1,1,$119)|0);
    $120 = HEAP32[99492]|0;
    $121 = $120 | $call$i$i136;
    $122 = ($121|0)==(0);
    if ($122) {
     (_fwrite(153053,60,1,$76)|0);
     HEAP32[99492] = 1;
    }
    $123 = HEAP8[$result$i$i135>>0]|0;
    $conv$i138 = $123&255;
    $124 = HEAP32[99491]|0;
    $call$i216 = (_fread($result$i215,1,1,$124)|0);
    $125 = HEAP32[99492]|0;
    $126 = $125 | $call$i216;
    $127 = ($126|0)==(0);
    if ($127) {
     (_fwrite(153053,60,1,$76)|0);
     HEAP32[99492] = 1;
    }
    $128 = HEAP8[$result$i215>>0]|0;
    $conv2$i140 = $128&255;
    $shl$i141 = $conv2$i140 << 8;
    $or$i142 = $shl$i141 | $conv$i138;
    $shl33 = $or$i142 << 16;
    $rowoffset = (((($108) + (($conv22*20)|0)|0)) + 4|0);
    HEAP32[$rowoffset>>2] = $shl33;
    $129 = HEAP32[99491]|0;
    $call$i$i146 = (_fread($result$i$i145,1,1,$129)|0);
    $130 = HEAP32[99492]|0;
    $131 = $130 | $call$i$i146;
    $132 = ($131|0)==(0);
    if ($132) {
     (_fwrite(153053,60,1,$76)|0);
     HEAP32[99492] = 1;
    }
    $133 = HEAP8[$result$i$i145>>0]|0;
    $conv$i148 = $133&255;
    $134 = HEAP32[99491]|0;
    $call$i220 = (_fread($result$i219,1,1,$134)|0);
    $135 = HEAP32[99492]|0;
    $136 = $135 | $call$i220;
    $137 = ($136|0)==(0);
    if ($137) {
     (_fwrite(153053,60,1,$76)|0);
     HEAP32[99492] = 1;
    }
    $138 = HEAP8[$result$i219>>0]|0;
    $conv2$i150 = $138&255;
    $shl$i151 = $conv2$i150 << 8;
    $or$i152 = $shl$i151 | $conv$i148;
    $conv3$i153 = $or$i152&65535;
    $toptexture = (((($108) + (($conv22*20)|0)|0)) + 8|0);
    HEAP16[$toptexture>>1] = $conv3$i153;
    $139 = HEAP32[99491]|0;
    $call$i$i156 = (_fread($result$i$i155,1,1,$139)|0);
    $140 = HEAP32[99492]|0;
    $141 = $140 | $call$i$i156;
    $142 = ($141|0)==(0);
    if ($142) {
     (_fwrite(153053,60,1,$76)|0);
     HEAP32[99492] = 1;
    }
    $143 = HEAP8[$result$i$i155>>0]|0;
    $conv$i158 = $143&255;
    $144 = HEAP32[99491]|0;
    $call$i224 = (_fread($result$i223,1,1,$144)|0);
    $145 = HEAP32[99492]|0;
    $146 = $145 | $call$i224;
    $147 = ($146|0)==(0);
    if ($147) {
     (_fwrite(153053,60,1,$76)|0);
     HEAP32[99492] = 1;
    }
    $148 = HEAP8[$result$i223>>0]|0;
    $conv2$i160 = $148&255;
    $shl$i161 = $conv2$i160 << 8;
    $or$i162 = $shl$i161 | $conv$i158;
    $conv3$i163 = $or$i162&65535;
    $bottomtexture = (((($108) + (($conv22*20)|0)|0)) + 10|0);
    HEAP16[$bottomtexture>>1] = $conv3$i163;
    $149 = HEAP32[99491]|0;
    $call$i$i166 = (_fread($result$i$i165,1,1,$149)|0);
    $150 = HEAP32[99492]|0;
    $151 = $150 | $call$i$i166;
    $152 = ($151|0)==(0);
    if ($152) {
     (_fwrite(153053,60,1,$76)|0);
     HEAP32[99492] = 1;
    }
    $153 = HEAP8[$result$i$i165>>0]|0;
    $conv$i168 = $153&255;
    $154 = HEAP32[99491]|0;
    $call$i228 = (_fread($result$i227,1,1,$154)|0);
    $155 = HEAP32[99492]|0;
    $156 = $155 | $call$i228;
    $157 = ($156|0)==(0);
    if ($157) {
     (_fwrite(153053,60,1,$76)|0);
     HEAP32[99492] = 1;
    }
    $158 = HEAP8[$result$i227>>0]|0;
    $conv2$i170 = $158&255;
    $shl$i171 = $conv2$i170 << 8;
    $or$i172 = $shl$i171 | $conv$i168;
    $conv3$i173 = $or$i172&65535;
    $midtexture = (((($108) + (($conv22*20)|0)|0)) + 12|0);
    HEAP16[$midtexture>>1] = $conv3$i173;
   }
   $inc38 = (($j$0231) + 1)|0;
   $exitcond = ($inc38|0)==(2);
   if ($exitcond) {
    break;
   } else {
    $j$0231 = $inc38;
   }
  }
  $inc41 = (($i$1234) + 1)|0;
  $incdec$ptr42 = ((($li$0233)) + 64|0);
  $159 = HEAP32[99509]|0;
  $cmp10 = ($inc41|0)<($159|0);
  if ($cmp10) {
   $i$1234 = $inc41;$li$0233 = $incdec$ptr42;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _P_ArchiveThinkers() {
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$i = 0, $and1$i = 0, $angle$i = 0, $angle$i$i = 0, $bnext$i = 0, $bprev$i = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i = 0, $call$i$i$i$i = 0, $call$i$i13$i$i = 0, $call$i$i19$i$i = 0, $call$i$i25$i$i = 0, $call$i$i7$i$i = 0, $call$i30$i$i = 0, $call$i34$i$i = 0;
 var $call$i38$i$i = 0, $call$i42$i$i = 0, $call$i5 = 0, $call$i7 = 0, $ceilingz$i = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp5$i = 0, $conv1$i$i$i = 0, $conv1$i12$i$i = 0, $conv1$i18$i$i = 0, $conv1$i24$i$i = 0, $conv1$i6$i$i = 0, $conv4$i$i$i = 0, $conv4$i15$i$i = 0, $conv4$i21$i$i = 0, $conv4$i27$i$i = 0, $conv4$i9$i$i = 0, $exitcond$i = 0;
 var $flags$i = 0, $floorz$i = 0, $frame$i = 0, $function = 0, $health$i = 0, $height$i = 0, $i$06$i = 0, $inc$i = 0, $info$i = 0, $lastlook$i = 0, $momx$i = 0, $momy$i = 0, $momz$i = 0, $movecount$i = 0, $movedir$i = 0, $next$pre$phiZ2D = 0, $options$i$i = 0, $player$i = 0, $radius$i = 0, $reactiontime$i = 0;
 var $snext$i = 0, $sprev$i = 0, $sprite$i = 0, $state$i = 0, $sub$i = 0, $sub$ptr$div$i = 0, $sub$ptr$div4$i = 0, $sub$ptr$lhs$cast2$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub3$i = 0, $subsector$i = 0, $target$i = 0, $th$0 = 0, $th$010 = 0, $th$012 = 0, $threshold$i = 0, $tics$i = 0, $tobool$i = 0, $tracer$i = 0, $type$i = 0;
 var $type$i$i = 0, $validcount$i = 0, $value$addr$i = 0, $value$addr$i$i = 0, $value$addr$i$i$i = 0, $value$addr$i$i$i$i = 0, $value$addr$i$i11$i$i = 0, $value$addr$i$i17$i$i = 0, $value$addr$i$i23$i$i = 0, $value$addr$i$i5$i$i = 0, $value$addr$i29$i$i = 0, $value$addr$i33$i$i = 0, $value$addr$i37$i$i = 0, $value$addr$i41$i$i = 0, $value$addr$i6 = 0, $x$i = 0, $x$i$i = 0, $y$i = 0, $y$i$i = 0, $z$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value$addr$i6 = sp + 12|0;
 $value$addr$i41$i$i = sp + 11|0;
 $value$addr$i37$i$i = sp + 10|0;
 $value$addr$i33$i$i = sp + 9|0;
 $value$addr$i29$i$i = sp + 8|0;
 $value$addr$i$i$i = sp + 7|0;
 $value$addr$i$i23$i$i = sp + 6|0;
 $value$addr$i$i17$i$i = sp + 5|0;
 $value$addr$i$i11$i$i = sp + 4|0;
 $value$addr$i$i5$i$i = sp + 3|0;
 $value$addr$i$i$i$i = sp + 2|0;
 $value$addr$i$i = sp + 1|0;
 $value$addr$i = sp;
 $th$010 = HEAP32[(398220)>>2]|0;
 $cmp11 = ($th$010|0)==(398216|0);
 if (!($cmp11)) {
  $0 = HEAP32[32441]|0;
  $th$012 = $th$010;
  while(1) {
   $function = ((($th$012)) + 8|0);
   $1 = HEAP32[$function>>2]|0;
   $cmp1 = ($1|0)==(136|0);
   if ($cmp1) {
    HEAP8[$value$addr$i>>0] = 1;
    $2 = HEAP32[99491]|0;
    $call$i = (_fwrite($value$addr$i,1,1,$2)|0);
    $3 = HEAP32[99492]|0;
    $4 = $3 | $call$i;
    $5 = ($4|0)==(0);
    if ($5) {
     (_fwrite(152997,44,1,$0)|0);
     HEAP32[99492] = 1;
    }
    $6 = HEAP32[99491]|0;
    $call$i5 = (_ftell($6)|0);
    $sub$i = (0 - ($call$i5))|0;
    $and1$i = $sub$i & 3;
    $cmp5$i = ($and1$i|0)==(0);
    if (!($cmp5$i)) {
     $i$06$i = 0;
     while(1) {
      HEAP8[$value$addr$i$i>>0] = 0;
      $7 = HEAP32[99491]|0;
      $call$i$i = (_fwrite($value$addr$i$i,1,1,$7)|0);
      $8 = HEAP32[99492]|0;
      $9 = $8 | $call$i$i;
      $10 = ($9|0)==(0);
      if ($10) {
       (_fwrite(152997,44,1,$0)|0);
       HEAP32[99492] = 1;
      }
      $inc$i = (($i$06$i) + 1)|0;
      $exitcond$i = ($inc$i|0)==($and1$i|0);
      if ($exitcond$i) {
       break;
      } else {
       $i$06$i = $inc$i;
      }
     }
    }
    $11 = HEAP32[$th$012>>2]|0;
    _saveg_write32($11);
    $12 = ((($th$012)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    _saveg_write32($13);
    $14 = HEAP32[$function>>2]|0;
    _saveg_write32($14);
    $x$i = ((($th$012)) + 12|0);
    $15 = HEAP32[$x$i>>2]|0;
    _saveg_write32($15);
    $y$i = ((($th$012)) + 16|0);
    $16 = HEAP32[$y$i>>2]|0;
    _saveg_write32($16);
    $z$i = ((($th$012)) + 20|0);
    $17 = HEAP32[$z$i>>2]|0;
    _saveg_write32($17);
    $snext$i = ((($th$012)) + 24|0);
    $18 = HEAP32[$snext$i>>2]|0;
    _saveg_write32($18);
    $sprev$i = ((($th$012)) + 28|0);
    $19 = HEAP32[$sprev$i>>2]|0;
    _saveg_write32($19);
    $angle$i = ((($th$012)) + 32|0);
    $20 = HEAP32[$angle$i>>2]|0;
    _saveg_write32($20);
    $sprite$i = ((($th$012)) + 36|0);
    $21 = HEAP32[$sprite$i>>2]|0;
    _saveg_write32($21);
    $frame$i = ((($th$012)) + 40|0);
    $22 = HEAP32[$frame$i>>2]|0;
    _saveg_write32($22);
    $bnext$i = ((($th$012)) + 44|0);
    $23 = HEAP32[$bnext$i>>2]|0;
    _saveg_write32($23);
    $bprev$i = ((($th$012)) + 48|0);
    $24 = HEAP32[$bprev$i>>2]|0;
    _saveg_write32($24);
    $subsector$i = ((($th$012)) + 52|0);
    $25 = HEAP32[$subsector$i>>2]|0;
    _saveg_write32($25);
    $floorz$i = ((($th$012)) + 56|0);
    $26 = HEAP32[$floorz$i>>2]|0;
    _saveg_write32($26);
    $ceilingz$i = ((($th$012)) + 60|0);
    $27 = HEAP32[$ceilingz$i>>2]|0;
    _saveg_write32($27);
    $radius$i = ((($th$012)) + 64|0);
    $28 = HEAP32[$radius$i>>2]|0;
    _saveg_write32($28);
    $height$i = ((($th$012)) + 68|0);
    $29 = HEAP32[$height$i>>2]|0;
    _saveg_write32($29);
    $momx$i = ((($th$012)) + 72|0);
    $30 = HEAP32[$momx$i>>2]|0;
    _saveg_write32($30);
    $momy$i = ((($th$012)) + 76|0);
    $31 = HEAP32[$momy$i>>2]|0;
    _saveg_write32($31);
    $momz$i = ((($th$012)) + 80|0);
    $32 = HEAP32[$momz$i>>2]|0;
    _saveg_write32($32);
    $validcount$i = ((($th$012)) + 84|0);
    $33 = HEAP32[$validcount$i>>2]|0;
    _saveg_write32($33);
    $type$i = ((($th$012)) + 88|0);
    $34 = HEAP32[$type$i>>2]|0;
    _saveg_write32($34);
    $info$i = ((($th$012)) + 92|0);
    $35 = HEAP32[$info$i>>2]|0;
    _saveg_write32($35);
    $tics$i = ((($th$012)) + 96|0);
    $36 = HEAP32[$tics$i>>2]|0;
    _saveg_write32($36);
    $state$i = ((($th$012)) + 100|0);
    $37 = HEAP32[$state$i>>2]|0;
    $sub$ptr$sub$i = (($37) - (3488))|0;
    $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 28)&-1;
    _saveg_write32($sub$ptr$div$i);
    $flags$i = ((($th$012)) + 104|0);
    $38 = HEAP32[$flags$i>>2]|0;
    _saveg_write32($38);
    $health$i = ((($th$012)) + 108|0);
    $39 = HEAP32[$health$i>>2]|0;
    _saveg_write32($39);
    $movedir$i = ((($th$012)) + 112|0);
    $40 = HEAP32[$movedir$i>>2]|0;
    _saveg_write32($40);
    $movecount$i = ((($th$012)) + 116|0);
    $41 = HEAP32[$movecount$i>>2]|0;
    _saveg_write32($41);
    $target$i = ((($th$012)) + 120|0);
    $42 = HEAP32[$target$i>>2]|0;
    _saveg_write32($42);
    $reactiontime$i = ((($th$012)) + 124|0);
    $43 = HEAP32[$reactiontime$i>>2]|0;
    _saveg_write32($43);
    $threshold$i = ((($th$012)) + 128|0);
    $44 = HEAP32[$threshold$i>>2]|0;
    _saveg_write32($44);
    $player$i = ((($th$012)) + 132|0);
    $45 = HEAP32[$player$i>>2]|0;
    $tobool$i = ($45|0)==(0|0);
    if ($tobool$i) {
     _saveg_write32(0);
    } else {
     $sub$ptr$lhs$cast2$i = $45;
     $sub$ptr$sub3$i = (($sub$ptr$lhs$cast2$i) - (181680))|0;
     $sub$ptr$div4$i = (($sub$ptr$sub3$i|0) / 288)&-1;
     $add$i = (($sub$ptr$div4$i) + 1)|0;
     _saveg_write32($add$i);
    }
    $lastlook$i = ((($th$012)) + 136|0);
    $46 = HEAP32[$lastlook$i>>2]|0;
    _saveg_write32($46);
    $x$i$i = ((($th$012)) + 140|0);
    $47 = HEAPU8[$x$i$i>>0]|(HEAPU8[$x$i$i+1>>0]<<8);
    $conv1$i$i$i = $47&255;
    HEAP8[$value$addr$i$i$i$i>>0] = $conv1$i$i$i;
    $48 = HEAP32[99491]|0;
    $call$i$i$i$i = (_fwrite($value$addr$i$i$i$i,1,1,$48)|0);
    $49 = HEAP32[99492]|0;
    $50 = $49 | $call$i$i$i$i;
    $51 = ($50|0)==(0);
    if ($51) {
     (_fwrite(152997,44,1,$0)|0);
     HEAP32[99492] = 1;
    }
    $52 = ($47&65535) >>> 8;
    $conv4$i$i$i = $52&255;
    HEAP8[$value$addr$i$i$i>>0] = $conv4$i$i$i;
    $53 = HEAP32[99491]|0;
    $call$i$i$i = (_fwrite($value$addr$i$i$i,1,1,$53)|0);
    $54 = HEAP32[99492]|0;
    $55 = $54 | $call$i$i$i;
    $56 = ($55|0)==(0);
    if ($56) {
     (_fwrite(152997,44,1,$0)|0);
     HEAP32[99492] = 1;
    }
    $y$i$i = ((($th$012)) + 142|0);
    $57 = HEAPU8[$y$i$i>>0]|(HEAPU8[$y$i$i+1>>0]<<8);
    $conv1$i6$i$i = $57&255;
    HEAP8[$value$addr$i$i5$i$i>>0] = $conv1$i6$i$i;
    $58 = HEAP32[99491]|0;
    $call$i$i7$i$i = (_fwrite($value$addr$i$i5$i$i,1,1,$58)|0);
    $59 = HEAP32[99492]|0;
    $60 = $59 | $call$i$i7$i$i;
    $61 = ($60|0)==(0);
    if ($61) {
     (_fwrite(152997,44,1,$0)|0);
     HEAP32[99492] = 1;
    }
    $62 = ($57&65535) >>> 8;
    $conv4$i9$i$i = $62&255;
    HEAP8[$value$addr$i29$i$i>>0] = $conv4$i9$i$i;
    $63 = HEAP32[99491]|0;
    $call$i30$i$i = (_fwrite($value$addr$i29$i$i,1,1,$63)|0);
    $64 = HEAP32[99492]|0;
    $65 = $64 | $call$i30$i$i;
    $66 = ($65|0)==(0);
    if ($66) {
     (_fwrite(152997,44,1,$0)|0);
     HEAP32[99492] = 1;
    }
    $angle$i$i = ((($th$012)) + 144|0);
    $67 = HEAPU8[$angle$i$i>>0]|(HEAPU8[$angle$i$i+1>>0]<<8);
    $conv1$i12$i$i = $67&255;
    HEAP8[$value$addr$i$i11$i$i>>0] = $conv1$i12$i$i;
    $68 = HEAP32[99491]|0;
    $call$i$i13$i$i = (_fwrite($value$addr$i$i11$i$i,1,1,$68)|0);
    $69 = HEAP32[99492]|0;
    $70 = $69 | $call$i$i13$i$i;
    $71 = ($70|0)==(0);
    if ($71) {
     (_fwrite(152997,44,1,$0)|0);
     HEAP32[99492] = 1;
    }
    $72 = ($67&65535) >>> 8;
    $conv4$i15$i$i = $72&255;
    HEAP8[$value$addr$i33$i$i>>0] = $conv4$i15$i$i;
    $73 = HEAP32[99491]|0;
    $call$i34$i$i = (_fwrite($value$addr$i33$i$i,1,1,$73)|0);
    $74 = HEAP32[99492]|0;
    $75 = $74 | $call$i34$i$i;
    $76 = ($75|0)==(0);
    if ($76) {
     (_fwrite(152997,44,1,$0)|0);
     HEAP32[99492] = 1;
    }
    $type$i$i = ((($th$012)) + 146|0);
    $77 = HEAPU8[$type$i$i>>0]|(HEAPU8[$type$i$i+1>>0]<<8);
    $conv1$i18$i$i = $77&255;
    HEAP8[$value$addr$i$i17$i$i>>0] = $conv1$i18$i$i;
    $78 = HEAP32[99491]|0;
    $call$i$i19$i$i = (_fwrite($value$addr$i$i17$i$i,1,1,$78)|0);
    $79 = HEAP32[99492]|0;
    $80 = $79 | $call$i$i19$i$i;
    $81 = ($80|0)==(0);
    if ($81) {
     (_fwrite(152997,44,1,$0)|0);
     HEAP32[99492] = 1;
    }
    $82 = ($77&65535) >>> 8;
    $conv4$i21$i$i = $82&255;
    HEAP8[$value$addr$i37$i$i>>0] = $conv4$i21$i$i;
    $83 = HEAP32[99491]|0;
    $call$i38$i$i = (_fwrite($value$addr$i37$i$i,1,1,$83)|0);
    $84 = HEAP32[99492]|0;
    $85 = $84 | $call$i38$i$i;
    $86 = ($85|0)==(0);
    if ($86) {
     (_fwrite(152997,44,1,$0)|0);
     HEAP32[99492] = 1;
    }
    $options$i$i = ((($th$012)) + 148|0);
    $87 = HEAPU8[$options$i$i>>0]|(HEAPU8[$options$i$i+1>>0]<<8);
    $conv1$i24$i$i = $87&255;
    HEAP8[$value$addr$i$i23$i$i>>0] = $conv1$i24$i$i;
    $88 = HEAP32[99491]|0;
    $call$i$i25$i$i = (_fwrite($value$addr$i$i23$i$i,1,1,$88)|0);
    $89 = HEAP32[99492]|0;
    $90 = $89 | $call$i$i25$i$i;
    $91 = ($90|0)==(0);
    if ($91) {
     (_fwrite(152997,44,1,$0)|0);
     HEAP32[99492] = 1;
    }
    $92 = ($87&65535) >>> 8;
    $conv4$i27$i$i = $92&255;
    HEAP8[$value$addr$i41$i$i>>0] = $conv4$i27$i$i;
    $93 = HEAP32[99491]|0;
    $call$i42$i$i = (_fwrite($value$addr$i41$i$i,1,1,$93)|0);
    $94 = HEAP32[99492]|0;
    $95 = $94 | $call$i42$i$i;
    $96 = ($95|0)==(0);
    if ($96) {
     (_fwrite(152997,44,1,$0)|0);
     HEAP32[99492] = 1;
    }
    $tracer$i = ((($th$012)) + 152|0);
    $97 = HEAP32[$tracer$i>>2]|0;
    _saveg_write32($97);
    $next$pre$phiZ2D = $12;
   } else {
    $$pre = ((($th$012)) + 4|0);
    $next$pre$phiZ2D = $$pre;
   }
   $th$0 = HEAP32[$next$pre$phiZ2D>>2]|0;
   $cmp = ($th$0|0)==(398216|0);
   if ($cmp) {
    break;
   } else {
    $th$012 = $th$0;
   }
  }
 }
 HEAP8[$value$addr$i6>>0] = 0;
 $98 = HEAP32[99491]|0;
 $call$i7 = (_fwrite($value$addr$i6,1,1,$98)|0);
 $99 = HEAP32[99492]|0;
 $100 = $99 | $call$i7;
 $101 = ($100|0)==(0);
 if (!($101)) {
  STACKTOP = sp;return;
 }
 $102 = HEAP32[32441]|0;
 (_fwrite(152997,44,1,$102)|0);
 HEAP32[99492] = 1;
 STACKTOP = sp;return;
}
function _P_UnArchiveThinkers() {
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $9 = 0, $and1$i = 0, $angle$i = 0, $angle$i$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx31$i = 0, $arrayidx31$sink$i = 0, $bnext$i = 0, $bprev$i = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i46$i = 0, $call$i$i16$i$i = 0, $call$i$i21 = 0, $call$i$i26$i$i = 0, $call$i$i36$i$i = 0, $call$i$i47$i = 0;
 var $call$i$i6$i$i = 0, $call$i19 = 0, $call$i20 = 0, $call$i3$i$i = 0, $call$i40$i = 0, $call$i41$i = 0, $call$i42$i = 0, $call$i43$i = 0, $call$i44$i = 0, $call$i45$i = 0, $call$i46$i$i = 0, $call$i50$i$i = 0, $call$i54$i$i = 0, $call$i58$i$i = 0, $call1$i = 0, $call11$i = 0, $call12$i = 0, $call13$i = 0, $call14$i = 0, $call15$i = 0;
 var $call16$i = 0, $call17$i = 0, $call18$i = 0, $call19$i = 0, $call2$i = 0, $call21$i = 0, $call22$i = 0, $call23$i = 0, $call24$i = 0, $call25$i = 0, $call26$i = 0, $call28$i = 0, $call29$i = 0, $call30$i = 0, $call34$i = 0, $call5$i = 0, $call6 = 0, $call6$i = 0, $call7$i = 0, $ceilingheight = 0;
 var $ceilingz$i = 0, $cmp = 0, $cmp$i = 0, $cmp2 = 0, $cmp24 = 0, $cmp5$i = 0, $conv = 0, $conv$i$i$i = 0, $conv$i18$i$i = 0, $conv$i28$i$i = 0, $conv$i38$i$i = 0, $conv$i8$i$i = 0, $conv2$i$i$i = 0, $conv2$i10$i$i = 0, $conv2$i20$i$i = 0, $conv2$i30$i$i = 0, $conv2$i40$i$i = 0, $conv3$i$i$i = 0, $conv3$i13$i$i = 0, $conv3$i23$i$i = 0;
 var $conv3$i33$i$i = 0, $conv3$i43$i$i = 0, $exitcond$i = 0, $flags$i = 0, $floorz$i = 0, $frame$i = 0, $function = 0, $function$i$i = 0, $health$i = 0, $height$i = 0, $i$06$i = 0, $inc$i = 0, $info$i = 0, $lastlook$i = 0, $momx$i = 0, $momy$i = 0, $momz$i = 0, $movecount$i = 0, $movedir$i = 0, $next$i$i = 0;
 var $next1 = 0, $options$i$i = 0, $or$i$i$i = 0, $or$i12$i$i = 0, $or$i22$i$i = 0, $or$i32$i$i = 0, $or$i42$i$i = 0, $radius$i = 0, $reactiontime$i = 0, $result$i = 0, $result$i$i = 0, $result$i$i$i = 0, $result$i$i$i$i = 0, $result$i$i15$i$i = 0, $result$i$i25$i$i = 0, $result$i$i35$i$i = 0, $result$i$i5$i$i = 0, $result$i45$i$i = 0, $result$i49$i$i = 0, $result$i53$i$i = 0;
 var $result$i57$i$i = 0, $shl$i$i$i = 0, $shl$i11$i$i = 0, $shl$i21$i$i = 0, $shl$i31$i$i = 0, $shl$i41$i$i = 0, $snext$i = 0, $sprev$i = 0, $sprite$i = 0, $state$i = 0, $sub$i = 0, $sub$i22 = 0, $subsector$i = 0, $target$i = 0, $threshold$i = 0, $tics$i = 0, $tracer$i = 0, $type$i = 0, $type$i$i = 0, $validcount$i = 0;
 var $vararg_buffer = 0, $x$i = 0, $x$i$i = 0, $y$i = 0, $y$i$i = 0, $z$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $result$i57$i$i = sp + 15|0;
 $result$i53$i$i = sp + 14|0;
 $result$i49$i$i = sp + 13|0;
 $result$i45$i$i = sp + 12|0;
 $result$i$i$i = sp + 11|0;
 $result$i$i35$i$i = sp + 10|0;
 $result$i$i25$i$i = sp + 9|0;
 $result$i$i15$i$i = sp + 8|0;
 $result$i$i5$i$i = sp + 7|0;
 $result$i$i$i$i = sp + 6|0;
 $result$i$i = sp + 5|0;
 $result$i = sp + 4|0;
 $0 = HEAP32[(398220)>>2]|0;
 $cmp24 = ($0|0)==(398216|0);
 if (!($cmp24)) {
  $$in = $0;
  while(1) {
   $next1 = ((($$in)) + 4|0);
   $1 = HEAP32[$next1>>2]|0;
   $function = ((($$in)) + 8|0);
   $2 = HEAP32[$function>>2]|0;
   $cmp2 = ($2|0)==(136|0);
   if ($cmp2) {
    _P_RemoveMobj($$in);
   } else {
    _Z_Free($$in);
   }
   $cmp = ($1|0)==(398216|0);
   if ($cmp) {
    break;
   } else {
    $$in = $1;
   }
  }
 }
 _P_InitThinkers();
 $3 = HEAP32[32441]|0;
 L10: while(1) {
  $4 = HEAP32[99491]|0;
  $call$i = (_fread($result$i,1,1,$4)|0);
  $5 = HEAP32[99492]|0;
  $6 = $5 | $call$i;
  $7 = ($6|0)==(0);
  if ($7) {
   (_fwrite(153053,60,1,$3)|0);
   HEAP32[99492] = 1;
  }
  $8 = HEAP8[$result$i>>0]|0;
  switch ($8<<24>>24) {
  case 0:  {
   label = 11;
   break L10;
   break;
  }
  case 1:  {
   break;
  }
  default: {
   label = 40;
   break L10;
  }
  }
  $9 = HEAP32[99491]|0;
  $call$i19 = (_ftell($9)|0);
  $sub$i = (0 - ($call$i19))|0;
  $and1$i = $sub$i & 3;
  $cmp5$i = ($and1$i|0)==(0);
  if (!($cmp5$i)) {
   $i$06$i = 0;
   while(1) {
    $10 = HEAP32[99491]|0;
    $call$i$i = (_fread($result$i$i,1,1,$10)|0);
    $11 = HEAP32[99492]|0;
    $12 = $11 | $call$i$i;
    $13 = ($12|0)==(0);
    if ($13) {
     (_fwrite(153053,60,1,$3)|0);
     HEAP32[99492] = 1;
    }
    $inc$i = (($i$06$i) + 1)|0;
    $exitcond$i = ($inc$i|0)==($and1$i|0);
    if ($exitcond$i) {
     break;
    } else {
     $i$06$i = $inc$i;
    }
   }
  }
  $call6 = (_Z_Malloc(156,5,0)|0);
  $call$i$i$i = (_saveg_read32()|0);
  $14 = $call$i$i$i;
  HEAP32[$call6>>2] = $14;
  $call$i3$i$i = (_saveg_read32()|0);
  $15 = $call$i3$i$i;
  $next$i$i = ((($call6)) + 4|0);
  HEAP32[$next$i$i>>2] = $15;
  $function$i$i = ((($call6)) + 8|0);
  $call$i$i$i$i = (_saveg_read32()|0);
  $16 = $call$i$i$i$i;
  HEAP32[$function$i$i>>2] = $16;
  $call$i20 = (_saveg_read32()|0);
  $x$i = ((($call6)) + 12|0);
  HEAP32[$x$i>>2] = $call$i20;
  $call1$i = (_saveg_read32()|0);
  $y$i = ((($call6)) + 16|0);
  HEAP32[$y$i>>2] = $call1$i;
  $call2$i = (_saveg_read32()|0);
  $z$i = ((($call6)) + 20|0);
  HEAP32[$z$i>>2] = $call2$i;
  $call$i$i21 = (_saveg_read32()|0);
  $17 = $call$i$i21;
  $snext$i = ((($call6)) + 24|0);
  HEAP32[$snext$i>>2] = $17;
  $call$i40$i = (_saveg_read32()|0);
  $18 = $call$i40$i;
  $sprev$i = ((($call6)) + 28|0);
  HEAP32[$sprev$i>>2] = $18;
  $call5$i = (_saveg_read32()|0);
  $angle$i = ((($call6)) + 32|0);
  HEAP32[$angle$i>>2] = $call5$i;
  $call6$i = (_saveg_read32()|0);
  $sprite$i = ((($call6)) + 36|0);
  HEAP32[$sprite$i>>2] = $call6$i;
  $call7$i = (_saveg_read32()|0);
  $frame$i = ((($call6)) + 40|0);
  HEAP32[$frame$i>>2] = $call7$i;
  $call$i41$i = (_saveg_read32()|0);
  $19 = $call$i41$i;
  $bnext$i = ((($call6)) + 44|0);
  HEAP32[$bnext$i>>2] = $19;
  $call$i42$i = (_saveg_read32()|0);
  $20 = $call$i42$i;
  $bprev$i = ((($call6)) + 48|0);
  HEAP32[$bprev$i>>2] = $20;
  $call$i43$i = (_saveg_read32()|0);
  $21 = $call$i43$i;
  $subsector$i = ((($call6)) + 52|0);
  HEAP32[$subsector$i>>2] = $21;
  $call11$i = (_saveg_read32()|0);
  $floorz$i = ((($call6)) + 56|0);
  HEAP32[$floorz$i>>2] = $call11$i;
  $call12$i = (_saveg_read32()|0);
  $ceilingz$i = ((($call6)) + 60|0);
  HEAP32[$ceilingz$i>>2] = $call12$i;
  $call13$i = (_saveg_read32()|0);
  $radius$i = ((($call6)) + 64|0);
  HEAP32[$radius$i>>2] = $call13$i;
  $call14$i = (_saveg_read32()|0);
  $height$i = ((($call6)) + 68|0);
  HEAP32[$height$i>>2] = $call14$i;
  $call15$i = (_saveg_read32()|0);
  $momx$i = ((($call6)) + 72|0);
  HEAP32[$momx$i>>2] = $call15$i;
  $call16$i = (_saveg_read32()|0);
  $momy$i = ((($call6)) + 76|0);
  HEAP32[$momy$i>>2] = $call16$i;
  $call17$i = (_saveg_read32()|0);
  $momz$i = ((($call6)) + 80|0);
  HEAP32[$momz$i>>2] = $call17$i;
  $call18$i = (_saveg_read32()|0);
  $validcount$i = ((($call6)) + 84|0);
  HEAP32[$validcount$i>>2] = $call18$i;
  $call19$i = (_saveg_read32()|0);
  $type$i = ((($call6)) + 88|0);
  HEAP32[$type$i>>2] = $call19$i;
  $call$i44$i = (_saveg_read32()|0);
  $22 = $call$i44$i;
  $info$i = ((($call6)) + 92|0);
  HEAP32[$info$i>>2] = $22;
  $call21$i = (_saveg_read32()|0);
  $tics$i = ((($call6)) + 96|0);
  HEAP32[$tics$i>>2] = $call21$i;
  $call22$i = (_saveg_read32()|0);
  $arrayidx$i = (3488 + (($call22$i*28)|0)|0);
  $state$i = ((($call6)) + 100|0);
  HEAP32[$state$i>>2] = $arrayidx$i;
  $call23$i = (_saveg_read32()|0);
  $flags$i = ((($call6)) + 104|0);
  HEAP32[$flags$i>>2] = $call23$i;
  $call24$i = (_saveg_read32()|0);
  $health$i = ((($call6)) + 108|0);
  HEAP32[$health$i>>2] = $call24$i;
  $call25$i = (_saveg_read32()|0);
  $movedir$i = ((($call6)) + 112|0);
  HEAP32[$movedir$i>>2] = $call25$i;
  $call26$i = (_saveg_read32()|0);
  $movecount$i = ((($call6)) + 116|0);
  HEAP32[$movecount$i>>2] = $call26$i;
  $call$i45$i = (_saveg_read32()|0);
  $23 = $call$i45$i;
  $target$i = ((($call6)) + 120|0);
  HEAP32[$target$i>>2] = $23;
  $call28$i = (_saveg_read32()|0);
  $reactiontime$i = ((($call6)) + 124|0);
  HEAP32[$reactiontime$i>>2] = $call28$i;
  $call29$i = (_saveg_read32()|0);
  $threshold$i = ((($call6)) + 128|0);
  HEAP32[$threshold$i>>2] = $call29$i;
  $call30$i = (_saveg_read32()|0);
  $cmp$i = ($call30$i|0)>(0);
  $sub$i22 = (($call30$i) + -1)|0;
  $arrayidx31$i = (181680 + (($sub$i22*288)|0)|0);
  if ($cmp$i) {
   HEAP32[$arrayidx31$i>>2] = $call6;
   $arrayidx31$sink$i = $arrayidx31$i;
  } else {
   $arrayidx31$sink$i = 0;
  }
  $24 = ((($call6)) + 132|0);
  HEAP32[$24>>2] = $arrayidx31$sink$i;
  $call34$i = (_saveg_read32()|0);
  $lastlook$i = ((($call6)) + 136|0);
  HEAP32[$lastlook$i>>2] = $call34$i;
  $25 = HEAP32[99491]|0;
  $call$i$i$i46$i = (_fread($result$i$i$i$i,1,1,$25)|0);
  $26 = HEAP32[99492]|0;
  $27 = $26 | $call$i$i$i46$i;
  $28 = ($27|0)==(0);
  if ($28) {
   (_fwrite(153053,60,1,$3)|0);
   HEAP32[99492] = 1;
  }
  $29 = HEAP8[$result$i$i$i$i>>0]|0;
  $conv$i$i$i = $29&255;
  $30 = HEAP32[99491]|0;
  $call$i$i47$i = (_fread($result$i$i$i,1,1,$30)|0);
  $31 = HEAP32[99492]|0;
  $32 = $31 | $call$i$i47$i;
  $33 = ($32|0)==(0);
  if ($33) {
   (_fwrite(153053,60,1,$3)|0);
   HEAP32[99492] = 1;
  }
  $34 = HEAP8[$result$i$i$i>>0]|0;
  $conv2$i$i$i = $34&255;
  $shl$i$i$i = $conv2$i$i$i << 8;
  $or$i$i$i = $shl$i$i$i | $conv$i$i$i;
  $conv3$i$i$i = $or$i$i$i&65535;
  $x$i$i = ((($call6)) + 140|0);
  HEAP8[$x$i$i>>0]=$conv3$i$i$i&255;HEAP8[$x$i$i+1>>0]=$conv3$i$i$i>>8;
  $35 = HEAP32[99491]|0;
  $call$i$i6$i$i = (_fread($result$i$i5$i$i,1,1,$35)|0);
  $36 = HEAP32[99492]|0;
  $37 = $36 | $call$i$i6$i$i;
  $38 = ($37|0)==(0);
  if ($38) {
   (_fwrite(153053,60,1,$3)|0);
   HEAP32[99492] = 1;
  }
  $39 = HEAP8[$result$i$i5$i$i>>0]|0;
  $conv$i8$i$i = $39&255;
  $40 = HEAP32[99491]|0;
  $call$i46$i$i = (_fread($result$i45$i$i,1,1,$40)|0);
  $41 = HEAP32[99492]|0;
  $42 = $41 | $call$i46$i$i;
  $43 = ($42|0)==(0);
  if ($43) {
   (_fwrite(153053,60,1,$3)|0);
   HEAP32[99492] = 1;
  }
  $44 = HEAP8[$result$i45$i$i>>0]|0;
  $conv2$i10$i$i = $44&255;
  $shl$i11$i$i = $conv2$i10$i$i << 8;
  $or$i12$i$i = $shl$i11$i$i | $conv$i8$i$i;
  $conv3$i13$i$i = $or$i12$i$i&65535;
  $y$i$i = ((($call6)) + 142|0);
  HEAP8[$y$i$i>>0]=$conv3$i13$i$i&255;HEAP8[$y$i$i+1>>0]=$conv3$i13$i$i>>8;
  $45 = HEAP32[99491]|0;
  $call$i$i16$i$i = (_fread($result$i$i15$i$i,1,1,$45)|0);
  $46 = HEAP32[99492]|0;
  $47 = $46 | $call$i$i16$i$i;
  $48 = ($47|0)==(0);
  if ($48) {
   (_fwrite(153053,60,1,$3)|0);
   HEAP32[99492] = 1;
  }
  $49 = HEAP8[$result$i$i15$i$i>>0]|0;
  $conv$i18$i$i = $49&255;
  $50 = HEAP32[99491]|0;
  $call$i50$i$i = (_fread($result$i49$i$i,1,1,$50)|0);
  $51 = HEAP32[99492]|0;
  $52 = $51 | $call$i50$i$i;
  $53 = ($52|0)==(0);
  if ($53) {
   (_fwrite(153053,60,1,$3)|0);
   HEAP32[99492] = 1;
  }
  $54 = HEAP8[$result$i49$i$i>>0]|0;
  $conv2$i20$i$i = $54&255;
  $shl$i21$i$i = $conv2$i20$i$i << 8;
  $or$i22$i$i = $shl$i21$i$i | $conv$i18$i$i;
  $conv3$i23$i$i = $or$i22$i$i&65535;
  $angle$i$i = ((($call6)) + 144|0);
  HEAP8[$angle$i$i>>0]=$conv3$i23$i$i&255;HEAP8[$angle$i$i+1>>0]=$conv3$i23$i$i>>8;
  $55 = HEAP32[99491]|0;
  $call$i$i26$i$i = (_fread($result$i$i25$i$i,1,1,$55)|0);
  $56 = HEAP32[99492]|0;
  $57 = $56 | $call$i$i26$i$i;
  $58 = ($57|0)==(0);
  if ($58) {
   (_fwrite(153053,60,1,$3)|0);
   HEAP32[99492] = 1;
  }
  $59 = HEAP8[$result$i$i25$i$i>>0]|0;
  $conv$i28$i$i = $59&255;
  $60 = HEAP32[99491]|0;
  $call$i54$i$i = (_fread($result$i53$i$i,1,1,$60)|0);
  $61 = HEAP32[99492]|0;
  $62 = $61 | $call$i54$i$i;
  $63 = ($62|0)==(0);
  if ($63) {
   (_fwrite(153053,60,1,$3)|0);
   HEAP32[99492] = 1;
  }
  $64 = HEAP8[$result$i53$i$i>>0]|0;
  $conv2$i30$i$i = $64&255;
  $shl$i31$i$i = $conv2$i30$i$i << 8;
  $or$i32$i$i = $shl$i31$i$i | $conv$i28$i$i;
  $conv3$i33$i$i = $or$i32$i$i&65535;
  $type$i$i = ((($call6)) + 146|0);
  HEAP8[$type$i$i>>0]=$conv3$i33$i$i&255;HEAP8[$type$i$i+1>>0]=$conv3$i33$i$i>>8;
  $65 = HEAP32[99491]|0;
  $call$i$i36$i$i = (_fread($result$i$i35$i$i,1,1,$65)|0);
  $66 = HEAP32[99492]|0;
  $67 = $66 | $call$i$i36$i$i;
  $68 = ($67|0)==(0);
  if ($68) {
   (_fwrite(153053,60,1,$3)|0);
   HEAP32[99492] = 1;
  }
  $69 = HEAP8[$result$i$i35$i$i>>0]|0;
  $conv$i38$i$i = $69&255;
  $70 = HEAP32[99491]|0;
  $call$i58$i$i = (_fread($result$i57$i$i,1,1,$70)|0);
  $71 = HEAP32[99492]|0;
  $72 = $71 | $call$i58$i$i;
  $73 = ($72|0)==(0);
  if ($73) {
   (_fwrite(153053,60,1,$3)|0);
   HEAP32[99492] = 1;
  }
  $74 = HEAP8[$result$i57$i$i>>0]|0;
  $conv2$i40$i$i = $74&255;
  $shl$i41$i$i = $conv2$i40$i$i << 8;
  $or$i42$i$i = $shl$i41$i$i | $conv$i38$i$i;
  $conv3$i43$i$i = $or$i42$i$i&65535;
  $options$i$i = ((($call6)) + 148|0);
  HEAP8[$options$i$i>>0]=$conv3$i43$i$i&255;HEAP8[$options$i$i+1>>0]=$conv3$i43$i$i>>8;
  (_saveg_read32()|0);
  $tracer$i = ((($call6)) + 152|0);
  HEAP32[$target$i>>2] = 0;
  HEAP32[$tracer$i>>2] = 0;
  _P_SetThingPosition($call6);
  $75 = HEAP32[$type$i>>2]|0;
  $arrayidx = (30576 + (($75*92)|0)|0);
  HEAP32[$info$i>>2] = $arrayidx;
  $76 = HEAP32[$subsector$i>>2]|0;
  $77 = HEAP32[$76>>2]|0;
  $78 = HEAP32[$77>>2]|0;
  HEAP32[$floorz$i>>2] = $78;
  $ceilingheight = ((($77)) + 4|0);
  $79 = HEAP32[$ceilingheight>>2]|0;
  HEAP32[$ceilingz$i>>2] = $79;
  HEAP32[$function$i$i>>2] = 136;
  _P_AddThinker($call6);
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 40) {
  $conv = $8&255;
  HEAP32[$vararg_buffer>>2] = $conv;
  _I_Error(153114,$vararg_buffer);
  // unreachable;
 }
}
function _P_ArchiveSpecials() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $and1$i = 0, $and1$i124 = 0, $and1$i148 = 0, $and1$i174 = 0, $and1$i32 = 0, $and1$i50 = 0, $and1$i68 = 0, $and1$i98 = 0, $brighttime$i = 0, $call$i = 0;
 var $call$i$i = 0, $call$i$i$i = 0, $call$i$i102 = 0, $call$i$i128 = 0, $call$i$i152 = 0, $call$i$i178 = 0, $call$i$i36 = 0, $call$i$i54 = 0, $call$i$i72 = 0, $call$i$i87 = 0, $call$i118 = 0, $call$i122 = 0, $call$i142 = 0, $call$i146 = 0, $call$i168 = 0, $call$i172 = 0, $call$i194 = 0, $call$i24 = 0, $call$i26 = 0, $call$i30 = 0;
 var $call$i44 = 0, $call$i48 = 0, $call$i62 = 0, $call$i66 = 0, $call$i92 = 0, $call$i96 = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp17 = 0, $cmp199 = 0, $cmp22 = 0, $cmp27 = 0, $cmp32 = 0, $cmp37 = 0, $cmp42 = 0, $cmp5 = 0, $cmp5$1 = 0, $cmp5$10 = 0, $cmp5$11 = 0;
 var $cmp5$12 = 0, $cmp5$13 = 0, $cmp5$14 = 0, $cmp5$15 = 0, $cmp5$16 = 0, $cmp5$17 = 0, $cmp5$18 = 0, $cmp5$19 = 0, $cmp5$2 = 0, $cmp5$20 = 0, $cmp5$21 = 0, $cmp5$22 = 0, $cmp5$23 = 0, $cmp5$24 = 0, $cmp5$25 = 0, $cmp5$26 = 0, $cmp5$27 = 0, $cmp5$28 = 0, $cmp5$29 = 0, $cmp5$3 = 0;
 var $cmp5$4 = 0, $cmp5$5 = 0, $cmp5$6 = 0, $cmp5$7 = 0, $cmp5$8 = 0, $cmp5$9 = 0, $cmp5$i = 0, $cmp5$i125 = 0, $cmp5$i149 = 0, $cmp5$i175 = 0, $cmp5$i33 = 0, $cmp5$i51 = 0, $cmp5$i69 = 0, $cmp5$i99 = 0, $conv1$i$i = 0, $conv4$i$i = 0, $count$i = 0, $count$i140 = 0, $count$i164 = 0, $crush$i = 0;
 var $crush$i115 = 0, $darktime$i = 0, $direction$i = 0, $direction$i192 = 0, $direction$i86 = 0, $exitcond$i = 0, $exitcond$i106 = 0, $exitcond$i132 = 0, $exitcond$i156 = 0, $exitcond$i182 = 0, $exitcond$i40 = 0, $exitcond$i58 = 0, $exitcond$i76 = 0, $floordestheight$i = 0, $function = 0, $high$i = 0, $i$06$i = 0, $i$06$i101 = 0, $i$06$i127 = 0, $i$06$i151 = 0;
 var $i$06$i177 = 0, $i$06$i35 = 0, $i$06$i53 = 0, $i$06$i71 = 0, $inc$i = 0, $inc$i105 = 0, $inc$i131 = 0, $inc$i155 = 0, $inc$i181 = 0, $inc$i39 = 0, $inc$i57 = 0, $inc$i75 = 0, $low$i = 0, $maxlight$i = 0, $maxlight$i166 = 0, $maxlight$i191 = 0, $maxtime$i = 0, $minlight$i = 0, $minlight$i165 = 0, $minlight$i190 = 0;
 var $mintime$i = 0, $newspecial$i = 0, $next = 0, $oldstatus$i = 0, $or$cond = 0, $or$cond202 = 0, $or$cond203 = 0, $or$cond204 = 0, $or$cond205 = 0, $or$cond206 = 0, $or$cond207 = 0, $or$cond208 = 0, $or$cond209 = 0, $or$cond210 = 0, $or$cond211 = 0, $or$cond212 = 0, $or$cond213 = 0, $or$cond214 = 0, $or$cond215 = 0, $or$cond216 = 0;
 var $or$cond217 = 0, $or$cond218 = 0, $or$cond219 = 0, $or$cond220 = 0, $or$cond221 = 0, $or$cond222 = 0, $or$cond223 = 0, $or$cond224 = 0, $or$cond225 = 0, $or$cond226 = 0, $or$cond227 = 0, $or$cond228 = 0, $or$cond229 = 0, $sector$i = 0, $sector$i111 = 0, $sector$i137 = 0, $sector$i161 = 0, $sector$i187 = 0, $sector$i83 = 0, $speed$i = 0;
 var $speed$i114 = 0, $speed$i89 = 0, $status$i = 0, $sub$i = 0, $sub$i123 = 0, $sub$i147 = 0, $sub$i173 = 0, $sub$i31 = 0, $sub$i49 = 0, $sub$i67 = 0, $sub$i97 = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i113 = 0, $sub$ptr$div$i139 = 0, $sub$ptr$div$i163 = 0, $sub$ptr$div$i189 = 0, $sub$ptr$div$i85 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i112 = 0, $sub$ptr$sub$i138 = 0;
 var $sub$ptr$sub$i162 = 0, $sub$ptr$sub$i188 = 0, $sub$ptr$sub$i84 = 0, $tag$i = 0, $texture$i = 0, $th$0 = 0, $th$0198 = 0, $th$0200 = 0, $topcountdown$i = 0, $topheight$i = 0, $topwait$i = 0, $type$i = 0, $type$i116 = 0, $type$i82 = 0, $value$addr$i = 0, $value$addr$i$i = 0, $value$addr$i$i$i = 0, $value$addr$i$i121 = 0, $value$addr$i$i145 = 0, $value$addr$i$i171 = 0;
 var $value$addr$i$i29 = 0, $value$addr$i$i47 = 0, $value$addr$i$i65 = 0, $value$addr$i$i79 = 0, $value$addr$i$i95 = 0, $value$addr$i117 = 0, $value$addr$i141 = 0, $value$addr$i167 = 0, $value$addr$i193 = 0, $value$addr$i25 = 0, $value$addr$i43 = 0, $value$addr$i61 = 0, $value$addr$i91 = 0, $wait$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $value$addr$i193 = sp + 18|0;
 $value$addr$i$i171 = sp + 17|0;
 $value$addr$i167 = sp + 16|0;
 $value$addr$i$i145 = sp + 15|0;
 $value$addr$i141 = sp + 14|0;
 $value$addr$i$i121 = sp + 13|0;
 $value$addr$i117 = sp + 12|0;
 $value$addr$i$i95 = sp + 11|0;
 $value$addr$i91 = sp + 10|0;
 $value$addr$i$i79 = sp + 9|0;
 $value$addr$i$i$i = sp + 8|0;
 $value$addr$i$i65 = sp + 7|0;
 $value$addr$i61 = sp + 6|0;
 $value$addr$i$i47 = sp + 5|0;
 $value$addr$i43 = sp + 4|0;
 $value$addr$i$i29 = sp + 3|0;
 $value$addr$i25 = sp + 2|0;
 $value$addr$i$i = sp + 1|0;
 $value$addr$i = sp;
 $th$0198 = HEAP32[(398220)>>2]|0;
 $cmp199 = ($th$0198|0)==(398216|0);
 if (!($cmp199)) {
  $0 = HEAP32[32441]|0;
  $th$0200 = $th$0198;
  while(1) {
   $function = ((($th$0200)) + 8|0);
   $1 = HEAP32[$function>>2]|0;
   $cmp1 = ($1|0)==(0|0);
   do {
    if ($cmp1) {
     $2 = HEAP32[46504]|0;
     $cmp5 = ($2|0)==($th$0200|0);
     $3 = HEAP32[(186020)>>2]|0;
     $cmp5$1 = ($3|0)==($th$0200|0);
     $or$cond = $cmp5 | $cmp5$1;
     $4 = HEAP32[(186024)>>2]|0;
     $cmp5$2 = ($4|0)==($th$0200|0);
     $or$cond202 = $or$cond | $cmp5$2;
     $5 = HEAP32[(186028)>>2]|0;
     $cmp5$3 = ($5|0)==($th$0200|0);
     $or$cond203 = $or$cond202 | $cmp5$3;
     $6 = HEAP32[(186032)>>2]|0;
     $cmp5$4 = ($6|0)==($th$0200|0);
     $or$cond204 = $or$cond203 | $cmp5$4;
     $7 = HEAP32[(186036)>>2]|0;
     $cmp5$5 = ($7|0)==($th$0200|0);
     $or$cond205 = $or$cond204 | $cmp5$5;
     $8 = HEAP32[(186040)>>2]|0;
     $cmp5$6 = ($8|0)==($th$0200|0);
     $or$cond206 = $or$cond205 | $cmp5$6;
     $9 = HEAP32[(186044)>>2]|0;
     $cmp5$7 = ($9|0)==($th$0200|0);
     $or$cond207 = $or$cond206 | $cmp5$7;
     $10 = HEAP32[(186048)>>2]|0;
     $cmp5$8 = ($10|0)==($th$0200|0);
     $or$cond208 = $or$cond207 | $cmp5$8;
     $11 = HEAP32[(186052)>>2]|0;
     $cmp5$9 = ($11|0)==($th$0200|0);
     $or$cond209 = $or$cond208 | $cmp5$9;
     $12 = HEAP32[(186056)>>2]|0;
     $cmp5$10 = ($12|0)==($th$0200|0);
     $or$cond210 = $or$cond209 | $cmp5$10;
     $13 = HEAP32[(186060)>>2]|0;
     $cmp5$11 = ($13|0)==($th$0200|0);
     $or$cond211 = $or$cond210 | $cmp5$11;
     $14 = HEAP32[(186064)>>2]|0;
     $cmp5$12 = ($14|0)==($th$0200|0);
     $or$cond212 = $or$cond211 | $cmp5$12;
     $15 = HEAP32[(186068)>>2]|0;
     $cmp5$13 = ($15|0)==($th$0200|0);
     $or$cond213 = $or$cond212 | $cmp5$13;
     $16 = HEAP32[(186072)>>2]|0;
     $cmp5$14 = ($16|0)==($th$0200|0);
     $or$cond214 = $or$cond213 | $cmp5$14;
     $17 = HEAP32[(186076)>>2]|0;
     $cmp5$15 = ($17|0)==($th$0200|0);
     $or$cond215 = $or$cond214 | $cmp5$15;
     $18 = HEAP32[(186080)>>2]|0;
     $cmp5$16 = ($18|0)==($th$0200|0);
     $or$cond216 = $or$cond215 | $cmp5$16;
     $19 = HEAP32[(186084)>>2]|0;
     $cmp5$17 = ($19|0)==($th$0200|0);
     $or$cond217 = $or$cond216 | $cmp5$17;
     $20 = HEAP32[(186088)>>2]|0;
     $cmp5$18 = ($20|0)==($th$0200|0);
     $or$cond218 = $or$cond217 | $cmp5$18;
     $21 = HEAP32[(186092)>>2]|0;
     $cmp5$19 = ($21|0)==($th$0200|0);
     $or$cond219 = $or$cond218 | $cmp5$19;
     $22 = HEAP32[(186096)>>2]|0;
     $cmp5$20 = ($22|0)==($th$0200|0);
     $or$cond220 = $or$cond219 | $cmp5$20;
     $23 = HEAP32[(186100)>>2]|0;
     $cmp5$21 = ($23|0)==($th$0200|0);
     $or$cond221 = $or$cond220 | $cmp5$21;
     $24 = HEAP32[(186104)>>2]|0;
     $cmp5$22 = ($24|0)==($th$0200|0);
     $or$cond222 = $or$cond221 | $cmp5$22;
     $25 = HEAP32[(186108)>>2]|0;
     $cmp5$23 = ($25|0)==($th$0200|0);
     $or$cond223 = $or$cond222 | $cmp5$23;
     $26 = HEAP32[(186112)>>2]|0;
     $cmp5$24 = ($26|0)==($th$0200|0);
     $or$cond224 = $or$cond223 | $cmp5$24;
     $27 = HEAP32[(186116)>>2]|0;
     $cmp5$25 = ($27|0)==($th$0200|0);
     $or$cond225 = $or$cond224 | $cmp5$25;
     $28 = HEAP32[(186120)>>2]|0;
     $cmp5$26 = ($28|0)==($th$0200|0);
     $or$cond226 = $or$cond225 | $cmp5$26;
     $29 = HEAP32[(186124)>>2]|0;
     $cmp5$27 = ($29|0)==($th$0200|0);
     $or$cond227 = $or$cond226 | $cmp5$27;
     $30 = HEAP32[(186128)>>2]|0;
     $cmp5$28 = ($30|0)==($th$0200|0);
     $or$cond228 = $or$cond227 | $cmp5$28;
     $31 = HEAP32[(186132)>>2]|0;
     $cmp5$29 = ($31|0)==($th$0200|0);
     $or$cond229 = $or$cond228 | $cmp5$29;
     if ($or$cond229) {
      HEAP8[$value$addr$i>>0] = 0;
      $32 = HEAP32[99491]|0;
      $call$i = (_fwrite($value$addr$i,1,1,$32)|0);
      $33 = HEAP32[99492]|0;
      $34 = $33 | $call$i;
      $35 = ($34|0)==(0);
      if ($35) {
       (_fwrite(152997,44,1,$0)|0);
       HEAP32[99492] = 1;
      }
      $36 = HEAP32[99491]|0;
      $call$i24 = (_ftell($36)|0);
      $sub$i = (0 - ($call$i24))|0;
      $and1$i = $sub$i & 3;
      $cmp5$i = ($and1$i|0)==(0);
      if (!($cmp5$i)) {
       $i$06$i = 0;
       while(1) {
        HEAP8[$value$addr$i$i>>0] = 0;
        $37 = HEAP32[99491]|0;
        $call$i$i = (_fwrite($value$addr$i$i,1,1,$37)|0);
        $38 = HEAP32[99492]|0;
        $39 = $38 | $call$i$i;
        $40 = ($39|0)==(0);
        if ($40) {
         (_fwrite(152997,44,1,$0)|0);
         HEAP32[99492] = 1;
        }
        $inc$i = (($i$06$i) + 1)|0;
        $exitcond$i = ($inc$i|0)==($and1$i|0);
        if ($exitcond$i) {
         break;
        } else {
         $i$06$i = $inc$i;
        }
       }
      }
      _saveg_write_ceiling_t($th$0200);
     }
    } else {
     $cmp12 = ($1|0)==(133|0);
     if ($cmp12) {
      HEAP8[$value$addr$i25>>0] = 0;
      $41 = HEAP32[99491]|0;
      $call$i26 = (_fwrite($value$addr$i25,1,1,$41)|0);
      $42 = HEAP32[99492]|0;
      $43 = $42 | $call$i26;
      $44 = ($43|0)==(0);
      if ($44) {
       (_fwrite(152997,44,1,$0)|0);
       HEAP32[99492] = 1;
      }
      $45 = HEAP32[99491]|0;
      $call$i30 = (_ftell($45)|0);
      $sub$i31 = (0 - ($call$i30))|0;
      $and1$i32 = $sub$i31 & 3;
      $cmp5$i33 = ($and1$i32|0)==(0);
      if (!($cmp5$i33)) {
       $i$06$i35 = 0;
       while(1) {
        HEAP8[$value$addr$i$i29>>0] = 0;
        $46 = HEAP32[99491]|0;
        $call$i$i36 = (_fwrite($value$addr$i$i29,1,1,$46)|0);
        $47 = HEAP32[99492]|0;
        $48 = $47 | $call$i$i36;
        $49 = ($48|0)==(0);
        if ($49) {
         (_fwrite(152997,44,1,$0)|0);
         HEAP32[99492] = 1;
        }
        $inc$i39 = (($i$06$i35) + 1)|0;
        $exitcond$i40 = ($inc$i39|0)==($and1$i32|0);
        if ($exitcond$i40) {
         break;
        } else {
         $i$06$i35 = $inc$i39;
        }
       }
      }
      _saveg_write_ceiling_t($th$0200);
      break;
     }
     $cmp17 = ($1|0)==(134|0);
     if ($cmp17) {
      HEAP8[$value$addr$i43>>0] = 1;
      $50 = HEAP32[99491]|0;
      $call$i44 = (_fwrite($value$addr$i43,1,1,$50)|0);
      $51 = HEAP32[99492]|0;
      $52 = $51 | $call$i44;
      $53 = ($52|0)==(0);
      if ($53) {
       (_fwrite(152997,44,1,$0)|0);
       HEAP32[99492] = 1;
      }
      $54 = HEAP32[99491]|0;
      $call$i48 = (_ftell($54)|0);
      $sub$i49 = (0 - ($call$i48))|0;
      $and1$i50 = $sub$i49 & 3;
      $cmp5$i51 = ($and1$i50|0)==(0);
      if (!($cmp5$i51)) {
       $i$06$i53 = 0;
       while(1) {
        HEAP8[$value$addr$i$i47>>0] = 0;
        $55 = HEAP32[99491]|0;
        $call$i$i54 = (_fwrite($value$addr$i$i47,1,1,$55)|0);
        $56 = HEAP32[99492]|0;
        $57 = $56 | $call$i$i54;
        $58 = ($57|0)==(0);
        if ($58) {
         (_fwrite(152997,44,1,$0)|0);
         HEAP32[99492] = 1;
        }
        $inc$i57 = (($i$06$i53) + 1)|0;
        $exitcond$i58 = ($inc$i57|0)==($and1$i50|0);
        if ($exitcond$i58) {
         break;
        } else {
         $i$06$i53 = $inc$i57;
        }
       }
      }
      $59 = HEAP32[$th$0200>>2]|0;
      _saveg_write32($59);
      $60 = ((($th$0200)) + 4|0);
      $61 = HEAP32[$60>>2]|0;
      _saveg_write32($61);
      $62 = HEAP32[$function>>2]|0;
      _saveg_write32($62);
      $type$i = ((($th$0200)) + 12|0);
      $63 = HEAP32[$type$i>>2]|0;
      _saveg_write32($63);
      $sector$i = ((($th$0200)) + 16|0);
      $64 = HEAP32[$sector$i>>2]|0;
      $65 = HEAP32[99506]|0;
      $sub$ptr$sub$i = (($64) - ($65))|0;
      $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 88)&-1;
      _saveg_write32($sub$ptr$div$i);
      $topheight$i = ((($th$0200)) + 20|0);
      $66 = HEAP32[$topheight$i>>2]|0;
      _saveg_write32($66);
      $speed$i = ((($th$0200)) + 24|0);
      $67 = HEAP32[$speed$i>>2]|0;
      _saveg_write32($67);
      $direction$i = ((($th$0200)) + 28|0);
      $68 = HEAP32[$direction$i>>2]|0;
      _saveg_write32($68);
      $topwait$i = ((($th$0200)) + 32|0);
      $69 = HEAP32[$topwait$i>>2]|0;
      _saveg_write32($69);
      $topcountdown$i = ((($th$0200)) + 36|0);
      $70 = HEAP32[$topcountdown$i>>2]|0;
      _saveg_write32($70);
      break;
     }
     $cmp22 = ($1|0)==(138|0);
     if ($cmp22) {
      HEAP8[$value$addr$i61>>0] = 2;
      $71 = HEAP32[99491]|0;
      $call$i62 = (_fwrite($value$addr$i61,1,1,$71)|0);
      $72 = HEAP32[99492]|0;
      $73 = $72 | $call$i62;
      $74 = ($73|0)==(0);
      if ($74) {
       (_fwrite(152997,44,1,$0)|0);
       HEAP32[99492] = 1;
      }
      $75 = HEAP32[99491]|0;
      $call$i66 = (_ftell($75)|0);
      $sub$i67 = (0 - ($call$i66))|0;
      $and1$i68 = $sub$i67 & 3;
      $cmp5$i69 = ($and1$i68|0)==(0);
      if (!($cmp5$i69)) {
       $i$06$i71 = 0;
       while(1) {
        HEAP8[$value$addr$i$i65>>0] = 0;
        $76 = HEAP32[99491]|0;
        $call$i$i72 = (_fwrite($value$addr$i$i65,1,1,$76)|0);
        $77 = HEAP32[99492]|0;
        $78 = $77 | $call$i$i72;
        $79 = ($78|0)==(0);
        if ($79) {
         (_fwrite(152997,44,1,$0)|0);
         HEAP32[99492] = 1;
        }
        $inc$i75 = (($i$06$i71) + 1)|0;
        $exitcond$i76 = ($inc$i75|0)==($and1$i68|0);
        if ($exitcond$i76) {
         break;
        } else {
         $i$06$i71 = $inc$i75;
        }
       }
      }
      $80 = HEAP32[$th$0200>>2]|0;
      _saveg_write32($80);
      $81 = ((($th$0200)) + 4|0);
      $82 = HEAP32[$81>>2]|0;
      _saveg_write32($82);
      $83 = HEAP32[$function>>2]|0;
      _saveg_write32($83);
      $type$i82 = ((($th$0200)) + 12|0);
      $84 = HEAP32[$type$i82>>2]|0;
      _saveg_write32($84);
      $crush$i = ((($th$0200)) + 16|0);
      $85 = HEAP32[$crush$i>>2]|0;
      _saveg_write32($85);
      $sector$i83 = ((($th$0200)) + 20|0);
      $86 = HEAP32[$sector$i83>>2]|0;
      $87 = HEAP32[99506]|0;
      $sub$ptr$sub$i84 = (($86) - ($87))|0;
      $sub$ptr$div$i85 = (($sub$ptr$sub$i84|0) / 88)&-1;
      _saveg_write32($sub$ptr$div$i85);
      $direction$i86 = ((($th$0200)) + 24|0);
      $88 = HEAP32[$direction$i86>>2]|0;
      _saveg_write32($88);
      $newspecial$i = ((($th$0200)) + 28|0);
      $89 = HEAP32[$newspecial$i>>2]|0;
      _saveg_write32($89);
      $texture$i = ((($th$0200)) + 32|0);
      $90 = HEAP16[$texture$i>>1]|0;
      $conv1$i$i = $90&255;
      HEAP8[$value$addr$i$i$i>>0] = $conv1$i$i;
      $91 = HEAP32[99491]|0;
      $call$i$i$i = (_fwrite($value$addr$i$i$i,1,1,$91)|0);
      $92 = HEAP32[99492]|0;
      $93 = $92 | $call$i$i$i;
      $94 = ($93|0)==(0);
      if ($94) {
       (_fwrite(152997,44,1,$0)|0);
       HEAP32[99492] = 1;
      }
      $95 = ($90&65535) >>> 8;
      $conv4$i$i = $95&255;
      HEAP8[$value$addr$i$i79>>0] = $conv4$i$i;
      $96 = HEAP32[99491]|0;
      $call$i$i87 = (_fwrite($value$addr$i$i79,1,1,$96)|0);
      $97 = HEAP32[99492]|0;
      $98 = $97 | $call$i$i87;
      $99 = ($98|0)==(0);
      if ($99) {
       (_fwrite(152997,44,1,$0)|0);
       HEAP32[99492] = 1;
      }
      $floordestheight$i = ((($th$0200)) + 36|0);
      $100 = HEAP32[$floordestheight$i>>2]|0;
      _saveg_write32($100);
      $speed$i89 = ((($th$0200)) + 40|0);
      $101 = HEAP32[$speed$i89>>2]|0;
      _saveg_write32($101);
      break;
     }
     $cmp27 = ($1|0)==(135|0);
     if ($cmp27) {
      HEAP8[$value$addr$i91>>0] = 3;
      $102 = HEAP32[99491]|0;
      $call$i92 = (_fwrite($value$addr$i91,1,1,$102)|0);
      $103 = HEAP32[99492]|0;
      $104 = $103 | $call$i92;
      $105 = ($104|0)==(0);
      if ($105) {
       (_fwrite(152997,44,1,$0)|0);
       HEAP32[99492] = 1;
      }
      $106 = HEAP32[99491]|0;
      $call$i96 = (_ftell($106)|0);
      $sub$i97 = (0 - ($call$i96))|0;
      $and1$i98 = $sub$i97 & 3;
      $cmp5$i99 = ($and1$i98|0)==(0);
      if (!($cmp5$i99)) {
       $i$06$i101 = 0;
       while(1) {
        HEAP8[$value$addr$i$i95>>0] = 0;
        $107 = HEAP32[99491]|0;
        $call$i$i102 = (_fwrite($value$addr$i$i95,1,1,$107)|0);
        $108 = HEAP32[99492]|0;
        $109 = $108 | $call$i$i102;
        $110 = ($109|0)==(0);
        if ($110) {
         (_fwrite(152997,44,1,$0)|0);
         HEAP32[99492] = 1;
        }
        $inc$i105 = (($i$06$i101) + 1)|0;
        $exitcond$i106 = ($inc$i105|0)==($and1$i98|0);
        if ($exitcond$i106) {
         break;
        } else {
         $i$06$i101 = $inc$i105;
        }
       }
      }
      $111 = HEAP32[$th$0200>>2]|0;
      _saveg_write32($111);
      $112 = ((($th$0200)) + 4|0);
      $113 = HEAP32[$112>>2]|0;
      _saveg_write32($113);
      $114 = HEAP32[$function>>2]|0;
      _saveg_write32($114);
      $sector$i111 = ((($th$0200)) + 12|0);
      $115 = HEAP32[$sector$i111>>2]|0;
      $116 = HEAP32[99506]|0;
      $sub$ptr$sub$i112 = (($115) - ($116))|0;
      $sub$ptr$div$i113 = (($sub$ptr$sub$i112|0) / 88)&-1;
      _saveg_write32($sub$ptr$div$i113);
      $speed$i114 = ((($th$0200)) + 16|0);
      $117 = HEAP32[$speed$i114>>2]|0;
      _saveg_write32($117);
      $low$i = ((($th$0200)) + 20|0);
      $118 = HEAP32[$low$i>>2]|0;
      _saveg_write32($118);
      $high$i = ((($th$0200)) + 24|0);
      $119 = HEAP32[$high$i>>2]|0;
      _saveg_write32($119);
      $wait$i = ((($th$0200)) + 28|0);
      $120 = HEAP32[$wait$i>>2]|0;
      _saveg_write32($120);
      $count$i = ((($th$0200)) + 32|0);
      $121 = HEAP32[$count$i>>2]|0;
      _saveg_write32($121);
      $status$i = ((($th$0200)) + 36|0);
      $122 = HEAP32[$status$i>>2]|0;
      _saveg_write32($122);
      $oldstatus$i = ((($th$0200)) + 40|0);
      $123 = HEAP32[$oldstatus$i>>2]|0;
      _saveg_write32($123);
      $crush$i115 = ((($th$0200)) + 44|0);
      $124 = HEAP32[$crush$i115>>2]|0;
      _saveg_write32($124);
      $tag$i = ((($th$0200)) + 48|0);
      $125 = HEAP32[$tag$i>>2]|0;
      _saveg_write32($125);
      $type$i116 = ((($th$0200)) + 52|0);
      $126 = HEAP32[$type$i116>>2]|0;
      _saveg_write32($126);
      break;
     }
     $cmp32 = ($1|0)==(140|0);
     if ($cmp32) {
      HEAP8[$value$addr$i117>>0] = 4;
      $127 = HEAP32[99491]|0;
      $call$i118 = (_fwrite($value$addr$i117,1,1,$127)|0);
      $128 = HEAP32[99492]|0;
      $129 = $128 | $call$i118;
      $130 = ($129|0)==(0);
      if ($130) {
       (_fwrite(152997,44,1,$0)|0);
       HEAP32[99492] = 1;
      }
      $131 = HEAP32[99491]|0;
      $call$i122 = (_ftell($131)|0);
      $sub$i123 = (0 - ($call$i122))|0;
      $and1$i124 = $sub$i123 & 3;
      $cmp5$i125 = ($and1$i124|0)==(0);
      if (!($cmp5$i125)) {
       $i$06$i127 = 0;
       while(1) {
        HEAP8[$value$addr$i$i121>>0] = 0;
        $132 = HEAP32[99491]|0;
        $call$i$i128 = (_fwrite($value$addr$i$i121,1,1,$132)|0);
        $133 = HEAP32[99492]|0;
        $134 = $133 | $call$i$i128;
        $135 = ($134|0)==(0);
        if ($135) {
         (_fwrite(152997,44,1,$0)|0);
         HEAP32[99492] = 1;
        }
        $inc$i131 = (($i$06$i127) + 1)|0;
        $exitcond$i132 = ($inc$i131|0)==($and1$i124|0);
        if ($exitcond$i132) {
         break;
        } else {
         $i$06$i127 = $inc$i131;
        }
       }
      }
      $136 = HEAP32[$th$0200>>2]|0;
      _saveg_write32($136);
      $137 = ((($th$0200)) + 4|0);
      $138 = HEAP32[$137>>2]|0;
      _saveg_write32($138);
      $139 = HEAP32[$function>>2]|0;
      _saveg_write32($139);
      $sector$i137 = ((($th$0200)) + 12|0);
      $140 = HEAP32[$sector$i137>>2]|0;
      $141 = HEAP32[99506]|0;
      $sub$ptr$sub$i138 = (($140) - ($141))|0;
      $sub$ptr$div$i139 = (($sub$ptr$sub$i138|0) / 88)&-1;
      _saveg_write32($sub$ptr$div$i139);
      $count$i140 = ((($th$0200)) + 16|0);
      $142 = HEAP32[$count$i140>>2]|0;
      _saveg_write32($142);
      $maxlight$i = ((($th$0200)) + 20|0);
      $143 = HEAP32[$maxlight$i>>2]|0;
      _saveg_write32($143);
      $minlight$i = ((($th$0200)) + 24|0);
      $144 = HEAP32[$minlight$i>>2]|0;
      _saveg_write32($144);
      $maxtime$i = ((($th$0200)) + 28|0);
      $145 = HEAP32[$maxtime$i>>2]|0;
      _saveg_write32($145);
      $mintime$i = ((($th$0200)) + 32|0);
      $146 = HEAP32[$mintime$i>>2]|0;
      _saveg_write32($146);
      break;
     }
     $cmp37 = ($1|0)==(141|0);
     if ($cmp37) {
      HEAP8[$value$addr$i141>>0] = 5;
      $147 = HEAP32[99491]|0;
      $call$i142 = (_fwrite($value$addr$i141,1,1,$147)|0);
      $148 = HEAP32[99492]|0;
      $149 = $148 | $call$i142;
      $150 = ($149|0)==(0);
      if ($150) {
       (_fwrite(152997,44,1,$0)|0);
       HEAP32[99492] = 1;
      }
      $151 = HEAP32[99491]|0;
      $call$i146 = (_ftell($151)|0);
      $sub$i147 = (0 - ($call$i146))|0;
      $and1$i148 = $sub$i147 & 3;
      $cmp5$i149 = ($and1$i148|0)==(0);
      if (!($cmp5$i149)) {
       $i$06$i151 = 0;
       while(1) {
        HEAP8[$value$addr$i$i145>>0] = 0;
        $152 = HEAP32[99491]|0;
        $call$i$i152 = (_fwrite($value$addr$i$i145,1,1,$152)|0);
        $153 = HEAP32[99492]|0;
        $154 = $153 | $call$i$i152;
        $155 = ($154|0)==(0);
        if ($155) {
         (_fwrite(152997,44,1,$0)|0);
         HEAP32[99492] = 1;
        }
        $inc$i155 = (($i$06$i151) + 1)|0;
        $exitcond$i156 = ($inc$i155|0)==($and1$i148|0);
        if ($exitcond$i156) {
         break;
        } else {
         $i$06$i151 = $inc$i155;
        }
       }
      }
      $156 = HEAP32[$th$0200>>2]|0;
      _saveg_write32($156);
      $157 = ((($th$0200)) + 4|0);
      $158 = HEAP32[$157>>2]|0;
      _saveg_write32($158);
      $159 = HEAP32[$function>>2]|0;
      _saveg_write32($159);
      $sector$i161 = ((($th$0200)) + 12|0);
      $160 = HEAP32[$sector$i161>>2]|0;
      $161 = HEAP32[99506]|0;
      $sub$ptr$sub$i162 = (($160) - ($161))|0;
      $sub$ptr$div$i163 = (($sub$ptr$sub$i162|0) / 88)&-1;
      _saveg_write32($sub$ptr$div$i163);
      $count$i164 = ((($th$0200)) + 16|0);
      $162 = HEAP32[$count$i164>>2]|0;
      _saveg_write32($162);
      $minlight$i165 = ((($th$0200)) + 20|0);
      $163 = HEAP32[$minlight$i165>>2]|0;
      _saveg_write32($163);
      $maxlight$i166 = ((($th$0200)) + 24|0);
      $164 = HEAP32[$maxlight$i166>>2]|0;
      _saveg_write32($164);
      $darktime$i = ((($th$0200)) + 28|0);
      $165 = HEAP32[$darktime$i>>2]|0;
      _saveg_write32($165);
      $brighttime$i = ((($th$0200)) + 32|0);
      $166 = HEAP32[$brighttime$i>>2]|0;
      _saveg_write32($166);
      break;
     }
     $cmp42 = ($1|0)==(142|0);
     if ($cmp42) {
      HEAP8[$value$addr$i167>>0] = 6;
      $167 = HEAP32[99491]|0;
      $call$i168 = (_fwrite($value$addr$i167,1,1,$167)|0);
      $168 = HEAP32[99492]|0;
      $169 = $168 | $call$i168;
      $170 = ($169|0)==(0);
      if ($170) {
       (_fwrite(152997,44,1,$0)|0);
       HEAP32[99492] = 1;
      }
      $171 = HEAP32[99491]|0;
      $call$i172 = (_ftell($171)|0);
      $sub$i173 = (0 - ($call$i172))|0;
      $and1$i174 = $sub$i173 & 3;
      $cmp5$i175 = ($and1$i174|0)==(0);
      if (!($cmp5$i175)) {
       $i$06$i177 = 0;
       while(1) {
        HEAP8[$value$addr$i$i171>>0] = 0;
        $172 = HEAP32[99491]|0;
        $call$i$i178 = (_fwrite($value$addr$i$i171,1,1,$172)|0);
        $173 = HEAP32[99492]|0;
        $174 = $173 | $call$i$i178;
        $175 = ($174|0)==(0);
        if ($175) {
         (_fwrite(152997,44,1,$0)|0);
         HEAP32[99492] = 1;
        }
        $inc$i181 = (($i$06$i177) + 1)|0;
        $exitcond$i182 = ($inc$i181|0)==($and1$i174|0);
        if ($exitcond$i182) {
         break;
        } else {
         $i$06$i177 = $inc$i181;
        }
       }
      }
      $176 = HEAP32[$th$0200>>2]|0;
      _saveg_write32($176);
      $177 = ((($th$0200)) + 4|0);
      $178 = HEAP32[$177>>2]|0;
      _saveg_write32($178);
      $179 = HEAP32[$function>>2]|0;
      _saveg_write32($179);
      $sector$i187 = ((($th$0200)) + 12|0);
      $180 = HEAP32[$sector$i187>>2]|0;
      $181 = HEAP32[99506]|0;
      $sub$ptr$sub$i188 = (($180) - ($181))|0;
      $sub$ptr$div$i189 = (($sub$ptr$sub$i188|0) / 88)&-1;
      _saveg_write32($sub$ptr$div$i189);
      $minlight$i190 = ((($th$0200)) + 16|0);
      $182 = HEAP32[$minlight$i190>>2]|0;
      _saveg_write32($182);
      $maxlight$i191 = ((($th$0200)) + 20|0);
      $183 = HEAP32[$maxlight$i191>>2]|0;
      _saveg_write32($183);
      $direction$i192 = ((($th$0200)) + 24|0);
      $184 = HEAP32[$direction$i192>>2]|0;
      _saveg_write32($184);
     }
    }
   } while(0);
   $next = ((($th$0200)) + 4|0);
   $th$0 = HEAP32[$next>>2]|0;
   $cmp = ($th$0|0)==(398216|0);
   if ($cmp) {
    break;
   } else {
    $th$0200 = $th$0;
   }
  }
 }
 HEAP8[$value$addr$i193>>0] = 7;
 $185 = HEAP32[99491]|0;
 $call$i194 = (_fwrite($value$addr$i193,1,1,$185)|0);
 $186 = HEAP32[99492]|0;
 $187 = $186 | $call$i194;
 $188 = ($187|0)==(0);
 if (!($188)) {
  STACKTOP = sp;return;
 }
 $189 = HEAP32[32441]|0;
 (_fwrite(152997,44,1,$189)|0);
 HEAP32[99492] = 1;
 STACKTOP = sp;return;
}
function _saveg_write_ceiling_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bottomheight = 0, $crush = 0, $direction = 0, $function$i = 0, $next$i = 0, $olddirection = 0, $sector = 0;
 var $speed = 0, $sub$ptr$div = 0, $sub$ptr$sub = 0, $tag = 0, $topheight = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$str>>2]|0;
 _saveg_write32($0);
 $next$i = ((($str)) + 4|0);
 $1 = HEAP32[$next$i>>2]|0;
 _saveg_write32($1);
 $function$i = ((($str)) + 8|0);
 $2 = HEAP32[$function$i>>2]|0;
 _saveg_write32($2);
 $type = ((($str)) + 12|0);
 $3 = HEAP32[$type>>2]|0;
 _saveg_write32($3);
 $sector = ((($str)) + 16|0);
 $4 = HEAP32[$sector>>2]|0;
 $5 = HEAP32[99506]|0;
 $sub$ptr$sub = (($4) - ($5))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 88)&-1;
 _saveg_write32($sub$ptr$div);
 $bottomheight = ((($str)) + 20|0);
 $6 = HEAP32[$bottomheight>>2]|0;
 _saveg_write32($6);
 $topheight = ((($str)) + 24|0);
 $7 = HEAP32[$topheight>>2]|0;
 _saveg_write32($7);
 $speed = ((($str)) + 28|0);
 $8 = HEAP32[$speed>>2]|0;
 _saveg_write32($8);
 $crush = ((($str)) + 32|0);
 $9 = HEAP32[$crush>>2]|0;
 _saveg_write32($9);
 $direction = ((($str)) + 36|0);
 $10 = HEAP32[$direction>>2]|0;
 _saveg_write32($10);
 $tag = ((($str)) + 40|0);
 $11 = HEAP32[$tag>>2]|0;
 _saveg_write32($11);
 $olddirection = ((($str)) + 44|0);
 $12 = HEAP32[$olddirection>>2]|0;
 _saveg_write32($12);
 return;
}
function _P_UnArchiveSpecials() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $and1$i = 0, $and1$i106 = 0, $and1$i139 = 0, $and1$i167 = 0, $and1$i197 = 0, $and1$i40 = 0, $and1$i72 = 0, $arrayidx$i = 0, $arrayidx$i123 = 0, $arrayidx$i156 = 0, $arrayidx$i184 = 0, $arrayidx$i214 = 0, $arrayidx$i59 = 0, $arrayidx$i93 = 0, $bottomheight$i = 0;
 var $brighttime$i = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i121 = 0, $call$i$i$i$i154 = 0, $call$i$i$i$i182 = 0, $call$i$i$i$i212 = 0, $call$i$i$i$i55 = 0, $call$i$i$i$i88 = 0, $call$i$i$i117 = 0, $call$i$i$i150 = 0, $call$i$i$i178 = 0, $call$i$i$i208 = 0, $call$i$i$i51 = 0, $call$i$i$i84 = 0, $call$i$i10$i = 0, $call$i$i110 = 0, $call$i$i143 = 0;
 var $call$i$i171 = 0, $call$i$i201 = 0, $call$i$i44 = 0, $call$i$i76 = 0, $call$i$i97 = 0, $call$i104 = 0, $call$i122 = 0, $call$i137 = 0, $call$i155 = 0, $call$i165 = 0, $call$i183 = 0, $call$i195 = 0, $call$i213 = 0, $call$i3$i$i = 0, $call$i3$i$i118 = 0, $call$i3$i$i151 = 0, $call$i3$i$i179 = 0, $call$i3$i$i209 = 0, $call$i3$i$i52 = 0, $call$i3$i$i85 = 0;
 var $call$i35 = 0, $call$i36 = 0, $call$i38 = 0, $call$i56 = 0, $call$i70 = 0, $call$i89 = 0, $call1$i = 0, $call1$i58 = 0, $call1$i91 = 0, $call10$i = 0, $call11$i = 0, $call16 = 0, $call2 = 0, $call2$i = 0, $call2$i124 = 0, $call2$i158 = 0, $call2$i186 = 0, $call2$i216 = 0, $call24 = 0, $call3$i = 0;
 var $call3$i126 = 0, $call3$i160 = 0, $call3$i188 = 0, $call3$i218 = 0, $call3$i61 = 0, $call38 = 0, $call4$i = 0, $call4$i127 = 0, $call4$i161 = 0, $call4$i190 = 0, $call4$i220 = 0, $call4$i63 = 0, $call4$i94 = 0, $call44 = 0, $call5$i = 0, $call5$i128 = 0, $call5$i162 = 0, $call5$i192 = 0, $call5$i65 = 0, $call5$i96 = 0;
 var $call50 = 0, $call6$i = 0, $call6$i129 = 0, $call6$i163 = 0, $call6$i193 = 0, $call6$i67 = 0, $call7$i = 0, $call7$i130 = 0, $call7$i68 = 0, $call7$i99 = 0, $call8 = 0, $call8$i = 0, $call8$i100 = 0, $call8$i131 = 0, $call9$i = 0, $call9$i132 = 0, $cmp5$i = 0, $cmp5$i107 = 0, $cmp5$i140 = 0, $cmp5$i168 = 0;
 var $cmp5$i198 = 0, $cmp5$i41 = 0, $cmp5$i73 = 0, $conv = 0, $conv$i$i = 0, $conv2$i$i = 0, $conv3$i$i = 0, $count$i = 0, $count$i159 = 0, $count$i187 = 0, $crush$i = 0, $crush$i133 = 0, $crush$i92 = 0, $darktime$i = 0, $direction$i = 0, $direction$i221 = 0, $direction$i66 = 0, $direction$i95 = 0, $exitcond$i = 0, $exitcond$i114 = 0;
 var $exitcond$i147 = 0, $exitcond$i175 = 0, $exitcond$i205 = 0, $exitcond$i48 = 0, $exitcond$i80 = 0, $floordestheight$i = 0, $function$i$i = 0, $function$i$i120 = 0, $function$i$i153 = 0, $function$i$i181 = 0, $function$i$i211 = 0, $function$i$i54 = 0, $function$i$i87 = 0, $high$i = 0, $i$06$i = 0, $i$06$i109 = 0, $i$06$i142 = 0, $i$06$i170 = 0, $i$06$i200 = 0, $i$06$i43 = 0;
 var $i$06$i75 = 0, $inc$i = 0, $inc$i113 = 0, $inc$i146 = 0, $inc$i174 = 0, $inc$i204 = 0, $inc$i47 = 0, $inc$i79 = 0, $low$i = 0, $maxlight$i = 0, $maxlight$i191 = 0, $maxlight$i219 = 0, $maxtime$i = 0, $minlight$i = 0, $minlight$i189 = 0, $minlight$i217 = 0, $mintime$i = 0, $newspecial$i = 0, $next$i$i = 0, $next$i$i119 = 0;
 var $next$i$i152 = 0, $next$i$i180 = 0, $next$i$i210 = 0, $next$i$i53 = 0, $next$i$i86 = 0, $olddirection$i = 0, $oldstatus$i = 0, $or$i$i = 0, $result$i = 0, $result$i$i = 0, $result$i$i$i = 0, $result$i$i103 = 0, $result$i$i136 = 0, $result$i$i164 = 0, $result$i$i194 = 0, $result$i$i37 = 0, $result$i$i69 = 0, $result$i$i83 = 0, $sector1$i = 0, $sector1$i157 = 0;
 var $sector1$i185 = 0, $sector1$i215 = 0, $sector2$i = 0, $sector2$i60 = 0, $sector3$i = 0, $shl$i$i = 0, $specialdata = 0, $specialdata10 = 0, $specialdata18 = 0, $specialdata26 = 0, $speed$i = 0, $speed$i101 = 0, $speed$i125 = 0, $speed$i64 = 0, $status$i = 0, $sub$i = 0, $sub$i105 = 0, $sub$i138 = 0, $sub$i166 = 0, $sub$i196 = 0;
 var $sub$i39 = 0, $sub$i71 = 0, $tag$i = 0, $tag$i134 = 0, $texture$i = 0, $tobool = 0, $tobool30 = 0, $topcountdown$i = 0, $topheight$i = 0, $topheight$i62 = 0, $topwait$i = 0, $type$i = 0, $type$i135 = 0, $type$i57 = 0, $type$i90 = 0, $vararg_buffer = 0, $wait$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $result$i$i194 = sp + 13|0;
 $result$i$i164 = sp + 12|0;
 $result$i$i136 = sp + 11|0;
 $result$i$i103 = sp + 10|0;
 $result$i$i83 = sp + 9|0;
 $result$i$i$i = sp + 8|0;
 $result$i$i69 = sp + 7|0;
 $result$i$i37 = sp + 6|0;
 $result$i$i = sp + 5|0;
 $result$i = sp + 4|0;
 $0 = HEAP32[32441]|0;
 L1: while(1) {
  $1 = HEAP32[99491]|0;
  $call$i = (_fread($result$i,1,1,$1)|0);
  $2 = HEAP32[99492]|0;
  $3 = $2 | $call$i;
  $4 = ($3|0)==(0);
  if ($4) {
   (_fwrite(153053,60,1,$0)|0);
   HEAP32[99492] = 1;
  }
  $5 = HEAP8[$result$i>>0]|0;
  switch ($5<<24>>24) {
  case 7:  {
   label = 5;
   break L1;
   break;
  }
  case 0:  {
   $6 = HEAP32[99491]|0;
   $call$i35 = (_ftell($6)|0);
   $sub$i = (0 - ($call$i35))|0;
   $and1$i = $sub$i & 3;
   $cmp5$i = ($and1$i|0)==(0);
   if (!($cmp5$i)) {
    $i$06$i = 0;
    while(1) {
     $7 = HEAP32[99491]|0;
     $call$i$i = (_fread($result$i$i,1,1,$7)|0);
     $8 = HEAP32[99492]|0;
     $9 = $8 | $call$i$i;
     $10 = ($9|0)==(0);
     if ($10) {
      (_fwrite(153053,60,1,$0)|0);
      HEAP32[99492] = 1;
     }
     $inc$i = (($i$06$i) + 1)|0;
     $exitcond$i = ($inc$i|0)==($and1$i|0);
     if ($exitcond$i) {
      break;
     } else {
      $i$06$i = $inc$i;
     }
    }
   }
   $call2 = (_Z_Malloc(48,5,0)|0);
   $call$i$i$i = (_saveg_read32()|0);
   $11 = $call$i$i$i;
   HEAP32[$call2>>2] = $11;
   $call$i3$i$i = (_saveg_read32()|0);
   $12 = $call$i3$i$i;
   $next$i$i = ((($call2)) + 4|0);
   HEAP32[$next$i$i>>2] = $12;
   $function$i$i = ((($call2)) + 8|0);
   $call$i$i$i$i = (_saveg_read32()|0);
   $13 = $call$i$i$i$i;
   HEAP32[$function$i$i>>2] = $13;
   $call$i36 = (_saveg_read32()|0);
   $type$i = ((($call2)) + 12|0);
   HEAP32[$type$i>>2] = $call$i36;
   $call1$i = (_saveg_read32()|0);
   $14 = HEAP32[99506]|0;
   $arrayidx$i = (($14) + (($call1$i*88)|0)|0);
   $sector2$i = ((($call2)) + 16|0);
   HEAP32[$sector2$i>>2] = $arrayidx$i;
   $call3$i = (_saveg_read32()|0);
   $bottomheight$i = ((($call2)) + 20|0);
   HEAP32[$bottomheight$i>>2] = $call3$i;
   $call4$i = (_saveg_read32()|0);
   $topheight$i = ((($call2)) + 24|0);
   HEAP32[$topheight$i>>2] = $call4$i;
   $call5$i = (_saveg_read32()|0);
   $speed$i = ((($call2)) + 28|0);
   HEAP32[$speed$i>>2] = $call5$i;
   $call6$i = (_saveg_read32()|0);
   $crush$i = ((($call2)) + 32|0);
   HEAP32[$crush$i>>2] = $call6$i;
   $call7$i = (_saveg_read32()|0);
   $direction$i = ((($call2)) + 36|0);
   HEAP32[$direction$i>>2] = $call7$i;
   $call8$i = (_saveg_read32()|0);
   $tag$i = ((($call2)) + 40|0);
   HEAP32[$tag$i>>2] = $call8$i;
   $call9$i = (_saveg_read32()|0);
   $olddirection$i = ((($call2)) + 44|0);
   HEAP32[$olddirection$i>>2] = $call9$i;
   $15 = HEAP32[$sector2$i>>2]|0;
   $specialdata = ((($15)) + 76|0);
   HEAP32[$specialdata>>2] = $call2;
   $16 = HEAP32[$function$i$i>>2]|0;
   $tobool = ($16|0)==(0|0);
   if (!($tobool)) {
    HEAP32[$function$i$i>>2] = 133;
   }
   _P_AddThinker($call2);
   _P_AddActiveCeiling($call2);
   break;
  }
  case 1:  {
   $17 = HEAP32[99491]|0;
   $call$i38 = (_ftell($17)|0);
   $sub$i39 = (0 - ($call$i38))|0;
   $and1$i40 = $sub$i39 & 3;
   $cmp5$i41 = ($and1$i40|0)==(0);
   if (!($cmp5$i41)) {
    $i$06$i43 = 0;
    while(1) {
     $18 = HEAP32[99491]|0;
     $call$i$i44 = (_fread($result$i$i37,1,1,$18)|0);
     $19 = HEAP32[99492]|0;
     $20 = $19 | $call$i$i44;
     $21 = ($20|0)==(0);
     if ($21) {
      (_fwrite(153053,60,1,$0)|0);
      HEAP32[99492] = 1;
     }
     $inc$i47 = (($i$06$i43) + 1)|0;
     $exitcond$i48 = ($inc$i47|0)==($and1$i40|0);
     if ($exitcond$i48) {
      break;
     } else {
      $i$06$i43 = $inc$i47;
     }
    }
   }
   $call8 = (_Z_Malloc(40,5,0)|0);
   $call$i$i$i51 = (_saveg_read32()|0);
   $22 = $call$i$i$i51;
   HEAP32[$call8>>2] = $22;
   $call$i3$i$i52 = (_saveg_read32()|0);
   $23 = $call$i3$i$i52;
   $next$i$i53 = ((($call8)) + 4|0);
   HEAP32[$next$i$i53>>2] = $23;
   $function$i$i54 = ((($call8)) + 8|0);
   $call$i$i$i$i55 = (_saveg_read32()|0);
   $24 = $call$i$i$i$i55;
   HEAP32[$function$i$i54>>2] = $24;
   $call$i56 = (_saveg_read32()|0);
   $type$i57 = ((($call8)) + 12|0);
   HEAP32[$type$i57>>2] = $call$i56;
   $call1$i58 = (_saveg_read32()|0);
   $25 = HEAP32[99506]|0;
   $arrayidx$i59 = (($25) + (($call1$i58*88)|0)|0);
   $sector2$i60 = ((($call8)) + 16|0);
   HEAP32[$sector2$i60>>2] = $arrayidx$i59;
   $call3$i61 = (_saveg_read32()|0);
   $topheight$i62 = ((($call8)) + 20|0);
   HEAP32[$topheight$i62>>2] = $call3$i61;
   $call4$i63 = (_saveg_read32()|0);
   $speed$i64 = ((($call8)) + 24|0);
   HEAP32[$speed$i64>>2] = $call4$i63;
   $call5$i65 = (_saveg_read32()|0);
   $direction$i66 = ((($call8)) + 28|0);
   HEAP32[$direction$i66>>2] = $call5$i65;
   $call6$i67 = (_saveg_read32()|0);
   $topwait$i = ((($call8)) + 32|0);
   HEAP32[$topwait$i>>2] = $call6$i67;
   $call7$i68 = (_saveg_read32()|0);
   $topcountdown$i = ((($call8)) + 36|0);
   HEAP32[$topcountdown$i>>2] = $call7$i68;
   $26 = HEAP32[$sector2$i60>>2]|0;
   $specialdata10 = ((($26)) + 76|0);
   HEAP32[$specialdata10>>2] = $call8;
   HEAP32[$function$i$i54>>2] = 134;
   _P_AddThinker($call8);
   break;
  }
  case 2:  {
   $27 = HEAP32[99491]|0;
   $call$i70 = (_ftell($27)|0);
   $sub$i71 = (0 - ($call$i70))|0;
   $and1$i72 = $sub$i71 & 3;
   $cmp5$i73 = ($and1$i72|0)==(0);
   if (!($cmp5$i73)) {
    $i$06$i75 = 0;
    while(1) {
     $28 = HEAP32[99491]|0;
     $call$i$i76 = (_fread($result$i$i69,1,1,$28)|0);
     $29 = HEAP32[99492]|0;
     $30 = $29 | $call$i$i76;
     $31 = ($30|0)==(0);
     if ($31) {
      (_fwrite(153053,60,1,$0)|0);
      HEAP32[99492] = 1;
     }
     $inc$i79 = (($i$06$i75) + 1)|0;
     $exitcond$i80 = ($inc$i79|0)==($and1$i72|0);
     if ($exitcond$i80) {
      break;
     } else {
      $i$06$i75 = $inc$i79;
     }
    }
   }
   $call16 = (_Z_Malloc(44,5,0)|0);
   $call$i$i$i84 = (_saveg_read32()|0);
   $32 = $call$i$i$i84;
   HEAP32[$call16>>2] = $32;
   $call$i3$i$i85 = (_saveg_read32()|0);
   $33 = $call$i3$i$i85;
   $next$i$i86 = ((($call16)) + 4|0);
   HEAP32[$next$i$i86>>2] = $33;
   $function$i$i87 = ((($call16)) + 8|0);
   $call$i$i$i$i88 = (_saveg_read32()|0);
   $34 = $call$i$i$i$i88;
   HEAP32[$function$i$i87>>2] = $34;
   $call$i89 = (_saveg_read32()|0);
   $type$i90 = ((($call16)) + 12|0);
   HEAP32[$type$i90>>2] = $call$i89;
   $call1$i91 = (_saveg_read32()|0);
   $crush$i92 = ((($call16)) + 16|0);
   HEAP32[$crush$i92>>2] = $call1$i91;
   $call2$i = (_saveg_read32()|0);
   $35 = HEAP32[99506]|0;
   $arrayidx$i93 = (($35) + (($call2$i*88)|0)|0);
   $sector3$i = ((($call16)) + 20|0);
   HEAP32[$sector3$i>>2] = $arrayidx$i93;
   $call4$i94 = (_saveg_read32()|0);
   $direction$i95 = ((($call16)) + 24|0);
   HEAP32[$direction$i95>>2] = $call4$i94;
   $call5$i96 = (_saveg_read32()|0);
   $newspecial$i = ((($call16)) + 28|0);
   HEAP32[$newspecial$i>>2] = $call5$i96;
   $36 = HEAP32[99491]|0;
   $call$i$i10$i = (_fread($result$i$i$i,1,1,$36)|0);
   $37 = HEAP32[99492]|0;
   $38 = $37 | $call$i$i10$i;
   $39 = ($38|0)==(0);
   if ($39) {
    (_fwrite(153053,60,1,$0)|0);
    HEAP32[99492] = 1;
   }
   $40 = HEAP8[$result$i$i$i>>0]|0;
   $conv$i$i = $40&255;
   $41 = HEAP32[99491]|0;
   $call$i$i97 = (_fread($result$i$i83,1,1,$41)|0);
   $42 = HEAP32[99492]|0;
   $43 = $42 | $call$i$i97;
   $44 = ($43|0)==(0);
   if ($44) {
    (_fwrite(153053,60,1,$0)|0);
    HEAP32[99492] = 1;
   }
   $45 = HEAP8[$result$i$i83>>0]|0;
   $conv2$i$i = $45&255;
   $shl$i$i = $conv2$i$i << 8;
   $or$i$i = $shl$i$i | $conv$i$i;
   $conv3$i$i = $or$i$i&65535;
   $texture$i = ((($call16)) + 32|0);
   HEAP16[$texture$i>>1] = $conv3$i$i;
   $call7$i99 = (_saveg_read32()|0);
   $floordestheight$i = ((($call16)) + 36|0);
   HEAP32[$floordestheight$i>>2] = $call7$i99;
   $call8$i100 = (_saveg_read32()|0);
   $speed$i101 = ((($call16)) + 40|0);
   HEAP32[$speed$i101>>2] = $call8$i100;
   $46 = HEAP32[$sector3$i>>2]|0;
   $specialdata18 = ((($46)) + 76|0);
   HEAP32[$specialdata18>>2] = $call16;
   HEAP32[$function$i$i87>>2] = 138;
   _P_AddThinker($call16);
   break;
  }
  case 3:  {
   $47 = HEAP32[99491]|0;
   $call$i104 = (_ftell($47)|0);
   $sub$i105 = (0 - ($call$i104))|0;
   $and1$i106 = $sub$i105 & 3;
   $cmp5$i107 = ($and1$i106|0)==(0);
   if (!($cmp5$i107)) {
    $i$06$i109 = 0;
    while(1) {
     $48 = HEAP32[99491]|0;
     $call$i$i110 = (_fread($result$i$i103,1,1,$48)|0);
     $49 = HEAP32[99492]|0;
     $50 = $49 | $call$i$i110;
     $51 = ($50|0)==(0);
     if ($51) {
      (_fwrite(153053,60,1,$0)|0);
      HEAP32[99492] = 1;
     }
     $inc$i113 = (($i$06$i109) + 1)|0;
     $exitcond$i114 = ($inc$i113|0)==($and1$i106|0);
     if ($exitcond$i114) {
      break;
     } else {
      $i$06$i109 = $inc$i113;
     }
    }
   }
   $call24 = (_Z_Malloc(56,5,0)|0);
   $call$i$i$i117 = (_saveg_read32()|0);
   $52 = $call$i$i$i117;
   HEAP32[$call24>>2] = $52;
   $call$i3$i$i118 = (_saveg_read32()|0);
   $53 = $call$i3$i$i118;
   $next$i$i119 = ((($call24)) + 4|0);
   HEAP32[$next$i$i119>>2] = $53;
   $function$i$i120 = ((($call24)) + 8|0);
   $call$i$i$i$i121 = (_saveg_read32()|0);
   $54 = $call$i$i$i$i121;
   HEAP32[$function$i$i120>>2] = $54;
   $call$i122 = (_saveg_read32()|0);
   $55 = HEAP32[99506]|0;
   $arrayidx$i123 = (($55) + (($call$i122*88)|0)|0);
   $sector1$i = ((($call24)) + 12|0);
   HEAP32[$sector1$i>>2] = $arrayidx$i123;
   $call2$i124 = (_saveg_read32()|0);
   $speed$i125 = ((($call24)) + 16|0);
   HEAP32[$speed$i125>>2] = $call2$i124;
   $call3$i126 = (_saveg_read32()|0);
   $low$i = ((($call24)) + 20|0);
   HEAP32[$low$i>>2] = $call3$i126;
   $call4$i127 = (_saveg_read32()|0);
   $high$i = ((($call24)) + 24|0);
   HEAP32[$high$i>>2] = $call4$i127;
   $call5$i128 = (_saveg_read32()|0);
   $wait$i = ((($call24)) + 28|0);
   HEAP32[$wait$i>>2] = $call5$i128;
   $call6$i129 = (_saveg_read32()|0);
   $count$i = ((($call24)) + 32|0);
   HEAP32[$count$i>>2] = $call6$i129;
   $call7$i130 = (_saveg_read32()|0);
   $status$i = ((($call24)) + 36|0);
   HEAP32[$status$i>>2] = $call7$i130;
   $call8$i131 = (_saveg_read32()|0);
   $oldstatus$i = ((($call24)) + 40|0);
   HEAP32[$oldstatus$i>>2] = $call8$i131;
   $call9$i132 = (_saveg_read32()|0);
   $crush$i133 = ((($call24)) + 44|0);
   HEAP32[$crush$i133>>2] = $call9$i132;
   $call10$i = (_saveg_read32()|0);
   $tag$i134 = ((($call24)) + 48|0);
   HEAP32[$tag$i134>>2] = $call10$i;
   $call11$i = (_saveg_read32()|0);
   $type$i135 = ((($call24)) + 52|0);
   HEAP32[$type$i135>>2] = $call11$i;
   $56 = HEAP32[$sector1$i>>2]|0;
   $specialdata26 = ((($56)) + 76|0);
   HEAP32[$specialdata26>>2] = $call24;
   $57 = HEAP32[$function$i$i120>>2]|0;
   $tobool30 = ($57|0)==(0|0);
   if (!($tobool30)) {
    HEAP32[$function$i$i120>>2] = 135;
   }
   _P_AddThinker($call24);
   _P_AddActivePlat($call24);
   break;
  }
  case 4:  {
   $58 = HEAP32[99491]|0;
   $call$i137 = (_ftell($58)|0);
   $sub$i138 = (0 - ($call$i137))|0;
   $and1$i139 = $sub$i138 & 3;
   $cmp5$i140 = ($and1$i139|0)==(0);
   if (!($cmp5$i140)) {
    $i$06$i142 = 0;
    while(1) {
     $59 = HEAP32[99491]|0;
     $call$i$i143 = (_fread($result$i$i136,1,1,$59)|0);
     $60 = HEAP32[99492]|0;
     $61 = $60 | $call$i$i143;
     $62 = ($61|0)==(0);
     if ($62) {
      (_fwrite(153053,60,1,$0)|0);
      HEAP32[99492] = 1;
     }
     $inc$i146 = (($i$06$i142) + 1)|0;
     $exitcond$i147 = ($inc$i146|0)==($and1$i139|0);
     if ($exitcond$i147) {
      break;
     } else {
      $i$06$i142 = $inc$i146;
     }
    }
   }
   $call38 = (_Z_Malloc(36,5,0)|0);
   $call$i$i$i150 = (_saveg_read32()|0);
   $63 = $call$i$i$i150;
   HEAP32[$call38>>2] = $63;
   $call$i3$i$i151 = (_saveg_read32()|0);
   $64 = $call$i3$i$i151;
   $next$i$i152 = ((($call38)) + 4|0);
   HEAP32[$next$i$i152>>2] = $64;
   $function$i$i153 = ((($call38)) + 8|0);
   $call$i$i$i$i154 = (_saveg_read32()|0);
   $65 = $call$i$i$i$i154;
   HEAP32[$function$i$i153>>2] = $65;
   $call$i155 = (_saveg_read32()|0);
   $66 = HEAP32[99506]|0;
   $arrayidx$i156 = (($66) + (($call$i155*88)|0)|0);
   $sector1$i157 = ((($call38)) + 12|0);
   HEAP32[$sector1$i157>>2] = $arrayidx$i156;
   $call2$i158 = (_saveg_read32()|0);
   $count$i159 = ((($call38)) + 16|0);
   HEAP32[$count$i159>>2] = $call2$i158;
   $call3$i160 = (_saveg_read32()|0);
   $maxlight$i = ((($call38)) + 20|0);
   HEAP32[$maxlight$i>>2] = $call3$i160;
   $call4$i161 = (_saveg_read32()|0);
   $minlight$i = ((($call38)) + 24|0);
   HEAP32[$minlight$i>>2] = $call4$i161;
   $call5$i162 = (_saveg_read32()|0);
   $maxtime$i = ((($call38)) + 28|0);
   HEAP32[$maxtime$i>>2] = $call5$i162;
   $call6$i163 = (_saveg_read32()|0);
   $mintime$i = ((($call38)) + 32|0);
   HEAP32[$mintime$i>>2] = $call6$i163;
   HEAP32[$function$i$i153>>2] = 140;
   _P_AddThinker($call38);
   break;
  }
  case 5:  {
   $67 = HEAP32[99491]|0;
   $call$i165 = (_ftell($67)|0);
   $sub$i166 = (0 - ($call$i165))|0;
   $and1$i167 = $sub$i166 & 3;
   $cmp5$i168 = ($and1$i167|0)==(0);
   if (!($cmp5$i168)) {
    $i$06$i170 = 0;
    while(1) {
     $68 = HEAP32[99491]|0;
     $call$i$i171 = (_fread($result$i$i164,1,1,$68)|0);
     $69 = HEAP32[99492]|0;
     $70 = $69 | $call$i$i171;
     $71 = ($70|0)==(0);
     if ($71) {
      (_fwrite(153053,60,1,$0)|0);
      HEAP32[99492] = 1;
     }
     $inc$i174 = (($i$06$i170) + 1)|0;
     $exitcond$i175 = ($inc$i174|0)==($and1$i167|0);
     if ($exitcond$i175) {
      break;
     } else {
      $i$06$i170 = $inc$i174;
     }
    }
   }
   $call44 = (_Z_Malloc(36,5,0)|0);
   $call$i$i$i178 = (_saveg_read32()|0);
   $72 = $call$i$i$i178;
   HEAP32[$call44>>2] = $72;
   $call$i3$i$i179 = (_saveg_read32()|0);
   $73 = $call$i3$i$i179;
   $next$i$i180 = ((($call44)) + 4|0);
   HEAP32[$next$i$i180>>2] = $73;
   $function$i$i181 = ((($call44)) + 8|0);
   $call$i$i$i$i182 = (_saveg_read32()|0);
   $74 = $call$i$i$i$i182;
   HEAP32[$function$i$i181>>2] = $74;
   $call$i183 = (_saveg_read32()|0);
   $75 = HEAP32[99506]|0;
   $arrayidx$i184 = (($75) + (($call$i183*88)|0)|0);
   $sector1$i185 = ((($call44)) + 12|0);
   HEAP32[$sector1$i185>>2] = $arrayidx$i184;
   $call2$i186 = (_saveg_read32()|0);
   $count$i187 = ((($call44)) + 16|0);
   HEAP32[$count$i187>>2] = $call2$i186;
   $call3$i188 = (_saveg_read32()|0);
   $minlight$i189 = ((($call44)) + 20|0);
   HEAP32[$minlight$i189>>2] = $call3$i188;
   $call4$i190 = (_saveg_read32()|0);
   $maxlight$i191 = ((($call44)) + 24|0);
   HEAP32[$maxlight$i191>>2] = $call4$i190;
   $call5$i192 = (_saveg_read32()|0);
   $darktime$i = ((($call44)) + 28|0);
   HEAP32[$darktime$i>>2] = $call5$i192;
   $call6$i193 = (_saveg_read32()|0);
   $brighttime$i = ((($call44)) + 32|0);
   HEAP32[$brighttime$i>>2] = $call6$i193;
   HEAP32[$function$i$i181>>2] = 141;
   _P_AddThinker($call44);
   break;
  }
  case 6:  {
   $76 = HEAP32[99491]|0;
   $call$i195 = (_ftell($76)|0);
   $sub$i196 = (0 - ($call$i195))|0;
   $and1$i197 = $sub$i196 & 3;
   $cmp5$i198 = ($and1$i197|0)==(0);
   if (!($cmp5$i198)) {
    $i$06$i200 = 0;
    while(1) {
     $77 = HEAP32[99491]|0;
     $call$i$i201 = (_fread($result$i$i194,1,1,$77)|0);
     $78 = HEAP32[99492]|0;
     $79 = $78 | $call$i$i201;
     $80 = ($79|0)==(0);
     if ($80) {
      (_fwrite(153053,60,1,$0)|0);
      HEAP32[99492] = 1;
     }
     $inc$i204 = (($i$06$i200) + 1)|0;
     $exitcond$i205 = ($inc$i204|0)==($and1$i197|0);
     if ($exitcond$i205) {
      break;
     } else {
      $i$06$i200 = $inc$i204;
     }
    }
   }
   $call50 = (_Z_Malloc(28,5,0)|0);
   $call$i$i$i208 = (_saveg_read32()|0);
   $81 = $call$i$i$i208;
   HEAP32[$call50>>2] = $81;
   $call$i3$i$i209 = (_saveg_read32()|0);
   $82 = $call$i3$i$i209;
   $next$i$i210 = ((($call50)) + 4|0);
   HEAP32[$next$i$i210>>2] = $82;
   $function$i$i211 = ((($call50)) + 8|0);
   $call$i$i$i$i212 = (_saveg_read32()|0);
   $83 = $call$i$i$i$i212;
   HEAP32[$function$i$i211>>2] = $83;
   $call$i213 = (_saveg_read32()|0);
   $84 = HEAP32[99506]|0;
   $arrayidx$i214 = (($84) + (($call$i213*88)|0)|0);
   $sector1$i215 = ((($call50)) + 12|0);
   HEAP32[$sector1$i215>>2] = $arrayidx$i214;
   $call2$i216 = (_saveg_read32()|0);
   $minlight$i217 = ((($call50)) + 16|0);
   HEAP32[$minlight$i217>>2] = $call2$i216;
   $call3$i218 = (_saveg_read32()|0);
   $maxlight$i219 = ((($call50)) + 20|0);
   HEAP32[$maxlight$i219>>2] = $call3$i218;
   $call4$i220 = (_saveg_read32()|0);
   $direction$i221 = ((($call50)) + 24|0);
   HEAP32[$direction$i221>>2] = $call4$i220;
   HEAP32[$function$i$i211>>2] = 142;
   _P_AddThinker($call50);
   break;
  }
  default: {
   label = 56;
   break L1;
  }
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 56) {
  $conv = $5&255;
  HEAP32[$vararg_buffer>>2] = $conv;
  _I_Error(153144,$vararg_buffer);
  // unreachable;
 }
}
function _P_LoadSegs($lump) {
 $lump = $lump|0;
 var $$pre = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $angle = 0, $angle8 = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx19 = 0, $arrayidx21 = 0, $arrayidx28 = 0, $arrayidx6 = 0, $backsector = 0, $backsector38 = 0, $backsector40 = 0, $call = 0, $call1 = 0, $call3 = 0, $cmp = 0;
 var $cmp30 = 0, $cmp32 = 0, $cmp39 = 0, $conv13 = 0, $conv17 = 0, $conv29 = 0, $conv36 = 0, $conv937 = 0, $div = 0, $flags = 0, $frontsector = 0, $i$042 = 0, $idxprom = 0, $idxprom20 = 0, $idxprom5 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr42 = 0, $li$040 = 0, $linedef12 = 0;
 var $linedef15 = 0, $ml$041 = 0, $mul = 0, $mul2 = 0, $offset = 0, $offset11 = 0, $or$cond = 0, $sector = 0, $sector37 = 0, $shl = 0, $shl10 = 0, $side16 = 0, $sidedef = 0, $tobool = 0, $tobool$i = 0, $v2 = 0, $v27 = 0, $xor = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 $call = (_W_LumpLength($lump)|0);
 $div = (($call>>>0) / 12)&-1;
 HEAP32[99498] = $div;
 $mul = $div << 5;
 $call1 = (_Z_Malloc($mul,5,0)|0);
 HEAP32[99499] = $call1;
 $0 = HEAP32[99498]|0;
 $mul2 = $0 << 5;
 _memset(($call1|0),0,($mul2|0))|0;
 $call3 = (_W_CacheLumpNum($lump,1)|0);
 $1 = HEAP32[99498]|0;
 $cmp39 = ($1|0)>(0);
 if (!($cmp39)) {
  _W_ReleaseLumpNum($lump);
  return;
 }
 $2 = HEAP32[99499]|0;
 $22 = $1;$i$042 = 0;$li$040 = $2;$ml$041 = $call3;
 while(1) {
  $3 = HEAP32[99497]|0;
  $4 = HEAPU8[$ml$041>>0]|(HEAPU8[$ml$041+1>>0]<<8);
  $idxprom = $4 << 16 >> 16;
  $arrayidx = (($3) + ($idxprom<<3)|0);
  HEAP32[$li$040>>2] = $arrayidx;
  $5 = HEAP32[99497]|0;
  $v2 = ((($ml$041)) + 2|0);
  $6 = HEAPU8[$v2>>0]|(HEAPU8[$v2+1>>0]<<8);
  $idxprom5 = $6 << 16 >> 16;
  $arrayidx6 = (($5) + ($idxprom5<<3)|0);
  $v27 = ((($li$040)) + 4|0);
  HEAP32[$v27>>2] = $arrayidx6;
  $angle = ((($ml$041)) + 4|0);
  $7 = HEAPU8[$angle>>0]|(HEAPU8[$angle+1>>0]<<8);
  $conv36 = $7&65535;
  $shl = $conv36 << 16;
  $angle8 = ((($li$040)) + 12|0);
  HEAP32[$angle8>>2] = $shl;
  $offset = ((($ml$041)) + 10|0);
  $8 = HEAPU8[$offset>>0]|(HEAPU8[$offset+1>>0]<<8);
  $conv937 = $8&65535;
  $shl10 = $conv937 << 16;
  $offset11 = ((($li$040)) + 8|0);
  HEAP32[$offset11>>2] = $shl10;
  $linedef12 = ((($ml$041)) + 6|0);
  $9 = HEAPU8[$linedef12>>0]|(HEAPU8[$linedef12+1>>0]<<8);
  $conv13 = $9 << 16 >> 16;
  $10 = HEAP32[99500]|0;
  $arrayidx14 = (($10) + ($conv13<<6)|0);
  $linedef15 = ((($li$040)) + 20|0);
  HEAP32[$linedef15>>2] = $arrayidx14;
  $side16 = ((($ml$041)) + 8|0);
  $11 = HEAPU8[$side16>>0]|(HEAPU8[$side16+1>>0]<<8);
  $conv17 = $11 << 16 >> 16;
  $12 = HEAP32[99501]|0;
  $arrayidx19 = ((((($10) + ($conv13<<6)|0)) + 22|0) + ($conv17<<1)|0);
  $13 = HEAP16[$arrayidx19>>1]|0;
  $idxprom20 = $13 << 16 >> 16;
  $arrayidx21 = (($12) + (($idxprom20*20)|0)|0);
  $sidedef = ((($li$040)) + 16|0);
  HEAP32[$sidedef>>2] = $arrayidx21;
  $sector = (((($12) + (($idxprom20*20)|0)|0)) + 16|0);
  $14 = HEAP32[$sector>>2]|0;
  $frontsector = ((($li$040)) + 24|0);
  HEAP32[$frontsector>>2] = $14;
  $flags = (((($10) + ($conv13<<6)|0)) + 16|0);
  $15 = HEAP16[$flags>>1]|0;
  $16 = $15 & 4;
  $tobool = ($16<<16>>16)==(0);
  do {
   if ($tobool) {
    $backsector40 = ((($li$040)) + 28|0);
    HEAP32[$backsector40>>2] = 0;
    $21 = $22;
   } else {
    $xor = $conv17 ^ 1;
    $arrayidx28 = ((((($10) + ($conv13<<6)|0)) + 22|0) + ($xor<<1)|0);
    $17 = HEAP16[$arrayidx28>>1]|0;
    $conv29 = $17 << 16 >> 16;
    $cmp30 = ($17<<16>>16)>(-1);
    $18 = HEAP32[99502]|0;
    $cmp32 = ($18|0)>($conv29|0);
    $or$cond = $cmp30 & $cmp32;
    if ($or$cond) {
     $sector37 = (((($12) + (($conv29*20)|0)|0)) + 16|0);
     $20 = HEAP32[$sector37>>2]|0;
     $backsector38 = ((($li$040)) + 28|0);
     HEAP32[$backsector38>>2] = $20;
     $21 = $22;
     break;
    }
    $19 = HEAP32[99519]|0;
    $tobool$i = ($19|0)==(0);
    if ($tobool$i) {
     dest=398080; stop=dest+88|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     (_I_GetMemoryValue(0,398080,4)|0);
     (_I_GetMemoryValue(4,(398084),4)|0);
     HEAP32[99519] = 1;
     $$pre$pre = HEAP32[99498]|0;
     $$pre = $$pre$pre;
    } else {
     $$pre = $22;
    }
    $backsector = ((($li$040)) + 28|0);
    HEAP32[$backsector>>2] = 398080;
    $21 = $$pre;
   }
  } while(0);
  $inc = (($i$042) + 1)|0;
  $incdec$ptr = ((($li$040)) + 32|0);
  $incdec$ptr42 = ((($ml$041)) + 12|0);
  $cmp = ($inc|0)<($21|0);
  if ($cmp) {
   $22 = $21;$i$042 = $inc;$li$040 = $incdec$ptr;$ml$041 = $incdec$ptr42;
  } else {
   break;
  }
 }
 _W_ReleaseLumpNum($lump);
 return;
}
function _P_LoadSectors($lump) {
 $lump = $lump|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arraydecay = 0, $arraydecay11 = 0, $call = 0, $call1 = 0, $call12 = 0, $call3 = 0, $call8 = 0, $ceilingheight = 0, $ceilingheight7 = 0, $ceilingpic14 = 0, $cmp = 0;
 var $cmp25 = 0, $conv13 = 0, $conv23 = 0, $conv524 = 0, $conv9 = 0, $div = 0, $floorpic10 = 0, $i$026 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr18 = 0, $lightlevel = 0, $lightlevel15 = 0, $ms$027 = 0, $mul = 0, $mul2 = 0, $shl = 0, $shl6 = 0, $special = 0, $special16 = 0;
 var $ss$028 = 0, $tag = 0, $tag17 = 0, $thinglist = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_LumpLength($lump)|0);
 $div = (($call>>>0) / 26)&-1;
 HEAP32[99505] = $div;
 $mul = ($div*88)|0;
 $call1 = (_Z_Malloc($mul,5,0)|0);
 HEAP32[99506] = $call1;
 $0 = HEAP32[99505]|0;
 $mul2 = ($0*88)|0;
 _memset(($call1|0),0,($mul2|0))|0;
 $call3 = (_W_CacheLumpNum($lump,1)|0);
 $1 = HEAP32[99505]|0;
 $cmp25 = ($1|0)>(0);
 if (!($cmp25)) {
  _W_ReleaseLumpNum($lump);
  return;
 }
 $2 = HEAP32[99506]|0;
 $i$026 = 0;$ms$027 = $call3;$ss$028 = $2;
 while(1) {
  $3 = HEAPU8[$ms$027>>0]|(HEAPU8[$ms$027+1>>0]<<8);
  $conv23 = $3&65535;
  $shl = $conv23 << 16;
  HEAP32[$ss$028>>2] = $shl;
  $ceilingheight = ((($ms$027)) + 2|0);
  $4 = HEAPU8[$ceilingheight>>0]|(HEAPU8[$ceilingheight+1>>0]<<8);
  $conv524 = $4&65535;
  $shl6 = $conv524 << 16;
  $ceilingheight7 = ((($ss$028)) + 4|0);
  HEAP32[$ceilingheight7>>2] = $shl6;
  $arraydecay = ((($ms$027)) + 4|0);
  $call8 = (_R_FlatNumForName($arraydecay)|0);
  $conv9 = $call8&65535;
  $floorpic10 = ((($ss$028)) + 8|0);
  HEAP16[$floorpic10>>1] = $conv9;
  $arraydecay11 = ((($ms$027)) + 12|0);
  $call12 = (_R_FlatNumForName($arraydecay11)|0);
  $conv13 = $call12&65535;
  $ceilingpic14 = ((($ss$028)) + 10|0);
  HEAP16[$ceilingpic14>>1] = $conv13;
  $lightlevel = ((($ms$027)) + 20|0);
  $5 = HEAPU8[$lightlevel>>0]|(HEAPU8[$lightlevel+1>>0]<<8);
  $lightlevel15 = ((($ss$028)) + 12|0);
  HEAP16[$lightlevel15>>1] = $5;
  $special = ((($ms$027)) + 22|0);
  $6 = HEAPU8[$special>>0]|(HEAPU8[$special+1>>0]<<8);
  $special16 = ((($ss$028)) + 14|0);
  HEAP16[$special16>>1] = $6;
  $tag = ((($ms$027)) + 24|0);
  $7 = HEAPU8[$tag>>0]|(HEAPU8[$tag+1>>0]<<8);
  $tag17 = ((($ss$028)) + 16|0);
  HEAP16[$tag17>>1] = $7;
  $thinglist = ((($ss$028)) + 72|0);
  HEAP32[$thinglist>>2] = 0;
  $inc = (($i$026) + 1)|0;
  $incdec$ptr = ((($ss$028)) + 88|0);
  $incdec$ptr18 = ((($ms$027)) + 26|0);
  $8 = HEAP32[99505]|0;
  $cmp = ($inc|0)<($8|0);
  if ($cmp) {
   $i$026 = $inc;$ms$027 = $incdec$ptr18;$ss$028 = $incdec$ptr;
  } else {
   break;
  }
 }
 _W_ReleaseLumpNum($lump);
 return;
}
function _P_LoadNodes($lump) {
 $lump = $lump|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx$1 = 0, $arrayidx18 = 0;
 var $arrayidx18$1 = 0, $arrayidx24 = 0, $arrayidx24$1 = 0, $arrayidx24$1$1 = 0, $arrayidx24$142 = 0, $arrayidx24$2 = 0, $arrayidx24$2$1 = 0, $arrayidx24$3 = 0, $arrayidx24$3$1 = 0, $arrayidx29 = 0, $arrayidx29$1 = 0, $arrayidx29$1$1 = 0, $arrayidx29$145 = 0, $arrayidx29$2 = 0, $arrayidx29$2$1 = 0, $arrayidx29$3 = 0, $arrayidx29$3$1 = 0, $call = 0, $call1 = 0, $call2 = 0;
 var $cmp = 0, $cmp37 = 0, $conv1033 = 0, $conv2534 = 0, $conv2534$1 = 0, $conv2534$1$1 = 0, $conv2534$143 = 0, $conv2534$2 = 0, $conv2534$2$1 = 0, $conv2534$3 = 0, $conv2534$3$1 = 0, $conv30 = 0, $conv431 = 0, $conv732 = 0, $div = 0, $dx = 0, $dx9 = 0, $dy = 0, $dy12 = 0, $i$038 = 0;
 var $inc34 = 0, $incdec$ptr = 0, $incdec$ptr35 = 0, $mn$039 = 0, $mul = 0, $no$040 = 0, $shl = 0, $shl11 = 0, $shl26 = 0, $shl26$1 = 0, $shl26$1$1 = 0, $shl26$144 = 0, $shl26$2 = 0, $shl26$2$1 = 0, $shl26$3 = 0, $shl26$3$1 = 0, $shl5 = 0, $shl8 = 0, $y = 0, $y6 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_LumpLength($lump)|0);
 $div = (($call>>>0) / 28)&-1;
 HEAP32[99507] = $div;
 $mul = ($div*52)|0;
 $call1 = (_Z_Malloc($mul,5,0)|0);
 HEAP32[99508] = $call1;
 $call2 = (_W_CacheLumpNum($lump,1)|0);
 $0 = HEAP32[99507]|0;
 $cmp37 = ($0|0)>(0);
 if (!($cmp37)) {
  _W_ReleaseLumpNum($lump);
  return;
 }
 $1 = HEAP32[99508]|0;
 $i$038 = 0;$mn$039 = $call2;$no$040 = $1;
 while(1) {
  $2 = HEAPU8[$mn$039>>0]|(HEAPU8[$mn$039+1>>0]<<8);
  $conv30 = $2&65535;
  $shl = $conv30 << 16;
  HEAP32[$no$040>>2] = $shl;
  $y = ((($mn$039)) + 2|0);
  $3 = HEAPU8[$y>>0]|(HEAPU8[$y+1>>0]<<8);
  $conv431 = $3&65535;
  $shl5 = $conv431 << 16;
  $y6 = ((($no$040)) + 4|0);
  HEAP32[$y6>>2] = $shl5;
  $dx = ((($mn$039)) + 4|0);
  $4 = HEAPU8[$dx>>0]|(HEAPU8[$dx+1>>0]<<8);
  $conv732 = $4&65535;
  $shl8 = $conv732 << 16;
  $dx9 = ((($no$040)) + 8|0);
  HEAP32[$dx9>>2] = $shl8;
  $dy = ((($mn$039)) + 6|0);
  $5 = HEAPU8[$dy>>0]|(HEAPU8[$dy+1>>0]<<8);
  $conv1033 = $5&65535;
  $shl11 = $conv1033 << 16;
  $dy12 = ((($no$040)) + 12|0);
  HEAP32[$dy12>>2] = $shl11;
  $arrayidx = ((($mn$039)) + 24|0);
  $6 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8);
  $arrayidx18 = ((($no$040)) + 48|0);
  HEAP16[$arrayidx18>>1] = $6;
  $arrayidx24 = ((($mn$039)) + 8|0);
  $7 = HEAPU8[$arrayidx24>>0]|(HEAPU8[$arrayidx24+1>>0]<<8);
  $conv2534 = $7&65535;
  $shl26 = $conv2534 << 16;
  $arrayidx29 = ((($no$040)) + 16|0);
  HEAP32[$arrayidx29>>2] = $shl26;
  $arrayidx24$1 = ((($mn$039)) + 10|0);
  $8 = HEAPU8[$arrayidx24$1>>0]|(HEAPU8[$arrayidx24$1+1>>0]<<8);
  $conv2534$1 = $8&65535;
  $shl26$1 = $conv2534$1 << 16;
  $arrayidx29$1 = ((($no$040)) + 20|0);
  HEAP32[$arrayidx29$1>>2] = $shl26$1;
  $arrayidx24$2 = ((($mn$039)) + 12|0);
  $9 = HEAPU8[$arrayidx24$2>>0]|(HEAPU8[$arrayidx24$2+1>>0]<<8);
  $conv2534$2 = $9&65535;
  $shl26$2 = $conv2534$2 << 16;
  $arrayidx29$2 = ((($no$040)) + 24|0);
  HEAP32[$arrayidx29$2>>2] = $shl26$2;
  $arrayidx24$3 = ((($mn$039)) + 14|0);
  $10 = HEAPU8[$arrayidx24$3>>0]|(HEAPU8[$arrayidx24$3+1>>0]<<8);
  $conv2534$3 = $10&65535;
  $shl26$3 = $conv2534$3 << 16;
  $arrayidx29$3 = ((($no$040)) + 28|0);
  HEAP32[$arrayidx29$3>>2] = $shl26$3;
  $arrayidx$1 = ((($mn$039)) + 26|0);
  $11 = HEAPU8[$arrayidx$1>>0]|(HEAPU8[$arrayidx$1+1>>0]<<8);
  $arrayidx18$1 = ((($no$040)) + 50|0);
  HEAP16[$arrayidx18$1>>1] = $11;
  $arrayidx24$142 = ((($mn$039)) + 16|0);
  $12 = HEAPU8[$arrayidx24$142>>0]|(HEAPU8[$arrayidx24$142+1>>0]<<8);
  $conv2534$143 = $12&65535;
  $shl26$144 = $conv2534$143 << 16;
  $arrayidx29$145 = ((($no$040)) + 32|0);
  HEAP32[$arrayidx29$145>>2] = $shl26$144;
  $arrayidx24$1$1 = ((($mn$039)) + 18|0);
  $13 = HEAPU8[$arrayidx24$1$1>>0]|(HEAPU8[$arrayidx24$1$1+1>>0]<<8);
  $conv2534$1$1 = $13&65535;
  $shl26$1$1 = $conv2534$1$1 << 16;
  $arrayidx29$1$1 = ((($no$040)) + 36|0);
  HEAP32[$arrayidx29$1$1>>2] = $shl26$1$1;
  $arrayidx24$2$1 = ((($mn$039)) + 20|0);
  $14 = HEAPU8[$arrayidx24$2$1>>0]|(HEAPU8[$arrayidx24$2$1+1>>0]<<8);
  $conv2534$2$1 = $14&65535;
  $shl26$2$1 = $conv2534$2$1 << 16;
  $arrayidx29$2$1 = ((($no$040)) + 40|0);
  HEAP32[$arrayidx29$2$1>>2] = $shl26$2$1;
  $arrayidx24$3$1 = ((($mn$039)) + 22|0);
  $15 = HEAPU8[$arrayidx24$3$1>>0]|(HEAPU8[$arrayidx24$3$1+1>>0]<<8);
  $conv2534$3$1 = $15&65535;
  $shl26$3$1 = $conv2534$3$1 << 16;
  $arrayidx29$3$1 = ((($no$040)) + 44|0);
  HEAP32[$arrayidx29$3$1>>2] = $shl26$3$1;
  $inc34 = (($i$038) + 1)|0;
  $incdec$ptr = ((($no$040)) + 52|0);
  $incdec$ptr35 = ((($mn$039)) + 28|0);
  $16 = HEAP32[99507]|0;
  $cmp = ($inc34|0)<($16|0);
  if ($cmp) {
   $i$038 = $inc34;$mn$039 = $incdec$ptr35;$no$040 = $incdec$ptr;
  } else {
   break;
  }
 }
 _W_ReleaseLumpNum($lump);
 return;
}
function _P_LoadLineDefs($lump) {
 $lump = $lump|0;
 var $$sink = 0, $$sink65 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx37 = 0, $arrayidx55 = 0, $arrayidx67 = 0, $arrayidx69 = 0, $arrayidx71 = 0, $arrayidx73 = 0, $backsector = 0, $backsector98 = 0, $call = 0;
 var $call1 = 0, $call24 = 0, $call3 = 0, $cmp = 0, $cmp25 = 0, $cmp34 = 0, $cmp51 = 0, $cmp61 = 0, $cmp76 = 0, $cmp89 = 0, $conv = 0, $conv88 = 0, $div = 0, $dx = 0, $dy = 0, $flags = 0, $flags4 = 0, $frontsector = 0, $frontsector84 = 0, $i$064 = 0;
 var $idxprom = 0, $idxprom10 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr100 = 0, $ld$062 = 0, $mld$063 = 0, $mul = 0, $mul2 = 0, $sector = 0, $sector96 = 0, $slopetype = 0, $slopetype20 = 0, $slopetype27 = 0, $spec$select = 0, $special = 0, $special5 = 0, $storemerge66 = 0, $sub = 0, $sub15 = 0;
 var $tag = 0, $tag6 = 0, $tobool = 0, $tobool18 = 0, $v212 = 0, $v29 = 0, $x$val = 0, $x13$val = 0, $y = 0, $y$val = 0, $y14 = 0, $y14$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_LumpLength($lump)|0);
 $div = (($call>>>0) / 14)&-1;
 HEAP32[99509] = $div;
 $mul = $div << 6;
 $call1 = (_Z_Malloc($mul,5,0)|0);
 HEAP32[99500] = $call1;
 $0 = HEAP32[99509]|0;
 $mul2 = $0 << 6;
 _memset(($call1|0),0,($mul2|0))|0;
 $call3 = (_W_CacheLumpNum($lump,1)|0);
 $1 = HEAP32[99509]|0;
 $cmp61 = ($1|0)>(0);
 if (!($cmp61)) {
  _W_ReleaseLumpNum($lump);
  return;
 }
 $2 = HEAP32[99500]|0;
 $i$064 = 0;$ld$062 = $2;$mld$063 = $call3;
 while(1) {
  $flags = ((($mld$063)) + 4|0);
  $3 = HEAPU8[$flags>>0]|(HEAPU8[$flags+1>>0]<<8);
  $flags4 = ((($ld$062)) + 16|0);
  HEAP16[$flags4>>1] = $3;
  $special = ((($mld$063)) + 6|0);
  $4 = HEAPU8[$special>>0]|(HEAPU8[$special+1>>0]<<8);
  $special5 = ((($ld$062)) + 18|0);
  HEAP16[$special5>>1] = $4;
  $tag = ((($mld$063)) + 8|0);
  $5 = HEAPU8[$tag>>0]|(HEAPU8[$tag+1>>0]<<8);
  $tag6 = ((($ld$062)) + 20|0);
  HEAP16[$tag6>>1] = $5;
  $6 = HEAP32[99497]|0;
  $7 = HEAPU8[$mld$063>>0]|(HEAPU8[$mld$063+1>>0]<<8);
  $idxprom = $7 << 16 >> 16;
  $arrayidx = (($6) + ($idxprom<<3)|0);
  HEAP32[$ld$062>>2] = $arrayidx;
  $8 = HEAP32[99497]|0;
  $v29 = ((($mld$063)) + 2|0);
  $9 = HEAPU8[$v29>>0]|(HEAPU8[$v29+1>>0]<<8);
  $idxprom10 = $9 << 16 >> 16;
  $arrayidx11 = (($8) + ($idxprom10<<3)|0);
  $v212 = ((($ld$062)) + 4|0);
  HEAP32[$v212>>2] = $arrayidx11;
  $10 = HEAP32[$arrayidx11>>2]|0;
  $11 = HEAP32[$arrayidx>>2]|0;
  $sub = (($10) - ($11))|0;
  $dx = ((($ld$062)) + 8|0);
  HEAP32[$dx>>2] = $sub;
  $y = (((($8) + ($idxprom10<<3)|0)) + 4|0);
  $12 = HEAP32[$y>>2]|0;
  $y14 = (((($6) + ($idxprom<<3)|0)) + 4|0);
  $13 = HEAP32[$y14>>2]|0;
  $sub15 = (($12) - ($13))|0;
  $dy = ((($ld$062)) + 12|0);
  HEAP32[$dy>>2] = $sub15;
  $tobool = ($sub|0)==(0);
  do {
   if ($tobool) {
    $slopetype = ((($ld$062)) + 44|0);
    HEAP32[$slopetype>>2] = 1;
   } else {
    $tobool18 = ($sub15|0)==(0);
    if ($tobool18) {
     $slopetype20 = ((($ld$062)) + 44|0);
     HEAP32[$slopetype20>>2] = 0;
     break;
    }
    $call24 = (_FixedDiv($sub15,$sub)|0);
    $cmp25 = ($call24|0)>(0);
    $slopetype27 = ((($ld$062)) + 44|0);
    if ($cmp25) {
     HEAP32[$slopetype27>>2] = 2;
     break;
    } else {
     HEAP32[$slopetype27>>2] = 3;
     break;
    }
   }
  } while(0);
  $14 = HEAP32[$arrayidx>>2]|0;
  $15 = HEAP32[$arrayidx11>>2]|0;
  $cmp34 = ($14|0)<($15|0);
  $arrayidx37 = ((($ld$062)) + 36|0);
  $spec$select = $cmp34 ? $14 : $15;
  HEAP32[$arrayidx37>>2] = $spec$select;
  $x$val = HEAP32[$arrayidx11>>2]|0;
  $x13$val = HEAP32[$arrayidx>>2]|0;
  $$sink = $cmp34 ? $x$val : $x13$val;
  $16 = ((($ld$062)) + 40|0);
  HEAP32[$16>>2] = $$sink;
  $17 = HEAP32[$y14>>2]|0;
  $18 = HEAP32[$y>>2]|0;
  $cmp51 = ($17|0)<($18|0);
  $arrayidx55 = ((($ld$062)) + 32|0);
  $storemerge66 = $cmp51 ? $17 : $18;
  HEAP32[$arrayidx55>>2] = $storemerge66;
  $y$val = HEAP32[$y>>2]|0;
  $y14$val = HEAP32[$y14>>2]|0;
  $$sink65 = $cmp51 ? $y$val : $y14$val;
  $19 = ((($ld$062)) + 28|0);
  HEAP32[$19>>2] = $$sink65;
  $arrayidx67 = ((($mld$063)) + 10|0);
  $20 = HEAPU8[$arrayidx67>>0]|(HEAPU8[$arrayidx67+1>>0]<<8);
  $arrayidx69 = ((($ld$062)) + 22|0);
  HEAP16[$arrayidx69>>1] = $20;
  $arrayidx71 = ((($mld$063)) + 12|0);
  $21 = HEAPU8[$arrayidx71>>0]|(HEAPU8[$arrayidx71+1>>0]<<8);
  $arrayidx73 = ((($ld$062)) + 24|0);
  HEAP16[$arrayidx73>>1] = $21;
  $cmp76 = ($20<<16>>16)==(-1);
  if ($cmp76) {
   $frontsector84 = ((($ld$062)) + 48|0);
   HEAP32[$frontsector84>>2] = 0;
  } else {
   $conv = $20 << 16 >> 16;
   $22 = HEAP32[99501]|0;
   $sector = (((($22) + (($conv*20)|0)|0)) + 16|0);
   $23 = HEAP32[$sector>>2]|0;
   $frontsector = ((($ld$062)) + 48|0);
   HEAP32[$frontsector>>2] = $23;
  }
  $cmp89 = ($21<<16>>16)==(-1);
  if ($cmp89) {
   $backsector98 = ((($ld$062)) + 52|0);
   HEAP32[$backsector98>>2] = 0;
  } else {
   $conv88 = $21 << 16 >> 16;
   $24 = HEAP32[99501]|0;
   $sector96 = (((($24) + (($conv88*20)|0)|0)) + 16|0);
   $25 = HEAP32[$sector96>>2]|0;
   $backsector = ((($ld$062)) + 52|0);
   HEAP32[$backsector>>2] = $25;
  }
  $inc = (($i$064) + 1)|0;
  $incdec$ptr = ((($mld$063)) + 14|0);
  $incdec$ptr100 = ((($ld$062)) + 64|0);
  $26 = HEAP32[99509]|0;
  $cmp = ($inc|0)<($26|0);
  if ($cmp) {
   $i$064 = $inc;$ld$062 = $incdec$ptr100;$mld$063 = $incdec$ptr;
  } else {
   break;
  }
 }
 _W_ReleaseLumpNum($lump);
 return;
}
function _P_LoadSideDefs($lump) {
 $lump = $lump|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arraydecay = 0, $arraydecay11 = 0, $arraydecay15 = 0, $arrayidx = 0, $bottomtexture14 = 0, $call = 0, $call1 = 0, $call12 = 0, $call16 = 0, $call3 = 0, $call8 = 0, $cmp = 0;
 var $cmp22 = 0, $conv13 = 0, $conv17 = 0, $conv20 = 0, $conv521 = 0, $conv9 = 0, $div = 0, $i$023 = 0, $idxprom = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr20 = 0, $midtexture18 = 0, $msd$024 = 0, $mul = 0, $mul2 = 0, $rowoffset = 0, $rowoffset7 = 0, $sd$025 = 0, $sector = 0;
 var $sector19 = 0, $shl = 0, $shl6 = 0, $toptexture10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_LumpLength($lump)|0);
 $div = (($call>>>0) / 30)&-1;
 HEAP32[99502] = $div;
 $mul = ($div*20)|0;
 $call1 = (_Z_Malloc($mul,5,0)|0);
 HEAP32[99501] = $call1;
 $0 = HEAP32[99502]|0;
 $mul2 = ($0*20)|0;
 _memset(($call1|0),0,($mul2|0))|0;
 $call3 = (_W_CacheLumpNum($lump,1)|0);
 $1 = HEAP32[99502]|0;
 $cmp22 = ($1|0)>(0);
 if (!($cmp22)) {
  _W_ReleaseLumpNum($lump);
  return;
 }
 $2 = HEAP32[99501]|0;
 $i$023 = 0;$msd$024 = $call3;$sd$025 = $2;
 while(1) {
  $3 = HEAPU8[$msd$024>>0]|(HEAPU8[$msd$024+1>>0]<<8);
  $conv20 = $3&65535;
  $shl = $conv20 << 16;
  HEAP32[$sd$025>>2] = $shl;
  $rowoffset = ((($msd$024)) + 2|0);
  $4 = HEAPU8[$rowoffset>>0]|(HEAPU8[$rowoffset+1>>0]<<8);
  $conv521 = $4&65535;
  $shl6 = $conv521 << 16;
  $rowoffset7 = ((($sd$025)) + 4|0);
  HEAP32[$rowoffset7>>2] = $shl6;
  $arraydecay = ((($msd$024)) + 4|0);
  $call8 = (_R_TextureNumForName($arraydecay)|0);
  $conv9 = $call8&65535;
  $toptexture10 = ((($sd$025)) + 8|0);
  HEAP16[$toptexture10>>1] = $conv9;
  $arraydecay11 = ((($msd$024)) + 12|0);
  $call12 = (_R_TextureNumForName($arraydecay11)|0);
  $conv13 = $call12&65535;
  $bottomtexture14 = ((($sd$025)) + 10|0);
  HEAP16[$bottomtexture14>>1] = $conv13;
  $arraydecay15 = ((($msd$024)) + 20|0);
  $call16 = (_R_TextureNumForName($arraydecay15)|0);
  $conv17 = $call16&65535;
  $midtexture18 = ((($sd$025)) + 12|0);
  HEAP16[$midtexture18>>1] = $conv17;
  $5 = HEAP32[99506]|0;
  $sector = ((($msd$024)) + 28|0);
  $6 = HEAPU8[$sector>>0]|(HEAPU8[$sector+1>>0]<<8);
  $idxprom = $6 << 16 >> 16;
  $arrayidx = (($5) + (($idxprom*88)|0)|0);
  $sector19 = ((($sd$025)) + 16|0);
  HEAP32[$sector19>>2] = $arrayidx;
  $inc = (($i$023) + 1)|0;
  $incdec$ptr = ((($msd$024)) + 30|0);
  $incdec$ptr20 = ((($sd$025)) + 20|0);
  $7 = HEAP32[99502]|0;
  $cmp = ($inc|0)<($7|0);
  if ($cmp) {
   $i$023 = $inc;$msd$024 = $incdec$ptr;$sd$025 = $incdec$ptr20;
  } else {
   break;
  }
 }
 _W_ReleaseLumpNum($lump);
 return;
}
function _P_GroupLines() {
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add106 = 0, $add84 = 0, $add89 = 0, $arrayidx103 = 0, $arrayidx115 = 0, $arrayidx126 = 0, $arrayidx33 = 0, $arrayidx40 = 0, $arrayidx54 = 0, $arrayidx69 = 0;
 var $arrayidx79 = 0, $arrayidx80 = 0, $arrayidx83 = 0, $arrayidx92 = 0, $backsector = 0, $backsector44 = 0, $bbox = 0, $call = 0, $cmp = 0, $cmp10 = 0, $cmp108 = 0, $cmp20 = 0, $cmp2077 = 0, $cmp31 = 0, $cmp3175 = 0, $cmp35 = 0, $cmp4 = 0, $cmp45 = 0, $cmp480 = 0, $cmp49 = 0;
 var $cmp62 = 0, $cmp66 = 0, $cmp6670 = 0, $cmp84 = 0, $cmp90 = 0, $cond = 0, $cond101 = 0, $cond113 = 0, $cond124 = 0, $div = 0, $div85 = 0, $firstline = 0, $frontsector = 0, $frontsector34 = 0, $i$086 = 0, $i$182 = 0, $i$278 = 0, $i$376 = 0, $i$474 = 0, $idxprom = 0;
 var $inc = 0, $inc128 = 0, $inc13 = 0, $inc14 = 0, $inc1483 = 0, $inc16 = 0, $inc28 = 0, $inc42 = 0, $inc56 = 0, $inc59 = 0, $inc6 = 0, $inc7 = 0, $inc77 = 0, $incdec$ptr = 0, $incdec$ptr129 = 0, $incdec$ptr17 = 0, $j$071 = 0, $li$081 = 0, $linebuffer$079 = 0, $linecount = 0;
 var $linecount12 = 0, $linecount24 = 0, $linecount39 = 0, $linecount53 = 0, $linecount65 = 0, $lines = 0, $lines38 = 0, $lines52 = 0, $lines68 = 0, $mul = 0, $sector$073 = 0, $sector1 = 0, $shr = 0, $shr107 = 0, $shr119 = 0, $shr96 = 0, $sidedef = 0, $ss$085 = 0, $sub = 0, $sub105 = 0;
 var $sub110 = 0, $sub117 = 0, $sub118 = 0, $sub91 = 0, $sub94 = 0, $sub95 = 0, $tobool = 0, $v2 = 0, $x81 = 0, $y = 0, $y75 = 0, $y87 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $bbox = sp;
 $0 = HEAP32[99503]|0;
 $cmp84 = ($0|0)>(0);
 if ($cmp84) {
  $1 = HEAP32[99504]|0;
  $i$086 = 0;$ss$085 = $1;
  while(1) {
   $2 = HEAP32[99499]|0;
   $firstline = ((($ss$085)) + 6|0);
   $3 = HEAP16[$firstline>>1]|0;
   $idxprom = $3 << 16 >> 16;
   $sidedef = (((($2) + ($idxprom<<5)|0)) + 16|0);
   $4 = HEAP32[$sidedef>>2]|0;
   $sector1 = ((($4)) + 16|0);
   $5 = HEAP32[$sector1>>2]|0;
   HEAP32[$ss$085>>2] = $5;
   $inc = (($i$086) + 1)|0;
   $incdec$ptr = ((($ss$085)) + 8|0);
   $cmp = ($inc|0)<($0|0);
   if ($cmp) {
    $i$086 = $inc;$ss$085 = $incdec$ptr;
   } else {
    break;
   }
  }
 }
 $6 = HEAP32[99500]|0;
 HEAP32[99542] = 0;
 $7 = HEAP32[99509]|0;
 $cmp480 = ($7|0)>(0);
 if ($cmp480) {
  $8 = 0;$i$182 = 0;$li$081 = $6;
  while(1) {
   $inc6 = (($8) + 1)|0;
   $frontsector = ((($li$081)) + 48|0);
   $9 = HEAP32[$frontsector>>2]|0;
   $linecount = ((($9)) + 80|0);
   $10 = HEAP32[$linecount>>2]|0;
   $inc7 = (($10) + 1)|0;
   HEAP32[$linecount>>2] = $inc7;
   $backsector = ((($li$081)) + 52|0);
   $11 = HEAP32[$backsector>>2]|0;
   $tobool = ($11|0)==(0|0);
   if ($tobool) {
    $inc1483 = $inc6;
   } else {
    $cmp10 = ($11|0)==($9|0);
    $linecount12 = ((($11)) + 80|0);
    if ($cmp10) {
     $inc1483 = $inc6;
    } else {
     $inc14 = (($8) + 2)|0;
     $12 = HEAP32[$linecount12>>2]|0;
     $inc13 = (($12) + 1)|0;
     HEAP32[$linecount12>>2] = $inc13;
     $inc1483 = $inc14;
    }
   }
   $inc16 = (($i$182) + 1)|0;
   $incdec$ptr17 = ((($li$081)) + 64|0);
   $cmp4 = ($inc16|0)<($7|0);
   if ($cmp4) {
    $8 = $inc1483;$i$182 = $inc16;$li$081 = $incdec$ptr17;
   } else {
    break;
   }
  }
  HEAP32[99542] = $inc1483;
  $$lcssa = $inc1483;
 } else {
  $$lcssa = 0;
 }
 $mul = $$lcssa << 2;
 $call = (_Z_Malloc($mul,5,0)|0);
 $13 = HEAP32[99505]|0;
 $cmp2077 = ($13|0)>(0);
 if ($cmp2077) {
  $14 = HEAP32[99506]|0;
  $i$278 = 0;$linebuffer$079 = $call;
  while(1) {
   $lines = (((($14) + (($i$278*88)|0)|0)) + 84|0);
   HEAP32[$lines>>2] = $linebuffer$079;
   $linecount24 = (((($14) + (($i$278*88)|0)|0)) + 80|0);
   $15 = HEAP32[$linecount24>>2]|0;
   $add$ptr = (($linebuffer$079) + ($15<<2)|0);
   HEAP32[$linecount24>>2] = 0;
   $inc28 = (($i$278) + 1)|0;
   $cmp20 = ($inc28|0)<($13|0);
   if ($cmp20) {
    $i$278 = $inc28;$linebuffer$079 = $add$ptr;
   } else {
    break;
   }
  }
 }
 $16 = HEAP32[99509]|0;
 $cmp3175 = ($16|0)>(0);
 if ($cmp3175) {
  $i$376 = 0;
  while(1) {
   $17 = HEAP32[99500]|0;
   $arrayidx33 = (($17) + ($i$376<<6)|0);
   $frontsector34 = (((($17) + ($i$376<<6)|0)) + 48|0);
   $18 = HEAP32[$frontsector34>>2]|0;
   $cmp35 = ($18|0)==(0|0);
   if (!($cmp35)) {
    $lines38 = ((($18)) + 84|0);
    $19 = HEAP32[$lines38>>2]|0;
    $linecount39 = ((($18)) + 80|0);
    $20 = HEAP32[$linecount39>>2]|0;
    $arrayidx40 = (($19) + ($20<<2)|0);
    HEAP32[$arrayidx40>>2] = $arrayidx33;
    $inc42 = (($20) + 1)|0;
    HEAP32[$linecount39>>2] = $inc42;
   }
   $backsector44 = (((($17) + ($i$376<<6)|0)) + 52|0);
   $21 = HEAP32[$backsector44>>2]|0;
   $cmp45 = ($21|0)==(0|0);
   if (!($cmp45)) {
    $22 = HEAP32[$frontsector34>>2]|0;
    $cmp49 = ($22|0)==($21|0);
    if (!($cmp49)) {
     $lines52 = ((($21)) + 84|0);
     $23 = HEAP32[$lines52>>2]|0;
     $linecount53 = ((($21)) + 80|0);
     $24 = HEAP32[$linecount53>>2]|0;
     $arrayidx54 = (($23) + ($24<<2)|0);
     HEAP32[$arrayidx54>>2] = $arrayidx33;
     $inc56 = (($24) + 1)|0;
     HEAP32[$linecount53>>2] = $inc56;
    }
   }
   $inc59 = (($i$376) + 1)|0;
   $cmp31 = ($inc59|0)<($16|0);
   if ($cmp31) {
    $i$376 = $inc59;
   } else {
    break;
   }
  }
 }
 if (!($cmp2077)) {
  STACKTOP = sp;return;
 }
 $25 = HEAP32[99506]|0;
 $arrayidx79 = ((($bbox)) + 12|0);
 $arrayidx80 = ((($bbox)) + 8|0);
 $arrayidx83 = ((($bbox)) + 4|0);
 $i$474 = 0;$sector$073 = $25;
 while(1) {
  _M_ClearBox($bbox);
  $linecount65 = ((($sector$073)) + 80|0);
  $26 = HEAP32[$linecount65>>2]|0;
  $cmp6670 = ($26|0)>(0);
  if ($cmp6670) {
   $lines68 = ((($sector$073)) + 84|0);
   $j$071 = 0;
   while(1) {
    $27 = HEAP32[$lines68>>2]|0;
    $arrayidx69 = (($27) + ($j$071<<2)|0);
    $28 = HEAP32[$arrayidx69>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    $30 = HEAP32[$29>>2]|0;
    $y = ((($29)) + 4|0);
    $31 = HEAP32[$y>>2]|0;
    _M_AddToBox($bbox,$30,$31);
    $v2 = ((($28)) + 4|0);
    $32 = HEAP32[$v2>>2]|0;
    $33 = HEAP32[$32>>2]|0;
    $y75 = ((($32)) + 4|0);
    $34 = HEAP32[$y75>>2]|0;
    _M_AddToBox($bbox,$33,$34);
    $inc77 = (($j$071) + 1)|0;
    $35 = HEAP32[$linecount65>>2]|0;
    $cmp66 = ($inc77|0)<($35|0);
    if ($cmp66) {
     $j$071 = $inc77;
    } else {
     break;
    }
   }
  }
  $36 = HEAP32[$arrayidx79>>2]|0;
  $37 = HEAP32[$arrayidx80>>2]|0;
  $add = (($37) + ($36))|0;
  $div = (($add|0) / 2)&-1;
  $x81 = ((($sector$073)) + 56|0);
  HEAP32[$x81>>2] = $div;
  $38 = HEAP32[$bbox>>2]|0;
  $39 = HEAP32[$arrayidx83>>2]|0;
  $add84 = (($39) + ($38))|0;
  $div85 = (($add84|0) / 2)&-1;
  $y87 = ((($sector$073)) + 60|0);
  HEAP32[$y87>>2] = $div85;
  $40 = HEAP32[99513]|0;
  $sub = (($38) + 2097152)|0;
  $add89 = (($sub) - ($40))|0;
  $shr = $add89 >> 23;
  $41 = HEAP32[99515]|0;
  $cmp90 = ($shr|0)<($41|0);
  $sub91 = (($41) + -1)|0;
  $cond = $cmp90 ? $shr : $sub91;
  $arrayidx92 = ((($sector$073)) + 28|0);
  HEAP32[$arrayidx92>>2] = $cond;
  $sub94 = (($39) + -2097152)|0;
  $sub95 = (($sub94) - ($40))|0;
  $shr96 = $sub95 >> 23;
  $42 = ($shr96|0)>(0);
  $cond101 = $42 ? $shr96 : 0;
  $arrayidx103 = ((($sector$073)) + 32|0);
  HEAP32[$arrayidx103>>2] = $cond101;
  $43 = HEAP32[99512]|0;
  $sub105 = (($36) + 2097152)|0;
  $add106 = (($sub105) - ($43))|0;
  $shr107 = $add106 >> 23;
  $44 = HEAP32[99514]|0;
  $cmp108 = ($shr107|0)<($44|0);
  $sub110 = (($44) + -1)|0;
  $cond113 = $cmp108 ? $shr107 : $sub110;
  $arrayidx115 = ((($sector$073)) + 40|0);
  HEAP32[$arrayidx115>>2] = $cond113;
  $sub117 = (($37) + -2097152)|0;
  $sub118 = (($sub117) - ($43))|0;
  $shr119 = $sub118 >> 23;
  $45 = ($shr119|0)>(0);
  $cond124 = $45 ? $shr119 : 0;
  $arrayidx126 = ((($sector$073)) + 36|0);
  HEAP32[$arrayidx126>>2] = $cond124;
  $inc128 = (($i$474) + 1)|0;
  $incdec$ptr129 = ((($sector$073)) + 88|0);
  $46 = HEAP32[99505]|0;
  $cmp62 = ($inc128|0)<($46|0);
  if ($cmp62) {
   $i$474 = $inc128;$sector$073 = $incdec$ptr129;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _P_SetupLevel($episode,$map,$playermask,$skill) {
 $episode = $episode|0;
 $map = $map|0;
 $playermask = $playermask|0;
 $skill = $skill|0;
 var $$$i$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0;
 var $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i43 = 0, $add1$i$i = 0, $add13 = 0, $add20 = 0, $add21 = 0, $add22 = 0, $add23 = 0, $add24 = 0, $add25 = 0, $add26 = 0, $add27 = 0, $add28 = 0, $add29 = 0, $angle$i = 0, $angle9$i = 0, $arrayidx$i$i = 0, $arrayidx11 = 0, $arrayidx12 = 0;
 var $arrayidx15 = 0, $arrayidx16 = 0, $arrayidx4$i = 0, $arrayidx7$i = 0, $arrayidx9$i = 0, $arrayinit$element$i$i = 0, $arrayinit$element2$i$i = 0, $arrayinit$element3$i$i = 0, $call$i = 0, $call$i23 = 0, $call$i27 = 0, $call$i39 = 0, $call$i44 = 0, $call1$i = 0, $call1$i25 = 0, $call1$i30 = 0, $call1$i41 = 0, $call1$i45 = 0, $call12$i = 0, $call19 = 0;
 var $call2$i = 0, $call2$i31 = 0, $call2$i42 = 0, $call9$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i40 = 0, $cmp$i54 = 0, $cmp12$i = 0, $cmp14$i = 0, $cmp14$i$i = 0, $cmp2$i = 0, $cmp4 = 0, $cmp4$i$i = 0, $cmp5 = 0, $cmp7$i$i = 0, $conv = 0, $conv$i = 0, $conv$i$i = 0, $conv10$i = 0;
 var $conv11$i = 0, $conv12$i = 0, $conv14 = 0, $conv413$i = 0, $conv512$i = 0, $conv8$i = 0, $dest$016$i$i = 0, $div$i = 0, $div$i$i = 0, $div$i28 = 0, $div$i38 = 0, $div$i46 = 0, $exitcond = 0, $firstline$i = 0, $firstseg$i = 0, $i$013$i = 0, $i$015$i = 0, $i$015$i$i = 0, $i$017$i = 0, $inc$i = 0;
 var $inc$i$i = 0, $inc$i33 = 0, $inc$i52 = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i34 = 0, $incdec$ptr$i53 = 0, $incdec$ptr4$i = 0, $incdec$ptr7$i = 0, $li$017$i = 0, $lumpname = 0, $ml$016$i = 0, $ms$014$i = 0, $mt$016$i = 0, $mul$i = 0, $mul$i$i = 0, $mul$i24 = 0, $mul$i29 = 0, $mul$i37 = 0, $mul11$i = 0;
 var $mul3$i = 0, $mul5$i$i = 0, $numlines$i = 0, $options$i = 0, $options12$i = 0, $rejectpad$i$i = 0, $rem$i$i = 0, $shl$i = 0, $shl$i26 = 0, $shl5$i = 0, $shl6$i = 0, $shr$i$i = 0, $spawnthing$i = 0, $ss$015$i = 0, $sub$i = 0, $sub$i$i = 0, $tobool = 0, $tobool$i$i = 0, $tobool36 = 0, $tobool36$1 = 0;
 var $tobool36$2 = 0, $tobool36$3 = 0, $tobool44 = 0, $type10$phi$trans$insert$i = 0, $type11$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr7 = 0, $viewz = 0, $y$i = 0, $y$i51 = 0, $y6$i = 0, $y8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer4 = sp + 32|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $spawnthing$i = sp + 40|0;
 $rejectpad$i$i = sp;
 $lumpname = sp + 50|0;
 HEAP32[(396424)>>2] = 0;
 HEAP32[99151] = 0;
 HEAP32[99150] = 0;
 HEAP32[99149] = 0;
 HEAP32[(396428)>>2] = 180;
 HEAP32[(181896)>>2] = 0;
 HEAP32[(181900)>>2] = 0;
 HEAP32[(181892)>>2] = 0;
 HEAP32[(182184)>>2] = 0;
 HEAP32[(182188)>>2] = 0;
 HEAP32[(182180)>>2] = 0;
 HEAP32[(182472)>>2] = 0;
 HEAP32[(182476)>>2] = 0;
 HEAP32[(182468)>>2] = 0;
 HEAP32[(182760)>>2] = 0;
 HEAP32[(182764)>>2] = 0;
 HEAP32[(182756)>>2] = 0;
 $0 = HEAP32[99076]|0;
 $viewz = (((181680 + (($0*288)|0)|0)) + 24|0);
 HEAP32[$viewz>>2] = 1;
 _S_Start();
 _Z_FreeTags(5,6);
 _P_InitThinkers();
 $1 = HEAP32[32140]|0;
 $cmp4 = ($1|0)==(2);
 do {
  if ($cmp4) {
   $cmp5 = ($map|0)<(10);
   if ($cmp5) {
    HEAP32[$vararg_buffer>>2] = $map;
    (_snprintf($lumpname,9,153194,$vararg_buffer)|0);
    break;
   } else {
    HEAP32[$vararg_buffer1>>2] = $map;
    (_snprintf($lumpname,9,153201,$vararg_buffer1)|0);
    break;
   }
  } else {
   HEAP8[$lumpname>>0] = 69;
   $add = (($episode) + 48)|0;
   $conv = $add&255;
   $arrayidx11 = ((($lumpname)) + 1|0);
   HEAP8[$arrayidx11>>0] = $conv;
   $arrayidx12 = ((($lumpname)) + 2|0);
   HEAP8[$arrayidx12>>0] = 77;
   $add13 = (($map) + 48)|0;
   $conv14 = $add13&255;
   $arrayidx15 = ((($lumpname)) + 3|0);
   HEAP8[$arrayidx15>>0] = $conv14;
   $arrayidx16 = ((($lumpname)) + 4|0);
   HEAP8[$arrayidx16>>0] = 0;
  }
 } while(0);
 $call19 = (_W_GetNumForName($lumpname)|0);
 HEAP32[99557] = 0;
 $add20 = (($call19) + 10)|0;
 $call$i = (_W_LumpLength($add20)|0);
 $call1$i = (_Z_Malloc($call$i,5,0)|0);
 HEAP32[99510] = $call1$i;
 _W_ReadLump($add20,$call1$i);
 $2 = HEAP32[99510]|0;
 $add$ptr$i = ((($2)) + 8|0);
 HEAP32[99511] = $add$ptr$i;
 $3 = HEAP16[$2>>1]|0;
 $conv11$i = $3&65535;
 $shl$i = $conv11$i << 16;
 HEAP32[99512] = $shl$i;
 $arrayidx4$i = ((($2)) + 2|0);
 $4 = HEAP16[$arrayidx4$i>>1]|0;
 $conv512$i = $4&65535;
 $shl6$i = $conv512$i << 16;
 HEAP32[99513] = $shl6$i;
 $arrayidx7$i = ((($2)) + 4|0);
 $5 = HEAP16[$arrayidx7$i>>1]|0;
 $conv8$i = $5 << 16 >> 16;
 HEAP32[99514] = $conv8$i;
 $arrayidx9$i = ((($2)) + 6|0);
 $6 = HEAP16[$arrayidx9$i>>1]|0;
 $conv10$i = $6 << 16 >> 16;
 HEAP32[99515] = $conv10$i;
 $mul$i = $conv8$i << 2;
 $mul11$i = Math_imul($mul$i, $conv10$i)|0;
 $call12$i = (_Z_Malloc($mul11$i,5,0)|0);
 HEAP32[99516] = $call12$i;
 _memset(($call12$i|0),0,($mul11$i|0))|0;
 $add21 = (($call19) + 4)|0;
 $call$i23 = (_W_LumpLength($add21)|0);
 $div$i = $call$i23 >>> 2;
 HEAP32[99496] = $div$i;
 $mul$i24 = $div$i << 3;
 $call1$i25 = (_Z_Malloc($mul$i24,5,0)|0);
 HEAP32[99497] = $call1$i25;
 $call2$i = (_W_CacheLumpNum($add21,1)|0);
 $7 = HEAP32[99496]|0;
 $cmp14$i = ($7|0)>(0);
 if ($cmp14$i) {
  $8 = HEAP32[99497]|0;
  $i$015$i = 0;$li$017$i = $8;$ml$016$i = $call2$i;
  while(1) {
   $9 = HEAPU8[$ml$016$i>>0]|(HEAPU8[$ml$016$i+1>>0]<<8);
   $conv12$i = $9&65535;
   $shl$i26 = $conv12$i << 16;
   HEAP32[$li$017$i>>2] = $shl$i26;
   $y$i = ((($ml$016$i)) + 2|0);
   $10 = HEAPU8[$y$i>>0]|(HEAPU8[$y$i+1>>0]<<8);
   $conv413$i = $10&65535;
   $shl5$i = $conv413$i << 16;
   $y6$i = ((($li$017$i)) + 4|0);
   HEAP32[$y6$i>>2] = $shl5$i;
   $inc$i = (($i$015$i) + 1)|0;
   $incdec$ptr$i = ((($li$017$i)) + 8|0);
   $incdec$ptr7$i = ((($ml$016$i)) + 4|0);
   $11 = HEAP32[99496]|0;
   $cmp$i = ($inc$i|0)<($11|0);
   if ($cmp$i) {
    $i$015$i = $inc$i;$li$017$i = $incdec$ptr$i;$ml$016$i = $incdec$ptr7$i;
   } else {
    break;
   }
  }
 }
 _W_ReleaseLumpNum($add21);
 $add22 = (($call19) + 8)|0;
 _P_LoadSectors($add22);
 $add23 = (($call19) + 3)|0;
 _P_LoadSideDefs($add23);
 $add24 = (($call19) + 2)|0;
 _P_LoadLineDefs($add24);
 $add25 = (($call19) + 6)|0;
 $call$i27 = (_W_LumpLength($add25)|0);
 $div$i28 = $call$i27 >>> 2;
 HEAP32[99503] = $div$i28;
 $mul$i29 = $div$i28 << 3;
 $call1$i30 = (_Z_Malloc($mul$i29,5,0)|0);
 HEAP32[99504] = $call1$i30;
 $call2$i31 = (_W_CacheLumpNum($add25,1)|0);
 $12 = HEAP32[99504]|0;
 $13 = HEAP32[99503]|0;
 $mul3$i = $13 << 3;
 _memset(($12|0),0,($mul3$i|0))|0;
 $14 = HEAP32[99503]|0;
 $cmp12$i = ($14|0)>(0);
 if ($cmp12$i) {
  $15 = HEAP32[99504]|0;
  $i$013$i = 0;$ms$014$i = $call2$i31;$ss$015$i = $15;
  while(1) {
   $16 = HEAPU8[$ms$014$i>>0]|(HEAPU8[$ms$014$i+1>>0]<<8);
   $numlines$i = ((($ss$015$i)) + 4|0);
   HEAP16[$numlines$i>>1] = $16;
   $firstseg$i = ((($ms$014$i)) + 2|0);
   $17 = HEAPU8[$firstseg$i>>0]|(HEAPU8[$firstseg$i+1>>0]<<8);
   $firstline$i = ((($ss$015$i)) + 6|0);
   HEAP16[$firstline$i>>1] = $17;
   $inc$i33 = (($i$013$i) + 1)|0;
   $incdec$ptr$i34 = ((($ss$015$i)) + 8|0);
   $incdec$ptr4$i = ((($ms$014$i)) + 4|0);
   $exitcond = ($inc$i33|0)==($14|0);
   if ($exitcond) {
    break;
   } else {
    $i$013$i = $inc$i33;$ms$014$i = $incdec$ptr4$i;$ss$015$i = $incdec$ptr$i34;
   }
  }
 }
 _W_ReleaseLumpNum($add25);
 $add26 = (($call19) + 7)|0;
 _P_LoadNodes($add26);
 $add27 = (($call19) + 5)|0;
 _P_LoadSegs($add27);
 _P_GroupLines();
 $add28 = (($call19) + 9)|0;
 $18 = HEAP32[99505]|0;
 $mul$i37 = Math_imul($18, $18)|0;
 $add$i = (($mul$i37) + 7)|0;
 $div$i38 = $add$i >>> 3;
 $call$i39 = (_W_LumpLength($add28)|0);
 $cmp$i40 = ($div$i38|0)>($call$i39|0);
 if ($cmp$i40) {
  $call2$i42 = (_Z_Malloc($div$i38,5,398072)|0);
  HEAP32[99518] = $call2$i42;
  _W_ReadLump($add28,$call2$i42);
  $19 = HEAP32[99518]|0;
  $add$ptr$i43 = (($19) + ($call$i39)|0);
  $sub$i = (($div$i38) - ($call$i39))|0;
  $20 = HEAP32[99542]|0;
  $mul$i$i = $20 << 2;
  $add1$i$i = (($mul$i$i) + 24)|0;
  HEAP32[$rejectpad$i$i>>2] = $add1$i$i;
  $arrayinit$element$i$i = ((($rejectpad$i$i)) + 4|0);
  HEAP32[$arrayinit$element$i$i>>2] = 0;
  $arrayinit$element2$i$i = ((($rejectpad$i$i)) + 8|0);
  HEAP32[$arrayinit$element2$i$i>>2] = 50;
  $arrayinit$element3$i$i = ((($rejectpad$i$i)) + 12|0);
  HEAP32[$arrayinit$element3$i$i>>2] = 1919505;
  $cmp14$i$i = ($sub$i|0)==(0);
  if (!($cmp14$i$i)) {
   $dest$016$i$i = $add$ptr$i43;$i$015$i$i = 0;
   while(1) {
    $div$i$i = $i$015$i$i >>> 2;
    $arrayidx$i$i = (($rejectpad$i$i) + ($div$i$i<<2)|0);
    $21 = HEAP32[$arrayidx$i$i>>2]|0;
    $rem$i$i = $i$015$i$i << 3;
    $mul5$i$i = $rem$i$i & 24;
    $shr$i$i = $21 >>> $mul5$i$i;
    $conv$i$i = $shr$i$i&255;
    HEAP8[$dest$016$i$i>>0] = $conv$i$i;
    $incdec$ptr$i$i = ((($dest$016$i$i)) + 1|0);
    $inc$i$i = (($i$015$i$i) + 1)|0;
    $cmp$i$i = ($inc$i$i>>>0)<($sub$i>>>0);
    $cmp4$i$i = ($inc$i$i>>>0)<(16);
    $22 = $cmp$i$i & $cmp4$i$i;
    if ($22) {
     $dest$016$i$i = $incdec$ptr$i$i;$i$015$i$i = $inc$i$i;
    } else {
     break;
    }
   }
   $cmp7$i$i = ($sub$i>>>0)>(16);
   if ($cmp7$i$i) {
    $23 = HEAP32[32441]|0;
    HEAP32[$vararg_buffer4>>2] = $sub$i;
    $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = 16;
    (_fprintf($23,153207,$vararg_buffer4)|0);
    $call9$i$i = (_M_CheckParm(153264)|0);
    $tobool$i$i = ($call9$i$i|0)!=(0);
    $$$i$i = $tobool$i$i << 31 >> 31;
    $add$ptr$i$i = ((($add$ptr$i43)) + 16|0);
    $sub$i$i = (($sub$i) + -16)|0;
    _memset(($add$ptr$i$i|0),($$$i$i|0),($sub$i$i|0))|0;
   }
  }
 } else {
  $call1$i41 = (_W_CacheLumpNum($add28,5)|0);
  HEAP32[99518] = $call1$i41;
 }
 HEAP32[99097] = 0;
 HEAP32[99517] = 190560;
 $add29 = (($call19) + 1)|0;
 $call$i44 = (_W_CacheLumpNum($add29,1)|0);
 $call1$i45 = (_W_LumpLength($add29)|0);
 $div$i46 = (($call1$i45>>>0) / 10)&-1;
 $24 = ($call1$i45>>>0)>(9);
 L29: do {
  if ($24) {
   $y8$i = ((($spawnthing$i)) + 2|0);
   $angle9$i = ((($spawnthing$i)) + 4|0);
   $type11$i = ((($spawnthing$i)) + 6|0);
   $options12$i = ((($spawnthing$i)) + 8|0);
   $i$017$i = 0;$mt$016$i = $call$i44;
   while(1) {
    $25 = HEAP32[32140]|0;
    $cmp2$i = ($25|0)==(2);
    $type10$phi$trans$insert$i = ((($mt$016$i)) + 6|0);
    $$pre$i = HEAPU8[$type10$phi$trans$insert$i>>0]|(HEAPU8[$type10$phi$trans$insert$i+1>>0]<<8);
    if (!($cmp2$i)) {
     $conv$i = $$pre$i << 16 >> 16;
     switch ($conv$i|0) {
     case 84: case 66: case 65: case 71: case 67: case 69: case 89: case 88: case 64: case 68:  {
      break L29;
      break;
     }
     default: {
     }
     }
    }
    $26 = HEAPU8[$mt$016$i>>0]|(HEAPU8[$mt$016$i+1>>0]<<8);
    HEAP16[$spawnthing$i>>1] = $26;
    $y$i51 = ((($mt$016$i)) + 2|0);
    $27 = HEAPU8[$y$i51>>0]|(HEAPU8[$y$i51+1>>0]<<8);
    HEAP16[$y8$i>>1] = $27;
    $angle$i = ((($mt$016$i)) + 4|0);
    $28 = HEAPU8[$angle$i>>0]|(HEAPU8[$angle$i+1>>0]<<8);
    HEAP16[$angle9$i>>1] = $28;
    HEAP16[$type11$i>>1] = $$pre$i;
    $options$i = ((($mt$016$i)) + 8|0);
    $29 = HEAPU8[$options$i>>0]|(HEAPU8[$options$i+1>>0]<<8);
    HEAP16[$options12$i>>1] = $29;
    _P_SpawnMapThing($spawnthing$i);
    $inc$i52 = (($i$017$i) + 1)|0;
    $incdec$ptr$i53 = ((($mt$016$i)) + 10|0);
    $cmp$i54 = ($inc$i52>>>0)<($div$i46>>>0);
    if ($cmp$i54) {
     $i$017$i = $inc$i52;$mt$016$i = $incdec$ptr$i53;
    } else {
     break;
    }
   }
  }
 } while(0);
 _W_ReleaseLumpNum($add29);
 $30 = HEAP32[99091]|0;
 $tobool = ($30|0)==(0);
 if (!($tobool)) {
  $31 = HEAP32[45416]|0;
  $tobool36 = ($31|0)==(0);
  if (!($tobool36)) {
   HEAP32[45420] = 0;
   _G_DeathMatchSpawnPlayer(0);
  }
  $32 = HEAP32[(181668)>>2]|0;
  $tobool36$1 = ($32|0)==(0);
  if (!($tobool36$1)) {
   HEAP32[(181968)>>2] = 0;
   _G_DeathMatchSpawnPlayer(1);
  }
  $34 = HEAP32[(181672)>>2]|0;
  $tobool36$2 = ($34|0)==(0);
  if (!($tobool36$2)) {
   HEAP32[(182256)>>2] = 0;
   _G_DeathMatchSpawnPlayer(2);
  }
  $35 = HEAP32[(181676)>>2]|0;
  $tobool36$3 = ($35|0)==(0);
  if (!($tobool36$3)) {
   HEAP32[(182544)>>2] = 0;
   _G_DeathMatchSpawnPlayer(3);
  }
 }
 HEAP32[99450] = 0;
 HEAP32[99449] = 0;
 _P_SpawnSpecials();
 $33 = HEAP32[32150]|0;
 $tobool44 = ($33|0)==(0);
 if ($tobool44) {
  STACKTOP = sp;return;
 }
 _R_PrecacheLevel();
 STACKTOP = sp;return;
}
function _P_Init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _P_InitSwitchList();
 _P_InitPicAnims();
 _R_InitSprites(2928);
 return;
}
function _P_CrossSubsector($num) {
 $num = $num|0;
 var $$ = 0, $$$i = 0, $$$i135 = 0, $$$i180 = 0, $$$i96 = 0, $$in = 0, $$lobit$i = 0, $$lobit$i112 = 0, $$lobit$i153 = 0, $$lobit$i73 = 0, $$lobit20$i = 0, $$lobit20$i120 = 0, $$lobit20$i163 = 0, $$lobit20$i81 = 0, $$pre230 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $arrayidx1 = 0, $backsector = 0, $backsector40 = 0, $call$i = 0, $call11102 = 0;
 var $call14$i = 0, $call15$i = 0, $call26141 = 0, $call26141$ph$ph = 0, $call26141216 = 0, $call27186 = 0, $call4$i = 0, $call58 = 0, $call58$ph$ph$ph = 0, $call58$ph215 = 0, $call58209 = 0, $call77 = 0, $call89 = 0, $call9$i = 0, $ceilingheight = 0, $ceilingheight44 = 0, $cmp = 0, $cmp$i = 0, $cmp$i105 = 0, $cmp$i145 = 0;
 var $cmp$i61 = 0, $cmp$i66 = 0, $cmp12 = 0, $cmp18$i = 0, $cmp18$i116 = 0, $cmp18$i159 = 0, $cmp18$i77 = 0, $cmp2 = 0, $cmp23$i = 0, $cmp23$i118 = 0, $cmp23$i161 = 0, $cmp23$i79 = 0, $cmp28 = 0, $cmp31$i = 0, $cmp31$i122 = 0, $cmp31$i165 = 0, $cmp31$i83 = 0, $cmp32 = 0, $cmp42 = 0, $cmp43$i = 0;
 var $cmp43$i133 = 0, $cmp43$i178 = 0, $cmp43$i94 = 0, $cmp45 = 0, $cmp47$i = 0, $cmp47$i134 = 0, $cmp47$i179 = 0, $cmp47$i95 = 0, $cmp5$i = 0, $cmp5$i107 = 0, $cmp5$i147 = 0, $cmp5$i68 = 0, $cmp51 = 0, $cmp59 = 0, $cmp66 = 0, $cmp73 = 0, $cmp78 = 0, $cmp8$i = 0, $cmp8$i109 = 0, $cmp8$i150 = 0;
 var $cmp8$i70 = 0, $cmp85 = 0, $cmp90 = 0, $cmp95 = 0, $conv = 0, $conv$i = 0, $conv$i110 = 0, $conv$i151 = 0, $conv$i71 = 0, $conv32$i = 0, $conv32$i123 = 0, $conv32$i166 = 0, $conv32$i84 = 0, $count$0222 = 0, $dec = 0, $firstline = 0, $flags = 0, $frontsector = 0, $idxprom = 0, $incdec$ptr = 0;
 var $linedef = 0, $mul$i = 0, $mul$i129 = 0, $mul$i174 = 0, $mul$i90 = 0, $mul42$i = 0, $mul42$i132 = 0, $mul42$i177 = 0, $mul42$i93 = 0, $numlines = 0, $openbottom$0 = 0, $or$cond = 0, $retval$0 = 0, $retval$0$i63 = 0, $seg$0223 = 0, $shr$i = 0, $shr$i127 = 0, $shr$i59 = 0, $shr$i88 = 0, $shr12$i = 0;
 var $shr2$i = 0, $shr38$i = 0, $shr38$i128 = 0, $shr38$i173 = 0, $shr38$i89 = 0, $shr39$i = 0, $shr39$i130 = 0, $shr39$i175 = 0, $shr39$i91 = 0, $shr41$i = 0, $shr41$i131 = 0, $shr41$i92 = 0, $shr7$i = 0, $spec$select$i = 0, $spec$select$i136 = 0, $spec$select$i181 = 0, $spec$select$i97 = 0, $sub$i = 0, $sub$i125 = 0, $sub$i169 = 0;
 var $sub$i60 = 0, $sub$i86 = 0, $sub11$i = 0, $sub22 = 0, $sub25 = 0, $sub36$i = 0, $sub36$i126 = 0, $sub36$i171 = 0, $sub36$i87 = 0, $sub6$i = 0, $sub76 = 0, $sub88 = 0, $tobool = 0, $tobool$i = 0, $tobool$i104 = 0, $tobool15$i = 0, $tobool15$i114 = 0, $tobool221 = 0, $tobool37 = 0, $v28 = 0;
 var $validcount = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $y = 0, $y10 = 0, $y10208 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99503]|0;
 $cmp = ($0|0)>($num|0);
 if (!($cmp)) {
  HEAP32[$vararg_buffer>>2] = $num;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $0;
  _I_Error(153284,$vararg_buffer);
  // unreachable;
 }
 $1 = HEAP32[99504]|0;
 $numlines = (((($1) + ($num<<3)|0)) + 4|0);
 $2 = HEAP16[$numlines>>1]|0;
 $tobool221 = ($2<<16>>16)==(0);
 if ($tobool221) {
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $conv = $2 << 16 >> 16;
 $3 = HEAP32[99499]|0;
 $firstline = (((($1) + ($num<<3)|0)) + 6|0);
 $4 = HEAP16[$firstline>>1]|0;
 $idxprom = $4 << 16 >> 16;
 $arrayidx1 = (($3) + ($idxprom<<5)|0);
 $count$0222 = $conv;$seg$0223 = $arrayidx1;
 while(1) {
  $linedef = ((($seg$0223)) + 20|0);
  $5 = HEAP32[$linedef>>2]|0;
  $validcount = ((($5)) + 56|0);
  $6 = HEAP32[$validcount>>2]|0;
  $7 = HEAP32[32309]|0;
  $cmp2 = ($6|0)==($7|0);
  if (!($cmp2)) {
   HEAP32[$validcount>>2] = $7;
   $8 = HEAP32[$5>>2]|0;
   $v28 = ((($5)) + 4|0);
   $9 = HEAP32[$v28>>2]|0;
   $10 = HEAP32[$8>>2]|0;
   $y = ((($8)) + 4|0);
   $11 = HEAP32[$y>>2]|0;
   $12 = HEAP32[100023]|0;
   $tobool$i = ($12|0)==(0);
   do {
    if ($tobool$i) {
     $13 = HEAP32[100021]|0;
     $cmp$i = ($13|0)==($10|0);
     do {
      if ($cmp$i) {
       $call58 = 2;
      } else {
       $cmp5$i = ($13|0)<($10|0);
       $14 = HEAP32[100024]|0;
       if ($cmp5$i) {
        $$lobit$i = $14 >>> 31;
        $call58 = $$lobit$i;
        break;
       } else {
        $cmp8$i = ($14|0)>(0);
        $conv$i = $cmp8$i&1;
        $call58 = $conv$i;
        break;
       }
      }
     } while(0);
     $17 = HEAP32[$9>>2]|0;
     $y10 = ((($9)) + 4|0);
     $18 = HEAP32[$y10>>2]|0;
     $cmp$i66 = ($13|0)==($17|0);
     if ($cmp$i66) {
      $28 = $13;$29 = $18;$call11102 = 2;$call58209 = $call58;
     } else {
      $cmp5$i68 = ($13|0)<($17|0);
      $19 = HEAP32[100024]|0;
      if ($cmp5$i68) {
       $$lobit$i73 = $19 >>> 31;
       $28 = $17;$29 = $18;$call11102 = $$lobit$i73;$call58209 = $call58;
       break;
      } else {
       $cmp8$i70 = ($19|0)>(0);
       $conv$i71 = $cmp8$i70&1;
       $28 = $17;$29 = $18;$call11102 = $conv$i71;$call58209 = $call58;
       break;
      }
     }
    } else {
     $15 = HEAP32[100024]|0;
     $tobool15$i = ($15|0)==(0);
     if (!($tobool15$i)) {
      $23 = HEAP32[100021]|0;
      $sub$i = (($10) - ($23))|0;
      $24 = HEAP32[100022]|0;
      $sub36$i = (($11) - ($24))|0;
      $shr$i = $15 >> 16;
      $shr38$i = $sub$i >> 16;
      $mul$i = Math_imul($shr38$i, $shr$i)|0;
      $shr39$i = $sub36$i >> 16;
      $shr41$i = $12 >> 16;
      $mul42$i = Math_imul($shr39$i, $shr41$i)|0;
      $cmp43$i = ($mul42$i|0)<($mul$i|0);
      $cmp47$i = ($mul$i|0)==($mul42$i|0);
      $$$i = $cmp47$i ? 2 : 1;
      $spec$select$i = $cmp43$i ? 0 : $$$i;
      $25 = HEAP32[$9>>2]|0;
      $y10208 = ((($9)) + 4|0);
      $26 = HEAP32[$y10208>>2]|0;
      $27 = HEAP32[100021]|0;
      $sub$i86 = (($25) - ($27))|0;
      $sub36$i87 = (($26) - ($24))|0;
      $shr$i88 = $15 >> 16;
      $shr38$i89 = $sub$i86 >> 16;
      $mul$i90 = Math_imul($shr38$i89, $shr$i88)|0;
      $shr39$i91 = $sub36$i87 >> 16;
      $shr41$i92 = $12 >> 16;
      $mul42$i93 = Math_imul($shr39$i91, $shr41$i92)|0;
      $cmp43$i94 = ($mul42$i93|0)<($mul$i90|0);
      $cmp47$i95 = ($mul$i90|0)==($mul42$i93|0);
      $$$i96 = $cmp47$i95 ? 2 : 1;
      $spec$select$i97 = $cmp43$i94 ? 0 : $$$i96;
      $28 = $25;$29 = $26;$call11102 = $spec$select$i97;$call58209 = $spec$select$i;
      break;
     }
     $16 = HEAP32[100022]|0;
     $cmp18$i = ($16|0)==($10|0);
     if ($cmp18$i) {
      $22 = $10;$call58$ph215 = 2;
     } else {
      $cmp23$i = ($16|0)<($11|0);
      $cmp31$i = ($12|0)>(0);
      $conv32$i = $cmp31$i&1;
      $$lobit20$i = $12 >>> 31;
      $call58$ph$ph$ph = $cmp23$i ? $conv32$i : $$lobit20$i;
      $22 = $16;$call58$ph215 = $call58$ph$ph$ph;
     }
     $$in = ((($9)) + 4|0);
     $20 = HEAP32[$9>>2]|0;
     $21 = HEAP32[$$in>>2]|0;
     $cmp18$i77 = ($22|0)==($20|0);
     if ($cmp18$i77) {
      $28 = $22;$29 = $21;$call11102 = 2;$call58209 = $call58$ph215;
     } else {
      $cmp23$i79 = ($22|0)<($21|0);
      if ($cmp23$i79) {
       $cmp31$i83 = ($12|0)>(0);
       $conv32$i84 = $cmp31$i83&1;
       $28 = $20;$29 = $21;$call11102 = $conv32$i84;$call58209 = $call58$ph215;
       break;
      } else {
       $$lobit20$i81 = $12 >>> 31;
       $28 = $20;$29 = $21;$call11102 = $$lobit20$i81;$call58209 = $call58$ph215;
       break;
      }
     }
    }
   } while(0);
   $cmp12 = ($call58209|0)==($call11102|0);
   if (!($cmp12)) {
    $sub22 = (($28) - ($10))|0;
    $sub25 = (($29) - ($11))|0;
    $30 = HEAP32[100021]|0;
    $31 = HEAP32[100022]|0;
    $tobool$i104 = ($sub22|0)==(0);
    do {
     if ($tobool$i104) {
      $cmp$i105 = ($30|0)==($10|0);
      do {
       if ($cmp$i105) {
        $call26141 = 2;
       } else {
        $cmp5$i107 = ($30|0)>($10|0);
        if ($cmp5$i107) {
         $$lobit$i112 = $sub25 >>> 31;
         $call26141 = $$lobit$i112;
         break;
        } else {
         $cmp8$i109 = ($sub25|0)>(0);
         $conv$i110 = $cmp8$i109&1;
         $call26141 = $conv$i110;
         break;
        }
       }
      } while(0);
      $32 = HEAP32[99543]|0;
      $cmp$i145 = ($10|0)==($32|0);
      if ($cmp$i145) {
       $call26141216 = $call26141;$call27186 = 2;
      } else {
       $cmp5$i147 = ($10|0)<($32|0);
       if ($cmp5$i147) {
        $$lobit$i153 = $sub25 >>> 31;
        $call26141216 = $call26141;$call27186 = $$lobit$i153;
        break;
       } else {
        $cmp8$i150 = ($sub25|0)>(0);
        $conv$i151 = $cmp8$i150&1;
        $call26141216 = $call26141;$call27186 = $conv$i151;
        break;
       }
      }
     } else {
      $tobool15$i114 = ($sub25|0)==(0);
      if (!($tobool15$i114)) {
       $sub$i125 = (($30) - ($10))|0;
       $sub36$i126 = (($31) - ($11))|0;
       $shr$i127 = $sub25 >> 16;
       $shr38$i128 = $sub$i125 >> 16;
       $mul$i129 = Math_imul($shr38$i128, $shr$i127)|0;
       $shr39$i130 = $sub36$i126 >> 16;
       $shr41$i131 = $sub22 >> 16;
       $mul42$i132 = Math_imul($shr39$i130, $shr41$i131)|0;
       $cmp43$i133 = ($mul42$i132|0)<($mul$i129|0);
       $cmp47$i134 = ($mul$i129|0)==($mul42$i132|0);
       $$$i135 = $cmp47$i134 ? 2 : 1;
       $spec$select$i136 = $cmp43$i133 ? 0 : $$$i135;
       $35 = HEAP32[99543]|0;
       $36 = HEAP32[99544]|0;
       $sub$i169 = (($35) - ($10))|0;
       $sub36$i171 = (($36) - ($11))|0;
       $shr38$i173 = $sub$i169 >> 16;
       $mul$i174 = Math_imul($shr38$i173, $shr$i127)|0;
       $shr39$i175 = $sub36$i171 >> 16;
       $mul42$i177 = Math_imul($shr39$i175, $shr41$i131)|0;
       $cmp43$i178 = ($mul42$i177|0)<($mul$i174|0);
       $cmp47$i179 = ($mul$i174|0)==($mul42$i177|0);
       $$$i180 = $cmp47$i179 ? 2 : 1;
       $spec$select$i181 = $cmp43$i178 ? 0 : $$$i180;
       $call26141216 = $spec$select$i136;$call27186 = $spec$select$i181;
       break;
      }
      $cmp18$i116 = ($11|0)==($30|0);
      do {
       if ($cmp18$i116) {
        $call26141$ph$ph = 2;
       } else {
        $cmp23$i118 = ($31|0)>($11|0);
        if ($cmp23$i118) {
         $cmp31$i122 = ($sub22|0)>(0);
         $conv32$i123 = $cmp31$i122&1;
         $call26141$ph$ph = $conv32$i123;
         break;
        } else {
         $$lobit20$i120 = $sub22 >>> 31;
         $call26141$ph$ph = $$lobit20$i120;
         break;
        }
       }
      } while(0);
      $33 = HEAP32[99543]|0;
      $cmp18$i159 = ($11|0)==($33|0);
      if ($cmp18$i159) {
       $call26141216 = $call26141$ph$ph;$call27186 = 2;
      } else {
       $34 = HEAP32[99544]|0;
       $cmp23$i161 = ($11|0)<($34|0);
       if ($cmp23$i161) {
        $cmp31$i165 = ($sub22|0)>(0);
        $conv32$i166 = $cmp31$i165&1;
        $call26141216 = $call26141$ph$ph;$call27186 = $conv32$i166;
        break;
       } else {
        $$lobit20$i163 = $sub22 >>> 31;
        $call26141216 = $call26141$ph$ph;$call27186 = $$lobit20$i163;
        break;
       }
      }
     }
    } while(0);
    $cmp28 = ($call26141216|0)==($call27186|0);
    if (!($cmp28)) {
     $backsector = ((($5)) + 52|0);
     $37 = HEAP32[$backsector>>2]|0;
     $cmp32 = ($37|0)==(0|0);
     if ($cmp32) {
      $retval$0 = 0;
      label = 59;
      break;
     }
     $flags = ((($5)) + 16|0);
     $38 = HEAP16[$flags>>1]|0;
     $39 = $38 & 4;
     $tobool37 = ($39<<16>>16)==(0);
     if ($tobool37) {
      $retval$0 = 0;
      label = 59;
      break;
     }
     $frontsector = ((($seg$0223)) + 24|0);
     $40 = HEAP32[$frontsector>>2]|0;
     $backsector40 = ((($seg$0223)) + 28|0);
     $41 = HEAP32[$backsector40>>2]|0;
     $42 = HEAP32[$40>>2]|0;
     $43 = HEAP32[$41>>2]|0;
     $cmp42 = ($42|0)==($43|0);
     $ceilingheight = ((($40)) + 4|0);
     $44 = HEAP32[$ceilingheight>>2]|0;
     $ceilingheight44 = ((($41)) + 4|0);
     $45 = HEAP32[$ceilingheight44>>2]|0;
     $cmp45 = ($44|0)==($45|0);
     $or$cond = $cmp42 & $cmp45;
     if (!($or$cond)) {
      $cmp51 = ($44|0)<($45|0);
      $$ = $cmp51 ? $44 : $45;
      $cmp59 = ($42|0)>($43|0);
      $openbottom$0 = $cmp59 ? $42 : $43;
      $cmp66 = ($openbottom$0|0)<($$|0);
      if (!($cmp66)) {
       $retval$0 = 0;
       label = 59;
       break;
      }
      $shr$i59 = $sub25 >> 8;
      $call$i = (_FixedMul($shr$i59,$12)|0);
      $shr2$i = $sub22 >> 8;
      $46 = HEAP32[100024]|0;
      $call4$i = (_FixedMul($shr2$i,$46)|0);
      $sub$i60 = (($call$i) - ($call4$i))|0;
      $cmp$i61 = ($sub$i60|0)==(0);
      if ($cmp$i61) {
       $retval$0$i63 = 0;
      } else {
       $47 = HEAP32[100021]|0;
       $sub6$i = (($10) - ($47))|0;
       $shr7$i = $sub6$i >> 8;
       $call9$i = (_FixedMul($shr7$i,$sub25)|0);
       $48 = HEAP32[100022]|0;
       $sub11$i = (($48) - ($11))|0;
       $shr12$i = $sub11$i >> 8;
       $call14$i = (_FixedMul($shr12$i,$sub22)|0);
       $add$i = (($call14$i) + ($call9$i))|0;
       $call15$i = (_FixedDiv($add$i,$sub$i60)|0);
       $retval$0$i63 = $call15$i;
      }
      $49 = HEAP32[$40>>2]|0;
      $50 = HEAP32[$41>>2]|0;
      $cmp73 = ($49|0)==($50|0);
      if (!($cmp73)) {
       $51 = HEAP32[99545]|0;
       $sub76 = (($openbottom$0) - ($51))|0;
       $call77 = (_FixedDiv($sub76,$retval$0$i63)|0);
       $52 = HEAP32[99546]|0;
       $cmp78 = ($call77|0)>($52|0);
       if ($cmp78) {
        HEAP32[99546] = $call77;
       }
      }
      $53 = HEAP32[$ceilingheight>>2]|0;
      $54 = HEAP32[$ceilingheight44>>2]|0;
      $cmp85 = ($53|0)==($54|0);
      if ($cmp85) {
       $$pre230 = HEAP32[99547]|0;
       $58 = $$pre230;
      } else {
       $55 = HEAP32[99545]|0;
       $sub88 = (($$) - ($55))|0;
       $call89 = (_FixedDiv($sub88,$retval$0$i63)|0);
       $56 = HEAP32[99547]|0;
       $cmp90 = ($call89|0)<($56|0);
       if ($cmp90) {
        HEAP32[99547] = $call89;
        $58 = $call89;
       } else {
        $58 = $56;
       }
      }
      $57 = HEAP32[99546]|0;
      $cmp95 = ($58|0)>($57|0);
      if (!($cmp95)) {
       $retval$0 = 0;
       label = 59;
       break;
      }
     }
    }
   }
  }
  $incdec$ptr = ((($seg$0223)) + 32|0);
  $dec = (($count$0222) + -1)|0;
  $tobool = ($dec|0)==(0);
  if ($tobool) {
   $retval$0 = 1;
   label = 59;
   break;
  } else {
   $count$0222 = $dec;$seg$0223 = $incdec$ptr;
  }
 }
 if ((label|0) == 59) {
  STACKTOP = sp;return ($retval$0|0);
 }
 return (0)|0;
}
function _P_CrossBSPNode($bspnum) {
 $bspnum = $bspnum|0;
 var $$$i51 = 0, $$lobit$i = 0, $$lobit$i24 = 0, $$lobit20$i = 0, $$lobit20$i34 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and2 = 0, $and63 = 0, $arrayidx = 0;
 var $arrayidx19 = 0, $arrayidx8 = 0, $bspnum$tr$lcssa67 = 0, $bspnum$tr65 = 0, $call = 0, $call1357 = 0, $call3 = 0, $call9 = 0, $cmp = 0, $cmp$i = 0, $cmp$i16 = 0, $cmp14 = 0, $cmp18$i = 0, $cmp18$i30 = 0, $cmp23$i = 0, $cmp23$i32 = 0, $cmp31$i = 0, $cmp31$i36 = 0, $cmp43$i = 0, $cmp43$i49 = 0;
 var $cmp47$i = 0, $cmp47$i50 = 0, $cmp5$i = 0, $cmp5$i18 = 0, $cmp8$i = 0, $cmp8$i21 = 0, $conv = 0, $conv$i = 0, $conv$i22 = 0, $conv20 = 0, $conv20$le = 0, $conv32$i = 0, $conv32$i37 = 0, $mul$i = 0, $mul$i45 = 0, $mul42$i = 0, $mul42$i48 = 0, $retval$0 = 0, $shr$i = 0, $shr$i43 = 0;
 var $shr38$i = 0, $shr38$i44 = 0, $shr39$i = 0, $shr39$i46 = 0, $shr41$i = 0, $shr41$i47 = 0, $spec$select$i52 = 0, $sub$i = 0, $sub$i40 = 0, $sub36$i = 0, $sub36$i42 = 0, $tobool = 0, $tobool$i = 0, $tobool$i14 = 0, $tobool10 = 0, $tobool15$i = 0, $tobool15$i27 = 0, $tobool64 = 0, $xor = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $and63 = $bspnum & 32768;
 $tobool64 = ($and63|0)==(0);
 do {
  if ($tobool64) {
   $bspnum$tr65 = $bspnum;
   while(1) {
    $1 = HEAP32[99508]|0;
    $arrayidx = (($1) + (($bspnum$tr65*52)|0)|0);
    $2 = HEAP32[100021]|0;
    $3 = HEAP32[100022]|0;
    $4 = (((($1) + (($bspnum$tr65*52)|0)|0)) + 8|0);
    $5 = HEAP32[$4>>2]|0;
    $tobool$i = ($5|0)==(0);
    do {
     if ($tobool$i) {
      $6 = HEAP32[$arrayidx>>2]|0;
      $cmp$i = ($6|0)==($2|0);
      if ($cmp$i) {
       label = 19;
      } else {
       $cmp5$i = ($6|0)<($2|0);
       $7 = (((($1) + (($bspnum$tr65*52)|0)|0)) + 12|0);
       $8 = HEAP32[$7>>2]|0;
       if ($cmp5$i) {
        $$lobit$i = $8 >>> 31;
        $16 = $$lobit$i;
        break;
       } else {
        $cmp8$i = ($8|0)>(0);
        $conv$i = $cmp8$i&1;
        $16 = $conv$i;
        break;
       }
      }
     } else {
      $9 = (((($1) + (($bspnum$tr65*52)|0)|0)) + 12|0);
      $10 = HEAP32[$9>>2]|0;
      $tobool15$i = ($10|0)==(0);
      if (!($tobool15$i)) {
       $13 = HEAP32[$arrayidx>>2]|0;
       $sub$i = (($2) - ($13))|0;
       $14 = (((($1) + (($bspnum$tr65*52)|0)|0)) + 4|0);
       $15 = HEAP32[$14>>2]|0;
       $sub36$i = (($3) - ($15))|0;
       $shr$i = $10 >> 16;
       $shr38$i = $sub$i >> 16;
       $mul$i = Math_imul($shr38$i, $shr$i)|0;
       $shr39$i = $sub36$i >> 16;
       $shr41$i = $5 >> 16;
       $mul42$i = Math_imul($shr39$i, $shr41$i)|0;
       $cmp43$i = ($mul42$i|0)<($mul$i|0);
       if ($cmp43$i) {
        $16 = 0;
        break;
       }
       $cmp47$i = ($mul$i|0)==($mul42$i|0);
       if ($cmp47$i) {
        label = 19;
        break;
       } else {
        $16 = 1;
        break;
       }
      }
      $11 = (((($1) + (($bspnum$tr65*52)|0)|0)) + 4|0);
      $12 = HEAP32[$11>>2]|0;
      $cmp18$i = ($12|0)==($2|0);
      if ($cmp18$i) {
       label = 19;
      } else {
       $cmp23$i = ($12|0)<($3|0);
       if ($cmp23$i) {
        $cmp31$i = ($5|0)>(0);
        $conv32$i = $cmp31$i&1;
        $16 = $conv32$i;
        break;
       } else {
        $$lobit20$i = $5 >>> 31;
        $16 = $$lobit20$i;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     $16 = 0;
    }
    $arrayidx8 = ((((($1) + (($bspnum$tr65*52)|0)|0)) + 48|0) + ($16<<1)|0);
    $17 = HEAP16[$arrayidx8>>1]|0;
    $conv = $17&65535;
    $call9 = (_P_CrossBSPNode($conv)|0);
    $tobool10 = ($call9|0)==(0);
    if ($tobool10) {
     $retval$0 = 0;
     label = 34;
     break;
    }
    $18 = HEAP32[99543]|0;
    $19 = HEAP32[99544]|0;
    $20 = HEAP32[$4>>2]|0;
    $tobool$i14 = ($20|0)==(0);
    do {
     if ($tobool$i14) {
      $21 = HEAP32[$arrayidx>>2]|0;
      $cmp$i16 = ($21|0)==($18|0);
      if ($cmp$i16) {
       $call1357 = 2;
      } else {
       $cmp5$i18 = ($21|0)<($18|0);
       $22 = (((($1) + (($bspnum$tr65*52)|0)|0)) + 12|0);
       $23 = HEAP32[$22>>2]|0;
       if ($cmp5$i18) {
        $$lobit$i24 = $23 >>> 31;
        $call1357 = $$lobit$i24;
        break;
       } else {
        $cmp8$i21 = ($23|0)>(0);
        $conv$i22 = $cmp8$i21&1;
        $call1357 = $conv$i22;
        break;
       }
      }
     } else {
      $24 = (((($1) + (($bspnum$tr65*52)|0)|0)) + 12|0);
      $25 = HEAP32[$24>>2]|0;
      $tobool15$i27 = ($25|0)==(0);
      if (!($tobool15$i27)) {
       $28 = HEAP32[$arrayidx>>2]|0;
       $sub$i40 = (($18) - ($28))|0;
       $29 = (((($1) + (($bspnum$tr65*52)|0)|0)) + 4|0);
       $30 = HEAP32[$29>>2]|0;
       $sub36$i42 = (($19) - ($30))|0;
       $shr$i43 = $25 >> 16;
       $shr38$i44 = $sub$i40 >> 16;
       $mul$i45 = Math_imul($shr38$i44, $shr$i43)|0;
       $shr39$i46 = $sub36$i42 >> 16;
       $shr41$i47 = $20 >> 16;
       $mul42$i48 = Math_imul($shr39$i46, $shr41$i47)|0;
       $cmp43$i49 = ($mul42$i48|0)<($mul$i45|0);
       $cmp47$i50 = ($mul$i45|0)==($mul42$i48|0);
       $$$i51 = $cmp47$i50 ? 2 : 1;
       $spec$select$i52 = $cmp43$i49 ? 0 : $$$i51;
       $call1357 = $spec$select$i52;
       break;
      }
      $26 = (((($1) + (($bspnum$tr65*52)|0)|0)) + 4|0);
      $27 = HEAP32[$26>>2]|0;
      $cmp18$i30 = ($27|0)==($18|0);
      if ($cmp18$i30) {
       $call1357 = 2;
      } else {
       $cmp23$i32 = ($27|0)<($19|0);
       if ($cmp23$i32) {
        $cmp31$i36 = ($20|0)>(0);
        $conv32$i37 = $cmp31$i36&1;
        $call1357 = $conv32$i37;
        break;
       } else {
        $$lobit20$i34 = $20 >>> 31;
        $call1357 = $$lobit20$i34;
        break;
       }
      }
     }
    } while(0);
    $cmp14 = ($16|0)==($call1357|0);
    if ($cmp14) {
     $retval$0 = 1;
     label = 34;
     break;
    }
    $xor = $16 ^ 1;
    $arrayidx19 = ((((($1) + (($bspnum$tr65*52)|0)|0)) + 48|0) + ($xor<<1)|0);
    $0 = HEAP16[$arrayidx19>>1]|0;
    $conv20 = $0&65535;
    $and = $conv20 & 32768;
    $tobool = ($and|0)==(0);
    if ($tobool) {
     $bspnum$tr65 = $conv20;
    } else {
     label = 5;
     break;
    }
   }
   if ((label|0) == 5) {
    $conv20$le = $0&65535;
    $bspnum$tr$lcssa67 = $conv20$le;
    break;
   }
   else if ((label|0) == 34) {
    return ($retval$0|0);
   }
  } else {
   $cmp = ($bspnum|0)==(-1);
   if ($cmp) {
    $call = (_P_CrossSubsector(0)|0);
    $retval$0 = $call;
    return ($retval$0|0);
   } else {
    $bspnum$tr$lcssa67 = $bspnum;
   }
  }
 } while(0);
 $and2 = $bspnum$tr$lcssa67 & -32769;
 $call3 = (_P_CrossSubsector($and2)|0);
 $retval$0 = $call3;
 return ($retval$0|0);
}
function _P_CheckSight($t1,$t2) {
 $t1 = $t1|0;
 $t2 = $t2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add10 = 0, $add15 = 0, $and = 0, $and7 = 0, $arrayidx = 0, $call = 0, $conv = 0, $height = 0, $height14 = 0, $inc = 0, $inc8 = 0, $inc9 = 0, $mul = 0, $retval$0 = 0, $shl = 0, $shr = 0, $shr12 = 0, $sub = 0, $sub$ptr$div = 0;
 var $sub$ptr$div6 = 0, $sub$ptr$sub = 0, $sub$ptr$sub5 = 0, $sub16 = 0, $sub23 = 0, $sub26 = 0, $sub27 = 0, $subsector = 0, $subsector1 = 0, $tobool = 0, $x = 0, $x19 = 0, $y = 0, $y20 = 0, $z = 0, $z13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $subsector = ((($t1)) + 52|0);
 $0 = HEAP32[$subsector>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[99506]|0;
 $sub$ptr$sub = (($1) - ($2))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 88)&-1;
 $subsector1 = ((($t2)) + 52|0);
 $3 = HEAP32[$subsector1>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $sub$ptr$sub5 = (($4) - ($2))|0;
 $sub$ptr$div6 = (($sub$ptr$sub5|0) / 88)&-1;
 $5 = HEAP32[99505]|0;
 $mul = Math_imul($5, $sub$ptr$div)|0;
 $add = (($mul) + ($sub$ptr$div6))|0;
 $shr = $add >> 3;
 $and = $add & 7;
 $shl = 1 << $and;
 $6 = HEAP32[99518]|0;
 $arrayidx = (($6) + ($shr)|0);
 $7 = HEAP8[$arrayidx>>0]|0;
 $conv = $7&255;
 $and7 = $shl & $conv;
 $tobool = ($and7|0)==(0);
 if ($tobool) {
  $9 = HEAP32[100026]|0;
  $inc8 = (($9) + 1)|0;
  HEAP32[100026] = $inc8;
  $10 = HEAP32[32309]|0;
  $inc9 = (($10) + 1)|0;
  HEAP32[32309] = $inc9;
  $z = ((($t1)) + 20|0);
  $11 = HEAP32[$z>>2]|0;
  $height = ((($t1)) + 68|0);
  $12 = HEAP32[$height>>2]|0;
  $add10 = (($12) + ($11))|0;
  $shr12 = $12 >> 2;
  $sub = (($add10) - ($shr12))|0;
  HEAP32[99545] = $sub;
  $z13 = ((($t2)) + 20|0);
  $13 = HEAP32[$z13>>2]|0;
  $height14 = ((($t2)) + 68|0);
  $14 = HEAP32[$height14>>2]|0;
  $add15 = (($13) - ($sub))|0;
  $sub16 = (($add15) + ($14))|0;
  HEAP32[99547] = $sub16;
  HEAP32[99546] = $add15;
  $x = ((($t1)) + 12|0);
  $15 = HEAP32[$x>>2]|0;
  HEAP32[100021] = $15;
  $y = ((($t1)) + 16|0);
  $16 = HEAP32[$y>>2]|0;
  HEAP32[100022] = $16;
  $x19 = ((($t2)) + 12|0);
  $17 = HEAP32[$x19>>2]|0;
  HEAP32[99543] = $17;
  $y20 = ((($t2)) + 16|0);
  $18 = HEAP32[$y20>>2]|0;
  HEAP32[99544] = $18;
  $sub23 = (($17) - ($15))|0;
  HEAP32[100023] = $sub23;
  $sub26 = (($18) - ($16))|0;
  HEAP32[100024] = $sub26;
  $19 = HEAP32[99507]|0;
  $sub27 = (($19) + -1)|0;
  $call = (_P_CrossBSPNode($sub27)|0);
  $retval$0 = $call;
  return ($retval$0|0);
 } else {
  $8 = HEAP32[100025]|0;
  $inc = (($8) + 1)|0;
  HEAP32[100025] = $inc;
  $retval$0 = 0;
  return ($retval$0|0);
 }
 return (0)|0;
}
function _P_InitPicAnims() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $arraydecay = 0, $arraydecay5 = 0, $basepic19 = 0, $call = 0, $call10 = 0, $call11 = 0, $call12 = 0, $call16 = 0, $call18 = 0, $call18$sink = 0;
 var $cmp = 0, $cmp13 = 0, $cmp15 = 0, $cmp27 = 0, $cmp8 = 0, $i$016 = 0, $inc = 0, $incdec$ptr = 0, $istexture = 0, $istexture18 = 0, $numpics = 0, $picnum = 0, $picnum17 = 0, $picnum24 = 0, $speed = 0, $speed31 = 0, $sub = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[99548] = 190720;
 $0 = HEAP32[12428]|0;
 $cmp15 = ($0|0)==(-1);
 if ($cmp15) {
  STACKTOP = sp;return;
 }
 $1 = $0;$i$016 = 0;$istexture18 = 49712;
 while(1) {
  $arraydecay = (((49712 + (($i$016*28)|0)|0)) + 13|0);
  $arraydecay5 = (((49712 + (($i$016*28)|0)|0)) + 4|0);
  $tobool = ($1|0)==(0);
  if ($tobool) {
   $call12 = (_W_CheckNumForName($arraydecay)|0);
   $cmp13 = ($call12|0)==(-1);
   if (!($cmp13)) {
    $call16 = (_R_FlatNumForName($arraydecay5)|0);
    $3 = HEAP32[99548]|0;
    $picnum17 = ((($3)) + 4|0);
    HEAP32[$picnum17>>2] = $call16;
    $call18 = (_R_FlatNumForName($arraydecay)|0);
    $call18$sink = $call18;
    label = 8;
   }
  } else {
   $call = (_R_CheckTextureNumForName($arraydecay)|0);
   $cmp8 = ($call|0)==(-1);
   if (!($cmp8)) {
    $call10 = (_R_TextureNumForName($arraydecay5)|0);
    $2 = HEAP32[99548]|0;
    $picnum = ((($2)) + 4|0);
    HEAP32[$picnum>>2] = $call10;
    $call11 = (_R_TextureNumForName($arraydecay)|0);
    $call18$sink = $call11;
    label = 8;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $4 = HEAP32[99548]|0;
   $basepic19 = ((($4)) + 8|0);
   HEAP32[$basepic19>>2] = $call18$sink;
   $5 = HEAP32[$istexture18>>2]|0;
   HEAP32[$4>>2] = $5;
   $picnum24 = ((($4)) + 4|0);
   $6 = HEAP32[$picnum24>>2]|0;
   $sub = (($6) - ($call18$sink))|0;
   $add = (($sub) + 1)|0;
   $numpics = ((($4)) + 12|0);
   HEAP32[$numpics>>2] = $add;
   $cmp27 = ($sub|0)<(1);
   if ($cmp27) {
    label = 9;
    break;
   }
   $speed = (((49712 + (($i$016*28)|0)|0)) + 24|0);
   $7 = HEAP32[$speed>>2]|0;
   $speed31 = ((($4)) + 16|0);
   HEAP32[$speed31>>2] = $7;
   $incdec$ptr = ((($4)) + 20|0);
   HEAP32[99548] = $incdec$ptr;
  }
  $inc = (($i$016) + 1)|0;
  $istexture = (49712 + (($inc*28)|0)|0);
  $8 = HEAP32[$istexture>>2]|0;
  $cmp = ($8|0)==(-1);
  if ($cmp) {
   label = 12;
   break;
  } else {
   $1 = $8;$i$016 = $inc;$istexture18 = $istexture;
  }
 }
 if ((label|0) == 9) {
  HEAP32[$vararg_buffer>>2] = $arraydecay;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $arraydecay5;
  _I_Error(153324,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
}
function _getSide($currentSector,$line,$side) {
 $currentSector = $currentSector|0;
 $line = $line|0;
 $side = $side|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $idxprom = 0, $lines = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99501]|0;
 $1 = HEAP32[99506]|0;
 $lines = (((($1) + (($currentSector*88)|0)|0)) + 84|0);
 $2 = HEAP32[$lines>>2]|0;
 $arrayidx1 = (($2) + ($line<<2)|0);
 $3 = HEAP32[$arrayidx1>>2]|0;
 $arrayidx2 = (((($3)) + 22|0) + ($side<<1)|0);
 $4 = HEAP16[$arrayidx2>>1]|0;
 $idxprom = $4 << 16 >> 16;
 $arrayidx3 = (($0) + (($idxprom*20)|0)|0);
 return ($arrayidx3|0);
}
function _getSector($currentSector,$line,$side) {
 $currentSector = $currentSector|0;
 $line = $line|0;
 $side = $side|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx1 = 0, $arrayidx2 = 0, $idxprom = 0, $lines = 0, $sector = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99501]|0;
 $1 = HEAP32[99506]|0;
 $lines = (((($1) + (($currentSector*88)|0)|0)) + 84|0);
 $2 = HEAP32[$lines>>2]|0;
 $arrayidx1 = (($2) + ($line<<2)|0);
 $3 = HEAP32[$arrayidx1>>2]|0;
 $arrayidx2 = (((($3)) + 22|0) + ($side<<1)|0);
 $4 = HEAP16[$arrayidx2>>1]|0;
 $idxprom = $4 << 16 >> 16;
 $sector = (((($0) + (($idxprom*20)|0)|0)) + 16|0);
 $5 = HEAP32[$sector>>2]|0;
 return ($5|0);
}
function _twoSided($sector,$line) {
 $sector = $sector|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $and = 0, $arrayidx1 = 0, $flags = 0, $lines = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99506]|0;
 $lines = (((($0) + (($sector*88)|0)|0)) + 84|0);
 $1 = HEAP32[$lines>>2]|0;
 $arrayidx1 = (($1) + ($line<<2)|0);
 $2 = HEAP32[$arrayidx1>>2]|0;
 $flags = ((($2)) + 16|0);
 $3 = HEAP16[$flags>>1]|0;
 $4 = $3 & 4;
 $and = $4&65535;
 return ($and|0);
}
function _getNextSector($line,$sec) {
 $line = $line|0;
 $sec = $sec|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $backsector = 0, $cmp = 0, $flags = 0, $frontsector = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $flags = ((($line)) + 16|0);
 $0 = HEAP16[$flags>>1]|0;
 $1 = $0 & 4;
 $tobool = ($1<<16>>16)==(0);
 if ($tobool) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $frontsector = ((($line)) + 48|0);
 $2 = HEAP32[$frontsector>>2]|0;
 $cmp = ($2|0)==($sec|0);
 if (!($cmp)) {
  $retval$0 = $2;
  return ($retval$0|0);
 }
 $backsector = ((($line)) + 52|0);
 $3 = HEAP32[$backsector>>2]|0;
 $retval$0 = $3;
 return ($retval$0|0);
}
function _P_FindLowestFloorSurrounding($sec) {
 $sec = $sec|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arrayidx = 0, $backsector$i = 0, $cmp = 0, $cmp$i = 0, $cmp14 = 0, $cmp2 = 0, $flags$i = 0, $floor$0$lcssa = 0, $floor$016 = 0, $floor$1 = 0, $frontsector$i = 0;
 var $i$015 = 0, $inc = 0, $linecount = 0, $lines = 0, $retval$0$i = 0, $spec$select = 0, $tobool = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$sec>>2]|0;
 $linecount = ((($sec)) + 80|0);
 $1 = HEAP32[$linecount>>2]|0;
 $cmp14 = ($1|0)>(0);
 if (!($cmp14)) {
  $floor$0$lcssa = $0;
  return ($floor$0$lcssa|0);
 }
 $lines = ((($sec)) + 84|0);
 $2 = HEAP32[$lines>>2]|0;
 $floor$016 = $0;$i$015 = 0;
 while(1) {
  $arrayidx = (($2) + ($i$015<<2)|0);
  $3 = HEAP32[$arrayidx>>2]|0;
  $flags$i = ((($3)) + 16|0);
  $4 = HEAP16[$flags$i>>1]|0;
  $5 = $4 & 4;
  $tobool$i = ($5<<16>>16)==(0);
  if ($tobool$i) {
   $floor$1 = $floor$016;
  } else {
   $frontsector$i = ((($3)) + 48|0);
   $6 = HEAP32[$frontsector$i>>2]|0;
   $cmp$i = ($6|0)==($sec|0);
   if ($cmp$i) {
    $backsector$i = ((($3)) + 52|0);
    $7 = HEAP32[$backsector$i>>2]|0;
    $retval$0$i = $7;
   } else {
    $retval$0$i = $6;
   }
   $tobool = ($retval$0$i|0)==(0|0);
   if ($tobool) {
    $floor$1 = $floor$016;
   } else {
    $8 = HEAP32[$retval$0$i>>2]|0;
    $cmp2 = ($8|0)<($floor$016|0);
    $spec$select = $cmp2 ? $8 : $floor$016;
    $floor$1 = $spec$select;
   }
  }
  $inc = (($i$015) + 1)|0;
  $cmp = ($inc|0)<($1|0);
  if ($cmp) {
   $floor$016 = $floor$1;$i$015 = $inc;
  } else {
   $floor$0$lcssa = $floor$1;
   break;
  }
 }
 return ($floor$0$lcssa|0);
}
function _P_FindHighestFloorSurrounding($sec) {
 $sec = $sec|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx = 0, $backsector$i = 0, $cmp = 0, $cmp$i = 0, $cmp1 = 0, $cmp13 = 0, $flags$i = 0, $floor$0$lcssa = 0, $floor$015 = 0, $floor$1 = 0, $frontsector$i = 0, $i$014 = 0;
 var $inc = 0, $linecount = 0, $lines = 0, $retval$0$i = 0, $spec$select = 0, $tobool = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $linecount = ((($sec)) + 80|0);
 $0 = HEAP32[$linecount>>2]|0;
 $cmp13 = ($0|0)>(0);
 if (!($cmp13)) {
  $floor$0$lcssa = -32768000;
  return ($floor$0$lcssa|0);
 }
 $lines = ((($sec)) + 84|0);
 $1 = HEAP32[$lines>>2]|0;
 $floor$015 = -32768000;$i$014 = 0;
 while(1) {
  $arrayidx = (($1) + ($i$014<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $flags$i = ((($2)) + 16|0);
  $3 = HEAP16[$flags$i>>1]|0;
  $4 = $3 & 4;
  $tobool$i = ($4<<16>>16)==(0);
  if ($tobool$i) {
   $floor$1 = $floor$015;
  } else {
   $frontsector$i = ((($2)) + 48|0);
   $5 = HEAP32[$frontsector$i>>2]|0;
   $cmp$i = ($5|0)==($sec|0);
   if ($cmp$i) {
    $backsector$i = ((($2)) + 52|0);
    $6 = HEAP32[$backsector$i>>2]|0;
    $retval$0$i = $6;
   } else {
    $retval$0$i = $5;
   }
   $tobool = ($retval$0$i|0)==(0|0);
   if ($tobool) {
    $floor$1 = $floor$015;
   } else {
    $7 = HEAP32[$retval$0$i>>2]|0;
    $cmp1 = ($7|0)>($floor$015|0);
    $spec$select = $cmp1 ? $7 : $floor$015;
    $floor$1 = $spec$select;
   }
  }
  $inc = (($i$014) + 1)|0;
  $cmp = ($inc|0)<($0|0);
  if ($cmp) {
   $floor$015 = $floor$1;$i$014 = $inc;
  } else {
   $floor$0$lcssa = $floor$1;
   break;
  }
 }
 return ($floor$0$lcssa|0);
}
function _P_FindNextHighestFloor($sec,$currentheight) {
 $sec = $sec|0;
 $currentheight = $currentheight|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx21 = 0, $backsector$i = 0, $cmp = 0, $cmp$i = 0, $cmp1 = 0, $cmp1925 = 0;
 var $cmp22 = 0, $cmp28 = 0, $exitcond = 0, $flags$i = 0, $frontsector$i = 0, $h$029 = 0, $h$1 = 0, $height$031 = 0, $height$1 = 0, $height$2 = 0, $heightlist = 0, $i$030 = 0, $i$127 = 0, $inc = 0, $inc13 = 0, $inc27 = 0, $linecount = 0, $lines = 0, $min$026 = 0, $retval$0 = 0;
 var $retval$0$i = 0, $spec$select = 0, $tobool = 0, $tobool$i = 0, $tobool14 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp + 88|0;
 $heightlist = sp;
 $linecount = ((($sec)) + 80|0);
 $0 = HEAP32[$linecount>>2]|0;
 $cmp28 = ($0|0)>(0);
 if (!($cmp28)) {
  $retval$0 = $currentheight;
  STACKTOP = sp;return ($retval$0|0);
 }
 $lines = ((($sec)) + 84|0);
 $11 = $0;$h$029 = 0;$height$031 = $currentheight;$i$030 = 0;
 L4: while(1) {
  $1 = HEAP32[$lines>>2]|0;
  $arrayidx = (($1) + ($i$030<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $flags$i = ((($2)) + 16|0);
  $3 = HEAP16[$flags$i>>1]|0;
  $4 = $3 & 4;
  $tobool$i = ($4<<16>>16)==(0);
  if ($tobool$i) {
   $8 = $11;$h$1 = $h$029;$height$2 = $height$031;
  } else {
   $frontsector$i = ((($2)) + 48|0);
   $5 = HEAP32[$frontsector$i>>2]|0;
   $cmp$i = ($5|0)==($sec|0);
   if ($cmp$i) {
    $backsector$i = ((($2)) + 52|0);
    $6 = HEAP32[$backsector$i>>2]|0;
    $retval$0$i = $6;
   } else {
    $retval$0$i = $5;
   }
   $tobool = ($retval$0$i|0)==(0|0);
   if ($tobool) {
    $8 = $11;$h$1 = $h$029;$height$2 = $height$031;
   } else {
    $7 = HEAP32[$retval$0$i>>2]|0;
    $cmp1 = ($7|0)>($height$031|0);
    if ($cmp1) {
     switch ($h$029|0) {
     case 22:  {
      label = 9;
      break L4;
      break;
     }
     case 21:  {
      $height$1 = $7;
      break;
     }
     default: {
      $height$1 = $height$031;
     }
     }
     $inc = (($h$029) + 1)|0;
     $arrayidx11 = (($heightlist) + ($h$029<<2)|0);
     HEAP32[$arrayidx11>>2] = $7;
     $8 = $11;$h$1 = $inc;$height$2 = $height$1;
    } else {
     $8 = $11;$h$1 = $h$029;$height$2 = $height$031;
    }
   }
  }
  $inc13 = (($i$030) + 1)|0;
  $cmp = ($inc13|0)<($8|0);
  if ($cmp) {
   $11 = $8;$h$029 = $h$1;$height$031 = $height$2;$i$030 = $inc13;
  } else {
   break;
  }
 }
 if ((label|0) == 9) {
  _I_Error(153364,$vararg_buffer);
  // unreachable;
 }
 $tobool14 = ($h$1|0)==(0);
 if ($tobool14) {
  $retval$0 = $currentheight;
  STACKTOP = sp;return ($retval$0|0);
 }
 $9 = HEAP32[$heightlist>>2]|0;
 $cmp1925 = ($h$1|0)>(1);
 if (!($cmp1925)) {
  $retval$0 = $9;
  STACKTOP = sp;return ($retval$0|0);
 }
 $i$127 = 1;$min$026 = $9;
 while(1) {
  $arrayidx21 = (($heightlist) + ($i$127<<2)|0);
  $10 = HEAP32[$arrayidx21>>2]|0;
  $cmp22 = ($10|0)<($min$026|0);
  $spec$select = $cmp22 ? $10 : $min$026;
  $inc27 = (($i$127) + 1)|0;
  $exitcond = ($inc27|0)==($h$1|0);
  if ($exitcond) {
   $retval$0 = $spec$select;
   break;
  } else {
   $i$127 = $inc27;$min$026 = $spec$select;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _P_FindLowestCeilingSurrounding($sec) {
 $sec = $sec|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx = 0, $backsector$i = 0, $ceilingheight = 0, $cmp = 0, $cmp$i = 0, $cmp1 = 0, $cmp13 = 0, $flags$i = 0, $frontsector$i = 0, $height$0$lcssa = 0, $height$015 = 0, $height$1 = 0;
 var $i$014 = 0, $inc = 0, $linecount = 0, $lines = 0, $retval$0$i = 0, $spec$select = 0, $tobool = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $linecount = ((($sec)) + 80|0);
 $0 = HEAP32[$linecount>>2]|0;
 $cmp13 = ($0|0)>(0);
 if (!($cmp13)) {
  $height$0$lcssa = 2147483647;
  return ($height$0$lcssa|0);
 }
 $lines = ((($sec)) + 84|0);
 $1 = HEAP32[$lines>>2]|0;
 $height$015 = 2147483647;$i$014 = 0;
 while(1) {
  $arrayidx = (($1) + ($i$014<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $flags$i = ((($2)) + 16|0);
  $3 = HEAP16[$flags$i>>1]|0;
  $4 = $3 & 4;
  $tobool$i = ($4<<16>>16)==(0);
  if ($tobool$i) {
   $height$1 = $height$015;
  } else {
   $frontsector$i = ((($2)) + 48|0);
   $5 = HEAP32[$frontsector$i>>2]|0;
   $cmp$i = ($5|0)==($sec|0);
   if ($cmp$i) {
    $backsector$i = ((($2)) + 52|0);
    $6 = HEAP32[$backsector$i>>2]|0;
    $retval$0$i = $6;
   } else {
    $retval$0$i = $5;
   }
   $tobool = ($retval$0$i|0)==(0|0);
   if ($tobool) {
    $height$1 = $height$015;
   } else {
    $ceilingheight = ((($retval$0$i)) + 4|0);
    $7 = HEAP32[$ceilingheight>>2]|0;
    $cmp1 = ($7|0)<($height$015|0);
    $spec$select = $cmp1 ? $7 : $height$015;
    $height$1 = $spec$select;
   }
  }
  $inc = (($i$014) + 1)|0;
  $cmp = ($inc|0)<($0|0);
  if ($cmp) {
   $height$015 = $height$1;$i$014 = $inc;
  } else {
   $height$0$lcssa = $height$1;
   break;
  }
 }
 return ($height$0$lcssa|0);
}
function _P_FindHighestCeilingSurrounding($sec) {
 $sec = $sec|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx = 0, $backsector$i = 0, $ceilingheight = 0, $cmp = 0, $cmp$i = 0, $cmp1 = 0, $cmp13 = 0, $flags$i = 0, $frontsector$i = 0, $height$0$lcssa = 0, $height$015 = 0, $height$1 = 0;
 var $i$014 = 0, $inc = 0, $linecount = 0, $lines = 0, $retval$0$i = 0, $spec$select = 0, $tobool = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $linecount = ((($sec)) + 80|0);
 $0 = HEAP32[$linecount>>2]|0;
 $cmp13 = ($0|0)>(0);
 if (!($cmp13)) {
  $height$0$lcssa = 0;
  return ($height$0$lcssa|0);
 }
 $lines = ((($sec)) + 84|0);
 $1 = HEAP32[$lines>>2]|0;
 $height$015 = 0;$i$014 = 0;
 while(1) {
  $arrayidx = (($1) + ($i$014<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $flags$i = ((($2)) + 16|0);
  $3 = HEAP16[$flags$i>>1]|0;
  $4 = $3 & 4;
  $tobool$i = ($4<<16>>16)==(0);
  if ($tobool$i) {
   $height$1 = $height$015;
  } else {
   $frontsector$i = ((($2)) + 48|0);
   $5 = HEAP32[$frontsector$i>>2]|0;
   $cmp$i = ($5|0)==($sec|0);
   if ($cmp$i) {
    $backsector$i = ((($2)) + 52|0);
    $6 = HEAP32[$backsector$i>>2]|0;
    $retval$0$i = $6;
   } else {
    $retval$0$i = $5;
   }
   $tobool = ($retval$0$i|0)==(0|0);
   if ($tobool) {
    $height$1 = $height$015;
   } else {
    $ceilingheight = ((($retval$0$i)) + 4|0);
    $7 = HEAP32[$ceilingheight>>2]|0;
    $cmp1 = ($7|0)>($height$015|0);
    $spec$select = $cmp1 ? $7 : $height$015;
    $height$1 = $spec$select;
   }
  }
  $inc = (($i$014) + 1)|0;
  $cmp = ($inc|0)<($0|0);
  if ($cmp) {
   $height$015 = $height$1;$i$014 = $inc;
  } else {
   $height$0$lcssa = $height$1;
   break;
  }
 }
 return ($height$0$lcssa|0);
}
function _P_FindSectorFromLineTag($line,$start) {
 $line = $line|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp3 = 0, $cmp5 = 0, $i$0 = 0, $i$04 = 0, $i$06 = 0, $retval$0 = 0, $tag = 0, $tag1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$04 = (($start) + 1)|0;
 $0 = HEAP32[99505]|0;
 $cmp5 = ($i$04|0)<($0|0);
 if (!($cmp5)) {
  $retval$0 = -1;
  return ($retval$0|0);
 }
 $1 = HEAP32[99506]|0;
 $tag1 = ((($line)) + 20|0);
 $2 = HEAP16[$tag1>>1]|0;
 $i$06 = $i$04;
 while(1) {
  $tag = (((($1) + (($i$06*88)|0)|0)) + 16|0);
  $3 = HEAP16[$tag>>1]|0;
  $cmp3 = ($3<<16>>16)==($2<<16>>16);
  if ($cmp3) {
   $retval$0 = $i$06;
   label = 5;
   break;
  }
  $i$0 = (($i$06) + 1)|0;
  $cmp = ($i$0|0)<($0|0);
  if ($cmp) {
   $i$06 = $i$0;
  } else {
   $retval$0 = -1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($retval$0|0);
 }
 return (0)|0;
}
function _P_FindMinSurroundingLight($sector,$max) {
 $sector = $sector|0;
 $max = $max|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx = 0, $backsector$i = 0, $cmp = 0, $cmp$i = 0, $cmp1 = 0, $cmp13 = 0, $conv = 0, $flags$i = 0, $frontsector$i = 0, $i$015 = 0, $inc = 0, $lightlevel = 0;
 var $linecount = 0, $lines = 0, $min$0$lcssa = 0, $min$014 = 0, $min$1 = 0, $retval$0$i = 0, $spec$select = 0, $tobool = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $linecount = ((($sector)) + 80|0);
 $0 = HEAP32[$linecount>>2]|0;
 $cmp13 = ($0|0)>(0);
 if (!($cmp13)) {
  $min$0$lcssa = $max;
  return ($min$0$lcssa|0);
 }
 $lines = ((($sector)) + 84|0);
 $1 = HEAP32[$lines>>2]|0;
 $i$015 = 0;$min$014 = $max;
 while(1) {
  $arrayidx = (($1) + ($i$015<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $flags$i = ((($2)) + 16|0);
  $3 = HEAP16[$flags$i>>1]|0;
  $4 = $3 & 4;
  $tobool$i = ($4<<16>>16)==(0);
  if ($tobool$i) {
   $min$1 = $min$014;
  } else {
   $frontsector$i = ((($2)) + 48|0);
   $5 = HEAP32[$frontsector$i>>2]|0;
   $cmp$i = ($5|0)==($sector|0);
   if ($cmp$i) {
    $backsector$i = ((($2)) + 52|0);
    $6 = HEAP32[$backsector$i>>2]|0;
    $retval$0$i = $6;
   } else {
    $retval$0$i = $5;
   }
   $tobool = ($retval$0$i|0)==(0|0);
   if ($tobool) {
    $min$1 = $min$014;
   } else {
    $lightlevel = ((($retval$0$i)) + 12|0);
    $7 = HEAP16[$lightlevel>>1]|0;
    $conv = $7 << 16 >> 16;
    $cmp1 = ($min$014|0)>($conv|0);
    $spec$select = $cmp1 ? $conv : $min$014;
    $min$1 = $spec$select;
   }
  }
  $inc = (($i$015) + 1)|0;
  $cmp = ($inc|0)<($0|0);
  if ($cmp) {
   $i$015 = $inc;$min$014 = $min$1;
  } else {
   $min$0$lcssa = $min$1;
   break;
  }
 }
 return ($min$0$lcssa|0);
}
function _P_CrossSpecialLine($linenum,$side,$thing) {
 $linenum = $linenum|0;
 $side = $side|0;
 $thing = $thing|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $conv = 0, $conv7 = 0, $player = 0, $special = 0, $special6$phi$trans$insert = 0, $special6$pre$phiZ2D = 0, $tobool = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99500]|0;
 $arrayidx = (($0) + ($linenum<<6)|0);
 $player = ((($thing)) + 132|0);
 $1 = HEAP32[$player>>2]|0;
 $tobool = ($1|0)==(0|0);
 L1: do {
  if ($tobool) {
   $type = ((($thing)) + 88|0);
   $2 = HEAP32[$type>>2]|0;
   switch ($2|0) {
   case 16: case 32: case 31: case 35: case 34: case 33:  {
    return;
    break;
   }
   default: {
   }
   }
   $special = (((($0) + ($linenum<<6)|0)) + 18|0);
   $3 = HEAP16[$special>>1]|0;
   $conv = $3 << 16 >> 16;
   switch ($conv|0) {
   case 88: case 10: case 4: case 126: case 125: case 97: case 39:  {
    $4 = $3;$special6$pre$phiZ2D = $special;
    break L1;
    break;
   }
   default: {
   }
   }
   return;
  } else {
   $special6$phi$trans$insert = (((($0) + ($linenum<<6)|0)) + 18|0);
   $$pre = HEAP16[$special6$phi$trans$insert>>1]|0;
   $4 = $$pre;$special6$pre$phiZ2D = $special6$phi$trans$insert;
  }
 } while(0);
 $conv7 = $4 << 16 >> 16;
 do {
  switch ($conv7|0) {
  case 2:  {
   (_EV_DoDoor($arrayidx,3)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 3:  {
   (_EV_DoDoor($arrayidx,2)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 4:  {
   (_EV_DoDoor($arrayidx,0)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 5:  {
   (_EV_DoFloor($arrayidx,3)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 6:  {
   (_EV_DoCeiling($arrayidx,4)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 8:  {
   (_EV_BuildStairs($arrayidx,0)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 10:  {
   (_EV_DoPlat($arrayidx,1,0)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 12:  {
   _EV_LightTurnOn($arrayidx,0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 13:  {
   _EV_LightTurnOn($arrayidx,255);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 16:  {
   (_EV_DoDoor($arrayidx,1)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 17:  {
   _EV_StartLightStrobing($arrayidx);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 19:  {
   (_EV_DoFloor($arrayidx,0)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 22:  {
   (_EV_DoPlat($arrayidx,3,0)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 25:  {
   (_EV_DoCeiling($arrayidx,3)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 30:  {
   (_EV_DoFloor($arrayidx,5)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 35:  {
   _EV_LightTurnOn($arrayidx,35);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 36:  {
   (_EV_DoFloor($arrayidx,2)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 37:  {
   (_EV_DoFloor($arrayidx,6)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 38:  {
   (_EV_DoFloor($arrayidx,1)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 39:  {
   (_EV_Teleport($arrayidx,$side,$thing)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 40:  {
   (_EV_DoCeiling($arrayidx,1)|0);
   (_EV_DoFloor($arrayidx,1)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 44:  {
   (_EV_DoCeiling($arrayidx,2)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 52:  {
   _G_ExitLevel();
   return;
   break;
  }
  case 53:  {
   (_EV_DoPlat($arrayidx,0,0)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 54:  {
   _EV_StopPlat($arrayidx);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 56:  {
   (_EV_DoFloor($arrayidx,9)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 57:  {
   (_EV_CeilingCrushStop($arrayidx)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 58:  {
   (_EV_DoFloor($arrayidx,7)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 59:  {
   (_EV_DoFloor($arrayidx,8)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 104:  {
   _EV_TurnTagLightsOff($arrayidx);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 108:  {
   (_EV_DoDoor($arrayidx,5)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 109:  {
   (_EV_DoDoor($arrayidx,6)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 100:  {
   (_EV_BuildStairs($arrayidx,1)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 110:  {
   (_EV_DoDoor($arrayidx,7)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 119:  {
   (_EV_DoFloor($arrayidx,4)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 121:  {
   (_EV_DoPlat($arrayidx,4,0)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 124:  {
   _G_SecretExitLevel();
   return;
   break;
  }
  case 125:  {
   if (!($tobool)) {
    return;
   }
   (_EV_Teleport($arrayidx,$side,$thing)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 130:  {
   (_EV_DoFloor($arrayidx,10)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 141:  {
   (_EV_DoCeiling($arrayidx,5)|0);
   HEAP16[$special6$pre$phiZ2D>>1] = 0;
   return;
   break;
  }
  case 72:  {
   (_EV_DoCeiling($arrayidx,2)|0);
   return;
   break;
  }
  case 73:  {
   (_EV_DoCeiling($arrayidx,3)|0);
   return;
   break;
  }
  case 74:  {
   (_EV_CeilingCrushStop($arrayidx)|0);
   return;
   break;
  }
  case 75:  {
   (_EV_DoDoor($arrayidx,2)|0);
   return;
   break;
  }
  case 76:  {
   (_EV_DoDoor($arrayidx,1)|0);
   return;
   break;
  }
  case 77:  {
   (_EV_DoCeiling($arrayidx,4)|0);
   return;
   break;
  }
  case 79:  {
   _EV_LightTurnOn($arrayidx,35);
   return;
   break;
  }
  case 80:  {
   _EV_LightTurnOn($arrayidx,0);
   return;
   break;
  }
  case 81:  {
   _EV_LightTurnOn($arrayidx,255);
   return;
   break;
  }
  case 82:  {
   (_EV_DoFloor($arrayidx,1)|0);
   return;
   break;
  }
  case 83:  {
   (_EV_DoFloor($arrayidx,0)|0);
   return;
   break;
  }
  case 84:  {
   (_EV_DoFloor($arrayidx,6)|0);
   return;
   break;
  }
  case 86:  {
   (_EV_DoDoor($arrayidx,3)|0);
   return;
   break;
  }
  case 87:  {
   (_EV_DoPlat($arrayidx,0,0)|0);
   return;
   break;
  }
  case 88:  {
   (_EV_DoPlat($arrayidx,1,0)|0);
   return;
   break;
  }
  case 89:  {
   _EV_StopPlat($arrayidx);
   return;
   break;
  }
  case 90:  {
   (_EV_DoDoor($arrayidx,0)|0);
   return;
   break;
  }
  case 91:  {
   (_EV_DoFloor($arrayidx,3)|0);
   return;
   break;
  }
  case 92:  {
   (_EV_DoFloor($arrayidx,7)|0);
   return;
   break;
  }
  case 93:  {
   (_EV_DoFloor($arrayidx,8)|0);
   return;
   break;
  }
  case 94:  {
   (_EV_DoFloor($arrayidx,9)|0);
   return;
   break;
  }
  case 95:  {
   (_EV_DoPlat($arrayidx,3,0)|0);
   return;
   break;
  }
  case 96:  {
   (_EV_DoFloor($arrayidx,5)|0);
   return;
   break;
  }
  case 97:  {
   (_EV_Teleport($arrayidx,$side,$thing)|0);
   return;
   break;
  }
  case 98:  {
   (_EV_DoFloor($arrayidx,2)|0);
   return;
   break;
  }
  case 105:  {
   (_EV_DoDoor($arrayidx,5)|0);
   return;
   break;
  }
  case 106:  {
   (_EV_DoDoor($arrayidx,6)|0);
   return;
   break;
  }
  case 107:  {
   (_EV_DoDoor($arrayidx,7)|0);
   return;
   break;
  }
  case 120:  {
   (_EV_DoPlat($arrayidx,4,0)|0);
   return;
   break;
  }
  case 126:  {
   if (!($tobool)) {
    return;
   }
   (_EV_Teleport($arrayidx,$side,$thing)|0);
   return;
   break;
  }
  case 128:  {
   (_EV_DoFloor($arrayidx,4)|0);
   return;
   break;
  }
  case 129:  {
   (_EV_DoFloor($arrayidx,10)|0);
   return;
   break;
  }
  default: {
   return;
  }
  }
 } while(0);
}
function _P_ShootSpecialLine($thing,$line) {
 $thing = $thing|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $cond = 0, $conv5 = 0, $player = 0, $special = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $player = ((($thing)) + 132|0);
 $0 = HEAP32[$player>>2]|0;
 $tobool = ($0|0)==(0|0);
 $special = ((($line)) + 18|0);
 $1 = HEAP16[$special>>1]|0;
 if ($tobool) {
  $cond = ($1<<16>>16)==(46);
  if ($cond) {
   $2 = 46;
  } else {
   return;
  }
 } else {
  $2 = $1;
 }
 $conv5 = $2 << 16 >> 16;
 switch ($conv5|0) {
 case 24:  {
  (_EV_DoFloor($line,3)|0);
  _P_ChangeSwitchTexture($line,0);
  return;
  break;
 }
 case 46:  {
  (_EV_DoDoor($line,3)|0);
  _P_ChangeSwitchTexture($line,1);
  return;
  break;
 }
 case 47:  {
  (_EV_DoPlat($line,3,0)|0);
  _P_ChangeSwitchTexture($line,0);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _P_PlayerInSpecialSector($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and14 = 0, $and27 = 0;
 var $and36 = 0, $and37 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx22 = 0, $call = 0, $cheats = 0, $cmp = 0, $cmp24 = 0, $cmp42 = 0, $conv = 0, $health = 0, $inc = 0, $secretcount = 0, $special = 0, $subsector = 0, $tobool = 0, $tobool12 = 0, $tobool15 = 0, $tobool23 = 0;
 var $tobool28 = 0, $tobool38 = 0, $tobool4 = 0, $vararg_buffer = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[$player>>2]|0;
 $subsector = ((($0)) + 52|0);
 $1 = HEAP32[$subsector>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $z = ((($0)) + 20|0);
 $3 = HEAP32[$z>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $cmp = ($3|0)==($4|0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $special = ((($2)) + 14|0);
 $5 = HEAP16[$special>>1]|0;
 $conv = $5 << 16 >> 16;
 switch ($conv|0) {
 case 5:  {
  $arrayidx = ((($player)) + 64|0);
  $6 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($6|0)==(0);
  if (!($tobool)) {
   STACKTOP = sp;return;
  }
  $7 = HEAP32[99557]|0;
  $and = $7 & 31;
  $tobool4 = ($and|0)==(0);
  if (!($tobool4)) {
   STACKTOP = sp;return;
  }
  _P_DamageMobj($0,0,0,10);
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $arrayidx11 = ((($player)) + 64|0);
  $8 = HEAP32[$arrayidx11>>2]|0;
  $tobool12 = ($8|0)==(0);
  if (!($tobool12)) {
   STACKTOP = sp;return;
  }
  $9 = HEAP32[99557]|0;
  $and14 = $9 & 31;
  $tobool15 = ($and14|0)==(0);
  if (!($tobool15)) {
   STACKTOP = sp;return;
  }
  _P_DamageMobj($0,0,0,5);
  STACKTOP = sp;return;
  break;
 }
 case 4: case 16:  {
  $arrayidx22 = ((($player)) + 64|0);
  $10 = HEAP32[$arrayidx22>>2]|0;
  $tobool23 = ($10|0)==(0);
  if (!($tobool23)) {
   $call = (_P_Random()|0);
   $cmp24 = ($call|0)<(5);
   if (!($cmp24)) {
    STACKTOP = sp;return;
   }
  }
  $11 = HEAP32[99557]|0;
  $and27 = $11 & 31;
  $tobool28 = ($and27|0)==(0);
  if (!($tobool28)) {
   STACKTOP = sp;return;
  }
  $12 = HEAP32[$player>>2]|0;
  _P_DamageMobj($12,0,0,20);
  STACKTOP = sp;return;
  break;
 }
 case 9:  {
  $secretcount = ((($player)) + 220|0);
  $13 = HEAP32[$secretcount>>2]|0;
  $inc = (($13) + 1)|0;
  HEAP32[$secretcount>>2] = $inc;
  HEAP16[$special>>1] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 11:  {
  $cheats = ((($player)) + 204|0);
  $14 = HEAP32[$cheats>>2]|0;
  $and36 = $14 & -3;
  HEAP32[$cheats>>2] = $and36;
  $15 = HEAP32[99557]|0;
  $and37 = $15 & 31;
  $tobool38 = ($and37|0)==(0);
  if ($tobool38) {
   _P_DamageMobj($0,0,0,20);
  }
  $health = ((($player)) + 40|0);
  $16 = HEAP32[$health>>2]|0;
  $cmp42 = ($16|0)<(11);
  if (!($cmp42)) {
   STACKTOP = sp;return;
  }
  _G_ExitLevel();
  STACKTOP = sp;return;
  break;
 }
 default: {
  HEAP32[$vararg_buffer>>2] = $conv;
  _I_Error(153432,$vararg_buffer);
  // unreachable;
 }
 }
}
function _P_UpdateSpecials() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add$us = 0, $add11 = 0, $add11$us = 0, $add26 = 0, $add9 = 0, $add9$us = 0, $anim$043 = 0, $arrayidx = 0, $arrayidx14$us = 0, $arrayidx22 = 0, $arrayidx24 = 0, $arrayidx34 = 0, $arrayidx51 = 0, $arrayidx61 = 0, $arrayidx71 = 0, $basepic = 0, $bottomtexture = 0, $btexture = 0, $btexture56 = 0;
 var $btexture66 = 0, $btimer = 0, $cmp = 0, $cmp19 = 0, $cmp1937 = 0, $cmp3 = 0, $cmp342 = 0, $cmp6 = 0, $cmp6$us = 0, $cmp640 = 0, $cond = 0, $conv = 0, $conv47 = 0, $conv57 = 0, $conv67 = 0, $dec = 0, $dec39 = 0, $div = 0, $div$us = 0, $exitcond = 0;
 var $i$041 = 0, $i$041$us = 0, $i$138 = 0, $i$234 = 0, $idxprom = 0, $idxprom52 = 0, $idxprom62 = 0, $idxprom72 = 0, $inc = 0, $inc$us = 0, $inc28 = 0, $inc80 = 0, $incdec$ptr = 0, $midtexture = 0, $numpics = 0, $rem = 0, $rem$us = 0, $soundorg = 0, $special = 0, $speed = 0;
 var $textureoffset = 0, $tobool = 0, $tobool12 = 0, $tobool35 = 0, $tobool42 = 0, $toptexture = 0, $where = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99549]|0;
 $cmp = ($0|0)==(1);
 if ($cmp) {
  $1 = HEAP32[99550]|0;
  $dec = (($1) + -1)|0;
  HEAP32[99550] = $dec;
  $tobool = ($dec|0)==(0);
  if ($tobool) {
   _G_ExitLevel();
  }
 }
 $2 = HEAP32[99548]|0;
 $cmp342 = ($2>>>0)>(190720>>>0);
 if ($cmp342) {
  $3 = HEAP32[99577]|0;
  $4 = HEAP32[99574]|0;
  $anim$043 = 190720;
  while(1) {
   $basepic = ((($anim$043)) + 8|0);
   $5 = HEAP32[$basepic>>2]|0;
   $numpics = ((($anim$043)) + 12|0);
   $6 = HEAP32[$numpics>>2]|0;
   $cmp640 = ($6|0)>(0);
   if ($cmp640) {
    $speed = ((($anim$043)) + 16|0);
    $7 = HEAP32[$anim$043>>2]|0;
    $tobool12 = ($7|0)==(0);
    if ($tobool12) {
     $10 = $6;$11 = $5;$i$041$us = $5;
     while(1) {
      $8 = HEAP32[99557]|0;
      $9 = HEAP32[$speed>>2]|0;
      $div$us = (($8|0) / ($9|0))&-1;
      $add9$us = (($div$us) + ($i$041$us))|0;
      $rem$us = (($add9$us|0) % ($10|0))&-1;
      $add11$us = (($rem$us) + ($11))|0;
      $arrayidx14$us = (($3) + ($i$041$us<<2)|0);
      HEAP32[$arrayidx14$us>>2] = $add11$us;
      $inc$us = (($i$041$us) + 1)|0;
      $12 = HEAP32[$basepic>>2]|0;
      $13 = HEAP32[$numpics>>2]|0;
      $add$us = (($13) + ($12))|0;
      $cmp6$us = ($inc$us|0)<($add$us|0);
      if ($cmp6$us) {
       $10 = $13;$11 = $12;$i$041$us = $inc$us;
      } else {
       break;
      }
     }
    } else {
     $16 = $6;$17 = $5;$i$041 = $5;
     while(1) {
      $14 = HEAP32[99557]|0;
      $15 = HEAP32[$speed>>2]|0;
      $div = (($14|0) / ($15|0))&-1;
      $add9 = (($div) + ($i$041))|0;
      $rem = (($add9|0) % ($16|0))&-1;
      $add11 = (($rem) + ($17))|0;
      $arrayidx = (($4) + ($i$041<<2)|0);
      HEAP32[$arrayidx>>2] = $add11;
      $inc = (($i$041) + 1)|0;
      $18 = HEAP32[$basepic>>2]|0;
      $19 = HEAP32[$numpics>>2]|0;
      $add = (($19) + ($18))|0;
      $cmp6 = ($inc|0)<($add|0);
      if ($cmp6) {
       $16 = $19;$17 = $18;$i$041 = $inc;
      } else {
       break;
      }
     }
    }
   }
   $incdec$ptr = ((($anim$043)) + 20|0);
   $cmp3 = ($incdec$ptr>>>0)<($2>>>0);
   if ($cmp3) {
    $anim$043 = $incdec$ptr;
   } else {
    break;
   }
  }
 }
 $20 = HEAP16[200060]|0;
 $cmp1937 = ($20<<16>>16)>(0);
 if ($cmp1937) {
  $21 = HEAP32[99501]|0;
  $conv = $20 << 16 >> 16;
  $i$138 = 0;
  while(1) {
   $arrayidx22 = (191360 + ($i$138<<2)|0);
   $22 = HEAP32[$arrayidx22>>2]|0;
   $special = ((($22)) + 18|0);
   $23 = HEAP16[$special>>1]|0;
   $cond = ($23<<16>>16)==(48);
   if ($cond) {
    $arrayidx24 = ((($22)) + 22|0);
    $24 = HEAP16[$arrayidx24>>1]|0;
    $idxprom = $24 << 16 >> 16;
    $textureoffset = (($21) + (($idxprom*20)|0)|0);
    $25 = HEAP32[$textureoffset>>2]|0;
    $add26 = (($25) + 65536)|0;
    HEAP32[$textureoffset>>2] = $add26;
   }
   $inc28 = (($i$138) + 1)|0;
   $cmp19 = ($inc28|0)<($conv|0);
   if ($cmp19) {
    $i$138 = $inc28;
   } else {
    break;
   }
  }
 }
 $i$234 = 0;
 while(1) {
  $arrayidx34 = (192016 + (($i$234*20)|0)|0);
  $btimer = (((192016 + (($i$234*20)|0)|0)) + 12|0);
  $26 = HEAP32[$btimer>>2]|0;
  $tobool35 = ($26|0)==(0);
  if (!($tobool35)) {
   $dec39 = (($26) + -1)|0;
   HEAP32[$btimer>>2] = $dec39;
   $tobool42 = ($dec39|0)==(0);
   if ($tobool42) {
    $where = (((192016 + (($i$234*20)|0)|0)) + 4|0);
    $27 = HEAP32[$where>>2]|0;
    switch ($27|0) {
    case 0:  {
     $btexture = (((192016 + (($i$234*20)|0)|0)) + 8|0);
     $28 = HEAP32[$btexture>>2]|0;
     $conv47 = $28&65535;
     $29 = HEAP32[99501]|0;
     $30 = HEAP32[$arrayidx34>>2]|0;
     $arrayidx51 = ((($30)) + 22|0);
     $31 = HEAP16[$arrayidx51>>1]|0;
     $idxprom52 = $31 << 16 >> 16;
     $toptexture = (((($29) + (($idxprom52*20)|0)|0)) + 8|0);
     HEAP16[$toptexture>>1] = $conv47;
     break;
    }
    case 1:  {
     $btexture56 = (((192016 + (($i$234*20)|0)|0)) + 8|0);
     $32 = HEAP32[$btexture56>>2]|0;
     $conv57 = $32&65535;
     $33 = HEAP32[99501]|0;
     $34 = HEAP32[$arrayidx34>>2]|0;
     $arrayidx61 = ((($34)) + 22|0);
     $35 = HEAP16[$arrayidx61>>1]|0;
     $idxprom62 = $35 << 16 >> 16;
     $midtexture = (((($33) + (($idxprom62*20)|0)|0)) + 12|0);
     HEAP16[$midtexture>>1] = $conv57;
     break;
    }
    case 2:  {
     $btexture66 = (((192016 + (($i$234*20)|0)|0)) + 8|0);
     $36 = HEAP32[$btexture66>>2]|0;
     $conv67 = $36&65535;
     $37 = HEAP32[99501]|0;
     $38 = HEAP32[$arrayidx34>>2]|0;
     $arrayidx71 = ((($38)) + 22|0);
     $39 = HEAP16[$arrayidx71>>1]|0;
     $idxprom72 = $39 << 16 >> 16;
     $bottomtexture = (((($37) + (($idxprom72*20)|0)|0)) + 10|0);
     HEAP16[$bottomtexture>>1] = $conv67;
     break;
    }
    default: {
    }
    }
    $soundorg = (((192016 + (($i$234*20)|0)|0)) + 16|0);
    _S_StartSound($soundorg,23);
    ;HEAP32[$arrayidx34>>2]=0|0;HEAP32[$arrayidx34+4>>2]=0|0;HEAP32[$arrayidx34+8>>2]=0|0;HEAP32[$arrayidx34+12>>2]=0|0;HEAP32[$arrayidx34+16>>2]=0|0;
   }
  }
  $inc80 = (($i$234) + 1)|0;
  $exitcond = ($inc80|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $i$234 = $inc80;
  }
 }
 return;
}
function _EV_DoDonut($line) {
 $line = $line|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add3$i = 0, $arrayidx$i = 0, $arrayidx$le = 0, $arrayidx4$i = 0, $arrayidx9 = 0, $backsector = 0, $backsector$i = 0, $call$i = 0, $call17 = 0, $call20 = 0, $cmp = 0;
 var $cmp$i = 0, $cmp$i44 = 0, $cmp$i46 = 0, $cmp10 = 0, $cmp13 = 0, $cmp3 = 0, $cmp3$i = 0, $cmp5$i = 0, $cmp5$i59 = 0, $cmp5$i5967 = 0, $cmp6$i = 0, $cmp7 = 0, $cmp765 = 0, $conv$i = 0, $crush = 0, $crush27 = 0, $direction = 0, $direction28 = 0, $flags$i = 0, $floordestheight = 0;
 var $floordestheight31 = 0, $floorpic = 0, $frontsector$i = 0, $function = 0, $function24 = 0, $i$0$i = 0, $i$04$i = 0, $i$04$i58 = 0, $i$04$i5869 = 0, $i$06$i = 0, $i$06$i$be = 0, $i$066 = 0, $inc = 0, $linecount = 0, $lines = 0, $lines8 = 0, $newspecial = 0, $retval$0$i47 = 0, $rtn$0$ph68 = 0, $rtn$1 = 0;
 var $s3_floorheight$0 = 0, $s3_floorheight$0$in = 0, $s3_floorpic$0 = 0, $sector = 0, $sector29 = 0, $specialdata = 0, $specialdata18 = 0, $speed = 0, $speed30 = 0, $tag$i = 0, $tag1$i = 0, $texture = 0, $tobool = 0, $tobool$i = 0, $tobool$i45 = 0, $type = 0, $type26 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99505]|0;
 $cmp5$i5967 = ($0|0)>(0);
 if (!($cmp5$i5967)) {
  $rtn$1 = 0;
  STACKTOP = sp;return ($rtn$1|0);
 }
 $tag1$i = ((($line)) + 20|0);
 $1 = HEAP32[32441]|0;
 $4 = $0;$i$04$i5869 = 0;$rtn$0$ph68 = 0;
 L4: while(1) {
  $2 = HEAP32[99506]|0;
  $3 = HEAP16[$tag1$i>>1]|0;
  $i$06$i = $i$04$i5869;
  while(1) {
   $tag$i = (((($2) + (($i$06$i*88)|0)|0)) + 16|0);
   $5 = HEAP16[$tag$i>>1]|0;
   $cmp3$i = ($5<<16>>16)==($3<<16>>16);
   if ($cmp3$i) {
    $cmp = ($i$06$i|0)>(-1);
    if (!($cmp)) {
     $rtn$1 = $rtn$0$ph68;
     label = 28;
     break L4;
    }
    $specialdata = (((($2) + (($i$06$i*88)|0)|0)) + 76|0);
    $6 = HEAP32[$specialdata>>2]|0;
    $tobool = ($6|0)==(0|0);
    if ($tobool) {
     break;
    }
    $i$04$i = (($i$06$i) + 1)|0;
    $cmp5$i = ($i$04$i|0)<($4|0);
    if ($cmp5$i) {
     $i$06$i$be = $i$04$i;
    } else {
     $rtn$1 = $rtn$0$ph68;
     label = 28;
     break L4;
    }
   } else {
    $i$0$i = (($i$06$i) + 1)|0;
    $cmp$i = ($i$0$i|0)<($4|0);
    if ($cmp$i) {
     $i$06$i$be = $i$0$i;
    } else {
     $rtn$1 = $rtn$0$ph68;
     label = 28;
     break L4;
    }
   }
   $i$06$i = $i$06$i$be;
  }
  $arrayidx$le = (($2) + (($i$06$i*88)|0)|0);
  $lines = (((($2) + (($i$06$i*88)|0)|0)) + 84|0);
  $7 = HEAP32[$lines>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $flags$i = ((($8)) + 16|0);
  $9 = HEAP16[$flags$i>>1]|0;
  $10 = $9 & 4;
  $tobool$i45 = ($10<<16>>16)==(0);
  if ($tobool$i45) {
   label = 14;
   break;
  }
  $frontsector$i = ((($8)) + 48|0);
  $11 = HEAP32[$frontsector$i>>2]|0;
  $cmp$i46 = ($11|0)==($arrayidx$le|0);
  if ($cmp$i46) {
   $backsector$i = ((($8)) + 52|0);
   $12 = HEAP32[$backsector$i>>2]|0;
   $retval$0$i47 = $12;
  } else {
   $retval$0$i47 = $11;
  }
  $cmp3 = ($retval$0$i47|0)==(0|0);
  if ($cmp3) {
   label = 14;
   break;
  }
  $linecount = ((($retval$0$i47)) + 80|0);
  $13 = HEAP32[$linecount>>2]|0;
  $cmp765 = ($13|0)>(0);
  L20: do {
   if ($cmp765) {
    $lines8 = ((($retval$0$i47)) + 84|0);
    $14 = HEAP32[$lines8>>2]|0;
    $i$066 = 0;
    while(1) {
     $arrayidx9 = (($14) + ($i$066<<2)|0);
     $15 = HEAP32[$arrayidx9>>2]|0;
     $backsector = ((($15)) + 52|0);
     $16 = HEAP32[$backsector>>2]|0;
     $cmp10 = ($16|0)==($arrayidx$le|0);
     $inc = (($i$066) + 1)|0;
     if (!($cmp10)) {
      break;
     }
     $cmp7 = ($inc|0)<($13|0);
     if ($cmp7) {
      $i$066 = $inc;
     } else {
      $26 = $4;
      break L20;
     }
    }
    $cmp13 = ($16|0)==(0|0);
    if ($cmp13) {
     (_fwrite(153568,118,1,$1)|0);
     $17 = HEAP32[32308]|0;
     $tobool$i = ($17|0)==(0);
     if (!($tobool$i)) {
      HEAP32[32308] = 0;
      HEAP32[99551] = 0;
      HEAP32[99552] = 22;
      $call$i = (_M_CheckParmWithArgs(153687,2)|0);
      $cmp$i44 = ($call$i|0)>(0);
      if ($cmp$i44) {
       $18 = HEAP32[99374]|0;
       $add$i = (($call$i) + 1)|0;
       $arrayidx$i = (($18) + ($add$i<<2)|0);
       $19 = HEAP32[$arrayidx$i>>2]|0;
       (_M_StrToInt($19,398204)|0);
       $20 = HEAP32[99374]|0;
       $add3$i = (($call$i) + 2)|0;
       $arrayidx4$i = (($20) + ($add3$i<<2)|0);
       $21 = HEAP32[$arrayidx4$i>>2]|0;
       (_M_StrToInt($21,398208)|0);
       $22 = HEAP32[99552]|0;
       $23 = HEAP32[99576]|0;
       $cmp6$i = ($22|0)<($23|0);
       if (!($cmp6$i)) {
        HEAP32[$vararg_buffer>>2] = $23;
        $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
        HEAP32[$vararg_ptr1>>2] = 22;
        (_fprintf($1,153694,$vararg_buffer)|0);
        HEAP32[99552] = 22;
       }
      }
     }
     $24 = HEAP32[99552]|0;
     $conv$i = $24&65535;
     $s3_floorheight$0$in = 398204;$s3_floorpic$0 = $conv$i;
    } else {
     $floorpic = ((($16)) + 8|0);
     $25 = HEAP16[$floorpic>>1]|0;
     $s3_floorheight$0$in = $16;$s3_floorpic$0 = $25;
    }
    $s3_floorheight$0 = HEAP32[$s3_floorheight$0$in>>2]|0;
    $call17 = (_Z_Malloc(44,6,0)|0);
    _P_AddThinker($call17);
    $specialdata18 = ((($retval$0$i47)) + 76|0);
    HEAP32[$specialdata18>>2] = $call17;
    $function = ((($call17)) + 8|0);
    HEAP32[$function>>2] = 138;
    $type = ((($call17)) + 12|0);
    HEAP32[$type>>2] = 11;
    $crush = ((($call17)) + 16|0);
    HEAP32[$crush>>2] = 0;
    $direction = ((($call17)) + 24|0);
    HEAP32[$direction>>2] = 1;
    $sector = ((($call17)) + 20|0);
    HEAP32[$sector>>2] = $retval$0$i47;
    $speed = ((($call17)) + 40|0);
    HEAP32[$speed>>2] = 32768;
    $texture = ((($call17)) + 32|0);
    HEAP16[$texture>>1] = $s3_floorpic$0;
    $newspecial = ((($call17)) + 28|0);
    HEAP32[$newspecial>>2] = 0;
    $floordestheight = ((($call17)) + 36|0);
    HEAP32[$floordestheight>>2] = $s3_floorheight$0;
    $call20 = (_Z_Malloc(44,6,0)|0);
    _P_AddThinker($call20);
    HEAP32[$specialdata>>2] = $call20;
    $function24 = ((($call20)) + 8|0);
    HEAP32[$function24>>2] = 138;
    $type26 = ((($call20)) + 12|0);
    HEAP32[$type26>>2] = 0;
    $crush27 = ((($call20)) + 16|0);
    HEAP32[$crush27>>2] = 0;
    $direction28 = ((($call20)) + 24|0);
    HEAP32[$direction28>>2] = -1;
    $sector29 = ((($call20)) + 20|0);
    HEAP32[$sector29>>2] = $arrayidx$le;
    $speed30 = ((($call20)) + 40|0);
    HEAP32[$speed30>>2] = 32768;
    $floordestheight31 = ((($call20)) + 36|0);
    HEAP32[$floordestheight31>>2] = $s3_floorheight$0;
    $$pre = HEAP32[99505]|0;
    $26 = $$pre;
   } else {
    $26 = $4;
   }
  } while(0);
  $i$04$i58 = (($i$06$i) + 1)|0;
  $cmp5$i59 = ($i$04$i58|0)<($26|0);
  if ($cmp5$i59) {
   $4 = $26;$i$04$i5869 = $i$04$i58;$rtn$0$ph68 = 1;
  } else {
   $rtn$1 = 1;
   label = 28;
   break;
  }
 }
 if ((label|0) == 14) {
  (_fwrite(153476,91,1,$1)|0);
  $rtn$1 = 1;
  STACKTOP = sp;return ($rtn$1|0);
 }
 else if ((label|0) == 28) {
  STACKTOP = sp;return ($rtn$1|0);
 }
 return (0)|0;
}
function _P_SpawnSpecials() {
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx31 = 0, $arrayidx32 = 0, $cmp = 0, $cmp2 = 0;
 var $cmp20 = 0, $cmp2034 = 0, $cmp236 = 0, $cmp27 = 0, $cond = 0, $conv = 0, $i$038 = 0, $i$135 = 0, $idxprom = 0, $inc = 0, $inc18 = 0, $inc33 = 0, $inc36 = 0, $incdec$ptr = 0, $mul1 = 0, $or$cond = 0, $sector$037 = 0, $special = 0, $special23 = 0, $tobool = 0;
 var $tobool3 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99167]|0;
 $cmp = ($0|0)>(0);
 $1 = HEAP32[99091]|0;
 $tobool = ($1|0)!=(0);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[99549] = 1;
  $mul1 = ($0*2100)|0;
  HEAP32[99550] = $mul1;
 } else {
  HEAP32[99549] = 0;
 }
 $2 = HEAP32[99505]|0;
 $cmp236 = ($2|0)>(0);
 if ($cmp236) {
  $3 = HEAP32[99506]|0;
  $i$038 = 0;$sector$037 = $3;
  while(1) {
   $special = ((($sector$037)) + 14|0);
   $4 = HEAP16[$special>>1]|0;
   $tobool3 = ($4<<16>>16)==(0);
   L9: do {
    if (!($tobool3)) {
     $conv = $4 << 16 >> 16;
     do {
      switch ($conv|0) {
      case 1:  {
       _P_SpawnLightFlash($sector$037);
       break L9;
       break;
      }
      case 2:  {
       _P_SpawnStrobeFlash($sector$037,15,0);
       break L9;
       break;
      }
      case 3:  {
       _P_SpawnStrobeFlash($sector$037,35,0);
       break L9;
       break;
      }
      case 4:  {
       _P_SpawnStrobeFlash($sector$037,15,0);
       HEAP16[$special>>1] = 4;
       break L9;
       break;
      }
      case 8:  {
       _P_SpawnGlowingLight($sector$037);
       break L9;
       break;
      }
      case 9:  {
       $5 = HEAP32[99151]|0;
       $inc = (($5) + 1)|0;
       HEAP32[99151] = $inc;
       break L9;
       break;
      }
      case 10:  {
       _P_SpawnDoorCloseIn30($sector$037);
       break L9;
       break;
      }
      case 12:  {
       _P_SpawnStrobeFlash($sector$037,35,1);
       break L9;
       break;
      }
      case 13:  {
       _P_SpawnStrobeFlash($sector$037,15,1);
       break L9;
       break;
      }
      case 14:  {
       _P_SpawnDoorRaiseIn5Mins($sector$037,$i$038);
       break L9;
       break;
      }
      case 17:  {
       _P_SpawnFireFlicker($sector$037);
       break L9;
       break;
      }
      default: {
       break L9;
      }
      }
     } while(0);
    }
   } while(0);
   $inc18 = (($i$038) + 1)|0;
   $incdec$ptr = ((($sector$037)) + 88|0);
   $6 = HEAP32[99505]|0;
   $cmp2 = ($inc18|0)<($6|0);
   if ($cmp2) {
    $i$038 = $inc18;$sector$037 = $incdec$ptr;
   } else {
    break;
   }
  }
 }
 HEAP16[200060] = 0;
 $7 = HEAP32[99509]|0;
 $cmp2034 = ($7|0)>(0);
 if (!($cmp2034)) {
  dest=186016; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  dest=190432; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  _memset((192016|0),0,320)|0;
  STACKTOP = sp;return;
 }
 $$pre = HEAP32[99500]|0;
 $10 = 0;$12 = $7;$8 = $$pre;$i$135 = 0;
 while(1) {
  $special23 = (((($8) + ($i$135<<6)|0)) + 18|0);
  $9 = HEAP16[$special23>>1]|0;
  $cond = ($9<<16>>16)==(48);
  if ($cond) {
   $cmp27 = ($10<<16>>16)>(63);
   if ($cmp27) {
    label = 24;
    break;
   }
   $arrayidx31 = (($8) + ($i$135<<6)|0);
   $idxprom = $10 << 16 >> 16;
   $arrayidx32 = (191360 + ($idxprom<<2)|0);
   HEAP32[$arrayidx32>>2] = $arrayidx31;
   $inc33 = (($10) + 1)<<16>>16;
   HEAP16[200060] = $inc33;
   $11 = $12;$13 = $inc33;$14 = $8;
  } else {
   $11 = $12;$13 = $10;$14 = $8;
  }
  $inc36 = (($i$135) + 1)|0;
  $cmp20 = ($inc36|0)<($11|0);
  if ($cmp20) {
   $10 = $13;$12 = $11;$8 = $14;$i$135 = $inc36;
  } else {
   label = 27;
   break;
  }
 }
 if ((label|0) == 24) {
  _I_Error(153846,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 27) {
  dest=186016; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  dest=190432; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  _memset((192016|0),0,320)|0;
  STACKTOP = sp;return;
 }
}
function _P_InitSwitchList() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arraydecay = 0, $arraydecay18 = 0, $arrayidx16 = 0, $arrayidx21 = 0, $arrayidx8 = 0, $call = 0, $call19 = 0, $cmp12 = 0, $cmp2 = 0, $cmp5 = 0, $conv = 0, $div = 0, $episode$0 = 0, $episode6 = 0, $i$013 = 0, $inc = 0;
 var $inc20 = 0, $inc23 = 0, $index$014 = 0, $index$1 = 0, $spec$select = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32140]|0;
 $1 = $0 | 2;
 $2 = ($1|0)==(3);
 $cmp2 = ($0|0)==(2);
 $spec$select = $cmp2 ? 3 : 1;
 $episode$0 = $2 ? 2 : $spec$select;
 $i$013 = 0;$index$014 = 0;
 while(1) {
  $episode6 = (((50368 + (($i$013*20)|0)|0)) + 18|0);
  $3 = HEAP16[$episode6>>1]|0;
  $tobool = ($3<<16>>16)==(0);
  if ($tobool) {
   break;
  }
  $conv = $3 << 16 >> 16;
  $cmp12 = ($episode$0|0)<($conv|0);
  if ($cmp12) {
   $index$1 = $index$014;
  } else {
   $inc = (($index$014) + 1)|0;
   $arrayidx21 = (191616 + ($inc<<2)|0);
   $inc20 = (($index$014) + 2)|0;
   $arraydecay18 = (((50368 + (($i$013*20)|0)|0)) + 9|0);
   $arrayidx16 = (191616 + ($index$014<<2)|0);
   $arraydecay = (50368 + (($i$013*20)|0)|0);
   $call = (_R_TextureNumForName($arraydecay)|0);
   HEAP32[$arrayidx16>>2] = $call;
   $call19 = (_R_TextureNumForName($arraydecay18)|0);
   HEAP32[$arrayidx21>>2] = $call19;
   $index$1 = $inc20;
  }
  $inc23 = (($i$013) + 1)|0;
  $cmp5 = ($inc23>>>0)<(50);
  if ($cmp5) {
   $i$013 = $inc23;$index$014 = $index$1;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return;
 }
 $div = (($index$014|0) / 2)&-1;
 HEAP32[99553] = $div;
 $arrayidx8 = (191616 + ($index$014<<2)|0);
 HEAP32[$arrayidx8>>2] = -1;
 return;
}
function _P_StartButton($line,$w,$texture,$time) {
 $line = $line|0;
 $w = $w|0;
 $texture = $texture|0;
 $time = $time|0;
 var $$mux = 0, $$mux$mux = 0, $$mux$mux$mux = 0, $$mux$mux$mux$mux = 0, $$mux$mux$mux$mux$mux = 0, $$mux$mux$mux$mux$mux$mux = 0, $$mux$mux$mux$mux$mux$mux$mux = 0, $$mux$mux$mux$mux$mux$mux$mux$mux = 0, $$mux$mux$mux$mux$mux$mux$mux$mux$mux = 0, $$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = 0, $$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = 0, $$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = 0, $$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = 0, $$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = 0, $$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = 0, $$mux20 = 0, $$mux20$mux = 0, $$mux20$mux$mux = 0, $$mux20$mux$mux$mux = 0, $$mux20$mux$mux$mux$mux = 0;
 var $$mux20$mux$mux$mux$mux$mux = 0, $$mux20$mux$mux$mux$mux$mux$mux = 0, $$mux20$mux$mux$mux$mux$mux$mux$mux = 0, $$mux20$mux$mux$mux$mux$mux$mux$mux$mux = 0, $$mux20$mux$mux$mux$mux$mux$mux$mux$mux$mux = 0, $$mux20$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = 0, $$mux20$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = 0, $$mux20$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = 0, $$mux20$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = 0, $$mux20$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, $brmerge21 = 0, $brmerge22 = 0, $brmerge23 = 0, $brmerge24 = 0, $brmerge25 = 0, $brmerge26 = 0, $brmerge27 = 0, $brmerge28 = 0, $brmerge29 = 0, $brmerge30 = 0, $brmerge31 = 0, $brmerge32 = 0, $brmerge33 = 0, $brmerge34 = 0, $btexture = 0, $cmp3 = 0;
 var $cmp3$1 = 0, $cmp3$10 = 0, $cmp3$11 = 0, $cmp3$12 = 0, $cmp3$13 = 0, $cmp3$14 = 0, $cmp3$15 = 0, $cmp3$2 = 0, $cmp3$3 = 0, $cmp3$4 = 0, $cmp3$5 = 0, $cmp3$6 = 0, $cmp3$7 = 0, $cmp3$8 = 0, $cmp3$9 = 0, $frontsector = 0, $line12 = 0, $not$tobool = 0, $or$cond = 0, $or$cond35 = 0;
 var $or$cond36 = 0, $or$cond37 = 0, $or$cond38 = 0, $or$cond39 = 0, $or$cond40 = 0, $or$cond41 = 0, $or$cond42 = 0, $or$cond43 = 0, $or$cond44 = 0, $or$cond45 = 0, $or$cond46 = 0, $or$cond47 = 0, $or$cond48 = 0, $or$cond49 = 0, $soundorg = 0, $soundorg18 = 0, $tobool = 0, $tobool$1 = 0, $tobool$1$not = 0, $tobool$10 = 0;
 var $tobool$10$not = 0, $tobool$11 = 0, $tobool$11$not = 0, $tobool$12 = 0, $tobool$12$not = 0, $tobool$13 = 0, $tobool$13$not = 0, $tobool$14 = 0, $tobool$14$not = 0, $tobool$15 = 0, $tobool$15$not = 0, $tobool$2 = 0, $tobool$2$not = 0, $tobool$3 = 0, $tobool$3$not = 0, $tobool$4 = 0, $tobool$4$not = 0, $tobool$5 = 0, $tobool$5$not = 0, $tobool$6 = 0;
 var $tobool$6$not = 0, $tobool$7 = 0, $tobool$7$not = 0, $tobool$8 = 0, $tobool$8$not = 0, $tobool$9 = 0, $tobool$9$not = 0, $tobool$not = 0, $vararg_buffer = 0, $where = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[(192028)>>2]|0;
 $tobool = ($0|0)==(0);
 $tobool$not = $tobool ^ 1;
 $1 = HEAP32[48004]|0;
 $cmp3 = ($1|0)==($line|0);
 $or$cond = $cmp3 & $tobool$not;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(192048)>>2]|0;
 $tobool$1 = ($2|0)==(0);
 $tobool$1$not = $tobool$1 ^ 1;
 $3 = HEAP32[(192036)>>2]|0;
 $cmp3$1 = ($3|0)==($line|0);
 $or$cond35 = $cmp3$1 & $tobool$1$not;
 if ($or$cond35) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[(192068)>>2]|0;
 $tobool$2 = ($5|0)==(0);
 $tobool$2$not = $tobool$2 ^ 1;
 $6 = HEAP32[(192056)>>2]|0;
 $cmp3$2 = ($6|0)==($line|0);
 $or$cond36 = $cmp3$2 & $tobool$2$not;
 if ($or$cond36) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[(192088)>>2]|0;
 $tobool$3 = ($7|0)==(0);
 $tobool$3$not = $tobool$3 ^ 1;
 $8 = HEAP32[(192076)>>2]|0;
 $cmp3$3 = ($8|0)==($line|0);
 $or$cond37 = $cmp3$3 & $tobool$3$not;
 if ($or$cond37) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[(192108)>>2]|0;
 $tobool$4 = ($9|0)==(0);
 $tobool$4$not = $tobool$4 ^ 1;
 $10 = HEAP32[(192096)>>2]|0;
 $cmp3$4 = ($10|0)==($line|0);
 $or$cond38 = $cmp3$4 & $tobool$4$not;
 if ($or$cond38) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[(192128)>>2]|0;
 $tobool$5 = ($11|0)==(0);
 $tobool$5$not = $tobool$5 ^ 1;
 $12 = HEAP32[(192116)>>2]|0;
 $cmp3$5 = ($12|0)==($line|0);
 $or$cond39 = $cmp3$5 & $tobool$5$not;
 if ($or$cond39) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[(192148)>>2]|0;
 $tobool$6 = ($13|0)==(0);
 $tobool$6$not = $tobool$6 ^ 1;
 $14 = HEAP32[(192136)>>2]|0;
 $cmp3$6 = ($14|0)==($line|0);
 $or$cond40 = $cmp3$6 & $tobool$6$not;
 if ($or$cond40) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[(192168)>>2]|0;
 $tobool$7 = ($15|0)==(0);
 $tobool$7$not = $tobool$7 ^ 1;
 $16 = HEAP32[(192156)>>2]|0;
 $cmp3$7 = ($16|0)==($line|0);
 $or$cond41 = $cmp3$7 & $tobool$7$not;
 if ($or$cond41) {
  STACKTOP = sp;return;
 }
 $17 = HEAP32[(192188)>>2]|0;
 $tobool$8 = ($17|0)==(0);
 $tobool$8$not = $tobool$8 ^ 1;
 $18 = HEAP32[(192176)>>2]|0;
 $cmp3$8 = ($18|0)==($line|0);
 $or$cond42 = $cmp3$8 & $tobool$8$not;
 if ($or$cond42) {
  STACKTOP = sp;return;
 }
 $19 = HEAP32[(192208)>>2]|0;
 $tobool$9 = ($19|0)==(0);
 $tobool$9$not = $tobool$9 ^ 1;
 $20 = HEAP32[(192196)>>2]|0;
 $cmp3$9 = ($20|0)==($line|0);
 $or$cond43 = $cmp3$9 & $tobool$9$not;
 if ($or$cond43) {
  STACKTOP = sp;return;
 }
 $21 = HEAP32[(192228)>>2]|0;
 $tobool$10 = ($21|0)==(0);
 $tobool$10$not = $tobool$10 ^ 1;
 $22 = HEAP32[(192216)>>2]|0;
 $cmp3$10 = ($22|0)==($line|0);
 $or$cond44 = $cmp3$10 & $tobool$10$not;
 if ($or$cond44) {
  STACKTOP = sp;return;
 }
 $23 = HEAP32[(192248)>>2]|0;
 $tobool$11 = ($23|0)==(0);
 $tobool$11$not = $tobool$11 ^ 1;
 $24 = HEAP32[(192236)>>2]|0;
 $cmp3$11 = ($24|0)==($line|0);
 $or$cond45 = $cmp3$11 & $tobool$11$not;
 if ($or$cond45) {
  STACKTOP = sp;return;
 }
 $25 = HEAP32[(192268)>>2]|0;
 $tobool$12 = ($25|0)==(0);
 $tobool$12$not = $tobool$12 ^ 1;
 $26 = HEAP32[(192256)>>2]|0;
 $cmp3$12 = ($26|0)==($line|0);
 $or$cond46 = $cmp3$12 & $tobool$12$not;
 if ($or$cond46) {
  STACKTOP = sp;return;
 }
 $27 = HEAP32[(192288)>>2]|0;
 $tobool$13 = ($27|0)==(0);
 $tobool$13$not = $tobool$13 ^ 1;
 $28 = HEAP32[(192276)>>2]|0;
 $cmp3$13 = ($28|0)==($line|0);
 $or$cond47 = $cmp3$13 & $tobool$13$not;
 if ($or$cond47) {
  STACKTOP = sp;return;
 }
 $29 = HEAP32[(192308)>>2]|0;
 $tobool$14 = ($29|0)==(0);
 $tobool$14$not = $tobool$14 ^ 1;
 $30 = HEAP32[(192296)>>2]|0;
 $cmp3$14 = ($30|0)==($line|0);
 $or$cond48 = $cmp3$14 & $tobool$14$not;
 if ($or$cond48) {
  STACKTOP = sp;return;
 }
 $31 = HEAP32[(192328)>>2]|0;
 $tobool$15 = ($31|0)==(0);
 $tobool$15$not = $tobool$15 ^ 1;
 $32 = HEAP32[(192316)>>2]|0;
 $cmp3$15 = ($32|0)==($line|0);
 $or$cond49 = $cmp3$15 & $tobool$15$not;
 if ($or$cond49) {
  STACKTOP = sp;return;
 }
 $brmerge = $tobool | $tobool$1;
 $not$tobool = $tobool ^ 1;
 $$mux = $not$tobool&1;
 $brmerge21 = $brmerge | $tobool$2;
 $$mux$mux = $brmerge ? $$mux : 2;
 $brmerge22 = $brmerge21 | $tobool$3;
 $$mux$mux$mux = $brmerge21 ? $$mux$mux : 3;
 $brmerge23 = $brmerge22 | $tobool$4;
 $$mux$mux$mux$mux = $brmerge22 ? $$mux$mux$mux : 4;
 $brmerge24 = $brmerge23 | $tobool$5;
 $$mux$mux$mux$mux$mux = $brmerge23 ? $$mux$mux$mux$mux : 5;
 $brmerge25 = $brmerge24 | $tobool$6;
 $$mux$mux$mux$mux$mux$mux = $brmerge24 ? $$mux$mux$mux$mux$mux : 6;
 $brmerge26 = $brmerge25 | $tobool$7;
 $$mux$mux$mux$mux$mux$mux$mux = $brmerge25 ? $$mux$mux$mux$mux$mux$mux : 7;
 $brmerge27 = $brmerge26 | $tobool$8;
 $$mux$mux$mux$mux$mux$mux$mux$mux = $brmerge26 ? $$mux$mux$mux$mux$mux$mux$mux : 8;
 $brmerge28 = $brmerge27 | $tobool$9;
 $$mux$mux$mux$mux$mux$mux$mux$mux$mux = $brmerge27 ? $$mux$mux$mux$mux$mux$mux$mux$mux : 9;
 $brmerge29 = $brmerge28 | $tobool$10;
 $$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = $brmerge28 ? $$mux$mux$mux$mux$mux$mux$mux$mux$mux : 10;
 $brmerge30 = $brmerge29 | $tobool$11;
 $$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = $brmerge29 ? $$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux : 11;
 $brmerge31 = $brmerge30 | $tobool$12;
 $$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = $brmerge30 ? $$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux : 12;
 $brmerge32 = $brmerge31 | $tobool$13;
 $$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = $brmerge31 ? $$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux : 13;
 $brmerge33 = $brmerge32 | $tobool$14;
 $$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = $brmerge32 ? $$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux : 14;
 $brmerge34 = $brmerge33 | $tobool$15;
 $$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = $brmerge33 ? $$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux : 15;
 if (!($brmerge34)) {
  _I_Error(153902,$vararg_buffer);
  // unreachable;
 }
 $$mux20 = $tobool ? (192028) : (192048);
 $$mux20$mux = $brmerge ? $$mux20 : (192068);
 $$mux20$mux$mux = $brmerge21 ? $$mux20$mux : (192088);
 $$mux20$mux$mux$mux = $brmerge22 ? $$mux20$mux$mux : (192108);
 $$mux20$mux$mux$mux$mux = $brmerge23 ? $$mux20$mux$mux$mux : (192128);
 $$mux20$mux$mux$mux$mux$mux = $brmerge24 ? $$mux20$mux$mux$mux$mux : (192148);
 $$mux20$mux$mux$mux$mux$mux$mux = $brmerge25 ? $$mux20$mux$mux$mux$mux$mux : (192168);
 $$mux20$mux$mux$mux$mux$mux$mux$mux = $brmerge26 ? $$mux20$mux$mux$mux$mux$mux$mux : (192188);
 $$mux20$mux$mux$mux$mux$mux$mux$mux$mux = $brmerge27 ? $$mux20$mux$mux$mux$mux$mux$mux$mux : (192208);
 $$mux20$mux$mux$mux$mux$mux$mux$mux$mux$mux = $brmerge28 ? $$mux20$mux$mux$mux$mux$mux$mux$mux$mux : (192228);
 $$mux20$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = $brmerge29 ? $$mux20$mux$mux$mux$mux$mux$mux$mux$mux$mux : (192248);
 $$mux20$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = $brmerge30 ? $$mux20$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux : (192268);
 $$mux20$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = $brmerge31 ? $$mux20$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux : (192288);
 $$mux20$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = $brmerge32 ? $$mux20$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux : (192308);
 $$mux20$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux = $brmerge33 ? $$mux20$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux : (192328);
 $line12 = (192016 + (($$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux*20)|0)|0);
 HEAP32[$line12>>2] = $line;
 $where = (((192016 + (($$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux*20)|0)|0)) + 4|0);
 HEAP32[$where>>2] = $w;
 $btexture = (((192016 + (($$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux*20)|0)|0)) + 8|0);
 HEAP32[$btexture>>2] = $texture;
 HEAP32[$$mux20$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux>>2] = $time;
 $frontsector = ((($line)) + 48|0);
 $4 = HEAP32[$frontsector>>2]|0;
 $soundorg = ((($4)) + 44|0);
 $soundorg18 = (((192016 + (($$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux$mux*20)|0)|0)) + 16|0);
 HEAP32[$soundorg18>>2] = $soundorg;
 STACKTOP = sp;return;
}
function _P_ChangeSwitchTexture($line,$useAgain) {
 $line = $line|0;
 $useAgain = $useAgain|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx19 = 0, $arrayidx23 = 0, $arrayidx39 = 0, $arrayidx56 = 0, $bottomtexture = 0, $bottomtexture62 = 0, $cmp17 = 0, $cmp1737 = 0, $cmp20 = 0, $cmp35 = 0, $cmp52 = 0, $conv = 0, $conv11 = 0, $conv24 = 0, $conv40 = 0;
 var $conv57 = 0, $conv6 = 0, $i$038 = 0, $idxprom = 0, $idxprom27 = 0, $idxprom43 = 0, $idxprom60 = 0, $inc = 0, $midtexture = 0, $midtexture45 = 0, $mul = 0, $phitmp = 0, $phitmp45 = 0, $special12$phi$trans$insert = 0, $tobool = 0, $toptexture = 0, $toptexture29 = 0, $xor = 0, $xor38 = 0, $xor55 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($useAgain|0)!=(0);
 $special12$phi$trans$insert = ((($line)) + 18|0);
 if ($tobool) {
  $$pre = HEAP16[$special12$phi$trans$insert>>1]|0;
  $phitmp = ($$pre<<16>>16)==(11);
  $phitmp45 = $phitmp ? 24 : 23;
  $8 = $phitmp45;
 } else {
  HEAP16[$special12$phi$trans$insert>>1] = 0;
  $8 = 23;
 }
 $0 = HEAP32[99501]|0;
 $arrayidx = ((($line)) + 22|0);
 $1 = HEAP16[$arrayidx>>1]|0;
 $idxprom = $1 << 16 >> 16;
 $toptexture = (((($0) + (($idxprom*20)|0)|0)) + 8|0);
 $2 = HEAP16[$toptexture>>1]|0;
 $conv = $2 << 16 >> 16;
 $midtexture = (((($0) + (($idxprom*20)|0)|0)) + 12|0);
 $3 = HEAP16[$midtexture>>1]|0;
 $conv6 = $3 << 16 >> 16;
 $bottomtexture = (((($0) + (($idxprom*20)|0)|0)) + 10|0);
 $4 = HEAP16[$bottomtexture>>1]|0;
 $conv11 = $4 << 16 >> 16;
 $5 = HEAP32[99553]|0;
 $cmp1737 = ($5|0)>(0);
 if (!($cmp1737)) {
  return;
 }
 $mul = $5 << 1;
 $i$038 = 0;
 while(1) {
  $arrayidx19 = (191616 + ($i$038<<2)|0);
  $6 = HEAP32[$arrayidx19>>2]|0;
  $cmp20 = ($6|0)==($conv|0);
  if ($cmp20) {
   label = 7;
   break;
  }
  $cmp35 = ($6|0)==($conv6|0);
  if ($cmp35) {
   label = 10;
   break;
  }
  $cmp52 = ($6|0)==($conv11|0);
  if ($cmp52) {
   label = 13;
   break;
  }
  $inc = (($i$038) + 1)|0;
  $cmp17 = ($inc|0)<($mul|0);
  if ($cmp17) {
   $i$038 = $inc;
  } else {
   label = 16;
   break;
  }
 }
 if ((label|0) == 7) {
  $7 = HEAP32[(192032)>>2]|0;
  _S_StartSound($7,$8);
  $xor = $i$038 ^ 1;
  $arrayidx23 = (191616 + ($xor<<2)|0);
  $9 = HEAP32[$arrayidx23>>2]|0;
  $conv24 = $9&65535;
  $10 = HEAP32[99501]|0;
  $11 = HEAP16[$arrayidx>>1]|0;
  $idxprom27 = $11 << 16 >> 16;
  $toptexture29 = (((($10) + (($idxprom27*20)|0)|0)) + 8|0);
  HEAP16[$toptexture29>>1] = $conv24;
  if (!($tobool)) {
   return;
  }
  $12 = HEAP32[$arrayidx19>>2]|0;
  _P_StartButton($line,0,$12,35);
  return;
 }
 else if ((label|0) == 10) {
  $13 = HEAP32[(192032)>>2]|0;
  _S_StartSound($13,$8);
  $xor38 = $i$038 ^ 1;
  $arrayidx39 = (191616 + ($xor38<<2)|0);
  $14 = HEAP32[$arrayidx39>>2]|0;
  $conv40 = $14&65535;
  $15 = HEAP32[99501]|0;
  $16 = HEAP16[$arrayidx>>1]|0;
  $idxprom43 = $16 << 16 >> 16;
  $midtexture45 = (((($15) + (($idxprom43*20)|0)|0)) + 12|0);
  HEAP16[$midtexture45>>1] = $conv40;
  if (!($tobool)) {
   return;
  }
  $17 = HEAP32[$arrayidx19>>2]|0;
  _P_StartButton($line,1,$17,35);
  return;
 }
 else if ((label|0) == 13) {
  $18 = HEAP32[(192032)>>2]|0;
  _S_StartSound($18,$8);
  $xor55 = $i$038 ^ 1;
  $arrayidx56 = (191616 + ($xor55<<2)|0);
  $19 = HEAP32[$arrayidx56>>2]|0;
  $conv57 = $19&65535;
  $20 = HEAP32[99501]|0;
  $21 = HEAP16[$arrayidx>>1]|0;
  $idxprom60 = $21 << 16 >> 16;
  $bottomtexture62 = (((($20) + (($idxprom60*20)|0)|0)) + 10|0);
  HEAP16[$bottomtexture62>>1] = $conv57;
  if (!($tobool)) {
   return;
  }
  $22 = HEAP32[$arrayidx19>>2]|0;
  _P_StartButton($line,2,$22,35);
  return;
 }
 else if ((label|0) == 16) {
  return;
 }
}
function _P_UseSpecialLine($thing,$line,$side) {
 $thing = $thing|0;
 $line = $line|0;
 $side = $side|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call102 = 0, $call107 = 0, $call112 = 0, $call117 = 0, $call122 = 0, $call127 = 0, $call132 = 0, $call137 = 0, $call142 = 0, $call147 = 0, $call152 = 0, $call157 = 0;
 var $call162 = 0, $call167 = 0, $call172 = 0, $call177 = 0, $call182 = 0, $call187 = 0, $call192 = 0, $call197 = 0, $call20 = 0, $call202 = 0, $call207 = 0, $call212 = 0, $call217 = 0, $call222 = 0, $call227 = 0, $call232 = 0, $call237 = 0, $call26 = 0, $call31 = 0, $call36 = 0;
 var $call41 = 0, $call46 = 0, $call51 = 0, $call56 = 0, $call61 = 0, $call66 = 0, $call71 = 0, $call76 = 0, $call82 = 0, $call87 = 0, $call92 = 0, $call97 = 0, $cond = 0, $conv13 = 0, $conv8 = 0, $flags = 0, $player = 0, $retval$0 = 0, $special = 0, $special12$phi$trans$insert = 0;
 var $special7 = 0, $tobool = 0, $tobool1 = 0, $tobool103 = 0, $tobool108 = 0, $tobool113 = 0, $tobool118 = 0, $tobool123 = 0, $tobool128 = 0, $tobool133 = 0, $tobool138 = 0, $tobool143 = 0, $tobool148 = 0, $tobool153 = 0, $tobool158 = 0, $tobool16 = 0, $tobool163 = 0, $tobool168 = 0, $tobool173 = 0, $tobool178 = 0;
 var $tobool183 = 0, $tobool188 = 0, $tobool193 = 0, $tobool198 = 0, $tobool203 = 0, $tobool208 = 0, $tobool21 = 0, $tobool213 = 0, $tobool218 = 0, $tobool223 = 0, $tobool228 = 0, $tobool233 = 0, $tobool238 = 0, $tobool27 = 0, $tobool32 = 0, $tobool37 = 0, $tobool4 = 0, $tobool42 = 0, $tobool47 = 0, $tobool52 = 0;
 var $tobool57 = 0, $tobool62 = 0, $tobool67 = 0, $tobool72 = 0, $tobool77 = 0, $tobool83 = 0, $tobool88 = 0, $tobool93 = 0, $tobool98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($side|0)==(0);
 if ($tobool) {
  label = 3;
 } else {
  $special = ((($line)) + 18|0);
  $0 = HEAP16[$special>>1]|0;
  $cond = ($0<<16>>16)==(124);
  if ($cond) {
   label = 3;
  } else {
   $retval$0 = 0;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   $player = ((($thing)) + 132|0);
   $1 = HEAP32[$player>>2]|0;
   $tobool1 = ($1|0)==(0|0);
   if ($tobool1) {
    $flags = ((($line)) + 16|0);
    $2 = HEAP16[$flags>>1]|0;
    $3 = $2 & 32;
    $tobool4 = ($3<<16>>16)==(0);
    if (!($tobool4)) {
     $retval$0 = 0;
     break;
    }
    $special7 = ((($line)) + 18|0);
    $4 = HEAP16[$special7>>1]|0;
    $conv8 = $4 << 16 >> 16;
    switch ($conv8|0) {
    case 34: case 33: case 32: case 1:  {
     $5 = $4;
     break;
    }
    default: {
     $retval$0 = 0;
     break L3;
    }
    }
   } else {
    $special12$phi$trans$insert = ((($line)) + 18|0);
    $$pre = HEAP16[$special12$phi$trans$insert>>1]|0;
    $5 = $$pre;
   }
   $conv13 = $5 << 16 >> 16;
   do {
    switch ($conv13|0) {
    case 118: case 117: case 34: case 33: case 32: case 31: case 28: case 27: case 26: case 1:  {
     _EV_VerticalDoor($line,$thing);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 7:  {
     $call = (_EV_BuildStairs($line,0)|0);
     $tobool16 = ($call|0)==(0);
     if ($tobool16) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 9:  {
     $call20 = (_EV_DoDonut($line)|0);
     $tobool21 = ($call20|0)==(0);
     if ($tobool21) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 11:  {
     _P_ChangeSwitchTexture($line,0);
     _G_ExitLevel();
     $retval$0 = 1;
     break L3;
     break;
    }
    case 14:  {
     $call26 = (_EV_DoPlat($line,2,32)|0);
     $tobool27 = ($call26|0)==(0);
     if ($tobool27) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 15:  {
     $call31 = (_EV_DoPlat($line,2,24)|0);
     $tobool32 = ($call31|0)==(0);
     if ($tobool32) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 18:  {
     $call36 = (_EV_DoFloor($line,4)|0);
     $tobool37 = ($call36|0)==(0);
     if ($tobool37) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 20:  {
     $call41 = (_EV_DoPlat($line,3,0)|0);
     $tobool42 = ($call41|0)==(0);
     if ($tobool42) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 21:  {
     $call46 = (_EV_DoPlat($line,1,0)|0);
     $tobool47 = ($call46|0)==(0);
     if ($tobool47) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 23:  {
     $call51 = (_EV_DoFloor($line,1)|0);
     $tobool52 = ($call51|0)==(0);
     if ($tobool52) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 29:  {
     $call56 = (_EV_DoDoor($line,0)|0);
     $tobool57 = ($call56|0)==(0);
     if ($tobool57) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 41:  {
     $call61 = (_EV_DoCeiling($line,0)|0);
     $tobool62 = ($call61|0)==(0);
     if ($tobool62) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 71:  {
     $call66 = (_EV_DoFloor($line,2)|0);
     $tobool67 = ($call66|0)==(0);
     if ($tobool67) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 49:  {
     $call71 = (_EV_DoCeiling($line,3)|0);
     $tobool72 = ($call71|0)==(0);
     if ($tobool72) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 50:  {
     $call76 = (_EV_DoDoor($line,2)|0);
     $tobool77 = ($call76|0)==(0);
     if ($tobool77) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 51:  {
     _P_ChangeSwitchTexture($line,0);
     _G_SecretExitLevel();
     $retval$0 = 1;
     break L3;
     break;
    }
    case 55:  {
     $call82 = (_EV_DoFloor($line,9)|0);
     $tobool83 = ($call82|0)==(0);
     if ($tobool83) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 101:  {
     $call87 = (_EV_DoFloor($line,3)|0);
     $tobool88 = ($call87|0)==(0);
     if ($tobool88) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 102:  {
     $call92 = (_EV_DoFloor($line,0)|0);
     $tobool93 = ($call92|0)==(0);
     if ($tobool93) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 103:  {
     $call97 = (_EV_DoDoor($line,3)|0);
     $tobool98 = ($call97|0)==(0);
     if ($tobool98) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 111:  {
     $call102 = (_EV_DoDoor($line,5)|0);
     $tobool103 = ($call102|0)==(0);
     if ($tobool103) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 112:  {
     $call107 = (_EV_DoDoor($line,6)|0);
     $tobool108 = ($call107|0)==(0);
     if ($tobool108) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 113:  {
     $call112 = (_EV_DoDoor($line,7)|0);
     $tobool113 = ($call112|0)==(0);
     if ($tobool113) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 122:  {
     $call117 = (_EV_DoPlat($line,4,0)|0);
     $tobool118 = ($call117|0)==(0);
     if ($tobool118) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 127:  {
     $call122 = (_EV_BuildStairs($line,1)|0);
     $tobool123 = ($call122|0)==(0);
     if ($tobool123) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 131:  {
     $call127 = (_EV_DoFloor($line,10)|0);
     $tobool128 = ($call127|0)==(0);
     if ($tobool128) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 137: case 135: case 133:  {
     $call132 = (_EV_DoLockedDoor($line,6,$thing)|0);
     $tobool133 = ($call132|0)==(0);
     if ($tobool133) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 140:  {
     $call137 = (_EV_DoFloor($line,12)|0);
     $tobool138 = ($call137|0)==(0);
     if ($tobool138) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,0);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 42:  {
     $call142 = (_EV_DoDoor($line,2)|0);
     $tobool143 = ($call142|0)==(0);
     if ($tobool143) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 43:  {
     $call147 = (_EV_DoCeiling($line,0)|0);
     $tobool148 = ($call147|0)==(0);
     if ($tobool148) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 45:  {
     $call152 = (_EV_DoFloor($line,0)|0);
     $tobool153 = ($call152|0)==(0);
     if ($tobool153) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 60:  {
     $call157 = (_EV_DoFloor($line,1)|0);
     $tobool158 = ($call157|0)==(0);
     if ($tobool158) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 61:  {
     $call162 = (_EV_DoDoor($line,3)|0);
     $tobool163 = ($call162|0)==(0);
     if ($tobool163) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 62:  {
     $call167 = (_EV_DoPlat($line,1,1)|0);
     $tobool168 = ($call167|0)==(0);
     if ($tobool168) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 63:  {
     $call172 = (_EV_DoDoor($line,0)|0);
     $tobool173 = ($call172|0)==(0);
     if ($tobool173) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 64:  {
     $call177 = (_EV_DoFloor($line,3)|0);
     $tobool178 = ($call177|0)==(0);
     if ($tobool178) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 66:  {
     $call182 = (_EV_DoPlat($line,2,24)|0);
     $tobool183 = ($call182|0)==(0);
     if ($tobool183) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 67:  {
     $call187 = (_EV_DoPlat($line,2,32)|0);
     $tobool188 = ($call187|0)==(0);
     if ($tobool188) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 65:  {
     $call192 = (_EV_DoFloor($line,9)|0);
     $tobool193 = ($call192|0)==(0);
     if ($tobool193) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 68:  {
     $call197 = (_EV_DoPlat($line,3,0)|0);
     $tobool198 = ($call197|0)==(0);
     if ($tobool198) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 69:  {
     $call202 = (_EV_DoFloor($line,4)|0);
     $tobool203 = ($call202|0)==(0);
     if ($tobool203) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 70:  {
     $call207 = (_EV_DoFloor($line,2)|0);
     $tobool208 = ($call207|0)==(0);
     if ($tobool208) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 114:  {
     $call212 = (_EV_DoDoor($line,5)|0);
     $tobool213 = ($call212|0)==(0);
     if ($tobool213) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 115:  {
     $call217 = (_EV_DoDoor($line,6)|0);
     $tobool218 = ($call217|0)==(0);
     if ($tobool218) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 116:  {
     $call222 = (_EV_DoDoor($line,7)|0);
     $tobool223 = ($call222|0)==(0);
     if ($tobool223) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 123:  {
     $call227 = (_EV_DoPlat($line,4,0)|0);
     $tobool228 = ($call227|0)==(0);
     if ($tobool228) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 132:  {
     $call232 = (_EV_DoFloor($line,10)|0);
     $tobool233 = ($call232|0)==(0);
     if ($tobool233) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 136: case 134: case 99:  {
     $call237 = (_EV_DoLockedDoor($line,6,$thing)|0);
     $tobool238 = ($call237|0)==(0);
     if ($tobool238) {
      $retval$0 = 1;
      break L3;
     }
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 138:  {
     _EV_LightTurnOn($line,255);
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    case 139:  {
     _EV_LightTurnOn($line,35);
     _P_ChangeSwitchTexture($line,1);
     $retval$0 = 1;
     break L3;
     break;
    }
    default: {
     $retval$0 = 1;
     break L3;
    }
    }
   } while(0);
  }
 } while(0);
 return ($retval$0|0);
}
function _EV_Teleport($line,$side,$thing) {
 $line = $line|0;
 $side = $side|0;
 $thing = $thing|0;
 var $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add47 = 0, $add51 = 0, $and = 0, $angle = 0, $angle59 = 0, $arrayidx46 = 0, $arrayidx49 = 0, $call = 0, $call44 = 0, $call53 = 0, $cmp = 0;
 var $cmp12 = 0, $cmp1245 = 0, $cmp15 = 0, $cmp19 = 0, $cmp24 = 0, $cmp33 = 0, $cmp4 = 0, $cmp447 = 0, $cmp8 = 0, $flags = 0, $floorz = 0, $function = 0, $i$048 = 0, $inc = 0, $momx = 0, $momy = 0, $momz = 0, $mul = 0, $mul50 = 0, $next = 0;
 var $or$cond = 0, $player = 0, $reactiontime = 0, $retval$0 = 0, $shr = 0, $sub$ptr$div = 0, $sub$ptr$sub = 0, $subsector = 0, $tag3 = 0, $tag6 = 0, $thinker$0 = 0, $thinker$044 = 0, $thinker$046 = 0, $tobool = 0, $tobool30 = 0, $tobool38 = 0, $tobool55 = 0, $type = 0, $viewheight = 0, $viewz = 0;
 var $x = 0, $x28 = 0, $y = 0, $y29 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $flags = ((($thing)) + 104|0);
 $0 = HEAP32[$flags>>2]|0;
 $and = $0 & 65536;
 $tobool = ($and|0)!=(0);
 $cmp = ($side|0)==(1);
 $or$cond = $cmp | $tobool;
 if ($or$cond) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $tag3 = ((($line)) + 20|0);
 $1 = HEAP16[$tag3>>1]|0;
 $2 = HEAP32[99505]|0;
 $cmp447 = ($2|0)>(0);
 if (!($cmp447)) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $3 = HEAP32[99506]|0;
 $thinker$044 = HEAP32[(398220)>>2]|0;
 $cmp1245 = ($thinker$044|0)==(398216|0);
 $$cast = $3;
 if ($cmp1245) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $i$048 = 0;
 L10: while(1) {
  $tag6 = (((($3) + (($i$048*88)|0)|0)) + 16|0);
  $4 = HEAP16[$tag6>>1]|0;
  $cmp8 = ($4<<16>>16)==($1<<16>>16);
  if ($cmp8) {
   $thinker$046 = $thinker$044;
   while(1) {
    $function = ((($thinker$046)) + 8|0);
    $5 = HEAP32[$function>>2]|0;
    $cmp15 = ($5|0)==(136|0);
    if ($cmp15) {
     $type = ((($thinker$046)) + 88|0);
     $6 = HEAP32[$type>>2]|0;
     $cmp19 = ($6|0)==(41);
     if ($cmp19) {
      $subsector = ((($thinker$046)) + 52|0);
      $7 = HEAP32[$subsector>>2]|0;
      $8 = HEAP32[$7>>2]|0;
      $sub$ptr$sub = (($8) - ($$cast))|0;
      $sub$ptr$div = (($sub$ptr$sub|0) / 88)&-1;
      $cmp24 = ($sub$ptr$div|0)==($i$048|0);
      if ($cmp24) {
       break L10;
      }
     }
    }
    $next = ((($thinker$046)) + 4|0);
    $thinker$0 = HEAP32[$next>>2]|0;
    $cmp12 = ($thinker$0|0)==(398216|0);
    if ($cmp12) {
     break;
    } else {
     $thinker$046 = $thinker$0;
    }
   }
  }
  $inc = (($i$048) + 1)|0;
  $cmp4 = ($inc|0)<($2|0);
  if ($cmp4) {
   $i$048 = $inc;
  } else {
   $retval$0 = 0;
   label = 20;
   break;
  }
 }
 if ((label|0) == 20) {
  return ($retval$0|0);
 }
 $x = ((($thing)) + 12|0);
 $9 = HEAP32[$x>>2]|0;
 $y = ((($thing)) + 16|0);
 $10 = HEAP32[$y>>2]|0;
 $z = ((($thing)) + 20|0);
 $11 = HEAP32[$z>>2]|0;
 $x28 = ((($thinker$046)) + 12|0);
 $12 = HEAP32[$x28>>2]|0;
 $y29 = ((($thinker$046)) + 16|0);
 $13 = HEAP32[$y29>>2]|0;
 $call = (_P_TeleportMove($thing,$12,$13)|0);
 $tobool30 = ($call|0)==(0);
 if ($tobool30) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $14 = HEAP32[32141]|0;
 $cmp33 = ($14|0)==(7);
 if (!($cmp33)) {
  $floorz = ((($thing)) + 56|0);
  $15 = HEAP32[$floorz>>2]|0;
  HEAP32[$z>>2] = $15;
 }
 $player = ((($thing)) + 132|0);
 $16 = HEAP32[$player>>2]|0;
 $tobool38 = ($16|0)==(0|0);
 if (!($tobool38)) {
  $17 = HEAP32[$z>>2]|0;
  $viewheight = ((($16)) + 28|0);
  $18 = HEAP32[$viewheight>>2]|0;
  $add = (($18) + ($17))|0;
  $viewz = ((($16)) + 24|0);
  HEAP32[$viewz>>2] = $add;
 }
 $call44 = (_P_SpawnMobj($9,$10,$11,39)|0);
 _S_StartSound($call44,35);
 $angle = ((($thinker$046)) + 32|0);
 $19 = HEAP32[$angle>>2]|0;
 $shr = $19 >>> 19;
 $20 = HEAP32[$x28>>2]|0;
 $arrayidx46 = ((82912) + ($shr<<2)|0);
 $21 = HEAP32[$arrayidx46>>2]|0;
 $mul = ($21*20)|0;
 $add47 = (($mul) + ($20))|0;
 $22 = HEAP32[$y29>>2]|0;
 $arrayidx49 = (74720 + ($shr<<2)|0);
 $23 = HEAP32[$arrayidx49>>2]|0;
 $mul50 = ($23*20)|0;
 $add51 = (($mul50) + ($22))|0;
 $24 = HEAP32[$z>>2]|0;
 $call53 = (_P_SpawnMobj($add47,$add51,$24,39)|0);
 _S_StartSound($call53,35);
 $25 = HEAP32[$player>>2]|0;
 $tobool55 = ($25|0)==(0|0);
 if (!($tobool55)) {
  $reactiontime = ((($thing)) + 124|0);
  HEAP32[$reactiontime>>2] = 18;
 }
 $26 = HEAP32[$angle>>2]|0;
 $angle59 = ((($thing)) + 32|0);
 HEAP32[$angle59>>2] = $26;
 $momz = ((($thing)) + 80|0);
 HEAP32[$momz>>2] = 0;
 $momy = ((($thing)) + 76|0);
 HEAP32[$momy>>2] = 0;
 $momx = ((($thing)) + 72|0);
 HEAP32[$momx>>2] = 0;
 $retval$0 = 1;
 return ($retval$0|0);
}
function _P_InitThinkers() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(398220)>>2] = 398216;
 HEAP32[99554] = 398216;
 return;
}
function _P_AddThinker($thinker) {
 $thinker = $thinker|0;
 var $$cast = 0, $0 = 0, $next = 0, $next1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99554]|0;
 $next = ((($0)) + 4|0);
 HEAP32[$next>>2] = $thinker;
 $next1 = ((($thinker)) + 4|0);
 HEAP32[$next1>>2] = 398216;
 $$cast = $0;
 HEAP32[$thinker>>2] = $$cast;
 HEAP32[99554] = $thinker;
 return;
}
function _P_RemoveThinker($thinker) {
 $thinker = $thinker|0;
 var $acv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $acv = ((($thinker)) + 8|0);
 HEAP32[$acv>>2] = (-1);
 return;
}
function _P_Ticker() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $acv$i = 0;
 var $cmp = 0, $cmp$i = 0, $cmp12$i = 0, $currentthinker$0$i = 0, $currentthinker$011$i = 0, $currentthinker$013$i = 0, $inc14 = 0, $magicptr$i = 0, $next$i = 0, $next11$i = 0, $next5$i = 0, $tobool = 0, $tobool10 = 0, $tobool10$1 = 0, $tobool10$2 = 0, $tobool10$3 = 0, $tobool2 = 0, $viewz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99089]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  return;
 }
 $1 = HEAP32[99094]|0;
 $2 = HEAP32[99384]|0;
 $tobool2 = ($2|0)==(0);
 $3 = HEAP32[99092]|0;
 $4 = $3 | $1;
 $5 = ($4|0)!=(0);
 $6 = $tobool2 | $5;
 if (!($6)) {
  $7 = HEAP32[99076]|0;
  $viewz = (((181680 + (($7*288)|0)|0)) + 24|0);
  $8 = HEAP32[$viewz>>2]|0;
  $cmp = ($8|0)==(1);
  if (!($cmp)) {
   return;
  }
 }
 $9 = HEAP32[45416]|0;
 $tobool10 = ($9|0)==(0);
 if (!($tobool10)) {
  _P_PlayerThink(181680);
 }
 $10 = HEAP32[(181668)>>2]|0;
 $tobool10$1 = ($10|0)==(0);
 if (!($tobool10$1)) {
  _P_PlayerThink((181968));
 }
 $17 = HEAP32[(181672)>>2]|0;
 $tobool10$2 = ($17|0)==(0);
 if (!($tobool10$2)) {
  _P_PlayerThink((182256));
 }
 $18 = HEAP32[(181676)>>2]|0;
 $tobool10$3 = ($18|0)==(0);
 if (!($tobool10$3)) {
  _P_PlayerThink((182544));
 }
 $currentthinker$011$i = HEAP32[(398220)>>2]|0;
 $cmp12$i = ($currentthinker$011$i|0)==(398216|0);
 L20: do {
  if (!($cmp12$i)) {
   $currentthinker$013$i = $currentthinker$011$i;
   while(1) {
    $acv$i = ((($currentthinker$013$i)) + 8|0);
    $11 = HEAP32[$acv$i>>2]|0;
    $magicptr$i = $11;
    switch ($magicptr$i|0) {
    case -1:  {
     $12 = HEAP32[$currentthinker$013$i>>2]|0;
     $next$i = ((($currentthinker$013$i)) + 4|0);
     $13 = HEAP32[$next$i>>2]|0;
     HEAP32[$13>>2] = $12;
     $14 = $13;
     $15 = HEAP32[$currentthinker$013$i>>2]|0;
     $next5$i = ((($15)) + 4|0);
     HEAP32[$next5$i>>2] = $14;
     _Z_Free($currentthinker$013$i);
     break;
    }
    case 0:  {
     break;
    }
    default: {
     FUNCTION_TABLE_vi[$11 & 255]($currentthinker$013$i);
    }
    }
    $next11$i = ((($currentthinker$013$i)) + 4|0);
    $currentthinker$0$i = HEAP32[$next11$i>>2]|0;
    $cmp$i = ($currentthinker$0$i|0)==(398216|0);
    if ($cmp$i) {
     break L20;
    } else {
     $currentthinker$013$i = $currentthinker$0$i;
    }
   }
  }
 } while(0);
 _P_UpdateSpecials();
 _P_RespawnSpecials();
 $16 = HEAP32[99557]|0;
 $inc14 = (($16) + 1)|0;
 HEAP32[99557] = $inc14;
 return;
}
function _P_CalcHeight($player) {
 $player = $player|0;
 var $$ph = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $add26 = 0, $add35 = 0, $add56 = 0, $add5646 = 0, $add67 = 0, $add68 = 0, $and = 0, $and29 = 0, $arrayidx = 0, $bob7 = 0, $call = 0, $call31 = 0, $call6 = 0, $ceilingz72 = 0, $cheats = 0, $cmp = 0, $cmp32 = 0, $cmp37 = 0;
 var $cmp43 = 0, $cmp47 = 0, $cmp74 = 0, $deltaviewheight = 0, $div = 0, $momx = 0, $momy = 0, $mul = 0, $or$cond = 0, $playerstate = 0, $shr = 0, $spec$select = 0, $spec$store$select42 = 0, $spec$store$select4248 = 0, $spec$store$select4249 = 0, $spec$store$select43 = 0, $sub73 = 0, $tobool = 0, $tobool11 = 0, $tobool53 = 0;
 var $tobool58 = 0, $tobool5847 = 0, $viewheight = 0, $viewheight34 = 0, $viewheight66$phi$trans$insert = 0, $viewz = 0, $viewz69 = 0, $z = 0, $z65 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$player>>2]|0;
 $momx = ((($0)) + 72|0);
 $1 = HEAP32[$momx>>2]|0;
 $call = (_FixedMul($1,$1)|0);
 $2 = HEAP32[$player>>2]|0;
 $momy = ((($2)) + 76|0);
 $3 = HEAP32[$momy>>2]|0;
 $call6 = (_FixedMul($3,$3)|0);
 $add = (($call6) + ($call))|0;
 $bob7 = ((($player)) + 36|0);
 $shr = $add >> 2;
 $cmp = ($add|0)>(4194307);
 $spec$select = $cmp ? 1048576 : $shr;
 HEAP32[$bob7>>2] = $spec$select;
 $cheats = ((($player)) + 204|0);
 $4 = HEAP32[$cheats>>2]|0;
 $and = $4 & 4;
 $tobool = ($and|0)==(0);
 $5 = HEAP32[99558]|0;
 $tobool11 = ($5|0)!=(0);
 $or$cond = $tobool & $tobool11;
 if (!($or$cond)) {
  $6 = HEAP32[$player>>2]|0;
  $z = ((($6)) + 20|0);
  $viewz = ((($player)) + 24|0);
  $7 = HEAP32[$z>>2]|0;
  $viewheight = ((($player)) + 28|0);
  $8 = HEAP32[$viewheight>>2]|0;
  $add26 = (($8) + ($7))|0;
  HEAP32[$viewz>>2] = $add26;
  return;
 }
 $9 = HEAP32[99557]|0;
 $mul = ($9*409)|0;
 $and29 = $mul & 8191;
 $div = (($spec$select|0) / 2)&-1;
 $arrayidx = (74720 + ($and29<<2)|0);
 $10 = HEAP32[$arrayidx>>2]|0;
 $call31 = (_FixedMul($div,$10)|0);
 $playerstate = ((($player)) + 4|0);
 $11 = HEAP32[$playerstate>>2]|0;
 $cmp32 = ($11|0)==(0);
 do {
  if ($cmp32) {
   $deltaviewheight = ((($player)) + 32|0);
   $12 = HEAP32[$deltaviewheight>>2]|0;
   $viewheight34 = ((($player)) + 28|0);
   $13 = HEAP32[$viewheight34>>2]|0;
   $add35 = (($13) + ($12))|0;
   HEAP32[$viewheight34>>2] = $add35;
   $cmp37 = ($add35|0)>(2686976);
   if ($cmp37) {
    HEAP32[$viewheight34>>2] = 2686976;
    HEAP32[$deltaviewheight>>2] = 0;
    $16 = 2686976;
    break;
   }
   $cmp43 = ($add35|0)<(1343488);
   if ($cmp43) {
    HEAP32[$viewheight34>>2] = 1343488;
    $cmp47 = ($12|0)<(1);
    if ($cmp47) {
     HEAP32[$deltaviewheight>>2] = 1;
     $$ph = 1;
    } else {
     $$ph = $12;
    }
    $add5646 = (($$ph) + 16384)|0;
    $tobool5847 = ($add5646|0)==(0);
    $spec$store$select4248 = $tobool5847 ? 1 : $add5646;
    $18 = 1343488;$spec$store$select4249 = $spec$store$select4248;
   } else {
    $tobool53 = ($12|0)==(0);
    $add56 = (($12) + 16384)|0;
    $tobool58 = ($add56|0)==(0);
    $spec$store$select42 = $tobool58 ? 1 : $add56;
    if ($tobool53) {
     $16 = $add35;
     break;
    } else {
     $18 = $add35;$spec$store$select4249 = $spec$store$select42;
    }
   }
   HEAP32[$deltaviewheight>>2] = $spec$store$select4249;
   $16 = $18;
  } else {
   $viewheight66$phi$trans$insert = ((($player)) + 28|0);
   $$pre = HEAP32[$viewheight66$phi$trans$insert>>2]|0;
   $16 = $$pre;
  }
 } while(0);
 $14 = HEAP32[$player>>2]|0;
 $z65 = ((($14)) + 20|0);
 $15 = HEAP32[$z65>>2]|0;
 $add67 = (($15) + ($call31))|0;
 $add68 = (($add67) + ($16))|0;
 $viewz69 = ((($player)) + 24|0);
 HEAP32[$viewz69>>2] = $add68;
 $ceilingz72 = ((($14)) + 60|0);
 $17 = HEAP32[$ceilingz72>>2]|0;
 $sub73 = (($17) + -262144)|0;
 $cmp74 = ($add68|0)>($sub73|0);
 $spec$store$select43 = $cmp74 ? $sub73 : $add68;
 HEAP32[$viewz69>>2] = $spec$store$select43;
 return;
}
function _P_MovePlayer($player) {
 $player = $player|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0, $add$i24 = 0, $add4$i = 0, $add4$i28 = 0, $angle = 0, $angle17 = 0, $angle8 = 0, $angleturn = 0, $arrayidx$i = 0, $arrayidx$i20 = 0;
 var $arrayidx1$i = 0, $arrayidx1$i25 = 0, $call$i = 0, $call$i21 = 0, $call2$i = 0, $call2$i26 = 0, $cmp = 0, $cmp30 = 0, $conv11 = 0, $conv18 = 0, $conv4 = 0, $conv5 = 0, $floorz = 0, $forwardmove = 0, $momx$i = 0, $momx$i23 = 0, $momy$i = 0, $momy$i27 = 0, $mul = 0, $mul20 = 0;
 var $or$cond = 0, $or$cond1 = 0, $shl = 0, $shr$i = 0, $shr$i19 = 0, $sidemove = 0, $state = 0, $sub = 0, $tobool = 0, $tobool12 = 0, $tobool14 = 0, $tobool24 = 0, $tobool27 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $angleturn = ((($player)) + 10|0);
 $0 = HEAP16[$angleturn>>1]|0;
 $conv18 = $0&65535;
 $shl = $conv18 << 16;
 $1 = HEAP32[$player>>2]|0;
 $angle = ((($1)) + 32|0);
 $2 = HEAP32[$angle>>2]|0;
 $add = (($2) + ($shl))|0;
 HEAP32[$angle>>2] = $add;
 $z = ((($1)) + 20|0);
 $3 = HEAP32[$z>>2]|0;
 $floorz = ((($1)) + 56|0);
 $4 = HEAP32[$floorz>>2]|0;
 $cmp = ($3|0)<=($4|0);
 $conv4 = $cmp&1;
 HEAP32[99558] = $conv4;
 $forwardmove = ((($player)) + 8|0);
 $5 = HEAP8[$forwardmove>>0]|0;
 $tobool = ($5<<24>>24)!=(0);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  $conv5 = $5 << 24 >> 24;
  $6 = HEAP32[$player>>2]|0;
  $angle8 = ((($6)) + 32|0);
  $7 = HEAP32[$angle8>>2]|0;
  $mul = $conv5 << 11;
  $shr$i = $7 >>> 19;
  $arrayidx$i = ((82912) + ($shr$i<<2)|0);
  $8 = HEAP32[$arrayidx$i>>2]|0;
  $call$i = (_FixedMul($mul,$8)|0);
  $9 = HEAP32[$player>>2]|0;
  $momx$i = ((($9)) + 72|0);
  $10 = HEAP32[$momx$i>>2]|0;
  $add$i = (($10) + ($call$i))|0;
  HEAP32[$momx$i>>2] = $add$i;
  $arrayidx1$i = (74720 + ($shr$i<<2)|0);
  $11 = HEAP32[$arrayidx1$i>>2]|0;
  $call2$i = (_FixedMul($mul,$11)|0);
  $12 = HEAP32[$player>>2]|0;
  $momy$i = ((($12)) + 76|0);
  $13 = HEAP32[$momy$i>>2]|0;
  $add4$i = (($13) + ($call2$i))|0;
  HEAP32[$momy$i>>2] = $add4$i;
  $$pre = HEAP32[99558]|0;
  $15 = $$pre;
 } else {
  $15 = $conv4;
 }
 $sidemove = ((($player)) + 9|0);
 $14 = HEAP8[$sidemove>>0]|0;
 $tobool12 = ($14<<24>>24)!=(0);
 $tobool14 = ($15|0)!=(0);
 $or$cond1 = $tobool12 & $tobool14;
 if ($or$cond1) {
  $conv11 = $14 << 24 >> 24;
  $16 = HEAP32[$player>>2]|0;
  $angle17 = ((($16)) + 32|0);
  $17 = HEAP32[$angle17>>2]|0;
  $sub = (($17) + -1073741824)|0;
  $mul20 = $conv11 << 11;
  $shr$i19 = $sub >>> 19;
  $arrayidx$i20 = ((82912) + ($shr$i19<<2)|0);
  $18 = HEAP32[$arrayidx$i20>>2]|0;
  $call$i21 = (_FixedMul($mul20,$18)|0);
  $19 = HEAP32[$player>>2]|0;
  $momx$i23 = ((($19)) + 72|0);
  $20 = HEAP32[$momx$i23>>2]|0;
  $add$i24 = (($20) + ($call$i21))|0;
  HEAP32[$momx$i23>>2] = $add$i24;
  $arrayidx1$i25 = (74720 + ($shr$i19<<2)|0);
  $21 = HEAP32[$arrayidx1$i25>>2]|0;
  $call2$i26 = (_FixedMul($mul20,$21)|0);
  $22 = HEAP32[$player>>2]|0;
  $momy$i27 = ((($22)) + 76|0);
  $23 = HEAP32[$momy$i27>>2]|0;
  $add4$i28 = (($23) + ($call2$i26))|0;
  HEAP32[$momy$i27>>2] = $add4$i28;
 }
 $24 = HEAP8[$forwardmove>>0]|0;
 $tobool24 = ($24<<24>>24)==(0);
 if ($tobool24) {
  $25 = HEAP8[$sidemove>>0]|0;
  $tobool27 = ($25<<24>>24)==(0);
  if ($tobool27) {
   return;
  }
 }
 $26 = HEAP32[$player>>2]|0;
 $state = ((($26)) + 100|0);
 $27 = HEAP32[$state>>2]|0;
 $cmp30 = ($27|0)==((7660)|0);
 if (!($cmp30)) {
  return;
 }
 (_P_SetMobjState($26,150)|0);
 return;
}
function _P_DeathThink($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $angle21 = 0, $attacker = 0, $buttons = 0, $call = 0, $cmp = 0, $cmp11 = 0, $cmp3 = 0, $cmp34 = 0, $cmp8 = 0, $conv = 0, $damagecount = 0, $damagecount46 = 0, $dec = 0, $dec50 = 0, $deltaviewheight = 0, $floorz = 0, $playerstate = 0, $spec$select = 0, $sub = 0, $sub22 = 0;
 var $sub22$off = 0, $sub42 = 0, $tobool = 0, $tobool30 = 0, $tobool47 = 0, $tobool54 = 0, $viewheight = 0, $x = 0, $x17 = 0, $y = 0, $y19 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _P_MovePsprites($player);
 $viewheight = ((($player)) + 28|0);
 $0 = HEAP32[$viewheight>>2]|0;
 $cmp = ($0|0)>(393216);
 $sub = (($0) + -65536)|0;
 $1 = $cmp ? $sub : $0;
 $cmp3 = ($1|0)<(393216);
 $2 = $cmp | $cmp3;
 if ($2) {
  $spec$select = $cmp3 ? 393216 : $1;
  HEAP32[$viewheight>>2] = $spec$select;
 }
 $deltaviewheight = ((($player)) + 32|0);
 HEAP32[$deltaviewheight>>2] = 0;
 $3 = HEAP32[$player>>2]|0;
 $z = ((($3)) + 20|0);
 $4 = HEAP32[$z>>2]|0;
 $floorz = ((($3)) + 56|0);
 $5 = HEAP32[$floorz>>2]|0;
 $cmp8 = ($4|0)<=($5|0);
 $conv = $cmp8&1;
 HEAP32[99558] = $conv;
 _P_CalcHeight($player);
 $attacker = ((($player)) + 236|0);
 $6 = HEAP32[$attacker>>2]|0;
 $tobool = ($6|0)==(0|0);
 do {
  if ($tobool) {
   label = 11;
  } else {
   $7 = HEAP32[$player>>2]|0;
   $cmp11 = ($6|0)==($7|0);
   if ($cmp11) {
    label = 11;
   } else {
    $x = ((($7)) + 12|0);
    $8 = HEAP32[$x>>2]|0;
    $y = ((($7)) + 16|0);
    $9 = HEAP32[$y>>2]|0;
    $x17 = ((($6)) + 12|0);
    $10 = HEAP32[$x17>>2]|0;
    $y19 = ((($6)) + 16|0);
    $11 = HEAP32[$y19>>2]|0;
    $call = (_R_PointToAngle2($8,$9,$10,$11)|0);
    $12 = HEAP32[$player>>2]|0;
    $angle21 = ((($12)) + 32|0);
    $13 = HEAP32[$angle21>>2]|0;
    $sub22 = (($call) - ($13))|0;
    $sub22$off = (($sub22) + -59652323)|0;
    $14 = ($sub22$off>>>0)>(4175662650);
    if ($14) {
     HEAP32[$angle21>>2] = $call;
     $damagecount = ((($player)) + 228|0);
     $15 = HEAP32[$damagecount>>2]|0;
     $tobool30 = ($15|0)==(0);
     if ($tobool30) {
      break;
     }
     $dec = (($15) + -1)|0;
     HEAP32[$damagecount>>2] = $dec;
     break;
    }
    $cmp34 = ($sub22|0)>(-1);
    if ($cmp34) {
     $add = (($13) + 59652323)|0;
     HEAP32[$angle21>>2] = $add;
     break;
    } else {
     $sub42 = (($13) + -59652323)|0;
     HEAP32[$angle21>>2] = $sub42;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $damagecount46 = ((($player)) + 228|0);
  $16 = HEAP32[$damagecount46>>2]|0;
  $tobool47 = ($16|0)==(0);
  if (!($tobool47)) {
   $dec50 = (($16) + -1)|0;
   HEAP32[$damagecount46>>2] = $dec50;
  }
 }
 $buttons = ((($player)) + 13|0);
 $17 = HEAP8[$buttons>>0]|0;
 $18 = $17 & 2;
 $tobool54 = ($18<<24>>24)==(0);
 if ($tobool54) {
  return;
 }
 $playerstate = ((($player)) + 4|0);
 HEAP32[$playerstate>>2] = 2;
 return;
}
function _P_PlayerThink($player) {
 $player = $player|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and12 = 0;
 var $and123 = 0, $and163 = 0, $and181 = 0, $and3 = 0, $and34 = 0, $and39 = 0, $and7 = 0, $angleturn = 0, $arrayidx = 0, $arrayidx105 = 0, $arrayidx113 = 0, $arrayidx127 = 0, $arrayidx135 = 0, $arrayidx47 = 0, $arrayidx58 = 0, $arrayidx67 = 0, $arrayidx98 = 0, $bonuscount = 0, $buttons = 0, $cheats = 0;
 var $cmp = 0, $cmp158 = 0, $cmp176 = 0, $cmp40 = 0, $cmp44 = 0, $cmp51 = 0, $cmp54 = 0, $cmp62 = 0, $cmp71 = 0, $cmp79 = 0, $conv33 = 0, $damagecount = 0, $dec = 0, $dec110 = 0, $dec118 = 0, $dec132 = 0, $dec140 = 0, $dec145 = 0, $dec150 = 0, $fixedcolormap167 = 0;
 var $fixedcolormap186 = 0, $fixedcolormap189 = 0, $flags = 0, $flags122 = 0, $forwardmove = 0, $inc = 0, $newweapon$0$ph = 0, $newweapon$1 = 0, $or = 0, $or$cond = 0, $or$cond2 = 0, $or$cond64 = 0, $or$cond65 = 0, $pendingweapon = 0, $playerstate = 0, $reactiontime = 0, $readyweapon = 0, $readyweapon61 = 0, $readyweapon70 = 0, $sidemove = 0;
 var $spec$select = 0, $special = 0, $storemerge = 0, $subsector = 0, $tobool = 0, $tobool106 = 0, $tobool114 = 0, $tobool119 = 0, $tobool128 = 0, $tobool136 = 0, $tobool142 = 0, $tobool147 = 0, $tobool154 = 0, $tobool164 = 0, $tobool17 = 0, $tobool172 = 0, $tobool182 = 0, $tobool24 = 0, $tobool28 = 0, $tobool35 = 0;
 var $tobool42 = 0, $tobool48 = 0, $tobool59 = 0, $tobool68 = 0, $tobool8 = 0, $tobool88 = 0, $tobool90 = 0, $tobool99 = 0, $usedown = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cheats = ((($player)) + 204|0);
 $0 = HEAP32[$cheats>>2]|0;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 $1 = HEAP32[$player>>2]|0;
 $flags = ((($1)) + 104|0);
 $2 = HEAP32[$flags>>2]|0;
 $and3 = $2 & -4097;
 $or = $2 | 4096;
 $storemerge = $tobool ? $and3 : $or;
 HEAP32[$flags>>2] = $storemerge;
 $and7 = $storemerge & 128;
 $tobool8 = ($and7|0)==(0);
 if (!($tobool8)) {
  $and12 = $storemerge & -129;
  $sidemove = ((($player)) + 9|0);
  $forwardmove = ((($player)) + 8|0);
  $angleturn = ((($player)) + 10|0);
  HEAP16[$angleturn>>1] = 0;
  HEAP8[$forwardmove>>0] = 100;
  HEAP8[$sidemove>>0] = 0;
  HEAP32[$flags>>2] = $and12;
 }
 $playerstate = ((($player)) + 4|0);
 $3 = HEAP32[$playerstate>>2]|0;
 $cmp = ($3|0)==(1);
 if ($cmp) {
  _P_DeathThink($player);
  return;
 }
 $reactiontime = ((($1)) + 124|0);
 $4 = HEAP32[$reactiontime>>2]|0;
 $tobool17 = ($4|0)==(0);
 if ($tobool17) {
  _P_MovePlayer($player);
 } else {
  $dec = (($4) + -1)|0;
  HEAP32[$reactiontime>>2] = $dec;
 }
 _P_CalcHeight($player);
 $5 = HEAP32[$player>>2]|0;
 $subsector = ((($5)) + 52|0);
 $6 = HEAP32[$subsector>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $special = ((($7)) + 14|0);
 $8 = HEAP16[$special>>1]|0;
 $tobool24 = ($8<<16>>16)==(0);
 if (!($tobool24)) {
  _P_PlayerInSpecialSector($player);
 }
 $buttons = ((($player)) + 13|0);
 $9 = HEAP8[$buttons>>0]|0;
 $tobool28 = ($9<<24>>24)<(0);
 if ($tobool28) {
  HEAP8[$buttons>>0] = 0;
  $10 = 0;
 } else {
  $10 = $9;
 }
 $conv33 = $10&255;
 $and34 = $conv33 & 4;
 $tobool35 = ($and34|0)==(0);
 if (!($tobool35)) {
  $and39 = $conv33 >>> 3;
  $11 = $and39 & 7;
  $cmp40 = ($11|0)==(0);
  if ($cmp40) {
   $arrayidx = ((($player)) + 156|0);
   $12 = HEAP32[$arrayidx>>2]|0;
   $tobool42 = ($12|0)==(0);
   do {
    if ($tobool42) {
     $newweapon$0$ph = 0;
    } else {
     $readyweapon = ((($player)) + 120|0);
     $13 = HEAP32[$readyweapon>>2]|0;
     $cmp44 = ($13|0)==(7);
     if ($cmp44) {
      $arrayidx47 = ((($player)) + 56|0);
      $14 = HEAP32[$arrayidx47>>2]|0;
      $tobool48 = ($14|0)==(0);
      if (!($tobool48)) {
       $newweapon$0$ph = 0;
       break;
      }
     }
     $newweapon$0$ph = 7;
    }
   } while(0);
   $15 = HEAP32[32140]|0;
   $23 = $15;$newweapon$1 = $newweapon$0$ph;
  } else {
   $16 = HEAP32[32140]|0;
   $cmp51 = ($16|0)==(2);
   $cmp54 = ($11|0)==(2);
   $or$cond = $cmp54 & $cmp51;
   if ($or$cond) {
    $arrayidx58 = ((($player)) + 160|0);
    $17 = HEAP32[$arrayidx58>>2]|0;
    $tobool59 = ($17|0)==(0);
    if ($tobool59) {
     $23 = 2;$newweapon$1 = 2;
    } else {
     $readyweapon61 = ((($player)) + 120|0);
     $18 = HEAP32[$readyweapon61>>2]|0;
     $cmp62 = ($18|0)==(8);
     $spec$select = $cmp62 ? 2 : 8;
     $23 = 2;$newweapon$1 = $spec$select;
    }
   } else {
    $23 = $16;$newweapon$1 = $11;
   }
  }
  $arrayidx67 = (((($player)) + 128|0) + ($newweapon$1<<2)|0);
  $19 = HEAP32[$arrayidx67>>2]|0;
  $tobool68 = ($19|0)==(0);
  if (!($tobool68)) {
   $readyweapon70 = ((($player)) + 120|0);
   $20 = HEAP32[$readyweapon70>>2]|0;
   $cmp71 = ($newweapon$1|0)==($20|0);
   if (!($cmp71)) {
    $21 = (($newweapon$1) + -5)|0;
    $22 = ($21>>>0)>(1);
    $cmp79 = ($23|0)!=(0);
    $or$cond2 = $cmp79 | $22;
    if ($or$cond2) {
     $pendingweapon = ((($player)) + 124|0);
     HEAP32[$pendingweapon>>2] = $newweapon$1;
    }
   }
  }
 }
 $24 = $10 & 2;
 $tobool88 = ($24<<24>>24)==(0);
 $usedown = ((($player)) + 200|0);
 if ($tobool88) {
  $$sink = 0;
  label = 29;
 } else {
  $25 = HEAP32[$usedown>>2]|0;
  $tobool90 = ($25|0)==(0);
  if ($tobool90) {
   _P_UseLines($player);
   $$sink = 1;
   label = 29;
  }
 }
 if ((label|0) == 29) {
  HEAP32[$usedown>>2] = $$sink;
 }
 _P_MovePsprites($player);
 $arrayidx98 = ((($player)) + 56|0);
 $26 = HEAP32[$arrayidx98>>2]|0;
 $tobool99 = ($26|0)==(0);
 if (!($tobool99)) {
  $inc = (($26) + 1)|0;
  HEAP32[$arrayidx98>>2] = $inc;
 }
 $arrayidx105 = ((($player)) + 52|0);
 $27 = HEAP32[$arrayidx105>>2]|0;
 $tobool106 = ($27|0)==(0);
 if (!($tobool106)) {
  $dec110 = (($27) + -1)|0;
  HEAP32[$arrayidx105>>2] = $dec110;
 }
 $arrayidx113 = ((($player)) + 60|0);
 $28 = HEAP32[$arrayidx113>>2]|0;
 $tobool114 = ($28|0)==(0);
 if (!($tobool114)) {
  $dec118 = (($28) + -1)|0;
  HEAP32[$arrayidx113>>2] = $dec118;
  $tobool119 = ($dec118|0)==(0);
  if ($tobool119) {
   $29 = HEAP32[$player>>2]|0;
   $flags122 = ((($29)) + 104|0);
   $30 = HEAP32[$flags122>>2]|0;
   $and123 = $30 & -262145;
   HEAP32[$flags122>>2] = $and123;
  }
 }
 $arrayidx127 = ((($player)) + 72|0);
 $31 = HEAP32[$arrayidx127>>2]|0;
 $tobool128 = ($31|0)==(0);
 if ($tobool128) {
  $36 = 0;
 } else {
  $dec132 = (($31) + -1)|0;
  HEAP32[$arrayidx127>>2] = $dec132;
  $36 = $dec132;
 }
 $arrayidx135 = ((($player)) + 64|0);
 $32 = HEAP32[$arrayidx135>>2]|0;
 $tobool136 = ($32|0)==(0);
 if (!($tobool136)) {
  $dec140 = (($32) + -1)|0;
  HEAP32[$arrayidx135>>2] = $dec140;
 }
 $damagecount = ((($player)) + 228|0);
 $33 = HEAP32[$damagecount>>2]|0;
 $tobool142 = ($33|0)==(0);
 if (!($tobool142)) {
  $dec145 = (($33) + -1)|0;
  HEAP32[$damagecount>>2] = $dec145;
 }
 $bonuscount = ((($player)) + 232|0);
 $34 = HEAP32[$bonuscount>>2]|0;
 $tobool147 = ($34|0)==(0);
 if (!($tobool147)) {
  $dec150 = (($34) + -1)|0;
  HEAP32[$bonuscount>>2] = $dec150;
 }
 $35 = HEAP32[$arrayidx105>>2]|0;
 $tobool154 = ($35|0)==(0);
 if (!($tobool154)) {
  $cmp158 = ($35|0)<(129);
  $and163 = $35 & 8;
  $tobool164 = ($and163|0)==(0);
  $or$cond64 = $cmp158 & $tobool164;
  $fixedcolormap167 = ((($player)) + 244|0);
  if ($or$cond64) {
   HEAP32[$fixedcolormap167>>2] = 0;
   return;
  } else {
   HEAP32[$fixedcolormap167>>2] = 32;
   return;
  }
 }
 $tobool172 = ($36|0)==(0);
 if ($tobool172) {
  $fixedcolormap189 = ((($player)) + 244|0);
  HEAP32[$fixedcolormap189>>2] = 0;
  return;
 }
 $cmp176 = ($36|0)<(129);
 $and181 = $36 & 8;
 $tobool182 = ($and181|0)==(0);
 $or$cond65 = $cmp176 & $tobool182;
 $fixedcolormap186 = ((($player)) + 244|0);
 if ($or$cond65) {
  HEAP32[$fixedcolormap186>>2] = 0;
  return;
 } else {
  HEAP32[$fixedcolormap186>>2] = 1;
  return;
 }
}
function _R_ClearDrawSegs() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99559] = 192336;
 return;
}
function _R_ClipSolidWallSegment($first,$last) {
 $first = $first|0;
 $last = $last|0;
 var $$pre = 0, $$pre85 = 0, $$pre86 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add$lcssa = 0, $add$ptr = 0, $add$ptr25 = 0, $add$ptr2558 = 0, $add56 = 0, $add60 = 0, $cmp = 0, $cmp10 = 0, $cmp1043 = 0, $cmp21 = 0, $cmp28 = 0, $cmp2854 = 0, $cmp3 = 0, $cmp36 = 0, $cmp45 = 0, $cmp50 = 0, $cmp5046 = 0, $cmp6 = 0, $first14$pre$phiZ2D = 0;
 var $incdec$ptr = 0, $incdec$ptr4948 = 0, $incdec$ptr52 = 0, $incdec$ptr52$lcssa = 0, $incdec$ptr5249 = 0, $incdec$ptr8 = 0, $last1 = 0, $last1$le = 0, $last15$pre$phiZ2D = 0, $last30 = 0, $last35 = 0, $next$044 = 0, $next$1$lcssa = 0, $next$157 = 0, $next$157$phi = 0, $next$2 = 0, $next$2$pn = 0, $next$280 = 0, $scevgep = 0, $scevgep78 = 0;
 var $scevgep83 = 0, $start$0 = 0, $start$0$lcssa69 = 0, $storemerge = 0, $sub = 0, $sub27 = 0, $sub2753 = 0, $sub2759 = 0, $sub5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($first) + -1)|0;
 $start$0 = 204624;
 while(1) {
  $last1 = ((($start$0)) + 4|0);
  $0 = HEAP32[$last1>>2]|0;
  $cmp = ($0|0)<($sub|0);
  $incdec$ptr = ((($start$0)) + 8|0);
  if ($cmp) {
   $start$0 = $incdec$ptr;
  } else {
   break;
  }
 }
 $last1$le = ((($start$0)) + 4|0);
 $start$0$lcssa69 = $start$0;
 $1 = HEAP32[$start$0>>2]|0;
 $cmp3 = ($1|0)>($first|0);
 do {
  if ($cmp3) {
   $sub5 = (($1) + -1)|0;
   $cmp6 = ($sub5|0)>($last|0);
   if (!($cmp6)) {
    _R_StoreWallRange($first,$sub5);
    HEAP32[$start$0>>2] = $first;
    $$pre = HEAP32[$last1$le>>2]|0;
    $17 = $$pre;
    break;
   }
   _R_StoreWallRange($first,$last);
   $2 = HEAP32[99560]|0;
   $incdec$ptr8 = ((($2)) + 8|0);
   HEAP32[99560] = $incdec$ptr8;
   $cmp1043 = ($2|0)==($start$0|0);
   if ($cmp1043) {
    $first14$pre$phiZ2D = $start$0;$last15$pre$phiZ2D = $last1$le;
   } else {
    $scevgep = ((($2)) + -8|0);
    $3 = $scevgep;
    $4 = (($3) - ($start$0$lcssa69))|0;
    $5 = $4 >>> 3;
    $6 = $5 ^ -1;
    $next$044 = $2;
    while(1) {
     $add$ptr = ((($next$044)) + -8|0);
     $7 = $add$ptr;
     $8 = $7;
     $9 = HEAP32[$8>>2]|0;
     $10 = (($7) + 4)|0;
     $11 = $10;
     $12 = HEAP32[$11>>2]|0;
     $13 = $next$044;
     $14 = $13;
     HEAP32[$14>>2] = $9;
     $15 = (($13) + 4)|0;
     $16 = $15;
     HEAP32[$16>>2] = $12;
     $cmp10 = ($add$ptr|0)==($start$0|0);
     if ($cmp10) {
      break;
     } else {
      $next$044 = $add$ptr;
     }
    }
    $$pre85 = (($2) + ($6<<3)|0);
    $$pre86 = (((($2) + ($6<<3)|0)) + 4|0);
    $first14$pre$phiZ2D = $$pre85;$last15$pre$phiZ2D = $$pre86;
   }
   HEAP32[$first14$pre$phiZ2D>>2] = $first;
   HEAP32[$last15$pre$phiZ2D>>2] = $last;
   return;
  } else {
   $17 = $0;
  }
 } while(0);
 $cmp21 = ($17|0)<($last|0);
 if (!($cmp21)) {
  return;
 }
 $18 = HEAP32[$incdec$ptr>>2]|0;
 $sub2753 = (($18) + -1)|0;
 $cmp2854 = ($sub2753|0)>($last|0);
 $add56 = (($17) + 1)|0;
 L20: do {
  if ($cmp2854) {
   $add$lcssa = $add56;$next$1$lcssa = $start$0;
   label = 16;
  } else {
   $add$ptr2558 = $incdec$ptr;$add60 = $add56;$next$157 = $start$0;$sub2759 = $sub2753;
   while(1) {
    _R_StoreWallRange($add60,$sub2759);
    $last35 = ((($next$157)) + 12|0);
    $21 = HEAP32[$last35>>2]|0;
    $cmp36 = ($21|0)<($last|0);
    if (!($cmp36)) {
     $next$2 = $add$ptr2558;$storemerge = $21;
     break L20;
    }
    $add$ptr25 = ((($add$ptr2558)) + 8|0);
    $19 = HEAP32[$add$ptr25>>2]|0;
    $sub27 = (($19) + -1)|0;
    $cmp28 = ($sub27|0)>($last|0);
    $last30 = ((($add$ptr2558)) + 4|0);
    $20 = HEAP32[$last30>>2]|0;
    $add = (($20) + 1)|0;
    if ($cmp28) {
     $add$lcssa = $add;$next$1$lcssa = $add$ptr2558;
     label = 16;
     break;
    } else {
     $next$157$phi = $add$ptr2558;$add$ptr2558 = $add$ptr25;$add60 = $add;$sub2759 = $sub27;$next$157 = $next$157$phi;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  _R_StoreWallRange($add$lcssa,$last);
  $next$2 = $next$1$lcssa;$storemerge = $last;
 }
 $next$280 = $next$2;
 HEAP32[$last1$le>>2] = $storemerge;
 $cmp45 = ($next$2|0)==($start$0|0);
 if ($cmp45) {
  return;
 }
 $22 = HEAP32[99560]|0;
 $cmp5046 = ($next$2|0)==($22|0);
 if ($cmp5046) {
  $incdec$ptr52$lcssa = $incdec$ptr;
 } else {
  $scevgep78 = ((($22)) + -8|0);
  $23 = $scevgep78;
  $24 = (($23) - ($next$280))|0;
  $25 = $24 >>> 3;
  $26 = (($25) + 2)|0;
  $incdec$ptr5249 = $incdec$ptr;$next$2$pn = $next$2;
  while(1) {
   $incdec$ptr4948 = ((($next$2$pn)) + 8|0);
   $27 = $incdec$ptr4948;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = (($27) + 4)|0;
   $31 = $30;
   $32 = HEAP32[$31>>2]|0;
   $33 = $incdec$ptr5249;
   $34 = $33;
   HEAP32[$34>>2] = $29;
   $35 = (($33) + 4)|0;
   $36 = $35;
   HEAP32[$36>>2] = $32;
   $cmp50 = ($incdec$ptr4948|0)==($22|0);
   $incdec$ptr52 = ((($incdec$ptr5249)) + 8|0);
   if ($cmp50) {
    break;
   } else {
    $incdec$ptr5249 = $incdec$ptr52;$next$2$pn = $incdec$ptr4948;
   }
  }
  $scevgep83 = (($start$0) + ($26<<3)|0);
  $incdec$ptr52$lcssa = $scevgep83;
 }
 HEAP32[99560] = $incdec$ptr52$lcssa;
 return;
}
function _R_ClipPassWallSegment($first,$last) {
 $first = $first|0;
 $last = $last|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $add$lcssa = 0, $add$ptr = 0, $add$ptr27 = 0, $add25 = 0, $add29 = 0, $cmp = 0, $cmp12 = 0, $cmp18 = 0, $cmp1823 = 0, $cmp26 = 0, $cmp3 = 0;
 var $cmp6 = 0, $incdec$ptr = 0, $last1 = 0, $last1$le = 0, $last20 = 0, $last25 = 0, $start$0 = 0, $start$126 = 0, $start$126$phi = 0, $sub = 0, $sub17 = 0, $sub1722 = 0, $sub1728 = 0, $sub5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($first) + -1)|0;
 $start$0 = 204624;
 while(1) {
  $last1 = ((($start$0)) + 4|0);
  $0 = HEAP32[$last1>>2]|0;
  $cmp = ($0|0)<($sub|0);
  $incdec$ptr = ((($start$0)) + 8|0);
  if ($cmp) {
   $start$0 = $incdec$ptr;
  } else {
   break;
  }
 }
 $last1$le = ((($start$0)) + 4|0);
 $1 = HEAP32[$start$0>>2]|0;
 $cmp3 = ($1|0)>($first|0);
 do {
  if ($cmp3) {
   $sub5 = (($1) + -1)|0;
   $cmp6 = ($sub5|0)>($last|0);
   if (!($cmp6)) {
    _R_StoreWallRange($first,$sub5);
    $$pre = HEAP32[$last1$le>>2]|0;
    $2 = $$pre;
    break;
   }
   _R_StoreWallRange($first,$last);
   return;
  } else {
   $2 = $0;
  }
 } while(0);
 $cmp12 = ($2|0)<($last|0);
 if (!($cmp12)) {
  return;
 }
 $3 = HEAP32[$incdec$ptr>>2]|0;
 $sub1722 = (($3) + -1)|0;
 $cmp1823 = ($sub1722|0)>($last|0);
 $add25 = (($2) + 1)|0;
 L14: do {
  if ($cmp1823) {
   $add$lcssa = $add25;
  } else {
   $add$ptr27 = $incdec$ptr;$add29 = $add25;$start$126 = $start$0;$sub1728 = $sub1722;
   while(1) {
    _R_StoreWallRange($add29,$sub1728);
    $last25 = ((($start$126)) + 12|0);
    $6 = HEAP32[$last25>>2]|0;
    $cmp26 = ($6|0)<($last|0);
    if (!($cmp26)) {
     break;
    }
    $add$ptr = ((($add$ptr27)) + 8|0);
    $4 = HEAP32[$add$ptr>>2]|0;
    $sub17 = (($4) + -1)|0;
    $cmp18 = ($sub17|0)>($last|0);
    $last20 = ((($add$ptr27)) + 4|0);
    $5 = HEAP32[$last20>>2]|0;
    $add = (($5) + 1)|0;
    if ($cmp18) {
     $add$lcssa = $add;
     break L14;
    } else {
     $start$126$phi = $add$ptr27;$add$ptr27 = $add$ptr;$add29 = $add;$sub1728 = $sub17;$start$126 = $start$126$phi;
    }
   }
   return;
  }
 } while(0);
 _R_StoreWallRange($add$lcssa,$last);
 return;
}
function _R_ClearClipSegs() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[51156] = -2147483647;
 HEAP32[(204628)>>2] = -1;
 $0 = HEAP32[99612]|0;
 HEAP32[(204632)>>2] = $0;
 HEAP32[(204636)>>2] = 2147483647;
 HEAP32[99560] = (204640);
 return;
}
function _R_AddLine($line) {
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add28 = 0, $add29 = 0, $angle1$0 = 0, $angle2$0 = 0, $arrayidx = 0, $arrayidx31 = 0, $backsector = 0, $call = 0, $call6 = 0, $ceilingheight = 0, $ceilingheight39 = 0, $ceilingpic = 0, $ceilingpic52 = 0, $cmp = 0;
 var $cmp13 = 0, $cmp19 = 0, $cmp23 = 0, $cmp32 = 0, $cmp37 = 0, $cmp40 = 0, $cmp45 = 0, $cmp49 = 0, $cmp54 = 0, $cmp59 = 0, $cmp65 = 0, $cmp69 = 0, $cmp9 = 0, $floorpic = 0, $floorpic57 = 0, $lightlevel = 0, $lightlevel63 = 0, $midtexture = 0, $mul = 0, $or$cond = 0;
 var $shr = 0, $shr30 = 0, $sidedef = 0, $sub = 0, $sub12 = 0, $sub17 = 0, $sub22 = 0, $sub26 = 0, $sub7 = 0, $sub73 = 0, $sub74 = 0, $sub8 = 0, $tobool = 0, $v2 = 0, $y = 0, $y5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99561] = $line;
 $0 = HEAP32[$line>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $y = ((($0)) + 4|0);
 $2 = HEAP32[$y>>2]|0;
 $call = (_R_PointToAngle($1,$2)|0);
 $v2 = ((($line)) + 4|0);
 $3 = HEAP32[$v2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $y5 = ((($3)) + 4|0);
 $5 = HEAP32[$y5>>2]|0;
 $call6 = (_R_PointToAngle($4,$5)|0);
 $sub = (($call) - ($call6))|0;
 $cmp = ($sub|0)<(0);
 if ($cmp) {
  return;
 }
 HEAP32[99676] = $call;
 $6 = HEAP32[99616]|0;
 $sub7 = (($call) - ($6))|0;
 $sub8 = (($call6) - ($6))|0;
 $7 = HEAP32[99620]|0;
 $add = (($sub7) + ($7))|0;
 $mul = $7 << 1;
 $cmp9 = ($add>>>0)>($mul>>>0);
 if ($cmp9) {
  $sub12 = (($add) - ($mul))|0;
  $cmp13 = ($sub12>>>0)<($sub>>>0);
  if ($cmp13) {
   $angle1$0 = $7;
  } else {
   return;
  }
 } else {
  $angle1$0 = $sub7;
 }
 $sub17 = (($7) - ($sub8))|0;
 $cmp19 = ($sub17>>>0)>($mul>>>0);
 do {
  if ($cmp19) {
   $sub22 = (($sub17) - ($mul))|0;
   $cmp23 = ($sub22>>>0)<($sub>>>0);
   if ($cmp23) {
    $sub26 = (0 - ($7))|0;
    $angle2$0 = $sub26;
    break;
   } else {
    return;
   }
  } else {
   $angle2$0 = $sub8;
  }
 } while(0);
 $add28 = (($angle1$0) + 1073741824)|0;
 $shr = $add28 >>> 19;
 $add29 = (($angle2$0) + 1073741824)|0;
 $shr30 = $add29 >>> 19;
 $arrayidx = (212688 + ($shr<<2)|0);
 $8 = HEAP32[$arrayidx>>2]|0;
 $arrayidx31 = (212688 + ($shr30<<2)|0);
 $9 = HEAP32[$arrayidx31>>2]|0;
 $cmp32 = ($8|0)==($9|0);
 if ($cmp32) {
  return;
 }
 $backsector = ((($line)) + 28|0);
 $10 = HEAP32[$backsector>>2]|0;
 HEAP32[99562] = $10;
 $tobool = ($10|0)==(0|0);
 if (!($tobool)) {
  $ceilingheight = ((($10)) + 4|0);
  $11 = HEAP32[$ceilingheight>>2]|0;
  $12 = HEAP32[99563]|0;
  $13 = HEAP32[$12>>2]|0;
  $cmp37 = ($11|0)>($13|0);
  if ($cmp37) {
   $14 = HEAP32[$10>>2]|0;
   $ceilingheight39 = ((($12)) + 4|0);
   $15 = HEAP32[$ceilingheight39>>2]|0;
   $cmp40 = ($14|0)<($15|0);
   if ($cmp40) {
    $cmp45 = ($11|0)==($15|0);
    $cmp49 = ($14|0)==($13|0);
    $or$cond = $cmp49 & $cmp45;
    if ($or$cond) {
     $ceilingpic = ((($10)) + 10|0);
     $16 = HEAP16[$ceilingpic>>1]|0;
     $ceilingpic52 = ((($12)) + 10|0);
     $17 = HEAP16[$ceilingpic52>>1]|0;
     $cmp54 = ($16<<16>>16)==($17<<16>>16);
     if ($cmp54) {
      $floorpic = ((($10)) + 8|0);
      $18 = HEAP16[$floorpic>>1]|0;
      $floorpic57 = ((($12)) + 8|0);
      $19 = HEAP16[$floorpic57>>1]|0;
      $cmp59 = ($18<<16>>16)==($19<<16>>16);
      if ($cmp59) {
       $lightlevel = ((($10)) + 12|0);
       $20 = HEAP16[$lightlevel>>1]|0;
       $lightlevel63 = ((($12)) + 12|0);
       $21 = HEAP16[$lightlevel63>>1]|0;
       $cmp65 = ($20<<16>>16)==($21<<16>>16);
       if ($cmp65) {
        $22 = HEAP32[99561]|0;
        $sidedef = ((($22)) + 16|0);
        $23 = HEAP32[$sidedef>>2]|0;
        $midtexture = ((($23)) + 12|0);
        $24 = HEAP16[$midtexture>>1]|0;
        $cmp69 = ($24<<16>>16)==(0);
        if ($cmp69) {
         return;
        }
       }
      }
     }
    }
    $sub73 = (($9) + -1)|0;
    _R_ClipPassWallSegment($8,$sub73);
    return;
   }
  }
 }
 $sub74 = (($9) + -1)|0;
 _R_ClipSolidWallSegment($8,$sub74);
 return;
}
function _R_CheckBBox($bspcoord) {
 $bspcoord = $bspcoord|0;
 var $$ = 0, $$46 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $add37 = 0, $add57 = 0, $add58 = 0, $angle1$0 = 0, $angle2$0 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx10 = 0, $arrayidx20 = 0, $arrayidx21 = 0, $arrayidx23 = 0, $arrayidx24 = 0, $arrayidx26 = 0, $arrayidx27 = 0, $arrayidx29 = 0, $arrayidx30 = 0;
 var $arrayidx60 = 0, $arrayidx61 = 0, $boxx$0 = 0, $boxy$0 = 0, $call = 0, $call31 = 0, $cmp = 0, $cmp11 = 0, $cmp16 = 0, $cmp2 = 0, $cmp34 = 0, $cmp38 = 0, $cmp42 = 0, $cmp48 = 0, $cmp52 = 0, $cmp62 = 0, $cmp65 = 0, $cmp66 = 0, $cmp7 = 0, $dec = 0;
 var $incdec$ptr = 0, $last = 0, $mul = 0, $retval$0 = 0, $shr = 0, $shr59 = 0, $spec$select = 0, $start$0 = 0, $sub = 0, $sub32 = 0, $sub33 = 0, $sub41 = 0, $sub46 = 0, $sub51 = 0, $sub55 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99614]|0;
 $arrayidx = ((($bspcoord)) + 8|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $cmp = ($0|0)>($1|0);
 if ($cmp) {
  $arrayidx1 = ((($bspcoord)) + 12|0);
  $2 = HEAP32[$arrayidx1>>2]|0;
  $cmp2 = ($0|0)<($2|0);
  $$ = $cmp2 ? 1 : 2;
  $boxx$0 = $$;
 } else {
  $boxx$0 = 0;
 }
 $3 = HEAP32[99615]|0;
 $4 = HEAP32[$bspcoord>>2]|0;
 $cmp7 = ($3|0)<($4|0);
 if ($cmp7) {
  $arrayidx10 = ((($bspcoord)) + 4|0);
  $5 = HEAP32[$arrayidx10>>2]|0;
  $cmp11 = ($3|0)>($5|0);
  $$46 = $cmp11 ? 4 : 8;
  $boxy$0 = $$46;
 } else {
  $boxy$0 = 0;
 }
 $add = $boxy$0 | $boxx$0;
 $cmp16 = ($add|0)==(5);
 if ($cmp16) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $arrayidx20 = (51200 + ($add<<4)|0);
 $6 = HEAP32[$arrayidx20>>2]|0;
 $arrayidx21 = (($bspcoord) + ($6<<2)|0);
 $7 = HEAP32[$arrayidx21>>2]|0;
 $arrayidx23 = (((51200 + ($add<<4)|0)) + 4|0);
 $8 = HEAP32[$arrayidx23>>2]|0;
 $arrayidx24 = (($bspcoord) + ($8<<2)|0);
 $9 = HEAP32[$arrayidx24>>2]|0;
 $arrayidx26 = (((51200 + ($add<<4)|0)) + 8|0);
 $10 = HEAP32[$arrayidx26>>2]|0;
 $arrayidx27 = (($bspcoord) + ($10<<2)|0);
 $11 = HEAP32[$arrayidx27>>2]|0;
 $arrayidx29 = (((51200 + ($add<<4)|0)) + 12|0);
 $12 = HEAP32[$arrayidx29>>2]|0;
 $arrayidx30 = (($bspcoord) + ($12<<2)|0);
 $13 = HEAP32[$arrayidx30>>2]|0;
 $call = (_R_PointToAngle($7,$9)|0);
 $14 = HEAP32[99616]|0;
 $sub = (($call) - ($14))|0;
 $call31 = (_R_PointToAngle($11,$13)|0);
 $15 = HEAP32[99616]|0;
 $sub32 = (($call31) - ($15))|0;
 $sub33 = (($sub) - ($sub32))|0;
 $cmp34 = ($sub33|0)<(0);
 if ($cmp34) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $16 = HEAP32[99620]|0;
 $add37 = (($16) + ($sub))|0;
 $mul = $16 << 1;
 $cmp38 = ($add37>>>0)>($mul>>>0);
 if ($cmp38) {
  $sub41 = (($add37) - ($mul))|0;
  $cmp42 = ($sub41>>>0)<($sub33>>>0);
  if ($cmp42) {
   $angle1$0 = $16;
  } else {
   $retval$0 = 0;
   return ($retval$0|0);
  }
 } else {
  $angle1$0 = $sub;
 }
 $sub46 = (($16) - ($sub32))|0;
 $cmp48 = ($sub46>>>0)>($mul>>>0);
 do {
  if ($cmp48) {
   $sub51 = (($sub46) - ($mul))|0;
   $cmp52 = ($sub51>>>0)<($sub33>>>0);
   if ($cmp52) {
    $sub55 = (0 - ($16))|0;
    $angle2$0 = $sub55;
    break;
   } else {
    $retval$0 = 0;
    return ($retval$0|0);
   }
  } else {
   $angle2$0 = $sub32;
  }
 } while(0);
 $add57 = (($angle1$0) + 1073741824)|0;
 $shr = $add57 >>> 19;
 $add58 = (($angle2$0) + 1073741824)|0;
 $shr59 = $add58 >>> 19;
 $arrayidx60 = (212688 + ($shr<<2)|0);
 $17 = HEAP32[$arrayidx60>>2]|0;
 $arrayidx61 = (212688 + ($shr59<<2)|0);
 $18 = HEAP32[$arrayidx61>>2]|0;
 $cmp62 = ($17|0)==($18|0);
 if ($cmp62) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $dec = (($18) + -1)|0;
 $start$0 = 204624;
 while(1) {
  $last = ((($start$0)) + 4|0);
  $19 = HEAP32[$last>>2]|0;
  $cmp65 = ($19|0)<($dec|0);
  $incdec$ptr = ((($start$0)) + 8|0);
  if ($cmp65) {
   $start$0 = $incdec$ptr;
  } else {
   break;
  }
 }
 $20 = HEAP32[$start$0>>2]|0;
 $cmp66 = ($17|0)<($20|0);
 $spec$select = $cmp66&1;
 return ($spec$select|0);
}
function _R_Subsector($num) {
 $num = $num|0;
 var $$pre = 0, $$pre13 = 0, $$pre14 = 0, $$pre15 = 0, $$pre16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $arrayidx1 = 0, $call = 0, $call20 = 0, $ceilingheight = 0, $ceilingpic16$phi$trans$insert = 0, $cmp = 0, $cmp12 = 0, $cmp2 = 0, $cmp9 = 0, $conv = 0, $conv19 = 0, $conv6 = 0, $conv7 = 0, $count$012 = 0, $dec = 0, $firstline = 0, $floorpic = 0, $idxprom = 0;
 var $inc = 0, $incdec$ptr = 0, $lightlevel = 0, $lightlevel18 = 0, $line$011 = 0, $numlines = 0, $or$cond = 0, $sector = 0, $storemerge = 0, $storemerge9 = 0, $tobool = 0, $tobool10 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99503]|0;
 $cmp = ($0|0)>($num|0);
 if (!($cmp)) {
  HEAP32[$vararg_buffer>>2] = $num;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $0;
  _I_Error(153939,$vararg_buffer);
  // unreachable;
 }
 $1 = HEAP32[99638]|0;
 $inc = (($1) + 1)|0;
 HEAP32[99638] = $inc;
 $2 = HEAP32[99504]|0;
 $sector = (($2) + ($num<<3)|0);
 $3 = HEAP32[$sector>>2]|0;
 HEAP32[99563] = $3;
 $numlines = (((($2) + ($num<<3)|0)) + 4|0);
 $4 = HEAP16[$numlines>>1]|0;
 $conv = $4 << 16 >> 16;
 $5 = HEAP32[99499]|0;
 $firstline = (((($2) + ($num<<3)|0)) + 6|0);
 $6 = HEAP16[$firstline>>1]|0;
 $idxprom = $6 << 16 >> 16;
 $arrayidx1 = (($5) + ($idxprom<<5)|0);
 $7 = HEAP32[$3>>2]|0;
 $8 = HEAP32[99635]|0;
 $cmp2 = ($7|0)<($8|0);
 if ($cmp2) {
  $floorpic = ((($3)) + 8|0);
  $9 = HEAP16[$floorpic>>1]|0;
  $conv6 = $9 << 16 >> 16;
  $lightlevel = ((($3)) + 12|0);
  $10 = HEAP16[$lightlevel>>1]|0;
  $conv7 = $10 << 16 >> 16;
  $call = (_R_FindPlane($7,$conv6,$conv7)|0);
  $$pre = HEAP32[99563]|0;
  $$pre13 = HEAP32[99635]|0;
  $11 = $$pre;$13 = $$pre13;$storemerge = $call;
 } else {
  $11 = $3;$13 = $8;$storemerge = 0;
 }
 HEAP32[99646] = $storemerge;
 $ceilingheight = ((($11)) + 4|0);
 $12 = HEAP32[$ceilingheight>>2]|0;
 $cmp9 = ($12|0)>($13|0);
 $ceilingpic16$phi$trans$insert = ((($11)) + 10|0);
 $$pre14 = HEAP16[$ceilingpic16$phi$trans$insert>>1]|0;
 $$pre16 = $$pre14 << 16 >> 16;
 $14 = HEAP32[99682]|0;
 $cmp12 = ($14|0)==($$pre16|0);
 $or$cond = $cmp9 | $cmp12;
 if ($or$cond) {
  $lightlevel18 = ((($11)) + 12|0);
  $15 = HEAP16[$lightlevel18>>1]|0;
  $conv19 = $15 << 16 >> 16;
  $call20 = (_R_FindPlane($12,$$pre16,$conv19)|0);
  $$pre15 = HEAP32[99563]|0;
  $16 = $$pre15;$storemerge9 = $call20;
 } else {
  $16 = $11;$storemerge9 = 0;
 }
 HEAP32[99647] = $storemerge9;
 _R_AddSprites($16);
 $tobool10 = ($4<<16>>16)==(0);
 if ($tobool10) {
  STACKTOP = sp;return;
 }
 $count$012 = $conv;$line$011 = $arrayidx1;
 while(1) {
  $dec = (($count$012) + -1)|0;
  _R_AddLine($line$011);
  $incdec$ptr = ((($line$011)) + 32|0);
  $tobool = ($dec|0)==(0);
  if ($tobool) {
   break;
  } else {
   $count$012 = $dec;$line$011 = $incdec$ptr;
  }
 }
 STACKTOP = sp;return;
}
function _R_RenderBSPNode($bspnum) {
 $bspnum = $bspnum|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $and = 0, $and12 = 0, $and2 = 0, $arraydecay = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx4 = 0, $bspnum$tr$lcssa16 = 0, $bspnum$tr14 = 0, $call = 0, $call6 = 0, $cmp = 0, $conv = 0, $conv12 = 0, $conv12$le = 0;
 var $tobool = 0, $tobool13 = 0, $tobool7 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $and12 = $bspnum & 32768;
 $tobool13 = ($and12|0)==(0);
 do {
  if ($tobool13) {
   $bspnum$tr14 = $bspnum;
   while(1) {
    $1 = HEAP32[99508]|0;
    $arrayidx = (($1) + (($bspnum$tr14*52)|0)|0);
    $2 = HEAP32[99614]|0;
    $3 = HEAP32[99615]|0;
    $call = (_R_PointOnSide($2,$3,$arrayidx)|0);
    $arrayidx4 = ((((($1) + (($bspnum$tr14*52)|0)|0)) + 48|0) + ($call<<1)|0);
    $4 = HEAP16[$arrayidx4>>1]|0;
    $conv = $4&65535;
    _R_RenderBSPNode($conv);
    $xor = $call ^ 1;
    $arraydecay = ((((($1) + (($bspnum$tr14*52)|0)|0)) + 16|0) + ($xor<<4)|0);
    $call6 = (_R_CheckBBox($arraydecay)|0);
    $tobool7 = ($call6|0)==(0);
    if ($tobool7) {
     label = 9;
     break;
    }
    $arrayidx11 = ((((($1) + (($bspnum$tr14*52)|0)|0)) + 48|0) + ($xor<<1)|0);
    $0 = HEAP16[$arrayidx11>>1]|0;
    $conv12 = $0&65535;
    $and = $conv12 & 32768;
    $tobool = ($and|0)==(0);
    if ($tobool) {
     $bspnum$tr14 = $conv12;
    } else {
     label = 5;
     break;
    }
   }
   if ((label|0) == 5) {
    $conv12$le = $0&65535;
    $bspnum$tr$lcssa16 = $conv12$le;
    break;
   }
   else if ((label|0) == 9) {
    return;
   }
  } else {
   $cmp = ($bspnum|0)==(-1);
   if ($cmp) {
    _R_Subsector(0);
    return;
   } else {
    $bspnum$tr$lcssa16 = $bspnum;
   }
  }
 } while(0);
 $and2 = $bspnum$tr$lcssa16 & -32769;
 _R_Subsector($and2);
 return;
}
function _R_GenerateComposite($texnum) {
 $texnum = $texnum|0;
 var $$conv1036 = 0, $$pre$i = 0, $$pre22$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr16$i = 0, $add$ptr20$i = 0, $add$ptr21$i = 0, $add$ptr35 = 0, $add7$i = 0, $add8$i = 0;
 var $arraydecay6 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx26 = 0, $arrayidx3 = 0, $arrayidx32 = 0, $arrayidx33 = 0, $arrayidx4 = 0, $call = 0, $call9 = 0, $cmp = 0, $cmp$i = 0, $cmp13$i = 0, $cmp16 = 0, $cmp19$i = 0, $cmp23 = 0, $cmp2337 = 0, $cmp28 = 0, $cmp40 = 0;
 var $cmp5$i = 0, $cmp9$i = 0, $columnofs = 0, $conv = 0, $conv$i = 0, $conv10 = 0, $conv11 = 0, $conv15 = 0, $conv19$pre$phi$iZ2D = 0, $conv2$i = 0, $conv34 = 0, $conv36 = 0, $conv37 = 0, $count$1$i = 0, $height = 0, $i$041 = 0, $inc = 0, $inc39 = 0, $incdec$ptr = 0, $originy = 0;
 var $patch$042 = 0, $patch8 = 0, $patchcount = 0, $spec$select$i = 0, $spec$select17$i = 0, $sub = 0, $sub$i = 0, $topdelta21$i = 0, $width14 = 0, $x$138 = 0, $x2$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99566]|0;
 $arrayidx = (($0) + ($texnum<<2)|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $2 = HEAP32[99567]|0;
 $arrayidx1 = (($2) + ($texnum<<2)|0);
 $3 = HEAP32[$arrayidx1>>2]|0;
 $4 = HEAP32[99568]|0;
 $arrayidx2 = (($4) + ($texnum<<2)|0);
 $call = (_Z_Malloc($3,1,$arrayidx2)|0);
 $5 = HEAP32[99569]|0;
 $arrayidx3 = (($5) + ($texnum<<2)|0);
 $6 = HEAP32[$arrayidx3>>2]|0;
 $7 = HEAP32[99570]|0;
 $arrayidx4 = (($7) + ($texnum<<2)|0);
 $8 = HEAP32[$arrayidx4>>2]|0;
 $patchcount = ((($1)) + 20|0);
 $9 = HEAP16[$patchcount>>1]|0;
 $cmp40 = ($9<<16>>16)>(0);
 if (!($cmp40)) {
  _Z_ChangeTag2($call,8,153974,286);
  return;
 }
 $arraydecay6 = ((($1)) + 24|0);
 $width14 = ((($1)) + 8|0);
 $height = ((($1)) + 10|0);
 $i$041 = 0;$patch$042 = $arraydecay6;
 while(1) {
  $patch8 = ((($patch$042)) + 4|0);
  $10 = HEAP32[$patch8>>2]|0;
  $call9 = (_W_CacheLumpNum($10,8)|0);
  $11 = HEAP16[$patch$042>>1]|0;
  $conv10 = $11 << 16 >> 16;
  $12 = HEAPU8[$call9>>0]|(HEAPU8[$call9+1>>0]<<8);
  $conv11 = $12 << 16 >> 16;
  $add = (($conv11) + ($conv10))|0;
  $13 = ($11<<16>>16)>(0);
  $$conv1036 = $13 ? $11 : 0;
  $14 = $$conv1036&65535;
  $15 = HEAP16[$width14>>1]|0;
  $conv15 = $15 << 16 >> 16;
  $cmp16 = ($add|0)>($conv15|0);
  $x2$0 = $cmp16 ? $conv15 : $add;
  $cmp2337 = ($x2$0|0)>($14|0);
  if ($cmp2337) {
   $columnofs = ((($call9)) + 8|0);
   $originy = ((($patch$042)) + 2|0);
   $x$138 = $14;
   while(1) {
    $arrayidx26 = (($6) + ($x$138<<1)|0);
    $16 = HEAP16[$arrayidx26>>1]|0;
    $cmp28 = ($16<<16>>16)>(-1);
    if (!($cmp28)) {
     $sub = (($x$138) - ($conv10))|0;
     $arrayidx32 = (($columnofs) + ($sub<<2)|0);
     $17 = HEAPU8[$arrayidx32>>0]|(HEAPU8[$arrayidx32+1>>0]<<8)|(HEAPU8[$arrayidx32+2>>0]<<16)|(HEAPU8[$arrayidx32+3>>0]<<24);
     $add$ptr = (($call9) + ($17)|0);
     $arrayidx33 = (($8) + ($x$138<<1)|0);
     $18 = HEAP16[$arrayidx33>>1]|0;
     $conv34 = $18&65535;
     $add$ptr35 = (($call) + ($conv34)|0);
     $19 = HEAP16[$originy>>1]|0;
     $conv36 = $19 << 16 >> 16;
     $20 = HEAP16[$height>>1]|0;
     $conv37 = $20 << 16 >> 16;
     $21 = HEAP8[$add$ptr>>0]|0;
     $cmp19$i = ($21<<24>>24)==(-1);
     if (!($cmp19$i)) {
      $22 = $21;$topdelta21$i = $add$ptr;
      while(1) {
       $conv$i = $22&255;
       $23 = ((($topdelta21$i)) + 1|0);
       $24 = HEAP8[$23>>0]|0;
       $conv2$i = $24&255;
       $add$i = (($conv$i) + ($conv36))|0;
       $cmp5$i = ($add$i|0)<(0);
       $add7$i = $cmp5$i ? $add$i : 0;
       $spec$select$i = (($add7$i) + ($conv2$i))|0;
       $spec$select17$i = $cmp5$i ? 0 : $add$i;
       $add8$i = (($spec$select$i) + ($spec$select17$i))|0;
       $cmp9$i = ($add8$i|0)>($conv37|0);
       $sub$i = (($conv37) - ($spec$select17$i))|0;
       $count$1$i = $cmp9$i ? $sub$i : $spec$select$i;
       $cmp13$i = ($count$1$i|0)>(0);
       if ($cmp13$i) {
        $add$ptr$i = ((($topdelta21$i)) + 3|0);
        $add$ptr16$i = (($add$ptr35) + ($spec$select17$i)|0);
        _memcpy(($add$ptr16$i|0),($add$ptr$i|0),($count$1$i|0))|0;
        $$pre$i = HEAP8[$23>>0]|0;
        $$pre22$i = $$pre$i&255;
        $conv19$pre$phi$iZ2D = $$pre22$i;
       } else {
        $conv19$pre$phi$iZ2D = $conv2$i;
       }
       $add$ptr20$i = (($topdelta21$i) + ($conv19$pre$phi$iZ2D)|0);
       $add$ptr21$i = ((($add$ptr20$i)) + 4|0);
       $25 = HEAP8[$add$ptr21$i>>0]|0;
       $cmp$i = ($25<<24>>24)==(-1);
       if ($cmp$i) {
        break;
       } else {
        $22 = $25;$topdelta21$i = $add$ptr21$i;
       }
      }
     }
    }
    $inc = (($x$138) + 1)|0;
    $cmp23 = ($inc|0)<($x2$0|0);
    if ($cmp23) {
     $x$138 = $inc;
    } else {
     break;
    }
   }
  }
  $inc39 = (($i$041) + 1)|0;
  $incdec$ptr = ((($patch$042)) + 8|0);
  $26 = HEAP16[$patchcount>>1]|0;
  $conv = $26 << 16 >> 16;
  $cmp = ($inc39|0)<($conv|0);
  if ($cmp) {
   $i$041 = $inc39;$patch$042 = $incdec$ptr;
  } else {
   break;
  }
 }
 _Z_ChangeTag2($call,8,153974,286);
 return;
}
function _R_GenerateLookup($texnum) {
 $texnum = $texnum|0;
 var $$conv1450 = 0, $$lcssa = 0, $$pre64 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add36 = 0, $add73 = 0, $arraydecay8 = 0, $arrayidx = 0;
 var $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx31 = 0, $arrayidx34 = 0, $arrayidx35 = 0, $arrayidx38 = 0, $arrayidx4 = 0, $arrayidx49 = 0, $arrayidx59 = 0, $arrayidx60 = 0, $arrayidx62 = 0, $call = 0, $call13 = 0, $cmp = 0, $cmp21 = 0, $cmp28 = 0, $cmp2855 = 0, $cmp46 = 0, $cmp4653 = 0;
 var $cmp58 = 0, $cmp66 = 0, $columnofs = 0, $conv = 0, $conv10 = 0, $conv14 = 0, $conv16 = 0, $conv20 = 0, $conv33 = 0, $conv37 = 0, $conv45 = 0, $conv6 = 0, $conv61 = 0, $conv64 = 0, $height = 0, $i$059 = 0, $inc = 0, $inc39 = 0, $inc41 = 0, $inc76 = 0;
 var $incdec$ptr = 0, $patch$060 = 0, $patch12 = 0, $patchcount = 0, $patchcount9 = 0, $sub = 0, $sub65 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $width = 0, $x$156 = 0, $x$254 = 0, $x2$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $patchcount = sp + 12|0;
 $0 = HEAP32[99566]|0;
 $arrayidx = (($0) + ($texnum<<2)|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $2 = HEAP32[99568]|0;
 $arrayidx1 = (($2) + ($texnum<<2)|0);
 HEAP32[$arrayidx1>>2] = 0;
 $3 = HEAP32[99567]|0;
 $arrayidx2 = (($3) + ($texnum<<2)|0);
 HEAP32[$arrayidx2>>2] = 0;
 $4 = HEAP32[99569]|0;
 $arrayidx3 = (($4) + ($texnum<<2)|0);
 $5 = HEAP32[$arrayidx3>>2]|0;
 $6 = HEAP32[99570]|0;
 $arrayidx4 = (($6) + ($texnum<<2)|0);
 $7 = HEAP32[$arrayidx4>>2]|0;
 $width = ((($1)) + 8|0);
 $8 = HEAP16[$width>>1]|0;
 $conv = $8 << 16 >> 16;
 $call = (_Z_Malloc($conv,1,$patchcount)|0);
 HEAP32[$patchcount>>2] = $call;
 $9 = HEAP16[$width>>1]|0;
 $conv6 = $9 << 16 >> 16;
 _memset(($call|0),0,($conv6|0))|0;
 $patchcount9 = ((($1)) + 20|0);
 $10 = HEAP16[$patchcount9>>1]|0;
 $cmp58 = ($10<<16>>16)>(0);
 if ($cmp58) {
  $arraydecay8 = ((($1)) + 24|0);
  $i$059 = 0;$patch$060 = $arraydecay8;
  while(1) {
   $patch12 = ((($patch$060)) + 4|0);
   $11 = HEAP32[$patch12>>2]|0;
   $call13 = (_W_CacheLumpNum($11,8)|0);
   $12 = HEAP16[$patch$060>>1]|0;
   $conv14 = $12 << 16 >> 16;
   $13 = HEAPU8[$call13>>0]|(HEAPU8[$call13+1>>0]<<8);
   $conv16 = $13 << 16 >> 16;
   $add = (($conv16) + ($conv14))|0;
   $14 = ($12<<16>>16)>(0);
   $$conv1450 = $14 ? $12 : 0;
   $15 = $$conv1450&65535;
   $16 = HEAP16[$width>>1]|0;
   $conv20 = $16 << 16 >> 16;
   $cmp21 = ($add|0)>($conv20|0);
   $x2$0 = $cmp21 ? $conv20 : $add;
   $cmp2855 = ($x2$0|0)>($15|0);
   if ($cmp2855) {
    $columnofs = ((($call13)) + 8|0);
    $x$156 = $15;
    while(1) {
     $17 = HEAP32[$patchcount>>2]|0;
     $arrayidx31 = (($17) + ($x$156)|0);
     $18 = HEAP8[$arrayidx31>>0]|0;
     $inc = (($18) + 1)<<24>>24;
     HEAP8[$arrayidx31>>0] = $inc;
     $19 = HEAP32[$patch12>>2]|0;
     $conv33 = $19&65535;
     $arrayidx34 = (($5) + ($x$156<<1)|0);
     HEAP16[$arrayidx34>>1] = $conv33;
     $sub = (($x$156) - ($conv14))|0;
     $arrayidx35 = (($columnofs) + ($sub<<2)|0);
     $20 = HEAPU8[$arrayidx35>>0]|(HEAPU8[$arrayidx35+1>>0]<<8)|(HEAPU8[$arrayidx35+2>>0]<<16)|(HEAPU8[$arrayidx35+3>>0]<<24);
     $add36 = (($20) + 3)|0;
     $conv37 = $add36&65535;
     $arrayidx38 = (($7) + ($x$156<<1)|0);
     HEAP16[$arrayidx38>>1] = $conv37;
     $inc39 = (($x$156) + 1)|0;
     $cmp28 = ($inc39|0)<($x2$0|0);
     if ($cmp28) {
      $x$156 = $inc39;
     } else {
      break;
     }
    }
   }
   $inc41 = (($i$059) + 1)|0;
   $incdec$ptr = ((($patch$060)) + 8|0);
   $21 = HEAP16[$patchcount9>>1]|0;
   $conv10 = $21 << 16 >> 16;
   $cmp = ($inc41|0)<($conv10|0);
   if ($cmp) {
    $i$059 = $inc41;$patch$060 = $incdec$ptr;
   } else {
    break;
   }
  }
 }
 $22 = HEAP16[$width>>1]|0;
 $cmp4653 = ($22<<16>>16)>(0);
 $23 = HEAP32[$patchcount>>2]|0;
 L11: do {
  if ($cmp4653) {
   $height = ((($1)) + 10|0);
   $24 = $23;$30 = $22;$x$254 = 0;
   L13: while(1) {
    $arrayidx49 = (($24) + ($x$254)|0);
    $25 = HEAP8[$arrayidx49>>0]|0;
    switch ($25<<24>>24) {
    case 0:  {
     break L13;
     break;
    }
    case 1:  {
     $29 = $30;$31 = $24;
     break;
    }
    default: {
     $arrayidx59 = (($5) + ($x$254<<1)|0);
     HEAP16[$arrayidx59>>1] = -1;
     $26 = HEAP32[99567]|0;
     $arrayidx60 = (($26) + ($texnum<<2)|0);
     $27 = HEAP32[$arrayidx60>>2]|0;
     $conv61 = $27&65535;
     $arrayidx62 = (($7) + ($x$254<<1)|0);
     HEAP16[$arrayidx62>>1] = $conv61;
     $28 = HEAP16[$height>>1]|0;
     $conv64 = $28 << 16 >> 16;
     $sub65 = (65536 - ($conv64))|0;
     $cmp66 = ($27|0)>($sub65|0);
     if ($cmp66) {
      label = 12;
      break L13;
     }
     $add73 = (($27) + ($conv64))|0;
     HEAP32[$arrayidx60>>2] = $add73;
     $$pre64 = HEAP16[$width>>1]|0;
     $29 = $$pre64;$31 = $24;
    }
    }
    $inc76 = (($x$254) + 1)|0;
    $conv45 = $29 << 16 >> 16;
    $cmp46 = ($inc76|0)<($conv45|0);
    if ($cmp46) {
     $24 = $31;$30 = $29;$x$254 = $inc76;
    } else {
     $$lcssa = $31;
     break L11;
    }
   }
   if ((label|0) == 12) {
    HEAP32[$vararg_buffer1>>2] = $texnum;
    _I_Error(154030,$vararg_buffer1);
    // unreachable;
   }
   HEAP32[$vararg_buffer>>2] = $1;
   (_printf(153983,$vararg_buffer)|0);
   STACKTOP = sp;return;
  } else {
   $$lcssa = $23;
  }
 } while(0);
 _Z_Free($$lcssa);
 STACKTOP = sp;return;
}
function _R_GetColumn($tex,$col) {
 $tex = $tex|0;
 $col = $col|0;
 var $$pre = 0, $$pre12 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx10$phi$trans$insert = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx4 = 0, $arrayidx7 = 0;
 var $call = 0, $call$pn = 0, $cmp = 0, $conv = 0, $conv5 = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99571]|0;
 $arrayidx = (($0) + ($tex<<2)|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $and = $1 & $col;
 $2 = HEAP32[99569]|0;
 $arrayidx1 = (($2) + ($tex<<2)|0);
 $3 = HEAP32[$arrayidx1>>2]|0;
 $arrayidx2 = (($3) + ($and<<1)|0);
 $4 = HEAP16[$arrayidx2>>1]|0;
 $5 = HEAP32[99570]|0;
 $arrayidx3 = (($5) + ($tex<<2)|0);
 $6 = HEAP32[$arrayidx3>>2]|0;
 $arrayidx4 = (($6) + ($and<<1)|0);
 $7 = HEAP16[$arrayidx4>>1]|0;
 $conv5 = $7&65535;
 $cmp = ($4<<16>>16)>(0);
 if ($cmp) {
  $conv = $4 << 16 >> 16;
  $call = (_W_CacheLumpNum($conv,8)|0);
  $call$pn = $call;
  $retval$0 = (($call$pn) + ($conv5)|0);
  return ($retval$0|0);
 }
 $8 = HEAP32[99568]|0;
 $arrayidx7 = (($8) + ($tex<<2)|0);
 $9 = HEAP32[$arrayidx7>>2]|0;
 $tobool = ($9|0)==(0|0);
 if (!($tobool)) {
  $call$pn = $9;
  $retval$0 = (($call$pn) + ($conv5)|0);
  return ($retval$0|0);
 }
 _R_GenerateComposite($tex);
 $$pre = HEAP32[99568]|0;
 $arrayidx10$phi$trans$insert = (($$pre) + ($tex<<2)|0);
 $$pre12 = HEAP32[$arrayidx10$phi$trans$insert>>2]|0;
 $call$pn = $$pre12;
 $retval$0 = (($call$pn) + ($conv5)|0);
 return ($retval$0|0);
}
function _R_InitTextures() {
 var $$lcssa = 0, $$lcssa93 = 0, $$pre116 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $35$phi = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr11 = 0, $add$ptr3 = 0, $add$ptr68 = 0, $add$ptr73 = 0, $add150 = 0, $add34 = 0, $add35 = 0, $add37 = 0, $add76 = 0, $and = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx116 = 0, $arrayidx121 = 0, $arrayidx128 = 0;
 var $arrayidx132 = 0, $arrayidx157 = 0, $arrayidx4$i = 0, $arrayidx6$i = 0, $arrayidx7 = 0, $arrayidx78 = 0, $arrayidx99 = 0, $call = 0, $call$i = 0, $call1 = 0, $call10 = 0, $call115 = 0, $call12 = 0, $call120 = 0, $call14 = 0, $call15 = 0, $call152 = 0, $call16 = 0, $call18 = 0, $call20 = 0;
 var $call22 = 0, $call24 = 0, $call26 = 0, $call28 = 0, $call3$i = 0, $call30 = 0, $call31 = 0, $call32 = 0, $call38 = 0, $call6 = 0, $call77 = 0, $call8 = 0, $call9 = 0, $cmp$i = 0, $cmp102 = 0, $cmp112 = 0, $cmp12$i = 0, $cmp125 = 0, $cmp13 = 0, $cmp144 = 0;
 var $cmp14496 = 0, $cmp154 = 0, $cmp15494 = 0, $cmp43 = 0, $cmp43110 = 0, $cmp5$i = 0, $cmp52 = 0, $cmp52108 = 0, $cmp60 = 0, $cmp60104 = 0, $cmp66 = 0, $cmp70 = 0, $cmp93 = 0, $cmp93100 = 0, $conv = 0, $conv113 = 0, $conv118 = 0, $conv124 = 0, $conv13086 = 0, $conv92 = 0;
 var $directory$0106 = 0, $div = 0, $div36 = 0, $exitcond = 0, $height = 0, $height80 = 0, $i$0113 = 0, $i$013$i = 0, $i$1111 = 0, $i$2109 = 0, $i$3107 = 0, $i$497 = 0, $i$595 = 0, $idxprom = 0, $inc = 0, $inc$i = 0, $inc109 = 0, $inc137 = 0, $inc148 = 0, $inc159 = 0;
 var $inc47 = 0, $inc56 = 0, $incdec$ptr = 0, $incdec$ptr110 = 0, $incdec$ptr138 = 0, $index$i = 0, $j$0101 = 0, $j$1 = 0, $maptex2$0 = 0, $maxoff$0105 = 0, $maxoff2$0 = 0, $mpatch$0103 = 0, $mul = 0, $mul$i = 0, $mul1$i = 0, $mul114 = 0, $mul119 = 0, $mul122 = 0, $mul151 = 0, $mul17 = 0;
 var $mul19 = 0, $mul2 = 0, $mul21 = 0, $mul23 = 0, $mul25 = 0, $mul27 = 0, $mul29 = 0, $name = 0, $next$i = 0, $next7$i = 0, $numtextures2$0 = 0, $originy = 0, $originy97 = 0, $patch$0102 = 0, $patch100 = 0, $patch98 = 0, $patchcount = 0, $patchcount82 = 0, $patches = 0, $patches88 = 0;
 var $rem$i = 0, $rover$0$i = 0, $shl131 = 0, $spec$select = 0, $spec$select91 = 0, $spec$select92 = 0, $sub127 = 0, $sub33 = 0, $sub74 = 0, $tobool = 0, $tobool140 = 0, $tobool62 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $width = 0, $width79 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $name = sp + 12|0;
 $arrayidx = ((($name)) + 8|0);
 HEAP8[$arrayidx>>0] = 0;
 $call = (_W_CacheLumpName(154067,1)|0);
 $0 = HEAP32[$call>>2]|0;
 $add$ptr = ((($call)) + 4|0);
 $mul = $0 << 2;
 $call1 = (_Z_Malloc($mul,1,0)|0);
 $cmp112 = ($0|0)>(0);
 if ($cmp112) {
  $i$0113 = 0;
  while(1) {
   $mul2 = $i$0113 << 3;
   $add$ptr3 = (($add$ptr) + ($mul2)|0);
   (_M_StringCopy($name,$add$ptr3,9)|0);
   $call6 = (_W_CheckNumForName($name)|0);
   $arrayidx7 = (($call1) + ($i$0113<<2)|0);
   HEAP32[$arrayidx7>>2] = $call6;
   $inc = (($i$0113) + 1)|0;
   $exitcond = ($inc|0)==($0|0);
   if ($exitcond) {
    break;
   } else {
    $i$0113 = $inc;
   }
  }
 }
 _W_ReleaseLumpName(154067);
 $call8 = (_W_CacheLumpName(154074,1)|0);
 $1 = HEAP32[$call8>>2]|0;
 $call9 = (_W_GetNumForName(154074)|0);
 $call10 = (_W_LumpLength($call9)|0);
 $add$ptr11 = ((($call8)) + 4|0);
 $call12 = (_W_CheckNumForName(154083)|0);
 $cmp13 = ($call12|0)==(-1);
 if ($cmp13) {
  $13 = 0;$maptex2$0 = 0;$maxoff2$0 = 0;$numtextures2$0 = 0;
 } else {
  $call14 = (_W_CacheLumpName(154083,1)|0);
  $2 = HEAP32[$call14>>2]|0;
  $call15 = (_W_GetNumForName(154083)|0);
  $call16 = (_W_LumpLength($call15)|0);
  $13 = $call14;$maptex2$0 = $call14;$maxoff2$0 = $call16;$numtextures2$0 = $2;
 }
 $add = (($numtextures2$0) + ($1))|0;
 HEAP32[99572] = $add;
 $mul17 = $add << 2;
 $call18 = (_Z_Malloc($mul17,1,0)|0);
 HEAP32[99566] = $call18;
 $3 = HEAP32[99572]|0;
 $mul19 = $3 << 2;
 $call20 = (_Z_Malloc($mul19,1,0)|0);
 HEAP32[99569] = $call20;
 $4 = HEAP32[99572]|0;
 $mul21 = $4 << 2;
 $call22 = (_Z_Malloc($mul21,1,0)|0);
 HEAP32[99570] = $call22;
 $5 = HEAP32[99572]|0;
 $mul23 = $5 << 2;
 $call24 = (_Z_Malloc($mul23,1,0)|0);
 HEAP32[99568] = $call24;
 $6 = HEAP32[99572]|0;
 $mul25 = $6 << 2;
 $call26 = (_Z_Malloc($mul25,1,0)|0);
 HEAP32[99567] = $call26;
 $7 = HEAP32[99572]|0;
 $mul27 = $7 << 2;
 $call28 = (_Z_Malloc($mul27,1,0)|0);
 HEAP32[99571] = $call28;
 $8 = HEAP32[99572]|0;
 $mul29 = $8 << 2;
 $call30 = (_Z_Malloc($mul29,1,0)|0);
 HEAP32[99573] = $call30;
 $call31 = (_W_GetNumForName(154092)|0);
 $call32 = (_W_GetNumForName(154100)|0);
 $sub33 = (62 - ($call31))|0;
 $add34 = (($sub33) + ($call32))|0;
 $div = (($add34|0) / 64)&-1;
 $9 = HEAP32[99572]|0;
 $add35 = (($9) + 63)|0;
 $div36 = (($add35|0) / 64)&-1;
 $add37 = (($div36) + ($div))|0;
 $call38 = (_I_ConsoleStdout()|0);
 $tobool = ($call38|0)==(0);
 if (!($tobool)) {
  (_putchar(91)|0);
  $cmp43110 = ($add37|0)>(-9);
  if ($cmp43110) {
   $10 = (($add37) + 8)|0;
   $i$1111 = 0;
   while(1) {
    (_putchar(32)|0);
    $inc47 = (($i$1111) + 1)|0;
    $cmp43 = ($i$1111|0)<($10|0);
    if ($cmp43) {
     $i$1111 = $inc47;
    } else {
     break;
    }
   }
  }
  (_putchar(93)|0);
  $cmp52108 = ($add37|0)>(-10);
  if ($cmp52108) {
   $11 = (($add37) + 9)|0;
   $i$2109 = 0;
   while(1) {
    (_putchar(8)|0);
    $inc56 = (($i$2109) + 1)|0;
    $cmp52 = ($i$2109|0)<($11|0);
    if ($cmp52) {
     $i$2109 = $inc56;
    } else {
     break;
    }
   }
  }
 }
 $12 = HEAP32[99572]|0;
 $cmp60104 = ($12|0)>(0);
 L20: do {
  if ($cmp60104) {
   $add$ptr68 = ((($maptex2$0)) + 4|0);
   $14 = $call8;$directory$0106 = $add$ptr11;$i$3107 = 0;$maxoff$0105 = $call10;
   L22: while(1) {
    $and = $i$3107 & 63;
    $tobool62 = ($and|0)==(0);
    if ($tobool62) {
     (_putchar(46)|0);
    }
    $cmp66 = ($i$3107|0)==($1|0);
    $spec$select = $cmp66 ? $13 : $14;
    $spec$select91 = $cmp66 ? $maxoff2$0 : $maxoff$0105;
    $spec$select92 = $cmp66 ? $add$ptr68 : $directory$0106;
    $15 = HEAP32[$spec$select92>>2]|0;
    $cmp70 = ($15|0)>($spec$select91|0);
    if ($cmp70) {
     label = 18;
     break;
    }
    $add$ptr73 = (($spec$select) + ($15)|0);
    $patchcount = ((($add$ptr73)) + 20|0);
    $16 = HEAPU8[$patchcount>>0]|(HEAPU8[$patchcount+1>>0]<<8);
    $conv = $16 << 16 >> 16;
    $sub74 = $conv << 3;
    $add76 = (($sub74) + 24)|0;
    $call77 = (_Z_Malloc($add76,1,0)|0);
    $17 = HEAP32[99566]|0;
    $arrayidx78 = (($17) + ($i$3107<<2)|0);
    HEAP32[$arrayidx78>>2] = $call77;
    $width = ((($add$ptr73)) + 12|0);
    $18 = HEAPU8[$width>>0]|(HEAPU8[$width+1>>0]<<8);
    $width79 = ((($call77)) + 8|0);
    HEAP16[$width79>>1] = $18;
    $height = ((($add$ptr73)) + 14|0);
    $19 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
    $height80 = ((($call77)) + 10|0);
    HEAP16[$height80>>1] = $19;
    $20 = HEAPU8[$patchcount>>0]|(HEAPU8[$patchcount+1>>0]<<8);
    $patchcount82 = ((($call77)) + 20|0);
    HEAP16[$patchcount82>>1] = $20;
    $21 = $add$ptr73;
    $22 = $21;
    $23 = HEAPU8[$22>>0]|(HEAPU8[$22+1>>0]<<8)|(HEAPU8[$22+2>>0]<<16)|(HEAPU8[$22+3>>0]<<24);
    $24 = (($21) + 4)|0;
    $25 = $24;
    $26 = HEAPU8[$25>>0]|(HEAPU8[$25+1>>0]<<8)|(HEAPU8[$25+2>>0]<<16)|(HEAPU8[$25+3>>0]<<24);
    $27 = $call77;
    $28 = $27;
    HEAP8[$28>>0]=$23&255;HEAP8[$28+1>>0]=($23>>8)&255;HEAP8[$28+2>>0]=($23>>16)&255;HEAP8[$28+3>>0]=$23>>24;
    $29 = (($27) + 4)|0;
    $30 = $29;
    HEAP8[$30>>0]=$26&255;HEAP8[$30+1>>0]=($26>>8)&255;HEAP8[$30+2>>0]=($26>>16)&255;HEAP8[$30+3>>0]=$26>>24;
    $cmp93100 = ($20<<16>>16)>(0);
    if ($cmp93100) {
     $patches88 = ((($call77)) + 24|0);
     $patches = ((($add$ptr73)) + 22|0);
     $35 = $20;$j$0101 = 0;$mpatch$0103 = $patches;$patch$0102 = $patches88;
     while(1) {
      $31 = HEAPU8[$mpatch$0103>>0]|(HEAPU8[$mpatch$0103+1>>0]<<8);
      HEAP16[$patch$0102>>1] = $31;
      $originy = ((($mpatch$0103)) + 2|0);
      $32 = HEAPU8[$originy>>0]|(HEAPU8[$originy+1>>0]<<8);
      $originy97 = ((($patch$0102)) + 2|0);
      HEAP16[$originy97>>1] = $32;
      $patch98 = ((($mpatch$0103)) + 4|0);
      $33 = HEAPU8[$patch98>>0]|(HEAPU8[$patch98+1>>0]<<8);
      $idxprom = $33 << 16 >> 16;
      $arrayidx99 = (($call1) + ($idxprom<<2)|0);
      $34 = HEAP32[$arrayidx99>>2]|0;
      $patch100 = ((($patch$0102)) + 4|0);
      HEAP32[$patch100>>2] = $34;
      $cmp102 = ($34|0)==(-1);
      if ($cmp102) {
       label = 22;
       break L22;
      }
      $inc109 = (($j$0101) + 1)|0;
      $incdec$ptr = ((($mpatch$0103)) + 10|0);
      $incdec$ptr110 = ((($patch$0102)) + 8|0);
      $conv92 = $35 << 16 >> 16;
      $cmp93 = ($inc109|0)<($conv92|0);
      if ($cmp93) {
       $35$phi = $35;$j$0101 = $inc109;$mpatch$0103 = $incdec$ptr;$patch$0102 = $incdec$ptr110;$35 = $35$phi;
      } else {
       break;
      }
     }
     $$pre116 = HEAP16[$width79>>1]|0;
     $36 = $$pre116;
    } else {
     $36 = $18;
    }
    $conv113 = $36 << 16 >> 16;
    $mul114 = $conv113 << 1;
    $call115 = (_Z_Malloc($mul114,1,0)|0);
    $37 = HEAP32[99569]|0;
    $arrayidx116 = (($37) + ($i$3107<<2)|0);
    HEAP32[$arrayidx116>>2] = $call115;
    $38 = HEAP16[$width79>>1]|0;
    $conv118 = $38 << 16 >> 16;
    $mul119 = $conv118 << 1;
    $call120 = (_Z_Malloc($mul119,1,0)|0);
    $39 = HEAP32[99570]|0;
    $arrayidx121 = (($39) + ($i$3107<<2)|0);
    HEAP32[$arrayidx121>>2] = $call120;
    $40 = HEAP16[$width79>>1]|0;
    $conv124 = $40 << 16 >> 16;
    $j$1 = 1;
    while(1) {
     $mul122 = $j$1 << 1;
     $cmp125 = ($mul122|0)>($conv124|0);
     if ($cmp125) {
      break;
     } else {
      $j$1 = $mul122;
     }
    }
    $sub127 = (($j$1) + -1)|0;
    $41 = HEAP32[99571]|0;
    $arrayidx128 = (($41) + ($i$3107<<2)|0);
    HEAP32[$arrayidx128>>2] = $sub127;
    $42 = HEAP16[$height80>>1]|0;
    $conv13086 = $42&65535;
    $shl131 = $conv13086 << 16;
    $43 = HEAP32[99573]|0;
    $arrayidx132 = (($43) + ($i$3107<<2)|0);
    HEAP32[$arrayidx132>>2] = $shl131;
    $inc137 = (($i$3107) + 1)|0;
    $incdec$ptr138 = ((($spec$select92)) + 4|0);
    $44 = HEAP32[99572]|0;
    $cmp60 = ($inc137|0)<($44|0);
    if ($cmp60) {
     $14 = $spec$select;$directory$0106 = $incdec$ptr138;$i$3107 = $inc137;$maxoff$0105 = $spec$select91;
    } else {
     break L20;
    }
   }
   if ((label|0) == 18) {
    _I_Error(154106,$vararg_buffer);
    // unreachable;
   }
   else if ((label|0) == 22) {
    HEAP32[$vararg_buffer1>>2] = $call77;
    _I_Error(154144,$vararg_buffer1);
    // unreachable;
   }
  }
 } while(0);
 _Z_Free($call1);
 _W_ReleaseLumpName(154074);
 $tobool140 = ($maptex2$0|0)==(0|0);
 if (!($tobool140)) {
  _W_ReleaseLumpName(154083);
 }
 $45 = HEAP32[99572]|0;
 $cmp14496 = ($45|0)>(0);
 if ($cmp14496) {
  $i$497 = 0;
  while(1) {
   _R_GenerateLookup($i$497);
   $inc148 = (($i$497) + 1)|0;
   $46 = HEAP32[99572]|0;
   $cmp144 = ($inc148|0)<($46|0);
   if ($cmp144) {
    $i$497 = $inc148;
   } else {
    $$lcssa93 = $46;
    break;
   }
  }
 } else {
  $$lcssa93 = $45;
 }
 $add150 = $$lcssa93 << 2;
 $mul151 = (($add150) + 4)|0;
 $call152 = (_Z_Malloc($mul151,1,0)|0);
 HEAP32[99574] = $call152;
 $47 = HEAP32[99572]|0;
 $cmp15494 = ($47|0)>(0);
 if ($cmp15494) {
  $i$595 = 0;
  while(1) {
   $arrayidx157 = (($call152) + ($i$595<<2)|0);
   HEAP32[$arrayidx157>>2] = $i$595;
   $inc159 = (($i$595) + 1)|0;
   $48 = HEAP32[99572]|0;
   $cmp154 = ($inc159|0)<($48|0);
   if ($cmp154) {
    $i$595 = $inc159;
   } else {
    $$lcssa = $48;
    break;
   }
  }
 } else {
  $$lcssa = $47;
 }
 $mul$i = $$lcssa << 2;
 $call$i = (_Z_Malloc($mul$i,1,0)|0);
 HEAP32[99585] = $call$i;
 $49 = HEAP32[99572]|0;
 $mul1$i = $49 << 2;
 _memset(($call$i|0),0,($mul1$i|0))|0;
 $50 = HEAP32[99572]|0;
 $cmp12$i = ($50|0)>(0);
 if (!($cmp12$i)) {
  STACKTOP = sp;return;
 }
 $i$013$i = 0;
 while(1) {
  $51 = HEAP32[99566]|0;
  $arrayidx$i = (($51) + ($i$013$i<<2)|0);
  $52 = HEAP32[$arrayidx$i>>2]|0;
  $index$i = ((($52)) + 12|0);
  HEAP32[$index$i>>2] = $i$013$i;
  $call3$i = (_W_LumpNameHash($52)|0);
  $53 = HEAP32[99572]|0;
  $rem$i = (($call3$i>>>0) % ($53>>>0))&-1;
  $54 = HEAP32[99585]|0;
  $arrayidx4$i = (($54) + ($rem$i<<2)|0);
  $rover$0$i = $arrayidx4$i;
  while(1) {
   $55 = HEAP32[$rover$0$i>>2]|0;
   $cmp5$i = ($55|0)==(0|0);
   $next$i = ((($55)) + 16|0);
   if ($cmp5$i) {
    break;
   } else {
    $rover$0$i = $next$i;
   }
  }
  $56 = HEAP32[99566]|0;
  $arrayidx6$i = (($56) + ($i$013$i<<2)|0);
  $57 = HEAP32[$arrayidx6$i>>2]|0;
  $next7$i = ((($57)) + 16|0);
  HEAP32[$next7$i>>2] = 0;
  $58 = HEAP32[$arrayidx6$i>>2]|0;
  HEAP32[$rover$0$i>>2] = $58;
  $inc$i = (($i$013$i) + 1)|0;
  $cmp$i = ($inc$i|0)<($53|0);
  if ($cmp$i) {
   $i$013$i = $inc$i;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _R_InitSpriteLumps() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add10 = 0, $add3 = 0, $and = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx17 = 0, $call = 0;
 var $call1 = 0, $call11 = 0, $call4 = 0, $call6 = 0, $call8 = 0, $cmp = 0, $cmp14 = 0, $conv11 = 0, $conv1212 = 0, $conv1513 = 0, $i$015 = 0, $inc = 0, $leftoffset = 0, $mul = 0, $mul5 = 0, $mul7 = 0, $shl = 0, $shl13 = 0, $shl16 = 0, $sub = 0;
 var $sub2 = 0, $tobool = 0, $topoffset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_GetNumForName(154092)|0);
 $add = (($call) + 1)|0;
 HEAP32[99578] = $add;
 $call1 = (_W_GetNumForName(154100)|0);
 $sub = (($call1) + -1)|0;
 HEAP32[99579] = $sub;
 $0 = HEAP32[99578]|0;
 $sub2 = (($sub) - ($0))|0;
 $add3 = (($sub2) + 1)|0;
 HEAP32[99580] = $add3;
 $mul = $add3 << 2;
 $call4 = (_Z_Malloc($mul,1,0)|0);
 HEAP32[99581] = $call4;
 $1 = HEAP32[99580]|0;
 $mul5 = $1 << 2;
 $call6 = (_Z_Malloc($mul5,1,0)|0);
 HEAP32[99582] = $call6;
 $2 = HEAP32[99580]|0;
 $mul7 = $2 << 2;
 $call8 = (_Z_Malloc($mul7,1,0)|0);
 HEAP32[99583] = $call8;
 $3 = HEAP32[99580]|0;
 $cmp14 = ($3|0)>(0);
 if (!($cmp14)) {
  return;
 }
 $i$015 = 0;
 while(1) {
  $and = $i$015 & 63;
  $tobool = ($and|0)==(0);
  if ($tobool) {
   (_putchar(46)|0);
  }
  $4 = HEAP32[99578]|0;
  $add10 = (($4) + ($i$015))|0;
  $call11 = (_W_CacheLumpNum($add10,8)|0);
  $5 = HEAPU8[$call11>>0]|(HEAPU8[$call11+1>>0]<<8);
  $conv11 = $5&65535;
  $shl = $conv11 << 16;
  $6 = HEAP32[99581]|0;
  $arrayidx = (($6) + ($i$015<<2)|0);
  HEAP32[$arrayidx>>2] = $shl;
  $leftoffset = ((($call11)) + 4|0);
  $7 = HEAPU8[$leftoffset>>0]|(HEAPU8[$leftoffset+1>>0]<<8);
  $conv1212 = $7&65535;
  $shl13 = $conv1212 << 16;
  $8 = HEAP32[99582]|0;
  $arrayidx14 = (($8) + ($i$015<<2)|0);
  HEAP32[$arrayidx14>>2] = $shl13;
  $topoffset = ((($call11)) + 6|0);
  $9 = HEAPU8[$topoffset>>0]|(HEAPU8[$topoffset+1>>0]<<8);
  $conv1513 = $9&65535;
  $shl16 = $conv1513 << 16;
  $10 = HEAP32[99583]|0;
  $arrayidx17 = (($10) + ($i$015<<2)|0);
  HEAP32[$arrayidx17>>2] = $shl16;
  $inc = (($i$015) + 1)|0;
  $11 = HEAP32[99580]|0;
  $cmp = ($inc|0)<($11|0);
  if ($cmp) {
   $i$015 = $inc;
  } else {
   break;
  }
 }
 return;
}
function _R_InitData() {
 var $0 = 0, $1 = 0, $2 = 0, $add$i = 0, $add3$i = 0, $add4$i = 0, $arrayidx$i = 0, $call$i = 0, $call$i3 = 0, $call1$i = 0, $call1$i4 = 0, $call5$i = 0, $cmp$i = 0, $cmp5$i = 0, $i$06$i = 0, $inc$i = 0, $mul$i = 0, $sub$i = 0, $sub2$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 _R_InitTextures();
 (_putchar(46)|0);
 $call$i = (_W_GetNumForName(154188)|0);
 $add$i = (($call$i) + 1)|0;
 HEAP32[99575] = $add$i;
 $call1$i = (_W_GetNumForName(154196)|0);
 $sub$i = (($call1$i) + -1)|0;
 $0 = HEAP32[99575]|0;
 $sub2$i = (($sub$i) - ($0))|0;
 $add3$i = (($sub2$i) + 1)|0;
 HEAP32[99576] = $add3$i;
 $add4$i = $sub2$i << 2;
 $mul$i = (($add4$i) + 8)|0;
 $call5$i = (_Z_Malloc($mul$i,1,0)|0);
 HEAP32[99577] = $call5$i;
 $1 = HEAP32[99576]|0;
 $cmp5$i = ($1|0)>(0);
 if ($cmp5$i) {
  $i$06$i = 0;
  while(1) {
   $arrayidx$i = (($call5$i) + ($i$06$i<<2)|0);
   HEAP32[$arrayidx$i>>2] = $i$06$i;
   $inc$i = (($i$06$i) + 1)|0;
   $2 = HEAP32[99576]|0;
   $cmp$i = ($inc$i|0)<($2|0);
   if ($cmp$i) {
    $i$06$i = $inc$i;
   } else {
    break;
   }
  }
 }
 (_putchar(46)|0);
 _R_InitSpriteLumps();
 (_putchar(46)|0);
 $call$i3 = (_W_GetNumForName(154202)|0);
 $call1$i4 = (_W_CacheLumpNum($call$i3,1)|0);
 HEAP32[99584] = $call1$i4;
 return;
}
function _R_FlatNumForName($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $namet = 0, $sub = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $namet = sp;
 $call = (_W_CheckNumForName($name)|0);
 $cmp = ($call|0)==(-1);
 if ($cmp) {
  $arrayidx = ((($namet)) + 8|0);
  HEAP8[$arrayidx>>0] = 0;
  $0 = $name;
  $1 = $0;
  $2 = HEAPU8[$1>>0]|(HEAPU8[$1+1>>0]<<8)|(HEAPU8[$1+2>>0]<<16)|(HEAPU8[$1+3>>0]<<24);
  $3 = (($0) + 4)|0;
  $4 = $3;
  $5 = HEAPU8[$4>>0]|(HEAPU8[$4+1>>0]<<8)|(HEAPU8[$4+2>>0]<<16)|(HEAPU8[$4+3>>0]<<24);
  $6 = $namet;
  $7 = $6;
  HEAP32[$7>>2] = $2;
  $8 = (($6) + 4)|0;
  $9 = $8;
  HEAP32[$9>>2] = $5;
  HEAP32[$vararg_buffer>>2] = $namet;
  _I_Error(154211,$vararg_buffer);
  // unreachable;
 } else {
  $10 = HEAP32[99575]|0;
  $sub = (($call) - ($10))|0;
  STACKTOP = sp;return ($sub|0);
 }
 return (0)|0;
}
function _R_CheckTextureNumForName($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx2 = 0, $call = 0, $call6 = 0, $cmp = 0, $cmp3 = 0, $cmp39 = 0, $index = 0, $next = 0, $rem = 0, $retval$0 = 0, $texture$0 = 0, $texture$010 = 0, $texture$08 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$name>>0]|0;
 $cmp = ($0<<24>>24)==(45);
 if ($cmp) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $call = (_W_LumpNameHash($name)|0);
 $1 = HEAP32[99572]|0;
 $rem = (($call>>>0) % ($1>>>0))&-1;
 $2 = HEAP32[99585]|0;
 $arrayidx2 = (($2) + ($rem<<2)|0);
 $texture$08 = HEAP32[$arrayidx2>>2]|0;
 $cmp39 = ($texture$08|0)==(0|0);
 if ($cmp39) {
  $retval$0 = -1;
  return ($retval$0|0);
 }
 $texture$010 = $texture$08;
 while(1) {
  $call6 = (_strncasecmp($texture$010,$name,8)|0);
  $tobool = ($call6|0)==(0);
  if ($tobool) {
   break;
  }
  $next = ((($texture$010)) + 16|0);
  $texture$0 = HEAP32[$next>>2]|0;
  $cmp3 = ($texture$0|0)==(0|0);
  if ($cmp3) {
   $retval$0 = -1;
   label = 7;
   break;
  } else {
   $texture$010 = $texture$0;
  }
 }
 if ((label|0) == 7) {
  return ($retval$0|0);
 }
 $index = ((($texture$010)) + 12|0);
 $3 = HEAP32[$index>>2]|0;
 $retval$0 = $3;
 return ($retval$0|0);
}
function _R_TextureNumForName($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx2$i = 0, $call$i = 0, $call6$i = 0, $cmp = 0, $cmp$i = 0, $cmp3$i = 0, $cmp39$i = 0, $index$i = 0, $next$i = 0, $rem$i = 0, $retval$0$i5 = 0, $texture$0$i = 0, $texture$010$i = 0, $texture$08$i = 0, $tobool$i = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP8[$name>>0]|0;
 $cmp$i = ($0<<24>>24)==(45);
 if ($cmp$i) {
  $retval$0$i5 = 0;
  STACKTOP = sp;return ($retval$0$i5|0);
 }
 $call$i = (_W_LumpNameHash($name)|0);
 $1 = HEAP32[99572]|0;
 $rem$i = (($call$i>>>0) % ($1>>>0))&-1;
 $2 = HEAP32[99585]|0;
 $arrayidx2$i = (($2) + ($rem$i<<2)|0);
 $texture$08$i = HEAP32[$arrayidx2$i>>2]|0;
 $cmp39$i = ($texture$08$i|0)==(0|0);
 L4: do {
  if (!($cmp39$i)) {
   $texture$010$i = $texture$08$i;
   while(1) {
    $call6$i = (_strncasecmp($texture$010$i,$name,8)|0);
    $tobool$i = ($call6$i|0)==(0);
    if ($tobool$i) {
     break;
    }
    $next$i = ((($texture$010$i)) + 16|0);
    $texture$0$i = HEAP32[$next$i>>2]|0;
    $cmp3$i = ($texture$0$i|0)==(0|0);
    if ($cmp3$i) {
     break L4;
    } else {
     $texture$010$i = $texture$0$i;
    }
   }
   $index$i = ((($texture$010$i)) + 12|0);
   $3 = HEAP32[$index$i>>2]|0;
   $cmp = ($3|0)==(-1);
   if (!($cmp)) {
    $retval$0$i5 = $3;
    STACKTOP = sp;return ($retval$0$i5|0);
   }
  }
 } while(0);
 HEAP32[$vararg_buffer>>2] = $name;
 _I_Error(154242,$vararg_buffer);
 // unreachable;
 return (0)|0;
}
function _R_PrecacheLevel() {
 var $$pre = 0, $$pre79 = 0, $$pre80 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $add = 0, $add12 = 0, $add50 = 0;
 var $add92 = 0, $add92$1 = 0, $add92$2 = 0, $add92$3 = 0, $add92$4 = 0, $add92$5 = 0, $add92$6 = 0, $add92$7 = 0, $add95 = 0, $add95$1 = 0, $add95$2 = 0, $add95$3 = 0, $add95$4 = 0, $add95$5 = 0, $add95$6 = 0, $add95$7 = 0, $arrayidx1 = 0, $arrayidx24 = 0, $arrayidx27 = 0, $arrayidx30 = 0;
 var $arrayidx34 = 0, $arrayidx38 = 0, $arrayidx4 = 0, $arrayidx42 = 0, $arrayidx66 = 0, $arrayidx74 = 0, $arrayidx8 = 0, $arrayidx90 = 0, $arrayidx90$1 = 0, $arrayidx90$2 = 0, $arrayidx90$3 = 0, $arrayidx90$4 = 0, $arrayidx90$5 = 0, $arrayidx90$6 = 0, $arrayidx90$7 = 0, $bottomtexture = 0, $call = 0, $call18 = 0, $call58 = 0, $ceilingpic = 0;
 var $cmp = 0, $cmp20 = 0, $cmp2073 = 0, $cmp36 = 0, $cmp3671 = 0, $cmp44 = 0, $cmp4469 = 0, $cmp6 = 0, $cmp60 = 0, $cmp6066 = 0, $cmp63 = 0, $cmp675 = 0, $cmp71 = 0, $cmp7161 = 0, $cmp77 = 0, $cmp80 = 0, $cmp8059 = 0, $conv = 0, $conv91 = 0, $conv91$1 = 0;
 var $conv91$2 = 0, $conv91$3 = 0, $conv91$4 = 0, $conv91$5 = 0, $conv91$6 = 0, $conv91$7 = 0, $floorpic = 0, $function = 0, $i$078 = 0, $i$176 = 0, $i$274 = 0, $i$372 = 0, $i$462 = 0, $idxprom = 0, $idxprom23 = 0, $idxprom26 = 0, $idxprom29 = 0, $idxprom3 = 0, $inc = 0, $inc101 = 0;
 var $inc104 = 0, $inc16 = 0, $inc32 = 0, $inc53 = 0, $inc56 = 0, $j$070 = 0, $j$160 = 0, $midtexture = 0, $next = 0, $numframes = 0, $numframes58 = 0, $patch = 0, $patchcount = 0, $size = 0, $size49 = 0, $size94 = 0, $size94$1 = 0, $size94$2 = 0, $size94$3 = 0, $size94$4 = 0;
 var $size94$5 = 0, $size94$6 = 0, $size94$7 = 0, $sprite = 0, $spriteframes = 0, $th$0 = 0, $th$065 = 0, $th$067 = 0, $tobool = 0, $tobool39 = 0, $tobool75 = 0, $tobool9 = 0, $toptexture = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99092]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  return;
 }
 $1 = HEAP32[99576]|0;
 $call = (_Z_Malloc($1,1,0)|0);
 $2 = HEAP32[99576]|0;
 _memset(($call|0),0,($2|0))|0;
 $3 = HEAP32[99505]|0;
 $cmp77 = ($3|0)>(0);
 if ($cmp77) {
  $i$078 = 0;
  while(1) {
   $4 = HEAP32[99506]|0;
   $floorpic = (((($4) + (($i$078*88)|0)|0)) + 8|0);
   $5 = HEAP16[$floorpic>>1]|0;
   $idxprom = $5 << 16 >> 16;
   $arrayidx1 = (($call) + ($idxprom)|0);
   HEAP8[$arrayidx1>>0] = 1;
   $6 = HEAP32[99506]|0;
   $ceilingpic = (((($6) + (($i$078*88)|0)|0)) + 10|0);
   $7 = HEAP16[$ceilingpic>>1]|0;
   $idxprom3 = $7 << 16 >> 16;
   $arrayidx4 = (($call) + ($idxprom3)|0);
   HEAP8[$arrayidx4>>0] = 1;
   $inc = (($i$078) + 1)|0;
   $8 = HEAP32[99505]|0;
   $cmp = ($inc|0)<($8|0);
   if ($cmp) {
    $i$078 = $inc;
   } else {
    break;
   }
  }
 }
 HEAP32[99586] = 0;
 $9 = HEAP32[99576]|0;
 $cmp675 = ($9|0)>(0);
 if ($cmp675) {
  $91 = $9;$i$176 = 0;
  while(1) {
   $arrayidx8 = (($call) + ($i$176)|0);
   $10 = HEAP8[$arrayidx8>>0]|0;
   $tobool9 = ($10<<24>>24)==(0);
   if ($tobool9) {
    $15 = $91;
   } else {
    $11 = HEAP32[99575]|0;
    $add = (($11) + ($i$176))|0;
    $12 = HEAP32[99849]|0;
    $size = (((($12) + (($add*28)|0)|0)) + 16|0);
    $13 = HEAP32[$size>>2]|0;
    $14 = HEAP32[99586]|0;
    $add12 = (($14) + ($13))|0;
    HEAP32[99586] = $add12;
    (_W_CacheLumpNum($add,8)|0);
    $$pre = HEAP32[99576]|0;
    $15 = $$pre;
   }
   $inc16 = (($i$176) + 1)|0;
   $cmp6 = ($inc16|0)<($15|0);
   if ($cmp6) {
    $91 = $15;$i$176 = $inc16;
   } else {
    break;
   }
  }
 }
 _Z_Free($call);
 $16 = HEAP32[99572]|0;
 $call18 = (_Z_Malloc($16,1,0)|0);
 $17 = HEAP32[99572]|0;
 _memset(($call18|0),0,($17|0))|0;
 $18 = HEAP32[99502]|0;
 $cmp2073 = ($18|0)>(0);
 if ($cmp2073) {
  $i$274 = 0;
  while(1) {
   $19 = HEAP32[99501]|0;
   $toptexture = (((($19) + (($i$274*20)|0)|0)) + 8|0);
   $20 = HEAP16[$toptexture>>1]|0;
   $idxprom23 = $20 << 16 >> 16;
   $arrayidx24 = (($call18) + ($idxprom23)|0);
   HEAP8[$arrayidx24>>0] = 1;
   $21 = HEAP32[99501]|0;
   $midtexture = (((($21) + (($i$274*20)|0)|0)) + 12|0);
   $22 = HEAP16[$midtexture>>1]|0;
   $idxprom26 = $22 << 16 >> 16;
   $arrayidx27 = (($call18) + ($idxprom26)|0);
   HEAP8[$arrayidx27>>0] = 1;
   $23 = HEAP32[99501]|0;
   $bottomtexture = (((($23) + (($i$274*20)|0)|0)) + 10|0);
   $24 = HEAP16[$bottomtexture>>1]|0;
   $idxprom29 = $24 << 16 >> 16;
   $arrayidx30 = (($call18) + ($idxprom29)|0);
   HEAP8[$arrayidx30>>0] = 1;
   $inc32 = (($i$274) + 1)|0;
   $25 = HEAP32[99502]|0;
   $cmp20 = ($inc32|0)<($25|0);
   if ($cmp20) {
    $i$274 = $inc32;
   } else {
    break;
   }
  }
 }
 $26 = HEAP32[99683]|0;
 $arrayidx34 = (($call18) + ($26)|0);
 HEAP8[$arrayidx34>>0] = 1;
 HEAP32[99587] = 0;
 $27 = HEAP32[99572]|0;
 $cmp3671 = ($27|0)>(0);
 if ($cmp3671) {
  $92 = $27;$i$372 = 0;
  while(1) {
   $arrayidx38 = (($call18) + ($i$372)|0);
   $28 = HEAP8[$arrayidx38>>0]|0;
   $tobool39 = ($28<<24>>24)==(0);
   if ($tobool39) {
    $37 = $92;
   } else {
    $29 = HEAP32[99566]|0;
    $arrayidx42 = (($29) + ($i$372<<2)|0);
    $30 = HEAP32[$arrayidx42>>2]|0;
    $patchcount = ((($30)) + 20|0);
    $31 = HEAP16[$patchcount>>1]|0;
    $cmp4469 = ($31<<16>>16)>(0);
    if ($cmp4469) {
     $j$070 = 0;
     while(1) {
      $patch = (((((($30)) + 24|0) + ($j$070<<3)|0)) + 4|0);
      $32 = HEAP32[$patch>>2]|0;
      $33 = HEAP32[99849]|0;
      $size49 = (((($33) + (($32*28)|0)|0)) + 16|0);
      $34 = HEAP32[$size49>>2]|0;
      $35 = HEAP32[99587]|0;
      $add50 = (($35) + ($34))|0;
      HEAP32[99587] = $add50;
      (_W_CacheLumpNum($32,8)|0);
      $inc53 = (($j$070) + 1)|0;
      $36 = HEAP16[$patchcount>>1]|0;
      $conv = $36 << 16 >> 16;
      $cmp44 = ($inc53|0)<($conv|0);
      if ($cmp44) {
       $j$070 = $inc53;
      } else {
       break;
      }
     }
     $$pre79 = HEAP32[99572]|0;
     $37 = $$pre79;
    } else {
     $37 = $92;
    }
   }
   $inc56 = (($i$372) + 1)|0;
   $cmp36 = ($inc56|0)<($37|0);
   if ($cmp36) {
    $92 = $37;$i$372 = $inc56;
   } else {
    break;
   }
  }
 }
 _Z_Free($call18);
 $38 = HEAP32[99686]|0;
 $call58 = (_Z_Malloc($38,1,0)|0);
 $39 = HEAP32[99686]|0;
 _memset(($call58|0),0,($39|0))|0;
 $th$065 = HEAP32[(398220)>>2]|0;
 $cmp6066 = ($th$065|0)==(398216|0);
 if (!($cmp6066)) {
  $th$067 = $th$065;
  while(1) {
   $function = ((($th$067)) + 8|0);
   $40 = HEAP32[$function>>2]|0;
   $cmp63 = ($40|0)==(136|0);
   if ($cmp63) {
    $sprite = ((($th$067)) + 36|0);
    $41 = HEAP32[$sprite>>2]|0;
    $arrayidx66 = (($call58) + ($41)|0);
    HEAP8[$arrayidx66>>0] = 1;
   }
   $next = ((($th$067)) + 4|0);
   $th$0 = HEAP32[$next>>2]|0;
   $cmp60 = ($th$0|0)==(398216|0);
   if ($cmp60) {
    break;
   } else {
    $th$067 = $th$0;
   }
  }
 }
 HEAP32[99588] = 0;
 $42 = HEAP32[99686]|0;
 $cmp7161 = ($42|0)>(0);
 if ($cmp7161) {
  $93 = $42;$i$462 = 0;
  while(1) {
   $arrayidx74 = (($call58) + ($i$462)|0);
   $43 = HEAP8[$arrayidx74>>0]|0;
   $tobool75 = ($43<<24>>24)==(0);
   if ($tobool75) {
    $90 = $93;
   } else {
    $44 = HEAP32[99687]|0;
    $numframes58 = (($44) + ($i$462<<3)|0);
    $45 = HEAP32[$numframes58>>2]|0;
    $cmp8059 = ($45|0)>(0);
    if ($cmp8059) {
     $46 = $44;$j$160 = 0;
     while(1) {
      $spriteframes = (((($46) + ($i$462<<3)|0)) + 4|0);
      $47 = HEAP32[$spriteframes>>2]|0;
      $48 = HEAP32[99578]|0;
      $arrayidx90 = (((($47) + (($j$160*28)|0)|0)) + 4|0);
      $49 = HEAP16[$arrayidx90>>1]|0;
      $conv91 = $49 << 16 >> 16;
      $add92 = (($48) + ($conv91))|0;
      $50 = HEAP32[99849]|0;
      $size94 = (((($50) + (($add92*28)|0)|0)) + 16|0);
      $51 = HEAP32[$size94>>2]|0;
      $52 = HEAP32[99588]|0;
      $add95 = (($52) + ($51))|0;
      HEAP32[99588] = $add95;
      (_W_CacheLumpNum($add92,8)|0);
      $53 = HEAP32[99578]|0;
      $arrayidx90$1 = (((($47) + (($j$160*28)|0)|0)) + 6|0);
      $54 = HEAP16[$arrayidx90$1>>1]|0;
      $conv91$1 = $54 << 16 >> 16;
      $add92$1 = (($53) + ($conv91$1))|0;
      $55 = HEAP32[99849]|0;
      $size94$1 = (((($55) + (($add92$1*28)|0)|0)) + 16|0);
      $56 = HEAP32[$size94$1>>2]|0;
      $57 = HEAP32[99588]|0;
      $add95$1 = (($57) + ($56))|0;
      HEAP32[99588] = $add95$1;
      (_W_CacheLumpNum($add92$1,8)|0);
      $58 = HEAP32[99578]|0;
      $arrayidx90$2 = (((($47) + (($j$160*28)|0)|0)) + 8|0);
      $59 = HEAP16[$arrayidx90$2>>1]|0;
      $conv91$2 = $59 << 16 >> 16;
      $add92$2 = (($58) + ($conv91$2))|0;
      $60 = HEAP32[99849]|0;
      $size94$2 = (((($60) + (($add92$2*28)|0)|0)) + 16|0);
      $61 = HEAP32[$size94$2>>2]|0;
      $62 = HEAP32[99588]|0;
      $add95$2 = (($62) + ($61))|0;
      HEAP32[99588] = $add95$2;
      (_W_CacheLumpNum($add92$2,8)|0);
      $63 = HEAP32[99578]|0;
      $arrayidx90$3 = (((($47) + (($j$160*28)|0)|0)) + 10|0);
      $64 = HEAP16[$arrayidx90$3>>1]|0;
      $conv91$3 = $64 << 16 >> 16;
      $add92$3 = (($63) + ($conv91$3))|0;
      $65 = HEAP32[99849]|0;
      $size94$3 = (((($65) + (($add92$3*28)|0)|0)) + 16|0);
      $66 = HEAP32[$size94$3>>2]|0;
      $67 = HEAP32[99588]|0;
      $add95$3 = (($67) + ($66))|0;
      HEAP32[99588] = $add95$3;
      (_W_CacheLumpNum($add92$3,8)|0);
      $68 = HEAP32[99578]|0;
      $arrayidx90$4 = (((($47) + (($j$160*28)|0)|0)) + 12|0);
      $69 = HEAP16[$arrayidx90$4>>1]|0;
      $conv91$4 = $69 << 16 >> 16;
      $add92$4 = (($68) + ($conv91$4))|0;
      $70 = HEAP32[99849]|0;
      $size94$4 = (((($70) + (($add92$4*28)|0)|0)) + 16|0);
      $71 = HEAP32[$size94$4>>2]|0;
      $72 = HEAP32[99588]|0;
      $add95$4 = (($72) + ($71))|0;
      HEAP32[99588] = $add95$4;
      (_W_CacheLumpNum($add92$4,8)|0);
      $73 = HEAP32[99578]|0;
      $arrayidx90$5 = (((($47) + (($j$160*28)|0)|0)) + 14|0);
      $74 = HEAP16[$arrayidx90$5>>1]|0;
      $conv91$5 = $74 << 16 >> 16;
      $add92$5 = (($73) + ($conv91$5))|0;
      $75 = HEAP32[99849]|0;
      $size94$5 = (((($75) + (($add92$5*28)|0)|0)) + 16|0);
      $76 = HEAP32[$size94$5>>2]|0;
      $77 = HEAP32[99588]|0;
      $add95$5 = (($77) + ($76))|0;
      HEAP32[99588] = $add95$5;
      (_W_CacheLumpNum($add92$5,8)|0);
      $78 = HEAP32[99578]|0;
      $arrayidx90$6 = (((($47) + (($j$160*28)|0)|0)) + 16|0);
      $79 = HEAP16[$arrayidx90$6>>1]|0;
      $conv91$6 = $79 << 16 >> 16;
      $add92$6 = (($78) + ($conv91$6))|0;
      $80 = HEAP32[99849]|0;
      $size94$6 = (((($80) + (($add92$6*28)|0)|0)) + 16|0);
      $81 = HEAP32[$size94$6>>2]|0;
      $82 = HEAP32[99588]|0;
      $add95$6 = (($82) + ($81))|0;
      HEAP32[99588] = $add95$6;
      (_W_CacheLumpNum($add92$6,8)|0);
      $83 = HEAP32[99578]|0;
      $arrayidx90$7 = (((($47) + (($j$160*28)|0)|0)) + 18|0);
      $84 = HEAP16[$arrayidx90$7>>1]|0;
      $conv91$7 = $84 << 16 >> 16;
      $add92$7 = (($83) + ($conv91$7))|0;
      $85 = HEAP32[99849]|0;
      $size94$7 = (((($85) + (($add92$7*28)|0)|0)) + 16|0);
      $86 = HEAP32[$size94$7>>2]|0;
      $87 = HEAP32[99588]|0;
      $add95$7 = (($87) + ($86))|0;
      HEAP32[99588] = $add95$7;
      (_W_CacheLumpNum($add92$7,8)|0);
      $inc101 = (($j$160) + 1)|0;
      $88 = HEAP32[99687]|0;
      $numframes = (($88) + ($i$462<<3)|0);
      $89 = HEAP32[$numframes>>2]|0;
      $cmp80 = ($inc101|0)<($89|0);
      if ($cmp80) {
       $46 = $88;$j$160 = $inc101;
      } else {
       break;
      }
     }
     $$pre80 = HEAP32[99686]|0;
     $90 = $$pre80;
    } else {
     $90 = $93;
    }
   }
   $inc104 = (($i$462) + 1)|0;
   $cmp71 = ($inc104|0)<($90|0);
   if ($cmp71) {
    $93 = $90;$i$462 = $inc104;
   } else {
    break;
   }
  }
 }
 _Z_Free($call58);
 return;
}
function _R_DrawColumn() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr11 = 0, $add12 = 0, $and = 0, $arrayidx = 0, $arrayidx10 = 0;
 var $arrayidx7 = 0, $arrayidx9 = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $cmp4 = 0, $count$0 = 0, $dec = 0, $dest$0 = 0, $frac$0 = 0, $idxprom = 0, $mul = 0, $or$cond = 0, $or$cond1 = 0, $sub = 0, $sub8 = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99589]|0;
 $1 = HEAP32[99590]|0;
 $sub = (($0) - ($1))|0;
 $cmp = ($sub|0)<(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[99591]|0;
 $cmp1 = ($2>>>0)>(319);
 $cmp2 = ($1|0)<(0);
 $or$cond = $cmp2 | $cmp1;
 $cmp4 = ($0|0)>(199);
 $or$cond1 = $cmp4 | $or$cond;
 if ($or$cond1) {
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $0;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  _I_Error(154276,$vararg_buffer);
  // unreachable;
 }
 $arrayidx = (204880 + ($1<<2)|0);
 $3 = HEAP32[$arrayidx>>2]|0;
 $arrayidx7 = (208208 + ($2<<2)|0);
 $4 = HEAP32[$arrayidx7>>2]|0;
 $add$ptr = (($3) + ($4)|0);
 $5 = HEAP32[99592]|0;
 $6 = HEAP32[99593]|0;
 $7 = HEAP32[99624]|0;
 $sub8 = (($1) - ($7))|0;
 $mul = Math_imul($sub8, $5)|0;
 $add = (($mul) + ($6))|0;
 $count$0 = $sub;$dest$0 = $add$ptr;$frac$0 = $add;
 while(1) {
  $8 = HEAP32[99594]|0;
  $9 = HEAP32[99595]|0;
  $10 = $frac$0 >>> 16;
  $and = $10 & 127;
  $arrayidx9 = (($9) + ($and)|0);
  $11 = HEAP8[$arrayidx9>>0]|0;
  $idxprom = $11&255;
  $arrayidx10 = (($8) + ($idxprom)|0);
  $12 = HEAP8[$arrayidx10>>0]|0;
  HEAP8[$dest$0>>0] = $12;
  $add$ptr11 = ((($dest$0)) + 320|0);
  $add12 = (($frac$0) + ($5))|0;
  $dec = (($count$0) + -1)|0;
  $tobool = ($count$0|0)==(0);
  if ($tobool) {
   break;
  } else {
   $count$0 = $dec;$dest$0 = $add$ptr11;$frac$0 = $add12;
  }
 }
 STACKTOP = sp;return;
}
function _R_DrawColumnLow() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr10 = 0, $add$ptr15 = 0, $add$ptr16 = 0, $add12 = 0;
 var $add17 = 0, $and = 0, $arrayidx = 0, $arrayidx13 = 0, $arrayidx14 = 0, $arrayidx7 = 0, $arrayidx9 = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $cmp4 = 0, $count$0 = 0, $dec = 0, $dest$0 = 0, $dest2$0 = 0, $frac$0 = 0, $idxprom = 0, $mul = 0, $or$cond = 0, $or$cond1 = 0;
 var $shl = 0, $sub = 0, $sub11 = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99589]|0;
 $1 = HEAP32[99590]|0;
 $sub = (($0) - ($1))|0;
 $cmp = ($sub|0)<(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[99591]|0;
 $cmp1 = ($2>>>0)>(319);
 $cmp2 = ($1|0)<(0);
 $or$cond = $cmp2 | $cmp1;
 $cmp4 = ($0|0)>(199);
 $or$cond1 = $cmp4 | $or$cond;
 if ($or$cond1) {
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $0;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  _I_Error(154276,$vararg_buffer);
  // unreachable;
 }
 $shl = $2 << 1;
 $arrayidx = (204880 + ($1<<2)|0);
 $3 = HEAP32[$arrayidx>>2]|0;
 $arrayidx7 = (208208 + ($shl<<2)|0);
 $4 = HEAP32[$arrayidx7>>2]|0;
 $add$ptr = (($3) + ($4)|0);
 $add = $shl | 1;
 $arrayidx9 = (208208 + ($add<<2)|0);
 $5 = HEAP32[$arrayidx9>>2]|0;
 $add$ptr10 = (($3) + ($5)|0);
 $6 = HEAP32[99592]|0;
 $7 = HEAP32[99593]|0;
 $8 = HEAP32[99624]|0;
 $sub11 = (($1) - ($8))|0;
 $mul = Math_imul($sub11, $6)|0;
 $add12 = (($mul) + ($7))|0;
 $count$0 = $sub;$dest$0 = $add$ptr;$dest2$0 = $add$ptr10;$frac$0 = $add12;
 while(1) {
  $9 = HEAP32[99594]|0;
  $10 = HEAP32[99595]|0;
  $11 = $frac$0 >>> 16;
  $and = $11 & 127;
  $arrayidx13 = (($10) + ($and)|0);
  $12 = HEAP8[$arrayidx13>>0]|0;
  $idxprom = $12&255;
  $arrayidx14 = (($9) + ($idxprom)|0);
  $13 = HEAP8[$arrayidx14>>0]|0;
  HEAP8[$dest$0>>0] = $13;
  HEAP8[$dest2$0>>0] = $13;
  $add$ptr15 = ((($dest$0)) + 320|0);
  $add$ptr16 = ((($dest2$0)) + 320|0);
  $add17 = (($frac$0) + ($6))|0;
  $dec = (($count$0) + -1)|0;
  $tobool = ($count$0|0)==(0);
  if ($tobool) {
   break;
  } else {
   $count$0 = $dec;$dest$0 = $add$ptr15;$dest2$0 = $add$ptr16;$frac$0 = $add17;
  }
 }
 STACKTOP = sp;return;
}
function _R_DrawFuzzColumn() {
 var $$pre11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr24 = 0, $add18 = 0, $arrayidx = 0, $arrayidx14 = 0;
 var $arrayidx16 = 0, $arrayidx17 = 0, $arrayidx19 = 0, $cmp = 0, $cmp11 = 0, $cmp20 = 0, $cmp5 = 0, $cmp8 = 0, $cmp9 = 0, $conv = 0, $count$0 = 0, $dec = 0, $dest$0 = 0, $inc = 0, $or$cond = 0, $or$cond1 = 0, $spec$store$select = 0, $sub = 0, $sub2 = 0, $sub4 = 0;
 var $tobool = 0, $tobool26 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99590]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  HEAP32[99590] = 1;
  $4 = 1;
 } else {
  $4 = $0;
 }
 $1 = HEAP32[99589]|0;
 $2 = HEAP32[99597]|0;
 $sub = (($2) + -1)|0;
 $cmp = ($1|0)==($sub|0);
 if ($cmp) {
  $sub2 = (($2) + -2)|0;
  HEAP32[99589] = $sub2;
  $3 = $sub2;
 } else {
  $3 = $1;
 }
 $sub4 = (($3) - ($4))|0;
 $cmp5 = ($sub4|0)<(0);
 if ($cmp5) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[99591]|0;
 $cmp8 = ($5>>>0)>(319);
 $cmp9 = ($4|0)<(0);
 $or$cond = $cmp9 | $cmp8;
 $cmp11 = ($3|0)>(199);
 $or$cond1 = $cmp11 | $or$cond;
 if ($or$cond1) {
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $3;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $5;
  _I_Error(154305,$vararg_buffer);
  // unreachable;
 }
 $arrayidx = (204880 + ($4<<2)|0);
 $6 = HEAP32[$arrayidx>>2]|0;
 $arrayidx14 = (208208 + ($5<<2)|0);
 $7 = HEAP32[$arrayidx14>>2]|0;
 $add$ptr = (($6) + ($7)|0);
 $$pre11 = HEAP32[99596]|0;
 $9 = $$pre11;$count$0 = $sub4;$dest$0 = $add$ptr;
 while(1) {
  $8 = HEAP32[99584]|0;
  $arrayidx16 = (51392 + ($9<<2)|0);
  $10 = HEAP32[$arrayidx16>>2]|0;
  $arrayidx17 = (($dest$0) + ($10)|0);
  $11 = HEAP8[$arrayidx17>>0]|0;
  $conv = $11&255;
  $add18 = $conv | 1536;
  $arrayidx19 = (($8) + ($add18)|0);
  $12 = HEAP8[$arrayidx19>>0]|0;
  HEAP8[$dest$0>>0] = $12;
  $13 = HEAP32[99596]|0;
  $inc = (($13) + 1)|0;
  $cmp20 = ($inc|0)==(50);
  $spec$store$select = $cmp20 ? 0 : $inc;
  HEAP32[99596] = $spec$store$select;
  $add$ptr24 = ((($dest$0)) + 320|0);
  $dec = (($count$0) + -1)|0;
  $tobool26 = ($count$0|0)==(0);
  if ($tobool26) {
   break;
  } else {
   $9 = $spec$store$select;$count$0 = $dec;$dest$0 = $add$ptr24;
  }
 }
 STACKTOP = sp;return;
}
function _R_DrawFuzzColumnLow() {
 var $$pre16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr33 = 0, $add$ptr34 = 0, $add22 = 0, $add27 = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx16 = 0, $arrayidx20 = 0, $arrayidx21 = 0, $arrayidx23 = 0, $arrayidx24 = 0, $arrayidx25 = 0, $arrayidx28 = 0, $cmp = 0, $cmp11 = 0, $cmp29 = 0;
 var $cmp5 = 0, $cmp8 = 0, $cmp9 = 0, $conv = 0, $conv26 = 0, $count$0 = 0, $dec = 0, $dest$0 = 0, $dest2$0 = 0, $inc = 0, $or$cond = 0, $or$cond1 = 0, $shl = 0, $spec$store$select = 0, $sub = 0, $sub2 = 0, $sub4 = 0, $tobool = 0, $tobool36 = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99590]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  HEAP32[99590] = 1;
  $4 = 1;
 } else {
  $4 = $0;
 }
 $1 = HEAP32[99589]|0;
 $2 = HEAP32[99597]|0;
 $sub = (($2) + -1)|0;
 $cmp = ($1|0)==($sub|0);
 if ($cmp) {
  $sub2 = (($2) + -2)|0;
  HEAP32[99589] = $sub2;
  $3 = $sub2;
 } else {
  $3 = $1;
 }
 $sub4 = (($3) - ($4))|0;
 $cmp5 = ($sub4|0)<(0);
 if ($cmp5) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[99591]|0;
 $shl = $5 << 1;
 $cmp8 = ($shl>>>0)>(319);
 $cmp9 = ($4|0)<(0);
 $or$cond = $cmp9 | $cmp8;
 $cmp11 = ($3|0)>(199);
 $or$cond1 = $cmp11 | $or$cond;
 if ($or$cond1) {
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $3;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $5;
  _I_Error(154305,$vararg_buffer);
  // unreachable;
 }
 $arrayidx = (204880 + ($4<<2)|0);
 $6 = HEAP32[$arrayidx>>2]|0;
 $arrayidx14 = (208208 + ($shl<<2)|0);
 $7 = HEAP32[$arrayidx14>>2]|0;
 $add$ptr = (($6) + ($7)|0);
 $add = $shl | 1;
 $arrayidx16 = (208208 + ($add<<2)|0);
 $8 = HEAP32[$arrayidx16>>2]|0;
 $add$ptr17 = (($6) + ($8)|0);
 $$pre16 = HEAP32[99596]|0;
 $10 = $$pre16;$count$0 = $sub4;$dest$0 = $add$ptr;$dest2$0 = $add$ptr17;
 while(1) {
  $9 = HEAP32[99584]|0;
  $arrayidx20 = (51392 + ($10<<2)|0);
  $11 = HEAP32[$arrayidx20>>2]|0;
  $arrayidx21 = (($dest$0) + ($11)|0);
  $12 = HEAP8[$arrayidx21>>0]|0;
  $conv = $12&255;
  $add22 = $conv | 1536;
  $arrayidx23 = (($9) + ($add22)|0);
  $13 = HEAP8[$arrayidx23>>0]|0;
  HEAP8[$dest$0>>0] = $13;
  $14 = HEAP32[99584]|0;
  $15 = HEAP32[99596]|0;
  $arrayidx24 = (51392 + ($15<<2)|0);
  $16 = HEAP32[$arrayidx24>>2]|0;
  $arrayidx25 = (($dest2$0) + ($16)|0);
  $17 = HEAP8[$arrayidx25>>0]|0;
  $conv26 = $17&255;
  $add27 = $conv26 | 1536;
  $arrayidx28 = (($14) + ($add27)|0);
  $18 = HEAP8[$arrayidx28>>0]|0;
  HEAP8[$dest2$0>>0] = $18;
  $19 = HEAP32[99596]|0;
  $inc = (($19) + 1)|0;
  $cmp29 = ($inc|0)==(50);
  $spec$store$select = $cmp29 ? 0 : $inc;
  HEAP32[99596] = $spec$store$select;
  $add$ptr33 = ((($dest$0)) + 320|0);
  $add$ptr34 = ((($dest2$0)) + 320|0);
  $dec = (($count$0) + -1)|0;
  $tobool36 = ($count$0|0)==(0);
  if ($tobool36) {
   break;
  } else {
   $10 = $spec$store$select;$count$0 = $dec;$dest$0 = $add$ptr33;$dest2$0 = $add$ptr34;
  }
 }
 STACKTOP = sp;return;
}
function _R_DrawTranslatedColumn() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr13 = 0, $add14 = 0, $arrayidx = 0, $arrayidx10 = 0;
 var $arrayidx12 = 0, $arrayidx7 = 0, $arrayidx9 = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $cmp4 = 0, $count$0 = 0, $dec = 0, $dest$0 = 0, $frac$0 = 0, $idxprom = 0, $idxprom11 = 0, $mul = 0, $or$cond = 0, $or$cond1 = 0, $shr = 0, $sub = 0, $sub8 = 0, $tobool = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99589]|0;
 $1 = HEAP32[99590]|0;
 $sub = (($0) - ($1))|0;
 $cmp = ($sub|0)<(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[99591]|0;
 $cmp1 = ($2>>>0)>(319);
 $cmp2 = ($1|0)<(0);
 $or$cond = $cmp2 | $cmp1;
 $cmp4 = ($0|0)>(199);
 $or$cond1 = $cmp4 | $or$cond;
 if ($or$cond1) {
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $0;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  _I_Error(154276,$vararg_buffer);
  // unreachable;
 }
 $arrayidx = (204880 + ($1<<2)|0);
 $3 = HEAP32[$arrayidx>>2]|0;
 $arrayidx7 = (208208 + ($2<<2)|0);
 $4 = HEAP32[$arrayidx7>>2]|0;
 $add$ptr = (($3) + ($4)|0);
 $5 = HEAP32[99592]|0;
 $6 = HEAP32[99593]|0;
 $7 = HEAP32[99624]|0;
 $sub8 = (($1) - ($7))|0;
 $mul = Math_imul($sub8, $5)|0;
 $add = (($mul) + ($6))|0;
 $count$0 = $sub;$dest$0 = $add$ptr;$frac$0 = $add;
 while(1) {
  $8 = HEAP32[99594]|0;
  $9 = HEAP32[99598]|0;
  $10 = HEAP32[99595]|0;
  $shr = $frac$0 >> 16;
  $arrayidx9 = (($10) + ($shr)|0);
  $11 = HEAP8[$arrayidx9>>0]|0;
  $idxprom = $11&255;
  $arrayidx10 = (($9) + ($idxprom)|0);
  $12 = HEAP8[$arrayidx10>>0]|0;
  $idxprom11 = $12&255;
  $arrayidx12 = (($8) + ($idxprom11)|0);
  $13 = HEAP8[$arrayidx12>>0]|0;
  HEAP8[$dest$0>>0] = $13;
  $add$ptr13 = ((($dest$0)) + 320|0);
  $add14 = (($frac$0) + ($5))|0;
  $dec = (($count$0) + -1)|0;
  $tobool = ($count$0|0)==(0);
  if ($tobool) {
   break;
  } else {
   $count$0 = $dec;$dest$0 = $add$ptr13;$frac$0 = $add14;
  }
 }
 STACKTOP = sp;return;
}
function _R_DrawTranslatedColumnLow() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $add$ptr = 0, $add$ptr10 = 0, $add$ptr23 = 0, $add$ptr24 = 0, $add12 = 0, $add25 = 0, $arrayidx = 0, $arrayidx13 = 0, $arrayidx14 = 0, $arrayidx16 = 0, $arrayidx18 = 0, $arrayidx20 = 0, $arrayidx22 = 0, $arrayidx7 = 0, $arrayidx9 = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0;
 var $cmp4 = 0, $count$0 = 0, $dec = 0, $dest$0 = 0, $dest2$0 = 0, $frac$0 = 0, $idxprom = 0, $idxprom15 = 0, $idxprom19 = 0, $idxprom21 = 0, $mul = 0, $or$cond = 0, $or$cond1 = 0, $shl = 0, $shr = 0, $sub = 0, $sub11 = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99589]|0;
 $1 = HEAP32[99590]|0;
 $sub = (($0) - ($1))|0;
 $cmp = ($sub|0)<(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[99591]|0;
 $shl = $2 << 1;
 $cmp1 = ($shl>>>0)>(319);
 $cmp2 = ($1|0)<(0);
 $or$cond = $cmp2 | $cmp1;
 $cmp4 = ($0|0)>(199);
 $or$cond1 = $cmp4 | $or$cond;
 if ($or$cond1) {
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $0;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $shl;
  _I_Error(154276,$vararg_buffer);
  // unreachable;
 }
 $arrayidx = (204880 + ($1<<2)|0);
 $3 = HEAP32[$arrayidx>>2]|0;
 $arrayidx7 = (208208 + ($shl<<2)|0);
 $4 = HEAP32[$arrayidx7>>2]|0;
 $add$ptr = (($3) + ($4)|0);
 $add = $shl | 1;
 $arrayidx9 = (208208 + ($add<<2)|0);
 $5 = HEAP32[$arrayidx9>>2]|0;
 $add$ptr10 = (($3) + ($5)|0);
 $6 = HEAP32[99592]|0;
 $7 = HEAP32[99593]|0;
 $8 = HEAP32[99624]|0;
 $sub11 = (($1) - ($8))|0;
 $mul = Math_imul($sub11, $6)|0;
 $add12 = (($mul) + ($7))|0;
 $count$0 = $sub;$dest$0 = $add$ptr;$dest2$0 = $add$ptr10;$frac$0 = $add12;
 while(1) {
  $9 = HEAP32[99594]|0;
  $10 = HEAP32[99598]|0;
  $11 = HEAP32[99595]|0;
  $shr = $frac$0 >> 16;
  $arrayidx13 = (($11) + ($shr)|0);
  $12 = HEAP8[$arrayidx13>>0]|0;
  $idxprom = $12&255;
  $arrayidx14 = (($10) + ($idxprom)|0);
  $13 = HEAP8[$arrayidx14>>0]|0;
  $idxprom15 = $13&255;
  $arrayidx16 = (($9) + ($idxprom15)|0);
  $14 = HEAP8[$arrayidx16>>0]|0;
  HEAP8[$dest$0>>0] = $14;
  $15 = HEAP32[99594]|0;
  $16 = HEAP32[99598]|0;
  $17 = HEAP32[99595]|0;
  $arrayidx18 = (($17) + ($shr)|0);
  $18 = HEAP8[$arrayidx18>>0]|0;
  $idxprom19 = $18&255;
  $arrayidx20 = (($16) + ($idxprom19)|0);
  $19 = HEAP8[$arrayidx20>>0]|0;
  $idxprom21 = $19&255;
  $arrayidx22 = (($15) + ($idxprom21)|0);
  $20 = HEAP8[$arrayidx22>>0]|0;
  HEAP8[$dest2$0>>0] = $20;
  $add$ptr23 = ((($dest$0)) + 320|0);
  $add$ptr24 = ((($dest2$0)) + 320|0);
  $add25 = (($frac$0) + ($6))|0;
  $dec = (($count$0) + -1)|0;
  $tobool = ($count$0|0)==(0);
  if ($tobool) {
   break;
  } else {
   $count$0 = $dec;$dest$0 = $add$ptr23;$dest2$0 = $add$ptr24;$frac$0 = $add25;
  }
 }
 STACKTOP = sp;return;
}
function _R_InitTranslationTables() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add = 0, $add11 = 0, $add14 = 0, $add16 = 0, $add4 = 0, $add6 = 0, $add9 = 0, $and = 0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx12$sink = 0, $arrayidx15 = 0;
 var $arrayidx17 = 0, $arrayidx18 = 0, $arrayidx7 = 0, $call = 0, $conv = 0, $conv10 = 0, $conv10$sink = 0, $conv13 = 0, $conv5 = 0, $exitcond = 0, $i$014 = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_Z_Malloc(768,1,0)|0);
 HEAP32[99599] = $call;
 $i$014 = 0;
 while(1) {
  $0 = $i$014 & 2147483632;
  $1 = ($0|0)==(112);
  if ($1) {
   $and = $i$014 & 15;
   $add = $and | 96;
   $conv = $add&255;
   $2 = HEAP32[99599]|0;
   $arrayidx = (($2) + ($i$014)|0);
   HEAP8[$arrayidx>>0] = $conv;
   $add4 = $and | 64;
   $conv5 = $add4&255;
   $3 = HEAP32[99599]|0;
   $add6 = (($i$014) + 256)|0;
   $arrayidx7 = (($3) + ($add6)|0);
   HEAP8[$arrayidx7>>0] = $conv5;
   $add9 = $and | 32;
   $conv10 = $add9&255;
   $4 = HEAP32[99599]|0;
   $add11 = (($i$014) + 512)|0;
   $arrayidx12 = (($4) + ($add11)|0);
   $arrayidx12$sink = $arrayidx12;$conv10$sink = $conv10;
  } else {
   $conv13 = $i$014&255;
   $5 = HEAP32[99599]|0;
   $add14 = (($i$014) + 512)|0;
   $arrayidx15 = (($5) + ($add14)|0);
   HEAP8[$arrayidx15>>0] = $conv13;
   $6 = HEAP32[99599]|0;
   $add16 = (($i$014) + 256)|0;
   $arrayidx17 = (($6) + ($add16)|0);
   HEAP8[$arrayidx17>>0] = $conv13;
   $7 = HEAP32[99599]|0;
   $arrayidx18 = (($7) + ($i$014)|0);
   $arrayidx12$sink = $arrayidx18;$conv10$sink = $conv13;
  }
  HEAP8[$arrayidx12$sink>>0] = $conv10$sink;
  $inc = (($i$014) + 1)|0;
  $exitcond = ($inc|0)==(256);
  if ($exitcond) {
   break;
  } else {
   $i$014 = $inc;
  }
 }
 return;
}
function _R_DrawSpan() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $and = 0, $and10 = 0, $and14 = 0;
 var $and6 = 0, $and8 = 0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx17 = 0, $arrayidx18 = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $cmp5 = 0, $count$0 = 0, $dec = 0, $dest$0 = 0, $idxprom = 0, $incdec$ptr = 0, $or = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or11 = 0;
 var $or16 = 0, $position$0 = 0, $shl = 0, $shl7 = 0, $shr13 = 0, $shr15 = 0, $sub = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99600]|0;
 $1 = HEAP32[99601]|0;
 $cmp = ($0|0)<($1|0);
 $cmp1 = ($1|0)<(0);
 $or$cond = $cmp | $cmp1;
 $cmp3 = ($0|0)>(319);
 $or$cond1 = $cmp3 | $or$cond;
 $2 = HEAP32[99602]|0;
 $cmp5 = ($2>>>0)>(200);
 $or$cond2 = $cmp5 | $or$cond1;
 if ($or$cond2) {
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $0;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  _I_Error(154338,$vararg_buffer);
  // unreachable;
 }
 $3 = HEAP32[99603]|0;
 $shl = $3 << 10;
 $and = $shl & -65536;
 $4 = HEAP32[99604]|0;
 $5 = $4 >>> 6;
 $and6 = $5 & 65535;
 $or = $and6 | $and;
 $6 = HEAP32[99605]|0;
 $shl7 = $6 << 10;
 $and8 = $shl7 & -65536;
 $7 = HEAP32[99606]|0;
 $8 = $7 >>> 6;
 $and10 = $8 & 65535;
 $or11 = $and10 | $and8;
 $arrayidx = (204880 + ($2<<2)|0);
 $9 = HEAP32[$arrayidx>>2]|0;
 $arrayidx12 = (208208 + ($1<<2)|0);
 $10 = HEAP32[$arrayidx12>>2]|0;
 $add$ptr = (($9) + ($10)|0);
 $sub = (($0) - ($1))|0;
 $count$0 = $sub;$dest$0 = $add$ptr;$position$0 = $or;
 while(1) {
  $shr13 = $position$0 >>> 4;
  $and14 = $shr13 & 4032;
  $shr15 = $position$0 >>> 26;
  $or16 = $and14 | $shr15;
  $11 = HEAP32[99607]|0;
  $12 = HEAP32[99608]|0;
  $arrayidx17 = (($12) + ($or16)|0);
  $13 = HEAP8[$arrayidx17>>0]|0;
  $idxprom = $13&255;
  $arrayidx18 = (($11) + ($idxprom)|0);
  $14 = HEAP8[$arrayidx18>>0]|0;
  $incdec$ptr = ((($dest$0)) + 1|0);
  HEAP8[$dest$0>>0] = $14;
  $add = (($position$0) + ($or11))|0;
  $dec = (($count$0) + -1)|0;
  $tobool = ($count$0|0)==(0);
  if ($tobool) {
   break;
  } else {
   $count$0 = $dec;$dest$0 = $incdec$ptr;$position$0 = $add;
  }
 }
 STACKTOP = sp;return;
}
function _R_DrawSpanLow() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add$ptr = 0, $and = 0, $and10 = 0, $and16 = 0, $and6 = 0, $and8 = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx19 = 0, $arrayidx20 = 0, $arrayidx21 = 0, $arrayidx23 = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $cmp5 = 0, $count$0 = 0, $dec = 0, $dest$0 = 0, $idxprom = 0;
 var $idxprom22 = 0, $incdec$ptr = 0, $incdec$ptr24 = 0, $or = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or11 = 0, $or18 = 0, $position$0 = 0, $shl = 0, $shl12 = 0, $shl13 = 0, $shl7 = 0, $shr15 = 0, $shr17 = 0, $sub = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99600]|0;
 $1 = HEAP32[99601]|0;
 $cmp = ($0|0)<($1|0);
 $cmp1 = ($1|0)<(0);
 $or$cond = $cmp | $cmp1;
 $cmp3 = ($0|0)>(319);
 $or$cond1 = $cmp3 | $or$cond;
 $2 = HEAP32[99602]|0;
 $cmp5 = ($2>>>0)>(200);
 $or$cond2 = $cmp5 | $or$cond1;
 if ($or$cond2) {
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $0;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  _I_Error(154338,$vararg_buffer);
  // unreachable;
 }
 $3 = HEAP32[99603]|0;
 $shl = $3 << 10;
 $and = $shl & -65536;
 $4 = HEAP32[99604]|0;
 $5 = $4 >>> 6;
 $and6 = $5 & 65535;
 $or = $and6 | $and;
 $6 = HEAP32[99605]|0;
 $shl7 = $6 << 10;
 $and8 = $shl7 & -65536;
 $7 = HEAP32[99606]|0;
 $8 = $7 >>> 6;
 $and10 = $8 & 65535;
 $or11 = $and10 | $and8;
 $sub = (($0) - ($1))|0;
 $shl12 = $1 << 1;
 HEAP32[99601] = $shl12;
 $shl13 = $0 << 1;
 HEAP32[99600] = $shl13;
 $arrayidx = (204880 + ($2<<2)|0);
 $9 = HEAP32[$arrayidx>>2]|0;
 $arrayidx14 = (208208 + ($shl12<<2)|0);
 $10 = HEAP32[$arrayidx14>>2]|0;
 $add$ptr = (($9) + ($10)|0);
 $count$0 = $sub;$dest$0 = $add$ptr;$position$0 = $or;
 while(1) {
  $shr15 = $position$0 >>> 4;
  $and16 = $shr15 & 4032;
  $shr17 = $position$0 >>> 26;
  $or18 = $and16 | $shr17;
  $11 = HEAP32[99607]|0;
  $12 = HEAP32[99608]|0;
  $arrayidx19 = (($12) + ($or18)|0);
  $13 = HEAP8[$arrayidx19>>0]|0;
  $idxprom = $13&255;
  $arrayidx20 = (($11) + ($idxprom)|0);
  $14 = HEAP8[$arrayidx20>>0]|0;
  $incdec$ptr = ((($dest$0)) + 1|0);
  HEAP8[$dest$0>>0] = $14;
  $15 = HEAP32[99607]|0;
  $16 = HEAP32[99608]|0;
  $arrayidx21 = (($16) + ($or18)|0);
  $17 = HEAP8[$arrayidx21>>0]|0;
  $idxprom22 = $17&255;
  $arrayidx23 = (($15) + ($idxprom22)|0);
  $18 = HEAP8[$arrayidx23>>0]|0;
  $incdec$ptr24 = ((($dest$0)) + 2|0);
  HEAP8[$incdec$ptr>>0] = $18;
  $add = (($position$0) + ($or11))|0;
  $dec = (($count$0) + -1)|0;
  $tobool = ($count$0|0)==(0);
  if ($tobool) {
   break;
  } else {
   $count$0 = $dec;$dest$0 = $incdec$ptr24;$position$0 = $add;
  }
 }
 STACKTOP = sp;return;
}
function _R_InitBuffer($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $add = 0, $add$ptr = 0, $add7 = 0, $arrayidx = 0, $arrayidx8 = 0, $cmp1 = 0, $cmp14 = 0, $cmp512 = 0, $exitcond = 0, $exitcond16 = 0, $i$015 = 0, $i$113 = 0, $inc = 0, $inc10 = 0, $mul = 0, $shr = 0, $shr3 = 0, $storemerge = 0, $sub = 0;
 var $sub2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (320 - ($width))|0;
 $shr = $sub >> 1;
 HEAP32[99609] = $shr;
 $cmp14 = ($width|0)>(0);
 if ($cmp14) {
  $i$015 = 0;
  while(1) {
   $add = (($i$015) + ($shr))|0;
   $arrayidx = (208208 + ($i$015<<2)|0);
   HEAP32[$arrayidx>>2] = $add;
   $inc = (($i$015) + 1)|0;
   $exitcond16 = ($inc|0)==($width|0);
   if ($exitcond16) {
    break;
   } else {
    $i$015 = $inc;
   }
  }
 }
 $cmp1 = ($width|0)==(320);
 $sub2 = (168 - ($height))|0;
 $shr3 = $sub2 >> 1;
 $storemerge = $cmp1 ? 0 : $shr3;
 HEAP32[99610] = $storemerge;
 $cmp512 = ($height|0)>(0);
 if (!($cmp512)) {
  return;
 }
 $0 = HEAP32[99853]|0;
 $i$113 = 0;
 while(1) {
  $add7 = (($i$113) + ($storemerge))|0;
  $mul = ($add7*320)|0;
  $add$ptr = (($0) + ($mul)|0);
  $arrayidx8 = (204880 + ($i$113<<2)|0);
  HEAP32[$arrayidx8>>2] = $add$ptr;
  $inc10 = (($i$113) + 1)|0;
  $exitcond = ($inc10|0)==($height|0);
  if ($exitcond) {
   break;
  } else {
   $i$113 = $inc10;
  }
 }
 return;
}
function _R_FillBackScreen() {
 var $$ = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr15 = 0;
 var $add$ptr15$1 = 0, $add$ptr15$2 = 0, $add$ptr15$3 = 0, $add24 = 0, $add30 = 0, $add31 = 0, $add33 = 0, $add40 = 0, $add42 = 0, $add48 = 0, $add49 = 0, $add51 = 0, $add56 = 0, $add60 = 0, $add62 = 0, $add63 = 0, $and = 0, $call = 0, $call10 = 0, $call19 = 0;
 var $call26 = 0, $call35 = 0, $call44 = 0, $call55 = 0, $call58 = 0, $call61 = 0, $call64 = 0, $cmp = 0, $cmp1 = 0, $cmp21 = 0, $cmp2134 = 0, $cmp28 = 0, $cmp2832 = 0, $cmp37 = 0, $cmp3730 = 0, $cmp46 = 0, $cmp4628 = 0, $cmp7 = 0, $dest$039 = 0, $exitcond = 0;
 var $inc17 = 0, $scevgep = 0, $shl = 0, $sub = 0, $sub39 = 0, $sub53 = 0, $sub54 = 0, $sub57 = 0, $sub59 = 0, $x$135 = 0, $x$233 = 0, $y$038 = 0, $y$131 = 0, $y$229 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[99611]|0;
 $cmp = ($0|0)==(320);
 $1 = HEAP32[99613]|0;
 $cmp1 = ($1|0)==(0|0);
 if ($cmp) {
  if ($cmp1) {
   return;
  }
  _Z_Free($1);
  HEAP32[99613] = 0;
  return;
 }
 if ($cmp1) {
  $call = (_Z_Malloc(53760,1,0)|0);
  HEAP32[99613] = $call;
 }
 $2 = HEAP32[32140]|0;
 $cmp7 = ($2|0)==(2);
 $$ = $cmp7 ? 154365 : 154373;
 $call10 = (_W_CacheLumpName($$,8)|0);
 $3 = HEAP32[99613]|0;
 $dest$039 = $3;$y$038 = 0;
 while(1) {
  $and = $y$038 << 6;
  $shl = $and & 4032;
  $add$ptr = (($call10) + ($shl)|0);
  dest=$dest$039; src=$add$ptr; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $add$ptr15 = ((($dest$039)) + 64|0);
  dest=$add$ptr15; src=$add$ptr; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $add$ptr15$1 = ((($dest$039)) + 128|0);
  dest=$add$ptr15$1; src=$add$ptr; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $add$ptr15$2 = ((($dest$039)) + 192|0);
  dest=$add$ptr15$2; src=$add$ptr; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $add$ptr15$3 = ((($dest$039)) + 256|0);
  dest=$add$ptr15$3; src=$add$ptr; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $scevgep = ((($dest$039)) + 320|0);
  $inc17 = (($y$038) + 1)|0;
  $exitcond = ($inc17|0)==(168);
  if ($exitcond) {
   break;
  } else {
   $dest$039 = $scevgep;$y$038 = $inc17;
  }
 }
 _V_UseBuffer($3);
 $call19 = (_W_CacheLumpName(154382,8)|0);
 $4 = HEAP32[99611]|0;
 $cmp2134 = ($4|0)>(0);
 if ($cmp2134) {
  $x$135 = 0;
  while(1) {
   $5 = HEAP32[99609]|0;
   $add = (($5) + ($x$135))|0;
   $6 = HEAP32[99610]|0;
   $sub = (($6) + -8)|0;
   _V_DrawPatch($add,$sub,$call19);
   $add24 = (($x$135) + 8)|0;
   $7 = HEAP32[99611]|0;
   $cmp21 = ($add24|0)<($7|0);
   if ($cmp21) {
    $x$135 = $add24;
   } else {
    break;
   }
  }
 }
 $call26 = (_W_CacheLumpName(154389,8)|0);
 $8 = HEAP32[99611]|0;
 $cmp2832 = ($8|0)>(0);
 if ($cmp2832) {
  $x$233 = 0;
  while(1) {
   $9 = HEAP32[99609]|0;
   $add30 = (($9) + ($x$233))|0;
   $10 = HEAP32[99610]|0;
   $11 = HEAP32[99597]|0;
   $add31 = (($11) + ($10))|0;
   _V_DrawPatch($add30,$add31,$call26);
   $add33 = (($x$233) + 8)|0;
   $12 = HEAP32[99611]|0;
   $cmp28 = ($add33|0)<($12|0);
   if ($cmp28) {
    $x$233 = $add33;
   } else {
    break;
   }
  }
 }
 $call35 = (_W_CacheLumpName(154396,8)|0);
 $13 = HEAP32[99597]|0;
 $cmp3730 = ($13|0)>(0);
 if ($cmp3730) {
  $y$131 = 0;
  while(1) {
   $14 = HEAP32[99609]|0;
   $sub39 = (($14) + -8)|0;
   $15 = HEAP32[99610]|0;
   $add40 = (($15) + ($y$131))|0;
   _V_DrawPatch($sub39,$add40,$call35);
   $add42 = (($y$131) + 8)|0;
   $16 = HEAP32[99597]|0;
   $cmp37 = ($add42|0)<($16|0);
   if ($cmp37) {
    $y$131 = $add42;
   } else {
    break;
   }
  }
 }
 $call44 = (_W_CacheLumpName(154403,8)|0);
 $17 = HEAP32[99597]|0;
 $cmp4628 = ($17|0)>(0);
 $18 = HEAP32[99609]|0;
 if ($cmp4628) {
  $20 = $18;$y$229 = 0;
  while(1) {
   $19 = HEAP32[99611]|0;
   $add48 = (($19) + ($20))|0;
   $21 = HEAP32[99610]|0;
   $add49 = (($21) + ($y$229))|0;
   _V_DrawPatch($add48,$add49,$call44);
   $add51 = (($y$229) + 8)|0;
   $22 = HEAP32[99597]|0;
   $cmp46 = ($add51|0)<($22|0);
   $23 = HEAP32[99609]|0;
   if ($cmp46) {
    $20 = $23;$y$229 = $add51;
   } else {
    $$lcssa = $23;
    break;
   }
  }
 } else {
  $$lcssa = $18;
 }
 $sub53 = (($$lcssa) + -8)|0;
 $24 = HEAP32[99610]|0;
 $sub54 = (($24) + -8)|0;
 $call55 = (_W_CacheLumpName(154410,8)|0);
 _V_DrawPatch($sub53,$sub54,$call55);
 $25 = HEAP32[99609]|0;
 $26 = HEAP32[99611]|0;
 $add56 = (($26) + ($25))|0;
 $27 = HEAP32[99610]|0;
 $sub57 = (($27) + -8)|0;
 $call58 = (_W_CacheLumpName(154418,8)|0);
 _V_DrawPatch($add56,$sub57,$call58);
 $28 = HEAP32[99609]|0;
 $sub59 = (($28) + -8)|0;
 $29 = HEAP32[99610]|0;
 $30 = HEAP32[99597]|0;
 $add60 = (($30) + ($29))|0;
 $call61 = (_W_CacheLumpName(154426,8)|0);
 _V_DrawPatch($sub59,$add60,$call61);
 $31 = HEAP32[99609]|0;
 $32 = HEAP32[99611]|0;
 $add62 = (($32) + ($31))|0;
 $33 = HEAP32[99610]|0;
 $34 = HEAP32[99597]|0;
 $add63 = (($34) + ($33))|0;
 $call64 = (_W_CacheLumpName(154434,8)|0);
 _V_DrawPatch($add62,$add63,$call64);
 _V_RestoreBuffer();
 return;
}
function _R_VideoErase($ofs,$count) {
 $ofs = $ofs|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $add$ptr1 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99613]|0;
 $cmp = ($0|0)==(0|0);
 if ($cmp) {
  return;
 }
 $1 = HEAP32[99853]|0;
 $add$ptr = (($1) + ($ofs)|0);
 $add$ptr1 = (($0) + ($ofs)|0);
 _memcpy(($add$ptr|0),($add$ptr1|0),($count|0))|0;
 return;
}
function _R_DrawViewBorder() {
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $add$ptr$i = 0, $add$ptr$i20 = 0, $add$ptr1$i = 0, $add$ptr1$i21 = 0, $add12 = 0, $add3 = 0, $add9 = 0, $brmerge = 0, $cmp = 0;
 var $cmp$i = 0, $cmp11 = 0, $cmp1127 = 0, $div = 0, $div2 = 0, $i$029 = 0, $inc = 0, $mul = 0, $mul4 = 0, $ofs$028 = 0, $shl = 0, $sub = 0, $sub1 = 0, $sub10 = 0, $sub5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99611]|0;
 $cmp = ($0|0)==(320);
 if ($cmp) {
  return;
 }
 $1 = HEAP32[99597]|0;
 $sub = (168 - ($1))|0;
 $div = (($sub|0) / 2)&-1;
 $sub1 = (320 - ($0))|0;
 $div2 = (($sub1|0) / 2)&-1;
 $mul = ($div*320)|0;
 $add = (($mul) + ($div2))|0;
 $2 = HEAP32[99613]|0;
 $cmp$i = ($2|0)==(0|0);
 if ($cmp$i) {
  $6 = $1;
 } else {
  $3 = HEAP32[99853]|0;
  _memcpy(($3|0),($2|0),($add|0))|0;
  $4 = HEAP32[99597]|0;
  $add3 = (($4) + ($div))|0;
  $mul4 = ($add3*320)|0;
  $sub5 = (($mul4) - ($div2))|0;
  $5 = HEAP32[99853]|0;
  $add$ptr$i20 = (($5) + ($sub5)|0);
  $add$ptr1$i21 = (($2) + ($sub5)|0);
  _memcpy(($add$ptr$i20|0),($add$ptr1$i21|0),($add|0))|0;
  $$pre = HEAP32[99597]|0;
  $6 = $$pre;
 }
 $shl = $div2 << 1;
 $cmp1127 = ($6|0)<(2);
 $brmerge = $cmp1127 | $cmp$i;
 if (!($brmerge)) {
  $add9 = (320 - ($div2))|0;
  $sub10 = (($add9) + ($mul))|0;
  $i$029 = 1;$ofs$028 = $sub10;
  while(1) {
   $7 = HEAP32[99853]|0;
   $add$ptr$i = (($7) + ($ofs$028)|0);
   $add$ptr1$i = (($2) + ($ofs$028)|0);
   _memcpy(($add$ptr$i|0),($add$ptr1$i|0),($shl|0))|0;
   $add12 = (($ofs$028) + 320)|0;
   $inc = (($i$029) + 1)|0;
   $8 = HEAP32[99597]|0;
   $cmp11 = ($inc|0)<($8|0);
   if ($cmp11) {
    $i$029 = $inc;$ofs$028 = $add12;
   } else {
    break;
   }
  }
 }
 _V_MarkRect(0,0,320,168);
 return;
}
function _R_PointOnSide($x,$y,$node) {
 $x = $x|0;
 $y = $y|0;
 $node = $node|0;
 var $$22 = 0, $$lobit = 0, $$lobit21 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $call44 = 0, $cmp = 0, $cmp14 = 0, $cmp22 = 0, $cmp45 = 0, $cmp5 = 0, $conv = 0, $conv23 = 0;
 var $dx1 = 0, $dy10 = 0, $dy4 = 0, $retval$0 = 0, $shr = 0, $shr43 = 0, $sub = 0, $sub27 = 0, $tobool = 0, $tobool11 = 0, $tobool32 = 0, $xor = 0, $xor30 = 0, $xor31 = 0, $xor35$lobit = 0, $y13 = 0, $y26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $dx1 = ((($node)) + 8|0);
 $0 = HEAP32[$dx1>>2]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  $1 = HEAP32[$node>>2]|0;
  $cmp = ($1|0)<($x|0);
  $dy4 = ((($node)) + 12|0);
  $2 = HEAP32[$dy4>>2]|0;
  if ($cmp) {
   $$lobit = $2 >>> 31;
   $retval$0 = $$lobit;
   return ($retval$0|0);
  } else {
   $cmp5 = ($2|0)>(0);
   $conv = $cmp5&1;
   $retval$0 = $conv;
   return ($retval$0|0);
  }
 }
 $dy10 = ((($node)) + 12|0);
 $3 = HEAP32[$dy10>>2]|0;
 $tobool11 = ($3|0)==(0);
 if ($tobool11) {
  $y13 = ((($node)) + 4|0);
  $4 = HEAP32[$y13>>2]|0;
  $cmp14 = ($4|0)<($y|0);
  if ($cmp14) {
   $cmp22 = ($0|0)>(0);
   $conv23 = $cmp22&1;
   $retval$0 = $conv23;
   return ($retval$0|0);
  } else {
   $$lobit21 = $0 >>> 31;
   $retval$0 = $$lobit21;
   return ($retval$0|0);
  }
 } else {
  $5 = HEAP32[$node>>2]|0;
  $sub = (($x) - ($5))|0;
  $y26 = ((($node)) + 4|0);
  $6 = HEAP32[$y26>>2]|0;
  $sub27 = (($y) - ($6))|0;
  $xor = $sub ^ $3;
  $xor30 = $xor ^ $0;
  $xor31 = $xor30 ^ $sub27;
  $tobool32 = ($xor31|0)<(0);
  if ($tobool32) {
   $xor35$lobit = $xor >>> 31;
   $retval$0 = $xor35$lobit;
   return ($retval$0|0);
  } else {
   $shr = $3 >> 16;
   $call = (_FixedMul($shr,$sub)|0);
   $7 = HEAP32[$dx1>>2]|0;
   $shr43 = $7 >> 16;
   $call44 = (_FixedMul($sub27,$shr43)|0);
   $cmp45 = ($call44|0)>=($call|0);
   $$22 = $cmp45&1;
   $retval$0 = $$22;
   return ($retval$0|0);
  }
 }
 return (0)|0;
}
function _R_PointOnSegSide($x,$y,$line) {
 $x = $x|0;
 $y = $y|0;
 $line = $line|0;
 var $$27 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call37 = 0, $cmp = 0, $cmp15 = 0, $cmp21 = 0, $cmp38 = 0, $cmp9 = 0, $conv = 0, $conv22 = 0, $retval$0 = 0, $shr = 0, $shr36 = 0, $sub = 0;
 var $sub$lobit = 0, $sub24 = 0, $sub25 = 0, $sub7 = 0, $sub7$lobit = 0, $tobool = 0, $tobool13 = 0, $tobool28 = 0, $v2 = 0, $xor = 0, $xor26 = 0, $xor27 = 0, $xor30$lobit = 0, $y3 = 0, $y6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$line>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $y3 = ((($0)) + 4|0);
 $2 = HEAP32[$y3>>2]|0;
 $v2 = ((($line)) + 4|0);
 $3 = HEAP32[$v2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $sub = (($4) - ($1))|0;
 $y6 = ((($3)) + 4|0);
 $5 = HEAP32[$y6>>2]|0;
 $sub7 = (($5) - ($2))|0;
 $tobool = ($sub|0)==(0);
 if ($tobool) {
  $cmp = ($1|0)<($x|0);
  if ($cmp) {
   $sub7$lobit = $sub7 >>> 31;
   $retval$0 = $sub7$lobit;
   return ($retval$0|0);
  } else {
   $cmp9 = ($sub7|0)>(0);
   $conv = $cmp9&1;
   $retval$0 = $conv;
   return ($retval$0|0);
  }
 }
 $tobool13 = ($sub7|0)==(0);
 if ($tobool13) {
  $cmp15 = ($2|0)<($y|0);
  if ($cmp15) {
   $cmp21 = ($sub|0)>(0);
   $conv22 = $cmp21&1;
   $retval$0 = $conv22;
   return ($retval$0|0);
  } else {
   $sub$lobit = $sub >>> 31;
   $retval$0 = $sub$lobit;
   return ($retval$0|0);
  }
 } else {
  $sub24 = (($x) - ($1))|0;
  $sub25 = (($y) - ($2))|0;
  $xor = $sub7 ^ $sub24;
  $xor26 = $xor ^ $sub25;
  $xor27 = $xor26 ^ $sub;
  $tobool28 = ($xor27|0)<(0);
  if ($tobool28) {
   $xor30$lobit = $xor >>> 31;
   $retval$0 = $xor30$lobit;
   return ($retval$0|0);
  } else {
   $shr = $sub7 >> 16;
   $call = (_FixedMul($shr,$sub24)|0);
   $shr36 = $sub >> 16;
   $call37 = (_FixedMul($sub25,$shr36)|0);
   $cmp38 = ($call37|0)>=($call|0);
   $$27 = $cmp38&1;
   $retval$0 = $$27;
   return ($retval$0|0);
  }
 }
 return (0)|0;
}
function _R_PointToAngle($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add33 = 0, $add40 = 0, $arrayidx = 0, $arrayidx16 = 0, $arrayidx20 = 0, $arrayidx28 = 0, $arrayidx32 = 0;
 var $arrayidx39 = 0, $arrayidx43 = 0, $arrayidx9 = 0, $call = 0, $call15 = 0, $call19 = 0, $call27 = 0, $call31 = 0, $call38 = 0, $call42 = 0, $call8 = 0, $cmp = 0, $cmp13 = 0, $cmp23 = 0, $cmp25 = 0, $cmp36 = 0, $cmp4 = 0, $cmp6 = 0, $retval$0 = 0, $sub = 0;
 var $sub1 = 0, $sub10 = 0, $sub12 = 0, $sub17 = 0, $sub22 = 0, $sub29 = 0, $sub35 = 0, $sub44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99614]|0;
 $sub = (($x) - ($0))|0;
 $1 = HEAP32[99615]|0;
 $sub1 = (($y) - ($1))|0;
 $2 = $sub1 | $sub;
 $3 = ($2|0)==(0);
 if ($3) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $cmp = ($sub|0)>(-1);
 if ($cmp) {
  $cmp4 = ($sub1|0)>(-1);
  if ($cmp4) {
   $cmp6 = ($sub|0)>($sub1|0);
   if ($cmp6) {
    $call = (_SlopeDiv($sub1,$sub)|0);
    $arrayidx = (115680 + ($call<<2)|0);
    $4 = HEAP32[$arrayidx>>2]|0;
    $retval$0 = $4;
    return ($retval$0|0);
   } else {
    $call8 = (_SlopeDiv($sub,$sub1)|0);
    $arrayidx9 = (115680 + ($call8<<2)|0);
    $5 = HEAP32[$arrayidx9>>2]|0;
    $sub10 = (1073741823 - ($5))|0;
    $retval$0 = $sub10;
    return ($retval$0|0);
   }
  } else {
   $sub12 = (0 - ($sub1))|0;
   $cmp13 = ($sub|0)>($sub12|0);
   if ($cmp13) {
    $call15 = (_SlopeDiv($sub12,$sub)|0);
    $arrayidx16 = (115680 + ($call15<<2)|0);
    $6 = HEAP32[$arrayidx16>>2]|0;
    $sub17 = (0 - ($6))|0;
    $retval$0 = $sub17;
    return ($retval$0|0);
   } else {
    $call19 = (_SlopeDiv($sub,$sub12)|0);
    $arrayidx20 = (115680 + ($call19<<2)|0);
    $7 = HEAP32[$arrayidx20>>2]|0;
    $add = (($7) + -1073741824)|0;
    $retval$0 = $add;
    return ($retval$0|0);
   }
  }
 } else {
  $sub22 = (0 - ($sub))|0;
  $cmp23 = ($sub1|0)>(-1);
  if ($cmp23) {
   $cmp25 = ($sub1|0)<($sub22|0);
   if ($cmp25) {
    $call27 = (_SlopeDiv($sub1,$sub22)|0);
    $arrayidx28 = (115680 + ($call27<<2)|0);
    $8 = HEAP32[$arrayidx28>>2]|0;
    $sub29 = (2147483647 - ($8))|0;
    $retval$0 = $sub29;
    return ($retval$0|0);
   } else {
    $call31 = (_SlopeDiv($sub22,$sub1)|0);
    $arrayidx32 = (115680 + ($call31<<2)|0);
    $9 = HEAP32[$arrayidx32>>2]|0;
    $add33 = (($9) + 1073741824)|0;
    $retval$0 = $add33;
    return ($retval$0|0);
   }
  } else {
   $sub35 = (0 - ($sub1))|0;
   $cmp36 = ($sub22|0)>($sub35|0);
   if ($cmp36) {
    $call38 = (_SlopeDiv($sub35,$sub22)|0);
    $arrayidx39 = (115680 + ($call38<<2)|0);
    $10 = HEAP32[$arrayidx39>>2]|0;
    $add40 = $10 ^ -2147483648;
    $retval$0 = $add40;
    return ($retval$0|0);
   } else {
    $call42 = (_SlopeDiv($sub22,$sub35)|0);
    $arrayidx43 = (115680 + ($call42<<2)|0);
    $11 = HEAP32[$arrayidx43>>2]|0;
    $sub44 = (-1073741825 - ($11))|0;
    $retval$0 = $sub44;
    return ($retval$0|0);
   }
  }
 }
 return (0)|0;
}
function _R_PointToAngle2($x1,$y1,$x2,$y2) {
 $x1 = $x1|0;
 $y1 = $y1|0;
 $x2 = $x2|0;
 $y2 = $y2|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99614] = $x1;
 HEAP32[99615] = $y1;
 $call = (_R_PointToAngle($x2,$y2)|0);
 return ($call|0);
}
function _R_PointToDist($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add = 0, $arrayidx = 0, $arrayidx8 = 0, $call5 = 0, $call9 = 0, $cmp = 0, $cmp3 = 0, $frac$0 = 0, $ispos = 0, $ispos13 = 0, $neg = 0, $neg14 = 0, $phitmp = 0, $shr7 = 0;
 var $spec$select = 0, $spec$select15 = 0, $sub = 0, $sub1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99614]|0;
 $sub = (($x) - ($0))|0;
 $ispos = ($sub|0)>(-1);
 $neg = (0 - ($sub))|0;
 $1 = $ispos ? $sub : $neg;
 $2 = HEAP32[99615]|0;
 $sub1 = (($y) - ($2))|0;
 $ispos13 = ($sub1|0)>(-1);
 $neg14 = (0 - ($sub1))|0;
 $3 = $ispos13 ? $sub1 : $neg14;
 $cmp = ($3|0)>($1|0);
 $spec$select15 = $cmp ? $3 : $1;
 $cmp3 = ($spec$select15|0)==(0);
 if ($cmp3) {
  $frac$0 = 0;
 } else {
  $spec$select = $cmp ? $1 : $3;
  $call5 = (_FixedDiv($spec$select,$spec$select15)|0);
  $phitmp = $call5 >> 5;
  $frac$0 = $phitmp;
 }
 $arrayidx = (115680 + ($frac$0<<2)|0);
 $4 = HEAP32[$arrayidx>>2]|0;
 $add = (($4) + 1073741824)|0;
 $shr7 = $add >>> 19;
 $arrayidx8 = (74720 + ($shr7<<2)|0);
 $5 = HEAP32[$arrayidx8>>2]|0;
 $call9 = (_FixedDiv($spec$select15,$5)|0);
 return ($call9|0);
}
function _R_ScaleFromGlobalAngle($visangle) {
 $visangle = $visangle|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add = 0, $add2 = 0, $arrayidx = 0, $arrayidx4 = 0, $call = 0, $call5 = 0, $call7 = 0, $cmp = 0, $cmp8 = 0, $shl = 0, $shr = 0, $shr3 = 0;
 var $shr6 = 0, $spec$select = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99616]|0;
 $sub = (($visangle) + 1073741824)|0;
 $add = (($sub) - ($0))|0;
 $1 = HEAP32[99675]|0;
 $add2 = (($sub) - ($1))|0;
 $shr = $add >>> 19;
 $arrayidx = (74720 + ($shr<<2)|0);
 $2 = HEAP32[$arrayidx>>2]|0;
 $shr3 = $add2 >>> 19;
 $arrayidx4 = (74720 + ($shr3<<2)|0);
 $3 = HEAP32[$arrayidx4>>2]|0;
 $4 = HEAP32[99617]|0;
 $call = (_FixedMul($4,$3)|0);
 $5 = HEAP32[99618]|0;
 $shl = $call << $5;
 $6 = HEAP32[99660]|0;
 $call5 = (_FixedMul($6,$2)|0);
 $shr6 = $shl >> 16;
 $cmp = ($call5|0)>($shr6|0);
 if (!($cmp)) {
  return 4194304;
 }
 $call7 = (_FixedDiv($shl,$call5)|0);
 $cmp8 = ($call7|0)>(4194304);
 if ($cmp8) {
  return 4194304;
 } else {
  $7 = ($call7|0)>(256);
  $spec$select = $7 ? $call7 : 256;
  return ($spec$select|0);
 }
 return (0)|0;
}
function _R_InitTextureMapping() {
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add13 = 0, $add44 = 0, $arrayidx = 0, $arrayidx20 = 0, $arrayidx24 = 0, $arrayidx28 = 0, $arrayidx38 = 0;
 var $call = 0, $call7 = 0, $cmp1 = 0, $cmp10 = 0, $cmp14 = 0, $cmp22 = 0, $cmp2227 = 0, $cmp25 = 0, $cmp3 = 0, $cmp39 = 0, $cmp45 = 0, $exitcond = 0, $exitcond30 = 0, $i$029 = 0, $i$1 = 0, $i$226 = 0, $inc = 0, $inc26 = 0, $inc30 = 0, $inc51 = 0;
 var $shl = 0, $shr = 0, $spec$select = 0, $sub = 0, $sub27 = 0, $sub9 = 0, $t$0 = 0, $x$028 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99619]|0;
 $1 = HEAP32[(70624)>>2]|0;
 $call = (_FixedDiv($0,$1)|0);
 $i$029 = 0;
 while(1) {
  $arrayidx = (58336 + ($i$029<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $cmp1 = ($2|0)>(131072);
  do {
   if ($cmp1) {
    $t$0 = -1;
   } else {
    $cmp3 = ($2|0)<(-131072);
    if ($cmp3) {
     $3 = HEAP32[99612]|0;
     $add = (($3) + 1)|0;
     $t$0 = $add;
     break;
    }
    $call7 = (_FixedMul($2,$call)|0);
    $4 = HEAP32[99619]|0;
    $sub = (($4) - ($call7))|0;
    $sub9 = (($sub) + 65535)|0;
    $shr = $sub9 >> 16;
    $cmp10 = ($sub|0)<(-131071);
    if ($cmp10) {
     $t$0 = -1;
    } else {
     $5 = HEAP32[99612]|0;
     $add13 = (($5) + 1)|0;
     $cmp14 = ($shr|0)>($add13|0);
     $spec$select = $cmp14 ? $add13 : $shr;
     $t$0 = $spec$select;
    }
   }
  } while(0);
  $arrayidx20 = (212688 + ($i$029<<2)|0);
  HEAP32[$arrayidx20>>2] = $t$0;
  $inc = (($i$029) + 1)|0;
  $exitcond30 = ($inc|0)==(4096);
  if ($exitcond30) {
   break;
  } else {
   $i$029 = $inc;
  }
 }
 $6 = HEAP32[99612]|0;
 $cmp2227 = ($6|0)<(0);
 if (!($cmp2227)) {
  $x$028 = 0;
  while(1) {
   $i$1 = 0;
   while(1) {
    $arrayidx24 = (212688 + ($i$1<<2)|0);
    $7 = HEAP32[$arrayidx24>>2]|0;
    $cmp25 = ($7|0)>($x$028|0);
    $inc26 = (($i$1) + 1)|0;
    if ($cmp25) {
     $i$1 = $inc26;
    } else {
     break;
    }
   }
   $shl = $i$1 << 19;
   $sub27 = (($shl) + -1073741824)|0;
   $arrayidx28 = (229072 + ($x$028<<2)|0);
   HEAP32[$arrayidx28>>2] = $sub27;
   $inc30 = (($x$028) + 1)|0;
   $cmp22 = ($x$028|0)<($6|0);
   if ($cmp22) {
    $x$028 = $inc30;
   } else {
    break;
   }
  }
 }
 $i$226 = 0;
 while(1) {
  $arrayidx38 = (212688 + ($i$226<<2)|0);
  $8 = HEAP32[$arrayidx38>>2]|0;
  $cmp39 = ($8|0)==(-1);
  if ($cmp39) {
   $$sink = 0;
   label = 16;
  } else {
   $9 = HEAP32[99612]|0;
   $add44 = (($9) + 1)|0;
   $cmp45 = ($8|0)==($add44|0);
   if ($cmp45) {
    $$sink = $9;
    label = 16;
   }
  }
  if ((label|0) == 16) {
   label = 0;
   HEAP32[$arrayidx38>>2] = $$sink;
  }
  $inc51 = (($i$226) + 1)|0;
  $exitcond = ($inc51|0)==(4096);
  if ($exitcond) {
   break;
  } else {
   $i$226 = $inc51;
  }
 }
 $10 = HEAP32[57268]|0;
 HEAP32[99620] = $10;
 return;
}
function _R_SetViewSize($blocks,$detail) {
 $blocks = $blocks|0;
 $detail = $detail|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99621] = 1;
 HEAP32[99622] = $blocks;
 HEAP32[99623] = $detail;
 return;
}
function _R_ExecuteSetViewSize() {
 var $$lcssa = 0, $$pre46 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $R_DrawColumn$R_DrawColumnLow = 0, $R_DrawFuzzColumn$R_DrawFuzzColumnLow = 0, $R_DrawSpan$R_DrawSpanLow = 0, $R_DrawTranslatedColumn$R_DrawTranslatedColumnLow = 0, $add = 0, $add$ptr = 0, $and = 0, $arrayidx = 0, $arrayidx22 = 0, $arrayidx30 = 0, $arrayidx32 = 0, $arrayidx35 = 0, $arrayidx66 = 0, $call21 = 0, $call34 = 0, $cmp = 0, $cmp1141 = 0, $cmp13 = 0, $cmp1339 = 0;
 var $cmp27 = 0, $cmp2737 = 0, $conv = 0, $div = 0, $div10 = 0, $div16 = 0, $div19 = 0, $div2 = 0, $div3 = 0, $div46$udiv = 0, $div53 = 0, $div54 = 0, $div9 = 0, $exitcond = 0, $exitcond44 = 0, $exitcond45 = 0, $i$042 = 0, $i$140 = 0, $i$238 = 0, $i$336 = 0;
 var $inc = 0, $inc24 = 0, $inc37 = 0, $inc68 = 0, $inc71 = 0, $ispos = 0, $ispos29 = 0, $j$035 = 0, $mul = 0, $mul1 = 0, $mul20 = 0, $mul45 = 0, $mul51 = 0, $mul64 = 0, $mul8 = 0, $neg = 0, $neg30 = 0, $shl = 0, $shl17 = 0, $shl18 = 0;
 var $shl4 = 0, $shl52 = 0, $shr = 0, $shr31 = 0, $spec$store$select = 0, $spec$store$select1 = 0, $storemerge = 0, $sub = 0, $sub43 = 0, $sub55 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99621] = 0;
 $0 = HEAP32[99622]|0;
 $cmp = ($0|0)==(11);
 if ($cmp) {
  HEAP32[99611] = 320;
  $2 = 320;$storemerge = 200;
 } else {
  $mul = $0 << 5;
  HEAP32[99611] = $mul;
  $mul1 = ($0*168)|0;
  $div = (($mul1|0) / 10)&-1;
  $and = $div & -8;
  $2 = $mul;$storemerge = $and;
 }
 HEAP32[99597] = $storemerge;
 $1 = HEAP32[99623]|0;
 HEAP32[99618] = $1;
 $shr = $2 >> $1;
 HEAP32[99612] = $shr;
 $div2 = (($storemerge|0) / 2)&-1;
 HEAP32[99624] = $div2;
 $div3 = (($shr|0) / 2)&-1;
 $shl = $div3 << 16;
 HEAP32[99619] = $shl;
 $shl4 = $div2 << 16;
 HEAP32[99625] = $shl4;
 HEAP32[99617] = $shl;
 $tobool = ($1|0)==(0);
 $R_DrawColumn$R_DrawColumnLow = $tobool ? 152 : 153;
 $R_DrawFuzzColumn$R_DrawFuzzColumnLow = $tobool ? 154 : 155;
 $R_DrawTranslatedColumn$R_DrawTranslatedColumnLow = $tobool ? 156 : 157;
 $R_DrawSpan$R_DrawSpanLow = $tobool ? 158 : 159;
 HEAP32[99626] = $R_DrawColumn$R_DrawColumnLow;
 HEAP32[99627] = $R_DrawColumn$R_DrawColumnLow;
 HEAP32[99628] = $R_DrawFuzzColumn$R_DrawFuzzColumnLow;
 HEAP32[99629] = $R_DrawTranslatedColumn$R_DrawTranslatedColumnLow;
 HEAP32[99630] = $R_DrawSpan$R_DrawSpanLow;
 _R_InitBuffer($2,$storemerge);
 _R_InitTextureMapping();
 $3 = HEAP32[99612]|0;
 $mul8 = $3 << 16;
 $div9 = (($mul8|0) / 320)&-1;
 HEAP32[99709] = $div9;
 $div10 = (20971520 / ($3|0))&-1;
 HEAP32[99710] = $div10;
 $cmp1141 = ($3|0)>(0);
 $4 = HEAP32[99597]|0;
 if ($cmp1141) {
  $conv = $4&65535;
  $i$042 = 0;
  while(1) {
   $arrayidx = (384272 + ($i$042<<1)|0);
   HEAP16[$arrayidx>>1] = $conv;
   $inc = (($i$042) + 1)|0;
   $exitcond45 = ($inc|0)==($3|0);
   if ($exitcond45) {
    break;
   } else {
    $i$042 = $inc;
   }
  }
 }
 $cmp1339 = ($4|0)>(0);
 if ($cmp1339) {
  $5 = $4;$8 = $3;$i$140 = 0;
  while(1) {
   $div16 = (($5|0) / 2)&-1;
   $sub = (($i$140) - ($div16))|0;
   $shl17 = $sub << 16;
   $add = $shl17 | 32768;
   $ispos29 = ($add|0)>(-1);
   $neg30 = (0 - ($add))|0;
   $6 = $ispos29 ? $add : $neg30;
   $7 = HEAP32[99618]|0;
   $shl18 = $8 << $7;
   $div19 = (($shl18|0) / 2)&-1;
   $mul20 = $div19 << 16;
   $call21 = (_FixedDiv($mul20,$6)|0);
   $arrayidx22 = (242624 + ($i$140<<2)|0);
   HEAP32[$arrayidx22>>2] = $call21;
   $inc24 = (($i$140) + 1)|0;
   $9 = HEAP32[99597]|0;
   $cmp13 = ($inc24|0)<($9|0);
   $$pre46 = HEAP32[99612]|0;
   if ($cmp13) {
    $5 = $9;$8 = $$pre46;$i$140 = $inc24;
   } else {
    $10 = $$pre46;
    break;
   }
  }
 } else {
  $10 = $3;
 }
 $cmp2737 = ($10|0)>(0);
 if ($cmp2737) {
  $i$238 = 0;
  while(1) {
   $arrayidx30 = (229072 + ($i$238<<2)|0);
   $11 = HEAP32[$arrayidx30>>2]|0;
   $shr31 = $11 >>> 19;
   $arrayidx32 = ((82912) + ($shr31<<2)|0);
   $12 = HEAP32[$arrayidx32>>2]|0;
   $ispos = ($12|0)>(-1);
   $neg = (0 - ($12))|0;
   $13 = $ispos ? $12 : $neg;
   $call34 = (_FixedDiv(65536,$13)|0);
   $arrayidx35 = (245824 + ($i$238<<2)|0);
   HEAP32[$arrayidx35>>2] = $call34;
   $inc37 = (($i$238) + 1)|0;
   $14 = HEAP32[99612]|0;
   $cmp27 = ($inc37|0)<($14|0);
   if ($cmp27) {
    $i$238 = $inc37;
   } else {
    $$lcssa = $14;
    break;
   }
  }
 } else {
  $$lcssa = $10;
 }
 $15 = HEAP32[99618]|0;
 $shl52 = $$lcssa << $15;
 $16 = HEAP32[99584]|0;
 $i$336 = 0;
 while(1) {
  $sub43 = $i$336 << 6;
  $mul45 = (960 - ($sub43))|0;
  $div46$udiv = $mul45 >>> 4;
  $j$035 = 0;
  while(1) {
   $mul51 = ($j$035*320)|0;
   $div53 = (($mul51|0) / ($shl52|0))&-1;
   $div54 = (($div53|0) / 2)&-1;
   $sub55 = (($div46$udiv) - ($div54))|0;
   $17 = ($sub55|0)>(0);
   $spec$store$select = $17 ? $sub55 : 0;
   $18 = ($spec$store$select|0)<(31);
   $spec$store$select1 = $18 ? $spec$store$select : 31;
   $mul64 = $spec$store$select1 << 8;
   $add$ptr = (($16) + ($mul64)|0);
   $arrayidx66 = ((238560 + (($i$336*192)|0)|0) + ($j$035<<2)|0);
   HEAP32[$arrayidx66>>2] = $add$ptr;
   $inc68 = (($j$035) + 1)|0;
   $exitcond = ($inc68|0)==(48);
   if ($exitcond) {
    break;
   } else {
    $j$035 = $inc68;
   }
  }
  $inc71 = (($i$336) + 1)|0;
  $exitcond44 = ($inc71|0)==(16);
  if ($exitcond44) {
   break;
  } else {
   $i$336 = $inc71;
  }
 }
 return;
}
function _R_Init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$i = 0, $add$ptr$i = 0, $arrayidx12$i = 0, $call$i = 0, $div$udiv$i = 0, $div5$i = 0, $exitcond$i = 0, $exitcond18$i = 0, $i$017$i = 0, $inc14$i = 0, $j$016$i = 0, $mul1$i = 0, $mul11$i = 0, $shl$i = 0, $shr$i = 0;
 var $spec$store$select$i = 0, $spec$store$select1$i = 0, $sub$i = 0, $sub6$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _R_InitData();
 (_putchar(46)|0);
 (_putchar(46)|0);
 (_putchar(46)|0);
 $0 = HEAP32[32247]|0;
 $1 = HEAP32[99383]|0;
 HEAP32[99621] = 1;
 HEAP32[99622] = $0;
 HEAP32[99623] = $1;
 (_putchar(46)|0);
 $i$017$i = 0;
 while(1) {
  $sub$i = $i$017$i << 6;
  $mul1$i = (960 - ($sub$i))|0;
  $div$udiv$i = $mul1$i >>> 4;
  $j$016$i = 0;
  while(1) {
   $add$i = (($j$016$i) + 1)|0;
   $shl$i = $add$i << 20;
   $call$i = (_FixedDiv(10485760,$shl$i)|0);
   $shr$i = $call$i >> 12;
   $div5$i = (($shr$i|0) / 2)&-1;
   $sub6$i = (($div$udiv$i) - ($div5$i))|0;
   $2 = ($sub6$i|0)>(0);
   $spec$store$select$i = $2 ? $sub6$i : 0;
   $3 = ($spec$store$select$i|0)<(31);
   $spec$store$select1$i = $3 ? $spec$store$select$i : 31;
   $4 = HEAP32[99584]|0;
   $mul11$i = $spec$store$select1$i << 8;
   $add$ptr$i = (($4) + ($mul11$i)|0);
   $arrayidx12$i = ((230368 + ($i$017$i<<9)|0) + ($j$016$i<<2)|0);
   HEAP32[$arrayidx12$i>>2] = $add$ptr$i;
   $exitcond$i = ($add$i|0)==(128);
   if ($exitcond$i) {
    break;
   } else {
    $j$016$i = $add$i;
   }
  }
  $inc14$i = (($i$017$i) + 1)|0;
  $exitcond18$i = ($inc14$i|0)==(16);
  if ($exitcond18$i) {
   break;
  } else {
   $i$017$i = $inc14$i;
  }
 }
 (_putchar(46)|0);
 _R_InitSkyMap();
 _R_InitTranslationTables();
 (_putchar(46)|0);
 HEAP32[99631] = 0;
 return;
}
function _R_PointInSubsector($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $$22$i = 0, $$lobit$i = 0, $$lobit21$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and3 = 0, $and7 = 0, $arrayidx = 0;
 var $arrayidx2 = 0, $arrayidx4 = 0, $call$i = 0, $call44$i = 0, $cmp$i = 0, $cmp14$i = 0, $cmp22$i = 0, $cmp45$i = 0, $cmp5$i = 0, $conv = 0, $conv$i = 0, $conv$le = 0, $conv23$i = 0, $dx1$i = 0, $dy10$i = 0, $dy4$i = 0, $nodenum$0$lcssa = 0, $nodenum$09 = 0, $retval$0 = 0, $retval$0$i = 0;
 var $shr$i = 0, $shr43$i = 0, $sub = 0, $sub$i = 0, $sub27$i = 0, $tobool = 0, $tobool$i = 0, $tobool1 = 0, $tobool11$i = 0, $tobool18 = 0, $tobool32$i = 0, $xor$i = 0, $xor30$i = 0, $xor31$i = 0, $xor35$lobit$i = 0, $y13$i = 0, $y26$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99507]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  $1 = HEAP32[99504]|0;
  $retval$0 = $1;
  return ($retval$0|0);
 }
 $sub = (($0) + -1)|0;
 $and7 = $sub & 32768;
 $tobool18 = ($and7|0)==(0);
 if ($tobool18) {
  $nodenum$09 = $sub;
  while(1) {
   $2 = HEAP32[99508]|0;
   $arrayidx = (($2) + (($nodenum$09*52)|0)|0);
   $dx1$i = (((($2) + (($nodenum$09*52)|0)|0)) + 8|0);
   $3 = HEAP32[$dx1$i>>2]|0;
   $tobool$i = ($3|0)==(0);
   do {
    if ($tobool$i) {
     $4 = HEAP32[$arrayidx>>2]|0;
     $cmp$i = ($4|0)<($x|0);
     $dy4$i = (((($2) + (($nodenum$09*52)|0)|0)) + 12|0);
     $5 = HEAP32[$dy4$i>>2]|0;
     if ($cmp$i) {
      $$lobit$i = $5 >>> 31;
      $retval$0$i = $$lobit$i;
      break;
     } else {
      $cmp5$i = ($5|0)>(0);
      $conv$i = $cmp5$i&1;
      $retval$0$i = $conv$i;
      break;
     }
    } else {
     $dy10$i = (((($2) + (($nodenum$09*52)|0)|0)) + 12|0);
     $6 = HEAP32[$dy10$i>>2]|0;
     $tobool11$i = ($6|0)==(0);
     if ($tobool11$i) {
      $y13$i = (((($2) + (($nodenum$09*52)|0)|0)) + 4|0);
      $7 = HEAP32[$y13$i>>2]|0;
      $cmp14$i = ($7|0)<($y|0);
      if ($cmp14$i) {
       $cmp22$i = ($3|0)>(0);
       $conv23$i = $cmp22$i&1;
       $retval$0$i = $conv23$i;
       break;
      } else {
       $$lobit21$i = $3 >>> 31;
       $retval$0$i = $$lobit21$i;
       break;
      }
     } else {
      $8 = HEAP32[$arrayidx>>2]|0;
      $sub$i = (($x) - ($8))|0;
      $y26$i = (((($2) + (($nodenum$09*52)|0)|0)) + 4|0);
      $9 = HEAP32[$y26$i>>2]|0;
      $sub27$i = (($y) - ($9))|0;
      $xor$i = $sub$i ^ $6;
      $xor30$i = $xor$i ^ $3;
      $xor31$i = $xor30$i ^ $sub27$i;
      $tobool32$i = ($xor31$i|0)<(0);
      if ($tobool32$i) {
       $xor35$lobit$i = $xor$i >>> 31;
       $retval$0$i = $xor35$lobit$i;
       break;
      } else {
       $shr$i = $6 >> 16;
       $call$i = (_FixedMul($shr$i,$sub$i)|0);
       $10 = HEAP32[$dx1$i>>2]|0;
       $shr43$i = $10 >> 16;
       $call44$i = (_FixedMul($sub27$i,$shr43$i)|0);
       $cmp45$i = ($call44$i|0)>=($call$i|0);
       $$22$i = $cmp45$i&1;
       $retval$0$i = $$22$i;
       break;
      }
     }
    }
   } while(0);
   $arrayidx2 = ((((($2) + (($nodenum$09*52)|0)|0)) + 48|0) + ($retval$0$i<<1)|0);
   $11 = HEAP16[$arrayidx2>>1]|0;
   $conv = $11&65535;
   $and = $conv & 32768;
   $tobool1 = ($and|0)==(0);
   if ($tobool1) {
    $nodenum$09 = $conv;
   } else {
    break;
   }
  }
  $conv$le = $11&65535;
  $nodenum$0$lcssa = $conv$le;
 } else {
  $nodenum$0$lcssa = $sub;
 }
 $12 = HEAP32[99504]|0;
 $and3 = $nodenum$0$lcssa & -32769;
 $arrayidx4 = (($12) + ($and3<<3)|0);
 $retval$0 = $arrayidx4;
 return ($retval$0|0);
}
function _R_SetupFrame($player) {
 $player = $player|0;
 var $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $angle = 0, $arrayidx = 0, $arrayidx4 = 0, $extralight = 0;
 var $fixedcolormap = 0, $inc8 = 0, $inc9 = 0, $mul = 0, $shr = 0, $tobool = 0, $viewz = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99632] = $player;
 $0 = HEAP32[$player>>2]|0;
 $x = ((($0)) + 12|0);
 $1 = HEAP32[$x>>2]|0;
 HEAP32[99614] = $1;
 $y = ((($0)) + 16|0);
 $2 = HEAP32[$y>>2]|0;
 HEAP32[99615] = $2;
 $angle = ((($0)) + 32|0);
 $3 = HEAP32[$angle>>2]|0;
 $4 = HEAP32[99633]|0;
 $add = (($4) + ($3))|0;
 HEAP32[99616] = $add;
 $extralight = ((($player)) + 240|0);
 $5 = HEAP32[$extralight>>2]|0;
 HEAP32[99634] = $5;
 $viewz = ((($player)) + 24|0);
 $6 = HEAP32[$viewz>>2]|0;
 HEAP32[99635] = $6;
 $shr = $add >>> 19;
 $arrayidx = (74720 + ($shr<<2)|0);
 $7 = HEAP32[$arrayidx>>2]|0;
 HEAP32[99636] = $7;
 $arrayidx4 = ((82912) + ($shr<<2)|0);
 $8 = HEAP32[$arrayidx4>>2]|0;
 HEAP32[99637] = $8;
 HEAP32[99638] = 0;
 $fixedcolormap = ((($player)) + 244|0);
 $9 = HEAP32[$fixedcolormap>>2]|0;
 $tobool = ($9|0)==(0);
 if ($tobool) {
  HEAP32[99639] = 0;
  $11 = HEAP32[99631]|0;
  $inc8 = (($11) + 1)|0;
  HEAP32[99631] = $inc8;
  $12 = HEAP32[32309]|0;
  $inc9 = (($12) + 1)|0;
  HEAP32[32309] = $inc9;
  return;
 } else {
  $10 = HEAP32[99584]|0;
  $mul = $9 << 8;
  $add$ptr = (($10) + ($mul)|0);
  HEAP32[99639] = $add$ptr;
  HEAP32[99648] = 241632;
  $$cast = $add$ptr;
  HEAP32[60408] = $$cast;
  HEAP32[(241636)>>2] = $$cast;
  HEAP32[(241640)>>2] = $$cast;
  HEAP32[(241644)>>2] = $$cast;
  HEAP32[(241648)>>2] = $$cast;
  HEAP32[(241652)>>2] = $$cast;
  HEAP32[(241656)>>2] = $$cast;
  HEAP32[(241660)>>2] = $$cast;
  HEAP32[(241664)>>2] = $$cast;
  HEAP32[(241668)>>2] = $$cast;
  HEAP32[(241672)>>2] = $$cast;
  HEAP32[(241676)>>2] = $$cast;
  HEAP32[(241680)>>2] = $$cast;
  HEAP32[(241684)>>2] = $$cast;
  HEAP32[(241688)>>2] = $$cast;
  HEAP32[(241692)>>2] = $$cast;
  HEAP32[(241696)>>2] = $$cast;
  HEAP32[(241700)>>2] = $$cast;
  HEAP32[(241704)>>2] = $$cast;
  HEAP32[(241708)>>2] = $$cast;
  HEAP32[(241712)>>2] = $$cast;
  HEAP32[(241716)>>2] = $$cast;
  HEAP32[(241720)>>2] = $$cast;
  HEAP32[(241724)>>2] = $$cast;
  HEAP32[(241728)>>2] = $$cast;
  HEAP32[(241732)>>2] = $$cast;
  HEAP32[(241736)>>2] = $$cast;
  HEAP32[(241740)>>2] = $$cast;
  HEAP32[(241744)>>2] = $$cast;
  HEAP32[(241748)>>2] = $$cast;
  HEAP32[(241752)>>2] = $$cast;
  HEAP32[(241756)>>2] = $$cast;
  HEAP32[(241760)>>2] = $$cast;
  HEAP32[(241764)>>2] = $$cast;
  HEAP32[(241768)>>2] = $$cast;
  HEAP32[(241772)>>2] = $$cast;
  HEAP32[(241776)>>2] = $$cast;
  HEAP32[(241780)>>2] = $$cast;
  HEAP32[(241784)>>2] = $$cast;
  HEAP32[(241788)>>2] = $$cast;
  HEAP32[(241792)>>2] = $$cast;
  HEAP32[(241796)>>2] = $$cast;
  HEAP32[(241800)>>2] = $$cast;
  HEAP32[(241804)>>2] = $$cast;
  HEAP32[(241808)>>2] = $$cast;
  HEAP32[(241812)>>2] = $$cast;
  HEAP32[(241816)>>2] = $$cast;
  HEAP32[(241820)>>2] = $$cast;
  $11 = HEAP32[99631]|0;
  $inc8 = (($11) + 1)|0;
  HEAP32[99631] = $inc8;
  $12 = HEAP32[32309]|0;
  $inc9 = (($12) + 1)|0;
  HEAP32[32309] = $inc9;
  return;
 }
}
function _R_RenderPlayerView($player) {
 $player = $player|0;
 var $0 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _R_SetupFrame($player);
 _R_ClearClipSegs();
 _R_ClearDrawSegs();
 _R_ClearPlanes();
 _R_ClearSprites();
 _NetUpdate();
 $0 = HEAP32[99507]|0;
 $sub = (($0) + -1)|0;
 _R_RenderBSPNode($sub);
 _NetUpdate();
 _R_DrawPlanes();
 _NetUpdate();
 _R_DrawMasked();
 _NetUpdate();
 return;
}
function _R_InitPlanes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _R_MapPlane($y,$x1,$x2) {
 $y = $y|0;
 $x1 = $x1|0;
 $x2 = $x2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $add24 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx12 = 0, $arrayidx14 = 0, $arrayidx15 = 0, $arrayidx16 = 0, $arrayidx17 = 0, $arrayidx19 = 0, $arrayidx21 = 0, $arrayidx22 = 0, $arrayidx25 = 0, $arrayidx34 = 0, $arrayidx9 = 0, $call = 0, $call11 = 0;
 var $call13 = 0, $call20 = 0, $call23 = 0, $call26 = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $cmp5 = 0, $cmp6 = 0, $distance$0 = 0, $or$cond$not = 0, $or$cond30 = 0, $or$cond30$not = 0, $or$cond31 = 0, $shr = 0, $shr30 = 0, $spec$store$select = 0, $storemerge = 0, $sub27 = 0, $tobool = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $cmp = ($x2|0)>=($x1|0);
 $cmp1 = ($x1|0)>(-1);
 $or$cond$not = $cmp1 & $cmp;
 $0 = HEAP32[99612]|0;
 $cmp3 = ($0|0)>($x2|0);
 $or$cond30 = $or$cond$not & $cmp3;
 $or$cond30$not = $or$cond30 ^ 1;
 $1 = HEAP32[99597]|0;
 $cmp5 = ($1|0)<($y|0);
 $or$cond31 = $cmp5 | $or$cond30$not;
 if ($or$cond31) {
  HEAP32[$vararg_buffer>>2] = $x1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $x2;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $y;
  _I_Error(154442,$vararg_buffer);
  // unreachable;
 }
 $2 = HEAP32[99640]|0;
 $arrayidx = (241824 + ($y<<2)|0);
 $3 = HEAP32[$arrayidx>>2]|0;
 $cmp6 = ($2|0)==($3|0);
 if ($cmp6) {
  $arrayidx15 = (243424 + ($y<<2)|0);
  $7 = HEAP32[$arrayidx15>>2]|0;
  $arrayidx16 = (244224 + ($y<<2)|0);
  $8 = HEAP32[$arrayidx16>>2]|0;
  HEAP32[99605] = $8;
  $arrayidx17 = (245024 + ($y<<2)|0);
  $9 = HEAP32[$arrayidx17>>2]|0;
  $distance$0 = $7;$storemerge = $9;
 } else {
  HEAP32[$arrayidx>>2] = $2;
  $arrayidx9 = (242624 + ($y<<2)|0);
  $4 = HEAP32[$arrayidx9>>2]|0;
  $call = (_FixedMul($2,$4)|0);
  $arrayidx10 = (243424 + ($y<<2)|0);
  HEAP32[$arrayidx10>>2] = $call;
  $5 = HEAP32[99641]|0;
  $call11 = (_FixedMul($call,$5)|0);
  $arrayidx12 = (244224 + ($y<<2)|0);
  HEAP32[$arrayidx12>>2] = $call11;
  HEAP32[99605] = $call11;
  $6 = HEAP32[99642]|0;
  $call13 = (_FixedMul($call,$6)|0);
  $arrayidx14 = (245024 + ($y<<2)|0);
  HEAP32[$arrayidx14>>2] = $call13;
  $distance$0 = $call;$storemerge = $call13;
 }
 HEAP32[99606] = $storemerge;
 $arrayidx19 = (245824 + ($x1<<2)|0);
 $10 = HEAP32[$arrayidx19>>2]|0;
 $call20 = (_FixedMul($distance$0,$10)|0);
 $11 = HEAP32[99616]|0;
 $arrayidx21 = (229072 + ($x1<<2)|0);
 $12 = HEAP32[$arrayidx21>>2]|0;
 $add = (($12) + ($11))|0;
 $shr = $add >>> 19;
 $13 = HEAP32[99614]|0;
 $arrayidx22 = ((82912) + ($shr<<2)|0);
 $14 = HEAP32[$arrayidx22>>2]|0;
 $call23 = (_FixedMul($14,$call20)|0);
 $add24 = (($call23) + ($13))|0;
 HEAP32[99603] = $add24;
 $15 = HEAP32[99615]|0;
 $arrayidx25 = (74720 + ($shr<<2)|0);
 $16 = HEAP32[$arrayidx25>>2]|0;
 $call26 = (_FixedMul($16,$call20)|0);
 $17 = (($call26) + ($15))|0;
 $sub27 = (0 - ($17))|0;
 HEAP32[99604] = $sub27;
 $18 = HEAP32[99639]|0;
 $tobool = ($18|0)==(0|0);
 if ($tobool) {
  $shr30 = $distance$0 >> 20;
  $19 = ($shr30>>>0)<(127);
  $spec$store$select = $19 ? $shr30 : 127;
  $20 = HEAP32[99643]|0;
  $arrayidx34 = (($20) + ($spec$store$select<<2)|0);
  $21 = HEAP32[$arrayidx34>>2]|0;
  HEAP32[99607] = $21;
  HEAP32[99602] = $y;
  HEAP32[99601] = $x1;
  HEAP32[99600] = $x2;
  $22 = HEAP32[99630]|0;
  FUNCTION_TABLE_v[$22 & 255]();
  STACKTOP = sp;return;
 } else {
  HEAP32[99607] = $18;
  HEAP32[99602] = $y;
  HEAP32[99601] = $x1;
  HEAP32[99600] = $x2;
  $22 = HEAP32[99630]|0;
  FUNCTION_TABLE_v[$22 & 255]();
  STACKTOP = sp;return;
 }
}
function _R_ClearPlanes() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx3 = 0, $call = 0, $call4 = 0, $cmp = 0, $cmp7 = 0, $conv = 0, $i$08 = 0, $inc = 0, $shr = 0, $sub = 0;
 var $sub5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99612]|0;
 $cmp7 = ($0|0)>(0);
 if ($cmp7) {
  $1 = HEAP32[99597]|0;
  $conv = $1&65535;
  $2 = $0 << 1;
  _memset((247744|0),-1,($2|0))|0;
  $i$08 = 0;
  while(1) {
   $arrayidx = (247104 + ($i$08<<1)|0);
   HEAP16[$arrayidx>>1] = $conv;
   $inc = (($i$08) + 1)|0;
   $cmp = ($inc|0)<($0|0);
   if ($cmp) {
    $i$08 = $inc;
   } else {
    break;
   }
  }
 }
 HEAP32[99644] = 248384;
 HEAP32[99645] = 333376;
 _memset((241824|0),0,800)|0;
 $3 = HEAP32[99616]|0;
 $sub = (($3) + -1073741824)|0;
 $shr = $sub >>> 19;
 $arrayidx2 = ((82912) + ($shr<<2)|0);
 $4 = HEAP32[$arrayidx2>>2]|0;
 $5 = HEAP32[99619]|0;
 $call = (_FixedDiv($4,$5)|0);
 HEAP32[99641] = $call;
 $arrayidx3 = (74720 + ($shr<<2)|0);
 $6 = HEAP32[$arrayidx3>>2]|0;
 $7 = HEAP32[99619]|0;
 $call4 = (_FixedDiv($6,$7)|0);
 $sub5 = (0 - ($call4))|0;
 HEAP32[99642] = $sub5;
 return;
}
function _R_FindPlane($height,$picnum,$lightlevel) {
 $height = $height|0;
 $picnum = $picnum|0;
 $lightlevel = $lightlevel|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arraydecay = 0, $check$0$lcssa = 0, $check$022 = 0, $check$024 = 0, $cmp = 0, $cmp1 = 0, $cmp123 = 0, $cmp3 = 0, $cmp5 = 0, $cmp8 = 0, $incdec$ptr = 0, $incdec$ptr17 = 0, $lightlevel20 = 0, $lightlevel7 = 0;
 var $maxx = 0, $minx = 0, $picnum19 = 0, $picnum4 = 0, $spec$select = 0, $spec$select19 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99682]|0;
 $cmp = ($0|0)==($picnum|0);
 $spec$select = $cmp ? 0 : $height;
 $spec$select19 = $cmp ? 0 : $lightlevel;
 $1 = HEAP32[99644]|0;
 $cmp123 = ($1>>>0)>(248384>>>0);
 L1: do {
  if ($cmp123) {
   $check$024 = 248384;
   while(1) {
    $2 = HEAP32[$check$024>>2]|0;
    $cmp3 = ($spec$select|0)==($2|0);
    if ($cmp3) {
     $picnum4 = ((($check$024)) + 4|0);
     $3 = HEAP32[$picnum4>>2]|0;
     $cmp5 = ($3|0)==($picnum|0);
     if ($cmp5) {
      $lightlevel7 = ((($check$024)) + 8|0);
      $4 = HEAP32[$lightlevel7>>2]|0;
      $cmp8 = ($spec$select19|0)==($4|0);
      if ($cmp8) {
       $check$022 = $check$024;
       break;
      }
     }
    }
    $incdec$ptr = ((($check$024)) + 664|0);
    $cmp1 = ($incdec$ptr>>>0)<($1>>>0);
    if ($cmp1) {
     $check$024 = $incdec$ptr;
    } else {
     $check$0$lcssa = $incdec$ptr;
     break L1;
    }
   }
   STACKTOP = sp;return ($check$022|0);
  } else {
   $check$0$lcssa = 248384;
  }
 } while(0);
 $sub$ptr$lhs$cast = $1;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - (248384))|0;
 $5 = ($sub$ptr$sub|0)==(84992);
 if ($5) {
  _I_Error(154467,$vararg_buffer);
  // unreachable;
 }
 $incdec$ptr17 = ((($1)) + 664|0);
 HEAP32[99644] = $incdec$ptr17;
 HEAP32[$check$0$lcssa>>2] = $spec$select;
 $picnum19 = ((($check$0$lcssa)) + 4|0);
 HEAP32[$picnum19>>2] = $picnum;
 $lightlevel20 = ((($check$0$lcssa)) + 8|0);
 HEAP32[$lightlevel20>>2] = $spec$select19;
 $minx = ((($check$0$lcssa)) + 12|0);
 HEAP32[$minx>>2] = 320;
 $maxx = ((($check$0$lcssa)) + 16|0);
 HEAP32[$maxx>>2] = -1;
 $arraydecay = ((($check$0$lcssa)) + 21|0);
 _memset(($arraydecay|0),-1,320)|0;
 $check$022 = $check$0$lcssa;
 STACKTOP = sp;return ($check$022|0);
}
function _R_CheckPlane($pl,$start,$stop) {
 $pl = $pl|0;
 $start = $start|0;
 $stop = $stop|0;
 var $$start = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arraydecay = 0, $arrayidx = 0, $cmp = 0, $cmp10 = 0, $cmp3 = 0, $cmp9 = 0, $cmp930 = 0, $inc = 0, $incdec$ptr = 0, $intrh$0 = 0, $lightlevel = 0, $lightlevel22 = 0;
 var $maxx = 0, $maxx24 = 0, $minx = 0, $minx23 = 0, $picnum = 0, $picnum21 = 0, $retval$0 = 0, $start$ = 0, $unionh$0 = 0, $x$031 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $minx = ((($pl)) + 12|0);
 $0 = HEAP32[$minx>>2]|0;
 $cmp = ($0|0)>($start|0);
 $$start = $cmp ? $0 : $start;
 $start$ = $cmp ? $start : $0;
 $maxx = ((($pl)) + 16|0);
 $1 = HEAP32[$maxx>>2]|0;
 $cmp3 = ($1|0)<($stop|0);
 $intrh$0 = $cmp3 ? $1 : $stop;
 $unionh$0 = $cmp3 ? $stop : $1;
 $cmp930 = ($$start|0)>($intrh$0|0);
 L1: do {
  if (!($cmp930)) {
   $x$031 = $$start;
   while(1) {
    $arrayidx = (((($pl)) + 21|0) + ($x$031)|0);
    $2 = HEAP8[$arrayidx>>0]|0;
    $cmp10 = ($2<<24>>24)==(-1);
    if (!($cmp10)) {
     break;
    }
    $inc = (($x$031) + 1)|0;
    $cmp9 = ($x$031|0)<($intrh$0|0);
    if ($cmp9) {
     $x$031 = $inc;
    } else {
     break L1;
    }
   }
   $3 = HEAP32[$pl>>2]|0;
   $4 = HEAP32[99644]|0;
   HEAP32[$4>>2] = $3;
   $picnum = ((($pl)) + 4|0);
   $5 = HEAP32[$picnum>>2]|0;
   $picnum21 = ((($4)) + 4|0);
   HEAP32[$picnum21>>2] = $5;
   $lightlevel = ((($pl)) + 8|0);
   $6 = HEAP32[$lightlevel>>2]|0;
   $lightlevel22 = ((($4)) + 8|0);
   HEAP32[$lightlevel22>>2] = $6;
   $incdec$ptr = ((($4)) + 664|0);
   HEAP32[99644] = $incdec$ptr;
   $minx23 = ((($4)) + 12|0);
   HEAP32[$minx23>>2] = $start;
   $maxx24 = ((($4)) + 16|0);
   HEAP32[$maxx24>>2] = $stop;
   $arraydecay = ((($4)) + 21|0);
   _memset(($arraydecay|0),-1,320)|0;
   $retval$0 = $4;
   return ($retval$0|0);
  }
 } while(0);
 HEAP32[$minx>>2] = $start$;
 HEAP32[$maxx>>2] = $unionh$0;
 $retval$0 = $pl;
 return ($retval$0|0);
}
function _R_MakeSpans($x,$t1,$b1,$t2,$b2) {
 $x = $x|0;
 $t1 = $t1|0;
 $b1 = $b1|0;
 $t2 = $t2|0;
 $b2 = $b2|0;
 var $0 = 0, $1 = 0, $arrayidx = 0, $arrayidx17 = 0, $arrayidx26 = 0, $arrayidx8 = 0, $b1$addr$0$lcssa = 0, $b1$addr$040 = 0, $b2$addr$032 = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp1233 = 0, $cmp14 = 0, $cmp143 = 0, $cmp1434 = 0, $cmp21 = 0, $cmp2129 = 0, $cmp23 = 0, $cmp2330 = 0;
 var $cmp3 = 0, $cmp337 = 0, $cmp42 = 0, $cmp5 = 0, $cmp538 = 0, $dec = 0, $dec27 = 0, $inc = 0, $inc18 = 0, $or$cond = 0, $or$cond26 = 0, $or$cond2639 = 0, $or$cond27 = 0, $or$cond2735 = 0, $or$cond28 = 0, $or$cond2831 = 0, $or$cond44 = 0, $sub = 0, $sub9 = 0, $t1$addr$0$lcssa = 0;
 var $t1$addr$045 = 0, $t2$addr$0$lcssa = 0, $t2$addr$036 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp42 = ($t1|0)>=($t2|0);
 $cmp143 = ($t1|0)>($b1|0);
 $or$cond44 = $cmp42 | $cmp143;
 if ($or$cond44) {
  $t1$addr$0$lcssa = $t1;
 } else {
  $sub = (($x) + -1)|0;
  $t1$addr$045 = $t1;
  while(1) {
   $arrayidx = (374336 + ($t1$addr$045<<2)|0);
   $0 = HEAP32[$arrayidx>>2]|0;
   _R_MapPlane($t1$addr$045,$0,$sub);
   $inc = (($t1$addr$045) + 1)|0;
   $cmp = ($inc|0)>=($t2|0);
   $cmp1 = ($t1$addr$045|0)>=($b1|0);
   $or$cond = $cmp | $cmp1;
   if ($or$cond) {
    $t1$addr$0$lcssa = $inc;
    break;
   } else {
    $t1$addr$045 = $inc;
   }
  }
 }
 $cmp337 = ($b1|0)<=($b2|0);
 $cmp538 = ($t1$addr$0$lcssa|0)>($b1|0);
 $or$cond2639 = $cmp337 | $cmp538;
 if ($or$cond2639) {
  $b1$addr$0$lcssa = $b1;
 } else {
  $sub9 = (($x) + -1)|0;
  $b1$addr$040 = $b1;
  while(1) {
   $arrayidx8 = (374336 + ($b1$addr$040<<2)|0);
   $1 = HEAP32[$arrayidx8>>2]|0;
   _R_MapPlane($b1$addr$040,$1,$sub9);
   $dec = (($b1$addr$040) + -1)|0;
   $cmp3 = ($dec|0)<=($b2|0);
   $cmp5 = ($b1$addr$040|0)<=($t1$addr$0$lcssa|0);
   $or$cond26 = $cmp3 | $cmp5;
   if ($or$cond26) {
    $b1$addr$0$lcssa = $dec;
    break;
   } else {
    $b1$addr$040 = $dec;
   }
  }
 }
 $cmp1233 = ($t1$addr$0$lcssa|0)<=($t2|0);
 $cmp1434 = ($t2|0)>($b2|0);
 $or$cond2735 = $cmp1233 | $cmp1434;
 if ($or$cond2735) {
  $t2$addr$0$lcssa = $t2;
 } else {
  $t2$addr$036 = $t2;
  while(1) {
   $arrayidx17 = (374336 + ($t2$addr$036<<2)|0);
   HEAP32[$arrayidx17>>2] = $x;
   $inc18 = (($t2$addr$036) + 1)|0;
   $cmp12 = ($inc18|0)>=($t1$addr$0$lcssa|0);
   $cmp14 = ($t2$addr$036|0)>=($b2|0);
   $or$cond27 = $cmp12 | $cmp14;
   if ($or$cond27) {
    $t2$addr$0$lcssa = $inc18;
    break;
   } else {
    $t2$addr$036 = $inc18;
   }
  }
 }
 $cmp2129 = ($b1$addr$0$lcssa|0)>=($b2|0);
 $cmp2330 = ($t2$addr$0$lcssa|0)>($b2|0);
 $or$cond2831 = $cmp2129 | $cmp2330;
 if ($or$cond2831) {
  return;
 }
 $b2$addr$032 = $b2;
 while(1) {
  $arrayidx26 = (374336 + ($b2$addr$032<<2)|0);
  HEAP32[$arrayidx26>>2] = $x;
  $dec27 = (($b2$addr$032) + -1)|0;
  $cmp21 = ($dec27|0)<=($b1$addr$0$lcssa|0);
  $cmp23 = ($b2$addr$032|0)<=($t2$addr$0$lcssa|0);
  $or$cond28 = $cmp21 | $cmp23;
  if ($or$cond28) {
   break;
  } else {
   $b2$addr$032 = $dec27;
  }
 }
 return;
}
function _R_DrawPlanes() {
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add44 = 0, $add48 = 0, $add60 = 0, $add67 = 0, $arraydecay = 0, $arrayidx = 0, $arrayidx33 = 0, $arrayidx38 = 0, $arrayidx43 = 0, $arrayidx61 = 0, $arrayidx65 = 0, $arrayidx75 = 0, $arrayidx79 = 0, $arrayidx82 = 0, $arrayidx85 = 0, $call = 0, $call45 = 0, $cmp = 0, $cmp16 = 0;
 var $cmp22 = 0, $cmp2250 = 0, $cmp23 = 0, $cmp26 = 0, $cmp31 = 0, $cmp35 = 0, $cmp7 = 0, $cmp70 = 0, $cmp7046 = 0, $conv = 0, $conv34 = 0, $conv76 = 0, $conv80 = 0, $conv83 = 0, $conv86 = 0, $inc = 0, $inc88 = 0, $incdec$ptr = 0, $ispos = 0, $lightlevel = 0;
 var $maxx = 0, $minx = 0, $neg = 0, $picnum = 0, $pl$051 = 0, $shr = 0, $shr39 = 0, $shr47 = 0, $spec$store$select = 0, $spec$store$select1 = 0, $sub = 0, $sub$ptr$div1555 = 0, $sub$ptr$div44 = 0, $sub$ptr$div645 = 0, $sub$ptr$sub = 0, $sub$ptr$sub14 = 0, $sub$ptr$sub5 = 0, $sub64 = 0, $sub74 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer4 = 0, $x$049 = 0, $x$147 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[99559]|0;
 $sub$ptr$sub = (($0) - (192336))|0;
 $cmp = ($sub$ptr$sub|0)>(12288);
 if ($cmp) {
  $sub$ptr$div44 = (($sub$ptr$sub>>>0) / 48)&-1;
  HEAP32[$vararg_buffer>>2] = $sub$ptr$div44;
  _I_Error(154498,$vararg_buffer);
  // unreachable;
 }
 $1 = HEAP32[99644]|0;
 $sub$ptr$sub5 = (($1) - (248384))|0;
 $cmp7 = ($sub$ptr$sub5|0)>(84992);
 if ($cmp7) {
  $sub$ptr$div645 = (($sub$ptr$sub5>>>0) / 664)&-1;
  HEAP32[$vararg_buffer1>>2] = $sub$ptr$div645;
  _I_Error(154535,$vararg_buffer1);
  // unreachable;
 }
 $2 = HEAP32[99645]|0;
 $sub$ptr$sub14 = (($2) - (333376))|0;
 $cmp16 = ($sub$ptr$sub14|0)>(40960);
 if ($cmp16) {
  $sub$ptr$div1555 = $sub$ptr$sub14 >>> 1;
  HEAP32[$vararg_buffer4>>2] = $sub$ptr$div1555;
  _I_Error(154572,$vararg_buffer4);
  // unreachable;
 }
 $3 = HEAP32[99644]|0;
 $cmp2250 = ($3>>>0)>(248384>>>0);
 if (!($cmp2250)) {
  STACKTOP = sp;return;
 }
 $pl$051 = 248384;
 while(1) {
  $minx = ((($pl$051)) + 12|0);
  $4 = HEAP32[$minx>>2]|0;
  $maxx = ((($pl$051)) + 16|0);
  $5 = HEAP32[$maxx>>2]|0;
  $cmp23 = ($4|0)>($5|0);
  do {
   if (!($cmp23)) {
    $picnum = ((($pl$051)) + 4|0);
    $6 = HEAP32[$picnum>>2]|0;
    $7 = HEAP32[99682]|0;
    $cmp26 = ($6|0)==($7|0);
    if ($cmp26) {
     $8 = HEAP32[99710]|0;
     $9 = HEAP32[99618]|0;
     $shr = $8 >> $9;
     HEAP32[99592] = $shr;
     $10 = HEAP32[99584]|0;
     HEAP32[99594] = $10;
     $11 = HEAP32[99681]|0;
     HEAP32[99593] = $11;
     $38 = $5;$x$049 = $4;
     while(1) {
      $arrayidx = (((($pl$051)) + 21|0) + ($x$049)|0);
      $12 = HEAP8[$arrayidx>>0]|0;
      $conv = $12&255;
      HEAP32[99590] = $conv;
      $arrayidx33 = (((($pl$051)) + 343|0) + ($x$049)|0);
      $13 = HEAP8[$arrayidx33>>0]|0;
      $conv34 = $13&255;
      HEAP32[99589] = $conv34;
      $cmp35 = ($12&255)>($13&255);
      if ($cmp35) {
       $18 = $38;
      } else {
       $14 = HEAP32[99616]|0;
       $arrayidx38 = (229072 + ($x$049<<2)|0);
       $15 = HEAP32[$arrayidx38>>2]|0;
       $add = (($15) + ($14))|0;
       $shr39 = $add >>> 22;
       HEAP32[99591] = $x$049;
       $16 = HEAP32[99683]|0;
       $call = (_R_GetColumn($16,$shr39)|0);
       HEAP32[99595] = $call;
       $17 = HEAP32[99627]|0;
       FUNCTION_TABLE_v[$17 & 255]();
       $$pre = HEAP32[$maxx>>2]|0;
       $18 = $$pre;
      }
      $inc = (($x$049) + 1)|0;
      $cmp31 = ($x$049|0)<($18|0);
      if ($cmp31) {
       $38 = $18;$x$049 = $inc;
      } else {
       break;
      }
     }
    } else {
     $19 = HEAP32[99575]|0;
     $20 = HEAP32[99577]|0;
     $arrayidx43 = (($20) + ($6<<2)|0);
     $21 = HEAP32[$arrayidx43>>2]|0;
     $add44 = (($21) + ($19))|0;
     $call45 = (_W_CacheLumpNum($add44,1)|0);
     HEAP32[99608] = $call45;
     $22 = HEAP32[$pl$051>>2]|0;
     $23 = HEAP32[99635]|0;
     $sub = (($22) - ($23))|0;
     $ispos = ($sub|0)>(-1);
     $neg = (0 - ($sub))|0;
     $24 = $ispos ? $sub : $neg;
     HEAP32[99640] = $24;
     $lightlevel = ((($pl$051)) + 8|0);
     $25 = HEAP32[$lightlevel>>2]|0;
     $shr47 = $25 >> 4;
     $26 = HEAP32[99634]|0;
     $add48 = (($shr47) + ($26))|0;
     $27 = ($add48|0)<(15);
     $spec$store$select = $27 ? $add48 : 15;
     $28 = ($spec$store$select|0)>(0);
     $spec$store$select1 = $28 ? $spec$store$select : 0;
     $arraydecay = (230368 + ($spec$store$select1<<9)|0);
     HEAP32[99643] = $arraydecay;
     $29 = HEAP32[$maxx>>2]|0;
     $add60 = (($29) + 1)|0;
     $arrayidx61 = (((($pl$051)) + 21|0) + ($add60)|0);
     HEAP8[$arrayidx61>>0] = -1;
     $30 = HEAP32[$minx>>2]|0;
     $sub64 = (($30) + -1)|0;
     $arrayidx65 = (((($pl$051)) + 21|0) + ($sub64)|0);
     HEAP8[$arrayidx65>>0] = -1;
     $31 = HEAP32[$maxx>>2]|0;
     $add67 = (($31) + 1)|0;
     $32 = HEAP32[$minx>>2]|0;
     $cmp7046 = ($32|0)>($add67|0);
     if (!($cmp7046)) {
      $x$147 = $32;
      while(1) {
       $sub74 = (($x$147) + -1)|0;
       $arrayidx75 = (((($pl$051)) + 21|0) + ($sub74)|0);
       $33 = HEAP8[$arrayidx75>>0]|0;
       $conv76 = $33&255;
       $arrayidx79 = (((($pl$051)) + 343|0) + ($sub74)|0);
       $34 = HEAP8[$arrayidx79>>0]|0;
       $conv80 = $34&255;
       $arrayidx82 = (((($pl$051)) + 21|0) + ($x$147)|0);
       $35 = HEAP8[$arrayidx82>>0]|0;
       $conv83 = $35&255;
       $arrayidx85 = (((($pl$051)) + 343|0) + ($x$147)|0);
       $36 = HEAP8[$arrayidx85>>0]|0;
       $conv86 = $36&255;
       _R_MakeSpans($x$147,$conv76,$conv80,$conv83,$conv86);
       $inc88 = (($x$147) + 1)|0;
       $cmp70 = ($x$147|0)>($31|0);
       if ($cmp70) {
        break;
       } else {
        $x$147 = $inc88;
       }
      }
     }
     _W_ReleaseLumpNum($add44);
     break;
    }
   }
  } while(0);
  $incdec$ptr = ((($pl$051)) + 664|0);
  $37 = HEAP32[99644]|0;
  $cmp22 = ($incdec$ptr>>>0)<($37>>>0);
  if ($cmp22) {
   $pl$051 = $incdec$ptr;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _R_RenderMaskedSegRange($ds,$x1,$x2) {
 $ds = $ds|0;
 $x1 = $x1|0;
 $x2 = $x2|0;
 var $$ = 0, $$20 = 0, $$20$sink = 0, $$pre = 0, $$pre23 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add22 = 0, $add31 = 0, $add46 = 0, $add72 = 0, $arraydecay = 0, $arrayidx = 0, $arrayidx30 = 0, $arrayidx52 = 0, $arrayidx64 = 0, $arrayidx67 = 0, $arrayidx70 = 0, $backsector = 0, $call = 0, $call69 = 0, $ceilingheight = 0, $ceilingheight34 = 0;
 var $cmp = 0, $cmp10 = 0, $cmp14 = 0, $cmp26 = 0, $cmp35 = 0, $cmp50 = 0, $cmp5021 = 0, $cmp54 = 0, $cmp6 = 0, $conv = 0, $conv68 = 0, $div = 0, $flags = 0, $frontsector = 0, $idxprom = 0, $inc = 0, $inc$sink = 0, $inc73 = 0, $lightlevel = 0, $linedef = 0;
 var $maskedtexturecol = 0, $midtexture = 0, $mul = 0, $rowoffset = 0, $scale1 = 0, $scalestep = 0, $shr = 0, $shr59 = 0, $sidedef = 0, $spec$select = 0, $spec$store$select = 0, $sprbottomclip = 0, $sprtopclip = 0, $storemerge1922 = 0, $sub = 0, $sub43 = 0, $sub66 = 0, $tobool = 0, $tobool47 = 0, $tobool57 = 0;
 var $v2 = 0, $x121 = 0, $y = 0, $y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ds>>2]|0;
 HEAP32[99561] = $0;
 $frontsector = ((($0)) + 24|0);
 $1 = HEAP32[$frontsector>>2]|0;
 HEAP32[99563] = $1;
 $backsector = ((($0)) + 28|0);
 $2 = HEAP32[$backsector>>2]|0;
 HEAP32[99562] = $2;
 $3 = HEAP32[99574]|0;
 $sidedef = ((($0)) + 16|0);
 $4 = HEAP32[$sidedef>>2]|0;
 $midtexture = ((($4)) + 12|0);
 $5 = HEAP16[$midtexture>>1]|0;
 $idxprom = $5 << 16 >> 16;
 $arrayidx = (($3) + ($idxprom<<2)|0);
 $6 = HEAP32[$arrayidx>>2]|0;
 $7 = $1;
 $lightlevel = ((($7)) + 12|0);
 $8 = HEAP16[$lightlevel>>1]|0;
 $conv = $8 << 16 >> 16;
 $shr = $conv >> 4;
 $9 = HEAP32[99634]|0;
 $add = (($shr) + ($9))|0;
 $10 = HEAP32[$0>>2]|0;
 $y = ((($10)) + 4|0);
 $11 = HEAP32[$y>>2]|0;
 $v2 = ((($0)) + 4|0);
 $12 = HEAP32[$v2>>2]|0;
 $y1 = ((($12)) + 4|0);
 $13 = HEAP32[$y1>>2]|0;
 $cmp = ($11|0)==($13|0);
 $14 = $2;
 if ($cmp) {
  $inc$sink = -1;
 } else {
  $15 = HEAP32[$10>>2]|0;
  $16 = HEAP32[$12>>2]|0;
  $cmp6 = ($15|0)==($16|0);
  $inc = $cmp6&1;
  $inc$sink = $inc;
 }
 $spec$select = (($add) + ($inc$sink))|0;
 $cmp10 = ($spec$select|0)<(0);
 if ($cmp10) {
  $$sink = 238560;
 } else {
  $cmp14 = ($spec$select|0)>(15);
  if ($cmp14) {
   $$sink = (241440);
  } else {
   $arraydecay = (238560 + (($spec$select*192)|0)|0);
   $$sink = $arraydecay;
  }
 }
 HEAP32[99648] = $$sink;
 $maskedtexturecol = ((($ds)) + 44|0);
 $17 = HEAP32[$maskedtexturecol>>2]|0;
 HEAP32[99649] = $17;
 $scalestep = ((($ds)) + 20|0);
 $18 = HEAP32[$scalestep>>2]|0;
 HEAP32[99650] = $18;
 $scale1 = ((($ds)) + 12|0);
 $19 = HEAP32[$scale1>>2]|0;
 $x121 = ((($ds)) + 4|0);
 $20 = HEAP32[$x121>>2]|0;
 $sub = (($x1) - ($20))|0;
 $mul = Math_imul($sub, $18)|0;
 $add22 = (($mul) + ($19))|0;
 HEAP32[99705] = $add22;
 $sprbottomclip = ((($ds)) + 40|0);
 $21 = HEAP32[$sprbottomclip>>2]|0;
 HEAP32[99706] = $21;
 $sprtopclip = ((($ds)) + 36|0);
 $22 = HEAP32[$sprtopclip>>2]|0;
 HEAP32[99707] = $22;
 $linedef = ((($0)) + 20|0);
 $23 = HEAP32[$linedef>>2]|0;
 $flags = ((($23)) + 16|0);
 $24 = HEAP16[$flags>>1]|0;
 $25 = $24 & 16;
 $tobool = ($25<<16>>16)==(0);
 $26 = $17;
 if ($tobool) {
  $ceilingheight = ((($7)) + 4|0);
  $31 = HEAP32[$ceilingheight>>2]|0;
  $ceilingheight34 = ((($14)) + 4|0);
  $32 = HEAP32[$ceilingheight34>>2]|0;
  $cmp35 = ($31|0)<($32|0);
  $$20 = $cmp35 ? $31 : $32;
  HEAP32[99593] = $$20;
  $$20$sink = $$20;
 } else {
  $27 = HEAP32[$7>>2]|0;
  $28 = HEAP32[$14>>2]|0;
  $cmp26 = ($27|0)>($28|0);
  $$ = $cmp26 ? $27 : $28;
  HEAP32[99593] = $$;
  $29 = HEAP32[99573]|0;
  $arrayidx30 = (($29) + ($6<<2)|0);
  $30 = HEAP32[$arrayidx30>>2]|0;
  $add31 = (($30) + ($$))|0;
  $$20$sink = $add31;
 }
 $33 = HEAP32[99635]|0;
 $sub43 = (($$20$sink) - ($33))|0;
 $rowoffset = ((($4)) + 4|0);
 $34 = HEAP32[$rowoffset>>2]|0;
 $add46 = (($34) + ($sub43))|0;
 HEAP32[99593] = $add46;
 $35 = HEAP32[99639]|0;
 $tobool47 = ($35|0)==(0|0);
 if (!($tobool47)) {
  HEAP32[99594] = $35;
 }
 HEAP32[99591] = $x1;
 $cmp5021 = ($x1|0)>($x2|0);
 if ($cmp5021) {
  return;
 }
 $36 = $26;$39 = $add22;$54 = $18;$storemerge1922 = $x1;
 while(1) {
  $arrayidx52 = (($36) + ($storemerge1922<<1)|0);
  $37 = HEAP16[$arrayidx52>>1]|0;
  $cmp54 = ($37<<16>>16)==(32767);
  if ($cmp54) {
   $51 = $39;$52 = $54;$53 = $storemerge1922;$55 = $36;
  } else {
   $38 = HEAP32[99639]|0;
   $tobool57 = ($38|0)==(0|0);
   if ($tobool57) {
    $shr59 = $39 >> 12;
    $40 = ($shr59>>>0)<(47);
    $spec$store$select = $40 ? $shr59 : 47;
    $41 = HEAP32[99648]|0;
    $arrayidx64 = (($41) + ($spec$store$select<<2)|0);
    $42 = HEAP32[$arrayidx64>>2]|0;
    HEAP32[99594] = $42;
   }
   $43 = HEAP32[99625]|0;
   $44 = HEAP32[99593]|0;
   $call = (_FixedMul($44,$39)|0);
   $sub66 = (($43) - ($call))|0;
   HEAP32[99704] = $sub66;
   $45 = HEAP32[99705]|0;
   $div = (4294967295 / ($45>>>0))&-1;
   HEAP32[99592] = $div;
   $46 = HEAP32[99649]|0;
   $47 = HEAP32[99591]|0;
   $arrayidx67 = (($46) + ($47<<1)|0);
   $48 = HEAP16[$arrayidx67>>1]|0;
   $conv68 = $48 << 16 >> 16;
   $call69 = (_R_GetColumn($6,$conv68)|0);
   $add$ptr = ((($call69)) + -3|0);
   _R_DrawMaskedColumn($add$ptr);
   $49 = HEAP32[99649]|0;
   $50 = HEAP32[99591]|0;
   $arrayidx70 = (($49) + ($50<<1)|0);
   HEAP16[$arrayidx70>>1] = 32767;
   $$pre = HEAP32[99650]|0;
   $$pre23 = HEAP32[99705]|0;
   $51 = $$pre23;$52 = $$pre;$53 = $50;$55 = $49;
  }
  $add72 = (($51) + ($52))|0;
  HEAP32[99705] = $add72;
  $inc73 = (($53) + 1)|0;
  HEAP32[99591] = $inc73;
  $cmp50 = ($53|0)<($x2|0);
  if ($cmp50) {
   $36 = $55;$39 = $add72;$54 = $52;$storemerge1922 = $inc73;
  } else {
   break;
  }
 }
 return;
}
function _R_RenderSegLoop() {
 var $$pre = 0, $$pre46 = 0, $$sink = 0, $$sink48 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add1 = 0, $add127 = 0, $add135 = 0, $add144 = 0, $add151 = 0, $add162 = 0, $add163 = 0, $add164 = 0, $add71 = 0, $add93 = 0, $arrayidx = 0, $arrayidx119 = 0, $arrayidx128 = 0, $arrayidx153 = 0, $arrayidx159 = 0, $arrayidx26 = 0, $arrayidx29 = 0, $arrayidx62 = 0;
 var $arrayidx65 = 0, $arrayidx70 = 0, $arrayidx73 = 0, $arrayidx81 = 0, $arrayidx87 = 0, $arrayidx88 = 0, $arrayidx94 = 0, $bottom$0 = 0, $call = 0, $call106 = 0, $call140 = 0, $call85 = 0, $cmp = 0, $cmp103 = 0, $cmp130 = 0, $cmp137 = 0, $cmp14 = 0, $cmp2 = 0, $cmp21 = 0, $cmp35 = 0;
 var $cmp45 = 0, $cmp50 = 0, $cmp57 = 0, $cmp96 = 0, $conv = 0, $conv118$sink = 0, $conv118$sink$in = 0, $conv129 = 0, $conv13 = 0, $conv152$sink = 0, $conv152$sink$in = 0, $conv158 = 0, $conv24 = 0, $conv27 = 0, $conv34 = 0, $conv49 = 0, $conv60 = 0, $conv63 = 0, $conv86 = 0, $conv95 = 0;
 var $div = 0, $inc = 0, $shr = 0, $shr126 = 0, $shr32 = 0, $shr72 = 0, $shr75 = 0, $shr76 = 0, $shr92 = 0, $spec$select = 0, $spec$select40 = 0, $spec$select41 = 0, $spec$select42 = 0, $spec$select43 = 0, $spec$select44 = 0, $spec$store$select = 0, $sub = 0, $sub101 = 0, $sub110 = 0, $sub117 = 0;
 var $sub125 = 0, $sub40 = 0, $sub74 = 0, $texturecolumn$0 = 0, $tobool = 0, $tobool115 = 0, $tobool122 = 0, $tobool149 = 0, $tobool156 = 0, $tobool42 = 0, $tobool68 = 0, $tobool83 = 0, $tobool90 = 0, $top$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99651]|0;
 $1 = HEAP32[99652]|0;
 $cmp45 = ($0|0)<($1|0);
 if (!($cmp45)) {
  return;
 }
 $$pre = HEAP32[99653]|0;
 $2 = $$pre;$3 = $0;
 while(1) {
  $sub = (($2) + 4095)|0;
  $shr = $sub >> 12;
  $arrayidx = (247744 + ($3<<1)|0);
  $4 = HEAP16[$arrayidx>>1]|0;
  $conv = $4 << 16 >> 16;
  $cmp2 = ($shr|0)>($conv|0);
  $add1 = (($conv) + 1)|0;
  $spec$select = $cmp2 ? $shr : $add1;
  $5 = HEAP32[99654]|0;
  $tobool = ($5|0)==(0);
  $$pre46 = (247104 + ($3<<1)|0);
  if (!($tobool)) {
   $6 = HEAP16[$$pre46>>1]|0;
   $conv13 = $6 << 16 >> 16;
   $cmp14 = ($spec$select|0)>($conv13|0);
   $spec$select40 = $cmp14 ? $conv13 : $spec$select;
   $bottom$0 = (($spec$select40) + -1)|0;
   $cmp21 = ($bottom$0|0)>($conv|0);
   if ($cmp21) {
    $conv24 = $add1&255;
    $7 = HEAP32[99647]|0;
    $arrayidx26 = (((($7)) + 21|0) + ($3)|0);
    HEAP8[$arrayidx26>>0] = $conv24;
    $conv27 = $bottom$0&255;
    $arrayidx29 = (((($7)) + 343|0) + ($3)|0);
    HEAP8[$arrayidx29>>0] = $conv27;
   }
  }
  $8 = HEAP32[99655]|0;
  $shr32 = $8 >> 12;
  $9 = HEAP16[$$pre46>>1]|0;
  $conv34 = $9 << 16 >> 16;
  $cmp35 = ($shr32|0)<($conv34|0);
  $sub40 = (($conv34) + -1)|0;
  $spec$select41 = $cmp35 ? $shr32 : $sub40;
  $10 = HEAP32[99656]|0;
  $tobool42 = ($10|0)==(0);
  if (!($tobool42)) {
   $11 = HEAP16[$arrayidx>>1]|0;
   $conv49 = $11 << 16 >> 16;
   $cmp50 = ($spec$select41|0)<($conv49|0);
   $spec$select42 = $cmp50 ? $conv49 : $spec$select41;
   $cmp57 = ($spec$select42|0)<($sub40|0);
   if ($cmp57) {
    $top$0 = (($spec$select42) + 1)|0;
    $conv60 = $top$0&255;
    $12 = HEAP32[99646]|0;
    $arrayidx62 = (((($12)) + 21|0) + ($3)|0);
    HEAP8[$arrayidx62>>0] = $conv60;
    $conv63 = $sub40&255;
    $arrayidx65 = (((($12)) + 343|0) + ($3)|0);
    HEAP8[$arrayidx65>>0] = $conv63;
   }
  }
  $13 = HEAP32[99657]|0;
  $tobool68 = ($13|0)==(0);
  if ($tobool68) {
   $32 = $3;$texturecolumn$0 = 0;
  } else {
   $14 = HEAP32[99658]|0;
   $arrayidx70 = (229072 + ($3<<2)|0);
   $15 = HEAP32[$arrayidx70>>2]|0;
   $add71 = (($15) + ($14))|0;
   $shr72 = $add71 >>> 19;
   $16 = HEAP32[99659]|0;
   $arrayidx73 = (58336 + ($shr72<<2)|0);
   $17 = HEAP32[$arrayidx73>>2]|0;
   $18 = HEAP32[99660]|0;
   $call = (_FixedMul($17,$18)|0);
   $sub74 = (($16) - ($call))|0;
   $shr75 = $sub74 >> 16;
   $19 = HEAP32[99661]|0;
   $shr76 = $19 >> 12;
   $20 = ($shr76>>>0)<(47);
   $spec$store$select = $20 ? $shr76 : 47;
   $21 = HEAP32[99648]|0;
   $arrayidx81 = (($21) + ($spec$store$select<<2)|0);
   $22 = HEAP32[$arrayidx81>>2]|0;
   HEAP32[99594] = $22;
   $23 = HEAP32[99651]|0;
   HEAP32[99591] = $23;
   $div = (4294967295 / ($19>>>0))&-1;
   HEAP32[99592] = $div;
   $32 = $23;$texturecolumn$0 = $shr75;
  }
  $24 = HEAP32[99662]|0;
  $tobool83 = ($24|0)==(0);
  if ($tobool83) {
   $29 = HEAP32[99664]|0;
   $tobool90 = ($29|0)==(0);
   do {
    if ($tobool90) {
     $37 = HEAP32[99654]|0;
     $tobool115 = ($37|0)==(0);
     if ($tobool115) {
      $41 = $32;
     } else {
      $sub117 = (($spec$select) + 65535)|0;
      $$sink = $32;$conv118$sink$in = $sub117;
      label = 19;
     }
    } else {
     $30 = HEAP32[99665]|0;
     $shr92 = $30 >> 12;
     $31 = HEAP32[99666]|0;
     $add93 = (($31) + ($30))|0;
     HEAP32[99665] = $add93;
     $arrayidx94 = (247104 + ($32<<1)|0);
     $33 = HEAP16[$arrayidx94>>1]|0;
     $conv95 = $33 << 16 >> 16;
     $cmp96 = ($shr92|0)<($conv95|0);
     $sub101 = (($conv95) + -1)|0;
     $spec$select43 = $cmp96 ? $shr92 : $sub101;
     $cmp103 = ($spec$select43|0)<($spec$select|0);
     if ($cmp103) {
      $sub110 = (($spec$select) + 65535)|0;
      $$sink = $32;$conv118$sink$in = $sub110;
      label = 19;
      break;
     } else {
      HEAP32[99590] = $spec$select;
      HEAP32[99589] = $spec$select43;
      $34 = HEAP32[99667]|0;
      HEAP32[99593] = $34;
      $call106 = (_R_GetColumn($29,$texturecolumn$0)|0);
      HEAP32[99595] = $call106;
      $35 = HEAP32[99627]|0;
      FUNCTION_TABLE_v[$35 & 255]();
      $36 = HEAP32[99651]|0;
      $$sink = $36;$conv118$sink$in = $spec$select43;
      label = 19;
      break;
     }
    }
   } while(0);
   if ((label|0) == 19) {
    label = 0;
    $conv118$sink = $conv118$sink$in&65535;
    $arrayidx119 = (247744 + ($$sink<<1)|0);
    HEAP16[$arrayidx119>>1] = $conv118$sink;
    $41 = $$sink;
   }
   $38 = HEAP32[99668]|0;
   $tobool122 = ($38|0)==(0);
   do {
    if ($tobool122) {
     $46 = HEAP32[99656]|0;
     $tobool149 = ($46|0)==(0);
     if ($tobool149) {
      $49 = $41;
     } else {
      $add151 = (($spec$select41) + 1)|0;
      $$sink48 = $41;$conv152$sink$in = $add151;
      label = 26;
     }
    } else {
     $39 = HEAP32[99669]|0;
     $sub125 = (($39) + 4095)|0;
     $shr126 = $sub125 >> 12;
     $40 = HEAP32[99670]|0;
     $add127 = (($40) + ($39))|0;
     HEAP32[99669] = $add127;
     $arrayidx128 = (247744 + ($41<<1)|0);
     $42 = HEAP16[$arrayidx128>>1]|0;
     $conv129 = $42 << 16 >> 16;
     $cmp130 = ($shr126|0)>($conv129|0);
     $add135 = (($conv129) + 1)|0;
     $spec$select44 = $cmp130 ? $shr126 : $add135;
     $cmp137 = ($spec$select44|0)>($spec$select41|0);
     if ($cmp137) {
      $add144 = (($spec$select41) + 1)|0;
      $$sink48 = $41;$conv152$sink$in = $add144;
      label = 26;
      break;
     } else {
      HEAP32[99590] = $spec$select44;
      HEAP32[99589] = $spec$select41;
      $43 = HEAP32[99671]|0;
      HEAP32[99593] = $43;
      $call140 = (_R_GetColumn($38,$texturecolumn$0)|0);
      HEAP32[99595] = $call140;
      $44 = HEAP32[99627]|0;
      FUNCTION_TABLE_v[$44 & 255]();
      $45 = HEAP32[99651]|0;
      $$sink48 = $45;$conv152$sink$in = $spec$select44;
      label = 26;
      break;
     }
    }
   } while(0);
   if ((label|0) == 26) {
    label = 0;
    $conv152$sink = $conv152$sink$in&65535;
    $arrayidx153 = (247104 + ($$sink48<<1)|0);
    HEAP16[$arrayidx153>>1] = $conv152$sink;
    $49 = $$sink48;
   }
   $47 = HEAP32[99672]|0;
   $tobool156 = ($47|0)==(0);
   if ($tobool156) {
    $56 = $49;
   } else {
    $conv158 = $texturecolumn$0&65535;
    $48 = HEAP32[99649]|0;
    $arrayidx159 = (($48) + ($49<<1)|0);
    HEAP16[$arrayidx159>>1] = $conv158;
    $56 = $49;
   }
  } else {
   HEAP32[99590] = $spec$select;
   HEAP32[99589] = $spec$select41;
   $25 = HEAP32[99663]|0;
   HEAP32[99593] = $25;
   $call85 = (_R_GetColumn($24,$texturecolumn$0)|0);
   HEAP32[99595] = $call85;
   $26 = HEAP32[99627]|0;
   FUNCTION_TABLE_v[$26 & 255]();
   $27 = HEAP32[99597]|0;
   $conv86 = $27&65535;
   $28 = HEAP32[99651]|0;
   $arrayidx87 = (247744 + ($28<<1)|0);
   HEAP16[$arrayidx87>>1] = $conv86;
   $arrayidx88 = (247104 + ($28<<1)|0);
   HEAP16[$arrayidx88>>1] = -1;
   $56 = $28;
  }
  $50 = HEAP32[99650]|0;
  $51 = HEAP32[99661]|0;
  $add162 = (($51) + ($50))|0;
  HEAP32[99661] = $add162;
  $52 = HEAP32[99673]|0;
  $53 = HEAP32[99653]|0;
  $add163 = (($53) + ($52))|0;
  HEAP32[99653] = $add163;
  $54 = HEAP32[99674]|0;
  $55 = HEAP32[99655]|0;
  $add164 = (($55) + ($54))|0;
  HEAP32[99655] = $add164;
  $inc = (($56) + 1)|0;
  HEAP32[99651] = $inc;
  $57 = HEAP32[99652]|0;
  $cmp = ($inc|0)<($57|0);
  if ($cmp) {
   $2 = $add163;$3 = $inc;
  } else {
   break;
  }
 }
 return;
}
function _R_StoreWallRange($start,$stop) {
 $start = $start|0;
 $stop = $stop|0;
 var $$pr$pre = 0, $$pre = 0, $$pre49 = 0, $$pre51 = 0, $$pre52 = 0, $$pre53 = 0, $$sink = 0, $$sink55 = 0, $$sink56 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add$ptr = 0, $add$ptr208 = 0, $add$ptr343 = 0, $add$ptr346 = 0, $add$ptr349 = 0, $add$ptr360 = 0, $add$ptr364 = 0, $add$ptr367 = 0, $add14 = 0, $add16 = 0, $add200 = 0, $add202 = 0;
 var $add22 = 0, $add235 = 0, $add236 = 0, $add237 = 0, $add244 = 0, $add42 = 0, $add46 = 0, $and335 = 0, $and352 = 0, $and372 = 0, $and382 = 0, $angle = 0, $arraydecay = 0, $arrayidx = 0, $arrayidx15 = 0, $arrayidx171 = 0, $arrayidx181 = 0, $arrayidx190 = 0, $arrayidx21 = 0, $arrayidx227 = 0;
 var $arrayidx33 = 0, $arrayidx41 = 0, $bottomtexture = 0, $bsilheight = 0, $bsilheight387 = 0, $bsilheight65 = 0, $bsilheight93 = 0, $call12 = 0, $call13 = 0, $call17 = 0, $call228 = 0, $call23 = 0, $call291 = 0, $call294 = 0, $call296 = 0, $call299 = 0, $call309 = 0, $call311 = 0, $call318 = 0, $call320 = 0;
 var $call327 = 0, $call332 = 0, $ceilingheight = 0, $ceilingheight279 = 0, $ceilingheight69 = 0, $ceilingpic = 0, $ceilingpic114 = 0, $ceilingpic140 = 0, $ceilingpic283 = 0, $cmp = 0, $cmp1 = 0, $cmp112 = 0, $cmp116 = 0, $cmp120 = 0, $cmp126 = 0, $cmp132 = 0, $cmp137 = 0, $cmp144 = 0, $cmp151 = 0, $cmp158 = 0;
 var $cmp163 = 0, $cmp167 = 0, $cmp18 = 0, $cmp186 = 0, $cmp2 = 0, $cmp217 = 0, $cmp230 = 0, $cmp248 = 0, $cmp256 = 0, $cmp261 = 0, $cmp265 = 0, $cmp275 = 0, $cmp280 = 0, $cmp285 = 0, $cmp305 = 0, $cmp314 = 0, $cmp53 = 0, $cmp61 = 0, $cmp70 = 0, $cmp79 = 0;
 var $cmp89 = 0, $cmp99 = 0, $conv111 = 0, $conv242 = 0, $conv284 = 0, $div = 0, $flags = 0, $flags172 = 0, $flags191 = 0, $flags34 = 0, $floorpic = 0, $floorpic124 = 0, $idx$neg = 0, $idx$neg345 = 0, $idx$neg363 = 0, $idxprom = 0, $idxprom170 = 0, $idxprom189 = 0, $inc = 0, $inc$sink = 0;
 var $incdec$ptr = 0, $ispos = 0, $lightlevel = 0, $lightlevel130 = 0, $lightlevel147 = 0, $lightlevel149 = 0, $lightlevel241 = 0, $linedef = 0, $maskedtexturecol = 0, $midtexture = 0, $midtexture203 = 0, $mul = 0, $mul362 = 0, $neg = 0, $offset = 0, $offsetangle$1 = 0, $or$cond = 0, $or105 = 0, $or211 = 0, $or212 = 0;
 var $or213 = 0, $or376 = 0, $or386 = 0, $or74 = 0, $or83 = 0, $or83$sink = 0, $or95 = 0, $rowoffset = 0, $rowoffset199 = 0, $scale1 = 0, $scale2 = 0, $scale228 = 0, $scalestep = 0, $shr = 0, $shr226 = 0, $shr243 = 0, $shr289 = 0, $shr290 = 0, $shr293 = 0, $shr298 = 0;
 var $shr303 = 0, $shr304 = 0, $shr308 = 0, $shr317 = 0, $sidedef = 0, $silhouette = 0, $silhouette334 = 0, $silhouette351$phi$trans$insert = 0, $silhouette371 = 0, $silhouette50 = 0, $spec$select = 0, $spec$select45 = 0, $spec$select46 = 0, $spec$select47 = 0, $spec$store$select = 0, $sprbottomclip = 0, $sprbottomclip357 = 0, $sprbottomclip365 = 0, $sprbottomclip48 = 0, $sprtopclip = 0;
 var $sprtopclip340 = 0, $sprtopclip347 = 0, $sprtopclip49 = 0, $storemerge = 0, $storemerge41 = 0, $storemerge42 = 0, $sub = 0, $sub10 = 0, $sub108 = 0, $sub110 = 0, $sub183 = 0, $sub207 = 0, $sub216 = 0, $sub220 = 0, $sub229 = 0, $sub233 = 0, $sub238 = 0, $sub25 = 0, $sub26 = 0, $sub292 = 0;
 var $sub295 = 0, $sub297 = 0, $sub30 = 0, $sub300 = 0, $sub31 = 0, $sub310 = 0, $sub312 = 0, $sub319 = 0, $sub321 = 0, $sub326 = 0, $sub331 = 0, $sub344 = 0, $sub348 = 0, $sub361 = 0, $sub366 = 0, $sub43 = 0, $tobool = 0, $tobool175 = 0, $tobool194 = 0, $tobool204 = 0;
 var $tobool214 = 0, $tobool239 = 0, $tobool301 = 0, $tobool324 = 0, $tobool329 = 0, $tobool341 = 0, $tobool358 = 0, $tobool36 = 0, $tobool369 = 0, $tobool373 = 0, $tobool383 = 0, $toptexture = 0, $tsilheight = 0, $tsilheight103 = 0, $tsilheight377 = 0, $tsilheight84 = 0, $v2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $x1 = 0;
 var $x2 = 0, $y = 0, $y246 = 0, $y247 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99559]|0;
 $cmp = ($0|0)==((204624)|0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[99612]|0;
 $cmp1 = ($1|0)<=($start|0);
 $cmp2 = ($stop|0)<($start|0);
 $or$cond = $cmp2 | $cmp1;
 if ($or$cond) {
  HEAP32[$vararg_buffer>>2] = $start;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $stop;
  _I_Error(154608,$vararg_buffer);
  // unreachable;
 }
 $2 = HEAP32[99561]|0;
 $sidedef = ((($2)) + 16|0);
 $3 = HEAP32[$sidedef>>2]|0;
 HEAP32[99564] = $3;
 $linedef = ((($2)) + 20|0);
 $4 = HEAP32[$linedef>>2]|0;
 HEAP32[99565] = $4;
 $flags = ((($4)) + 16|0);
 $5 = HEAP16[$flags>>1]|0;
 $6 = $5 | 256;
 HEAP16[$flags>>1] = $6;
 $angle = ((($2)) + 12|0);
 $7 = HEAP32[$angle>>2]|0;
 $add = (($7) + 1073741824)|0;
 HEAP32[99675] = $add;
 $8 = HEAP32[99676]|0;
 $sub = (($add) - ($8))|0;
 $ispos = ($sub|0)>(-1);
 $neg = (0 - ($sub))|0;
 $9 = $ispos ? $sub : $neg;
 $10 = ($9>>>0)<(1073741824);
 $spec$store$select = $10 ? $9 : 1073741824;
 $sub10 = (1073741824 - ($spec$store$select))|0;
 $11 = HEAP32[$2>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $y = ((($11)) + 4|0);
 $13 = HEAP32[$y>>2]|0;
 $call12 = (_R_PointToDist($12,$13)|0);
 $shr = $sub10 >>> 19;
 $arrayidx = (74720 + ($shr<<2)|0);
 $14 = HEAP32[$arrayidx>>2]|0;
 $call13 = (_FixedMul($call12,$14)|0);
 HEAP32[99660] = $call13;
 HEAP32[99651] = $start;
 $15 = HEAP32[99559]|0;
 $x1 = ((($15)) + 4|0);
 HEAP32[$x1>>2] = $start;
 $x2 = ((($15)) + 8|0);
 HEAP32[$x2>>2] = $stop;
 $16 = HEAP32[99561]|0;
 HEAP32[$15>>2] = $16;
 $add14 = (($stop) + 1)|0;
 HEAP32[99652] = $add14;
 $17 = HEAP32[99616]|0;
 $arrayidx15 = (229072 + ($start<<2)|0);
 $18 = HEAP32[$arrayidx15>>2]|0;
 $add16 = (($18) + ($17))|0;
 $call17 = (_R_ScaleFromGlobalAngle($add16)|0);
 HEAP32[99661] = $call17;
 $19 = HEAP32[99559]|0;
 $scale1 = ((($19)) + 12|0);
 HEAP32[$scale1>>2] = $call17;
 $cmp18 = ($stop|0)>($start|0);
 if ($cmp18) {
  $20 = HEAP32[99616]|0;
  $arrayidx21 = (229072 + ($stop<<2)|0);
  $21 = HEAP32[$arrayidx21>>2]|0;
  $add22 = (($21) + ($20))|0;
  $call23 = (_R_ScaleFromGlobalAngle($add22)|0);
  $22 = HEAP32[99559]|0;
  $scale2 = ((($22)) + 16|0);
  HEAP32[$scale2>>2] = $call23;
  $23 = HEAP32[99661]|0;
  $sub25 = (($call23) - ($23))|0;
  $sub26 = (($stop) - ($start))|0;
  $div = (($sub25|0) / ($sub26|0))&-1;
  HEAP32[99650] = $div;
  $scalestep = ((($22)) + 20|0);
  HEAP32[$scalestep>>2] = $div;
  $28 = $22;
 } else {
  $scale228 = ((($19)) + 16|0);
  HEAP32[$scale228>>2] = $call17;
  $28 = $19;
 }
 $24 = HEAP32[99563]|0;
 $ceilingheight = ((($24)) + 4|0);
 $25 = HEAP32[$ceilingheight>>2]|0;
 $26 = HEAP32[99635]|0;
 $sub30 = (($25) - ($26))|0;
 HEAP32[99677] = $sub30;
 $27 = HEAP32[$24>>2]|0;
 $sub31 = (($27) - ($26))|0;
 HEAP32[99678] = $sub31;
 HEAP32[99672] = 0;
 HEAP32[99668] = 0;
 HEAP32[99664] = 0;
 HEAP32[99662] = 0;
 $maskedtexturecol = ((($28)) + 44|0);
 HEAP32[$maskedtexturecol>>2] = 0;
 $29 = HEAP32[99562]|0;
 $tobool = ($29|0)==(0|0);
 if ($tobool) {
  $30 = HEAP32[99574]|0;
  $31 = HEAP32[99564]|0;
  $midtexture = ((($31)) + 12|0);
  $32 = HEAP16[$midtexture>>1]|0;
  $idxprom = $32 << 16 >> 16;
  $arrayidx33 = (($30) + ($idxprom<<2)|0);
  $33 = HEAP32[$arrayidx33>>2]|0;
  HEAP32[99662] = $33;
  HEAP32[99654] = 1;
  HEAP32[99656] = 1;
  $34 = HEAP32[99565]|0;
  $flags34 = ((($34)) + 16|0);
  $35 = HEAP16[$flags34>>1]|0;
  $36 = $35 & 16;
  $tobool36 = ($36<<16>>16)==(0);
  if ($tobool36) {
   $storemerge = $sub30;
  } else {
   $37 = HEAP32[$24>>2]|0;
   $38 = HEAP32[99573]|0;
   $arrayidx41 = (($38) + ($idxprom<<2)|0);
   $39 = HEAP32[$arrayidx41>>2]|0;
   $add42 = (($37) - ($26))|0;
   $sub43 = (($add42) + ($39))|0;
   $storemerge = $sub43;
  }
  $rowoffset = ((($31)) + 4|0);
  $40 = HEAP32[$rowoffset>>2]|0;
  $add46 = (($40) + ($storemerge))|0;
  HEAP32[99663] = $add46;
  $silhouette = ((($28)) + 24|0);
  HEAP32[$silhouette>>2] = 3;
  $sprtopclip = ((($28)) + 36|0);
  HEAP32[$sprtopclip>>2] = 384272;
  $sprbottomclip = ((($28)) + 40|0);
  HEAP32[$sprbottomclip>>2] = 375952;
  $bsilheight = ((($28)) + 28|0);
  HEAP32[$bsilheight>>2] = 2147483647;
  $tsilheight = ((($28)) + 32|0);
  HEAP32[$tsilheight>>2] = -2147483648;
  $85 = 0;$86 = $33;$87 = 0;$88 = 0;
 } else {
  $sprbottomclip48 = ((($28)) + 40|0);
  HEAP32[$sprbottomclip48>>2] = 0;
  $sprtopclip49 = ((($28)) + 36|0);
  HEAP32[$sprtopclip49>>2] = 0;
  $silhouette50 = ((($28)) + 24|0);
  HEAP32[$silhouette50>>2] = 0;
  $41 = HEAP32[$24>>2]|0;
  $42 = HEAP32[$29>>2]|0;
  $cmp53 = ($41|0)>($42|0);
  if ($cmp53) {
   $$sink = $41;
   label = 13;
  } else {
   $cmp61 = ($42|0)>($26|0);
   if ($cmp61) {
    $$sink = 2147483647;
    label = 13;
   } else {
    $44 = 0;
   }
  }
  if ((label|0) == 13) {
   HEAP32[$silhouette50>>2] = 1;
   $bsilheight65 = ((($28)) + 28|0);
   HEAP32[$bsilheight65>>2] = $$sink;
   $44 = 1;
  }
  $ceilingheight69 = ((($29)) + 4|0);
  $43 = HEAP32[$ceilingheight69>>2]|0;
  $cmp70 = ($25|0)<($43|0);
  if ($cmp70) {
   $or74 = $44 | 2;
   $$sink55 = $25;$or83$sink = $or74;
   label = 18;
  } else {
   $cmp79 = ($43|0)<($26|0);
   if ($cmp79) {
    $or83 = $44 | 2;
    $$sink55 = -2147483648;$or83$sink = $or83;
    label = 18;
   } else {
    $45 = $44;
   }
  }
  if ((label|0) == 18) {
   HEAP32[$silhouette50>>2] = $or83$sink;
   $tsilheight84 = ((($28)) + 32|0);
   HEAP32[$tsilheight84>>2] = $$sink55;
   $45 = $or83$sink;
  }
  $cmp89 = ($43|0)>($41|0);
  if ($cmp89) {
   $46 = $45;
  } else {
   HEAP32[$sprbottomclip48>>2] = 375952;
   $bsilheight93 = ((($28)) + 28|0);
   HEAP32[$bsilheight93>>2] = 2147483647;
   $or95 = $45 | 1;
   HEAP32[$silhouette50>>2] = $or95;
   $46 = $or95;
  }
  $cmp99 = ($42|0)<($25|0);
  if (!($cmp99)) {
   HEAP32[$sprtopclip49>>2] = 384272;
   $tsilheight103 = ((($28)) + 32|0);
   HEAP32[$tsilheight103>>2] = -2147483648;
   $or105 = $46 | 2;
   HEAP32[$silhouette50>>2] = $or105;
  }
  $sub108 = (($43) - ($26))|0;
  HEAP32[99679] = $sub108;
  $47 = HEAP32[$29>>2]|0;
  $sub110 = (($47) - ($26))|0;
  HEAP32[99680] = $sub110;
  $ceilingpic = ((($24)) + 10|0);
  $48 = HEAP16[$ceilingpic>>1]|0;
  $conv111 = $48 << 16 >> 16;
  $49 = HEAP32[99682]|0;
  $cmp112 = ($49|0)==($conv111|0);
  if ($cmp112) {
   $ceilingpic114 = ((($29)) + 10|0);
   $50 = HEAP16[$ceilingpic114>>1]|0;
   $cmp116 = ($48<<16>>16)==($50<<16>>16);
   if ($cmp116) {
    HEAP32[99677] = $sub108;
    $55 = $sub108;
   } else {
    $55 = $sub30;
   }
  } else {
   $55 = $sub30;
  }
  $cmp120 = ($sub110|0)==($sub31|0);
  if ($cmp120) {
   $floorpic = ((($29)) + 8|0);
   $51 = HEAP16[$floorpic>>1]|0;
   $floorpic124 = ((($24)) + 8|0);
   $52 = HEAP16[$floorpic124>>1]|0;
   $cmp126 = ($51<<16>>16)==($52<<16>>16);
   if ($cmp126) {
    $lightlevel = ((($29)) + 12|0);
    $53 = HEAP16[$lightlevel>>1]|0;
    $lightlevel130 = ((($24)) + 12|0);
    $54 = HEAP16[$lightlevel130>>1]|0;
    $cmp132 = ($53<<16>>16)!=($54<<16>>16);
    $spec$select46 = $cmp132&1;
    $storemerge41 = $spec$select46;
   } else {
    $storemerge41 = 1;
   }
  } else {
   $storemerge41 = 1;
  }
  HEAP32[99656] = $storemerge41;
  $cmp137 = ($sub108|0)==($55|0);
  if ($cmp137) {
   $ceilingpic140 = ((($29)) + 10|0);
   $56 = HEAP16[$ceilingpic140>>1]|0;
   $cmp144 = ($56<<16>>16)==($48<<16>>16);
   if ($cmp144) {
    $lightlevel147 = ((($29)) + 12|0);
    $57 = HEAP16[$lightlevel147>>1]|0;
    $lightlevel149 = ((($24)) + 12|0);
    $58 = HEAP16[$lightlevel149>>1]|0;
    $cmp151 = ($57<<16>>16)!=($58<<16>>16);
    $spec$select47 = $cmp151&1;
    $storemerge42 = $spec$select47;
   } else {
    $storemerge42 = 1;
   }
  } else {
   $storemerge42 = 1;
  }
  HEAP32[99654] = $storemerge42;
  $59 = HEAP32[$24>>2]|0;
  $cmp158 = ($43|0)>($59|0);
  if ($cmp158) {
   $60 = HEAP32[$29>>2]|0;
   $cmp163 = ($60|0)<($25|0);
   if (!($cmp163)) {
    label = 34;
   }
  } else {
   label = 34;
  }
  if ((label|0) == 34) {
   HEAP32[99656] = 1;
   HEAP32[99654] = 1;
  }
  $cmp167 = ($sub108|0)<($55|0);
  if ($cmp167) {
   $61 = HEAP32[99574]|0;
   $62 = HEAP32[99564]|0;
   $toptexture = ((($62)) + 8|0);
   $63 = HEAP16[$toptexture>>1]|0;
   $idxprom170 = $63 << 16 >> 16;
   $arrayidx171 = (($61) + ($idxprom170<<2)|0);
   $64 = HEAP32[$arrayidx171>>2]|0;
   HEAP32[99664] = $64;
   $65 = HEAP32[99565]|0;
   $flags172 = ((($65)) + 16|0);
   $66 = HEAP16[$flags172>>1]|0;
   $67 = $66 & 8;
   $tobool175 = ($67<<16>>16)==(0);
   if ($tobool175) {
    $68 = HEAP32[99573]|0;
    $arrayidx181 = (($68) + ($idxprom170<<2)|0);
    $69 = HEAP32[$arrayidx181>>2]|0;
    $sub183 = (($sub108) + ($69))|0;
    $$sink56 = $sub183;
   } else {
    $$sink56 = $55;
   }
   HEAP32[99667] = $$sink56;
   $176 = $64;
  } else {
   $176 = 0;
  }
  $cmp186 = ($sub110|0)>($sub31|0);
  do {
   if ($cmp186) {
    $70 = HEAP32[99574]|0;
    $71 = HEAP32[99564]|0;
    $bottomtexture = ((($71)) + 10|0);
    $72 = HEAP16[$bottomtexture>>1]|0;
    $idxprom189 = $72 << 16 >> 16;
    $arrayidx190 = (($70) + ($idxprom189<<2)|0);
    $73 = HEAP32[$arrayidx190>>2]|0;
    HEAP32[99668] = $73;
    $74 = HEAP32[99565]|0;
    $flags191 = ((($74)) + 16|0);
    $75 = HEAP16[$flags191>>1]|0;
    $76 = $75 & 16;
    $tobool194 = ($76<<16>>16)==(0);
    if ($tobool194) {
     HEAP32[99671] = $sub110;
     $177 = $73;$77 = $71;$80 = $sub110;
     break;
    } else {
     HEAP32[99671] = $55;
     $177 = $73;$77 = $71;$80 = $55;
     break;
    }
   } else {
    $$pre = HEAP32[99564]|0;
    $$pre49 = HEAP32[99671]|0;
    $177 = 0;$77 = $$pre;$80 = $$pre49;
   }
  } while(0);
  $rowoffset199 = ((($77)) + 4|0);
  $78 = HEAP32[$rowoffset199>>2]|0;
  $79 = HEAP32[99667]|0;
  $add200 = (($79) + ($78))|0;
  HEAP32[99667] = $add200;
  $add202 = (($80) + ($78))|0;
  HEAP32[99671] = $add202;
  $midtexture203 = ((($77)) + 12|0);
  $81 = HEAP16[$midtexture203>>1]|0;
  $tobool204 = ($81<<16>>16)==(0);
  if ($tobool204) {
   $85 = $176;$86 = 0;$87 = $177;$88 = 0;
  } else {
   HEAP32[99672] = 1;
   $82 = HEAP32[99645]|0;
   $83 = HEAP32[99651]|0;
   $idx$neg = (0 - ($83))|0;
   $add$ptr = (($82) + ($idx$neg<<1)|0);
   HEAP32[99649] = $add$ptr;
   HEAP32[$maskedtexturecol>>2] = $add$ptr;
   $84 = HEAP32[99652]|0;
   $sub207 = (($84) - ($83))|0;
   $add$ptr208 = (($82) + ($sub207<<1)|0);
   HEAP32[99645] = $add$ptr208;
   $85 = $176;$86 = 0;$87 = $177;$88 = 1;
  }
 }
 $or211 = $85 | $86;
 $or212 = $or211 | $87;
 $or213 = $or212 | $88;
 HEAP32[99657] = $or213;
 $tobool214 = ($or213|0)==(0);
 do {
  if ($tobool214) {
   $112 = $24;
  } else {
   $89 = HEAP32[99675]|0;
   $90 = HEAP32[99676]|0;
   $sub216 = (($89) - ($90))|0;
   $cmp217 = ($sub216>>>0)>(2147483648);
   $sub220 = (0 - ($sub216))|0;
   $spec$select = $cmp217 ? $sub220 : $sub216;
   $91 = ($spec$select>>>0)<(1073741824);
   $offsetangle$1 = $91 ? $spec$select : 1073741824;
   $shr226 = $offsetangle$1 >>> 19;
   $arrayidx227 = (74720 + ($shr226<<2)|0);
   $92 = HEAP32[$arrayidx227>>2]|0;
   $call228 = (_FixedMul($call12,$92)|0);
   HEAP32[99659] = $call228;
   $93 = HEAP32[99675]|0;
   $94 = HEAP32[99676]|0;
   $sub229 = (($93) - ($94))|0;
   $cmp230 = ($sub229|0)>(-1);
   if ($cmp230) {
    $sub233 = (0 - ($call228))|0;
    HEAP32[99659] = $sub233;
    $99 = $sub233;
   } else {
    $99 = $call228;
   }
   $95 = HEAP32[99564]|0;
   $96 = HEAP32[$95>>2]|0;
   $97 = HEAP32[99561]|0;
   $offset = ((($97)) + 8|0);
   $98 = HEAP32[$offset>>2]|0;
   $add235 = (($98) + ($96))|0;
   $add236 = (($add235) + ($99))|0;
   HEAP32[99659] = $add236;
   $100 = HEAP32[99616]|0;
   $add237 = (1073741824 - ($93))|0;
   $sub238 = (($add237) + ($100))|0;
   HEAP32[99658] = $sub238;
   $101 = HEAP32[99639]|0;
   $tobool239 = ($101|0)==(0|0);
   $102 = HEAP32[99563]|0;
   if ($tobool239) {
    $lightlevel241 = ((($102)) + 12|0);
    $103 = HEAP16[$lightlevel241>>1]|0;
    $conv242 = $103 << 16 >> 16;
    $shr243 = $conv242 >> 4;
    $104 = HEAP32[99634]|0;
    $add244 = (($shr243) + ($104))|0;
    $105 = HEAP32[$97>>2]|0;
    $y246 = ((($105)) + 4|0);
    $106 = HEAP32[$y246>>2]|0;
    $v2 = ((($97)) + 4|0);
    $107 = HEAP32[$v2>>2]|0;
    $y247 = ((($107)) + 4|0);
    $108 = HEAP32[$y247>>2]|0;
    $cmp248 = ($106|0)==($108|0);
    if ($cmp248) {
     $inc$sink = -1;
    } else {
     $109 = HEAP32[$105>>2]|0;
     $110 = HEAP32[$107>>2]|0;
     $cmp256 = ($109|0)==($110|0);
     $inc = $cmp256&1;
     $inc$sink = $inc;
    }
    $spec$select45 = (($add244) + ($inc$sink))|0;
    $cmp261 = ($spec$select45|0)<(0);
    if ($cmp261) {
     HEAP32[99648] = 238560;
     $112 = $102;
     break;
    }
    $cmp265 = ($spec$select45|0)>(15);
    if ($cmp265) {
     HEAP32[99648] = (241440);
     $112 = $102;
     break;
    } else {
     $arraydecay = (238560 + (($spec$select45*192)|0)|0);
     HEAP32[99648] = $arraydecay;
     $112 = $102;
     break;
    }
   } else {
    $112 = $102;
   }
  }
 } while(0);
 $111 = HEAP32[$112>>2]|0;
 $113 = HEAP32[99635]|0;
 $cmp275 = ($111|0)<($113|0);
 if (!($cmp275)) {
  HEAP32[99656] = 0;
 }
 $ceilingheight279 = ((($112)) + 4|0);
 $114 = HEAP32[$ceilingheight279>>2]|0;
 $cmp280 = ($114|0)>($113|0);
 if (!($cmp280)) {
  $ceilingpic283 = ((($112)) + 10|0);
  $115 = HEAP16[$ceilingpic283>>1]|0;
  $conv284 = $115 << 16 >> 16;
  $116 = HEAP32[99682]|0;
  $cmp285 = ($116|0)==($conv284|0);
  if (!($cmp285)) {
   HEAP32[99654] = 0;
  }
 }
 $117 = HEAP32[99677]|0;
 $shr289 = $117 >> 4;
 HEAP32[99677] = $shr289;
 $118 = HEAP32[99678]|0;
 $shr290 = $118 >> 4;
 HEAP32[99678] = $shr290;
 $119 = HEAP32[99650]|0;
 $call291 = (_FixedMul($119,$shr289)|0);
 $sub292 = (0 - ($call291))|0;
 HEAP32[99673] = $sub292;
 $120 = HEAP32[99625]|0;
 $shr293 = $120 >> 4;
 $121 = HEAP32[99677]|0;
 $122 = HEAP32[99661]|0;
 $call294 = (_FixedMul($121,$122)|0);
 $sub295 = (($shr293) - ($call294))|0;
 HEAP32[99653] = $sub295;
 $123 = HEAP32[99650]|0;
 $124 = HEAP32[99678]|0;
 $call296 = (_FixedMul($123,$124)|0);
 $sub297 = (0 - ($call296))|0;
 HEAP32[99674] = $sub297;
 $125 = HEAP32[99625]|0;
 $shr298 = $125 >> 4;
 $126 = HEAP32[99678]|0;
 $127 = HEAP32[99661]|0;
 $call299 = (_FixedMul($126,$127)|0);
 $sub300 = (($shr298) - ($call299))|0;
 HEAP32[99655] = $sub300;
 $128 = HEAP32[99562]|0;
 $tobool301 = ($128|0)==(0|0);
 if (!($tobool301)) {
  $129 = HEAP32[99679]|0;
  $shr303 = $129 >> 4;
  HEAP32[99679] = $shr303;
  $130 = HEAP32[99680]|0;
  $shr304 = $130 >> 4;
  HEAP32[99680] = $shr304;
  $131 = HEAP32[99677]|0;
  $cmp305 = ($shr303|0)<($131|0);
  if ($cmp305) {
   $132 = HEAP32[99625]|0;
   $shr308 = $132 >> 4;
   $133 = HEAP32[99661]|0;
   $call309 = (_FixedMul($shr303,$133)|0);
   $sub310 = (($shr308) - ($call309))|0;
   HEAP32[99665] = $sub310;
   $134 = HEAP32[99650]|0;
   $135 = HEAP32[99679]|0;
   $call311 = (_FixedMul($134,$135)|0);
   $sub312 = (0 - ($call311))|0;
   HEAP32[99666] = $sub312;
   $$pre51 = HEAP32[99680]|0;
   $137 = $$pre51;
  } else {
   $137 = $shr304;
  }
  $136 = HEAP32[99678]|0;
  $cmp314 = ($137|0)>($136|0);
  if ($cmp314) {
   $138 = HEAP32[99625]|0;
   $shr317 = $138 >> 4;
   $139 = HEAP32[99661]|0;
   $call318 = (_FixedMul($137,$139)|0);
   $sub319 = (($shr317) - ($call318))|0;
   HEAP32[99669] = $sub319;
   $140 = HEAP32[99650]|0;
   $141 = HEAP32[99680]|0;
   $call320 = (_FixedMul($140,$141)|0);
   $sub321 = (0 - ($call320))|0;
   HEAP32[99670] = $sub321;
  }
 }
 $142 = HEAP32[99654]|0;
 $tobool324 = ($142|0)==(0);
 if (!($tobool324)) {
  $143 = HEAP32[99647]|0;
  $144 = HEAP32[99651]|0;
  $145 = HEAP32[99652]|0;
  $sub326 = (($145) + -1)|0;
  $call327 = (_R_CheckPlane($143,$144,$sub326)|0);
  HEAP32[99647] = $call327;
 }
 $146 = HEAP32[99656]|0;
 $tobool329 = ($146|0)==(0);
 if (!($tobool329)) {
  $147 = HEAP32[99646]|0;
  $148 = HEAP32[99651]|0;
  $149 = HEAP32[99652]|0;
  $sub331 = (($149) + -1)|0;
  $call332 = (_R_CheckPlane($147,$148,$sub331)|0);
  HEAP32[99646] = $call332;
 }
 _R_RenderSegLoop();
 $150 = HEAP32[99559]|0;
 $silhouette334 = ((($150)) + 24|0);
 $151 = HEAP32[$silhouette334>>2]|0;
 $and335 = $151 & 2;
 $152 = HEAP32[99672]|0;
 $153 = $and335 | $152;
 $154 = ($153|0)==(0);
 if ($154) {
  $161 = $151;$163 = $152;$165 = $150;
 } else {
  $sprtopclip340 = ((($150)) + 36|0);
  $155 = HEAP32[$sprtopclip340>>2]|0;
  $tobool341 = ($155|0)==(0|0);
  if ($tobool341) {
   $156 = HEAP32[99645]|0;
   $add$ptr343 = (247744 + ($start<<1)|0);
   $157 = HEAP32[99652]|0;
   $sub344 = (($157) - ($start))|0;
   $mul = $sub344 << 1;
   _memcpy(($156|0),($add$ptr343|0),($mul|0))|0;
   $158 = HEAP32[99645]|0;
   $idx$neg345 = (0 - ($start))|0;
   $add$ptr346 = (($158) + ($idx$neg345<<1)|0);
   $159 = HEAP32[99559]|0;
   $sprtopclip347 = ((($159)) + 36|0);
   HEAP32[$sprtopclip347>>2] = $add$ptr346;
   $160 = HEAP32[99652]|0;
   $sub348 = (($160) - ($start))|0;
   $add$ptr349 = (($158) + ($sub348<<1)|0);
   HEAP32[99645] = $add$ptr349;
   $silhouette351$phi$trans$insert = ((($159)) + 24|0);
   $$pre52 = HEAP32[$silhouette351$phi$trans$insert>>2]|0;
   $$pre53 = HEAP32[99672]|0;
   $161 = $$pre52;$163 = $$pre53;$165 = $159;
  } else {
   $161 = $151;$163 = $152;$165 = $150;
  }
 }
 $and352 = $161 & 1;
 $162 = $and352 | $163;
 $164 = ($162|0)==(0);
 if ($164) {
  $172 = $163;$173 = $165;
 } else {
  $sprbottomclip357 = ((($165)) + 40|0);
  $166 = HEAP32[$sprbottomclip357>>2]|0;
  $tobool358 = ($166|0)==(0|0);
  if ($tobool358) {
   $167 = HEAP32[99645]|0;
   $add$ptr360 = (247104 + ($start<<1)|0);
   $168 = HEAP32[99652]|0;
   $sub361 = (($168) - ($start))|0;
   $mul362 = $sub361 << 1;
   _memcpy(($167|0),($add$ptr360|0),($mul362|0))|0;
   $169 = HEAP32[99645]|0;
   $idx$neg363 = (0 - ($start))|0;
   $add$ptr364 = (($169) + ($idx$neg363<<1)|0);
   $170 = HEAP32[99559]|0;
   $sprbottomclip365 = ((($170)) + 40|0);
   HEAP32[$sprbottomclip365>>2] = $add$ptr364;
   $171 = HEAP32[99652]|0;
   $sub366 = (($171) - ($start))|0;
   $add$ptr367 = (($169) + ($sub366<<1)|0);
   HEAP32[99645] = $add$ptr367;
   $$pr$pre = HEAP32[99672]|0;
   $172 = $$pr$pre;$173 = $170;
  } else {
   $172 = $163;$173 = $165;
  }
 }
 $tobool369 = ($172|0)==(0);
 if (!($tobool369)) {
  $silhouette371 = ((($173)) + 24|0);
  $174 = HEAP32[$silhouette371>>2]|0;
  $and372 = $174 & 2;
  $tobool373 = ($and372|0)==(0);
  if ($tobool373) {
   $tsilheight377 = ((($173)) + 32|0);
   $or376 = $174 | 2;
   HEAP32[$silhouette371>>2] = $or376;
   HEAP32[$tsilheight377>>2] = -2147483648;
   $175 = $or376;
  } else {
   $175 = $174;
  }
  $and382 = $175 & 1;
  $tobool383 = ($and382|0)==(0);
  if ($tobool383) {
   $bsilheight387 = ((($173)) + 28|0);
   $or386 = $175 | 1;
   HEAP32[$silhouette371>>2] = $or386;
   HEAP32[$bsilheight387>>2] = 2147483647;
  }
 }
 $incdec$ptr = ((($173)) + 48|0);
 HEAP32[99559] = $incdec$ptr;
 STACKTOP = sp;return;
}
function _R_InitSkyMap() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99681] = 6553600;
 return;
}
function _R_InstallSpriteLump($lump,$frame,$rotation,$flipped) {
 $lump = $lump|0;
 $frame = $frame|0;
 $rotation = $rotation|0;
 $flipped = $flipped|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $add43 = 0, $arrayidx21 = 0, $arrayidx21$1 = 0, $arrayidx21$2 = 0, $arrayidx21$3 = 0, $arrayidx21$4 = 0, $arrayidx21$5 = 0, $arrayidx21$6 = 0, $arrayidx21$7 = 0, $arrayidx24 = 0;
 var $arrayidx24$1 = 0, $arrayidx24$2 = 0, $arrayidx24$3 = 0, $arrayidx24$4 = 0, $arrayidx24$5 = 0, $arrayidx24$6 = 0, $arrayidx24$7 = 0, $arrayidx37 = 0, $arrayidx53 = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp2 = 0, $cmp39 = 0, $cmp5 = 0, $cmp7 = 0, $conv = 0, $conv22 = 0, $conv46 = 0, $conv50 = 0;
 var $dec = 0, $or$cond = 0, $rotate = 0, $sub = 0, $sub45 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $cmp = ($frame>>>0)>(28);
 $cmp1 = ($rotation>>>0)>(8);
 $or$cond = $cmp | $cmp1;
 if ($or$cond) {
  HEAP32[$vararg_buffer>>2] = $lump;
  _I_Error(154640,$vararg_buffer);
  // unreachable;
 }
 $0 = HEAP32[99684]|0;
 $cmp2 = ($0|0)<($frame|0);
 if ($cmp2) {
  HEAP32[99684] = $frame;
 }
 $cmp5 = ($rotation|0)==(0);
 $rotate = (375136 + (($frame*28)|0)|0);
 $1 = HEAP32[$rotate>>2]|0;
 $cmp7 = ($1|0)==(0);
 $add = (($frame) + 65)|0;
 if ($cmp5) {
  if ($cmp7) {
   $2 = HEAP32[99685]|0;
   HEAP32[$vararg_buffer1>>2] = $2;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $add;
   _I_Error(154693,$vararg_buffer1);
   // unreachable;
  }
  $cmp12 = ($1|0)==(1);
  if ($cmp12) {
   $3 = HEAP32[99685]|0;
   HEAP32[$vararg_buffer5>>2] = $3;
   $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $add;
   _I_Error(154749,$vararg_buffer5);
   // unreachable;
  }
  HEAP32[$rotate>>2] = 0;
  $4 = HEAP32[99578]|0;
  $sub = (($lump) - ($4))|0;
  $conv = $sub&65535;
  $conv22 = $flipped&255;
  $arrayidx21 = (((375136 + (($frame*28)|0)|0)) + 4|0);
  HEAP16[$arrayidx21>>1] = $conv;
  $arrayidx24 = (((375136 + (($frame*28)|0)|0)) + 20|0);
  HEAP8[$arrayidx24>>0] = $conv22;
  $arrayidx21$1 = (((375136 + (($frame*28)|0)|0)) + 6|0);
  HEAP16[$arrayidx21$1>>1] = $conv;
  $arrayidx24$1 = (((375136 + (($frame*28)|0)|0)) + 21|0);
  HEAP8[$arrayidx24$1>>0] = $conv22;
  $arrayidx21$2 = (((375136 + (($frame*28)|0)|0)) + 8|0);
  HEAP16[$arrayidx21$2>>1] = $conv;
  $arrayidx24$2 = (((375136 + (($frame*28)|0)|0)) + 22|0);
  HEAP8[$arrayidx24$2>>0] = $conv22;
  $arrayidx21$3 = (((375136 + (($frame*28)|0)|0)) + 10|0);
  HEAP16[$arrayidx21$3>>1] = $conv;
  $arrayidx24$3 = (((375136 + (($frame*28)|0)|0)) + 23|0);
  HEAP8[$arrayidx24$3>>0] = $conv22;
  $arrayidx21$4 = (((375136 + (($frame*28)|0)|0)) + 12|0);
  HEAP16[$arrayidx21$4>>1] = $conv;
  $arrayidx24$4 = (((375136 + (($frame*28)|0)|0)) + 24|0);
  HEAP8[$arrayidx24$4>>0] = $conv22;
  $arrayidx21$5 = (((375136 + (($frame*28)|0)|0)) + 14|0);
  HEAP16[$arrayidx21$5>>1] = $conv;
  $arrayidx24$5 = (((375136 + (($frame*28)|0)|0)) + 25|0);
  HEAP8[$arrayidx24$5>>0] = $conv22;
  $arrayidx21$6 = (((375136 + (($frame*28)|0)|0)) + 16|0);
  HEAP16[$arrayidx21$6>>1] = $conv;
  $arrayidx24$6 = (((375136 + (($frame*28)|0)|0)) + 26|0);
  HEAP8[$arrayidx24$6>>0] = $conv22;
  $arrayidx21$7 = (((375136 + (($frame*28)|0)|0)) + 18|0);
  HEAP16[$arrayidx21$7>>1] = $conv;
  $arrayidx24$7 = (((375136 + (($frame*28)|0)|0)) + 27|0);
  HEAP8[$arrayidx24$7>>0] = $conv22;
  STACKTOP = sp;return;
 } else {
  if ($cmp7) {
   $5 = HEAP32[99685]|0;
   HEAP32[$vararg_buffer9>>2] = $5;
   $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
   HEAP32[$vararg_ptr12>>2] = $add;
   _I_Error(154749,$vararg_buffer9);
   // unreachable;
  }
  HEAP32[$rotate>>2] = 1;
  $dec = (($rotation) + -1)|0;
  $arrayidx37 = ((((375136 + (($frame*28)|0)|0)) + 4|0) + ($dec<<1)|0);
  $6 = HEAP16[$arrayidx37>>1]|0;
  $cmp39 = ($6<<16>>16)==(-1);
  if (!($cmp39)) {
   $add43 = (($rotation) + 48)|0;
   $7 = HEAP32[99685]|0;
   HEAP32[$vararg_buffer13>>2] = $7;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = $add;
   $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
   HEAP32[$vararg_ptr17>>2] = $add43;
   _I_Error(154814,$vararg_buffer13);
   // unreachable;
  }
  $8 = HEAP32[99578]|0;
  $sub45 = (($lump) - ($8))|0;
  $conv46 = $sub45&65535;
  HEAP16[$arrayidx37>>1] = $conv46;
  $conv50 = $flipped&255;
  $arrayidx53 = ((((375136 + (($frame*28)|0)|0)) + 20|0) + ($dec)|0);
  HEAP8[$arrayidx53>>0] = $conv50;
  STACKTOP = sp;return;
 }
}
function _R_InitSpriteDefs($namelist) {
 $namelist = $namelist|0;
 var $$lcssa = 0, $$pre = 0, $$pre50 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add54 = 0, $add66 = 0, $arraydecay = 0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx16 = 0, $arrayidx28 = 0, $arrayidx38 = 0, $arrayidx61 = 0, $arrayidx61$1 = 0, $arrayidx61$2 = 0, $arrayidx61$3 = 0, $arrayidx61$4 = 0, $arrayidx61$5 = 0, $arrayidx61$6 = 0, $arrayidx61$7 = 0, $call = 0, $call24 = 0;
 var $call7 = 0, $call77 = 0, $check$0 = 0, $cmp = 0, $cmp1 = 0, $cmp146 = 0, $cmp4 = 0, $cmp43 = 0, $cmp439 = 0, $cmp50 = 0, $cmp5043 = 0, $cmp63 = 0, $cmp63$1 = 0, $cmp63$2 = 0, $cmp63$3 = 0, $cmp63$4 = 0, $cmp63$5 = 0, $cmp63$6 = 0, $cmp63$7 = 0, $conv = 0;
 var $conv17 = 0, $conv34 = 0, $conv39 = 0, $frame$044 = 0, $i$047 = 0, $inc = 0, $inc48 = 0, $inc72 = 0, $inc83 = 0, $incdec$ptr = 0, $l$040 = 0, $mul = 0, $mul76 = 0, $mul81 = 0, $numframes = 0, $numframes75 = 0, $patched$0 = 0, $rotate = 0, $spriteframes = 0, $sub$ptr$div = 0;
 var $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub13 = 0, $sub18 = 0, $sub35 = 0, $sub40 = 0, $tobool = 0, $tobool19 = 0, $tobool29 = 0, $tobool8 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer26 = 0, $vararg_buffer30 = 0, $vararg_buffer6 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer30 = sp + 64|0;
 $vararg_buffer26 = sp + 56|0;
 $vararg_buffer22 = sp + 48|0;
 $vararg_buffer18 = sp + 40|0;
 $vararg_buffer14 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $check$0 = $namelist;
 while(1) {
  $0 = HEAP32[$check$0>>2]|0;
  $cmp = ($0|0)==(0|0);
  $incdec$ptr = ((($check$0)) + 4|0);
  if ($cmp) {
   break;
  } else {
   $check$0 = $incdec$ptr;
  }
 }
 $sub$ptr$lhs$cast = $check$0;
 $sub$ptr$rhs$cast = $namelist;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 HEAP32[99686] = $sub$ptr$div;
 $tobool = ($sub$ptr$sub|0)==(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $mul = $sub$ptr$sub << 1;
 $call = (_Z_Malloc($mul,1,0)|0);
 HEAP32[99687] = $call;
 $1 = HEAP32[99578]|0;
 $2 = HEAP32[99579]|0;
 $3 = HEAP32[99686]|0;
 $cmp146 = ($3|0)>(0);
 if (!($cmp146)) {
  STACKTOP = sp;return;
 }
 $cmp439 = ($1|0)>($2|0);
 $i$047 = 0;
 L10: while(1) {
  $arrayidx = (($namelist) + ($i$047<<2)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  HEAP32[99685] = $4;
  _memset((375136|0),-1,812)|0;
  HEAP32[99684] = -1;
  if ($cmp439) {
   label = 16;
  } else {
   $5 = $4;
   $7 = $5;$l$040 = $1;
   while(1) {
    $6 = HEAP32[99849]|0;
    $arraydecay = (($6) + (($l$040*28)|0)|0);
    $call7 = (_strncasecmp($arraydecay,$7,4)|0);
    $tobool8 = ($call7|0)==(0);
    if ($tobool8) {
     $arrayidx12 = (((($6) + (($l$040*28)|0)|0)) + 4|0);
     $8 = HEAP8[$arrayidx12>>0]|0;
     $conv = $8 << 24 >> 24;
     $sub13 = (($conv) + -65)|0;
     $arrayidx16 = (((($6) + (($l$040*28)|0)|0)) + 5|0);
     $9 = HEAP8[$arrayidx16>>0]|0;
     $conv17 = $9 << 24 >> 24;
     $sub18 = (($conv17) + -48)|0;
     $10 = HEAP32[99017]|0;
     $tobool19 = ($10|0)==(0);
     if ($tobool19) {
      $patched$0 = $l$040;
     } else {
      $call24 = (_W_GetNumForName($arraydecay)|0);
      $patched$0 = $call24;
     }
     _R_InstallSpriteLump($patched$0,$sub13,$sub18,0);
     $11 = HEAP32[99849]|0;
     $arrayidx28 = (((($11) + (($l$040*28)|0)|0)) + 6|0);
     $12 = HEAP8[$arrayidx28>>0]|0;
     $tobool29 = ($12<<24>>24)==(0);
     if (!($tobool29)) {
      $arrayidx38 = (((($11) + (($l$040*28)|0)|0)) + 7|0);
      $conv34 = $12 << 24 >> 24;
      $sub35 = (($conv34) + -65)|0;
      $13 = HEAP8[$arrayidx38>>0]|0;
      $conv39 = $13 << 24 >> 24;
      $sub40 = (($conv39) + -48)|0;
      _R_InstallSpriteLump($l$040,$sub35,$sub40,1);
     }
    }
    $cmp4 = ($l$040|0)<($2|0);
    if (!($cmp4)) {
     break;
    }
    $inc = (($l$040) + 1)|0;
    $$pre = HEAP32[99685]|0;
    $7 = $$pre;$l$040 = $inc;
   }
   $$pre50 = HEAP32[99684]|0;
   $cmp43 = ($$pre50|0)==(-1);
   if ($cmp43) {
    label = 16;
   } else {
    $inc48 = (($$pre50) + 1)|0;
    HEAP32[99684] = $inc48;
    $cmp5043 = ($$pre50|0)>(-1);
    L26: do {
     if ($cmp5043) {
      $frame$044 = 0;
      while(1) {
       $rotate = (375136 + (($frame$044*28)|0)|0);
       $15 = HEAP32[$rotate>>2]|0;
       switch ($15|0) {
       case -1:  {
        label = 20;
        break L10;
        break;
       }
       case 1:  {
        $add66 = (($frame$044) + 65)|0;
        $arrayidx61 = (((375136 + (($frame$044*28)|0)|0)) + 4|0);
        $17 = HEAP16[$arrayidx61>>1]|0;
        $cmp63 = ($17<<16>>16)==(-1);
        if ($cmp63) {
         label = 22;
         break L10;
        }
        $arrayidx61$1 = (((375136 + (($frame$044*28)|0)|0)) + 6|0);
        $19 = HEAP16[$arrayidx61$1>>1]|0;
        $cmp63$1 = ($19<<16>>16)==(-1);
        if ($cmp63$1) {
         label = 28;
         break L10;
        }
        $arrayidx61$2 = (((375136 + (($frame$044*28)|0)|0)) + 8|0);
        $27 = HEAP16[$arrayidx61$2>>1]|0;
        $cmp63$2 = ($27<<16>>16)==(-1);
        if ($cmp63$2) {
         label = 30;
         break L10;
        }
        $arrayidx61$3 = (((375136 + (($frame$044*28)|0)|0)) + 10|0);
        $29 = HEAP16[$arrayidx61$3>>1]|0;
        $cmp63$3 = ($29<<16>>16)==(-1);
        if ($cmp63$3) {
         label = 32;
         break L10;
        }
        $arrayidx61$4 = (((375136 + (($frame$044*28)|0)|0)) + 12|0);
        $31 = HEAP16[$arrayidx61$4>>1]|0;
        $cmp63$4 = ($31<<16>>16)==(-1);
        if ($cmp63$4) {
         label = 34;
         break L10;
        }
        $arrayidx61$5 = (((375136 + (($frame$044*28)|0)|0)) + 14|0);
        $33 = HEAP16[$arrayidx61$5>>1]|0;
        $cmp63$5 = ($33<<16>>16)==(-1);
        if ($cmp63$5) {
         label = 36;
         break L10;
        }
        $arrayidx61$6 = (((375136 + (($frame$044*28)|0)|0)) + 16|0);
        $35 = HEAP16[$arrayidx61$6>>1]|0;
        $cmp63$6 = ($35<<16>>16)==(-1);
        if ($cmp63$6) {
         label = 38;
         break L10;
        }
        $arrayidx61$7 = (((375136 + (($frame$044*28)|0)|0)) + 18|0);
        $37 = HEAP16[$arrayidx61$7>>1]|0;
        $cmp63$7 = ($37<<16>>16)==(-1);
        if ($cmp63$7) {
         label = 40;
         break L10;
        }
        break;
       }
       default: {
       }
       }
       $inc72 = (($frame$044) + 1)|0;
       $20 = HEAP32[99684]|0;
       $cmp50 = ($inc72|0)<($20|0);
       if ($cmp50) {
        $frame$044 = $inc72;
       } else {
        $$lcssa = $20;
        break L26;
       }
      }
     } else {
      $$lcssa = $inc48;
     }
    } while(0);
    $21 = HEAP32[99687]|0;
    $numframes75 = (($21) + ($i$047<<3)|0);
    HEAP32[$numframes75>>2] = $$lcssa;
    $22 = HEAP32[99684]|0;
    $mul76 = ($22*28)|0;
    $call77 = (_Z_Malloc($mul76,1,0)|0);
    $23 = HEAP32[99687]|0;
    $spriteframes = (((($23) + ($i$047<<3)|0)) + 4|0);
    HEAP32[$spriteframes>>2] = $call77;
    $24 = HEAP32[99684]|0;
    $mul81 = ($24*28)|0;
    _memcpy(($call77|0),(375136|0),($mul81|0))|0;
   }
  }
  if ((label|0) == 16) {
   label = 0;
   $14 = HEAP32[99687]|0;
   $numframes = (($14) + ($i$047<<3)|0);
   HEAP32[$numframes>>2] = 0;
  }
  $inc83 = (($i$047) + 1)|0;
  $25 = HEAP32[99686]|0;
  $cmp1 = ($inc83|0)<($25|0);
  if ($cmp1) {
   $i$047 = $inc83;
  } else {
   label = 27;
   break;
  }
 }
 switch (label|0) {
  case 20: {
   $16 = HEAP32[99685]|0;
   $add54 = (($frame$044) + 65)|0;
   HEAP32[$vararg_buffer>>2] = $16;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $add54;
   _I_Error(154876,$vararg_buffer);
   // unreachable;
   break;
  }
  case 22: {
   $18 = HEAP32[99685]|0;
   HEAP32[$vararg_buffer2>>2] = $18;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $add66;
   _I_Error(154924,$vararg_buffer2);
   // unreachable;
   break;
  }
  case 27: {
   STACKTOP = sp;return;
   break;
  }
  case 28: {
   $26 = HEAP32[99685]|0;
   HEAP32[$vararg_buffer6>>2] = $26;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $add66;
   _I_Error(154924,$vararg_buffer6);
   // unreachable;
   break;
  }
  case 30: {
   $28 = HEAP32[99685]|0;
   HEAP32[$vararg_buffer10>>2] = $28;
   $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
   HEAP32[$vararg_ptr13>>2] = $add66;
   _I_Error(154924,$vararg_buffer10);
   // unreachable;
   break;
  }
  case 32: {
   $30 = HEAP32[99685]|0;
   HEAP32[$vararg_buffer14>>2] = $30;
   $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
   HEAP32[$vararg_ptr17>>2] = $add66;
   _I_Error(154924,$vararg_buffer14);
   // unreachable;
   break;
  }
  case 34: {
   $32 = HEAP32[99685]|0;
   HEAP32[$vararg_buffer18>>2] = $32;
   $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
   HEAP32[$vararg_ptr21>>2] = $add66;
   _I_Error(154924,$vararg_buffer18);
   // unreachable;
   break;
  }
  case 36: {
   $34 = HEAP32[99685]|0;
   HEAP32[$vararg_buffer22>>2] = $34;
   $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
   HEAP32[$vararg_ptr25>>2] = $add66;
   _I_Error(154924,$vararg_buffer22);
   // unreachable;
   break;
  }
  case 38: {
   $36 = HEAP32[99685]|0;
   HEAP32[$vararg_buffer26>>2] = $36;
   $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
   HEAP32[$vararg_ptr29>>2] = $add66;
   _I_Error(154924,$vararg_buffer26);
   // unreachable;
   break;
  }
  case 40: {
   $38 = HEAP32[99685]|0;
   HEAP32[$vararg_buffer30>>2] = $38;
   $vararg_ptr33 = ((($vararg_buffer30)) + 4|0);
   HEAP32[$vararg_ptr33>>2] = $add66;
   _I_Error(154924,$vararg_buffer30);
   // unreachable;
   break;
  }
 }
}
function _R_InitSprites($namelist) {
 $namelist = $namelist|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memset((375952|0),-1,640)|0;
 _R_InitSpriteDefs($namelist);
 return;
}
function _R_ClearSprites() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99688] = 376592;
 return;
}
function _R_DrawMaskedColumn($column) {
 $column = $column|0;
 var $$pre = 0, $$pre16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr34 = 0;
 var $add$ptr35 = 0, $add23 = 0, $add6 = 0, $arrayidx = 0, $arrayidx16 = 0, $cmp = 0, $cmp11 = 0, $cmp13 = 0, $cmp18 = 0, $cmp25 = 0, $column$addr$014 = 0, $conv = 0, $conv10 = 0, $conv17 = 0, $conv33$pre$phiZ2D = 0, $conv4 = 0, $length = 0, $mul = 0, $mul5 = 0, $shl = 0;
 var $shr = 0, $shr9 = 0, $sub = 0, $sub15 = 0, $sub30 = 0, $sub8 = 0, $topdelta15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99593]|0;
 $1 = HEAP8[$column>>0]|0;
 $cmp13 = ($1<<24>>24)==(-1);
 if ($cmp13) {
  HEAP32[99593] = $0;
  return;
 }
 $2 = $1;$column$addr$014 = $column;$topdelta15 = $column;
 while(1) {
  $conv = $2&255;
  $3 = HEAP32[99704]|0;
  $4 = HEAP32[99705]|0;
  $mul = Math_imul($4, $conv)|0;
  $add = (($mul) + ($3))|0;
  $length = ((($column$addr$014)) + 1|0);
  $5 = HEAP8[$length>>0]|0;
  $conv4 = $5&255;
  $mul5 = Math_imul($4, $conv4)|0;
  $sub = (($add) + 65535)|0;
  $shr = $sub >> 16;
  HEAP32[99590] = $shr;
  $add6 = (($add) + -1)|0;
  $sub8 = (($add6) + ($mul5))|0;
  $shr9 = $sub8 >> 16;
  HEAP32[99589] = $shr9;
  $6 = HEAP32[99706]|0;
  $7 = HEAP32[99591]|0;
  $arrayidx = (($6) + ($7<<1)|0);
  $8 = HEAP16[$arrayidx>>1]|0;
  $conv10 = $8 << 16 >> 16;
  $cmp11 = ($shr9|0)<($conv10|0);
  if ($cmp11) {
   $12 = $shr9;
  } else {
   $sub15 = (($conv10) + -1)|0;
   HEAP32[99589] = $sub15;
   $12 = $sub15;
  }
  $9 = HEAP32[99707]|0;
  $arrayidx16 = (($9) + ($7<<1)|0);
  $10 = HEAP16[$arrayidx16>>1]|0;
  $conv17 = $10 << 16 >> 16;
  $cmp18 = ($shr|0)>($conv17|0);
  if ($cmp18) {
   $11 = $shr;
  } else {
   $add23 = (($conv17) + 1)|0;
   HEAP32[99590] = $add23;
   $11 = $add23;
  }
  $cmp25 = ($11|0)>($12|0);
  if ($cmp25) {
   $conv33$pre$phiZ2D = $conv4;
  } else {
   $shl = $conv << 16;
   $sub30 = (($0) - ($shl))|0;
   $add$ptr = ((($topdelta15)) + 3|0);
   HEAP32[99595] = $add$ptr;
   HEAP32[99593] = $sub30;
   $13 = HEAP32[99627]|0;
   FUNCTION_TABLE_v[$13 & 255]();
   $$pre = HEAP8[$length>>0]|0;
   $$pre16 = $$pre&255;
   $conv33$pre$phiZ2D = $$pre16;
  }
  $add$ptr34 = (($topdelta15) + ($conv33$pre$phiZ2D)|0);
  $add$ptr35 = ((($add$ptr34)) + 4|0);
  $14 = HEAP8[$add$ptr35>>0]|0;
  $cmp = ($14<<24>>24)==(-1);
  if ($cmp) {
   break;
  } else {
   $2 = $14;$column$addr$014 = $add$ptr35;$topdelta15 = $add$ptr35;
  }
 }
 HEAP32[99593] = $0;
 return;
}
function _R_DrawVisSprite($vis,$x1,$x2) {
 $vis = $vis|0;
 $x1 = $x1|0;
 $x2 = $x2|0;
 var $$pre$i = 0, $$pre16$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr19 = 0, $add$ptr34$i = 0, $add$ptr35$i = 0, $add$ptr6 = 0, $add21 = 0, $add23$i = 0, $add6$i = 0, $and = 0, $and5 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx16$i = 0, $call = 0, $call10 = 0, $cmp = 0, $cmp$i = 0;
 var $cmp11$i = 0, $cmp13$i = 0, $cmp14 = 0, $cmp15 = 0, $cmp18$i = 0, $cmp20 = 0, $cmp25$i = 0, $colormap = 0, $columnofs = 0, $conv = 0, $conv$i = 0, $conv10$i = 0, $conv17$i = 0, $conv33$pre$phi$iZ2D = 0, $conv4$i = 0, $frac$021 = 0, $inc = 0, $ispos = 0, $mobjflags = 0, $mul$i = 0;
 var $mul5$i = 0, $neg = 0, $patch1 = 0, $scale = 0, $shl$i = 0, $shr$i = 0, $shr13 = 0, $shr9 = 0, $shr9$i = 0, $spec$store$select = 0, $startfrac = 0, $sub = 0, $sub$i = 0, $sub15$i = 0, $sub30$i = 0, $sub8$i = 0, $texturemid = 0, $tobool = 0, $tobool2 = 0, $topdelta15$i = 0;
 var $vararg_buffer = 0, $x111 = 0, $x212 = 0, $xiscale = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $patch1 = ((($vis)) + 48|0);
 $0 = HEAP32[$patch1>>2]|0;
 $1 = HEAP32[99578]|0;
 $add = (($1) + ($0))|0;
 $call = (_W_CacheLumpNum($add,8)|0);
 $colormap = ((($vis)) + 52|0);
 $2 = HEAP32[$colormap>>2]|0;
 HEAP32[99594] = $2;
 $tobool = ($2|0)==(0|0);
 if ($tobool) {
  $3 = HEAP32[99628]|0;
  HEAP32[99627] = $3;
 } else {
  $mobjflags = ((($vis)) + 56|0);
  $4 = HEAP32[$mobjflags>>2]|0;
  $and = $4 & 201326592;
  $tobool2 = ($and|0)==(0);
  if (!($tobool2)) {
   $5 = HEAP32[99629]|0;
   HEAP32[99627] = $5;
   $6 = HEAP32[99599]|0;
   $add$ptr = ((($6)) + -256|0);
   $and5 = $4 >>> 18;
   $7 = $and5 & 768;
   $add$ptr6 = (($add$ptr) + ($7)|0);
   HEAP32[99598] = $add$ptr6;
  }
 }
 $xiscale = ((($vis)) + 40|0);
 $8 = HEAP32[$xiscale>>2]|0;
 $ispos = ($8|0)>(-1);
 $neg = (0 - ($8))|0;
 $9 = $ispos ? $8 : $neg;
 $10 = HEAP32[99618]|0;
 $shr9 = $9 >> $10;
 HEAP32[99592] = $shr9;
 $texturemid = ((($vis)) + 44|0);
 $11 = HEAP32[$texturemid>>2]|0;
 HEAP32[99593] = $11;
 $startfrac = ((($vis)) + 32|0);
 $12 = HEAP32[$startfrac>>2]|0;
 $scale = ((($vis)) + 36|0);
 $13 = HEAP32[$scale>>2]|0;
 HEAP32[99705] = $13;
 $14 = HEAP32[99625]|0;
 $call10 = (_FixedMul($11,$13)|0);
 $sub = (($14) - ($call10))|0;
 HEAP32[99704] = $sub;
 $x111 = ((($vis)) + 8|0);
 $15 = HEAP32[$x111>>2]|0;
 HEAP32[99591] = $15;
 $x212 = ((($vis)) + 12|0);
 $16 = HEAP32[$x212>>2]|0;
 $cmp20 = ($15|0)>($16|0);
 if ($cmp20) {
  $37 = HEAP32[99626]|0;
  HEAP32[99627] = $37;
  STACKTOP = sp;return;
 }
 $columnofs = ((($call)) + 8|0);
 $frac$021 = $12;
 while(1) {
  $shr13 = $frac$021 >> 16;
  $cmp14 = ($frac$021|0)<(0);
  if ($cmp14) {
   label = 9;
   break;
  }
  $17 = HEAPU8[$call>>0]|(HEAPU8[$call+1>>0]<<8);
  $conv = $17 << 16 >> 16;
  $cmp15 = ($shr13|0)<($conv|0);
  if (!($cmp15)) {
   label = 9;
   break;
  }
  $arrayidx = (($columnofs) + ($shr13<<2)|0);
  $18 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
  $add$ptr19 = (($call) + ($18)|0);
  $19 = HEAP32[99593]|0;
  $20 = HEAP8[$add$ptr19>>0]|0;
  $cmp13$i = ($20<<24>>24)==(-1);
  if (!($cmp13$i)) {
   $21 = $20;$topdelta15$i = $add$ptr19;
   while(1) {
    $conv$i = $21&255;
    $22 = HEAP32[99704]|0;
    $23 = HEAP32[99705]|0;
    $mul$i = Math_imul($23, $conv$i)|0;
    $add$i = (($mul$i) + ($22))|0;
    $24 = ((($topdelta15$i)) + 1|0);
    $25 = HEAP8[$24>>0]|0;
    $conv4$i = $25&255;
    $mul5$i = Math_imul($23, $conv4$i)|0;
    $sub$i = (($add$i) + 65535)|0;
    $shr$i = $sub$i >> 16;
    HEAP32[99590] = $shr$i;
    $add6$i = (($add$i) + -1)|0;
    $sub8$i = (($add6$i) + ($mul5$i))|0;
    $shr9$i = $sub8$i >> 16;
    HEAP32[99589] = $shr9$i;
    $26 = HEAP32[99706]|0;
    $27 = HEAP32[99591]|0;
    $arrayidx$i = (($26) + ($27<<1)|0);
    $28 = HEAP16[$arrayidx$i>>1]|0;
    $conv10$i = $28 << 16 >> 16;
    $cmp11$i = ($shr9$i|0)<($conv10$i|0);
    $sub15$i = (($conv10$i) + -1)|0;
    $spec$store$select = $cmp11$i ? $shr9$i : $sub15$i;
    HEAP32[99589] = $spec$store$select;
    $29 = HEAP32[99707]|0;
    $arrayidx16$i = (($29) + ($27<<1)|0);
    $30 = HEAP16[$arrayidx16$i>>1]|0;
    $conv17$i = $30 << 16 >> 16;
    $cmp18$i = ($shr$i|0)>($conv17$i|0);
    $add23$i = (($conv17$i) + 1)|0;
    if ($cmp18$i) {
     $31 = $shr$i;
    } else {
     HEAP32[99590] = $add23$i;
     $31 = $add23$i;
    }
    $cmp25$i = ($31|0)>($spec$store$select|0);
    if ($cmp25$i) {
     $conv33$pre$phi$iZ2D = $conv4$i;
    } else {
     $shl$i = $conv$i << 16;
     $sub30$i = (($19) - ($shl$i))|0;
     $add$ptr$i = ((($topdelta15$i)) + 3|0);
     HEAP32[99595] = $add$ptr$i;
     HEAP32[99593] = $sub30$i;
     $32 = HEAP32[99627]|0;
     FUNCTION_TABLE_v[$32 & 255]();
     $$pre$i = HEAP8[$24>>0]|0;
     $$pre16$i = $$pre$i&255;
     $conv33$pre$phi$iZ2D = $$pre16$i;
    }
    $add$ptr34$i = (($topdelta15$i) + ($conv33$pre$phi$iZ2D)|0);
    $add$ptr35$i = ((($add$ptr34$i)) + 4|0);
    $33 = HEAP8[$add$ptr35$i>>0]|0;
    $cmp$i = ($33<<24>>24)==(-1);
    if ($cmp$i) {
     break;
    } else {
     $21 = $33;$topdelta15$i = $add$ptr35$i;
    }
   }
  }
  HEAP32[99593] = $19;
  $34 = HEAP32[99591]|0;
  $inc = (($34) + 1)|0;
  HEAP32[99591] = $inc;
  $35 = HEAP32[$xiscale>>2]|0;
  $add21 = (($35) + ($frac$021))|0;
  $36 = HEAP32[$x212>>2]|0;
  $cmp = ($34|0)<($36|0);
  if ($cmp) {
   $frac$021 = $add21;
  } else {
   label = 18;
   break;
  }
 }
 if ((label|0) == 9) {
  _I_Error(154979,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 18) {
  $37 = HEAP32[99626]|0;
  HEAP32[99627] = $37;
  STACKTOP = sp;return;
 }
}
function _R_ProjectSprite($thing) {
 $thing = $thing|0;
 var $$sink = 0, $$sink$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add102 = 0, $add32 = 0, $add48 = 0;
 var $add55 = 0, $add57 = 0, $add70 = 0, $add91 = 0, $and = 0, $and105 = 0, $and114 = 0, $angle = 0, $arrayidx125 = 0, $arrayidx34 = 0, $arrayidx36 = 0, $arrayidx39 = 0, $arrayidx42 = 0, $arrayidx45 = 0, $arrayidx54 = 0, $arrayidx69 = 0, $arrayidx87 = 0, $call = 0, $call2 = 0, $call30 = 0;
 var $call47 = 0, $call5 = 0, $call56 = 0, $call6 = 0, $call8 = 0, $call84 = 0, $cmp = 0, $cmp$i = 0, $cmp11 = 0, $cmp14 = 0, $cmp19 = 0, $cmp50 = 0, $cmp60 = 0, $cmp76 = 0, $cmp95 = 0, $colormap = 0, $colormap111 = 0, $colormap117 = 0, $colormap126 = 0, $cond = 0;
 var $cond82 = 0, $cond82$v = 0, $conv = 0, $conv40 = 0, $flags = 0, $frame = 0, $gx = 0, $gy = 0, $gz = 0, $gzt = 0, $incdec$ptr$i = 0, $ispos = 0, $lump$0 = 0, $mobjflags = 0, $mul = 0, $neg = 0, $numframes = 0, $patch = 0, $retval$0$i = 0, $rotate = 0;
 var $scale = 0, $shl = 0, $shl65 = 0, $shr = 0, $shr120 = 0, $shr49 = 0, $shr58 = 0, $spec$store$select = 0, $sprite = 0, $spriteframes = 0, $sub = 0, $sub1 = 0, $sub100 = 0, $sub119 = 0, $sub31 = 0, $sub4 = 0, $sub46 = 0, $sub72 = 0, $sub88 = 0, $sub89 = 0;
 var $texturemid = 0, $tobool = 0, $tobool106 = 0, $tobool109 = 0, $tobool115 = 0, $tobool85 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $x = 0, $x175 = 0, $x283 = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $x = ((($thing)) + 12|0);
 $0 = HEAP32[$x>>2]|0;
 $1 = HEAP32[99614]|0;
 $sub = (($0) - ($1))|0;
 $y = ((($thing)) + 16|0);
 $2 = HEAP32[$y>>2]|0;
 $3 = HEAP32[99615]|0;
 $sub1 = (($2) - ($3))|0;
 $4 = HEAP32[99637]|0;
 $call = (_FixedMul($sub,$4)|0);
 $5 = HEAP32[99636]|0;
 $call2 = (_FixedMul($sub1,$5)|0);
 $sub4 = (($call2) + ($call))|0;
 $cmp = ($sub4|0)<(262144);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[99617]|0;
 $call5 = (_FixedDiv($6,$sub4)|0);
 $7 = HEAP32[99636]|0;
 $call6 = (_FixedMul($sub,$7)|0);
 $8 = HEAP32[99637]|0;
 $call8 = (_FixedMul($sub1,$8)|0);
 $add91 = (($call6) - ($call8))|0;
 $ispos = ($add91|0)>(-1);
 $neg = (0 - ($add91))|0;
 $9 = $ispos ? $add91 : $neg;
 $shl = $sub4 << 2;
 $cmp11 = ($9|0)>($shl|0);
 if ($cmp11) {
  STACKTOP = sp;return;
 }
 $sprite = ((($thing)) + 36|0);
 $10 = HEAP32[$sprite>>2]|0;
 $11 = HEAP32[99686]|0;
 $cmp14 = ($10>>>0)<($11>>>0);
 if (!($cmp14)) {
  HEAP32[$vararg_buffer>>2] = $10;
  _I_Error(155016,$vararg_buffer);
  // unreachable;
 }
 $12 = HEAP32[99687]|0;
 $frame = ((($thing)) + 40|0);
 $13 = HEAP32[$frame>>2]|0;
 $and = $13 & 32767;
 $numframes = (($12) + ($10<<3)|0);
 $14 = HEAP32[$numframes>>2]|0;
 $cmp19 = ($and|0)<($14|0);
 if (!($cmp19)) {
  HEAP32[$vararg_buffer1>>2] = $10;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $13;
  _I_Error(155059,$vararg_buffer1);
  // unreachable;
 }
 $spriteframes = (((($12) + ($10<<3)|0)) + 4|0);
 $15 = HEAP32[$spriteframes>>2]|0;
 $rotate = (($15) + (($and*28)|0)|0);
 $16 = HEAP32[$rotate>>2]|0;
 $tobool = ($16|0)==(0);
 if ($tobool) {
  $arrayidx39 = (((($15) + (($and*28)|0)|0)) + 4|0);
  $21 = HEAP16[$arrayidx39>>1]|0;
  $conv40 = $21 << 16 >> 16;
  $arrayidx42 = (((($15) + (($and*28)|0)|0)) + 20|0);
  $$sink$in = $arrayidx42;$lump$0 = $conv40;
 } else {
  $17 = HEAP32[$x>>2]|0;
  $18 = HEAP32[$y>>2]|0;
  $call30 = (_R_PointToAngle($17,$18)|0);
  $angle = ((($thing)) + 32|0);
  $19 = HEAP32[$angle>>2]|0;
  $sub31 = (($call30) + -1879048192)|0;
  $add32 = (($sub31) - ($19))|0;
  $shr = $add32 >>> 29;
  $arrayidx34 = ((((($15) + (($and*28)|0)|0)) + 4|0) + ($shr<<1)|0);
  $20 = HEAP16[$arrayidx34>>1]|0;
  $conv = $20 << 16 >> 16;
  $arrayidx36 = ((((($15) + (($and*28)|0)|0)) + 20|0) + ($shr)|0);
  $$sink$in = $arrayidx36;$lump$0 = $conv;
 }
 $$sink = HEAP8[$$sink$in>>0]|0;
 $22 = HEAP32[99582]|0;
 $arrayidx45 = (($22) + ($lump$0<<2)|0);
 $23 = HEAP32[$arrayidx45>>2]|0;
 $sub46 = (($add91) - ($23))|0;
 $24 = HEAP32[99619]|0;
 $call47 = (_FixedMul($sub46,$call5)|0);
 $add48 = (($call47) + ($24))|0;
 $shr49 = $add48 >> 16;
 $25 = HEAP32[99612]|0;
 $cmp50 = ($shr49|0)>($25|0);
 if ($cmp50) {
  STACKTOP = sp;return;
 }
 $26 = HEAP32[99581]|0;
 $arrayidx54 = (($26) + ($lump$0<<2)|0);
 $27 = HEAP32[$arrayidx54>>2]|0;
 $add55 = (($27) + ($sub46))|0;
 $28 = HEAP32[99619]|0;
 $call56 = (_FixedMul($add55,$call5)|0);
 $add57 = (($call56) + ($28))|0;
 $shr58 = $add57 >> 16;
 $cmp60 = ($add57|0)<(65536);
 if ($cmp60) {
  STACKTOP = sp;return;
 }
 $29 = HEAP32[99688]|0;
 $cmp$i = ($29|0)==((384272)|0);
 if ($cmp$i) {
  $retval$0$i = 398756;
 } else {
  $incdec$ptr$i = ((($29)) + 60|0);
  HEAP32[99688] = $incdec$ptr$i;
  $retval$0$i = $29;
 }
 $flags = ((($thing)) + 104|0);
 $30 = HEAP32[$flags>>2]|0;
 $mobjflags = ((($retval$0$i)) + 56|0);
 HEAP32[$mobjflags>>2] = $30;
 $31 = HEAP32[99618]|0;
 $shl65 = $call5 << $31;
 $scale = ((($retval$0$i)) + 36|0);
 HEAP32[$scale>>2] = $shl65;
 $32 = HEAP32[$x>>2]|0;
 $gx = ((($retval$0$i)) + 16|0);
 HEAP32[$gx>>2] = $32;
 $33 = HEAP32[$y>>2]|0;
 $gy = ((($retval$0$i)) + 20|0);
 HEAP32[$gy>>2] = $33;
 $z = ((($thing)) + 20|0);
 $34 = HEAP32[$z>>2]|0;
 $gz = ((($retval$0$i)) + 24|0);
 HEAP32[$gz>>2] = $34;
 $35 = HEAP32[99583]|0;
 $arrayidx69 = (($35) + ($lump$0<<2)|0);
 $36 = HEAP32[$arrayidx69>>2]|0;
 $add70 = (($36) + ($34))|0;
 $gzt = ((($retval$0$i)) + 28|0);
 HEAP32[$gzt>>2] = $add70;
 $37 = HEAP32[99635]|0;
 $sub72 = (($add70) - ($37))|0;
 $texturemid = ((($retval$0$i)) + 44|0);
 HEAP32[$texturemid>>2] = $sub72;
 $38 = ($shr49|0)>(0);
 $cond = $38 ? $shr49 : 0;
 $x175 = ((($retval$0$i)) + 8|0);
 HEAP32[$x175>>2] = $cond;
 $39 = HEAP32[99612]|0;
 $cmp76 = ($shr58|0)>($39|0);
 $cond82$v = $cmp76 ? $39 : $shr58;
 $cond82 = (($cond82$v) + -1)|0;
 $x283 = ((($retval$0$i)) + 12|0);
 HEAP32[$x283>>2] = $cond82;
 $call84 = (_FixedDiv(65536,$call5)|0);
 $tobool85 = ($$sink<<24>>24)==(0);
 if ($tobool85) {
  $43 = 0;$45 = $call84;
 } else {
  $40 = HEAP32[99581]|0;
  $arrayidx87 = (($40) + ($lump$0<<2)|0);
  $41 = HEAP32[$arrayidx87>>2]|0;
  $sub88 = (($41) + -1)|0;
  $sub89 = (0 - ($call84))|0;
  $43 = $sub88;$45 = $sub89;
 }
 $42 = ((($retval$0$i)) + 32|0);
 HEAP32[$42>>2] = $43;
 $44 = ((($retval$0$i)) + 40|0);
 HEAP32[$44>>2] = $45;
 $46 = HEAP32[$x175>>2]|0;
 $cmp95 = ($46|0)>($shr49|0);
 if ($cmp95) {
  $sub100 = (($46) - ($shr49))|0;
  $mul = Math_imul($45, $sub100)|0;
  $add102 = (($43) + ($mul))|0;
  HEAP32[$42>>2] = $add102;
 }
 $patch = ((($retval$0$i)) + 48|0);
 HEAP32[$patch>>2] = $lump$0;
 $47 = HEAP32[$flags>>2]|0;
 $and105 = $47 & 262144;
 $tobool106 = ($and105|0)==(0);
 if (!($tobool106)) {
  $colormap = ((($retval$0$i)) + 52|0);
  HEAP32[$colormap>>2] = 0;
  STACKTOP = sp;return;
 }
 $48 = HEAP32[99639]|0;
 $tobool109 = ($48|0)==(0|0);
 if (!($tobool109)) {
  $colormap111 = ((($retval$0$i)) + 52|0);
  HEAP32[$colormap111>>2] = $48;
  STACKTOP = sp;return;
 }
 $49 = HEAP32[$frame>>2]|0;
 $and114 = $49 & 32768;
 $tobool115 = ($and114|0)==(0);
 if ($tobool115) {
  $51 = HEAP32[99618]|0;
  $sub119 = (12 - ($51))|0;
  $shr120 = $call5 >> $sub119;
  $52 = ($shr120|0)<(47);
  $spec$store$select = $52 ? $shr120 : 47;
  $53 = HEAP32[99708]|0;
  $arrayidx125 = (($53) + ($spec$store$select<<2)|0);
  $54 = HEAP32[$arrayidx125>>2]|0;
  $colormap126 = ((($retval$0$i)) + 52|0);
  HEAP32[$colormap126>>2] = $54;
  STACKTOP = sp;return;
 } else {
  $50 = HEAP32[99584]|0;
  $colormap117 = ((($retval$0$i)) + 52|0);
  HEAP32[$colormap117>>2] = $50;
  STACKTOP = sp;return;
 }
}
function _R_AddSprites($sec) {
 $sec = $sec|0;
 var $$sink = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0, $arraydecay = 0, $cmp = 0, $cmp2 = 0, $cmp5 = 0, $conv = 0, $lightlevel = 0, $shr = 0, $snext = 0, $thing$0 = 0, $thing$010 = 0, $thing$012 = 0, $thinglist = 0, $tobool = 0, $tobool11 = 0;
 var $validcount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $validcount = ((($sec)) + 68|0);
 $0 = HEAP32[$validcount>>2]|0;
 $1 = HEAP32[32309]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  return;
 }
 HEAP32[$validcount>>2] = $1;
 $lightlevel = ((($sec)) + 12|0);
 $2 = HEAP16[$lightlevel>>1]|0;
 $conv = $2 << 16 >> 16;
 $shr = $conv >> 4;
 $3 = HEAP32[99634]|0;
 $add = (($shr) + ($3))|0;
 $cmp2 = ($add|0)<(0);
 if ($cmp2) {
  $$sink = 238560;
 } else {
  $cmp5 = ($add|0)>(15);
  if ($cmp5) {
   $$sink = (241440);
  } else {
   $arraydecay = (238560 + (($add*192)|0)|0);
   $$sink = $arraydecay;
  }
 }
 HEAP32[99708] = $$sink;
 $thinglist = ((($sec)) + 72|0);
 $thing$010 = HEAP32[$thinglist>>2]|0;
 $tobool11 = ($thing$010|0)==(0|0);
 if ($tobool11) {
  return;
 }
 $thing$012 = $thing$010;
 while(1) {
  _R_ProjectSprite($thing$012);
  $snext = ((($thing$012)) + 24|0);
  $thing$0 = HEAP32[$snext>>2]|0;
  $tobool = ($thing$0|0)==(0|0);
  if ($tobool) {
   break;
  } else {
   $thing$012 = $thing$0;
  }
 }
 return;
}
function _R_DrawPSprite($psp) {
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $add29 = 0, $add31 = 0, $add67 = 0, $and = 0, $and74 = 0, $and84 = 0, $arrayidx18 = 0, $arrayidx20 = 0, $arrayidx22 = 0, $arrayidx28 = 0, $arrayidx38 = 0, $arrayidx54 = 0, $arrayidx69 = 0, $arrayidx89 = 0, $avis = 0, $call = 0, $call30 = 0, $cmp = 0;
 var $cmp24 = 0, $cmp34 = 0, $cmp44 = 0, $cmp6 = 0, $cmp60 = 0, $cmp70 = 0, $colormap = 0, $colormap80 = 0, $colormap87 = 0, $colormap90 = 0, $cond = 0, $cond50 = 0, $cond50$v = 0, $conv = 0, $frame = 0, $frame83 = 0, $mobjflags = 0, $mul = 0, $numframes = 0, $or$cond = 0;
 var $patch = 0, $scale = 0, $shl = 0, $shr = 0, $shr32 = 0, $spriteframes = 0, $storemerge = 0, $sub = 0, $sub23 = 0, $sub3953 = 0, $sub40 = 0, $sub53 = 0, $sub55 = 0, $sub65 = 0, $sx = 0, $sy = 0, $texturemid = 0, $tobool = 0, $tobool75 = 0, $tobool78 = 0;
 var $tobool85 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $x143 = 0, $x251 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $avis = sp + 16|0;
 $0 = HEAP32[$psp>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[99686]|0;
 $cmp = ($1>>>0)<($2>>>0);
 if (!($cmp)) {
  HEAP32[$vararg_buffer>>2] = $1;
  _I_Error(155016,$vararg_buffer);
  // unreachable;
 }
 $3 = HEAP32[99687]|0;
 $frame = ((($0)) + 4|0);
 $4 = HEAP32[$frame>>2]|0;
 $and = $4 & 32767;
 $numframes = (($3) + ($1<<3)|0);
 $5 = HEAP32[$numframes>>2]|0;
 $cmp6 = ($and|0)<($5|0);
 if (!($cmp6)) {
  HEAP32[$vararg_buffer1>>2] = $1;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $4;
  _I_Error(155059,$vararg_buffer1);
  // unreachable;
 }
 $spriteframes = (((($3) + ($1<<3)|0)) + 4|0);
 $6 = HEAP32[$spriteframes>>2]|0;
 $arrayidx18 = (((($6) + (($and*28)|0)|0)) + 4|0);
 $7 = HEAP16[$arrayidx18>>1]|0;
 $conv = $7 << 16 >> 16;
 $arrayidx20 = (((($6) + (($and*28)|0)|0)) + 20|0);
 $8 = HEAP8[$arrayidx20>>0]|0;
 $sx = ((($psp)) + 8|0);
 $9 = HEAP32[$sx>>2]|0;
 $sub = (($9) + -10485760)|0;
 $10 = HEAP32[99582]|0;
 $arrayidx22 = (($10) + ($conv<<2)|0);
 $11 = HEAP32[$arrayidx22>>2]|0;
 $sub23 = (($sub) - ($11))|0;
 $12 = HEAP32[99619]|0;
 $13 = HEAP32[99709]|0;
 $call = (_FixedMul($sub23,$13)|0);
 $add = (($call) + ($12))|0;
 $shr = $add >> 16;
 $14 = HEAP32[99612]|0;
 $cmp24 = ($shr|0)>($14|0);
 if ($cmp24) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[99581]|0;
 $arrayidx28 = (($15) + ($conv<<2)|0);
 $16 = HEAP32[$arrayidx28>>2]|0;
 $add29 = (($16) + ($sub23))|0;
 $17 = HEAP32[99619]|0;
 $18 = HEAP32[99709]|0;
 $call30 = (_FixedMul($add29,$18)|0);
 $add31 = (($call30) + ($17))|0;
 $shr32 = $add31 >> 16;
 $cmp34 = ($add31|0)<(65536);
 if ($cmp34) {
  STACKTOP = sp;return;
 }
 $mobjflags = ((($avis)) + 56|0);
 HEAP32[$mobjflags>>2] = 0;
 $sy = ((($psp)) + 12|0);
 $19 = HEAP32[$sy>>2]|0;
 $20 = HEAP32[99583]|0;
 $arrayidx38 = (($20) + ($conv<<2)|0);
 $21 = HEAP32[$arrayidx38>>2]|0;
 $sub3953 = (6586368 - ($19))|0;
 $sub40 = (($sub3953) + ($21))|0;
 $texturemid = ((($avis)) + 44|0);
 HEAP32[$texturemid>>2] = $sub40;
 $22 = ($shr|0)>(0);
 $cond = $22 ? $shr : 0;
 $x143 = ((($avis)) + 8|0);
 HEAP32[$x143>>2] = $cond;
 $23 = HEAP32[99612]|0;
 $cmp44 = ($shr32|0)>($23|0);
 $cond50$v = $cmp44 ? $23 : $shr32;
 $cond50 = (($cond50$v) + -1)|0;
 $x251 = ((($avis)) + 12|0);
 HEAP32[$x251>>2] = $cond50;
 $24 = HEAP32[99709]|0;
 $25 = HEAP32[99618]|0;
 $shl = $24 << $25;
 $scale = ((($avis)) + 36|0);
 HEAP32[$scale>>2] = $shl;
 $tobool = ($8<<24>>24)==(0);
 $26 = HEAP32[99710]|0;
 if ($tobool) {
  $30 = $26;$32 = 0;
 } else {
  $sub53 = (0 - ($26))|0;
  $27 = HEAP32[99581]|0;
  $arrayidx54 = (($27) + ($conv<<2)|0);
  $28 = HEAP32[$arrayidx54>>2]|0;
  $sub55 = (($28) + -1)|0;
  $30 = $sub53;$32 = $sub55;
 }
 $29 = ((($avis)) + 40|0);
 HEAP32[$29>>2] = $30;
 $31 = ((($avis)) + 32|0);
 $cmp60 = ($add|0)<(0);
 if ($cmp60) {
  $sub65 = (($cond) - ($shr))|0;
  $mul = Math_imul($30, $sub65)|0;
  $add67 = (($32) + ($mul))|0;
  $storemerge = $add67;
 } else {
  $storemerge = $32;
 }
 HEAP32[$31>>2] = $storemerge;
 $patch = ((($avis)) + 48|0);
 HEAP32[$patch>>2] = $conv;
 $33 = HEAP32[99632]|0;
 $arrayidx69 = ((($33)) + 60|0);
 $34 = HEAP32[$arrayidx69>>2]|0;
 $cmp70 = ($34|0)<(129);
 $and74 = $34 & 8;
 $tobool75 = ($and74|0)==(0);
 $or$cond = $cmp70 & $tobool75;
 do {
  if ($or$cond) {
   $35 = HEAP32[99639]|0;
   $tobool78 = ($35|0)==(0|0);
   if (!($tobool78)) {
    $colormap80 = ((($avis)) + 52|0);
    HEAP32[$colormap80>>2] = $35;
    break;
   }
   $36 = HEAP32[$psp>>2]|0;
   $frame83 = ((($36)) + 4|0);
   $37 = HEAP32[$frame83>>2]|0;
   $and84 = $37 & 32768;
   $tobool85 = ($and84|0)==(0);
   if ($tobool85) {
    $39 = HEAP32[99708]|0;
    $arrayidx89 = ((($39)) + 188|0);
    $40 = HEAP32[$arrayidx89>>2]|0;
    $colormap90 = ((($avis)) + 52|0);
    HEAP32[$colormap90>>2] = $40;
    break;
   } else {
    $38 = HEAP32[99584]|0;
    $colormap87 = ((($avis)) + 52|0);
    HEAP32[$colormap87>>2] = $38;
    break;
   }
  } else {
   $colormap = ((($avis)) + 52|0);
   HEAP32[$colormap>>2] = 0;
  }
 } while(0);
 _R_DrawVisSprite($avis,0,0);
 STACKTOP = sp;return;
}
function _R_DrawSprite($spr) {
 $spr = $spr|0;
 var $$ = 0, $$87 = 0, $$88 = 0, $$pn101 = 0, $$pn101$phi = 0, $$pre = 0, $$pre107 = 0, $$pre108 = 0, $$pre109 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and54 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx104 = 0, $arrayidx107 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx138 = 0, $arrayidx61 = 0, $arrayidx65 = 0, $arrayidx79 = 0, $arrayidx84 = 0;
 var $arrayidx98 = 0, $bsilheight = 0, $call = 0, $cmp = 0, $cmp10 = 0, $cmp100 = 0, $cmp103 = 0, $cmp109 = 0, $cmp127 = 0, $cmp12791 = 0, $cmp132 = 0, $cmp140 = 0, $cmp16 = 0, $cmp21 = 0, $cmp28 = 0, $cmp3 = 0, $cmp3100 = 0, $cmp36 = 0, $cmp39 = 0, $cmp49 = 0;
 var $cmp52 = 0, $cmp59 = 0, $cmp5997 = 0, $cmp62 = 0, $cmp7 = 0, $cmp76 = 0, $cmp7695 = 0, $cmp81 = 0, $cmp95 = 0, $cmp9593 = 0, $cond27 = 0, $conv135 = 0, $ds$0 = 0, $ds$0102 = 0, $ds$099 = 0, $gx = 0, $gy = 0, $gz = 0, $gzt = 0, $inc = 0;
 var $inc117 = 0, $inc146 = 0, $inc69 = 0, $inc88 = 0, $maskedtexturecol = 0, $maskedtexturecol43 = 0, $scale1 = 0, $scale2 = 0, $scale35 = 0, $silhouette$1 = 0, $silhouette12 = 0, $spec$select = 0, $sprbottomclip = 0, $sprbottomclip103 = 0, $sprtopclip = 0, $sprtopclip112 = 0, $tobool = 0, $tobool13 = 0, $tobool41 = 0, $tobool44 = 0;
 var $tsilheight = 0, $x$0104 = 0, $x$198 = 0, $x$296 = 0, $x$394 = 0, $x$492 = 0, $x1 = 0, $x15 = 0, $x2 = 0, $x28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $x1 = ((($spr)) + 8|0);
 $0 = HEAP32[$x1>>2]|0;
 $x2 = ((($spr)) + 12|0);
 $1 = HEAP32[$x2>>2]|0;
 $cmp103 = ($0|0)>($1|0);
 if (!($cmp103)) {
  $x$0104 = $0;
  while(1) {
   $arrayidx = (384912 + ($x$0104<<1)|0);
   HEAP16[$arrayidx>>1] = -2;
   $arrayidx1 = (385552 + ($x$0104<<1)|0);
   HEAP16[$arrayidx1>>1] = -2;
   $inc = (($x$0104) + 1)|0;
   $cmp = ($x$0104|0)<($1|0);
   if ($cmp) {
    $x$0104 = $inc;
   } else {
    break;
   }
  }
 }
 $2 = HEAP32[99559]|0;
 $ds$099 = ((($2)) + -48|0);
 $cmp3100 = ($ds$099>>>0)<(192336>>>0);
 if ($cmp3100) {
  $33 = $0;$34 = $1;
 } else {
  $scale35 = ((($spr)) + 36|0);
  $gx = ((($spr)) + 16|0);
  $gy = ((($spr)) + 20|0);
  $gz = ((($spr)) + 24|0);
  $gzt = ((($spr)) + 28|0);
  $$pn101 = $2;$4 = $1;$ds$0102 = $ds$099;
  while(1) {
   $x15 = ((($$pn101)) + -44|0);
   $3 = HEAP32[$x15>>2]|0;
   $cmp7 = ($3|0)>($4|0);
   L10: do {
    if (!($cmp7)) {
     $x28 = ((($$pn101)) + -40|0);
     $5 = HEAP32[$x28>>2]|0;
     $6 = HEAP32[$x1>>2]|0;
     $cmp10 = ($5|0)<($6|0);
     if (!($cmp10)) {
      $silhouette12 = ((($$pn101)) + -24|0);
      $7 = HEAP32[$silhouette12>>2]|0;
      $tobool = ($7|0)==(0);
      if ($tobool) {
       $maskedtexturecol = ((($$pn101)) + -4|0);
       $8 = HEAP32[$maskedtexturecol>>2]|0;
       $tobool13 = ($8|0)==(0|0);
       if ($tobool13) {
        break;
       }
      }
      $cmp16 = ($3|0)<($6|0);
      $$ = $cmp16 ? $6 : $3;
      $cmp21 = ($5|0)>($4|0);
      $cond27 = $cmp21 ? $4 : $5;
      $scale1 = ((($$pn101)) + -36|0);
      $9 = HEAP32[$scale1>>2]|0;
      $scale2 = ((($$pn101)) + -32|0);
      $10 = HEAP32[$scale2>>2]|0;
      $cmp28 = ($9|0)>($10|0);
      $$87 = $cmp28 ? $9 : $10;
      $11 = HEAP32[$scale35>>2]|0;
      $cmp36 = ($$87|0)<($11|0);
      do {
       if (!($cmp36)) {
        $$88 = $cmp28 ? $10 : $9;
        $cmp39 = ($$88|0)<($11|0);
        if ($cmp39) {
         $12 = HEAP32[$gx>>2]|0;
         $13 = HEAP32[$gy>>2]|0;
         $14 = HEAP32[$ds$0102>>2]|0;
         $call = (_R_PointOnSegSide($12,$13,$14)|0);
         $tobool41 = ($call|0)==(0);
         if ($tobool41) {
          break;
         }
         $$pre107 = HEAP32[$silhouette12>>2]|0;
         $18 = $$pre107;
        } else {
         $18 = $7;
        }
        $16 = HEAP32[$gz>>2]|0;
        $bsilheight = ((($$pn101)) + -20|0);
        $17 = HEAP32[$bsilheight>>2]|0;
        $cmp49 = ($16|0)<($17|0);
        $and = $18 & -2;
        $spec$select = $cmp49 ? $18 : $and;
        $19 = HEAP32[$gzt>>2]|0;
        $tsilheight = ((($$pn101)) + -16|0);
        $20 = HEAP32[$tsilheight>>2]|0;
        $cmp52 = ($19|0)>($20|0);
        $and54 = $spec$select & -3;
        $silhouette$1 = $cmp52 ? $spec$select : $and54;
        switch ($silhouette$1|0) {
        case 1:  {
         $cmp5997 = ($$|0)>($cond27|0);
         if ($cmp5997) {
          break L10;
         }
         $sprbottomclip = ((($$pn101)) + -8|0);
         $x$198 = $$;
         while(1) {
          $arrayidx61 = (385552 + ($x$198<<1)|0);
          $21 = HEAP16[$arrayidx61>>1]|0;
          $cmp62 = ($21<<16>>16)==(-2);
          if ($cmp62) {
           $22 = HEAP32[$sprbottomclip>>2]|0;
           $arrayidx65 = (($22) + ($x$198<<1)|0);
           $23 = HEAP16[$arrayidx65>>1]|0;
           HEAP16[$arrayidx61>>1] = $23;
          }
          $inc69 = (($x$198) + 1)|0;
          $cmp59 = ($x$198|0)<($cond27|0);
          if ($cmp59) {
           $x$198 = $inc69;
          } else {
           break L10;
          }
         }
         break;
        }
        case 2:  {
         $cmp7695 = ($$|0)>($cond27|0);
         if ($cmp7695) {
          break L10;
         }
         $sprtopclip = ((($$pn101)) + -12|0);
         $x$296 = $$;
         while(1) {
          $arrayidx79 = (384912 + ($x$296<<1)|0);
          $24 = HEAP16[$arrayidx79>>1]|0;
          $cmp81 = ($24<<16>>16)==(-2);
          if ($cmp81) {
           $25 = HEAP32[$sprtopclip>>2]|0;
           $arrayidx84 = (($25) + ($x$296<<1)|0);
           $26 = HEAP16[$arrayidx84>>1]|0;
           HEAP16[$arrayidx79>>1] = $26;
          }
          $inc88 = (($x$296) + 1)|0;
          $cmp76 = ($x$296|0)<($cond27|0);
          if ($cmp76) {
           $x$296 = $inc88;
          } else {
           break L10;
          }
         }
         break;
        }
        case 3:  {
         $cmp9593 = ($$|0)>($cond27|0);
         if ($cmp9593) {
          break L10;
         }
         $sprbottomclip103 = ((($$pn101)) + -8|0);
         $sprtopclip112 = ((($$pn101)) + -12|0);
         $x$394 = $$;
         while(1) {
          $arrayidx98 = (385552 + ($x$394<<1)|0);
          $27 = HEAP16[$arrayidx98>>1]|0;
          $cmp100 = ($27<<16>>16)==(-2);
          if ($cmp100) {
           $28 = HEAP32[$sprbottomclip103>>2]|0;
           $arrayidx104 = (($28) + ($x$394<<1)|0);
           $29 = HEAP16[$arrayidx104>>1]|0;
           HEAP16[$arrayidx98>>1] = $29;
          }
          $arrayidx107 = (384912 + ($x$394<<1)|0);
          $30 = HEAP16[$arrayidx107>>1]|0;
          $cmp109 = ($30<<16>>16)==(-2);
          if ($cmp109) {
           $31 = HEAP32[$sprtopclip112>>2]|0;
           $arrayidx113 = (($31) + ($x$394<<1)|0);
           $32 = HEAP16[$arrayidx113>>1]|0;
           HEAP16[$arrayidx107>>1] = $32;
          }
          $inc117 = (($x$394) + 1)|0;
          $cmp95 = ($x$394|0)<($cond27|0);
          if ($cmp95) {
           $x$394 = $inc117;
          } else {
           break L10;
          }
         }
         break;
        }
        default: {
         break L10;
        }
        }
       }
      } while(0);
      $maskedtexturecol43 = ((($$pn101)) + -4|0);
      $15 = HEAP32[$maskedtexturecol43>>2]|0;
      $tobool44 = ($15|0)==(0|0);
      if (!($tobool44)) {
       _R_RenderMaskedSegRange($ds$0102,$$,$cond27);
      }
     }
    }
   } while(0);
   $ds$0 = ((($ds$0102)) + -48|0);
   $cmp3 = ($ds$0>>>0)<(192336>>>0);
   if ($cmp3) {
    break;
   }
   $$pre = HEAP32[$x2>>2]|0;
   $$pn101$phi = $ds$0102;$4 = $$pre;$ds$0102 = $ds$0;$$pn101 = $$pn101$phi;
  }
  $$pre108 = HEAP32[$x1>>2]|0;
  $$pre109 = HEAP32[$x2>>2]|0;
  $33 = $$pre108;$34 = $$pre109;
 }
 $cmp12791 = ($33|0)>($34|0);
 if ($cmp12791) {
  HEAP32[99706] = 385552;
  HEAP32[99707] = 384912;
  _R_DrawVisSprite($spr,0,0);
  return;
 }
 $35 = HEAP32[99597]|0;
 $conv135 = $35&65535;
 $x$492 = $33;
 while(1) {
  $arrayidx130 = (385552 + ($x$492<<1)|0);
  $36 = HEAP16[$arrayidx130>>1]|0;
  $cmp132 = ($36<<16>>16)==(-2);
  if ($cmp132) {
   HEAP16[$arrayidx130>>1] = $conv135;
  }
  $arrayidx138 = (384912 + ($x$492<<1)|0);
  $37 = HEAP16[$arrayidx138>>1]|0;
  $cmp140 = ($37<<16>>16)==(-2);
  if ($cmp140) {
   HEAP16[$arrayidx138>>1] = -1;
  }
  $inc146 = (($x$492) + 1)|0;
  $cmp127 = ($x$492|0)<($34|0);
  if ($cmp127) {
   $x$492 = $inc146;
  } else {
   break;
  }
 }
 HEAP32[99706] = 385552;
 HEAP32[99707] = 384912;
 _R_DrawVisSprite($spr,0,0);
 return;
}
function _R_DrawMasked() {
 var $$pn13 = 0, $$pn13$phi = 0, $$pre = 0, $$pre35$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr2$i = 0, $add$ptr7$i = 0, $arraydecay$i = 0, $arraydecay$i$sink = 0, $arraydecay7$i = 0, $best$0$lcssa$i = 0, $best$028$i = 0;
 var $bestscale$029$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i10 = 0, $cmp1 = 0, $cmp10$i = 0, $cmp1030$i = 0, $cmp116 = 0, $cmp15$i = 0, $cmp1526$i = 0, $cmp17$i = 0, $cmp2$i = 0, $cmp3 = 0, $cmp312 = 0, $cmp32$i = 0, $conv$i = 0, $ds$0 = 0, $ds$011 = 0, $ds$014 = 0, $ds$033$i = 0;
 var $ds$127$i = 0, $i$031$i = 0, $inc$i = 0, $incdec$ptr$i = 0, $lightlevel$i = 0, $maskedtexturecol = 0, $next = 0, $next$i = 0, $next1$i = 0, $next22$i = 0, $next25$pre$phi$iZ2D = 0, $next29$i = 0, $next32$i = 0, $next6$i = 0, $prev24$pre$phi$iZ2D = 0, $scale$i = 0, $shr$i = 0, $spec$select$i = 0, $spec$select25$i = 0, $spr$0 = 0;
 var $spr$015 = 0, $spr$017 = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, $subsector$i = 0, $tobool = 0, $tobool$1$i = 0, $tobool$i = 0, $tobool9 = 0, $unsorted$i = 0, $x1 = 0, $x2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $unsorted$i = sp;
 $0 = HEAP32[99688]|0;
 $sub$ptr$sub$i = (($0) - (376592))|0;
 $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 60)&-1;
 HEAP32[$unsorted$i>>2] = $unsorted$i;
 $next$i = ((($unsorted$i)) + 4|0);
 HEAP32[$next$i>>2] = $unsorted$i;
 $1 = ($sub$ptr$sub$i|0)==(0);
 $2 = $0;
 if ($1) {
  $13 = $2;
 } else {
  $cmp32$i = ($2>>>0)>(376592>>>0);
  if ($cmp32$i) {
   $ds$033$i = 376592;
   while(1) {
    $add$ptr$i = ((($ds$033$i)) + 60|0);
    $next1$i = ((($ds$033$i)) + 4|0);
    HEAP32[$next1$i>>2] = $add$ptr$i;
    $add$ptr2$i = ((($ds$033$i)) + -60|0);
    HEAP32[$ds$033$i>>2] = $add$ptr2$i;
    $cmp$i = ($add$ptr$i>>>0)<($2>>>0);
    if ($cmp$i) {
     $ds$033$i = $add$ptr$i;
    } else {
     break;
    }
   }
  }
  HEAP32[94148] = $unsorted$i;
  HEAP32[$next$i>>2] = 376592;
  $next6$i = ((($2)) + -56|0);
  HEAP32[$next6$i>>2] = $unsorted$i;
  $3 = HEAP32[99688]|0;
  $add$ptr7$i = ((($3)) + -60|0);
  HEAP32[$unsorted$i>>2] = $add$ptr7$i;
  HEAP32[99711] = 398844;
  HEAP32[(398848)>>2] = 398844;
  $cmp1030$i = ($sub$ptr$sub$i|0)>(0);
  if ($cmp1030$i) {
   $i$031$i = 0;
   while(1) {
    $4 = HEAP32[$next$i>>2]|0;
    $cmp1526$i = ($4|0)==($unsorted$i|0);
    if ($cmp1526$i) {
     $best$0$lcssa$i = $unsorted$i;$next25$pre$phi$iZ2D = $next$i;$prev24$pre$phi$iZ2D = $unsorted$i;
    } else {
     $best$028$i = $4;$bestscale$029$i = 2147483647;$ds$127$i = $4;
     while(1) {
      $scale$i = ((($ds$127$i)) + 36|0);
      $5 = HEAP32[$scale$i>>2]|0;
      $cmp17$i = ($5|0)<($bestscale$029$i|0);
      $spec$select$i = $cmp17$i ? $ds$127$i : $best$028$i;
      $spec$select25$i = $cmp17$i ? $5 : $bestscale$029$i;
      $next22$i = ((($ds$127$i)) + 4|0);
      $6 = HEAP32[$next22$i>>2]|0;
      $cmp15$i = ($6|0)==($unsorted$i|0);
      if ($cmp15$i) {
       break;
      } else {
       $best$028$i = $spec$select$i;$bestscale$029$i = $spec$select25$i;$ds$127$i = $6;
      }
     }
     $$pre35$i = ((($spec$select$i)) + 4|0);
     $best$0$lcssa$i = $spec$select$i;$next25$pre$phi$iZ2D = $$pre35$i;$prev24$pre$phi$iZ2D = $spec$select$i;
    }
    $7 = HEAP32[$best$0$lcssa$i>>2]|0;
    $8 = HEAP32[$next25$pre$phi$iZ2D>>2]|0;
    HEAP32[$8>>2] = $7;
    $9 = $8;
    $10 = HEAP32[$prev24$pre$phi$iZ2D>>2]|0;
    $next29$i = ((($10)) + 4|0);
    HEAP32[$next29$i>>2] = $9;
    HEAP32[$next25$pre$phi$iZ2D>>2] = 398844;
    $11 = HEAP32[99711]|0;
    HEAP32[$best$0$lcssa$i>>2] = $11;
    $12 = HEAP32[99711]|0;
    $next32$i = ((($12)) + 4|0);
    HEAP32[$next32$i>>2] = $best$0$lcssa$i;
    HEAP32[99711] = $best$0$lcssa$i;
    $inc$i = (($i$031$i) + 1)|0;
    $cmp10$i = ($inc$i|0)<($sub$ptr$div$i|0);
    if ($cmp10$i) {
     $i$031$i = $inc$i;
    } else {
     break;
    }
   }
   $$pre = HEAP32[99688]|0;
   $13 = $$pre;
  } else {
   $13 = $3;
  }
 }
 $cmp = ($13>>>0)>(376592>>>0);
 if ($cmp) {
  $spr$015 = HEAP32[(398848)>>2]|0;
  $cmp116 = ($spr$015|0)==(398844|0);
  if (!($cmp116)) {
   $spr$017 = $spr$015;
   while(1) {
    _R_DrawSprite($spr$017);
    $next = ((($spr$017)) + 4|0);
    $spr$0 = HEAP32[$next>>2]|0;
    $cmp1 = ($spr$0|0)==(398844|0);
    if ($cmp1) {
     break;
    } else {
     $spr$017 = $spr$0;
    }
   }
  }
 }
 $14 = HEAP32[99559]|0;
 $ds$011 = ((($14)) + -48|0);
 $cmp312 = ($ds$011>>>0)<(192336>>>0);
 if (!($cmp312)) {
  $$pn13 = $14;$ds$014 = $ds$011;
  while(1) {
   $maskedtexturecol = ((($$pn13)) + -4|0);
   $15 = HEAP32[$maskedtexturecol>>2]|0;
   $tobool = ($15|0)==(0|0);
   if (!($tobool)) {
    $x1 = ((($$pn13)) + -44|0);
    $16 = HEAP32[$x1>>2]|0;
    $x2 = ((($$pn13)) + -40|0);
    $17 = HEAP32[$x2>>2]|0;
    _R_RenderMaskedSegRange($ds$014,$16,$17);
   }
   $ds$0 = ((($ds$014)) + -48|0);
   $cmp3 = ($ds$0>>>0)<(192336>>>0);
   if ($cmp3) {
    break;
   } else {
    $$pn13$phi = $ds$014;$ds$014 = $ds$0;$$pn13 = $$pn13$phi;
   }
  }
 }
 $18 = HEAP32[99633]|0;
 $tobool9 = ($18|0)==(0);
 if (!($tobool9)) {
  STACKTOP = sp;return;
 }
 $19 = HEAP32[99632]|0;
 $20 = HEAP32[$19>>2]|0;
 $subsector$i = ((($20)) + 52|0);
 $21 = HEAP32[$subsector$i>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $lightlevel$i = ((($22)) + 12|0);
 $23 = HEAP16[$lightlevel$i>>1]|0;
 $conv$i = $23 << 16 >> 16;
 $shr$i = $conv$i >> 4;
 $24 = HEAP32[99634]|0;
 $add$i = (($shr$i) + ($24))|0;
 $cmp$i10 = ($add$i|0)<(0);
 if ($cmp$i10) {
  $arraydecay$i$sink = 238560;
 } else {
  $cmp2$i = ($add$i|0)>(15);
  if ($cmp2$i) {
   $arraydecay$i$sink = (241440);
  } else {
   $arraydecay$i = (238560 + (($add$i*192)|0)|0);
   $arraydecay$i$sink = $arraydecay$i;
  }
 }
 HEAP32[99708] = $arraydecay$i$sink;
 HEAP32[99706] = 384272;
 HEAP32[99707] = 375952;
 $arraydecay7$i = ((($19)) + 252|0);
 $25 = HEAP32[$arraydecay7$i>>2]|0;
 $tobool$i = ($25|0)==(0|0);
 if (!($tobool$i)) {
  _R_DrawPSprite($arraydecay7$i);
 }
 $incdec$ptr$i = ((($19)) + 268|0);
 $26 = HEAP32[$incdec$ptr$i>>2]|0;
 $tobool$1$i = ($26|0)==(0|0);
 if ($tobool$1$i) {
  STACKTOP = sp;return;
 }
 _R_DrawPSprite($incdec$ptr$i);
 STACKTOP = sp;return;
}
function _SHA1_Init($hd) {
 $hd = $hd|0;
 var $count = 0, $h1 = 0, $h2 = 0, $h3 = 0, $h4 = 0, $nblocks = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$hd>>2] = 1732584193;
 $h1 = ((($hd)) + 4|0);
 HEAP32[$h1>>2] = -271733879;
 $h2 = ((($hd)) + 8|0);
 HEAP32[$h2>>2] = -1732584194;
 $h3 = ((($hd)) + 12|0);
 HEAP32[$h3>>2] = 271733878;
 $h4 = ((($hd)) + 16|0);
 HEAP32[$h4>>2] = -1009589776;
 $nblocks = ((($hd)) + 20|0);
 HEAP32[$nblocks>>2] = 0;
 $count = ((($hd)) + 88|0);
 HEAP32[$count>>2] = 0;
 return;
}
function _SHA1_Update($hd,$inbuf,$inlen) {
 $hd = $hd|0;
 $inbuf = $inbuf|0;
 $inlen = $inlen|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $arraydecay = 0;
 var $arraydecay$i = 0, $arraydecay$i28 = 0, $arrayidx = 0, $arrayidx32 = 0, $cmp = 0, $cmp$i = 0, $cmp$i27 = 0, $cmp17 = 0, $cmp1739 = 0, $cmp25 = 0, $cmp2561 = 0, $cmp9 = 0, $count = 0, $dec = 0, $dec34 = 0, $inbuf$addr$044 = 0, $inbuf$addr$1 = 0, $inbuf$addr$2$lcssa = 0, $inbuf$addr$240 = 0, $inbuf$addr$33763 = 0;
 var $inc = 0, $inc$i = 0, $inc$i30 = 0, $inc12 = 0, $inc20 = 0, $inc31 = 0, $incdec$ptr = 0, $incdec$ptr28 = 0, $inlen$addr$045 = 0, $inlen$addr$1 = 0, $inlen$addr$2$lcssa = 0, $inlen$addr$241 = 0, $inlen$addr$33862 = 0, $nblocks = 0, $nblocks$i = 0, $nblocks$i29 = 0, $nblocks19 = 0, $or$cond = 0, $scevgep = 0, $sub = 0;
 var $tobool = 0, $tobool22 = 0, $tobool2236 = 0, $tobool5 = 0, $tobool7 = 0, $tobool743 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $count = ((($hd)) + 88|0);
 $0 = HEAP32[$count>>2]|0;
 $cmp = ($0|0)==(64);
 if ($cmp) {
  $arraydecay = ((($hd)) + 24|0);
  _Transform($hd,$arraydecay);
  HEAP32[$count>>2] = 0;
  $nblocks = ((($hd)) + 20|0);
  $1 = HEAP32[$nblocks>>2]|0;
  $inc = (($1) + 1)|0;
  HEAP32[$nblocks>>2] = $inc;
  $2 = 0;
 } else {
  $2 = $0;
 }
 $tobool = ($inbuf|0)==(0|0);
 if ($tobool) {
  return;
 }
 $tobool5 = ($2|0)==(0);
 do {
  if ($tobool5) {
   $16 = 0;$inbuf$addr$1 = $inbuf;$inlen$addr$1 = $inlen;
  } else {
   $tobool743 = ($inlen|0)==(0);
   if ($tobool743) {
    return;
   }
   $3 = $2;$inbuf$addr$044 = $inbuf;$inlen$addr$045 = $inlen;
   while(1) {
    $cmp9 = ($3|0)<(64);
    if (!($cmp9)) {
     label = 9;
     break;
    }
    $incdec$ptr = ((($inbuf$addr$044)) + 1|0);
    $4 = HEAP8[$inbuf$addr$044>>0]|0;
    $inc12 = (($3) + 1)|0;
    HEAP32[$count>>2] = $inc12;
    $arrayidx = (((($hd)) + 24|0) + ($3)|0);
    HEAP8[$arrayidx>>0] = $4;
    $dec = (($inlen$addr$045) + -1)|0;
    $tobool7 = ($dec|0)==(0);
    $5 = HEAP32[$count>>2]|0;
    if ($tobool7) {
     break;
    } else {
     $3 = $5;$inbuf$addr$044 = $incdec$ptr;$inlen$addr$045 = $dec;
    }
   }
   if ((label|0) == 9) {
    $cmp$i27 = ($3|0)==(64);
    if (!($cmp$i27)) {
     $16 = $3;$inbuf$addr$1 = $inbuf$addr$044;$inlen$addr$1 = $inlen$addr$045;
     break;
    }
    $arraydecay$i28 = ((($hd)) + 24|0);
    _Transform($hd,$arraydecay$i28);
    HEAP32[$count>>2] = 0;
    $nblocks$i29 = ((($hd)) + 20|0);
    $6 = HEAP32[$nblocks$i29>>2]|0;
    $inc$i30 = (($6) + 1)|0;
    HEAP32[$nblocks$i29>>2] = $inc$i30;
    $16 = 0;$inbuf$addr$1 = $inbuf$addr$044;$inlen$addr$1 = $inlen$addr$045;
    break;
   }
   $cmp$i = ($5|0)==(64);
   if (!($cmp$i)) {
    return;
   }
   $arraydecay$i = ((($hd)) + 24|0);
   _Transform($hd,$arraydecay$i);
   HEAP32[$count>>2] = 0;
   $nblocks$i = ((($hd)) + 20|0);
   $15 = HEAP32[$nblocks$i>>2]|0;
   $inc$i = (($15) + 1)|0;
   HEAP32[$nblocks$i>>2] = $inc$i;
   return;
  }
 } while(0);
 $cmp1739 = ($inlen$addr$1>>>0)>(63);
 if ($cmp1739) {
  $nblocks19 = ((($hd)) + 20|0);
  $7 = (($inlen$addr$1) + -64)|0;
  $8 = $7 & -64;
  $9 = (($8) + 64)|0;
  $inbuf$addr$240 = $inbuf$addr$1;$inlen$addr$241 = $inlen$addr$1;
  while(1) {
   _Transform($hd,$inbuf$addr$240);
   HEAP32[$count>>2] = 0;
   $10 = HEAP32[$nblocks19>>2]|0;
   $inc20 = (($10) + 1)|0;
   HEAP32[$nblocks19>>2] = $inc20;
   $sub = (($inlen$addr$241) + -64)|0;
   $add$ptr = ((($inbuf$addr$240)) + 64|0);
   $cmp17 = ($sub>>>0)>(63);
   if ($cmp17) {
    $inbuf$addr$240 = $add$ptr;$inlen$addr$241 = $sub;
   } else {
    break;
   }
  }
  $11 = (($7) - ($8))|0;
  $scevgep = (($inbuf$addr$1) + ($9)|0);
  $12 = 0;$inbuf$addr$2$lcssa = $scevgep;$inlen$addr$2$lcssa = $11;
 } else {
  $12 = $16;$inbuf$addr$2$lcssa = $inbuf$addr$1;$inlen$addr$2$lcssa = $inlen$addr$1;
 }
 $tobool2236 = ($inlen$addr$2$lcssa|0)!=(0);
 $cmp2561 = ($12|0)<(64);
 $or$cond = $tobool2236 & $cmp2561;
 if (!($or$cond)) {
  return;
 }
 $14 = $12;$inbuf$addr$33763 = $inbuf$addr$2$lcssa;$inlen$addr$33862 = $inlen$addr$2$lcssa;
 while(1) {
  $13 = HEAP8[$inbuf$addr$33763>>0]|0;
  $inc31 = (($14) + 1)|0;
  HEAP32[$count>>2] = $inc31;
  $arrayidx32 = (((($hd)) + 24|0) + ($14)|0);
  HEAP8[$arrayidx32>>0] = $13;
  $dec34 = (($inlen$addr$33862) + -1)|0;
  $tobool22 = ($dec34|0)==(0);
  if ($tobool22) {
   label = 21;
   break;
  }
  $incdec$ptr28 = ((($inbuf$addr$33763)) + 1|0);
  $$pre = HEAP32[$count>>2]|0;
  $cmp25 = ($$pre|0)<(64);
  if ($cmp25) {
   $14 = $$pre;$inbuf$addr$33763 = $incdec$ptr28;$inlen$addr$33862 = $dec34;
  } else {
   label = 21;
   break;
  }
 }
 if ((label|0) == 21) {
  return;
 }
}
function _Transform($hd,$data) {
 $hd = $hd|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $add = 0, $add$ptr$10866 = 0, $add$ptr$11867 = 0, $add$ptr$12868 = 0, $add$ptr$13869 = 0, $add$ptr$14870 = 0, $add$ptr$1857 = 0, $add$ptr$2858 = 0, $add$ptr$3859 = 0, $add$ptr$4860 = 0;
 var $add$ptr$5861 = 0, $add$ptr$6862 = 0, $add$ptr$7863 = 0, $add$ptr$8864 = 0, $add$ptr$9865 = 0, $add$ptr856 = 0, $add10 = 0, $add1003 = 0, $add1004 = 0, $add1018 = 0, $add1019 = 0, $add1031 = 0, $add1032 = 0, $add1046 = 0, $add1047 = 0, $add1059 = 0, $add1060 = 0, $add107 = 0, $add1074 = 0, $add1075 = 0;
 var $add108 = 0, $add1087 = 0, $add1088 = 0, $add11 = 0, $add110 = 0, $add1102 = 0, $add1103 = 0, $add111 = 0, $add1115 = 0, $add1116 = 0, $add1130 = 0, $add1131 = 0, $add1143 = 0, $add1144 = 0, $add1158 = 0, $add1159 = 0, $add1171 = 0, $add1172 = 0, $add1186 = 0, $add1187 = 0;
 var $add1199 = 0, $add1200 = 0, $add1214 = 0, $add1215 = 0, $add1227 = 0, $add1228 = 0, $add124 = 0, $add1242 = 0, $add1243 = 0, $add125 = 0, $add1255 = 0, $add1256 = 0, $add127 = 0, $add1270 = 0, $add1271 = 0, $add128 = 0, $add1283 = 0, $add1284 = 0, $add1298 = 0, $add1299 = 0;
 var $add1311 = 0, $add1312 = 0, $add1326 = 0, $add1327 = 0, $add1339 = 0, $add1340 = 0, $add1354 = 0, $add1355 = 0, $add1367 = 0, $add1368 = 0, $add1382 = 0, $add1383 = 0, $add1395 = 0, $add1396 = 0, $add141 = 0, $add1410 = 0, $add1411 = 0, $add142 = 0, $add1423 = 0, $add1424 = 0;
 var $add1438 = 0, $add1439 = 0, $add144 = 0, $add145 = 0, $add1451 = 0, $add1452 = 0, $add1464 = 0, $add1465 = 0, $add1477 = 0, $add1478 = 0, $add1490 = 0, $add1491 = 0, $add1503 = 0, $add1504 = 0, $add1516 = 0, $add1517 = 0, $add1529 = 0, $add1530 = 0, $add1542 = 0, $add1543 = 0;
 var $add1555 = 0, $add1556 = 0, $add1568 = 0, $add1569 = 0, $add158 = 0, $add1581 = 0, $add1582 = 0, $add159 = 0, $add1594 = 0, $add1595 = 0, $add1607 = 0, $add1608 = 0, $add161 = 0, $add162 = 0, $add1620 = 0, $add1621 = 0, $add1633 = 0, $add1634 = 0, $add1646 = 0, $add1647 = 0;
 var $add1659 = 0, $add1660 = 0, $add1672 = 0, $add1673 = 0, $add1685 = 0, $add1686 = 0, $add1698 = 0, $add1699 = 0, $add1711 = 0, $add1712 = 0, $add1724 = 0, $add1725 = 0, $add1737 = 0, $add1738 = 0, $add175 = 0, $add1750 = 0, $add1751 = 0, $add176 = 0, $add1763 = 0, $add1764 = 0;
 var $add1776 = 0, $add1777 = 0, $add178 = 0, $add1789 = 0, $add179 = 0, $add1790 = 0, $add1802 = 0, $add1803 = 0, $add1815 = 0, $add1816 = 0, $add1828 = 0, $add1829 = 0, $add1841 = 0, $add1842 = 0, $add1854 = 0, $add1855 = 0, $add1867 = 0, $add1868 = 0, $add1880 = 0, $add1881 = 0;
 var $add1893 = 0, $add1894 = 0, $add1906 = 0, $add1907 = 0, $add1919 = 0, $add192 = 0, $add1920 = 0, $add193 = 0, $add1932 = 0, $add1933 = 0, $add1945 = 0, $add1946 = 0, $add195 = 0, $add1958 = 0, $add1959 = 0, $add196 = 0, $add1971 = 0, $add1972 = 0, $add1979 = 0, $add1981 = 0;
 var $add1983 = 0, $add1985 = 0, $add1987 = 0, $add209 = 0, $add210 = 0, $add212 = 0, $add213 = 0, $add22 = 0, $add226 = 0, $add227 = 0, $add229 = 0, $add23 = 0, $add230 = 0, $add243 = 0, $add244 = 0, $add246 = 0, $add247 = 0, $add25 = 0, $add26 = 0, $add260 = 0;
 var $add261 = 0, $add263 = 0, $add264 = 0, $add277 = 0, $add278 = 0, $add290 = 0, $add291 = 0, $add304 = 0, $add305 = 0, $add317 = 0, $add318 = 0, $add331 = 0, $add332 = 0, $add344 = 0, $add345 = 0, $add358 = 0, $add359 = 0, $add371 = 0, $add372 = 0, $add384 = 0;
 var $add385 = 0, $add39 = 0, $add397 = 0, $add398 = 0, $add40 = 0, $add410 = 0, $add411 = 0, $add42 = 0, $add423 = 0, $add424 = 0, $add43 = 0, $add436 = 0, $add437 = 0, $add449 = 0, $add450 = 0, $add462 = 0, $add463 = 0, $add475 = 0, $add476 = 0, $add488 = 0;
 var $add489 = 0, $add501 = 0, $add502 = 0, $add514 = 0, $add515 = 0, $add527 = 0, $add528 = 0, $add540 = 0, $add541 = 0, $add553 = 0, $add554 = 0, $add56 = 0, $add566 = 0, $add567 = 0, $add57 = 0, $add579 = 0, $add580 = 0, $add59 = 0, $add592 = 0, $add593 = 0;
 var $add60 = 0, $add605 = 0, $add606 = 0, $add618 = 0, $add619 = 0, $add631 = 0, $add632 = 0, $add644 = 0, $add645 = 0, $add657 = 0, $add658 = 0, $add670 = 0, $add671 = 0, $add683 = 0, $add684 = 0, $add696 = 0, $add697 = 0, $add709 = 0, $add710 = 0, $add722 = 0;
 var $add723 = 0, $add73 = 0, $add735 = 0, $add736 = 0, $add74 = 0, $add748 = 0, $add749 = 0, $add76 = 0, $add761 = 0, $add762 = 0, $add77 = 0, $add774 = 0, $add775 = 0, $add787 = 0, $add788 = 0, $add8 = 0, $add800 = 0, $add801 = 0, $add813 = 0, $add814 = 0;
 var $add826 = 0, $add827 = 0, $add839 = 0, $add840 = 0, $add852 = 0, $add853 = 0, $add865 = 0, $add866 = 0, $add878 = 0, $add879 = 0, $add891 = 0, $add892 = 0, $add90 = 0, $add906 = 0, $add907 = 0, $add91 = 0, $add919 = 0, $add920 = 0, $add93 = 0, $add934 = 0;
 var $add935 = 0, $add94 = 0, $add947 = 0, $add948 = 0, $add962 = 0, $add963 = 0, $add975 = 0, $add976 = 0, $add990 = 0, $add991 = 0, $and = 0, $and1014 = 0, $and1016 = 0, $and1042 = 0, $and1044 = 0, $and105 = 0, $and1070 = 0, $and1072 = 0, $and1098 = 0, $and1100 = 0;
 var $and1126 = 0, $and1128 = 0, $and1154 = 0, $and1156 = 0, $and1182 = 0, $and1184 = 0, $and1210 = 0, $and1212 = 0, $and122 = 0, $and1238 = 0, $and1240 = 0, $and1266 = 0, $and1268 = 0, $and1294 = 0, $and1296 = 0, $and1322 = 0, $and1324 = 0, $and1350 = 0, $and1352 = 0, $and1378 = 0;
 var $and1380 = 0, $and139 = 0, $and1406 = 0, $and1408 = 0, $and1434 = 0, $and1436 = 0, $and156 = 0, $and173 = 0, $and190 = 0, $and20 = 0, $and207 = 0, $and224 = 0, $and241 = 0, $and258 = 0, $and275 = 0, $and302 = 0, $and329 = 0, $and356 = 0, $and37 = 0, $and54 = 0;
 var $and71 = 0, $and88 = 0, $and902 = 0, $and904 = 0, $and930 = 0, $and932 = 0, $and958 = 0, $and960 = 0, $and986 = 0, $and988 = 0, $arrayidx = 0, $arrayidx$1 = 0, $arrayidx$10 = 0, $arrayidx$11 = 0, $arrayidx$12 = 0, $arrayidx$13 = 0, $arrayidx$14 = 0, $arrayidx$15 = 0, $arrayidx$2 = 0, $arrayidx$3 = 0;
 var $arrayidx$4 = 0, $arrayidx$5 = 0, $arrayidx$6 = 0, $arrayidx$7 = 0, $arrayidx$8 = 0, $arrayidx$9 = 0, $arrayidx109 = 0, $arrayidx126 = 0, $arrayidx143 = 0, $arrayidx160 = 0, $arrayidx177 = 0, $arrayidx194 = 0, $arrayidx2 = 0, $arrayidx2$1 = 0, $arrayidx2$10 = 0, $arrayidx2$11 = 0, $arrayidx2$12 = 0, $arrayidx2$13 = 0, $arrayidx2$14 = 0, $arrayidx2$15 = 0;
 var $arrayidx2$2 = 0, $arrayidx2$3 = 0, $arrayidx2$4 = 0, $arrayidx2$5 = 0, $arrayidx2$6 = 0, $arrayidx2$7 = 0, $arrayidx2$8 = 0, $arrayidx2$9 = 0, $arrayidx211 = 0, $arrayidx228 = 0, $arrayidx24 = 0, $arrayidx245 = 0, $arrayidx262 = 0, $arrayidx4 = 0, $arrayidx4$1 = 0, $arrayidx4$10 = 0, $arrayidx4$11 = 0, $arrayidx4$12 = 0, $arrayidx4$13 = 0, $arrayidx4$14 = 0;
 var $arrayidx4$15 = 0, $arrayidx4$2 = 0, $arrayidx4$3 = 0, $arrayidx4$4 = 0, $arrayidx4$5 = 0, $arrayidx4$6 = 0, $arrayidx4$7 = 0, $arrayidx4$8 = 0, $arrayidx4$9 = 0, $arrayidx41 = 0, $arrayidx58 = 0, $arrayidx75 = 0, $arrayidx92 = 0, $h1 = 0, $h2 = 0, $h3 = 0, $h4 = 0, $incdec$ptr = 0, $incdec$ptr$1 = 0, $incdec$ptr$10 = 0;
 var $incdec$ptr$11 = 0, $incdec$ptr$12 = 0, $incdec$ptr$13 = 0, $incdec$ptr$14 = 0, $incdec$ptr$15 = 0, $incdec$ptr$2 = 0, $incdec$ptr$3 = 0, $incdec$ptr$4 = 0, $incdec$ptr$5 = 0, $incdec$ptr$6 = 0, $incdec$ptr$7 = 0, $incdec$ptr$8 = 0, $incdec$ptr$9 = 0, $incdec$ptr1 = 0, $incdec$ptr1$1 = 0, $incdec$ptr1$10 = 0, $incdec$ptr1$11 = 0, $incdec$ptr1$12 = 0, $incdec$ptr1$13 = 0, $incdec$ptr1$14 = 0;
 var $incdec$ptr1$15 = 0, $incdec$ptr1$2 = 0, $incdec$ptr1$3 = 0, $incdec$ptr1$4 = 0, $incdec$ptr1$5 = 0, $incdec$ptr1$6 = 0, $incdec$ptr1$7 = 0, $incdec$ptr1$8 = 0, $incdec$ptr1$9 = 0, $incdec$ptr3 = 0, $incdec$ptr3$1 = 0, $incdec$ptr3$10 = 0, $incdec$ptr3$11 = 0, $incdec$ptr3$12 = 0, $incdec$ptr3$13 = 0, $incdec$ptr3$14 = 0, $incdec$ptr3$15 = 0, $incdec$ptr3$2 = 0, $incdec$ptr3$3 = 0, $incdec$ptr3$4 = 0;
 var $incdec$ptr3$5 = 0, $incdec$ptr3$6 = 0, $incdec$ptr3$7 = 0, $incdec$ptr3$8 = 0, $incdec$ptr3$9 = 0, $incdec$ptr5 = 0, $incdec$ptr5$1 = 0, $incdec$ptr5$10 = 0, $incdec$ptr5$11 = 0, $incdec$ptr5$12 = 0, $incdec$ptr5$13 = 0, $incdec$ptr5$14 = 0, $incdec$ptr5$2 = 0, $incdec$ptr5$3 = 0, $incdec$ptr5$4 = 0, $incdec$ptr5$5 = 0, $incdec$ptr5$6 = 0, $incdec$ptr5$7 = 0, $incdec$ptr5$8 = 0, $incdec$ptr5$9 = 0;
 var $or = 0, $or1001 = 0, $or1007 = 0, $or1013 = 0, $or1015 = 0, $or1017 = 0, $or1029 = 0, $or103 = 0, $or1035 = 0, $or1041 = 0, $or1043 = 0, $or1045 = 0, $or1057 = 0, $or1063 = 0, $or1069 = 0, $or1071 = 0, $or1073 = 0, $or1085 = 0, $or1091 = 0, $or1097 = 0;
 var $or1099 = 0, $or1101 = 0, $or1113 = 0, $or1119 = 0, $or1125 = 0, $or1127 = 0, $or1129 = 0, $or114 = 0, $or1141 = 0, $or1147 = 0, $or1153 = 0, $or1155 = 0, $or1157 = 0, $or1169 = 0, $or1175 = 0, $or1181 = 0, $or1183 = 0, $or1185 = 0, $or1197 = 0, $or120 = 0;
 var $or1203 = 0, $or1209 = 0, $or1211 = 0, $or1213 = 0, $or1225 = 0, $or1231 = 0, $or1237 = 0, $or1239 = 0, $or1241 = 0, $or1253 = 0, $or1259 = 0, $or1265 = 0, $or1267 = 0, $or1269 = 0, $or1281 = 0, $or1287 = 0, $or1293 = 0, $or1295 = 0, $or1297 = 0, $or1309 = 0;
 var $or131 = 0, $or1315 = 0, $or1321 = 0, $or1323 = 0, $or1325 = 0, $or1337 = 0, $or1343 = 0, $or1349 = 0, $or1351 = 0, $or1353 = 0, $or1365 = 0, $or137 = 0, $or1371 = 0, $or1377 = 0, $or1379 = 0, $or1381 = 0, $or1393 = 0, $or1399 = 0, $or14 = 0, $or1405 = 0;
 var $or1407 = 0, $or1409 = 0, $or1421 = 0, $or1427 = 0, $or1433 = 0, $or1435 = 0, $or1437 = 0, $or1449 = 0, $or1455 = 0, $or1461 = 0, $or1475 = 0, $or148 = 0, $or1481 = 0, $or1487 = 0, $or1501 = 0, $or1507 = 0, $or1513 = 0, $or1527 = 0, $or1533 = 0, $or1539 = 0;
 var $or154 = 0, $or1553 = 0, $or1559 = 0, $or1565 = 0, $or1579 = 0, $or1585 = 0, $or1591 = 0, $or1605 = 0, $or1611 = 0, $or1617 = 0, $or1631 = 0, $or1637 = 0, $or1643 = 0, $or165 = 0, $or1657 = 0, $or1663 = 0, $or1669 = 0, $or1683 = 0, $or1689 = 0, $or1695 = 0;
 var $or1709 = 0, $or171 = 0, $or1715 = 0, $or1721 = 0, $or1735 = 0, $or1741 = 0, $or1747 = 0, $or1761 = 0, $or1767 = 0, $or1773 = 0, $or1787 = 0, $or1793 = 0, $or1799 = 0, $or18 = 0, $or1813 = 0, $or1819 = 0, $or182 = 0, $or1825 = 0, $or1839 = 0, $or1845 = 0;
 var $or1851 = 0, $or1865 = 0, $or1871 = 0, $or1877 = 0, $or188 = 0, $or1891 = 0, $or1897 = 0, $or1903 = 0, $or1917 = 0, $or1923 = 0, $or1929 = 0, $or1943 = 0, $or1949 = 0, $or1955 = 0, $or1969 = 0, $or1975 = 0, $or199 = 0, $or205 = 0, $or216 = 0, $or222 = 0;
 var $or233 = 0, $or239 = 0, $or250 = 0, $or256 = 0, $or267 = 0, $or273 = 0, $or288 = 0, $or29 = 0, $or294 = 0, $or300 = 0, $or315 = 0, $or321 = 0, $or327 = 0, $or342 = 0, $or348 = 0, $or35 = 0, $or354 = 0, $or369 = 0, $or375 = 0, $or381 = 0;
 var $or395 = 0, $or401 = 0, $or407 = 0, $or421 = 0, $or427 = 0, $or433 = 0, $or447 = 0, $or453 = 0, $or459 = 0, $or46 = 0, $or473 = 0, $or479 = 0, $or485 = 0, $or499 = 0, $or505 = 0, $or511 = 0, $or52 = 0, $or525 = 0, $or531 = 0, $or537 = 0;
 var $or551 = 0, $or557 = 0, $or563 = 0, $or577 = 0, $or583 = 0, $or589 = 0, $or603 = 0, $or609 = 0, $or615 = 0, $or629 = 0, $or63 = 0, $or635 = 0, $or641 = 0, $or655 = 0, $or661 = 0, $or667 = 0, $or681 = 0, $or687 = 0, $or69 = 0, $or693 = 0;
 var $or707 = 0, $or713 = 0, $or719 = 0, $or733 = 0, $or739 = 0, $or745 = 0, $or759 = 0, $or765 = 0, $or771 = 0, $or785 = 0, $or791 = 0, $or797 = 0, $or80 = 0, $or811 = 0, $or817 = 0, $or823 = 0, $or837 = 0, $or843 = 0, $or849 = 0, $or86 = 0;
 var $or863 = 0, $or869 = 0, $or875 = 0, $or889 = 0, $or895 = 0, $or901 = 0, $or903 = 0, $or905 = 0, $or917 = 0, $or923 = 0, $or929 = 0, $or931 = 0, $or933 = 0, $or945 = 0, $or951 = 0, $or957 = 0, $or959 = 0, $or961 = 0, $or97 = 0, $or973 = 0;
 var $or979 = 0, $or985 = 0, $or987 = 0, $or989 = 0, $shl = 0, $shl1005 = 0, $shl101 = 0, $shl1011 = 0, $shl1027 = 0, $shl1033 = 0, $shl1039 = 0, $shl1055 = 0, $shl1061 = 0, $shl1067 = 0, $shl1083 = 0, $shl1089 = 0, $shl1095 = 0, $shl1111 = 0, $shl1117 = 0, $shl112 = 0;
 var $shl1123 = 0, $shl1139 = 0, $shl1145 = 0, $shl1151 = 0, $shl1167 = 0, $shl1173 = 0, $shl1179 = 0, $shl118 = 0, $shl1195 = 0, $shl12 = 0, $shl1201 = 0, $shl1207 = 0, $shl1223 = 0, $shl1229 = 0, $shl1235 = 0, $shl1251 = 0, $shl1257 = 0, $shl1263 = 0, $shl1279 = 0, $shl1285 = 0;
 var $shl129 = 0, $shl1291 = 0, $shl1307 = 0, $shl1313 = 0, $shl1319 = 0, $shl1335 = 0, $shl1341 = 0, $shl1347 = 0, $shl135 = 0, $shl1363 = 0, $shl1369 = 0, $shl1375 = 0, $shl1391 = 0, $shl1397 = 0, $shl1403 = 0, $shl1419 = 0, $shl1425 = 0, $shl1431 = 0, $shl1447 = 0, $shl1453 = 0;
 var $shl1459 = 0, $shl146 = 0, $shl1473 = 0, $shl1479 = 0, $shl1485 = 0, $shl1499 = 0, $shl1505 = 0, $shl1511 = 0, $shl152 = 0, $shl1525 = 0, $shl1531 = 0, $shl1537 = 0, $shl1551 = 0, $shl1557 = 0, $shl1563 = 0, $shl1577 = 0, $shl1583 = 0, $shl1589 = 0, $shl16 = 0, $shl1603 = 0;
 var $shl1609 = 0, $shl1615 = 0, $shl1629 = 0, $shl163 = 0, $shl1635 = 0, $shl1641 = 0, $shl1655 = 0, $shl1661 = 0, $shl1667 = 0, $shl1681 = 0, $shl1687 = 0, $shl169 = 0, $shl1693 = 0, $shl1707 = 0, $shl1713 = 0, $shl1719 = 0, $shl1733 = 0, $shl1739 = 0, $shl1745 = 0, $shl1759 = 0;
 var $shl1765 = 0, $shl1771 = 0, $shl1785 = 0, $shl1791 = 0, $shl1797 = 0, $shl180 = 0, $shl1811 = 0, $shl1817 = 0, $shl1823 = 0, $shl1837 = 0, $shl1843 = 0, $shl1849 = 0, $shl186 = 0, $shl1863 = 0, $shl1869 = 0, $shl1875 = 0, $shl1889 = 0, $shl1895 = 0, $shl1901 = 0, $shl1915 = 0;
 var $shl1921 = 0, $shl1927 = 0, $shl1941 = 0, $shl1947 = 0, $shl1953 = 0, $shl1967 = 0, $shl197 = 0, $shl1973 = 0, $shl203 = 0, $shl214 = 0, $shl220 = 0, $shl231 = 0, $shl237 = 0, $shl248 = 0, $shl254 = 0, $shl265 = 0, $shl27 = 0, $shl271 = 0, $shl286 = 0, $shl292 = 0;
 var $shl298 = 0, $shl313 = 0, $shl319 = 0, $shl325 = 0, $shl33 = 0, $shl340 = 0, $shl346 = 0, $shl352 = 0, $shl367 = 0, $shl373 = 0, $shl379 = 0, $shl393 = 0, $shl399 = 0, $shl405 = 0, $shl419 = 0, $shl425 = 0, $shl431 = 0, $shl44 = 0, $shl445 = 0, $shl451 = 0;
 var $shl457 = 0, $shl471 = 0, $shl477 = 0, $shl483 = 0, $shl497 = 0, $shl50 = 0, $shl503 = 0, $shl509 = 0, $shl523 = 0, $shl529 = 0, $shl535 = 0, $shl549 = 0, $shl555 = 0, $shl561 = 0, $shl575 = 0, $shl581 = 0, $shl587 = 0, $shl601 = 0, $shl607 = 0, $shl61 = 0;
 var $shl613 = 0, $shl627 = 0, $shl633 = 0, $shl639 = 0, $shl653 = 0, $shl659 = 0, $shl665 = 0, $shl67 = 0, $shl679 = 0, $shl685 = 0, $shl691 = 0, $shl705 = 0, $shl711 = 0, $shl717 = 0, $shl731 = 0, $shl737 = 0, $shl743 = 0, $shl757 = 0, $shl763 = 0, $shl769 = 0;
 var $shl78 = 0, $shl783 = 0, $shl789 = 0, $shl795 = 0, $shl809 = 0, $shl815 = 0, $shl821 = 0, $shl835 = 0, $shl84 = 0, $shl841 = 0, $shl847 = 0, $shl861 = 0, $shl867 = 0, $shl873 = 0, $shl887 = 0, $shl893 = 0, $shl899 = 0, $shl915 = 0, $shl921 = 0, $shl927 = 0;
 var $shl943 = 0, $shl949 = 0, $shl95 = 0, $shl955 = 0, $shl971 = 0, $shl977 = 0, $shl983 = 0, $shl999 = 0, $shr = 0, $shr1000 = 0, $shr1006 = 0, $shr1012 = 0, $shr102 = 0, $shr1028 = 0, $shr1034 = 0, $shr1040 = 0, $shr1056 = 0, $shr1062 = 0, $shr1068 = 0, $shr1084 = 0;
 var $shr1090 = 0, $shr1096 = 0, $shr1112 = 0, $shr1118 = 0, $shr1124 = 0, $shr113 = 0, $shr1140 = 0, $shr1146 = 0, $shr1152 = 0, $shr1168 = 0, $shr1174 = 0, $shr1180 = 0, $shr119 = 0, $shr1196 = 0, $shr1202 = 0, $shr1208 = 0, $shr1224 = 0, $shr1230 = 0, $shr1236 = 0, $shr1252 = 0;
 var $shr1258 = 0, $shr1264 = 0, $shr1280 = 0, $shr1286 = 0, $shr1292 = 0, $shr13 = 0, $shr130 = 0, $shr1308 = 0, $shr1314 = 0, $shr1320 = 0, $shr1336 = 0, $shr1342 = 0, $shr1348 = 0, $shr136 = 0, $shr1364 = 0, $shr1370 = 0, $shr1376 = 0, $shr1392 = 0, $shr1398 = 0, $shr1404 = 0;
 var $shr1420 = 0, $shr1426 = 0, $shr1432 = 0, $shr1448 = 0, $shr1454 = 0, $shr1460 = 0, $shr147 = 0, $shr1474 = 0, $shr1480 = 0, $shr1486 = 0, $shr1500 = 0, $shr1506 = 0, $shr1512 = 0, $shr1526 = 0, $shr153 = 0, $shr1532 = 0, $shr1538 = 0, $shr1552 = 0, $shr1558 = 0, $shr1564 = 0;
 var $shr1578 = 0, $shr1584 = 0, $shr1590 = 0, $shr1604 = 0, $shr1610 = 0, $shr1616 = 0, $shr1630 = 0, $shr1636 = 0, $shr164 = 0, $shr1642 = 0, $shr1656 = 0, $shr1662 = 0, $shr1668 = 0, $shr1682 = 0, $shr1688 = 0, $shr1694 = 0, $shr17 = 0, $shr170 = 0, $shr1708 = 0, $shr1714 = 0;
 var $shr1720 = 0, $shr1734 = 0, $shr1740 = 0, $shr1746 = 0, $shr1760 = 0, $shr1766 = 0, $shr1772 = 0, $shr1786 = 0, $shr1792 = 0, $shr1798 = 0, $shr181 = 0, $shr1812 = 0, $shr1818 = 0, $shr1824 = 0, $shr1838 = 0, $shr1844 = 0, $shr1850 = 0, $shr1864 = 0, $shr187 = 0, $shr1870 = 0;
 var $shr1876 = 0, $shr1890 = 0, $shr1896 = 0, $shr1902 = 0, $shr1916 = 0, $shr1922 = 0, $shr1928 = 0, $shr1942 = 0, $shr1948 = 0, $shr1954 = 0, $shr1968 = 0, $shr1974 = 0, $shr198 = 0, $shr204 = 0, $shr215 = 0, $shr221 = 0, $shr232 = 0, $shr238 = 0, $shr249 = 0, $shr255 = 0;
 var $shr266 = 0, $shr272 = 0, $shr28 = 0, $shr287 = 0, $shr293 = 0, $shr299 = 0, $shr314 = 0, $shr320 = 0, $shr326 = 0, $shr34 = 0, $shr341 = 0, $shr347 = 0, $shr353 = 0, $shr368 = 0, $shr374 = 0, $shr380 = 0, $shr394 = 0, $shr400 = 0, $shr406 = 0, $shr420 = 0;
 var $shr426 = 0, $shr432 = 0, $shr446 = 0, $shr45 = 0, $shr452 = 0, $shr458 = 0, $shr472 = 0, $shr478 = 0, $shr484 = 0, $shr498 = 0, $shr504 = 0, $shr51 = 0, $shr510 = 0, $shr524 = 0, $shr530 = 0, $shr536 = 0, $shr550 = 0, $shr556 = 0, $shr562 = 0, $shr576 = 0;
 var $shr582 = 0, $shr588 = 0, $shr602 = 0, $shr608 = 0, $shr614 = 0, $shr62 = 0, $shr628 = 0, $shr634 = 0, $shr640 = 0, $shr654 = 0, $shr660 = 0, $shr666 = 0, $shr68 = 0, $shr680 = 0, $shr686 = 0, $shr692 = 0, $shr706 = 0, $shr712 = 0, $shr718 = 0, $shr732 = 0;
 var $shr738 = 0, $shr744 = 0, $shr758 = 0, $shr764 = 0, $shr770 = 0, $shr784 = 0, $shr79 = 0, $shr790 = 0, $shr796 = 0, $shr810 = 0, $shr816 = 0, $shr822 = 0, $shr836 = 0, $shr842 = 0, $shr848 = 0, $shr85 = 0, $shr862 = 0, $shr868 = 0, $shr874 = 0, $shr888 = 0;
 var $shr894 = 0, $shr900 = 0, $shr916 = 0, $shr922 = 0, $shr928 = 0, $shr944 = 0, $shr950 = 0, $shr956 = 0, $shr96 = 0, $shr972 = 0, $shr978 = 0, $shr984 = 0, $x = 0, $xor = 0, $xor1022 = 0, $xor1024 = 0, $xor1026 = 0, $xor104 = 0, $xor1050 = 0, $xor1052 = 0;
 var $xor1054 = 0, $xor106 = 0, $xor1078 = 0, $xor1080 = 0, $xor1082 = 0, $xor1106 = 0, $xor1108 = 0, $xor1110 = 0, $xor1134 = 0, $xor1136 = 0, $xor1138 = 0, $xor1162 = 0, $xor1164 = 0, $xor1166 = 0, $xor1190 = 0, $xor1192 = 0, $xor1194 = 0, $xor121 = 0, $xor1218 = 0, $xor1220 = 0;
 var $xor1222 = 0, $xor123 = 0, $xor1246 = 0, $xor1248 = 0, $xor1250 = 0, $xor1274 = 0, $xor1276 = 0, $xor1278 = 0, $xor1302 = 0, $xor1304 = 0, $xor1306 = 0, $xor1330 = 0, $xor1332 = 0, $xor1334 = 0, $xor1358 = 0, $xor1360 = 0, $xor1362 = 0, $xor138 = 0, $xor1386 = 0, $xor1388 = 0;
 var $xor1390 = 0, $xor140 = 0, $xor1414 = 0, $xor1416 = 0, $xor1418 = 0, $xor1442 = 0, $xor1444 = 0, $xor1446 = 0, $xor1462 = 0, $xor1463 = 0, $xor1468 = 0, $xor1470 = 0, $xor1472 = 0, $xor1488 = 0, $xor1489 = 0, $xor1494 = 0, $xor1496 = 0, $xor1498 = 0, $xor1514 = 0, $xor1515 = 0;
 var $xor1520 = 0, $xor1522 = 0, $xor1524 = 0, $xor1540 = 0, $xor1541 = 0, $xor1546 = 0, $xor1548 = 0, $xor155 = 0, $xor1550 = 0, $xor1566 = 0, $xor1567 = 0, $xor157 = 0, $xor1572 = 0, $xor1574 = 0, $xor1576 = 0, $xor1592 = 0, $xor1593 = 0, $xor1598 = 0, $xor1600 = 0, $xor1602 = 0;
 var $xor1618 = 0, $xor1619 = 0, $xor1624 = 0, $xor1626 = 0, $xor1628 = 0, $xor1644 = 0, $xor1645 = 0, $xor1650 = 0, $xor1652 = 0, $xor1654 = 0, $xor1670 = 0, $xor1671 = 0, $xor1676 = 0, $xor1678 = 0, $xor1680 = 0, $xor1696 = 0, $xor1697 = 0, $xor1702 = 0, $xor1704 = 0, $xor1706 = 0;
 var $xor172 = 0, $xor1722 = 0, $xor1723 = 0, $xor1728 = 0, $xor1730 = 0, $xor1732 = 0, $xor174 = 0, $xor1748 = 0, $xor1749 = 0, $xor1754 = 0, $xor1756 = 0, $xor1758 = 0, $xor1774 = 0, $xor1775 = 0, $xor1780 = 0, $xor1782 = 0, $xor1784 = 0, $xor1800 = 0, $xor1801 = 0, $xor1806 = 0;
 var $xor1808 = 0, $xor1810 = 0, $xor1826 = 0, $xor1827 = 0, $xor1832 = 0, $xor1834 = 0, $xor1836 = 0, $xor1852 = 0, $xor1853 = 0, $xor1858 = 0, $xor1860 = 0, $xor1862 = 0, $xor1878 = 0, $xor1879 = 0, $xor1884 = 0, $xor1886 = 0, $xor1888 = 0, $xor189 = 0, $xor19 = 0, $xor1904 = 0;
 var $xor1905 = 0, $xor191 = 0, $xor1910 = 0, $xor1912 = 0, $xor1914 = 0, $xor1930 = 0, $xor1931 = 0, $xor1936 = 0, $xor1938 = 0, $xor1940 = 0, $xor1956 = 0, $xor1957 = 0, $xor1962 = 0, $xor1964 = 0, $xor1966 = 0, $xor206 = 0, $xor208 = 0, $xor21 = 0, $xor223 = 0, $xor225 = 0;
 var $xor240 = 0, $xor242 = 0, $xor257 = 0, $xor259 = 0, $xor274 = 0, $xor276 = 0, $xor281 = 0, $xor283 = 0, $xor285 = 0, $xor301 = 0, $xor303 = 0, $xor308 = 0, $xor310 = 0, $xor312 = 0, $xor328 = 0, $xor330 = 0, $xor335 = 0, $xor337 = 0, $xor339 = 0, $xor355 = 0;
 var $xor357 = 0, $xor36 = 0, $xor362 = 0, $xor364 = 0, $xor366 = 0, $xor38 = 0, $xor382 = 0, $xor383 = 0, $xor388 = 0, $xor390 = 0, $xor392 = 0, $xor408 = 0, $xor409 = 0, $xor414 = 0, $xor416 = 0, $xor418 = 0, $xor434 = 0, $xor435 = 0, $xor440 = 0, $xor442 = 0;
 var $xor444 = 0, $xor460 = 0, $xor461 = 0, $xor466 = 0, $xor468 = 0, $xor470 = 0, $xor486 = 0, $xor487 = 0, $xor492 = 0, $xor494 = 0, $xor496 = 0, $xor512 = 0, $xor513 = 0, $xor518 = 0, $xor520 = 0, $xor522 = 0, $xor53 = 0, $xor538 = 0, $xor539 = 0, $xor544 = 0;
 var $xor546 = 0, $xor548 = 0, $xor55 = 0, $xor564 = 0, $xor565 = 0, $xor570 = 0, $xor572 = 0, $xor574 = 0, $xor590 = 0, $xor591 = 0, $xor596 = 0, $xor598 = 0, $xor600 = 0, $xor616 = 0, $xor617 = 0, $xor622 = 0, $xor624 = 0, $xor626 = 0, $xor642 = 0, $xor643 = 0;
 var $xor648 = 0, $xor650 = 0, $xor652 = 0, $xor668 = 0, $xor669 = 0, $xor674 = 0, $xor676 = 0, $xor678 = 0, $xor694 = 0, $xor695 = 0, $xor7 = 0, $xor70 = 0, $xor700 = 0, $xor702 = 0, $xor704 = 0, $xor72 = 0, $xor720 = 0, $xor721 = 0, $xor726 = 0, $xor728 = 0;
 var $xor730 = 0, $xor746 = 0, $xor747 = 0, $xor752 = 0, $xor754 = 0, $xor756 = 0, $xor772 = 0, $xor773 = 0, $xor778 = 0, $xor780 = 0, $xor782 = 0, $xor798 = 0, $xor799 = 0, $xor804 = 0, $xor806 = 0, $xor808 = 0, $xor824 = 0, $xor825 = 0, $xor830 = 0, $xor832 = 0;
 var $xor834 = 0, $xor850 = 0, $xor851 = 0, $xor856 = 0, $xor858 = 0, $xor860 = 0, $xor87 = 0, $xor876 = 0, $xor877 = 0, $xor882 = 0, $xor884 = 0, $xor886 = 0, $xor89 = 0, $xor910 = 0, $xor912 = 0, $xor914 = 0, $xor938 = 0, $xor940 = 0, $xor942 = 0, $xor966 = 0;
 var $xor968 = 0, $xor970 = 0, $xor994 = 0, $xor996 = 0, $xor998 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $x = sp;
 $0 = HEAP32[$hd>>2]|0;
 $h1 = ((($hd)) + 4|0);
 $1 = HEAP32[$h1>>2]|0;
 $h2 = ((($hd)) + 8|0);
 $2 = HEAP32[$h2>>2]|0;
 $h3 = ((($hd)) + 12|0);
 $3 = HEAP32[$h3>>2]|0;
 $h4 = ((($hd)) + 16|0);
 $4 = HEAP32[$h4>>2]|0;
 $incdec$ptr = ((($data)) + 1|0);
 $5 = HEAP8[$data>>0]|0;
 $arrayidx = ((($x)) + 3|0);
 HEAP8[$arrayidx>>0] = $5;
 $incdec$ptr1 = ((($data)) + 2|0);
 $6 = HEAP8[$incdec$ptr>>0]|0;
 $arrayidx2 = ((($x)) + 2|0);
 HEAP8[$arrayidx2>>0] = $6;
 $incdec$ptr3 = ((($data)) + 3|0);
 $7 = HEAP8[$incdec$ptr1>>0]|0;
 $arrayidx4 = ((($x)) + 1|0);
 HEAP8[$arrayidx4>>0] = $7;
 $incdec$ptr5 = ((($data)) + 4|0);
 $8 = HEAP8[$incdec$ptr3>>0]|0;
 HEAP8[$x>>0] = $8;
 $add$ptr856 = ((($x)) + 4|0);
 $incdec$ptr$1 = ((($data)) + 5|0);
 $9 = HEAP8[$incdec$ptr5>>0]|0;
 $arrayidx$1 = ((($add$ptr856)) + 3|0);
 HEAP8[$arrayidx$1>>0] = $9;
 $incdec$ptr1$1 = ((($data)) + 6|0);
 $10 = HEAP8[$incdec$ptr$1>>0]|0;
 $arrayidx2$1 = ((($add$ptr856)) + 2|0);
 HEAP8[$arrayidx2$1>>0] = $10;
 $incdec$ptr3$1 = ((($data)) + 7|0);
 $11 = HEAP8[$incdec$ptr1$1>>0]|0;
 $arrayidx4$1 = ((($add$ptr856)) + 1|0);
 HEAP8[$arrayidx4$1>>0] = $11;
 $incdec$ptr5$1 = ((($data)) + 8|0);
 $12 = HEAP8[$incdec$ptr3$1>>0]|0;
 HEAP8[$add$ptr856>>0] = $12;
 $add$ptr$1857 = ((($x)) + 8|0);
 $incdec$ptr$2 = ((($data)) + 9|0);
 $13 = HEAP8[$incdec$ptr5$1>>0]|0;
 $arrayidx$2 = ((($add$ptr$1857)) + 3|0);
 HEAP8[$arrayidx$2>>0] = $13;
 $incdec$ptr1$2 = ((($data)) + 10|0);
 $14 = HEAP8[$incdec$ptr$2>>0]|0;
 $arrayidx2$2 = ((($add$ptr$1857)) + 2|0);
 HEAP8[$arrayidx2$2>>0] = $14;
 $incdec$ptr3$2 = ((($data)) + 11|0);
 $15 = HEAP8[$incdec$ptr1$2>>0]|0;
 $arrayidx4$2 = ((($add$ptr$1857)) + 1|0);
 HEAP8[$arrayidx4$2>>0] = $15;
 $incdec$ptr5$2 = ((($data)) + 12|0);
 $16 = HEAP8[$incdec$ptr3$2>>0]|0;
 HEAP8[$add$ptr$1857>>0] = $16;
 $add$ptr$2858 = ((($x)) + 12|0);
 $incdec$ptr$3 = ((($data)) + 13|0);
 $17 = HEAP8[$incdec$ptr5$2>>0]|0;
 $arrayidx$3 = ((($add$ptr$2858)) + 3|0);
 HEAP8[$arrayidx$3>>0] = $17;
 $incdec$ptr1$3 = ((($data)) + 14|0);
 $18 = HEAP8[$incdec$ptr$3>>0]|0;
 $arrayidx2$3 = ((($add$ptr$2858)) + 2|0);
 HEAP8[$arrayidx2$3>>0] = $18;
 $incdec$ptr3$3 = ((($data)) + 15|0);
 $19 = HEAP8[$incdec$ptr1$3>>0]|0;
 $arrayidx4$3 = ((($add$ptr$2858)) + 1|0);
 HEAP8[$arrayidx4$3>>0] = $19;
 $incdec$ptr5$3 = ((($data)) + 16|0);
 $20 = HEAP8[$incdec$ptr3$3>>0]|0;
 HEAP8[$add$ptr$2858>>0] = $20;
 $add$ptr$3859 = ((($x)) + 16|0);
 $incdec$ptr$4 = ((($data)) + 17|0);
 $21 = HEAP8[$incdec$ptr5$3>>0]|0;
 $arrayidx$4 = ((($add$ptr$3859)) + 3|0);
 HEAP8[$arrayidx$4>>0] = $21;
 $incdec$ptr1$4 = ((($data)) + 18|0);
 $22 = HEAP8[$incdec$ptr$4>>0]|0;
 $arrayidx2$4 = ((($add$ptr$3859)) + 2|0);
 HEAP8[$arrayidx2$4>>0] = $22;
 $incdec$ptr3$4 = ((($data)) + 19|0);
 $23 = HEAP8[$incdec$ptr1$4>>0]|0;
 $arrayidx4$4 = ((($add$ptr$3859)) + 1|0);
 HEAP8[$arrayidx4$4>>0] = $23;
 $incdec$ptr5$4 = ((($data)) + 20|0);
 $24 = HEAP8[$incdec$ptr3$4>>0]|0;
 HEAP8[$add$ptr$3859>>0] = $24;
 $add$ptr$4860 = ((($x)) + 20|0);
 $incdec$ptr$5 = ((($data)) + 21|0);
 $25 = HEAP8[$incdec$ptr5$4>>0]|0;
 $arrayidx$5 = ((($add$ptr$4860)) + 3|0);
 HEAP8[$arrayidx$5>>0] = $25;
 $incdec$ptr1$5 = ((($data)) + 22|0);
 $26 = HEAP8[$incdec$ptr$5>>0]|0;
 $arrayidx2$5 = ((($add$ptr$4860)) + 2|0);
 HEAP8[$arrayidx2$5>>0] = $26;
 $incdec$ptr3$5 = ((($data)) + 23|0);
 $27 = HEAP8[$incdec$ptr1$5>>0]|0;
 $arrayidx4$5 = ((($add$ptr$4860)) + 1|0);
 HEAP8[$arrayidx4$5>>0] = $27;
 $incdec$ptr5$5 = ((($data)) + 24|0);
 $28 = HEAP8[$incdec$ptr3$5>>0]|0;
 HEAP8[$add$ptr$4860>>0] = $28;
 $add$ptr$5861 = ((($x)) + 24|0);
 $incdec$ptr$6 = ((($data)) + 25|0);
 $29 = HEAP8[$incdec$ptr5$5>>0]|0;
 $arrayidx$6 = ((($add$ptr$5861)) + 3|0);
 HEAP8[$arrayidx$6>>0] = $29;
 $incdec$ptr1$6 = ((($data)) + 26|0);
 $30 = HEAP8[$incdec$ptr$6>>0]|0;
 $arrayidx2$6 = ((($add$ptr$5861)) + 2|0);
 HEAP8[$arrayidx2$6>>0] = $30;
 $incdec$ptr3$6 = ((($data)) + 27|0);
 $31 = HEAP8[$incdec$ptr1$6>>0]|0;
 $arrayidx4$6 = ((($add$ptr$5861)) + 1|0);
 HEAP8[$arrayidx4$6>>0] = $31;
 $incdec$ptr5$6 = ((($data)) + 28|0);
 $32 = HEAP8[$incdec$ptr3$6>>0]|0;
 HEAP8[$add$ptr$5861>>0] = $32;
 $add$ptr$6862 = ((($x)) + 28|0);
 $incdec$ptr$7 = ((($data)) + 29|0);
 $33 = HEAP8[$incdec$ptr5$6>>0]|0;
 $arrayidx$7 = ((($add$ptr$6862)) + 3|0);
 HEAP8[$arrayidx$7>>0] = $33;
 $incdec$ptr1$7 = ((($data)) + 30|0);
 $34 = HEAP8[$incdec$ptr$7>>0]|0;
 $arrayidx2$7 = ((($add$ptr$6862)) + 2|0);
 HEAP8[$arrayidx2$7>>0] = $34;
 $incdec$ptr3$7 = ((($data)) + 31|0);
 $35 = HEAP8[$incdec$ptr1$7>>0]|0;
 $arrayidx4$7 = ((($add$ptr$6862)) + 1|0);
 HEAP8[$arrayidx4$7>>0] = $35;
 $incdec$ptr5$7 = ((($data)) + 32|0);
 $36 = HEAP8[$incdec$ptr3$7>>0]|0;
 HEAP8[$add$ptr$6862>>0] = $36;
 $add$ptr$7863 = ((($x)) + 32|0);
 $incdec$ptr$8 = ((($data)) + 33|0);
 $37 = HEAP8[$incdec$ptr5$7>>0]|0;
 $arrayidx$8 = ((($add$ptr$7863)) + 3|0);
 HEAP8[$arrayidx$8>>0] = $37;
 $incdec$ptr1$8 = ((($data)) + 34|0);
 $38 = HEAP8[$incdec$ptr$8>>0]|0;
 $arrayidx2$8 = ((($add$ptr$7863)) + 2|0);
 HEAP8[$arrayidx2$8>>0] = $38;
 $incdec$ptr3$8 = ((($data)) + 35|0);
 $39 = HEAP8[$incdec$ptr1$8>>0]|0;
 $arrayidx4$8 = ((($add$ptr$7863)) + 1|0);
 HEAP8[$arrayidx4$8>>0] = $39;
 $incdec$ptr5$8 = ((($data)) + 36|0);
 $40 = HEAP8[$incdec$ptr3$8>>0]|0;
 HEAP8[$add$ptr$7863>>0] = $40;
 $add$ptr$8864 = ((($x)) + 36|0);
 $incdec$ptr$9 = ((($data)) + 37|0);
 $41 = HEAP8[$incdec$ptr5$8>>0]|0;
 $arrayidx$9 = ((($add$ptr$8864)) + 3|0);
 HEAP8[$arrayidx$9>>0] = $41;
 $incdec$ptr1$9 = ((($data)) + 38|0);
 $42 = HEAP8[$incdec$ptr$9>>0]|0;
 $arrayidx2$9 = ((($add$ptr$8864)) + 2|0);
 HEAP8[$arrayidx2$9>>0] = $42;
 $incdec$ptr3$9 = ((($data)) + 39|0);
 $43 = HEAP8[$incdec$ptr1$9>>0]|0;
 $arrayidx4$9 = ((($add$ptr$8864)) + 1|0);
 HEAP8[$arrayidx4$9>>0] = $43;
 $incdec$ptr5$9 = ((($data)) + 40|0);
 $44 = HEAP8[$incdec$ptr3$9>>0]|0;
 HEAP8[$add$ptr$8864>>0] = $44;
 $add$ptr$9865 = ((($x)) + 40|0);
 $incdec$ptr$10 = ((($data)) + 41|0);
 $45 = HEAP8[$incdec$ptr5$9>>0]|0;
 $arrayidx$10 = ((($add$ptr$9865)) + 3|0);
 HEAP8[$arrayidx$10>>0] = $45;
 $incdec$ptr1$10 = ((($data)) + 42|0);
 $46 = HEAP8[$incdec$ptr$10>>0]|0;
 $arrayidx2$10 = ((($add$ptr$9865)) + 2|0);
 HEAP8[$arrayidx2$10>>0] = $46;
 $incdec$ptr3$10 = ((($data)) + 43|0);
 $47 = HEAP8[$incdec$ptr1$10>>0]|0;
 $arrayidx4$10 = ((($add$ptr$9865)) + 1|0);
 HEAP8[$arrayidx4$10>>0] = $47;
 $incdec$ptr5$10 = ((($data)) + 44|0);
 $48 = HEAP8[$incdec$ptr3$10>>0]|0;
 HEAP8[$add$ptr$9865>>0] = $48;
 $add$ptr$10866 = ((($x)) + 44|0);
 $incdec$ptr$11 = ((($data)) + 45|0);
 $49 = HEAP8[$incdec$ptr5$10>>0]|0;
 $arrayidx$11 = ((($add$ptr$10866)) + 3|0);
 HEAP8[$arrayidx$11>>0] = $49;
 $incdec$ptr1$11 = ((($data)) + 46|0);
 $50 = HEAP8[$incdec$ptr$11>>0]|0;
 $arrayidx2$11 = ((($add$ptr$10866)) + 2|0);
 HEAP8[$arrayidx2$11>>0] = $50;
 $incdec$ptr3$11 = ((($data)) + 47|0);
 $51 = HEAP8[$incdec$ptr1$11>>0]|0;
 $arrayidx4$11 = ((($add$ptr$10866)) + 1|0);
 HEAP8[$arrayidx4$11>>0] = $51;
 $incdec$ptr5$11 = ((($data)) + 48|0);
 $52 = HEAP8[$incdec$ptr3$11>>0]|0;
 HEAP8[$add$ptr$10866>>0] = $52;
 $add$ptr$11867 = ((($x)) + 48|0);
 $incdec$ptr$12 = ((($data)) + 49|0);
 $53 = HEAP8[$incdec$ptr5$11>>0]|0;
 $arrayidx$12 = ((($add$ptr$11867)) + 3|0);
 HEAP8[$arrayidx$12>>0] = $53;
 $incdec$ptr1$12 = ((($data)) + 50|0);
 $54 = HEAP8[$incdec$ptr$12>>0]|0;
 $arrayidx2$12 = ((($add$ptr$11867)) + 2|0);
 HEAP8[$arrayidx2$12>>0] = $54;
 $incdec$ptr3$12 = ((($data)) + 51|0);
 $55 = HEAP8[$incdec$ptr1$12>>0]|0;
 $arrayidx4$12 = ((($add$ptr$11867)) + 1|0);
 HEAP8[$arrayidx4$12>>0] = $55;
 $incdec$ptr5$12 = ((($data)) + 52|0);
 $56 = HEAP8[$incdec$ptr3$12>>0]|0;
 HEAP8[$add$ptr$11867>>0] = $56;
 $add$ptr$12868 = ((($x)) + 52|0);
 $incdec$ptr$13 = ((($data)) + 53|0);
 $57 = HEAP8[$incdec$ptr5$12>>0]|0;
 $arrayidx$13 = ((($add$ptr$12868)) + 3|0);
 HEAP8[$arrayidx$13>>0] = $57;
 $incdec$ptr1$13 = ((($data)) + 54|0);
 $58 = HEAP8[$incdec$ptr$13>>0]|0;
 $arrayidx2$13 = ((($add$ptr$12868)) + 2|0);
 HEAP8[$arrayidx2$13>>0] = $58;
 $incdec$ptr3$13 = ((($data)) + 55|0);
 $59 = HEAP8[$incdec$ptr1$13>>0]|0;
 $arrayidx4$13 = ((($add$ptr$12868)) + 1|0);
 HEAP8[$arrayidx4$13>>0] = $59;
 $incdec$ptr5$13 = ((($data)) + 56|0);
 $60 = HEAP8[$incdec$ptr3$13>>0]|0;
 HEAP8[$add$ptr$12868>>0] = $60;
 $add$ptr$13869 = ((($x)) + 56|0);
 $incdec$ptr$14 = ((($data)) + 57|0);
 $61 = HEAP8[$incdec$ptr5$13>>0]|0;
 $arrayidx$14 = ((($add$ptr$13869)) + 3|0);
 HEAP8[$arrayidx$14>>0] = $61;
 $incdec$ptr1$14 = ((($data)) + 58|0);
 $62 = HEAP8[$incdec$ptr$14>>0]|0;
 $arrayidx2$14 = ((($add$ptr$13869)) + 2|0);
 HEAP8[$arrayidx2$14>>0] = $62;
 $incdec$ptr3$14 = ((($data)) + 59|0);
 $63 = HEAP8[$incdec$ptr1$14>>0]|0;
 $arrayidx4$14 = ((($add$ptr$13869)) + 1|0);
 HEAP8[$arrayidx4$14>>0] = $63;
 $incdec$ptr5$14 = ((($data)) + 60|0);
 $64 = HEAP8[$incdec$ptr3$14>>0]|0;
 HEAP8[$add$ptr$13869>>0] = $64;
 $add$ptr$14870 = ((($x)) + 60|0);
 $incdec$ptr$15 = ((($data)) + 61|0);
 $65 = HEAP8[$incdec$ptr5$14>>0]|0;
 $arrayidx$15 = ((($add$ptr$14870)) + 3|0);
 HEAP8[$arrayidx$15>>0] = $65;
 $incdec$ptr1$15 = ((($data)) + 62|0);
 $66 = HEAP8[$incdec$ptr$15>>0]|0;
 $arrayidx2$15 = ((($add$ptr$14870)) + 2|0);
 HEAP8[$arrayidx2$15>>0] = $66;
 $incdec$ptr3$15 = ((($data)) + 63|0);
 $67 = HEAP8[$incdec$ptr1$15>>0]|0;
 $arrayidx4$15 = ((($add$ptr$14870)) + 1|0);
 HEAP8[$arrayidx4$15>>0] = $67;
 $68 = HEAP8[$incdec$ptr3$15>>0]|0;
 HEAP8[$add$ptr$14870>>0] = $68;
 $shl = $0 << 5;
 $shr = $0 >>> 27;
 $or = $shl | $shr;
 $xor = $3 ^ $2;
 $and = $xor & $1;
 $xor7 = $and ^ $3;
 $69 = HEAP32[$x>>2]|0;
 $add = (($or) + 1518500249)|0;
 $add8 = (($add) + ($4))|0;
 $add10 = (($add8) + ($xor7))|0;
 $add11 = (($add10) + ($69))|0;
 $shl12 = $1 << 30;
 $shr13 = $1 >>> 2;
 $or14 = $shl12 | $shr13;
 $shl16 = $add11 << 5;
 $shr17 = $add11 >>> 27;
 $or18 = $shl16 | $shr17;
 $xor19 = $or14 ^ $2;
 $and20 = $xor19 & $0;
 $xor21 = $and20 ^ $2;
 $arrayidx24 = ((($x)) + 4|0);
 $70 = HEAP32[$arrayidx24>>2]|0;
 $add22 = (($3) + 1518500249)|0;
 $add23 = (($add22) + ($xor21))|0;
 $add25 = (($add23) + ($70))|0;
 $add26 = (($add25) + ($or18))|0;
 $shl27 = $0 << 30;
 $shr28 = $0 >>> 2;
 $or29 = $shl27 | $shr28;
 $shl33 = $add26 << 5;
 $shr34 = $add26 >>> 27;
 $or35 = $shl33 | $shr34;
 $xor36 = $or14 ^ $or29;
 $and37 = $add11 & $xor36;
 $xor38 = $and37 ^ $or14;
 $arrayidx41 = ((($x)) + 8|0);
 $71 = HEAP32[$arrayidx41>>2]|0;
 $add39 = (($2) + 1518500249)|0;
 $add40 = (($add39) + ($71))|0;
 $add42 = (($add40) + ($xor38))|0;
 $add43 = (($add42) + ($or35))|0;
 $shl44 = $add11 << 30;
 $shr45 = $add11 >>> 2;
 $or46 = $shl44 | $shr45;
 $shl50 = $add43 << 5;
 $shr51 = $add43 >>> 27;
 $or52 = $shl50 | $shr51;
 $xor53 = $or46 ^ $or29;
 $and54 = $add26 & $xor53;
 $xor55 = $and54 ^ $or29;
 $arrayidx58 = ((($x)) + 12|0);
 $72 = HEAP32[$arrayidx58>>2]|0;
 $add56 = (($or14) + 1518500249)|0;
 $add57 = (($add56) + ($72))|0;
 $add59 = (($add57) + ($xor55))|0;
 $add60 = (($add59) + ($or52))|0;
 $shl61 = $add26 << 30;
 $shr62 = $add26 >>> 2;
 $or63 = $shl61 | $shr62;
 $shl67 = $add60 << 5;
 $shr68 = $add60 >>> 27;
 $or69 = $shl67 | $shr68;
 $xor70 = $or63 ^ $or46;
 $and71 = $add43 & $xor70;
 $xor72 = $and71 ^ $or46;
 $arrayidx75 = ((($x)) + 16|0);
 $73 = HEAP32[$arrayidx75>>2]|0;
 $add73 = (($or29) + 1518500249)|0;
 $add74 = (($add73) + ($73))|0;
 $add76 = (($add74) + ($xor72))|0;
 $add77 = (($add76) + ($or69))|0;
 $shl78 = $add43 << 30;
 $shr79 = $add43 >>> 2;
 $or80 = $shl78 | $shr79;
 $shl84 = $add77 << 5;
 $shr85 = $add77 >>> 27;
 $or86 = $shl84 | $shr85;
 $xor87 = $or80 ^ $or63;
 $and88 = $add60 & $xor87;
 $xor89 = $and88 ^ $or63;
 $arrayidx92 = ((($x)) + 20|0);
 $74 = HEAP32[$arrayidx92>>2]|0;
 $add90 = (($or46) + 1518500249)|0;
 $add91 = (($add90) + ($74))|0;
 $add93 = (($add91) + ($xor89))|0;
 $add94 = (($add93) + ($or86))|0;
 $shl95 = $add60 << 30;
 $shr96 = $add60 >>> 2;
 $or97 = $shl95 | $shr96;
 $shl101 = $add94 << 5;
 $shr102 = $add94 >>> 27;
 $or103 = $shl101 | $shr102;
 $xor104 = $or97 ^ $or80;
 $and105 = $add77 & $xor104;
 $xor106 = $and105 ^ $or80;
 $arrayidx109 = ((($x)) + 24|0);
 $75 = HEAP32[$arrayidx109>>2]|0;
 $add107 = (($75) + 1518500249)|0;
 $add108 = (($add107) + ($or63))|0;
 $add110 = (($add108) + ($xor106))|0;
 $add111 = (($add110) + ($or103))|0;
 $shl112 = $add77 << 30;
 $shr113 = $add77 >>> 2;
 $or114 = $shl112 | $shr113;
 $shl118 = $add111 << 5;
 $shr119 = $add111 >>> 27;
 $or120 = $shl118 | $shr119;
 $xor121 = $or114 ^ $or97;
 $and122 = $add94 & $xor121;
 $xor123 = $and122 ^ $or97;
 $arrayidx126 = ((($x)) + 28|0);
 $76 = HEAP32[$arrayidx126>>2]|0;
 $add124 = (($76) + 1518500249)|0;
 $add125 = (($add124) + ($or80))|0;
 $add127 = (($add125) + ($xor123))|0;
 $add128 = (($add127) + ($or120))|0;
 $shl129 = $add94 << 30;
 $shr130 = $add94 >>> 2;
 $or131 = $shl129 | $shr130;
 $shl135 = $add128 << 5;
 $shr136 = $add128 >>> 27;
 $or137 = $shl135 | $shr136;
 $xor138 = $or131 ^ $or114;
 $and139 = $add111 & $xor138;
 $xor140 = $and139 ^ $or114;
 $arrayidx143 = ((($x)) + 32|0);
 $77 = HEAP32[$arrayidx143>>2]|0;
 $add141 = (($77) + 1518500249)|0;
 $add142 = (($add141) + ($or97))|0;
 $add144 = (($add142) + ($xor140))|0;
 $add145 = (($add144) + ($or137))|0;
 $shl146 = $add111 << 30;
 $shr147 = $add111 >>> 2;
 $or148 = $shl146 | $shr147;
 $shl152 = $add145 << 5;
 $shr153 = $add145 >>> 27;
 $or154 = $shl152 | $shr153;
 $xor155 = $or148 ^ $or131;
 $and156 = $add128 & $xor155;
 $xor157 = $and156 ^ $or131;
 $arrayidx160 = ((($x)) + 36|0);
 $78 = HEAP32[$arrayidx160>>2]|0;
 $add158 = (($78) + 1518500249)|0;
 $add159 = (($add158) + ($or114))|0;
 $add161 = (($add159) + ($xor157))|0;
 $add162 = (($add161) + ($or154))|0;
 $shl163 = $add128 << 30;
 $shr164 = $add128 >>> 2;
 $or165 = $shl163 | $shr164;
 $shl169 = $add162 << 5;
 $shr170 = $add162 >>> 27;
 $or171 = $shl169 | $shr170;
 $xor172 = $or165 ^ $or148;
 $and173 = $add145 & $xor172;
 $xor174 = $and173 ^ $or148;
 $arrayidx177 = ((($x)) + 40|0);
 $79 = HEAP32[$arrayidx177>>2]|0;
 $add175 = (($79) + 1518500249)|0;
 $add176 = (($add175) + ($or131))|0;
 $add178 = (($add176) + ($xor174))|0;
 $add179 = (($add178) + ($or171))|0;
 $shl180 = $add145 << 30;
 $shr181 = $add145 >>> 2;
 $or182 = $shl180 | $shr181;
 $shl186 = $add179 << 5;
 $shr187 = $add179 >>> 27;
 $or188 = $shl186 | $shr187;
 $xor189 = $or182 ^ $or165;
 $and190 = $add162 & $xor189;
 $xor191 = $and190 ^ $or165;
 $arrayidx194 = ((($x)) + 44|0);
 $80 = HEAP32[$arrayidx194>>2]|0;
 $add192 = (($80) + 1518500249)|0;
 $add193 = (($add192) + ($or148))|0;
 $add195 = (($add193) + ($xor191))|0;
 $add196 = (($add195) + ($or188))|0;
 $shl197 = $add162 << 30;
 $shr198 = $add162 >>> 2;
 $or199 = $shl197 | $shr198;
 $shl203 = $add196 << 5;
 $shr204 = $add196 >>> 27;
 $or205 = $shl203 | $shr204;
 $xor206 = $or199 ^ $or182;
 $and207 = $add179 & $xor206;
 $xor208 = $and207 ^ $or182;
 $arrayidx211 = ((($x)) + 48|0);
 $81 = HEAP32[$arrayidx211>>2]|0;
 $add209 = (($81) + 1518500249)|0;
 $add210 = (($add209) + ($or165))|0;
 $add212 = (($add210) + ($xor208))|0;
 $add213 = (($add212) + ($or205))|0;
 $shl214 = $add179 << 30;
 $shr215 = $add179 >>> 2;
 $or216 = $shl214 | $shr215;
 $shl220 = $add213 << 5;
 $shr221 = $add213 >>> 27;
 $or222 = $shl220 | $shr221;
 $xor223 = $or216 ^ $or199;
 $and224 = $add196 & $xor223;
 $xor225 = $and224 ^ $or199;
 $arrayidx228 = ((($x)) + 52|0);
 $82 = HEAP32[$arrayidx228>>2]|0;
 $add226 = (($82) + 1518500249)|0;
 $add227 = (($add226) + ($or182))|0;
 $add229 = (($add227) + ($xor225))|0;
 $add230 = (($add229) + ($or222))|0;
 $shl231 = $add196 << 30;
 $shr232 = $add196 >>> 2;
 $or233 = $shl231 | $shr232;
 $shl237 = $add230 << 5;
 $shr238 = $add230 >>> 27;
 $or239 = $shl237 | $shr238;
 $xor240 = $or233 ^ $or216;
 $and241 = $add213 & $xor240;
 $xor242 = $and241 ^ $or216;
 $arrayidx245 = ((($x)) + 56|0);
 $83 = HEAP32[$arrayidx245>>2]|0;
 $add243 = (($83) + 1518500249)|0;
 $add244 = (($add243) + ($or199))|0;
 $add246 = (($add244) + ($xor242))|0;
 $add247 = (($add246) + ($or239))|0;
 $shl248 = $add213 << 30;
 $shr249 = $add213 >>> 2;
 $or250 = $shl248 | $shr249;
 $shl254 = $add247 << 5;
 $shr255 = $add247 >>> 27;
 $or256 = $shl254 | $shr255;
 $xor257 = $or250 ^ $or233;
 $and258 = $add230 & $xor257;
 $xor259 = $and258 ^ $or233;
 $arrayidx262 = ((($x)) + 60|0);
 $84 = HEAP32[$arrayidx262>>2]|0;
 $add260 = (($84) + 1518500249)|0;
 $add261 = (($add260) + ($or216))|0;
 $add263 = (($add261) + ($xor259))|0;
 $add264 = (($add263) + ($or256))|0;
 $shl265 = $add230 << 30;
 $shr266 = $add230 >>> 2;
 $or267 = $shl265 | $shr266;
 $shl271 = $add264 << 5;
 $shr272 = $add264 >>> 27;
 $or273 = $shl271 | $shr272;
 $xor274 = $or267 ^ $or250;
 $and275 = $add247 & $xor274;
 $xor276 = $and275 ^ $or250;
 $xor281 = $71 ^ $69;
 $xor283 = $xor281 ^ $77;
 $xor285 = $xor283 ^ $82;
 $shl286 = $xor285 << 1;
 $shr287 = $xor285 >>> 31;
 $or288 = $shl286 | $shr287;
 $add277 = (($or288) + 1518500249)|0;
 $add278 = (($add277) + ($or233))|0;
 $add290 = (($add278) + ($xor276))|0;
 $add291 = (($add290) + ($or273))|0;
 $shl292 = $add247 << 30;
 $shr293 = $add247 >>> 2;
 $or294 = $shl292 | $shr293;
 $shl298 = $add291 << 5;
 $shr299 = $add291 >>> 27;
 $or300 = $shl298 | $shr299;
 $xor301 = $or294 ^ $or267;
 $and302 = $add264 & $xor301;
 $xor303 = $and302 ^ $or267;
 $xor308 = $72 ^ $70;
 $xor310 = $xor308 ^ $78;
 $xor312 = $xor310 ^ $83;
 $shl313 = $xor312 << 1;
 $shr314 = $xor312 >>> 31;
 $or315 = $shl313 | $shr314;
 $add304 = (($or315) + 1518500249)|0;
 $add305 = (($add304) + ($or250))|0;
 $add317 = (($add305) + ($xor303))|0;
 $add318 = (($add317) + ($or300))|0;
 $shl319 = $add264 << 30;
 $shr320 = $add264 >>> 2;
 $or321 = $shl319 | $shr320;
 $shl325 = $add318 << 5;
 $shr326 = $add318 >>> 27;
 $or327 = $shl325 | $shr326;
 $xor328 = $or321 ^ $or294;
 $and329 = $add291 & $xor328;
 $xor330 = $and329 ^ $or294;
 $xor335 = $73 ^ $71;
 $xor337 = $xor335 ^ $79;
 $xor339 = $xor337 ^ $84;
 $shl340 = $xor339 << 1;
 $shr341 = $xor339 >>> 31;
 $or342 = $shl340 | $shr341;
 $add331 = (($or342) + 1518500249)|0;
 $add332 = (($add331) + ($or267))|0;
 $add344 = (($add332) + ($xor330))|0;
 $add345 = (($add344) + ($or327))|0;
 $shl346 = $add291 << 30;
 $shr347 = $add291 >>> 2;
 $or348 = $shl346 | $shr347;
 $shl352 = $add345 << 5;
 $shr353 = $add345 >>> 27;
 $or354 = $shl352 | $shr353;
 $xor355 = $or348 ^ $or321;
 $and356 = $add318 & $xor355;
 $xor357 = $and356 ^ $or321;
 $xor362 = $74 ^ $72;
 $xor364 = $xor362 ^ $80;
 $xor366 = $xor364 ^ $or288;
 $shl367 = $xor366 << 1;
 $shr368 = $xor366 >>> 31;
 $or369 = $shl367 | $shr368;
 $add358 = (($or369) + 1518500249)|0;
 $add359 = (($add358) + ($or294))|0;
 $add371 = (($add359) + ($xor357))|0;
 $add372 = (($add371) + ($or354))|0;
 $shl373 = $add318 << 30;
 $shr374 = $add318 >>> 2;
 $or375 = $shl373 | $shr374;
 $shl379 = $add372 << 5;
 $shr380 = $add372 >>> 27;
 $or381 = $shl379 | $shr380;
 $xor382 = $or375 ^ $or348;
 $xor383 = $xor382 ^ $add345;
 $xor388 = $75 ^ $73;
 $xor390 = $xor388 ^ $81;
 $xor392 = $xor390 ^ $or315;
 $shl393 = $xor392 << 1;
 $shr394 = $xor392 >>> 31;
 $or395 = $shl393 | $shr394;
 $add384 = (($or395) + 1859775393)|0;
 $add385 = (($add384) + ($or321))|0;
 $add397 = (($add385) + ($xor383))|0;
 $add398 = (($add397) + ($or381))|0;
 $shl399 = $add345 << 30;
 $shr400 = $add345 >>> 2;
 $or401 = $shl399 | $shr400;
 $shl405 = $add398 << 5;
 $shr406 = $add398 >>> 27;
 $or407 = $shl405 | $shr406;
 $xor408 = $or401 ^ $or375;
 $xor409 = $xor408 ^ $add372;
 $xor414 = $76 ^ $74;
 $xor416 = $xor414 ^ $82;
 $xor418 = $xor416 ^ $or342;
 $shl419 = $xor418 << 1;
 $shr420 = $xor418 >>> 31;
 $or421 = $shl419 | $shr420;
 $add410 = (($or421) + 1859775393)|0;
 $add411 = (($add410) + ($or348))|0;
 $add423 = (($add411) + ($xor409))|0;
 $add424 = (($add423) + ($or407))|0;
 $shl425 = $add372 << 30;
 $shr426 = $add372 >>> 2;
 $or427 = $shl425 | $shr426;
 $shl431 = $add424 << 5;
 $shr432 = $add424 >>> 27;
 $or433 = $shl431 | $shr432;
 $xor434 = $or427 ^ $or401;
 $xor435 = $xor434 ^ $add398;
 $xor440 = $77 ^ $75;
 $xor442 = $xor440 ^ $83;
 $xor444 = $xor442 ^ $or369;
 $shl445 = $xor444 << 1;
 $shr446 = $xor444 >>> 31;
 $or447 = $shl445 | $shr446;
 $add436 = (($or447) + 1859775393)|0;
 $add437 = (($add436) + ($or375))|0;
 $add449 = (($add437) + ($xor435))|0;
 $add450 = (($add449) + ($or433))|0;
 $shl451 = $add398 << 30;
 $shr452 = $add398 >>> 2;
 $or453 = $shl451 | $shr452;
 $shl457 = $add450 << 5;
 $shr458 = $add450 >>> 27;
 $or459 = $shl457 | $shr458;
 $xor460 = $or453 ^ $or427;
 $xor461 = $xor460 ^ $add424;
 $xor466 = $78 ^ $76;
 $xor468 = $xor466 ^ $84;
 $xor470 = $xor468 ^ $or395;
 $shl471 = $xor470 << 1;
 $shr472 = $xor470 >>> 31;
 $or473 = $shl471 | $shr472;
 $add462 = (($or473) + 1859775393)|0;
 $add463 = (($add462) + ($or401))|0;
 $add475 = (($add463) + ($xor461))|0;
 $add476 = (($add475) + ($or459))|0;
 $shl477 = $add424 << 30;
 $shr478 = $add424 >>> 2;
 $or479 = $shl477 | $shr478;
 $shl483 = $add476 << 5;
 $shr484 = $add476 >>> 27;
 $or485 = $shl483 | $shr484;
 $xor486 = $or479 ^ $or453;
 $xor487 = $xor486 ^ $add450;
 $xor492 = $79 ^ $77;
 $xor494 = $xor492 ^ $or288;
 $xor496 = $xor494 ^ $or421;
 $shl497 = $xor496 << 1;
 $shr498 = $xor496 >>> 31;
 $or499 = $shl497 | $shr498;
 $add488 = (($or499) + 1859775393)|0;
 $add489 = (($add488) + ($or427))|0;
 $add501 = (($add489) + ($xor487))|0;
 $add502 = (($add501) + ($or485))|0;
 $shl503 = $add450 << 30;
 $shr504 = $add450 >>> 2;
 $or505 = $shl503 | $shr504;
 $shl509 = $add502 << 5;
 $shr510 = $add502 >>> 27;
 $or511 = $shl509 | $shr510;
 $xor512 = $or505 ^ $or479;
 $xor513 = $xor512 ^ $add476;
 $xor518 = $80 ^ $78;
 $xor520 = $xor518 ^ $or315;
 $xor522 = $xor520 ^ $or447;
 $shl523 = $xor522 << 1;
 $shr524 = $xor522 >>> 31;
 $or525 = $shl523 | $shr524;
 $add514 = (($or525) + 1859775393)|0;
 $add515 = (($add514) + ($or453))|0;
 $add527 = (($add515) + ($xor513))|0;
 $add528 = (($add527) + ($or511))|0;
 $shl529 = $add476 << 30;
 $shr530 = $add476 >>> 2;
 $or531 = $shl529 | $shr530;
 $shl535 = $add528 << 5;
 $shr536 = $add528 >>> 27;
 $or537 = $shl535 | $shr536;
 $xor538 = $or531 ^ $or505;
 $xor539 = $xor538 ^ $add502;
 $xor544 = $81 ^ $79;
 $xor546 = $xor544 ^ $or342;
 $xor548 = $xor546 ^ $or473;
 $shl549 = $xor548 << 1;
 $shr550 = $xor548 >>> 31;
 $or551 = $shl549 | $shr550;
 $add540 = (($or551) + 1859775393)|0;
 $add541 = (($add540) + ($or479))|0;
 $add553 = (($add541) + ($xor539))|0;
 $add554 = (($add553) + ($or537))|0;
 $shl555 = $add502 << 30;
 $shr556 = $add502 >>> 2;
 $or557 = $shl555 | $shr556;
 $shl561 = $add554 << 5;
 $shr562 = $add554 >>> 27;
 $or563 = $shl561 | $shr562;
 $xor564 = $or557 ^ $or531;
 $xor565 = $xor564 ^ $add528;
 $xor570 = $82 ^ $80;
 $xor572 = $xor570 ^ $or369;
 $xor574 = $xor572 ^ $or499;
 $shl575 = $xor574 << 1;
 $shr576 = $xor574 >>> 31;
 $or577 = $shl575 | $shr576;
 $add566 = (($or577) + 1859775393)|0;
 $add567 = (($add566) + ($or505))|0;
 $add579 = (($add567) + ($xor565))|0;
 $add580 = (($add579) + ($or563))|0;
 $shl581 = $add528 << 30;
 $shr582 = $add528 >>> 2;
 $or583 = $shl581 | $shr582;
 $shl587 = $add580 << 5;
 $shr588 = $add580 >>> 27;
 $or589 = $shl587 | $shr588;
 $xor590 = $or583 ^ $or557;
 $xor591 = $xor590 ^ $add554;
 $xor596 = $83 ^ $81;
 $xor598 = $xor596 ^ $or395;
 $xor600 = $xor598 ^ $or525;
 $shl601 = $xor600 << 1;
 $shr602 = $xor600 >>> 31;
 $or603 = $shl601 | $shr602;
 $add592 = (($or603) + 1859775393)|0;
 $add593 = (($add592) + ($or531))|0;
 $add605 = (($add593) + ($xor591))|0;
 $add606 = (($add605) + ($or589))|0;
 $shl607 = $add554 << 30;
 $shr608 = $add554 >>> 2;
 $or609 = $shl607 | $shr608;
 $shl613 = $add606 << 5;
 $shr614 = $add606 >>> 27;
 $or615 = $shl613 | $shr614;
 $xor616 = $or609 ^ $or583;
 $xor617 = $xor616 ^ $add580;
 $xor622 = $84 ^ $82;
 $xor624 = $xor622 ^ $or421;
 $xor626 = $xor624 ^ $or551;
 $shl627 = $xor626 << 1;
 $shr628 = $xor626 >>> 31;
 $or629 = $shl627 | $shr628;
 $add618 = (($or629) + 1859775393)|0;
 $add619 = (($add618) + ($or557))|0;
 $add631 = (($add619) + ($xor617))|0;
 $add632 = (($add631) + ($or615))|0;
 $shl633 = $add580 << 30;
 $shr634 = $add580 >>> 2;
 $or635 = $shl633 | $shr634;
 $shl639 = $add632 << 5;
 $shr640 = $add632 >>> 27;
 $or641 = $shl639 | $shr640;
 $xor642 = $or635 ^ $or609;
 $xor643 = $xor642 ^ $add606;
 $xor648 = $or288 ^ $83;
 $xor650 = $xor648 ^ $or447;
 $xor652 = $xor650 ^ $or577;
 $shl653 = $xor652 << 1;
 $shr654 = $xor652 >>> 31;
 $or655 = $shl653 | $shr654;
 $add644 = (($or655) + 1859775393)|0;
 $add645 = (($add644) + ($or583))|0;
 $add657 = (($add645) + ($xor643))|0;
 $add658 = (($add657) + ($or641))|0;
 $shl659 = $add606 << 30;
 $shr660 = $add606 >>> 2;
 $or661 = $shl659 | $shr660;
 $shl665 = $add658 << 5;
 $shr666 = $add658 >>> 27;
 $or667 = $shl665 | $shr666;
 $xor668 = $or661 ^ $or635;
 $xor669 = $xor668 ^ $add632;
 $xor674 = $or315 ^ $84;
 $xor676 = $xor674 ^ $or473;
 $xor678 = $xor676 ^ $or603;
 $shl679 = $xor678 << 1;
 $shr680 = $xor678 >>> 31;
 $or681 = $shl679 | $shr680;
 $add670 = (($or681) + 1859775393)|0;
 $add671 = (($add670) + ($or609))|0;
 $add683 = (($add671) + ($xor669))|0;
 $add684 = (($add683) + ($or667))|0;
 $shl685 = $add632 << 30;
 $shr686 = $add632 >>> 2;
 $or687 = $shl685 | $shr686;
 $shl691 = $add684 << 5;
 $shr692 = $add684 >>> 27;
 $or693 = $shl691 | $shr692;
 $xor694 = $or687 ^ $or661;
 $xor695 = $xor694 ^ $add658;
 $xor700 = $or342 ^ $or288;
 $xor702 = $xor700 ^ $or499;
 $xor704 = $xor702 ^ $or629;
 $shl705 = $xor704 << 1;
 $shr706 = $xor704 >>> 31;
 $or707 = $shl705 | $shr706;
 $add696 = (($or707) + 1859775393)|0;
 $add697 = (($add696) + ($or635))|0;
 $add709 = (($add697) + ($xor695))|0;
 $add710 = (($add709) + ($or693))|0;
 $shl711 = $add658 << 30;
 $shr712 = $add658 >>> 2;
 $or713 = $shl711 | $shr712;
 $shl717 = $add710 << 5;
 $shr718 = $add710 >>> 27;
 $or719 = $shl717 | $shr718;
 $xor720 = $or713 ^ $or687;
 $xor721 = $xor720 ^ $add684;
 $xor726 = $or369 ^ $or315;
 $xor728 = $xor726 ^ $or525;
 $xor730 = $xor728 ^ $or655;
 $shl731 = $xor730 << 1;
 $shr732 = $xor730 >>> 31;
 $or733 = $shl731 | $shr732;
 $add722 = (($or733) + 1859775393)|0;
 $add723 = (($add722) + ($or661))|0;
 $add735 = (($add723) + ($xor721))|0;
 $add736 = (($add735) + ($or719))|0;
 $shl737 = $add684 << 30;
 $shr738 = $add684 >>> 2;
 $or739 = $shl737 | $shr738;
 $shl743 = $add736 << 5;
 $shr744 = $add736 >>> 27;
 $or745 = $shl743 | $shr744;
 $xor746 = $or739 ^ $or713;
 $xor747 = $xor746 ^ $add710;
 $xor752 = $or395 ^ $or342;
 $xor754 = $xor752 ^ $or551;
 $xor756 = $xor754 ^ $or681;
 $shl757 = $xor756 << 1;
 $shr758 = $xor756 >>> 31;
 $or759 = $shl757 | $shr758;
 $add748 = (($or759) + 1859775393)|0;
 $add749 = (($add748) + ($or687))|0;
 $add761 = (($add749) + ($xor747))|0;
 $add762 = (($add761) + ($or745))|0;
 $shl763 = $add710 << 30;
 $shr764 = $add710 >>> 2;
 $or765 = $shl763 | $shr764;
 $shl769 = $add762 << 5;
 $shr770 = $add762 >>> 27;
 $or771 = $shl769 | $shr770;
 $xor772 = $or765 ^ $or739;
 $xor773 = $xor772 ^ $add736;
 $xor778 = $or421 ^ $or369;
 $xor780 = $xor778 ^ $or577;
 $xor782 = $xor780 ^ $or707;
 $shl783 = $xor782 << 1;
 $shr784 = $xor782 >>> 31;
 $or785 = $shl783 | $shr784;
 $add774 = (($or785) + 1859775393)|0;
 $add775 = (($add774) + ($or713))|0;
 $add787 = (($add775) + ($xor773))|0;
 $add788 = (($add787) + ($or771))|0;
 $shl789 = $add736 << 30;
 $shr790 = $add736 >>> 2;
 $or791 = $shl789 | $shr790;
 $shl795 = $add788 << 5;
 $shr796 = $add788 >>> 27;
 $or797 = $shl795 | $shr796;
 $xor798 = $or791 ^ $or765;
 $xor799 = $xor798 ^ $add762;
 $xor804 = $or447 ^ $or395;
 $xor806 = $xor804 ^ $or603;
 $xor808 = $xor806 ^ $or733;
 $shl809 = $xor808 << 1;
 $shr810 = $xor808 >>> 31;
 $or811 = $shl809 | $shr810;
 $add800 = (($or811) + 1859775393)|0;
 $add801 = (($add800) + ($or739))|0;
 $add813 = (($add801) + ($xor799))|0;
 $add814 = (($add813) + ($or797))|0;
 $shl815 = $add762 << 30;
 $shr816 = $add762 >>> 2;
 $or817 = $shl815 | $shr816;
 $shl821 = $add814 << 5;
 $shr822 = $add814 >>> 27;
 $or823 = $shl821 | $shr822;
 $xor824 = $or817 ^ $or791;
 $xor825 = $xor824 ^ $add788;
 $xor830 = $or473 ^ $or421;
 $xor832 = $xor830 ^ $or629;
 $xor834 = $xor832 ^ $or759;
 $shl835 = $xor834 << 1;
 $shr836 = $xor834 >>> 31;
 $or837 = $shl835 | $shr836;
 $add826 = (($or837) + 1859775393)|0;
 $add827 = (($add826) + ($or765))|0;
 $add839 = (($add827) + ($xor825))|0;
 $add840 = (($add839) + ($or823))|0;
 $shl841 = $add788 << 30;
 $shr842 = $add788 >>> 2;
 $or843 = $shl841 | $shr842;
 $shl847 = $add840 << 5;
 $shr848 = $add840 >>> 27;
 $or849 = $shl847 | $shr848;
 $xor850 = $or843 ^ $or817;
 $xor851 = $xor850 ^ $add814;
 $xor856 = $or499 ^ $or447;
 $xor858 = $xor856 ^ $or655;
 $xor860 = $xor858 ^ $or785;
 $shl861 = $xor860 << 1;
 $shr862 = $xor860 >>> 31;
 $or863 = $shl861 | $shr862;
 $add852 = (($or863) + 1859775393)|0;
 $add853 = (($add852) + ($or791))|0;
 $add865 = (($add853) + ($xor851))|0;
 $add866 = (($add865) + ($or849))|0;
 $shl867 = $add814 << 30;
 $shr868 = $add814 >>> 2;
 $or869 = $shl867 | $shr868;
 $shl873 = $add866 << 5;
 $shr874 = $add866 >>> 27;
 $or875 = $shl873 | $shr874;
 $xor876 = $or869 ^ $or843;
 $xor877 = $xor876 ^ $add840;
 $xor882 = $or525 ^ $or473;
 $xor884 = $xor882 ^ $or681;
 $xor886 = $xor884 ^ $or811;
 $shl887 = $xor886 << 1;
 $shr888 = $xor886 >>> 31;
 $or889 = $shl887 | $shr888;
 $add878 = (($or889) + 1859775393)|0;
 $add879 = (($add878) + ($or817))|0;
 $add891 = (($add879) + ($xor877))|0;
 $add892 = (($add891) + ($or875))|0;
 $shl893 = $add840 << 30;
 $shr894 = $add840 >>> 2;
 $or895 = $shl893 | $shr894;
 $shl899 = $add892 << 5;
 $shr900 = $add892 >>> 27;
 $or901 = $shl899 | $shr900;
 $and902 = $add866 & $or895;
 $or903 = $add866 | $or895;
 $and904 = $or903 & $or869;
 $or905 = $and904 | $and902;
 $xor910 = $or551 ^ $or499;
 $xor912 = $xor910 ^ $or707;
 $xor914 = $xor912 ^ $or837;
 $shl915 = $xor914 << 1;
 $shr916 = $xor914 >>> 31;
 $or917 = $shl915 | $shr916;
 $add906 = (($or917) + -1894007588)|0;
 $add907 = (($add906) + ($or843))|0;
 $add919 = (($add907) + ($or905))|0;
 $add920 = (($add919) + ($or901))|0;
 $shl921 = $add866 << 30;
 $shr922 = $add866 >>> 2;
 $or923 = $shl921 | $shr922;
 $shl927 = $add920 << 5;
 $shr928 = $add920 >>> 27;
 $or929 = $shl927 | $shr928;
 $and930 = $add892 & $or923;
 $or931 = $add892 | $or923;
 $and932 = $or931 & $or895;
 $or933 = $and932 | $and930;
 $xor938 = $or577 ^ $or525;
 $xor940 = $xor938 ^ $or733;
 $xor942 = $xor940 ^ $or863;
 $shl943 = $xor942 << 1;
 $shr944 = $xor942 >>> 31;
 $or945 = $shl943 | $shr944;
 $add934 = (($or945) + -1894007588)|0;
 $add935 = (($add934) + ($or869))|0;
 $add947 = (($add935) + ($or933))|0;
 $add948 = (($add947) + ($or929))|0;
 $shl949 = $add892 << 30;
 $shr950 = $add892 >>> 2;
 $or951 = $shl949 | $shr950;
 $shl955 = $add948 << 5;
 $shr956 = $add948 >>> 27;
 $or957 = $shl955 | $shr956;
 $and958 = $add920 & $or951;
 $or959 = $add920 | $or951;
 $and960 = $or959 & $or923;
 $or961 = $and960 | $and958;
 $xor966 = $or603 ^ $or551;
 $xor968 = $xor966 ^ $or759;
 $xor970 = $xor968 ^ $or889;
 $shl971 = $xor970 << 1;
 $shr972 = $xor970 >>> 31;
 $or973 = $shl971 | $shr972;
 $add962 = (($or973) + -1894007588)|0;
 $add963 = (($add962) + ($or895))|0;
 $add975 = (($add963) + ($or961))|0;
 $add976 = (($add975) + ($or957))|0;
 $shl977 = $add920 << 30;
 $shr978 = $add920 >>> 2;
 $or979 = $shl977 | $shr978;
 $shl983 = $add976 << 5;
 $shr984 = $add976 >>> 27;
 $or985 = $shl983 | $shr984;
 $and986 = $add948 & $or979;
 $or987 = $add948 | $or979;
 $and988 = $or987 & $or951;
 $or989 = $and988 | $and986;
 $xor994 = $or629 ^ $or577;
 $xor996 = $xor994 ^ $or785;
 $xor998 = $xor996 ^ $or917;
 $shl999 = $xor998 << 1;
 $shr1000 = $xor998 >>> 31;
 $or1001 = $shl999 | $shr1000;
 $add990 = (($or1001) + -1894007588)|0;
 $add991 = (($add990) + ($or923))|0;
 $add1003 = (($add991) + ($or989))|0;
 $add1004 = (($add1003) + ($or985))|0;
 $shl1005 = $add948 << 30;
 $shr1006 = $add948 >>> 2;
 $or1007 = $shl1005 | $shr1006;
 $shl1011 = $add1004 << 5;
 $shr1012 = $add1004 >>> 27;
 $or1013 = $shl1011 | $shr1012;
 $and1014 = $add976 & $or1007;
 $or1015 = $add976 | $or1007;
 $and1016 = $or1015 & $or979;
 $or1017 = $and1016 | $and1014;
 $xor1022 = $or655 ^ $or603;
 $xor1024 = $xor1022 ^ $or811;
 $xor1026 = $xor1024 ^ $or945;
 $shl1027 = $xor1026 << 1;
 $shr1028 = $xor1026 >>> 31;
 $or1029 = $shl1027 | $shr1028;
 $add1018 = (($or1029) + -1894007588)|0;
 $add1019 = (($add1018) + ($or951))|0;
 $add1031 = (($add1019) + ($or1017))|0;
 $add1032 = (($add1031) + ($or1013))|0;
 $shl1033 = $add976 << 30;
 $shr1034 = $add976 >>> 2;
 $or1035 = $shl1033 | $shr1034;
 $shl1039 = $add1032 << 5;
 $shr1040 = $add1032 >>> 27;
 $or1041 = $shl1039 | $shr1040;
 $and1042 = $add1004 & $or1035;
 $or1043 = $add1004 | $or1035;
 $and1044 = $or1043 & $or1007;
 $or1045 = $and1044 | $and1042;
 $xor1050 = $or681 ^ $or629;
 $xor1052 = $xor1050 ^ $or837;
 $xor1054 = $xor1052 ^ $or973;
 $shl1055 = $xor1054 << 1;
 $shr1056 = $xor1054 >>> 31;
 $or1057 = $shl1055 | $shr1056;
 $add1046 = (($or1057) + -1894007588)|0;
 $add1047 = (($add1046) + ($or979))|0;
 $add1059 = (($add1047) + ($or1045))|0;
 $add1060 = (($add1059) + ($or1041))|0;
 $shl1061 = $add1004 << 30;
 $shr1062 = $add1004 >>> 2;
 $or1063 = $shl1061 | $shr1062;
 $shl1067 = $add1060 << 5;
 $shr1068 = $add1060 >>> 27;
 $or1069 = $shl1067 | $shr1068;
 $and1070 = $add1032 & $or1063;
 $or1071 = $add1032 | $or1063;
 $and1072 = $or1071 & $or1035;
 $or1073 = $and1072 | $and1070;
 $xor1078 = $or707 ^ $or655;
 $xor1080 = $xor1078 ^ $or863;
 $xor1082 = $xor1080 ^ $or1001;
 $shl1083 = $xor1082 << 1;
 $shr1084 = $xor1082 >>> 31;
 $or1085 = $shl1083 | $shr1084;
 $add1074 = (($or1085) + -1894007588)|0;
 $add1075 = (($add1074) + ($or1007))|0;
 $add1087 = (($add1075) + ($or1073))|0;
 $add1088 = (($add1087) + ($or1069))|0;
 $shl1089 = $add1032 << 30;
 $shr1090 = $add1032 >>> 2;
 $or1091 = $shl1089 | $shr1090;
 $shl1095 = $add1088 << 5;
 $shr1096 = $add1088 >>> 27;
 $or1097 = $shl1095 | $shr1096;
 $and1098 = $add1060 & $or1091;
 $or1099 = $add1060 | $or1091;
 $and1100 = $or1099 & $or1063;
 $or1101 = $and1100 | $and1098;
 $xor1106 = $or733 ^ $or681;
 $xor1108 = $xor1106 ^ $or889;
 $xor1110 = $xor1108 ^ $or1029;
 $shl1111 = $xor1110 << 1;
 $shr1112 = $xor1110 >>> 31;
 $or1113 = $shl1111 | $shr1112;
 $add1102 = (($or1113) + -1894007588)|0;
 $add1103 = (($add1102) + ($or1035))|0;
 $add1115 = (($add1103) + ($or1101))|0;
 $add1116 = (($add1115) + ($or1097))|0;
 $shl1117 = $add1060 << 30;
 $shr1118 = $add1060 >>> 2;
 $or1119 = $shl1117 | $shr1118;
 $shl1123 = $add1116 << 5;
 $shr1124 = $add1116 >>> 27;
 $or1125 = $shl1123 | $shr1124;
 $and1126 = $add1088 & $or1119;
 $or1127 = $add1088 | $or1119;
 $and1128 = $or1127 & $or1091;
 $or1129 = $and1128 | $and1126;
 $xor1134 = $or759 ^ $or707;
 $xor1136 = $xor1134 ^ $or917;
 $xor1138 = $xor1136 ^ $or1057;
 $shl1139 = $xor1138 << 1;
 $shr1140 = $xor1138 >>> 31;
 $or1141 = $shl1139 | $shr1140;
 $add1130 = (($or1141) + -1894007588)|0;
 $add1131 = (($add1130) + ($or1063))|0;
 $add1143 = (($add1131) + ($or1129))|0;
 $add1144 = (($add1143) + ($or1125))|0;
 $shl1145 = $add1088 << 30;
 $shr1146 = $add1088 >>> 2;
 $or1147 = $shl1145 | $shr1146;
 $shl1151 = $add1144 << 5;
 $shr1152 = $add1144 >>> 27;
 $or1153 = $shl1151 | $shr1152;
 $and1154 = $add1116 & $or1147;
 $or1155 = $add1116 | $or1147;
 $and1156 = $or1155 & $or1119;
 $or1157 = $and1156 | $and1154;
 $xor1162 = $or785 ^ $or733;
 $xor1164 = $xor1162 ^ $or945;
 $xor1166 = $xor1164 ^ $or1085;
 $shl1167 = $xor1166 << 1;
 $shr1168 = $xor1166 >>> 31;
 $or1169 = $shl1167 | $shr1168;
 $add1158 = (($or1169) + -1894007588)|0;
 $add1159 = (($add1158) + ($or1091))|0;
 $add1171 = (($add1159) + ($or1157))|0;
 $add1172 = (($add1171) + ($or1153))|0;
 $shl1173 = $add1116 << 30;
 $shr1174 = $add1116 >>> 2;
 $or1175 = $shl1173 | $shr1174;
 $shl1179 = $add1172 << 5;
 $shr1180 = $add1172 >>> 27;
 $or1181 = $shl1179 | $shr1180;
 $and1182 = $add1144 & $or1175;
 $or1183 = $add1144 | $or1175;
 $and1184 = $or1183 & $or1147;
 $or1185 = $and1184 | $and1182;
 $xor1190 = $or811 ^ $or759;
 $xor1192 = $xor1190 ^ $or973;
 $xor1194 = $xor1192 ^ $or1113;
 $shl1195 = $xor1194 << 1;
 $shr1196 = $xor1194 >>> 31;
 $or1197 = $shl1195 | $shr1196;
 $add1186 = (($or1197) + -1894007588)|0;
 $add1187 = (($add1186) + ($or1119))|0;
 $add1199 = (($add1187) + ($or1185))|0;
 $add1200 = (($add1199) + ($or1181))|0;
 $shl1201 = $add1144 << 30;
 $shr1202 = $add1144 >>> 2;
 $or1203 = $shl1201 | $shr1202;
 $shl1207 = $add1200 << 5;
 $shr1208 = $add1200 >>> 27;
 $or1209 = $shl1207 | $shr1208;
 $and1210 = $add1172 & $or1203;
 $or1211 = $add1172 | $or1203;
 $and1212 = $or1211 & $or1175;
 $or1213 = $and1212 | $and1210;
 $xor1218 = $or837 ^ $or785;
 $xor1220 = $xor1218 ^ $or1001;
 $xor1222 = $xor1220 ^ $or1141;
 $shl1223 = $xor1222 << 1;
 $shr1224 = $xor1222 >>> 31;
 $or1225 = $shl1223 | $shr1224;
 $add1214 = (($or1225) + -1894007588)|0;
 $add1215 = (($add1214) + ($or1147))|0;
 $add1227 = (($add1215) + ($or1213))|0;
 $add1228 = (($add1227) + ($or1209))|0;
 $shl1229 = $add1172 << 30;
 $shr1230 = $add1172 >>> 2;
 $or1231 = $shl1229 | $shr1230;
 $shl1235 = $add1228 << 5;
 $shr1236 = $add1228 >>> 27;
 $or1237 = $shl1235 | $shr1236;
 $and1238 = $add1200 & $or1231;
 $or1239 = $add1200 | $or1231;
 $and1240 = $or1239 & $or1203;
 $or1241 = $and1240 | $and1238;
 $xor1246 = $or863 ^ $or811;
 $xor1248 = $xor1246 ^ $or1029;
 $xor1250 = $xor1248 ^ $or1169;
 $shl1251 = $xor1250 << 1;
 $shr1252 = $xor1250 >>> 31;
 $or1253 = $shl1251 | $shr1252;
 $add1242 = (($or1253) + -1894007588)|0;
 $add1243 = (($add1242) + ($or1175))|0;
 $add1255 = (($add1243) + ($or1241))|0;
 $add1256 = (($add1255) + ($or1237))|0;
 $shl1257 = $add1200 << 30;
 $shr1258 = $add1200 >>> 2;
 $or1259 = $shl1257 | $shr1258;
 $shl1263 = $add1256 << 5;
 $shr1264 = $add1256 >>> 27;
 $or1265 = $shl1263 | $shr1264;
 $and1266 = $add1228 & $or1259;
 $or1267 = $add1228 | $or1259;
 $and1268 = $or1267 & $or1231;
 $or1269 = $and1268 | $and1266;
 $xor1274 = $or889 ^ $or837;
 $xor1276 = $xor1274 ^ $or1057;
 $xor1278 = $xor1276 ^ $or1197;
 $shl1279 = $xor1278 << 1;
 $shr1280 = $xor1278 >>> 31;
 $or1281 = $shl1279 | $shr1280;
 $add1270 = (($or1281) + -1894007588)|0;
 $add1271 = (($add1270) + ($or1203))|0;
 $add1283 = (($add1271) + ($or1269))|0;
 $add1284 = (($add1283) + ($or1265))|0;
 $shl1285 = $add1228 << 30;
 $shr1286 = $add1228 >>> 2;
 $or1287 = $shl1285 | $shr1286;
 $shl1291 = $add1284 << 5;
 $shr1292 = $add1284 >>> 27;
 $or1293 = $shl1291 | $shr1292;
 $and1294 = $add1256 & $or1287;
 $or1295 = $add1256 | $or1287;
 $and1296 = $or1295 & $or1259;
 $or1297 = $and1296 | $and1294;
 $xor1302 = $or917 ^ $or863;
 $xor1304 = $xor1302 ^ $or1085;
 $xor1306 = $xor1304 ^ $or1225;
 $shl1307 = $xor1306 << 1;
 $shr1308 = $xor1306 >>> 31;
 $or1309 = $shl1307 | $shr1308;
 $add1298 = (($or1309) + -1894007588)|0;
 $add1299 = (($add1298) + ($or1231))|0;
 $add1311 = (($add1299) + ($or1297))|0;
 $add1312 = (($add1311) + ($or1293))|0;
 $shl1313 = $add1256 << 30;
 $shr1314 = $add1256 >>> 2;
 $or1315 = $shl1313 | $shr1314;
 $shl1319 = $add1312 << 5;
 $shr1320 = $add1312 >>> 27;
 $or1321 = $shl1319 | $shr1320;
 $and1322 = $add1284 & $or1315;
 $or1323 = $add1284 | $or1315;
 $and1324 = $or1323 & $or1287;
 $or1325 = $and1324 | $and1322;
 $xor1330 = $or945 ^ $or889;
 $xor1332 = $xor1330 ^ $or1113;
 $xor1334 = $xor1332 ^ $or1253;
 $shl1335 = $xor1334 << 1;
 $shr1336 = $xor1334 >>> 31;
 $or1337 = $shl1335 | $shr1336;
 $add1326 = (($or1337) + -1894007588)|0;
 $add1327 = (($add1326) + ($or1259))|0;
 $add1339 = (($add1327) + ($or1325))|0;
 $add1340 = (($add1339) + ($or1321))|0;
 $shl1341 = $add1284 << 30;
 $shr1342 = $add1284 >>> 2;
 $or1343 = $shl1341 | $shr1342;
 $shl1347 = $add1340 << 5;
 $shr1348 = $add1340 >>> 27;
 $or1349 = $shl1347 | $shr1348;
 $and1350 = $add1312 & $or1343;
 $or1351 = $add1312 | $or1343;
 $and1352 = $or1351 & $or1315;
 $or1353 = $and1352 | $and1350;
 $xor1358 = $or973 ^ $or917;
 $xor1360 = $xor1358 ^ $or1141;
 $xor1362 = $xor1360 ^ $or1281;
 $shl1363 = $xor1362 << 1;
 $shr1364 = $xor1362 >>> 31;
 $or1365 = $shl1363 | $shr1364;
 $add1354 = (($or1365) + -1894007588)|0;
 $add1355 = (($add1354) + ($or1287))|0;
 $add1367 = (($add1355) + ($or1353))|0;
 $add1368 = (($add1367) + ($or1349))|0;
 $shl1369 = $add1312 << 30;
 $shr1370 = $add1312 >>> 2;
 $or1371 = $shl1369 | $shr1370;
 $shl1375 = $add1368 << 5;
 $shr1376 = $add1368 >>> 27;
 $or1377 = $shl1375 | $shr1376;
 $and1378 = $add1340 & $or1371;
 $or1379 = $add1340 | $or1371;
 $and1380 = $or1379 & $or1343;
 $or1381 = $and1380 | $and1378;
 $xor1386 = $or1001 ^ $or945;
 $xor1388 = $xor1386 ^ $or1169;
 $xor1390 = $xor1388 ^ $or1309;
 $shl1391 = $xor1390 << 1;
 $shr1392 = $xor1390 >>> 31;
 $or1393 = $shl1391 | $shr1392;
 $add1382 = (($or1393) + -1894007588)|0;
 $add1383 = (($add1382) + ($or1315))|0;
 $add1395 = (($add1383) + ($or1381))|0;
 $add1396 = (($add1395) + ($or1377))|0;
 $shl1397 = $add1340 << 30;
 $shr1398 = $add1340 >>> 2;
 $or1399 = $shl1397 | $shr1398;
 $shl1403 = $add1396 << 5;
 $shr1404 = $add1396 >>> 27;
 $or1405 = $shl1403 | $shr1404;
 $and1406 = $add1368 & $or1399;
 $or1407 = $add1368 | $or1399;
 $and1408 = $or1407 & $or1371;
 $or1409 = $and1408 | $and1406;
 $xor1414 = $or1029 ^ $or973;
 $xor1416 = $xor1414 ^ $or1197;
 $xor1418 = $xor1416 ^ $or1337;
 $shl1419 = $xor1418 << 1;
 $shr1420 = $xor1418 >>> 31;
 $or1421 = $shl1419 | $shr1420;
 $add1410 = (($or1421) + -1894007588)|0;
 $add1411 = (($add1410) + ($or1343))|0;
 $add1423 = (($add1411) + ($or1409))|0;
 $add1424 = (($add1423) + ($or1405))|0;
 $shl1425 = $add1368 << 30;
 $shr1426 = $add1368 >>> 2;
 $or1427 = $shl1425 | $shr1426;
 $shl1431 = $add1424 << 5;
 $shr1432 = $add1424 >>> 27;
 $or1433 = $shl1431 | $shr1432;
 $and1434 = $add1396 & $or1427;
 $or1435 = $add1396 | $or1427;
 $and1436 = $or1435 & $or1399;
 $or1437 = $and1436 | $and1434;
 $xor1442 = $or1057 ^ $or1001;
 $xor1444 = $xor1442 ^ $or1225;
 $xor1446 = $xor1444 ^ $or1365;
 $shl1447 = $xor1446 << 1;
 $shr1448 = $xor1446 >>> 31;
 $or1449 = $shl1447 | $shr1448;
 $add1438 = (($or1449) + -1894007588)|0;
 $add1439 = (($add1438) + ($or1371))|0;
 $add1451 = (($add1439) + ($or1437))|0;
 $add1452 = (($add1451) + ($or1433))|0;
 $shl1453 = $add1396 << 30;
 $shr1454 = $add1396 >>> 2;
 $or1455 = $shl1453 | $shr1454;
 $shl1459 = $add1452 << 5;
 $shr1460 = $add1452 >>> 27;
 $or1461 = $shl1459 | $shr1460;
 $xor1462 = $or1455 ^ $or1427;
 $xor1463 = $xor1462 ^ $add1424;
 $xor1468 = $or1085 ^ $or1029;
 $xor1470 = $xor1468 ^ $or1253;
 $xor1472 = $xor1470 ^ $or1393;
 $shl1473 = $xor1472 << 1;
 $shr1474 = $xor1472 >>> 31;
 $or1475 = $shl1473 | $shr1474;
 $add1464 = (($or1475) + -899497514)|0;
 $add1465 = (($add1464) + ($or1399))|0;
 $add1477 = (($add1465) + ($xor1463))|0;
 $add1478 = (($add1477) + ($or1461))|0;
 $shl1479 = $add1424 << 30;
 $shr1480 = $add1424 >>> 2;
 $or1481 = $shl1479 | $shr1480;
 $shl1485 = $add1478 << 5;
 $shr1486 = $add1478 >>> 27;
 $or1487 = $shl1485 | $shr1486;
 $xor1488 = $or1481 ^ $or1455;
 $xor1489 = $xor1488 ^ $add1452;
 $xor1494 = $or1113 ^ $or1057;
 $xor1496 = $xor1494 ^ $or1281;
 $xor1498 = $xor1496 ^ $or1421;
 $shl1499 = $xor1498 << 1;
 $shr1500 = $xor1498 >>> 31;
 $or1501 = $shl1499 | $shr1500;
 $add1490 = (($or1501) + -899497514)|0;
 $add1491 = (($add1490) + ($or1427))|0;
 $add1503 = (($add1491) + ($xor1489))|0;
 $add1504 = (($add1503) + ($or1487))|0;
 $shl1505 = $add1452 << 30;
 $shr1506 = $add1452 >>> 2;
 $or1507 = $shl1505 | $shr1506;
 $shl1511 = $add1504 << 5;
 $shr1512 = $add1504 >>> 27;
 $or1513 = $shl1511 | $shr1512;
 $xor1514 = $or1507 ^ $or1481;
 $xor1515 = $xor1514 ^ $add1478;
 $xor1520 = $or1141 ^ $or1085;
 $xor1522 = $xor1520 ^ $or1309;
 $xor1524 = $xor1522 ^ $or1449;
 $shl1525 = $xor1524 << 1;
 $shr1526 = $xor1524 >>> 31;
 $or1527 = $shl1525 | $shr1526;
 $add1516 = (($or1527) + -899497514)|0;
 $add1517 = (($add1516) + ($or1455))|0;
 $add1529 = (($add1517) + ($xor1515))|0;
 $add1530 = (($add1529) + ($or1513))|0;
 $shl1531 = $add1478 << 30;
 $shr1532 = $add1478 >>> 2;
 $or1533 = $shl1531 | $shr1532;
 $shl1537 = $add1530 << 5;
 $shr1538 = $add1530 >>> 27;
 $or1539 = $shl1537 | $shr1538;
 $xor1540 = $or1533 ^ $or1507;
 $xor1541 = $xor1540 ^ $add1504;
 $xor1546 = $or1169 ^ $or1113;
 $xor1548 = $xor1546 ^ $or1337;
 $xor1550 = $xor1548 ^ $or1475;
 $shl1551 = $xor1550 << 1;
 $shr1552 = $xor1550 >>> 31;
 $or1553 = $shl1551 | $shr1552;
 $add1542 = (($or1553) + -899497514)|0;
 $add1543 = (($add1542) + ($or1481))|0;
 $add1555 = (($add1543) + ($xor1541))|0;
 $add1556 = (($add1555) + ($or1539))|0;
 $shl1557 = $add1504 << 30;
 $shr1558 = $add1504 >>> 2;
 $or1559 = $shl1557 | $shr1558;
 $shl1563 = $add1556 << 5;
 $shr1564 = $add1556 >>> 27;
 $or1565 = $shl1563 | $shr1564;
 $xor1566 = $or1559 ^ $or1533;
 $xor1567 = $xor1566 ^ $add1530;
 $xor1572 = $or1197 ^ $or1141;
 $xor1574 = $xor1572 ^ $or1365;
 $xor1576 = $xor1574 ^ $or1501;
 $shl1577 = $xor1576 << 1;
 $shr1578 = $xor1576 >>> 31;
 $or1579 = $shl1577 | $shr1578;
 $add1568 = (($or1579) + -899497514)|0;
 $add1569 = (($add1568) + ($or1507))|0;
 $add1581 = (($add1569) + ($xor1567))|0;
 $add1582 = (($add1581) + ($or1565))|0;
 $shl1583 = $add1530 << 30;
 $shr1584 = $add1530 >>> 2;
 $or1585 = $shl1583 | $shr1584;
 $shl1589 = $add1582 << 5;
 $shr1590 = $add1582 >>> 27;
 $or1591 = $shl1589 | $shr1590;
 $xor1592 = $or1585 ^ $or1559;
 $xor1593 = $xor1592 ^ $add1556;
 $xor1598 = $or1225 ^ $or1169;
 $xor1600 = $xor1598 ^ $or1393;
 $xor1602 = $xor1600 ^ $or1527;
 $shl1603 = $xor1602 << 1;
 $shr1604 = $xor1602 >>> 31;
 $or1605 = $shl1603 | $shr1604;
 $add1594 = (($or1605) + -899497514)|0;
 $add1595 = (($add1594) + ($or1533))|0;
 $add1607 = (($add1595) + ($xor1593))|0;
 $add1608 = (($add1607) + ($or1591))|0;
 $shl1609 = $add1556 << 30;
 $shr1610 = $add1556 >>> 2;
 $or1611 = $shl1609 | $shr1610;
 $shl1615 = $add1608 << 5;
 $shr1616 = $add1608 >>> 27;
 $or1617 = $shl1615 | $shr1616;
 $xor1618 = $or1611 ^ $or1585;
 $xor1619 = $xor1618 ^ $add1582;
 $xor1624 = $or1253 ^ $or1197;
 $xor1626 = $xor1624 ^ $or1421;
 $xor1628 = $xor1626 ^ $or1553;
 $shl1629 = $xor1628 << 1;
 $shr1630 = $xor1628 >>> 31;
 $or1631 = $shl1629 | $shr1630;
 $add1620 = (($or1631) + -899497514)|0;
 $add1621 = (($add1620) + ($or1559))|0;
 $add1633 = (($add1621) + ($xor1619))|0;
 $add1634 = (($add1633) + ($or1617))|0;
 $shl1635 = $add1582 << 30;
 $shr1636 = $add1582 >>> 2;
 $or1637 = $shl1635 | $shr1636;
 $shl1641 = $add1634 << 5;
 $shr1642 = $add1634 >>> 27;
 $or1643 = $shl1641 | $shr1642;
 $xor1644 = $or1637 ^ $or1611;
 $xor1645 = $xor1644 ^ $add1608;
 $xor1650 = $or1281 ^ $or1225;
 $xor1652 = $xor1650 ^ $or1449;
 $xor1654 = $xor1652 ^ $or1579;
 $shl1655 = $xor1654 << 1;
 $shr1656 = $xor1654 >>> 31;
 $or1657 = $shl1655 | $shr1656;
 $add1646 = (($or1657) + -899497514)|0;
 $add1647 = (($add1646) + ($or1585))|0;
 $add1659 = (($add1647) + ($xor1645))|0;
 $add1660 = (($add1659) + ($or1643))|0;
 $shl1661 = $add1608 << 30;
 $shr1662 = $add1608 >>> 2;
 $or1663 = $shl1661 | $shr1662;
 $shl1667 = $add1660 << 5;
 $shr1668 = $add1660 >>> 27;
 $or1669 = $shl1667 | $shr1668;
 $xor1670 = $or1663 ^ $or1637;
 $xor1671 = $xor1670 ^ $add1634;
 $xor1676 = $or1309 ^ $or1253;
 $xor1678 = $xor1676 ^ $or1475;
 $xor1680 = $xor1678 ^ $or1605;
 $shl1681 = $xor1680 << 1;
 $shr1682 = $xor1680 >>> 31;
 $or1683 = $shl1681 | $shr1682;
 $add1672 = (($or1683) + -899497514)|0;
 $add1673 = (($add1672) + ($or1611))|0;
 $add1685 = (($add1673) + ($xor1671))|0;
 $add1686 = (($add1685) + ($or1669))|0;
 $shl1687 = $add1634 << 30;
 $shr1688 = $add1634 >>> 2;
 $or1689 = $shl1687 | $shr1688;
 $shl1693 = $add1686 << 5;
 $shr1694 = $add1686 >>> 27;
 $or1695 = $shl1693 | $shr1694;
 $xor1696 = $or1689 ^ $or1663;
 $xor1697 = $xor1696 ^ $add1660;
 $xor1702 = $or1337 ^ $or1281;
 $xor1704 = $xor1702 ^ $or1501;
 $xor1706 = $xor1704 ^ $or1631;
 $shl1707 = $xor1706 << 1;
 $shr1708 = $xor1706 >>> 31;
 $or1709 = $shl1707 | $shr1708;
 $add1698 = (($or1709) + -899497514)|0;
 $add1699 = (($add1698) + ($or1637))|0;
 $add1711 = (($add1699) + ($xor1697))|0;
 $add1712 = (($add1711) + ($or1695))|0;
 $shl1713 = $add1660 << 30;
 $shr1714 = $add1660 >>> 2;
 $or1715 = $shl1713 | $shr1714;
 $shl1719 = $add1712 << 5;
 $shr1720 = $add1712 >>> 27;
 $or1721 = $shl1719 | $shr1720;
 $xor1722 = $or1715 ^ $or1689;
 $xor1723 = $xor1722 ^ $add1686;
 $xor1728 = $or1365 ^ $or1309;
 $xor1730 = $xor1728 ^ $or1527;
 $xor1732 = $xor1730 ^ $or1657;
 $shl1733 = $xor1732 << 1;
 $shr1734 = $xor1732 >>> 31;
 $or1735 = $shl1733 | $shr1734;
 $add1724 = (($or1735) + -899497514)|0;
 $add1725 = (($add1724) + ($or1663))|0;
 $add1737 = (($add1725) + ($xor1723))|0;
 $add1738 = (($add1737) + ($or1721))|0;
 $shl1739 = $add1686 << 30;
 $shr1740 = $add1686 >>> 2;
 $or1741 = $shl1739 | $shr1740;
 $shl1745 = $add1738 << 5;
 $shr1746 = $add1738 >>> 27;
 $or1747 = $shl1745 | $shr1746;
 $xor1748 = $or1741 ^ $or1715;
 $xor1749 = $xor1748 ^ $add1712;
 $xor1754 = $or1393 ^ $or1337;
 $xor1756 = $xor1754 ^ $or1553;
 $xor1758 = $xor1756 ^ $or1683;
 $shl1759 = $xor1758 << 1;
 $shr1760 = $xor1758 >>> 31;
 $or1761 = $shl1759 | $shr1760;
 $add1750 = (($or1761) + -899497514)|0;
 $add1751 = (($add1750) + ($or1689))|0;
 $add1763 = (($add1751) + ($xor1749))|0;
 $add1764 = (($add1763) + ($or1747))|0;
 $shl1765 = $add1712 << 30;
 $shr1766 = $add1712 >>> 2;
 $or1767 = $shl1765 | $shr1766;
 $shl1771 = $add1764 << 5;
 $shr1772 = $add1764 >>> 27;
 $or1773 = $shl1771 | $shr1772;
 $xor1774 = $or1767 ^ $or1741;
 $xor1775 = $xor1774 ^ $add1738;
 $xor1780 = $or1421 ^ $or1365;
 $xor1782 = $xor1780 ^ $or1579;
 $xor1784 = $xor1782 ^ $or1709;
 $shl1785 = $xor1784 << 1;
 $shr1786 = $xor1784 >>> 31;
 $or1787 = $shl1785 | $shr1786;
 $add1776 = (($or1787) + -899497514)|0;
 $add1777 = (($add1776) + ($or1715))|0;
 $add1789 = (($add1777) + ($xor1775))|0;
 $add1790 = (($add1789) + ($or1773))|0;
 $shl1791 = $add1738 << 30;
 $shr1792 = $add1738 >>> 2;
 $or1793 = $shl1791 | $shr1792;
 $shl1797 = $add1790 << 5;
 $shr1798 = $add1790 >>> 27;
 $or1799 = $shl1797 | $shr1798;
 $xor1800 = $or1793 ^ $or1767;
 $xor1801 = $xor1800 ^ $add1764;
 $xor1806 = $or1449 ^ $or1393;
 $xor1808 = $xor1806 ^ $or1605;
 $xor1810 = $xor1808 ^ $or1735;
 $shl1811 = $xor1810 << 1;
 $shr1812 = $xor1810 >>> 31;
 $or1813 = $shl1811 | $shr1812;
 $add1802 = (($or1813) + -899497514)|0;
 $add1803 = (($add1802) + ($or1741))|0;
 $add1815 = (($add1803) + ($xor1801))|0;
 $add1816 = (($add1815) + ($or1799))|0;
 $shl1817 = $add1764 << 30;
 $shr1818 = $add1764 >>> 2;
 $or1819 = $shl1817 | $shr1818;
 $shl1823 = $add1816 << 5;
 $shr1824 = $add1816 >>> 27;
 $or1825 = $shl1823 | $shr1824;
 $xor1826 = $or1819 ^ $or1793;
 $xor1827 = $xor1826 ^ $add1790;
 $xor1832 = $or1475 ^ $or1421;
 $xor1834 = $xor1832 ^ $or1631;
 $xor1836 = $xor1834 ^ $or1761;
 $shl1837 = $xor1836 << 1;
 $shr1838 = $xor1836 >>> 31;
 $or1839 = $shl1837 | $shr1838;
 $add1828 = (($or1839) + -899497514)|0;
 $add1829 = (($add1828) + ($or1767))|0;
 $add1841 = (($add1829) + ($xor1827))|0;
 $add1842 = (($add1841) + ($or1825))|0;
 $shl1843 = $add1790 << 30;
 $shr1844 = $add1790 >>> 2;
 $or1845 = $shl1843 | $shr1844;
 $shl1849 = $add1842 << 5;
 $shr1850 = $add1842 >>> 27;
 $or1851 = $shl1849 | $shr1850;
 $xor1852 = $or1845 ^ $or1819;
 $xor1853 = $xor1852 ^ $add1816;
 $xor1858 = $or1501 ^ $or1449;
 $xor1860 = $xor1858 ^ $or1657;
 $xor1862 = $xor1860 ^ $or1787;
 $shl1863 = $xor1862 << 1;
 $shr1864 = $xor1862 >>> 31;
 $or1865 = $shl1863 | $shr1864;
 $add1854 = (($or1865) + -899497514)|0;
 $add1855 = (($add1854) + ($or1793))|0;
 $add1867 = (($add1855) + ($xor1853))|0;
 $add1868 = (($add1867) + ($or1851))|0;
 $shl1869 = $add1816 << 30;
 $shr1870 = $add1816 >>> 2;
 $or1871 = $shl1869 | $shr1870;
 $shl1875 = $add1868 << 5;
 $shr1876 = $add1868 >>> 27;
 $or1877 = $shl1875 | $shr1876;
 $xor1878 = $or1871 ^ $or1845;
 $xor1879 = $xor1878 ^ $add1842;
 $xor1884 = $or1527 ^ $or1475;
 $xor1886 = $xor1884 ^ $or1683;
 $xor1888 = $xor1886 ^ $or1813;
 $shl1889 = $xor1888 << 1;
 $shr1890 = $xor1888 >>> 31;
 $or1891 = $shl1889 | $shr1890;
 $add1880 = (($or1891) + -899497514)|0;
 $add1881 = (($add1880) + ($or1819))|0;
 $add1893 = (($add1881) + ($xor1879))|0;
 $add1894 = (($add1893) + ($or1877))|0;
 $shl1895 = $add1842 << 30;
 $shr1896 = $add1842 >>> 2;
 $or1897 = $shl1895 | $shr1896;
 $shl1901 = $add1894 << 5;
 $shr1902 = $add1894 >>> 27;
 $or1903 = $shl1901 | $shr1902;
 $xor1904 = $or1897 ^ $or1871;
 $xor1905 = $xor1904 ^ $add1868;
 $xor1910 = $or1553 ^ $or1501;
 $xor1912 = $xor1910 ^ $or1709;
 $xor1914 = $xor1912 ^ $or1839;
 $shl1915 = $xor1914 << 1;
 $shr1916 = $xor1914 >>> 31;
 $or1917 = $shl1915 | $shr1916;
 $add1906 = (($or1917) + -899497514)|0;
 $add1907 = (($add1906) + ($or1845))|0;
 $add1919 = (($add1907) + ($xor1905))|0;
 $add1920 = (($add1919) + ($or1903))|0;
 $shl1921 = $add1868 << 30;
 $shr1922 = $add1868 >>> 2;
 $or1923 = $shl1921 | $shr1922;
 $shl1927 = $add1920 << 5;
 $shr1928 = $add1920 >>> 27;
 $or1929 = $shl1927 | $shr1928;
 $xor1930 = $or1923 ^ $or1897;
 $xor1931 = $xor1930 ^ $add1894;
 $xor1936 = $or1579 ^ $or1527;
 $xor1938 = $xor1936 ^ $or1735;
 $xor1940 = $xor1938 ^ $or1865;
 $shl1941 = $xor1940 << 1;
 $shr1942 = $xor1940 >>> 31;
 $or1943 = $shl1941 | $shr1942;
 $add1932 = (($or1943) + -899497514)|0;
 $add1933 = (($add1932) + ($or1871))|0;
 $add1945 = (($add1933) + ($xor1931))|0;
 $add1946 = (($add1945) + ($or1929))|0;
 $shl1947 = $add1894 << 30;
 $shr1948 = $add1894 >>> 2;
 $or1949 = $shl1947 | $shr1948;
 $shl1953 = $add1946 << 5;
 $shr1954 = $add1946 >>> 27;
 $or1955 = $shl1953 | $shr1954;
 $xor1956 = $or1949 ^ $or1923;
 $xor1957 = $xor1956 ^ $add1920;
 $xor1962 = $or1605 ^ $or1553;
 $xor1964 = $xor1962 ^ $or1761;
 $xor1966 = $xor1964 ^ $or1891;
 $shl1967 = $xor1966 << 1;
 $shr1968 = $xor1966 >>> 31;
 $or1969 = $shl1967 | $shr1968;
 $shl1973 = $add1920 << 30;
 $shr1974 = $add1920 >>> 2;
 $or1975 = $shl1973 | $shr1974;
 $85 = HEAP32[$hd>>2]|0;
 $add1958 = (($or1969) + -899497514)|0;
 $add1959 = (($add1958) + ($85))|0;
 $add1971 = (($add1959) + ($or1897))|0;
 $add1972 = (($add1971) + ($xor1957))|0;
 $add1979 = (($add1972) + ($or1955))|0;
 HEAP32[$hd>>2] = $add1979;
 $86 = HEAP32[$h1>>2]|0;
 $add1981 = (($add1946) + ($86))|0;
 HEAP32[$h1>>2] = $add1981;
 $87 = HEAP32[$h2>>2]|0;
 $add1983 = (($or1975) + ($87))|0;
 HEAP32[$h2>>2] = $add1983;
 $88 = HEAP32[$h3>>2]|0;
 $add1985 = (($or1949) + ($88))|0;
 HEAP32[$h3>>2] = $add1985;
 $89 = HEAP32[$h4>>2]|0;
 $add1987 = (($or1923) + ($89))|0;
 HEAP32[$h4>>2] = $add1987;
 STACKTOP = sp;return;
}
function _SHA1_Final($digest,$hd) {
 $digest = $digest|0;
 $hd = $hd|0;
 var $$lcssa = 0, $$pre = 0, $$pre94 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add = 0, $arraydecay$i = 0, $arraydecay$i86 = 0, $arrayidx$pre$phiZ2D = 0, $arrayidx14 = 0, $arrayidx26 = 0, $arrayidx32 = 0, $arrayidx36 = 0, $arrayidx40 = 0, $arrayidx43 = 0, $arrayidx47 = 0, $arrayidx51 = 0, $arrayidx55 = 0, $arrayidx58 = 0, $buf = 0, $cmp = 0, $cmp$i = 0, $cmp$i85 = 0;
 var $cmp10 = 0, $cmp1091 = 0, $cmp21 = 0, $cmp2192 = 0, $cmp5 = 0, $conv103 = 0, $conv106 = 0, $conv112 = 0, $conv116 = 0, $conv120 = 0, $conv123 = 0, $conv129 = 0, $conv133 = 0, $conv137 = 0, $conv140 = 0, $conv38 = 0, $conv41 = 0, $conv45 = 0, $conv49 = 0, $conv53 = 0;
 var $conv56 = 0, $conv64 = 0, $conv67 = 0, $conv71 = 0, $conv74 = 0, $conv78 = 0, $conv82 = 0, $conv86 = 0, $conv89 = 0, $conv95 = 0, $conv99 = 0, $count$i = 0, $h1 = 0, $h2 = 0, $h3 = 0, $h4 = 0, $inc = 0, $inc$i = 0, $inc$i88 = 0, $inc13 = 0;
 var $inc25 = 0, $inc8 = 0, $incdec$ptr = 0, $incdec$ptr100 = 0, $incdec$ptr104 = 0, $incdec$ptr107 = 0, $incdec$ptr113 = 0, $incdec$ptr117 = 0, $incdec$ptr121 = 0, $incdec$ptr124 = 0, $incdec$ptr130 = 0, $incdec$ptr134 = 0, $incdec$ptr138 = 0, $incdec$ptr68 = 0, $incdec$ptr72 = 0, $incdec$ptr75 = 0, $incdec$ptr79 = 0, $incdec$ptr83 = 0, $incdec$ptr87 = 0, $incdec$ptr90 = 0;
 var $incdec$ptr96 = 0, $nblocks$i = 0, $nblocks$phi$trans$insert = 0, $nblocks$pre$phiZ2D = 0, $or = 0, $shl = 0, $shl1 = 0, $shl2 = 0, $shr = 0, $shr102 = 0, $shr111 = 0, $shr115 = 0, $shr119 = 0, $shr128 = 0, $shr132 = 0, $shr136 = 0, $shr3 = 0, $shr63 = 0, $shr66 = 0, $shr70 = 0;
 var $shr77 = 0, $shr81 = 0, $shr85 = 0, $shr94 = 0, $shr98 = 0, $spec$select = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $count$i = ((($hd)) + 88|0);
 $0 = HEAP32[$count$i>>2]|0;
 $cmp$i = ($0|0)==(64);
 if ($cmp$i) {
  $arraydecay$i = ((($hd)) + 24|0);
  _Transform($hd,$arraydecay$i);
  HEAP32[$count$i>>2] = 0;
  $nblocks$i = ((($hd)) + 20|0);
  $1 = HEAP32[$nblocks$i>>2]|0;
  $inc$i = (($1) + 1)|0;
  HEAP32[$nblocks$i>>2] = $inc$i;
  $2 = $inc$i;$3 = 0;$arrayidx$pre$phiZ2D = $arraydecay$i;$nblocks$pre$phiZ2D = $nblocks$i;
 } else {
  $nblocks$phi$trans$insert = ((($hd)) + 20|0);
  $$pre = HEAP32[$nblocks$phi$trans$insert>>2]|0;
  $$pre94 = (((($hd)) + 24|0) + ($0)|0);
  $2 = $$pre;$3 = $0;$arrayidx$pre$phiZ2D = $$pre94;$nblocks$pre$phiZ2D = $nblocks$phi$trans$insert;
 }
 $shl = $2 << 6;
 $shr = $2 >>> 26;
 $add = (($shl) + ($3))|0;
 $cmp = ($add>>>0)<($shl>>>0);
 $inc = $cmp&1;
 $spec$select = (($shr) + ($inc))|0;
 $shl1 = $add << 3;
 $shl2 = $spec$select << 3;
 $shr3 = $add >>> 29;
 $or = $shl2 | $shr3;
 $cmp5 = ($3|0)<(56);
 $buf = ((($hd)) + 24|0);
 $inc8 = (($3) + 1)|0;
 HEAP32[$count$i>>2] = $inc8;
 HEAP8[$arrayidx$pre$phiZ2D>>0] = -128;
 $4 = HEAP32[$count$i>>2]|0;
 if ($cmp5) {
  $cmp1091 = ($4|0)<(56);
  if ($cmp1091) {
   $5 = $4;
   while(1) {
    $inc13 = (($5) + 1)|0;
    HEAP32[$count$i>>2] = $inc13;
    $arrayidx14 = (((($hd)) + 24|0) + ($5)|0);
    HEAP8[$arrayidx14>>0] = 0;
    $6 = HEAP32[$count$i>>2]|0;
    $cmp10 = ($6|0)<(56);
    if ($cmp10) {
     $5 = $6;
    } else {
     break;
    }
   }
  }
 } else {
  $cmp2192 = ($4|0)<(64);
  if ($cmp2192) {
   $7 = $4;
   while(1) {
    $inc25 = (($7) + 1)|0;
    HEAP32[$count$i>>2] = $inc25;
    $arrayidx26 = (((($hd)) + 24|0) + ($7)|0);
    HEAP8[$arrayidx26>>0] = 0;
    $8 = HEAP32[$count$i>>2]|0;
    $cmp21 = ($8|0)<(64);
    if ($cmp21) {
     $7 = $8;
    } else {
     $$lcssa = $8;
     break;
    }
   }
  } else {
   $$lcssa = $4;
  }
  $cmp$i85 = ($$lcssa|0)==(64);
  if ($cmp$i85) {
   $arraydecay$i86 = ((($hd)) + 24|0);
   _Transform($hd,$arraydecay$i86);
   HEAP32[$count$i>>2] = 0;
   $9 = HEAP32[$nblocks$pre$phiZ2D>>2]|0;
   $inc$i88 = (($9) + 1)|0;
   HEAP32[$nblocks$pre$phiZ2D>>2] = $inc$i88;
  }
  dest=$buf; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 }
 $arrayidx32 = ((($hd)) + 80|0);
 HEAP8[$arrayidx32>>0] = 0;
 $arrayidx36 = ((($hd)) + 81|0);
 HEAP8[$arrayidx36>>0] = 0;
 $10 = $spec$select >>> 5;
 $conv38 = $10&255;
 $arrayidx40 = ((($hd)) + 82|0);
 HEAP8[$arrayidx40>>0] = $conv38;
 $conv41 = $or&255;
 $arrayidx43 = ((($hd)) + 83|0);
 HEAP8[$arrayidx43>>0] = $conv41;
 $11 = $add >>> 21;
 $conv45 = $11&255;
 $arrayidx47 = ((($hd)) + 84|0);
 HEAP8[$arrayidx47>>0] = $conv45;
 $12 = $add >>> 13;
 $conv49 = $12&255;
 $arrayidx51 = ((($hd)) + 85|0);
 HEAP8[$arrayidx51>>0] = $conv49;
 $13 = $add >>> 5;
 $conv53 = $13&255;
 $arrayidx55 = ((($hd)) + 86|0);
 HEAP8[$arrayidx55>>0] = $conv53;
 $conv56 = $shl1&255;
 $arrayidx58 = ((($hd)) + 87|0);
 HEAP8[$arrayidx58>>0] = $conv56;
 _Transform($hd,$buf);
 $14 = HEAP32[$hd>>2]|0;
 $shr63 = $14 >>> 24;
 $conv64 = $shr63&255;
 $incdec$ptr = ((($hd)) + 25|0);
 HEAP8[$buf>>0] = $conv64;
 $shr66 = $14 >>> 16;
 $conv67 = $shr66&255;
 $incdec$ptr68 = ((($hd)) + 26|0);
 HEAP8[$incdec$ptr>>0] = $conv67;
 $shr70 = $14 >>> 8;
 $conv71 = $shr70&255;
 $incdec$ptr72 = ((($hd)) + 27|0);
 HEAP8[$incdec$ptr68>>0] = $conv71;
 $conv74 = $14&255;
 $incdec$ptr75 = ((($hd)) + 28|0);
 HEAP8[$incdec$ptr72>>0] = $conv74;
 $h1 = ((($hd)) + 4|0);
 $15 = HEAP32[$h1>>2]|0;
 $shr77 = $15 >>> 24;
 $conv78 = $shr77&255;
 $incdec$ptr79 = ((($hd)) + 29|0);
 HEAP8[$incdec$ptr75>>0] = $conv78;
 $shr81 = $15 >>> 16;
 $conv82 = $shr81&255;
 $incdec$ptr83 = ((($hd)) + 30|0);
 HEAP8[$incdec$ptr79>>0] = $conv82;
 $shr85 = $15 >>> 8;
 $conv86 = $shr85&255;
 $incdec$ptr87 = ((($hd)) + 31|0);
 HEAP8[$incdec$ptr83>>0] = $conv86;
 $conv89 = $15&255;
 $incdec$ptr90 = ((($hd)) + 32|0);
 HEAP8[$incdec$ptr87>>0] = $conv89;
 $h2 = ((($hd)) + 8|0);
 $16 = HEAP32[$h2>>2]|0;
 $shr94 = $16 >>> 24;
 $conv95 = $shr94&255;
 $incdec$ptr96 = ((($hd)) + 33|0);
 HEAP8[$incdec$ptr90>>0] = $conv95;
 $shr98 = $16 >>> 16;
 $conv99 = $shr98&255;
 $incdec$ptr100 = ((($hd)) + 34|0);
 HEAP8[$incdec$ptr96>>0] = $conv99;
 $shr102 = $16 >>> 8;
 $conv103 = $shr102&255;
 $incdec$ptr104 = ((($hd)) + 35|0);
 HEAP8[$incdec$ptr100>>0] = $conv103;
 $conv106 = $16&255;
 $incdec$ptr107 = ((($hd)) + 36|0);
 HEAP8[$incdec$ptr104>>0] = $conv106;
 $h3 = ((($hd)) + 12|0);
 $17 = HEAP32[$h3>>2]|0;
 $shr111 = $17 >>> 24;
 $conv112 = $shr111&255;
 $incdec$ptr113 = ((($hd)) + 37|0);
 HEAP8[$incdec$ptr107>>0] = $conv112;
 $shr115 = $17 >>> 16;
 $conv116 = $shr115&255;
 $incdec$ptr117 = ((($hd)) + 38|0);
 HEAP8[$incdec$ptr113>>0] = $conv116;
 $shr119 = $17 >>> 8;
 $conv120 = $shr119&255;
 $incdec$ptr121 = ((($hd)) + 39|0);
 HEAP8[$incdec$ptr117>>0] = $conv120;
 $conv123 = $17&255;
 $incdec$ptr124 = ((($hd)) + 40|0);
 HEAP8[$incdec$ptr121>>0] = $conv123;
 $h4 = ((($hd)) + 16|0);
 $18 = HEAP32[$h4>>2]|0;
 $shr128 = $18 >>> 24;
 $conv129 = $shr128&255;
 $incdec$ptr130 = ((($hd)) + 41|0);
 HEAP8[$incdec$ptr124>>0] = $conv129;
 $shr132 = $18 >>> 16;
 $conv133 = $shr132&255;
 $incdec$ptr134 = ((($hd)) + 42|0);
 HEAP8[$incdec$ptr130>>0] = $conv133;
 $shr136 = $18 >>> 8;
 $conv137 = $shr136&255;
 $incdec$ptr138 = ((($hd)) + 43|0);
 HEAP8[$incdec$ptr134>>0] = $conv137;
 $conv140 = $18&255;
 HEAP8[$incdec$ptr138>>0] = $conv140;
 dest=$digest; src=$buf; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 return;
}
function _SHA1_UpdateInt32($context,$val) {
 $context = $context|0;
 $val = $val|0;
 var $arrayidx11 = 0, $arrayidx4 = 0, $arrayidx8 = 0, $buf = 0, $conv = 0, $conv10 = 0, $conv3 = 0, $conv7 = 0, $shr = 0, $shr1 = 0, $shr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $buf = sp;
 $shr = $val >>> 24;
 $conv = $shr&255;
 HEAP8[$buf>>0] = $conv;
 $shr1 = $val >>> 16;
 $conv3 = $shr1&255;
 $arrayidx4 = ((($buf)) + 1|0);
 HEAP8[$arrayidx4>>0] = $conv3;
 $shr5 = $val >>> 8;
 $conv7 = $shr5&255;
 $arrayidx8 = ((($buf)) + 2|0);
 HEAP8[$arrayidx8>>0] = $conv7;
 $conv10 = $val&255;
 $arrayidx11 = ((($buf)) + 3|0);
 HEAP8[$arrayidx11>>0] = $conv10;
 _SHA1_Update($context,$buf,4);
 STACKTOP = sp;return;
}
function _SHA1_UpdateString($context,$str) {
 $context = $context|0;
 $str = $str|0;
 var $add = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($str)|0);
 $add = (($call) + 1)|0;
 _SHA1_Update($context,$str,$add);
 return;
}
function _StatCopy($stats) {
 $stats = $stats|0;
 var $0 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $inc = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_M_ParmExists(155507)|0);
 $tobool = ($call|0)!=(0);
 $0 = HEAP32[99726]|0;
 $cmp = ($0|0)<(32);
 $or$cond = $tobool & $cmp;
 if (!($or$cond)) {
  return;
 }
 $inc = (($0) + 1)|0;
 $arrayidx = (386192 + (($0*200)|0)|0);
 _memcpy(($arrayidx|0),($stats|0),200)|0;
 HEAP32[99726] = $inc;
 return;
}
function _StatDump() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _STlib_init() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_CacheLumpName(155517,1)|0);
 HEAP32[99727] = $call;
 return;
}
function _STlib_initNum($n,$x,$y,$pl,$num,$on,$width) {
 $n = $n|0;
 $x = $x|0;
 $y = $y|0;
 $pl = $pl|0;
 $num = $num|0;
 $on = $on|0;
 $width = $width|0;
 var $num4 = 0, $oldnum = 0, $on5 = 0, $p = 0, $width3 = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$n>>2] = $x;
 $y2 = ((($n)) + 4|0);
 HEAP32[$y2>>2] = $y;
 $oldnum = ((($n)) + 12|0);
 HEAP32[$oldnum>>2] = 0;
 $width3 = ((($n)) + 8|0);
 HEAP32[$width3>>2] = $width;
 $num4 = ((($n)) + 16|0);
 HEAP32[$num4>>2] = $num;
 $on5 = ((($n)) + 20|0);
 HEAP32[$on5>>2] = $on;
 $p = ((($n)) + 24|0);
 HEAP32[$p>>2] = $pl;
 return;
}
function _STlib_drawNum($n,$refresh) {
 $n = $n|0;
 $refresh = $refresh|0;
 var $$op = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $arrayidx50 = 0, $cmp = 0, $cmp11 = 0, $cmp14 = 0, $cmp17 = 0, $cmp25 = 0, $cmp33 = 0, $cmp9 = 0, $conv = 0, $conv5 = 0, $dec = 0, $div = 0, $height = 0, $mul = 0, $num$1 = 0, $num$250 = 0, $num$250$off = 0;
 var $num1 = 0, $numdigits$052 = 0, $oldnum = 0, $or$cond = 0, $or$cond1 = 0, $or$cond45 = 0, $or$cond4549 = 0, $p = 0, $spec$select$op = 0, $sub = 0, $sub23 = 0, $sub30 = 0, $sub40 = 0, $sub47 = 0, $sub53 = 0, $tobool38 = 0, $tobool46 = 0, $tobool4648 = 0, $vararg_buffer = 0, $width = 0;
 var $x$0$lcssa = 0, $x$051 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $width = ((($n)) + 8|0);
 $0 = HEAP32[$width>>2]|0;
 $num1 = ((($n)) + 16|0);
 $1 = HEAP32[$num1>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $p = ((($n)) + 24|0);
 $3 = HEAP32[$p>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAPU8[$4>>0]|(HEAPU8[$4+1>>0]<<8);
 $conv = $5 << 16 >> 16;
 $height = ((($4)) + 2|0);
 $6 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
 $conv5 = $6 << 16 >> 16;
 $oldnum = ((($n)) + 12|0);
 HEAP32[$oldnum>>2] = $2;
 $cmp = ($2|0)<(0);
 if ($cmp) {
  $cmp9 = ($0|0)==(2);
  $cmp11 = ($2|0)<(-9);
  $or$cond = $cmp9 & $cmp11;
  $cmp14 = ($0|0)==(3);
  $cmp17 = ($2|0)<(-99);
  $or$cond1 = $cmp14 & $cmp17;
  $$op = (0 - ($2))|0;
  $spec$select$op = $or$cond1 ? 99 : $$op;
  $sub = $or$cond ? 9 : $spec$select$op;
  $num$1 = $sub;
 } else {
  $num$1 = $2;
 }
 $7 = HEAP32[$n>>2]|0;
 $mul = Math_imul($0, $conv)|0;
 $sub23 = (($7) - ($mul))|0;
 $y = ((($n)) + 4|0);
 $8 = HEAP32[$y>>2]|0;
 $cmp25 = ($8|0)<(168);
 if ($cmp25) {
  _I_Error(155526,$vararg_buffer);
  // unreachable;
 }
 $sub30 = (($8) + -168)|0;
 $9 = HEAP32[99728]|0;
 _V_CopyRect($sub23,$sub30,$9,$mul,$conv5,$sub23,$8);
 $cmp33 = ($num$1|0)==(1994);
 if ($cmp33) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$n>>2]|0;
 $tobool38 = ($num$1|0)==(0);
 if ($tobool38) {
  $sub40 = (($10) - ($conv))|0;
  $11 = HEAP32[$y>>2]|0;
  $12 = HEAP32[$p>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  _V_DrawPatch($sub40,$11,$13);
  $x$0$lcssa = $10;
 } else {
  $tobool4648 = ($0|0)==(0);
  $or$cond4549 = $tobool38 | $tobool4648;
  if ($or$cond4549) {
   $x$0$lcssa = $10;
  } else {
   $num$250 = $num$1;$numdigits$052 = $0;$x$051 = $10;
   while(1) {
    $dec = (($numdigits$052) + -1)|0;
    $sub47 = (($x$051) - ($conv))|0;
    $14 = HEAP32[$y>>2]|0;
    $15 = HEAP32[$p>>2]|0;
    $div = (($num$250|0) / 10)&-1;
    $16 = ($div*10)|0;
    $17 = (($num$250) - ($16))|0;
    $arrayidx50 = (($15) + ($17<<2)|0);
    $18 = HEAP32[$arrayidx50>>2]|0;
    _V_DrawPatch($sub47,$14,$18);
    $num$250$off = (($num$250) + 9)|0;
    $19 = ($num$250$off>>>0)<(19);
    $tobool46 = ($dec|0)==(0);
    $or$cond45 = $19 | $tobool46;
    if ($or$cond45) {
     $x$0$lcssa = $sub47;
     break;
    } else {
     $num$250 = $div;$numdigits$052 = $dec;$x$051 = $sub47;
    }
   }
  }
 }
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $sub53 = (($x$0$lcssa) + -8)|0;
 $20 = HEAP32[$y>>2]|0;
 $21 = HEAP32[99727]|0;
 _V_DrawPatch($sub53,$20,$21);
 STACKTOP = sp;return;
}
function _STlib_updateNum($n,$refresh) {
 $n = $n|0;
 $refresh = $refresh|0;
 var $0 = 0, $1 = 0, $on = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $on = ((($n)) + 20|0);
 $0 = HEAP32[$on>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $tobool = ($1|0)==(0);
 if ($tobool) {
  return;
 }
 _STlib_drawNum($n,0);
 return;
}
function _STlib_initPercent($p,$x,$y,$pl,$num,$on,$percent) {
 $p = $p|0;
 $x = $x|0;
 $y = $y|0;
 $pl = $pl|0;
 $num = $num|0;
 $on = $on|0;
 $percent = $percent|0;
 var $num4$i = 0, $oldnum$i = 0, $on5$i = 0, $p$i = 0, $p1 = 0, $width3$i = 0, $y2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$p>>2] = $x;
 $y2$i = ((($p)) + 4|0);
 HEAP32[$y2$i>>2] = $y;
 $oldnum$i = ((($p)) + 12|0);
 HEAP32[$oldnum$i>>2] = 0;
 $width3$i = ((($p)) + 8|0);
 HEAP32[$width3$i>>2] = 3;
 $num4$i = ((($p)) + 16|0);
 HEAP32[$num4$i>>2] = $num;
 $on5$i = ((($p)) + 20|0);
 HEAP32[$on5$i>>2] = $on;
 $p$i = ((($p)) + 24|0);
 HEAP32[$p$i>>2] = $pl;
 $p1 = ((($p)) + 32|0);
 HEAP32[$p1>>2] = $percent;
 return;
}
function _STlib_updatePercent($per,$refresh) {
 $per = $per|0;
 $refresh = $refresh|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $p = 0, $tobool = 0, $tobool$i = 0, $tobool1 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($refresh|0)==(0);
 $$pre = ((($per)) + 20|0);
 if (!($tobool)) {
  $0 = HEAP32[$$pre>>2]|0;
  $1 = HEAP32[$0>>2]|0;
  $tobool1 = ($1|0)==(0);
  if (!($tobool1)) {
   $2 = HEAP32[$per>>2]|0;
   $y = ((($per)) + 4|0);
   $3 = HEAP32[$y>>2]|0;
   $p = ((($per)) + 32|0);
   $4 = HEAP32[$p>>2]|0;
   _V_DrawPatch($2,$3,$4);
  }
 }
 $5 = HEAP32[$$pre>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $tobool$i = ($6|0)==(0);
 if ($tobool$i) {
  return;
 }
 _STlib_drawNum($per,0);
 return;
}
function _STlib_initMultIcon($i,$x,$y,$il,$inum,$on) {
 $i = $i|0;
 $x = $x|0;
 $y = $y|0;
 $il = $il|0;
 $inum = $inum|0;
 $on = $on|0;
 var $inum3 = 0, $oldinum = 0, $on4 = 0, $p = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$i>>2] = $x;
 $y2 = ((($i)) + 4|0);
 HEAP32[$y2>>2] = $y;
 $oldinum = ((($i)) + 8|0);
 HEAP32[$oldinum>>2] = -1;
 $inum3 = ((($i)) + 12|0);
 HEAP32[$inum3>>2] = $inum;
 $on4 = ((($i)) + 16|0);
 HEAP32[$on4>>2] = $on;
 $p = ((($i)) + 20|0);
 HEAP32[$p>>2] = $il;
 return;
}
function _STlib_updateMultIcon($mi,$refresh) {
 $mi = $mi|0;
 $refresh = $refresh|0;
 var $$pre = 0, $$pre29 = 0, $$pre31 = 0, $$pre32 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx34 = 0, $cmp = 0, $cmp25 = 0, $cmp4 = 0, $cmp6 = 0, $conv = 0, $conv14 = 0, $conv19 = 0, $conv23 = 0, $height = 0, $inum = 0, $leftoffset = 0, $oldinum = 0, $on = 0;
 var $or$cond$not = 0, $or$cond28 = 0, $p = 0, $p32$pre$phiZ2D = 0, $sub = 0, $sub15 = 0, $sub24 = 0, $tobool = 0, $tobool1 = 0, $topoffset = 0, $vararg_buffer = 0, $y10 = 0, $y31$pre$phiZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $on = ((($mi)) + 16|0);
 $0 = HEAP32[$on>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $tobool = ($1|0)==(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $oldinum = ((($mi)) + 8|0);
 $2 = HEAP32[$oldinum>>2]|0;
 $inum = ((($mi)) + 12|0);
 $3 = HEAP32[$inum>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $cmp = ($2|0)==($4|0);
 $tobool1 = ($refresh|0)==(0);
 $or$cond$not = $tobool1 & $cmp;
 $cmp4 = ($4|0)==(-1);
 $or$cond28 = $cmp4 | $or$cond$not;
 if ($or$cond28) {
  STACKTOP = sp;return;
 }
 $cmp6 = ($2|0)==(-1);
 do {
  if ($cmp6) {
   $$pre31 = ((($mi)) + 4|0);
   $$pre32 = ((($mi)) + 20|0);
   $17 = $4;$p32$pre$phiZ2D = $$pre32;$y31$pre$phiZ2D = $$pre31;
  } else {
   $5 = HEAP32[$mi>>2]|0;
   $p = ((($mi)) + 20|0);
   $6 = HEAP32[$p>>2]|0;
   $arrayidx = (($6) + ($2<<2)|0);
   $7 = HEAP32[$arrayidx>>2]|0;
   $leftoffset = ((($7)) + 4|0);
   $8 = HEAPU8[$leftoffset>>0]|(HEAPU8[$leftoffset+1>>0]<<8);
   $conv = $8 << 16 >> 16;
   $sub = (($5) - ($conv))|0;
   $y10 = ((($mi)) + 4|0);
   $9 = HEAP32[$y10>>2]|0;
   $topoffset = ((($7)) + 6|0);
   $10 = HEAPU8[$topoffset>>0]|(HEAPU8[$topoffset+1>>0]<<8);
   $conv14 = $10 << 16 >> 16;
   $sub15 = (($9) - ($conv14))|0;
   $11 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8);
   $conv19 = $11 << 16 >> 16;
   $height = ((($7)) + 2|0);
   $12 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
   $conv23 = $12 << 16 >> 16;
   $sub24 = (($sub15) + -168)|0;
   $cmp25 = ($sub15|0)<(168);
   if ($cmp25) {
    _I_Error(155551,$vararg_buffer);
    // unreachable;
   } else {
    $13 = HEAP32[99728]|0;
    _V_CopyRect($sub,$sub24,$13,$conv19,$conv23,$sub,$sub15);
    $$pre = HEAP32[$inum>>2]|0;
    $$pre29 = HEAP32[$$pre>>2]|0;
    $17 = $$pre29;$p32$pre$phiZ2D = $p;$y31$pre$phiZ2D = $y10;
    break;
   }
  }
 } while(0);
 $14 = HEAP32[$mi>>2]|0;
 $15 = HEAP32[$y31$pre$phiZ2D>>2]|0;
 $16 = HEAP32[$p32$pre$phiZ2D>>2]|0;
 $arrayidx34 = (($16) + ($17<<2)|0);
 $18 = HEAP32[$arrayidx34>>2]|0;
 _V_DrawPatch($14,$15,$18);
 $19 = HEAP32[$inum>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$oldinum>>2] = $20;
 STACKTOP = sp;return;
}
function _STlib_initBinIcon($b,$x,$y,$i,$val,$on) {
 $b = $b|0;
 $x = $x|0;
 $y = $y|0;
 $i = $i|0;
 $val = $val|0;
 $on = $on|0;
 var $oldval = 0, $on4 = 0, $p = 0, $val3 = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$b>>2] = $x;
 $y2 = ((($b)) + 4|0);
 HEAP32[$y2>>2] = $y;
 $oldval = ((($b)) + 8|0);
 HEAP32[$oldval>>2] = 0;
 $val3 = ((($b)) + 12|0);
 HEAP32[$val3>>2] = $val;
 $on4 = ((($b)) + 16|0);
 HEAP32[$on4>>2] = $on;
 $p = ((($b)) + 20|0);
 HEAP32[$p>>2] = $i;
 return;
}
function _STlib_updateBinIcon($bi,$refresh) {
 $bi = $bi|0;
 $refresh = $refresh|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp12 = 0;
 var $conv = 0, $conv10 = 0, $conv5 = 0, $conv8 = 0, $height = 0, $leftoffset = 0, $oldval = 0, $on = 0, $or$cond = 0, $p = 0, $sub = 0, $sub11 = 0, $sub6 = 0, $tobool = 0, $tobool1 = 0, $tobool16 = 0, $topoffset = 0, $val = 0, $vararg_buffer = 0, $y3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $on = ((($bi)) + 16|0);
 $0 = HEAP32[$on>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $tobool = ($1|0)==(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $oldval = ((($bi)) + 8|0);
 $2 = HEAP32[$oldval>>2]|0;
 $val = ((($bi)) + 12|0);
 $3 = HEAP32[$val>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $cmp = ($2|0)!=($4|0);
 $tobool1 = ($refresh|0)!=(0);
 $or$cond = $tobool1 | $cmp;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$bi>>2]|0;
 $p = ((($bi)) + 20|0);
 $6 = HEAP32[$p>>2]|0;
 $leftoffset = ((($6)) + 4|0);
 $7 = HEAPU8[$leftoffset>>0]|(HEAPU8[$leftoffset+1>>0]<<8);
 $conv = $7 << 16 >> 16;
 $sub = (($5) - ($conv))|0;
 $y3 = ((($bi)) + 4|0);
 $8 = HEAP32[$y3>>2]|0;
 $topoffset = ((($6)) + 6|0);
 $9 = HEAPU8[$topoffset>>0]|(HEAPU8[$topoffset+1>>0]<<8);
 $conv5 = $9 << 16 >> 16;
 $sub6 = (($8) - ($conv5))|0;
 $10 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8);
 $conv8 = $10 << 16 >> 16;
 $height = ((($6)) + 2|0);
 $11 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
 $conv10 = $11 << 16 >> 16;
 $sub11 = (($sub6) + -168)|0;
 $cmp12 = ($sub6|0)<(168);
 if ($cmp12) {
  _I_Error(155580,$vararg_buffer);
  // unreachable;
 }
 $tobool16 = ($4|0)==(0);
 if ($tobool16) {
  $15 = HEAP32[99728]|0;
  _V_CopyRect($sub,$sub11,$15,$conv8,$conv10,$sub,$sub6);
 } else {
  $12 = HEAP32[$bi>>2]|0;
  $13 = HEAP32[$y3>>2]|0;
  $14 = HEAP32[$p>>2]|0;
  _V_DrawPatch($12,$13,$14);
 }
 $16 = HEAP32[$val>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$oldval>>2] = $17;
 STACKTOP = sp;return;
}
function _ST_Responder($ev) {
 $ev = $ev|0;
 var $$pr = 0, $$pre = 0, $$pre82 = 0, $$pre83 = 0, $$pre84 = 0, $$pre85 = 0, $$pre86 = 0, $$pre87 = 0, $$pre88 = 0, $$sink = 0, $$sink89 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $add120 = 0, $add271 = 0, $and13 = 0, $and176 = 0, $angle = 0, $armorpoints = 0, $armorpoints47 = 0, $armortype = 0, $armortype48 = 0, $arrayidx = 0, $arrayidx$1 = 0, $arrayidx$2 = 0;
 var $arrayidx$3 = 0, $arrayidx$4 = 0, $arrayidx$5 = 0, $arrayidx$6 = 0, $arrayidx$7 = 0, $arrayidx$8 = 0, $arrayidx117 = 0, $arrayidx198 = 0, $arrayidx198$1 = 0, $arrayidx198$2 = 0, $arrayidx198$3 = 0, $arrayidx198$4 = 0, $arrayidx198$5 = 0, $arrayidx231 = 0, $arrayidx233 = 0, $arrayidx269 = 0, $arrayidx277 = 0, $arrayidx54 = 0, $arrayidx54$1 = 0, $arrayidx54$2 = 0;
 var $arrayidx54$3 = 0, $arrayidx54$4 = 0, $arrayidx54$5 = 0, $arrayidx54$6 = 0, $arrayidx54$7 = 0, $arrayidx54$8 = 0, $arrayidx73 = 0, $arrayidx73$1 = 0, $arrayidx73$2 = 0, $arrayidx73$3 = 0, $arrayidx73$4 = 0, $arrayidx73$5 = 0, $arrayidx92 = 0, $buf = 0, $buf260 = 0, $call = 0, $call150 = 0, $call170 = 0, $call195 = 0, $call195$1 = 0;
 var $call195$2 = 0, $call195$3 = 0, $call195$4 = 0, $call195$5 = 0, $call220 = 0, $call227 = 0, $call238 = 0, $call257 = 0, $call26 = 0, $call44 = 0, $call81 = 0, $cheats = 0, $cheats173 = 0, $cmp105 = 0, $cmp129 = 0, $cmp262 = 0, $cmp281 = 0, $cmp285 = 0, $cmp289 = 0, $cmp296 = 0;
 var $cmp299 = 0, $cmp306 = 0, $cmp309 = 0, $cmp316 = 0, $cmp319 = 0, $cmp326 = 0, $cmp329 = 0, $cmp8 = 0, $cmp85 = 0, $cmp87 = 0, $conv = 0, $conv118 = 0, $conv149 = 0, $conv169 = 0, $conv194 = 0, $conv194$1 = 0, $conv194$2 = 0, $conv194$3 = 0, $conv194$4 = 0, $conv194$5 = 0;
 var $conv219 = 0, $conv226 = 0, $conv237 = 0, $conv25 = 0, $conv256 = 0, $conv266 = 0, $conv270 = 0, $conv278 = 0, $conv43 = 0, $conv80 = 0, $conv91 = 0, $conv93 = 0, $data1 = 0, $data2 = 0, $data2255 = 0, $epsd$0 = 0, $health = 0, $health19 = 0, $map$0 = 0, $map$0$in = 0;
 var $message = 0, $message108 = 0, $message132 = 0, $message179 = 0, $message21 = 0, $message213 = 0, $message213$1 = 0, $message213$2 = 0, $message213$3 = 0, $message213$4 = 0, $message213$5 = 0, $message234 = 0, $message333 = 0, $message40 = 0, $message77 = 0, $message84 = 0, $mo242 = 0, $mul = 0, $mul115 = 0, $mul268 = 0;
 var $or$cond = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond5 = 0, $or$cond6 = 0, $or$cond60 = 0, $scevgep = 0, $scevgep76 = 0, $scevgep78 = 0, $scevgep80 = 0, $spec$select = 0, $sub276 = 0, $sub96 = 0, $tobool = 0, $tobool10 = 0, $tobool14 = 0, $tobool151 = 0, $tobool16 = 0, $tobool171 = 0;
 var $tobool177 = 0, $tobool196 = 0, $tobool196$1 = 0, $tobool196$2 = 0, $tobool196$3 = 0, $tobool196$4 = 0, $tobool196$5 = 0, $tobool199 = 0, $tobool199$1 = 0, $tobool199$2 = 0, $tobool199$3 = 0, $tobool199$4 = 0, $tobool199$5 = 0, $tobool221 = 0, $tobool228 = 0, $tobool239 = 0, $tobool253 = 0, $tobool258 = 0, $tobool27 = 0, $tobool45 = 0;
 var $tobool82 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $x = 0, $xor = 0, $xor174 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $buf = sp + 15|0;
 $buf260 = sp + 12|0;
 $0 = HEAP32[$ev>>2]|0;
 switch ($0|0) {
 case 1:  {
  $data1 = ((($ev)) + 4|0);
  $1 = HEAP32[$data1>>2]|0;
  $2 = ($1|0)==(1634559232);
  if (!($2)) {
   STACKTOP = sp;return 0;
  }
  HEAP32[99732] = 1;
  STACKTOP = sp;return 0;
  break;
 }
 case 0:  {
  $3 = HEAP32[99094]|0;
  $tobool = ($3|0)==(0);
  $4 = HEAP32[99086]|0;
  $cmp8 = ($4|0)!=(4);
  $or$cond = $tobool & $cmp8;
  if ($or$cond) {
   $data2 = ((($ev)) + 8|0);
   $5 = HEAP32[$data2>>2]|0;
   $conv = $5&255;
   $call = (_cht_CheckCheat(129292,$conv)|0);
   $tobool10 = ($call|0)==(0);
   do {
    if ($tobool10) {
     $9 = HEAP32[$data2>>2]|0;
     $conv25 = $9&255;
     $call26 = (_cht_CheckCheat(129396,$conv25)|0);
     $tobool27 = ($call26|0)==(0);
     if (!($tobool27)) {
      $10 = HEAP32[99733]|0;
      $armorpoints = ((($10)) + 44|0);
      HEAP32[$armorpoints>>2] = 200;
      $armortype = ((($10)) + 48|0);
      HEAP32[$armortype>>2] = 2;
      $arrayidx = ((($10)) + 128|0);
      HEAP32[$arrayidx>>2] = 1;
      $arrayidx$1 = ((($10)) + 132|0);
      HEAP32[$arrayidx$1>>2] = 1;
      $arrayidx$2 = ((($10)) + 136|0);
      HEAP32[$arrayidx$2>>2] = 1;
      $arrayidx$3 = ((($10)) + 140|0);
      HEAP32[$arrayidx$3>>2] = 1;
      $arrayidx$4 = ((($10)) + 144|0);
      HEAP32[$arrayidx$4>>2] = 1;
      $arrayidx$5 = ((($10)) + 148|0);
      HEAP32[$arrayidx$5>>2] = 1;
      $arrayidx$6 = ((($10)) + 152|0);
      HEAP32[$arrayidx$6>>2] = 1;
      $arrayidx$7 = ((($10)) + 156|0);
      HEAP32[$arrayidx$7>>2] = 1;
      $arrayidx$8 = ((($10)) + 160|0);
      HEAP32[$arrayidx$8>>2] = 1;
      $scevgep78 = ((($10)) + 164|0);
      $scevgep80 = ((($10)) + 180|0);
      ;HEAP32[$scevgep78>>2]=HEAP32[$scevgep80>>2]|0;HEAP32[$scevgep78+4>>2]=HEAP32[$scevgep80+4>>2]|0;HEAP32[$scevgep78+8>>2]=HEAP32[$scevgep80+8>>2]|0;HEAP32[$scevgep78+12>>2]=HEAP32[$scevgep80+12>>2]|0;
      $message40 = ((($10)) + 224|0);
      HEAP32[$message40>>2] = 155655;
      break;
     }
     $11 = HEAP32[$data2>>2]|0;
     $conv43 = $11&255;
     $call44 = (_cht_CheckCheat(129344,$conv43)|0);
     $tobool45 = ($call44|0)==(0);
     if (!($tobool45)) {
      $12 = HEAP32[99733]|0;
      $armorpoints47 = ((($12)) + 44|0);
      HEAP32[$armorpoints47>>2] = 200;
      $armortype48 = ((($12)) + 48|0);
      HEAP32[$armortype48>>2] = 2;
      $arrayidx54 = ((($12)) + 128|0);
      HEAP32[$arrayidx54>>2] = 1;
      $arrayidx54$1 = ((($12)) + 132|0);
      HEAP32[$arrayidx54$1>>2] = 1;
      $arrayidx54$2 = ((($12)) + 136|0);
      HEAP32[$arrayidx54$2>>2] = 1;
      $arrayidx54$3 = ((($12)) + 140|0);
      HEAP32[$arrayidx54$3>>2] = 1;
      $arrayidx54$4 = ((($12)) + 144|0);
      HEAP32[$arrayidx54$4>>2] = 1;
      $arrayidx54$5 = ((($12)) + 148|0);
      HEAP32[$arrayidx54$5>>2] = 1;
      $arrayidx54$6 = ((($12)) + 152|0);
      HEAP32[$arrayidx54$6>>2] = 1;
      $arrayidx54$7 = ((($12)) + 156|0);
      HEAP32[$arrayidx54$7>>2] = 1;
      $arrayidx54$8 = ((($12)) + 160|0);
      HEAP32[$arrayidx54$8>>2] = 1;
      $scevgep = ((($12)) + 164|0);
      $scevgep76 = ((($12)) + 180|0);
      ;HEAP32[$scevgep>>2]=HEAP32[$scevgep76>>2]|0;HEAP32[$scevgep+4>>2]=HEAP32[$scevgep76+4>>2]|0;HEAP32[$scevgep+8>>2]=HEAP32[$scevgep76+8>>2]|0;HEAP32[$scevgep+12>>2]=HEAP32[$scevgep76+12>>2]|0;
      $arrayidx73 = ((($12)) + 76|0);
      HEAP32[$arrayidx73>>2] = 1;
      $arrayidx73$1 = ((($12)) + 80|0);
      HEAP32[$arrayidx73$1>>2] = 1;
      $arrayidx73$2 = ((($12)) + 84|0);
      HEAP32[$arrayidx73$2>>2] = 1;
      $arrayidx73$3 = ((($12)) + 88|0);
      HEAP32[$arrayidx73$3>>2] = 1;
      $arrayidx73$4 = ((($12)) + 92|0);
      HEAP32[$arrayidx73$4>>2] = 1;
      $arrayidx73$5 = ((($12)) + 96|0);
      HEAP32[$arrayidx73$5>>2] = 1;
      $message77 = ((($12)) + 224|0);
      HEAP32[$message77>>2] = 155676;
      break;
     }
     $13 = HEAP32[$data2>>2]|0;
     $conv80 = $13&255;
     $call81 = (_cht_CheckCheat(129240,$conv80)|0);
     $tobool82 = ($call81|0)==(0);
     if ($tobool82) {
      $24 = HEAP32[99015]|0;
      $25 = $24 | 4;
      $26 = ($25|0)==(4);
      if ($26) {
       $27 = HEAP32[$data2>>2]|0;
       $conv149 = $27&255;
       $call150 = (_cht_CheckCheat(129448,$conv149)|0);
       $tobool151 = ($call150|0)==(0);
       if ($tobool151) {
        $$pre = HEAP32[99015]|0;
        $$pre88 = $$pre | 4;
        $28 = ($$pre88|0)==(4);
        if ($28) {
         break;
        } else {
         label = 27;
        }
       }
      } else {
       label = 27;
      }
      if ((label|0) == 27) {
       $29 = HEAP32[$data2>>2]|0;
       $conv169 = $29&255;
       $call170 = (_cht_CheckCheat(129500,$conv169)|0);
       $tobool171 = ($call170|0)==(0);
       if ($tobool171) {
        break;
       }
      }
      $30 = HEAP32[99733]|0;
      $cheats173 = ((($30)) + 204|0);
      $31 = HEAP32[$cheats173>>2]|0;
      $xor174 = $31 ^ 1;
      HEAP32[$cheats173>>2] = $xor174;
      $and176 = $xor174 & 1;
      $tobool177 = ($and176|0)==(0);
      $message179 = ((($30)) + 224|0);
      if ($tobool177) {
       HEAP32[$message179>>2] = 155752;
       break;
      } else {
       HEAP32[$message179>>2] = 155732;
       break;
      }
     }
     $14 = HEAP32[99733]|0;
     $message84 = ((($14)) + 224|0);
     HEAP32[$message84>>2] = 155698;
     _cht_GetParam(129240,$buf);
     $15 = HEAP32[32140]|0;
     $cmp85 = ($15|0)==(2);
     $16 = HEAP32[32141]|0;
     $cmp87 = ($16>>>0)<(6);
     $or$cond2 = $cmp85 | $cmp87;
     $17 = HEAP8[$buf>>0]|0;
     $conv91 = $17 << 24 >> 24;
     do {
      if ($or$cond2) {
       $18 = ($conv91*10)|0;
       $arrayidx92 = ((($buf)) + 1|0);
       $19 = HEAP8[$arrayidx92>>0]|0;
       $conv93 = $19 << 24 >> 24;
       $mul = (($18) + ($conv93))|0;
       $cmp105 = ($mul|0)>(563);
       if ($cmp105) {
        $20 = HEAP32[99733]|0;
        $message108 = ((($20)) + 224|0);
        HEAP32[$message108>>2] = 155711;
        break;
       } else {
        $sub96 = (($mul) + -496)|0;
        _S_ChangeMusic($sub96,1);
        break;
       }
      } else {
       $21 = ($conv91*9)|0;
       $arrayidx117 = ((($buf)) + 1|0);
       $22 = HEAP8[$arrayidx117>>0]|0;
       $conv118 = $22 << 24 >> 24;
       $mul115 = (($21) + ($conv118))|0;
       $cmp129 = ($mul115|0)>(521);
       if ($cmp129) {
        $23 = HEAP32[99733]|0;
        $message132 = ((($23)) + 224|0);
        HEAP32[$message132>>2] = 155711;
        break;
       } else {
        $add120 = (($mul115) + -489)|0;
        _S_ChangeMusic($add120,1);
        break;
       }
      }
     } while(0);
    } else {
     $6 = HEAP32[99733]|0;
     $cheats = ((($6)) + 204|0);
     $7 = HEAP32[$cheats>>2]|0;
     $xor = $7 ^ 2;
     HEAP32[$cheats>>2] = $xor;
     $and13 = $xor & 2;
     $tobool14 = ($and13|0)==(0);
     if ($tobool14) {
      $message21 = ((($6)) + 224|0);
      HEAP32[$message21>>2] = 155631;
      break;
     }
     $8 = HEAP32[$6>>2]|0;
     $tobool16 = ($8|0)==(0|0);
     if (!($tobool16)) {
      $health = ((($8)) + 108|0);
      HEAP32[$health>>2] = 100;
     }
     $health19 = ((($6)) + 40|0);
     HEAP32[$health19>>2] = 100;
     $message = ((($6)) + 224|0);
     HEAP32[$message>>2] = 155608;
    }
   } while(0);
   $32 = HEAP32[$data2>>2]|0;
   $conv194 = $32&255;
   $call195 = (_cht_CheckCheat(57920,$conv194)|0);
   $tobool196 = ($call195|0)==(0);
   if (!($tobool196)) {
    $33 = HEAP32[99733]|0;
    $arrayidx198 = ((($33)) + 52|0);
    $34 = HEAP32[$arrayidx198>>2]|0;
    $tobool199 = ($34|0)==(0);
    if ($tobool199) {
     (_P_GivePower($33,0)|0);
     $$pre82 = HEAP32[99733]|0;
     $35 = $$pre82;
    } else {
     HEAP32[$arrayidx198>>2] = 1;
     $35 = $33;
    }
    $message213 = ((($35)) + 224|0);
    HEAP32[$message213>>2] = 155773;
   }
   $36 = HEAP32[$data2>>2]|0;
   $conv194$1 = $36&255;
   $call195$1 = (_cht_CheckCheat((57972),$conv194$1)|0);
   $tobool196$1 = ($call195$1|0)==(0);
   if (!($tobool196$1)) {
    $57 = HEAP32[99733]|0;
    $arrayidx198$1 = ((($57)) + 56|0);
    $58 = HEAP32[$arrayidx198$1>>2]|0;
    $tobool199$1 = ($58|0)==(0);
    if ($tobool199$1) {
     (_P_GivePower($57,1)|0);
     $$pre83 = HEAP32[99733]|0;
     $59 = $$pre83;
    } else {
     HEAP32[$arrayidx198$1>>2] = 0;
     $59 = $57;
    }
    $message213$1 = ((($59)) + 224|0);
    HEAP32[$message213$1>>2] = 155773;
   }
   $60 = HEAP32[$data2>>2]|0;
   $conv194$2 = $60&255;
   $call195$2 = (_cht_CheckCheat((58024),$conv194$2)|0);
   $tobool196$2 = ($call195$2|0)==(0);
   if (!($tobool196$2)) {
    $61 = HEAP32[99733]|0;
    $arrayidx198$2 = ((($61)) + 60|0);
    $62 = HEAP32[$arrayidx198$2>>2]|0;
    $tobool199$2 = ($62|0)==(0);
    if ($tobool199$2) {
     (_P_GivePower($61,2)|0);
     $$pre84 = HEAP32[99733]|0;
     $63 = $$pre84;
    } else {
     HEAP32[$arrayidx198$2>>2] = 1;
     $63 = $61;
    }
    $message213$2 = ((($63)) + 224|0);
    HEAP32[$message213$2>>2] = 155773;
   }
   $64 = HEAP32[$data2>>2]|0;
   $conv194$3 = $64&255;
   $call195$3 = (_cht_CheckCheat((58076),$conv194$3)|0);
   $tobool196$3 = ($call195$3|0)==(0);
   if (!($tobool196$3)) {
    $65 = HEAP32[99733]|0;
    $arrayidx198$3 = ((($65)) + 64|0);
    $66 = HEAP32[$arrayidx198$3>>2]|0;
    $tobool199$3 = ($66|0)==(0);
    if ($tobool199$3) {
     (_P_GivePower($65,3)|0);
     $$pre85 = HEAP32[99733]|0;
     $67 = $$pre85;
    } else {
     HEAP32[$arrayidx198$3>>2] = 1;
     $67 = $65;
    }
    $message213$3 = ((($67)) + 224|0);
    HEAP32[$message213$3>>2] = 155773;
   }
   $68 = HEAP32[$data2>>2]|0;
   $conv194$4 = $68&255;
   $call195$4 = (_cht_CheckCheat((58128),$conv194$4)|0);
   $tobool196$4 = ($call195$4|0)==(0);
   if (!($tobool196$4)) {
    $69 = HEAP32[99733]|0;
    $arrayidx198$4 = ((($69)) + 68|0);
    $70 = HEAP32[$arrayidx198$4>>2]|0;
    $tobool199$4 = ($70|0)==(0);
    if ($tobool199$4) {
     (_P_GivePower($69,4)|0);
     $$pre86 = HEAP32[99733]|0;
     $71 = $$pre86;
    } else {
     HEAP32[$arrayidx198$4>>2] = 1;
     $71 = $69;
    }
    $message213$4 = ((($71)) + 224|0);
    HEAP32[$message213$4>>2] = 155773;
   }
   $72 = HEAP32[$data2>>2]|0;
   $conv194$5 = $72&255;
   $call195$5 = (_cht_CheckCheat((58180),$conv194$5)|0);
   $tobool196$5 = ($call195$5|0)==(0);
   if (!($tobool196$5)) {
    $73 = HEAP32[99733]|0;
    $arrayidx198$5 = ((($73)) + 72|0);
    $74 = HEAP32[$arrayidx198$5>>2]|0;
    $tobool199$5 = ($74|0)==(0);
    if ($tobool199$5) {
     (_P_GivePower($73,5)|0);
     $$pre87 = HEAP32[99733]|0;
     $75 = $$pre87;
    } else {
     HEAP32[$arrayidx198$5>>2] = 1;
     $75 = $73;
    }
    $message213$5 = ((($75)) + 224|0);
    HEAP32[$message213$5>>2] = 155773;
   }
   $76 = HEAP32[$data2>>2]|0;
   $conv219 = $76&255;
   $call220 = (_cht_CheckCheat((58232),$conv219)|0);
   $tobool221 = ($call220|0)==(0);
   do {
    if ($tobool221) {
     $38 = HEAP32[$data2>>2]|0;
     $conv226 = $38&255;
     $call227 = (_cht_CheckCheat(129552,$conv226)|0);
     $tobool228 = ($call227|0)==(0);
     if (!($tobool228)) {
      $39 = HEAP32[99733]|0;
      $arrayidx231 = ((($39)) + 156|0);
      HEAP32[$arrayidx231>>2] = 1;
      $arrayidx233 = ((($39)) + 52|0);
      HEAP32[$arrayidx233>>2] = 1;
      $$sink = 155815;$$sink89 = $39;
      label = 42;
      break;
     }
     $40 = HEAP32[$data2>>2]|0;
     $conv237 = $40&255;
     $call238 = (_cht_CheckCheat(129656,$conv237)|0);
     $tobool239 = ($call238|0)==(0);
     if (!($tobool239)) {
      $41 = HEAP32[99076]|0;
      $mo242 = (181680 + (($41*288)|0)|0);
      $42 = HEAP32[$mo242>>2]|0;
      $angle = ((($42)) + 32|0);
      $43 = HEAP32[$angle>>2]|0;
      $x = ((($42)) + 12|0);
      $44 = HEAP32[$x>>2]|0;
      $y = ((($42)) + 16|0);
      $45 = HEAP32[$y>>2]|0;
      HEAP32[$vararg_buffer>>2] = $43;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $44;
      $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr2>>2] = $45;
      (_M_snprintf(392592,52,155790,$vararg_buffer)|0);
      $46 = HEAP32[99733]|0;
      $$sink = 392592;$$sink89 = $46;
      label = 42;
     }
    } else {
     $37 = HEAP32[99733]|0;
     $$sink = 155837;$$sink89 = $37;
     label = 42;
    }
   } while(0);
   if ((label|0) == 42) {
    $message234 = ((($$sink89)) + 224|0);
    HEAP32[$message234>>2] = $$sink;
   }
   $$pr = HEAP32[99094]|0;
   $47 = $$pr;
  } else {
   $47 = $3;
  }
  $tobool253 = ($47|0)==(0);
  if (!($tobool253)) {
   STACKTOP = sp;return 0;
  }
  $data2255 = ((($ev)) + 8|0);
  $48 = HEAP32[$data2255>>2]|0;
  $conv256 = $48&255;
  $call257 = (_cht_CheckCheat(129604,$conv256)|0);
  $tobool258 = ($call257|0)==(0);
  if ($tobool258) {
   STACKTOP = sp;return 0;
  }
  _cht_GetParam(129604,$buf260);
  $49 = HEAP32[32140]|0;
  $cmp262 = ($49|0)==(2);
  $50 = HEAP8[$buf260>>0]|0;
  $conv266 = $50 << 24 >> 24;
  if ($cmp262) {
   $51 = ($conv266*10)|0;
   $mul268 = (($51) + -480)|0;
   $arrayidx269 = ((($buf260)) + 1|0);
   $52 = HEAP8[$arrayidx269>>0]|0;
   $conv270 = $52 << 24 >> 24;
   $add271 = (($mul268) + ($conv270))|0;
   $epsd$0 = 1;$map$0$in = $add271;
  } else {
   $sub276 = (($conv266) + -48)|0;
   $arrayidx277 = ((($buf260)) + 1|0);
   $53 = HEAP8[$arrayidx277>>0]|0;
   $conv278 = $53 << 24 >> 24;
   $epsd$0 = $sub276;$map$0$in = $conv278;
  }
  $map$0 = (($map$0$in) + -48)|0;
  $54 = HEAP32[32141]|0;
  $cmp281 = ($54|0)==(9);
  $spec$select = $cmp281 ? 1 : $epsd$0;
  $cmp285 = ($spec$select|0)<(1);
  $cmp289 = ($map$0$in|0)<(49);
  $or$cond60 = $cmp289 | $cmp285;
  L111: do {
   if (!($or$cond60)) {
    switch ($49|0) {
    case 3:  {
     $cmp296 = ($spec$select|0)>(4);
     $cmp299 = ($map$0$in|0)>(57);
     $or$cond3 = $cmp299 | $cmp296;
     if ($or$cond3) {
      break L111;
     }
     break;
    }
    case 1:  {
     $cmp306 = ($spec$select|0)>(3);
     $cmp309 = ($map$0$in|0)>(57);
     $or$cond4 = $cmp309 | $cmp306;
     if ($or$cond4) {
      break L111;
     }
     break;
    }
    case 0:  {
     $cmp316 = ($spec$select|0)>(1);
     $cmp319 = ($map$0$in|0)>(57);
     $or$cond5 = $cmp319 | $cmp316;
     if ($or$cond5) {
      break L111;
     }
     break;
    }
    default: {
    }
    }
    if ($cmp262) {
     $cmp326 = ($spec$select|0)>(1);
     $cmp329 = ($map$0$in|0)>(88);
     $or$cond6 = $cmp329 | $cmp326;
     if ($or$cond6) {
      break;
     }
    }
    $55 = HEAP32[99733]|0;
    $message333 = ((($55)) + 224|0);
    HEAP32[$message333>>2] = 155883;
    $56 = HEAP32[99086]|0;
    _G_DeferedInitNew($56,$spec$select,$map$0);
    STACKTOP = sp;return 0;
   }
  } while(0);
  STACKTOP = sp;return 0;
  break;
 }
 default: {
  STACKTOP = sp;return 0;
 }
 }
 return (0)|0;
}
function _ST_updateFaceWidget() {
 var $$pr84 = 0, $$pr90$pr$pr = 0, $$pre$i = 0, $$pre$i18 = 0, $$pre$i29 = 0, $$pre$i40 = 0, $$pre$i51 = 0, $$pre$i62 = 0, $$pre$i73 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add101 = 0, $add119 = 0;
 var $add32 = 0, $add58 = 0, $add62 = 0, $add64 = 0, $add82 = 0, $add85 = 0, $and = 0, $angle = 0, $arrayidx111 = 0, $arrayidx8 = 0, $arrayidx8$1 = 0, $arrayidx8$2 = 0, $arrayidx8$3 = 0, $arrayidx8$4 = 0, $arrayidx8$5 = 0, $arrayidx8$6 = 0, $arrayidx8$7 = 0, $arrayidx8$8 = 0, $attackdown = 0, $attacker = 0;
 var $bonuscount = 0, $call39 = 0, $cheats = 0, $cmp = 0, $cmp107 = 0, $cmp20 = 0, $cmp26 = 0, $cmp29 = 0, $cmp3 = 0, $cmp3$i = 0, $cmp3$i17 = 0, $cmp3$i28 = 0, $cmp3$i39 = 0, $cmp3$i50 = 0, $cmp3$i61 = 0, $cmp3$i72 = 0, $cmp41 = 0, $cmp46 = 0, $cmp51 = 0, $cmp55 = 0;
 var $cmp70 = 0, $cmp78 = 0, $cmp89 = 0, $cmp9 = 0, $cmp9$1 = 0, $cmp9$2 = 0, $cmp9$3 = 0, $cmp9$4 = 0, $cmp9$5 = 0, $cmp9$6 = 0, $cmp9$7 = 0, $cmp9$8 = 0, $cmp94 = 0, $damagecount = 0, $damagecount73 = 0, $dec = 0, $dec121 = 0, $diffang$0 = 0, $div$i = 0, $div$i22 = 0;
 var $div$i33 = 0, $div$i44 = 0, $div$i55 = 0, $div$i66 = 0, $div$i77 = 0, $doevilgrin$1 = 0, $doevilgrin$1$1 = 0, $doevilgrin$1$2 = 0, $doevilgrin$1$3 = 0, $doevilgrin$1$4 = 0, $doevilgrin$1$5 = 0, $doevilgrin$1$6 = 0, $doevilgrin$1$7 = 0, $health = 0, $health1$i15 = 0, $health1$i59 = 0, $i$1$in = 0, $mul$i = 0, $mul$i21 = 0, $mul$i32 = 0;
 var $mul$i43 = 0, $mul$i54 = 0, $mul$i65 = 0, $mul$i76 = 0, $mul4$i = 0, $mul4$i23 = 0, $mul4$i34 = 0, $mul4$i45 = 0, $mul4$i56 = 0, $mul4$i67 = 0, $mul4$i78 = 0, $rem = 0, $spec$select$i = 0, $spec$select$i16 = 0, $spec$select$i27 = 0, $spec$select$i38 = 0, $spec$select$i49 = 0, $spec$select$i60 = 0, $spec$select$i71 = 0, $sub = 0;
 var $sub$i = 0, $sub$i20 = 0, $sub$i31 = 0, $sub$i42 = 0, $sub$i53 = 0, $sub$i64 = 0, $sub$i75 = 0, $sub45 = 0, $sub50 = 0, $sub77 = 0, $tobool = 0, $tobool110 = 0, $tobool112 = 0, $tobool116 = 0, $tobool15 = 0, $tobool22 = 0, $tobool23 = 0, $tobool5 = 0, $tobool74 = 0, $tobool92 = 0;
 var $tobool98 = 0, $x = 0, $x36 = 0, $y = 0, $y38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99735]|0;
 $cmp = ($0|0)<(10);
 L1: do {
  if ($cmp) {
   $1 = HEAP32[99733]|0;
   $health = ((($1)) + 40|0);
   $2 = HEAP32[$health>>2]|0;
   $tobool = ($2|0)==(0);
   if ($tobool) {
    HEAP32[99735] = 9;
    HEAP32[99736] = 41;
    HEAP32[99737] = 1;
    $52 = 1;
    $dec121 = (($52) + -1)|0;
    HEAP32[99737] = $dec121;
    return;
   }
   $cmp3 = ($0|0)<(9);
   if ($cmp3) {
    $bonuscount = ((($1)) + 232|0);
    $3 = HEAP32[$bonuscount>>2]|0;
    $tobool5 = ($3|0)==(0);
    do {
     if (!($tobool5)) {
      $4 = HEAP32[98164]|0;
      $arrayidx8 = ((($1)) + 128|0);
      $5 = HEAP32[$arrayidx8>>2]|0;
      $cmp9 = ($4|0)==($5|0);
      if ($cmp9) {
       $doevilgrin$1 = 0;
      } else {
       HEAP32[98164] = $5;
       $doevilgrin$1 = 1;
      }
      $6 = HEAP32[(392660)>>2]|0;
      $arrayidx8$1 = ((($1)) + 132|0);
      $7 = HEAP32[$arrayidx8$1>>2]|0;
      $cmp9$1 = ($6|0)==($7|0);
      if ($cmp9$1) {
       $doevilgrin$1$1 = $doevilgrin$1;
      } else {
       HEAP32[(392660)>>2] = $7;
       $doevilgrin$1$1 = 1;
      }
      $53 = HEAP32[(392664)>>2]|0;
      $arrayidx8$2 = ((($1)) + 136|0);
      $54 = HEAP32[$arrayidx8$2>>2]|0;
      $cmp9$2 = ($53|0)==($54|0);
      if ($cmp9$2) {
       $doevilgrin$1$2 = $doevilgrin$1$1;
      } else {
       HEAP32[(392664)>>2] = $54;
       $doevilgrin$1$2 = 1;
      }
      $55 = HEAP32[(392668)>>2]|0;
      $arrayidx8$3 = ((($1)) + 140|0);
      $56 = HEAP32[$arrayidx8$3>>2]|0;
      $cmp9$3 = ($55|0)==($56|0);
      if ($cmp9$3) {
       $doevilgrin$1$3 = $doevilgrin$1$2;
      } else {
       HEAP32[(392668)>>2] = $56;
       $doevilgrin$1$3 = 1;
      }
      $57 = HEAP32[(392672)>>2]|0;
      $arrayidx8$4 = ((($1)) + 144|0);
      $58 = HEAP32[$arrayidx8$4>>2]|0;
      $cmp9$4 = ($57|0)==($58|0);
      if ($cmp9$4) {
       $doevilgrin$1$4 = $doevilgrin$1$3;
      } else {
       HEAP32[(392672)>>2] = $58;
       $doevilgrin$1$4 = 1;
      }
      $59 = HEAP32[(392676)>>2]|0;
      $arrayidx8$5 = ((($1)) + 148|0);
      $60 = HEAP32[$arrayidx8$5>>2]|0;
      $cmp9$5 = ($59|0)==($60|0);
      if ($cmp9$5) {
       $doevilgrin$1$5 = $doevilgrin$1$4;
      } else {
       HEAP32[(392676)>>2] = $60;
       $doevilgrin$1$5 = 1;
      }
      $61 = HEAP32[(392680)>>2]|0;
      $arrayidx8$6 = ((($1)) + 152|0);
      $62 = HEAP32[$arrayidx8$6>>2]|0;
      $cmp9$6 = ($61|0)==($62|0);
      if ($cmp9$6) {
       $doevilgrin$1$6 = $doevilgrin$1$5;
      } else {
       HEAP32[(392680)>>2] = $62;
       $doevilgrin$1$6 = 1;
      }
      $63 = HEAP32[(392684)>>2]|0;
      $arrayidx8$7 = ((($1)) + 156|0);
      $64 = HEAP32[$arrayidx8$7>>2]|0;
      $cmp9$7 = ($63|0)==($64|0);
      if ($cmp9$7) {
       $doevilgrin$1$7 = $doevilgrin$1$6;
      } else {
       HEAP32[(392684)>>2] = $64;
       $doevilgrin$1$7 = 1;
      }
      $65 = HEAP32[(392688)>>2]|0;
      $arrayidx8$8 = ((($1)) + 160|0);
      $66 = HEAP32[$arrayidx8$8>>2]|0;
      $cmp9$8 = ($65|0)==($66|0);
      if ($cmp9$8) {
       $tobool15 = ($doevilgrin$1$7|0)==(0);
       if ($tobool15) {
        break;
       }
      } else {
       HEAP32[(392688)>>2] = $66;
      }
      HEAP32[99735] = 8;
      HEAP32[99737] = 70;
      $8 = ($2|0)<(100);
      $spec$select$i = $8 ? $2 : 100;
      $9 = HEAP32[32427]|0;
      $cmp3$i = ($spec$select$i|0)==($9|0);
      if ($cmp3$i) {
       $$pre$i = HEAP32[99734]|0;
       $10 = $$pre$i;
      } else {
       $sub$i = (100 - ($spec$select$i))|0;
       $mul$i = ($sub$i*5)|0;
       $div$i = (($mul$i|0) / 101)&-1;
       $mul4$i = $div$i << 3;
       HEAP32[99734] = $mul4$i;
       HEAP32[32427] = $spec$select$i;
       $10 = $mul4$i;
      }
      $add = (($10) + 6)|0;
      HEAP32[99736] = $add;
      break L1;
     }
    } while(0);
    $cmp20 = ($0|0)<(8);
    if ($cmp20) {
     $damagecount = ((($1)) + 228|0);
     $11 = HEAP32[$damagecount>>2]|0;
     $tobool22 = ($11|0)==(0);
     do {
      if ($tobool22) {
       $29 = $1;$32 = $2;
      } else {
       $attacker = ((($1)) + 236|0);
       $12 = HEAP32[$attacker>>2]|0;
       $tobool23 = ($12|0)==(0|0);
       if ($tobool23) {
        $29 = $1;$32 = $2;
       } else {
        $13 = HEAP32[$1>>2]|0;
        $cmp26 = ($12|0)==($13|0);
        if ($cmp26) {
         $29 = $1;$32 = $2;
        } else {
         HEAP32[99735] = 7;
         $14 = HEAP32[32428]|0;
         $sub = (($2) - ($14))|0;
         $cmp29 = ($sub|0)>(20);
         if ($cmp29) {
          HEAP32[99737] = 35;
          $15 = ($2|0)<(100);
          $spec$select$i71 = $15 ? $2 : 100;
          $16 = HEAP32[32427]|0;
          $cmp3$i72 = ($spec$select$i71|0)==($16|0);
          if ($cmp3$i72) {
           $$pre$i73 = HEAP32[99734]|0;
           $17 = $$pre$i73;
          } else {
           $sub$i75 = (100 - ($spec$select$i71))|0;
           $mul$i76 = ($sub$i75*5)|0;
           $div$i77 = (($mul$i76|0) / 101)&-1;
           $mul4$i78 = $div$i77 << 3;
           HEAP32[99734] = $mul4$i78;
           HEAP32[32427] = $spec$select$i71;
           $17 = $mul4$i78;
          }
          $add32 = (($17) + 5)|0;
          HEAP32[99736] = $add32;
          $29 = $1;$32 = $2;
          break;
         }
         $x = ((($13)) + 12|0);
         $18 = HEAP32[$x>>2]|0;
         $y = ((($13)) + 16|0);
         $19 = HEAP32[$y>>2]|0;
         $x36 = ((($12)) + 12|0);
         $20 = HEAP32[$x36>>2]|0;
         $y38 = ((($12)) + 16|0);
         $21 = HEAP32[$y38>>2]|0;
         $call39 = (_R_PointToAngle2($18,$19,$20,$21)|0);
         $22 = HEAP32[99733]|0;
         $23 = HEAP32[$22>>2]|0;
         $angle = ((($23)) + 32|0);
         $24 = HEAP32[$angle>>2]|0;
         $cmp41 = ($call39>>>0)>($24>>>0);
         $sub45 = (($call39) - ($24))|0;
         $cmp46 = ($sub45>>>0)>(2147483648);
         $sub50 = (($24) - ($call39))|0;
         $cmp51 = ($sub50>>>0)<(2147483649);
         $i$1$in = $cmp41 ? $cmp46 : $cmp51;
         $diffang$0 = $cmp41 ? $sub45 : $sub50;
         HEAP32[99737] = 35;
         $health1$i59 = ((($22)) + 40|0);
         $25 = HEAP32[$health1$i59>>2]|0;
         $26 = ($25|0)<(100);
         $spec$select$i60 = $26 ? $25 : 100;
         $27 = HEAP32[32427]|0;
         $cmp3$i61 = ($spec$select$i60|0)==($27|0);
         if ($cmp3$i61) {
          $$pre$i62 = HEAP32[99734]|0;
          $28 = $$pre$i62;
         } else {
          $sub$i64 = (100 - ($spec$select$i60))|0;
          $mul$i65 = ($sub$i64*5)|0;
          $div$i66 = (($mul$i65|0) / 101)&-1;
          $mul4$i67 = $div$i66 << 3;
          HEAP32[99734] = $mul4$i67;
          HEAP32[32427] = $spec$select$i60;
          $28 = $mul4$i67;
         }
         HEAP32[99736] = $28;
         $cmp55 = ($diffang$0>>>0)<(536870912);
         if ($cmp55) {
          $add58 = (($28) + 7)|0;
          HEAP32[99736] = $add58;
          $29 = $22;$32 = $25;
          break;
         }
         if ($i$1$in) {
          $add62 = (($28) + 3)|0;
          HEAP32[99736] = $add62;
          $29 = $22;$32 = $25;
          break;
         } else {
          $add64 = (($28) + 4)|0;
          HEAP32[99736] = $add64;
          $29 = $22;$32 = $25;
          break;
         }
        }
       }
      }
     } while(0);
     $$pr84 = HEAP32[99735]|0;
     $cmp70 = ($$pr84|0)<(7);
     if ($cmp70) {
      $damagecount73 = ((($29)) + 228|0);
      $30 = HEAP32[$damagecount73>>2]|0;
      $tobool74 = ($30|0)==(0);
      if (!($tobool74)) {
       $31 = HEAP32[32428]|0;
       $sub77 = (($32) - ($31))|0;
       $cmp78 = ($sub77|0)>(20);
       if ($cmp78) {
        HEAP32[99735] = 7;
        HEAP32[99737] = 35;
        $33 = ($32|0)<(100);
        $spec$select$i49 = $33 ? $32 : 100;
        $34 = HEAP32[32427]|0;
        $cmp3$i50 = ($spec$select$i49|0)==($34|0);
        if ($cmp3$i50) {
         $$pre$i51 = HEAP32[99734]|0;
         $35 = $$pre$i51;
        } else {
         $sub$i53 = (100 - ($spec$select$i49))|0;
         $mul$i54 = ($sub$i53*5)|0;
         $div$i55 = (($mul$i54|0) / 101)&-1;
         $mul4$i56 = $div$i55 << 3;
         HEAP32[99734] = $mul4$i56;
         HEAP32[32427] = $spec$select$i49;
         $35 = $mul4$i56;
        }
        $add82 = (($35) + 5)|0;
        HEAP32[99736] = $add82;
        break;
       } else {
        HEAP32[99735] = 6;
        HEAP32[99737] = 35;
        $36 = ($32|0)<(100);
        $spec$select$i38 = $36 ? $32 : 100;
        $37 = HEAP32[32427]|0;
        $cmp3$i39 = ($spec$select$i38|0)==($37|0);
        if ($cmp3$i39) {
         $$pre$i40 = HEAP32[99734]|0;
         $38 = $$pre$i40;
        } else {
         $sub$i42 = (100 - ($spec$select$i38))|0;
         $mul$i43 = ($sub$i42*5)|0;
         $div$i44 = (($mul$i43|0) / 101)&-1;
         $mul4$i45 = $div$i44 << 3;
         HEAP32[99734] = $mul4$i45;
         HEAP32[32427] = $spec$select$i38;
         $38 = $mul4$i45;
        }
        $add85 = (($38) + 7)|0;
        HEAP32[99736] = $add85;
        break;
       }
      }
      $cmp89 = ($$pr84|0)<(6);
      if ($cmp89) {
       $attackdown = ((($29)) + 196|0);
       $39 = HEAP32[$attackdown>>2]|0;
       $tobool92 = ($39|0)==(0);
       if ($tobool92) {
        $$sink = -1;
        label = 49;
       } else {
        $40 = HEAP32[32429]|0;
        $cmp94 = ($40|0)==(-1);
        if ($cmp94) {
         $$sink = 70;
         label = 49;
        } else {
         $dec = (($40) + -1)|0;
         HEAP32[32429] = $dec;
         $tobool98 = ($dec|0)==(0);
         if ($tobool98) {
          HEAP32[99735] = 5;
          $41 = ($32|0)<(100);
          $spec$select$i27 = $41 ? $32 : 100;
          $42 = HEAP32[32427]|0;
          $cmp3$i28 = ($spec$select$i27|0)==($42|0);
          if ($cmp3$i28) {
           $$pre$i29 = HEAP32[99734]|0;
           $43 = $$pre$i29;
          } else {
           $sub$i31 = (100 - ($spec$select$i27))|0;
           $mul$i32 = ($sub$i31*5)|0;
           $div$i33 = (($mul$i32|0) / 101)&-1;
           $mul4$i34 = $div$i33 << 3;
           HEAP32[99734] = $mul4$i34;
           HEAP32[32427] = $spec$select$i27;
           $43 = $mul4$i34;
          }
          $add101 = (($43) + 7)|0;
          HEAP32[99736] = $add101;
          HEAP32[99737] = 1;
          HEAP32[32429] = 1;
          $52 = 1;
          $dec121 = (($52) + -1)|0;
          HEAP32[99737] = $dec121;
          return;
         }
        }
       }
       if ((label|0) == 49) {
        HEAP32[32429] = $$sink;
       }
       $cmp107 = ($$pr84|0)<(5);
       if ($cmp107) {
        $cheats = ((($29)) + 204|0);
        $44 = HEAP32[$cheats>>2]|0;
        $and = $44 & 2;
        $tobool110 = ($and|0)==(0);
        if ($tobool110) {
         $arrayidx111 = ((($29)) + 52|0);
         $45 = HEAP32[$arrayidx111>>2]|0;
         $tobool112 = ($45|0)==(0);
         if ($tobool112) {
          break;
         }
        }
        HEAP32[99735] = 4;
        HEAP32[99736] = 40;
        HEAP32[99737] = 1;
        $52 = 1;
        $dec121 = (($52) + -1)|0;
        HEAP32[99737] = $dec121;
        return;
       }
      }
     }
    }
   }
  }
 } while(0);
 $$pr90$pr$pr = HEAP32[99737]|0;
 $tobool116 = ($$pr90$pr$pr|0)==(0);
 if (!($tobool116)) {
  $52 = $$pr90$pr$pr;
  $dec121 = (($52) + -1)|0;
  HEAP32[99737] = $dec121;
  return;
 }
 $46 = HEAP32[99733]|0;
 $health1$i15 = ((($46)) + 40|0);
 $47 = HEAP32[$health1$i15>>2]|0;
 $48 = ($47|0)<(100);
 $spec$select$i16 = $48 ? $47 : 100;
 $49 = HEAP32[32427]|0;
 $cmp3$i17 = ($spec$select$i16|0)==($49|0);
 if ($cmp3$i17) {
  $$pre$i18 = HEAP32[99734]|0;
  $51 = $$pre$i18;
 } else {
  $sub$i20 = (100 - ($spec$select$i16))|0;
  $mul$i21 = ($sub$i20*5)|0;
  $div$i22 = (($mul$i21|0) / 101)&-1;
  $mul4$i23 = $div$i22 << 3;
  HEAP32[99734] = $mul4$i23;
  HEAP32[32427] = $spec$select$i16;
  $51 = $mul4$i23;
 }
 $50 = HEAP32[99738]|0;
 $rem = (($50|0) % 3)&-1;
 $add119 = (($rem) + ($51))|0;
 HEAP32[99736] = $add119;
 HEAP32[99737] = 17;
 HEAP32[99735] = 0;
 $52 = 17;
 $dec121 = (($52) + -1)|0;
 HEAP32[99737] = $dec121;
 return;
}
function _ST_Ticker() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ammo$i = 0, $arrayidx11$1$i = 0, $arrayidx11$2$i = 0, $arrayidx11$i = 0, $arrayidx32$1$i = 0, $arrayidx32$2$i = 0, $arrayidx32$3$i = 0, $arrayidx32$i = 0, $arrayidx5$i = 0, $arrayidx8$1$i = 0, $arrayidx8$2$i = 0, $arrayidx8$i = 0, $call = 0, $cmp$i = 0;
 var $cmp30$1$i = 0, $cmp30$2$i = 0, $cmp30$3$i = 0, $cmp30$i = 0, $cond$1$i = 0, $cond$2$i = 0, $cond$i = 0, $dec$i = 0, $health = 0, $inc = 0, $land$ext26$i = 0, $lnot$ext$i = 0, $narrow$i = 0, $readyweapon$i = 0, $spec$store$select$1$i = 0, $spec$store$select$2$i = 0, $spec$store$select$i = 0, $storemerge$i = 0, $storemerge13$1$i = 0, $storemerge13$2$i = 0;
 var $storemerge13$3$i = 0, $storemerge13$p$1$i = 0, $storemerge13$p$2$i = 0, $storemerge13$p$3$i = 0, $storemerge13$p$i = 0, $tobool$1$i = 0, $tobool$2$i = 0, $tobool$i = 0, $tobool12$1$i = 0, $tobool12$2$i = 0, $tobool12$i = 0, $tobool17$i = 0, $tobool18$i = 0, $tobool22$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99755]|0;
 $inc = (($0) + 1)|0;
 HEAP32[99755] = $inc;
 $call = (_M_Random()|0);
 HEAP32[99738] = $call;
 $1 = HEAP32[99733]|0;
 $readyweapon$i = ((($1)) + 120|0);
 $2 = HEAP32[$readyweapon$i>>2]|0;
 $ammo$i = (496 + (($2*24)|0)|0);
 $3 = HEAP32[$ammo$i>>2]|0;
 $cmp$i = ($3|0)==(5);
 $arrayidx5$i = (((($1)) + 164|0) + ($3<<2)|0);
 $storemerge$i = $cmp$i ? 129720 : $arrayidx5$i;
 HEAP32[(398972)>>2] = $storemerge$i;
 HEAP32[(398984)>>2] = $2;
 $arrayidx8$i = ((($1)) + 76|0);
 $4 = HEAP32[$arrayidx8$i>>2]|0;
 $tobool$i = ($4|0)==(0);
 $cond$i = $tobool$i << 31 >> 31;
 $arrayidx11$i = ((($1)) + 88|0);
 $5 = HEAP32[$arrayidx11$i>>2]|0;
 $tobool12$i = ($5|0)==(0);
 $spec$store$select$i = $tobool12$i ? $cond$i : 3;
 HEAP32[99747] = $spec$store$select$i;
 $arrayidx8$1$i = ((($1)) + 80|0);
 $6 = HEAP32[$arrayidx8$1$i>>2]|0;
 $tobool$1$i = ($6|0)==(0);
 $cond$1$i = $tobool$1$i ? -1 : 1;
 $arrayidx11$1$i = ((($1)) + 92|0);
 $7 = HEAP32[$arrayidx11$1$i>>2]|0;
 $tobool12$1$i = ($7|0)==(0);
 $spec$store$select$1$i = $tobool12$1$i ? $cond$1$i : 4;
 HEAP32[(398992)>>2] = $spec$store$select$1$i;
 $arrayidx8$2$i = ((($1)) + 84|0);
 $8 = HEAP32[$arrayidx8$2$i>>2]|0;
 $tobool$2$i = ($8|0)==(0);
 $cond$2$i = $tobool$2$i ? -1 : 2;
 $arrayidx11$2$i = ((($1)) + 96|0);
 $9 = HEAP32[$arrayidx11$2$i>>2]|0;
 $tobool12$2$i = ($9|0)==(0);
 $spec$store$select$2$i = $tobool12$2$i ? $cond$2$i : 5;
 HEAP32[(398996)>>2] = $spec$store$select$2$i;
 _ST_updateFaceWidget();
 $10 = HEAP32[99091]|0;
 $tobool17$i = ($10|0)==(0);
 $lnot$ext$i = $tobool17$i&1;
 HEAP32[99750] = $lnot$ext$i;
 $11 = HEAP32[99729]|0;
 $tobool18$i = ($11|0)!=(0);
 $narrow$i = $tobool17$i & $tobool18$i;
 $12 = $narrow$i&1;
 HEAP32[99751] = $12;
 $tobool22$i = ($10|0)!=(0);
 $13 = $tobool22$i & $tobool18$i;
 $land$ext26$i = $13&1;
 HEAP32[99752] = $land$ext26$i;
 $14 = HEAP32[99076]|0;
 $15 = HEAP32[99733]|0;
 $cmp30$i = ($14|0)==(0);
 $arrayidx32$i = ((($15)) + 104|0);
 $16 = HEAP32[$arrayidx32$i>>2]|0;
 $17 = (0 - ($16))|0;
 $storemerge13$p$i = $cmp30$i ? $17 : $16;
 $cmp30$1$i = ($14|0)==(1);
 $arrayidx32$1$i = ((($15)) + 108|0);
 $18 = HEAP32[$arrayidx32$1$i>>2]|0;
 $19 = (0 - ($18))|0;
 $storemerge13$p$1$i = $cmp30$1$i ? $19 : $18;
 $storemerge13$1$i = (($storemerge13$p$1$i) + ($storemerge13$p$i))|0;
 $cmp30$2$i = ($14|0)==(2);
 $arrayidx32$2$i = ((($15)) + 112|0);
 $20 = HEAP32[$arrayidx32$2$i>>2]|0;
 $21 = (0 - ($20))|0;
 $storemerge13$p$2$i = $cmp30$2$i ? $21 : $20;
 $storemerge13$2$i = (($storemerge13$1$i) + ($storemerge13$p$2$i))|0;
 $cmp30$3$i = ($14|0)==(3);
 $arrayidx32$3$i = ((($15)) + 116|0);
 $22 = HEAP32[$arrayidx32$3$i>>2]|0;
 $23 = (0 - ($22))|0;
 $storemerge13$p$3$i = $cmp30$3$i ? $23 : $22;
 $storemerge13$3$i = (($storemerge13$2$i) + ($storemerge13$p$3$i))|0;
 HEAP32[99753] = $storemerge13$3$i;
 $24 = HEAP32[99754]|0;
 $dec$i = (($24) + -1)|0;
 HEAP32[99754] = $dec$i;
 $health = ((($15)) + 40|0);
 $25 = HEAP32[$health>>2]|0;
 HEAP32[32428] = $25;
 return;
}
function _ST_doPaletteStuff() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add11 = 0, $add15 = 0, $add20 = 0, $and = 0, $arrayidx = 0, $arrayidx23 = 0;
 var $bonuscount = 0, $call = 0, $cmp = 0, $cmp24 = 0, $cmp33 = 0, $cmp39 = 0, $damagecount = 0, $mul = 0, $or$cond = 0, $palette$0 = 0, $palette$0$off = 0, $shr = 0, $shr16 = 0, $shr7 = 0, $spec$select = 0, $spec$select18 = 0, $spec$select19 = 0, $spec$select20 = 0, $spec$store$select = 0, $spec$store$select1 = 0;
 var $sub = 0, $tobool = 0, $tobool12 = 0, $tobool27 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99733]|0;
 $damagecount = ((($0)) + 228|0);
 $1 = HEAP32[$damagecount>>2]|0;
 $arrayidx = ((($0)) + 56|0);
 $2 = HEAP32[$arrayidx>>2]|0;
 $tobool = ($2|0)==(0);
 $shr = $2 >> 6;
 $sub = (12 - ($shr))|0;
 $cmp = ($sub|0)>($1|0);
 $spec$select = $cmp ? $sub : $1;
 $spec$select20 = $tobool ? $1 : $spec$select;
 $tobool5 = ($spec$select20|0)==(0);
 do {
  if ($tobool5) {
   $bonuscount = ((($0)) + 232|0);
   $4 = HEAP32[$bonuscount>>2]|0;
   $tobool12 = ($4|0)==(0);
   if ($tobool12) {
    $arrayidx23 = ((($0)) + 64|0);
    $6 = HEAP32[$arrayidx23>>2]|0;
    $cmp24 = ($6|0)<(129);
    $and = $6 & 8;
    $tobool27 = ($and|0)==(0);
    $or$cond = $cmp24 & $tobool27;
    $spec$select19 = $or$cond ? 0 : 13;
    $palette$0 = $spec$select19;
    break;
   } else {
    $add15 = (($4) + 7)|0;
    $shr16 = $add15 >> 3;
    $5 = ($shr16|0)<(3);
    $spec$store$select1 = $5 ? $shr16 : 3;
    $add20 = (($spec$store$select1) + 9)|0;
    $palette$0 = $add20;
    break;
   }
  } else {
   $add = (($spec$select20) + 7)|0;
   $shr7 = $add >> 3;
   $3 = ($shr7|0)<(7);
   $spec$store$select = $3 ? $shr7 : 7;
   $add11 = (($spec$store$select) + 1)|0;
   $palette$0 = $add11;
  }
 } while(0);
 $7 = HEAP32[32141]|0;
 $cmp33 = ($7|0)==(9);
 $palette$0$off = (($palette$0) + -1)|0;
 $8 = ($palette$0$off>>>0)<(8);
 $9 = $8 & $cmp33;
 $spec$select18 = $9 ? 13 : $palette$0;
 $10 = HEAP32[99756]|0;
 $cmp39 = ($spec$select18|0)==($10|0);
 if ($cmp39) {
  return;
 }
 HEAP32[99756] = $spec$select18;
 $11 = HEAP32[99757]|0;
 $call = (_W_CacheLumpNum($11,8)|0);
 $mul = ($spec$select18*768)|0;
 $add$ptr = (($call) + ($mul)|0);
 _I_SetPalette($add$ptr);
 return;
}
function _ST_drawWidgets($refresh) {
 $refresh = $refresh|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $land$ext6 = 0, $narrow = 0, $tobool = 0, $tobool1 = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99729]|0;
 $tobool = ($0|0)!=(0);
 $1 = HEAP32[99091]|0;
 $tobool1 = ($1|0)==(0);
 $narrow = $tobool & $tobool1;
 $2 = $narrow&1;
 HEAP32[99751] = $2;
 $tobool2 = ($1|0)!=(0);
 $3 = $tobool & $tobool2;
 $land$ext6 = $3&1;
 HEAP32[99752] = $land$ext6;
 _STlib_updateNum(398956,$refresh);
 _STlib_updateNum(392704,$refresh);
 _STlib_updateNum(392832,$refresh);
 _STlib_updateNum((392736),$refresh);
 _STlib_updateNum((392864),$refresh);
 _STlib_updateNum((392768),$refresh);
 _STlib_updateNum((392896),$refresh);
 _STlib_updateNum((392800),$refresh);
 _STlib_updateNum((392928),$refresh);
 _STlib_updatePercent(399032,$refresh);
 _STlib_updatePercent(399068,$refresh);
 _STlib_updateBinIcon(399104,$refresh);
 _STlib_updateMultIcon(392960,$refresh);
 _STlib_updateMultIcon((392988),$refresh);
 _STlib_updateMultIcon((393016),$refresh);
 _STlib_updateMultIcon((393044),$refresh);
 _STlib_updateMultIcon((393072),$refresh);
 _STlib_updateMultIcon((393100),$refresh);
 _STlib_updateMultIcon(399132,$refresh);
 _STlib_updateMultIcon(393136,$refresh);
 _STlib_updateMultIcon((393164),$refresh);
 _STlib_updateMultIcon((393192),$refresh);
 _STlib_updateNum(399160,$refresh);
 return;
}
function _ST_doRefresh() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $tobool$i = 0, $tobool1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99732] = 0;
 $0 = HEAP32[99729]|0;
 $tobool$i = ($0|0)==(0);
 if ($tobool$i) {
  _ST_drawWidgets(1);
  return;
 }
 $1 = HEAP32[99728]|0;
 _V_UseBuffer($1);
 $2 = HEAP32[99730]|0;
 _V_DrawPatch(0,0,$2);
 $3 = HEAP32[99094]|0;
 $tobool1$i = ($3|0)==(0);
 if (!($tobool1$i)) {
  $4 = HEAP32[99731]|0;
  _V_DrawPatch(143,0,$4);
 }
 _V_RestoreBuffer();
 $5 = HEAP32[99728]|0;
 _V_CopyRect(0,0,$5,320,32,0,168);
 _ST_drawWidgets(1);
 return;
}
function _ST_Drawer($fullscreen,$refresh) {
 $fullscreen = $fullscreen|0;
 $refresh = $refresh|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $lor$ext = 0, $lor$ext6 = 0, $tobool = 0, $tobool1 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($fullscreen|0)==(0);
 $0 = HEAP32[98972]|0;
 $tobool1 = ($0|0)!=(0);
 $1 = $tobool | $tobool1;
 $lor$ext = $1&1;
 HEAP32[99729] = $lor$ext;
 $2 = HEAP32[99732]|0;
 $3 = $2 | $refresh;
 $4 = ($3|0)!=(0);
 $lor$ext6 = $4&1;
 HEAP32[99732] = $lor$ext6;
 _ST_doPaletteStuff();
 $5 = HEAP32[99732]|0;
 $tobool7 = ($5|0)==(0);
 if ($tobool7) {
  _ST_drawWidgets(0);
  return;
 } else {
  _ST_doRefresh();
  return;
 }
}
function _ST_loadGraphics() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx43$1$i = 0, $arrayidx43$2$i = 0, $arrayidx43$i = 0, $arrayidx51$i = 0, $arrayidx56$i = 0, $arrayidx61$i = 0, $arrayidx66$i = 0, $arrayidx71$i = 0, $call$i1 = 0, $call$i10 = 0, $call$i11 = 0, $call$i12 = 0;
 var $call$i13 = 0, $call$i14 = 0, $call$i15 = 0, $call$i16 = 0, $call$i17 = 0, $call$i18 = 0, $call$i19 = 0, $call$i2 = 0, $call$i20 = 0, $call$i21 = 0, $call$i22 = 0, $call$i23 = 0, $call$i24 = 0, $call$i25 = 0, $call$i26 = 0, $call$i27 = 0, $call$i28 = 0, $call$i29 = 0, $call$i3 = 0, $call$i30 = 0;
 var $call$i31 = 0, $call$i32 = 0, $call$i33 = 0, $call$i34 = 0, $call$i35 = 0, $call$i36 = 0, $call$i37 = 0, $call$i38 = 0, $call$i39 = 0, $call$i4 = 0, $call$i40 = 0, $call$i41 = 0, $call$i42 = 0, $call$i43 = 0, $call$i44 = 0, $call$i45 = 0, $call$i46 = 0, $call$i5 = 0, $call$i6 = 0, $call$i7 = 0;
 var $call$i8 = 0, $call$i9 = 0, $exitcond$i = 0, $facenum$061$i = 0, $i$360$i = 0, $inc44$1$i = 0, $inc44$i = 0, $inc52$i = 0, $inc57$i = 0, $inc62$i = 0, $inc67$i = 0, $inc72$i = 0, $inc74$i = 0, $namebuf$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer101 = 0, $vararg_buffer105 = 0, $vararg_buffer109 = 0;
 var $vararg_buffer112 = 0, $vararg_buffer115 = 0, $vararg_buffer118 = 0, $vararg_buffer121 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0;
 var $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_buffer64 = 0, $vararg_buffer67 = 0, $vararg_buffer7 = 0, $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer82 = 0, $vararg_buffer85 = 0, $vararg_buffer88 = 0, $vararg_buffer91 = 0, $vararg_buffer94 = 0, $vararg_buffer97 = 0, $vararg_ptr100 = 0, $vararg_ptr104 = 0, $vararg_ptr108 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $vararg_buffer121 = sp + 320|0;
 $vararg_buffer118 = sp + 312|0;
 $vararg_buffer115 = sp + 304|0;
 $vararg_buffer112 = sp + 296|0;
 $vararg_buffer109 = sp + 288|0;
 $vararg_buffer105 = sp + 280|0;
 $vararg_buffer101 = sp + 272|0;
 $vararg_buffer97 = sp + 264|0;
 $vararg_buffer94 = sp + 256|0;
 $vararg_buffer91 = sp + 248|0;
 $vararg_buffer88 = sp + 240|0;
 $vararg_buffer85 = sp + 232|0;
 $vararg_buffer82 = sp + 224|0;
 $vararg_buffer79 = sp + 216|0;
 $vararg_buffer76 = sp + 208|0;
 $vararg_buffer73 = sp + 200|0;
 $vararg_buffer70 = sp + 192|0;
 $vararg_buffer67 = sp + 184|0;
 $vararg_buffer64 = sp + 176|0;
 $vararg_buffer61 = sp + 168|0;
 $vararg_buffer58 = sp + 160|0;
 $vararg_buffer55 = sp + 152|0;
 $vararg_buffer52 = sp + 144|0;
 $vararg_buffer49 = sp + 136|0;
 $vararg_buffer46 = sp + 128|0;
 $vararg_buffer43 = sp + 120|0;
 $vararg_buffer40 = sp + 112|0;
 $vararg_buffer37 = sp + 104|0;
 $vararg_buffer34 = sp + 96|0;
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer28 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $namebuf$i = sp + 324|0;
 HEAP32[$vararg_buffer>>2] = 0;
 (_snprintf($namebuf$i,9,155901,$vararg_buffer)|0);
 $call$i2 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[98308] = $call$i2;
 HEAP32[$vararg_buffer1>>2] = 0;
 (_snprintf($namebuf$i,9,155910,$vararg_buffer1)|0);
 $call$i3 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[98320] = $call$i3;
 HEAP32[$vararg_buffer4>>2] = 1;
 (_snprintf($namebuf$i,9,155901,$vararg_buffer4)|0);
 $call$i18 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393236)>>2] = $call$i18;
 HEAP32[$vararg_buffer7>>2] = 1;
 (_snprintf($namebuf$i,9,155910,$vararg_buffer7)|0);
 $call$i19 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393284)>>2] = $call$i19;
 HEAP32[$vararg_buffer10>>2] = 2;
 (_snprintf($namebuf$i,9,155901,$vararg_buffer10)|0);
 $call$i20 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393240)>>2] = $call$i20;
 HEAP32[$vararg_buffer13>>2] = 2;
 (_snprintf($namebuf$i,9,155910,$vararg_buffer13)|0);
 $call$i21 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393288)>>2] = $call$i21;
 HEAP32[$vararg_buffer16>>2] = 3;
 (_snprintf($namebuf$i,9,155901,$vararg_buffer16)|0);
 $call$i22 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393244)>>2] = $call$i22;
 HEAP32[$vararg_buffer19>>2] = 3;
 (_snprintf($namebuf$i,9,155910,$vararg_buffer19)|0);
 $call$i23 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393292)>>2] = $call$i23;
 HEAP32[$vararg_buffer22>>2] = 4;
 (_snprintf($namebuf$i,9,155901,$vararg_buffer22)|0);
 $call$i24 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393248)>>2] = $call$i24;
 HEAP32[$vararg_buffer25>>2] = 4;
 (_snprintf($namebuf$i,9,155910,$vararg_buffer25)|0);
 $call$i25 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393296)>>2] = $call$i25;
 HEAP32[$vararg_buffer28>>2] = 5;
 (_snprintf($namebuf$i,9,155901,$vararg_buffer28)|0);
 $call$i26 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393252)>>2] = $call$i26;
 HEAP32[$vararg_buffer31>>2] = 5;
 (_snprintf($namebuf$i,9,155910,$vararg_buffer31)|0);
 $call$i27 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393300)>>2] = $call$i27;
 HEAP32[$vararg_buffer34>>2] = 6;
 (_snprintf($namebuf$i,9,155901,$vararg_buffer34)|0);
 $call$i28 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393256)>>2] = $call$i28;
 HEAP32[$vararg_buffer37>>2] = 6;
 (_snprintf($namebuf$i,9,155910,$vararg_buffer37)|0);
 $call$i29 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393304)>>2] = $call$i29;
 HEAP32[$vararg_buffer40>>2] = 7;
 (_snprintf($namebuf$i,9,155901,$vararg_buffer40)|0);
 $call$i30 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393260)>>2] = $call$i30;
 HEAP32[$vararg_buffer43>>2] = 7;
 (_snprintf($namebuf$i,9,155910,$vararg_buffer43)|0);
 $call$i31 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393308)>>2] = $call$i31;
 HEAP32[$vararg_buffer46>>2] = 8;
 (_snprintf($namebuf$i,9,155901,$vararg_buffer46)|0);
 $call$i32 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393264)>>2] = $call$i32;
 HEAP32[$vararg_buffer49>>2] = 8;
 (_snprintf($namebuf$i,9,155910,$vararg_buffer49)|0);
 $call$i33 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393312)>>2] = $call$i33;
 HEAP32[$vararg_buffer52>>2] = 9;
 (_snprintf($namebuf$i,9,155901,$vararg_buffer52)|0);
 $call$i34 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393268)>>2] = $call$i34;
 HEAP32[$vararg_buffer55>>2] = 9;
 (_snprintf($namebuf$i,9,155910,$vararg_buffer55)|0);
 $call$i35 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393316)>>2] = $call$i35;
 $call$i4 = (_W_CacheLumpName(155920,1)|0);
 HEAP32[99798] = $call$i4;
 HEAP32[$vararg_buffer58>>2] = 0;
 (_snprintf($namebuf$i,9,155929,$vararg_buffer58)|0);
 $call$i5 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[98332] = $call$i5;
 HEAP32[$vararg_buffer61>>2] = 1;
 (_snprintf($namebuf$i,9,155929,$vararg_buffer61)|0);
 $call$i36 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393332)>>2] = $call$i36;
 HEAP32[$vararg_buffer64>>2] = 2;
 (_snprintf($namebuf$i,9,155929,$vararg_buffer64)|0);
 $call$i37 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393336)>>2] = $call$i37;
 HEAP32[$vararg_buffer67>>2] = 3;
 (_snprintf($namebuf$i,9,155929,$vararg_buffer67)|0);
 $call$i38 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393340)>>2] = $call$i38;
 HEAP32[$vararg_buffer70>>2] = 4;
 (_snprintf($namebuf$i,9,155929,$vararg_buffer70)|0);
 $call$i39 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393344)>>2] = $call$i39;
 HEAP32[$vararg_buffer73>>2] = 5;
 (_snprintf($namebuf$i,9,155929,$vararg_buffer73)|0);
 $call$i40 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393348)>>2] = $call$i40;
 $call$i6 = (_W_CacheLumpName(155938,1)|0);
 HEAP32[99799] = $call$i6;
 HEAP32[$vararg_buffer76>>2] = 2;
 (_snprintf($namebuf$i,9,155945,$vararg_buffer76)|0);
 $call$i7 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[98340] = $call$i7;
 $0 = HEAP32[(393288)>>2]|0;
 HEAP32[(393364)>>2] = $0;
 HEAP32[$vararg_buffer79>>2] = 3;
 (_snprintf($namebuf$i,9,155945,$vararg_buffer79)|0);
 $call$i41 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393368)>>2] = $call$i41;
 $1 = HEAP32[(393292)>>2]|0;
 HEAP32[(393372)>>2] = $1;
 HEAP32[$vararg_buffer82>>2] = 4;
 (_snprintf($namebuf$i,9,155945,$vararg_buffer82)|0);
 $call$i42 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393376)>>2] = $call$i42;
 $2 = HEAP32[(393296)>>2]|0;
 HEAP32[(393380)>>2] = $2;
 HEAP32[$vararg_buffer85>>2] = 5;
 (_snprintf($namebuf$i,9,155945,$vararg_buffer85)|0);
 $call$i43 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393384)>>2] = $call$i43;
 $3 = HEAP32[(393300)>>2]|0;
 HEAP32[(393388)>>2] = $3;
 HEAP32[$vararg_buffer88>>2] = 6;
 (_snprintf($namebuf$i,9,155945,$vararg_buffer88)|0);
 $call$i44 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393392)>>2] = $call$i44;
 $4 = HEAP32[(393304)>>2]|0;
 HEAP32[(393396)>>2] = $4;
 HEAP32[$vararg_buffer91>>2] = 7;
 (_snprintf($namebuf$i,9,155945,$vararg_buffer91)|0);
 $call$i45 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[(393400)>>2] = $call$i45;
 $5 = HEAP32[(393308)>>2]|0;
 HEAP32[(393404)>>2] = $5;
 $6 = HEAP32[99076]|0;
 HEAP32[$vararg_buffer94>>2] = $6;
 (_snprintf($namebuf$i,9,155954,$vararg_buffer94)|0);
 $call$i8 = (_W_CacheLumpName($namebuf$i,1)|0);
 HEAP32[99731] = $call$i8;
 $call$i9 = (_W_CacheLumpName(155961,1)|0);
 HEAP32[99730] = $call$i9;
 $facenum$061$i = 0;$i$360$i = 0;
 while(1) {
  HEAP32[$vararg_buffer97>>2] = $i$360$i;
  $vararg_ptr100 = ((($vararg_buffer97)) + 4|0);
  HEAP32[$vararg_ptr100>>2] = 0;
  (_snprintf($namebuf$i,9,155967,$vararg_buffer97)|0);
  $arrayidx43$i = (393408 + ($facenum$061$i<<2)|0);
  $call$i10 = (_W_CacheLumpName($namebuf$i,1)|0);
  HEAP32[$arrayidx43$i>>2] = $call$i10;
  $inc44$i = $facenum$061$i | 1;
  HEAP32[$vararg_buffer101>>2] = $i$360$i;
  $vararg_ptr104 = ((($vararg_buffer101)) + 4|0);
  HEAP32[$vararg_ptr104>>2] = 1;
  (_snprintf($namebuf$i,9,155967,$vararg_buffer101)|0);
  $arrayidx43$1$i = (393408 + ($inc44$i<<2)|0);
  $call$i46 = (_W_CacheLumpName($namebuf$i,1)|0);
  HEAP32[$arrayidx43$1$i>>2] = $call$i46;
  $inc44$1$i = $facenum$061$i | 2;
  HEAP32[$vararg_buffer105>>2] = $i$360$i;
  $vararg_ptr108 = ((($vararg_buffer105)) + 4|0);
  HEAP32[$vararg_ptr108>>2] = 2;
  (_snprintf($namebuf$i,9,155967,$vararg_buffer105)|0);
  $arrayidx43$2$i = (393408 + ($inc44$1$i<<2)|0);
  $call$i1 = (_W_CacheLumpName($namebuf$i,1)|0);
  HEAP32[$arrayidx43$2$i>>2] = $call$i1;
  $7 = $facenum$061$i | 3;
  HEAP32[$vararg_buffer109>>2] = $i$360$i;
  (_snprintf($namebuf$i,9,155977,$vararg_buffer109)|0);
  $arrayidx51$i = (393408 + ($7<<2)|0);
  $call$i11 = (_W_CacheLumpName($namebuf$i,1)|0);
  HEAP32[$arrayidx51$i>>2] = $call$i11;
  $inc52$i = $facenum$061$i | 4;
  HEAP32[$vararg_buffer112>>2] = $i$360$i;
  (_snprintf($namebuf$i,9,155986,$vararg_buffer112)|0);
  $arrayidx56$i = (393408 + ($inc52$i<<2)|0);
  $call$i12 = (_W_CacheLumpName($namebuf$i,1)|0);
  HEAP32[$arrayidx56$i>>2] = $call$i12;
  $inc57$i = $facenum$061$i | 5;
  HEAP32[$vararg_buffer115>>2] = $i$360$i;
  (_snprintf($namebuf$i,9,155995,$vararg_buffer115)|0);
  $arrayidx61$i = (393408 + ($inc57$i<<2)|0);
  $call$i13 = (_W_CacheLumpName($namebuf$i,1)|0);
  HEAP32[$arrayidx61$i>>2] = $call$i13;
  $inc62$i = $facenum$061$i | 6;
  HEAP32[$vararg_buffer118>>2] = $i$360$i;
  (_snprintf($namebuf$i,9,156005,$vararg_buffer118)|0);
  $arrayidx66$i = (393408 + ($inc62$i<<2)|0);
  $call$i14 = (_W_CacheLumpName($namebuf$i,1)|0);
  HEAP32[$arrayidx66$i>>2] = $call$i14;
  $inc67$i = $facenum$061$i | 7;
  HEAP32[$vararg_buffer121>>2] = $i$360$i;
  (_snprintf($namebuf$i,9,156014,$vararg_buffer121)|0);
  $arrayidx71$i = (393408 + ($inc67$i<<2)|0);
  $call$i15 = (_W_CacheLumpName($namebuf$i,1)|0);
  HEAP32[$arrayidx71$i>>2] = $call$i15;
  $inc72$i = (($facenum$061$i) + 8)|0;
  $inc74$i = (($i$360$i) + 1)|0;
  $exitcond$i = ($inc74$i|0)==(5);
  if ($exitcond$i) {
   break;
  } else {
   $facenum$061$i = $inc72$i;$i$360$i = $inc74$i;
  }
 }
 $call$i16 = (_W_CacheLumpName(156024,1)|0);
 HEAP32[(393568)>>2] = $call$i16;
 $call$i17 = (_W_CacheLumpName(156581,1)|0);
 HEAP32[(393572)>>2] = $call$i17;
 STACKTOP = sp;return;
}
function _ST_createWidgets() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ammo1 = 0, $armorpoints = 0, $arrayidx11 = 0, $arrayidx13 = 0, $arrayidx15 = 0, $arrayidx17 = 0, $arrayidx18 = 0, $arrayidx2 = 0, $arrayidx20 = 0, $arrayidx22 = 0, $arrayidx24 = 0, $arrayidx9 = 0, $arrayidx9$1 = 0, $arrayidx9$2 = 0, $arrayidx9$3 = 0, $arrayidx9$4 = 0, $arrayidx9$5 = 0;
 var $health = 0, $readyweapon = 0, $readyweapon3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99733]|0;
 $readyweapon = ((($0)) + 120|0);
 $1 = HEAP32[$readyweapon>>2]|0;
 $ammo1 = (496 + (($1*24)|0)|0);
 $2 = HEAP32[$ammo1>>2]|0;
 $arrayidx2 = (((($0)) + 164|0) + ($2<<2)|0);
 _STlib_initNum(398956,44,171,393232,$arrayidx2,398916,3);
 $3 = HEAP32[99733]|0;
 $readyweapon3 = ((($3)) + 120|0);
 $4 = HEAP32[$readyweapon3>>2]|0;
 HEAP32[(398984)>>2] = $4;
 $health = ((($3)) + 40|0);
 $5 = HEAP32[99798]|0;
 _STlib_initPercent(399032,90,171,393232,$health,398916,$5);
 $6 = HEAP32[99799]|0;
 _STlib_initBinIcon(399104,104,168,$6,399000,398916);
 $7 = HEAP32[99733]|0;
 $arrayidx9 = ((($7)) + 132|0);
 _STlib_initMultIcon(392960,111,172,393360,$arrayidx9,399004);
 $8 = HEAP32[99733]|0;
 $arrayidx9$1 = ((($8)) + 136|0);
 _STlib_initMultIcon((392988),123,172,(393368),$arrayidx9$1,399004);
 $9 = HEAP32[99733]|0;
 $arrayidx9$2 = ((($9)) + 140|0);
 _STlib_initMultIcon((393016),135,172,(393376),$arrayidx9$2,399004);
 $10 = HEAP32[99733]|0;
 $arrayidx9$3 = ((($10)) + 144|0);
 _STlib_initMultIcon((393044),111,182,(393384),$arrayidx9$3,399004);
 $11 = HEAP32[99733]|0;
 $arrayidx9$4 = ((($11)) + 148|0);
 _STlib_initMultIcon((393072),123,182,(393392),$arrayidx9$4,399004);
 $12 = HEAP32[99733]|0;
 $arrayidx9$5 = ((($12)) + 152|0);
 _STlib_initMultIcon((393100),135,182,(393400),$arrayidx9$5,399004);
 _STlib_initNum(399160,138,171,393232,399012,399008,2);
 _STlib_initMultIcon(399132,143,168,393408,398944,398916);
 $13 = HEAP32[99733]|0;
 $armorpoints = ((($13)) + 44|0);
 $14 = HEAP32[99798]|0;
 _STlib_initPercent(399068,221,171,393232,$armorpoints,398916,$14);
 _STlib_initMultIcon(393136,239,171,393328,398988,398916);
 _STlib_initMultIcon((393164),239,181,393328,(398992),398916);
 _STlib_initMultIcon((393192),239,191,393328,(398996),398916);
 $15 = HEAP32[99733]|0;
 $arrayidx11 = ((($15)) + 164|0);
 _STlib_initNum(392704,288,173,393280,$arrayidx11,398916,3);
 $16 = HEAP32[99733]|0;
 $arrayidx13 = ((($16)) + 168|0);
 _STlib_initNum((392736),288,179,393280,$arrayidx13,398916,3);
 $17 = HEAP32[99733]|0;
 $arrayidx15 = ((($17)) + 172|0);
 _STlib_initNum((392768),288,191,393280,$arrayidx15,398916,3);
 $18 = HEAP32[99733]|0;
 $arrayidx17 = ((($18)) + 176|0);
 _STlib_initNum((392800),288,185,393280,$arrayidx17,398916,3);
 $19 = HEAP32[99733]|0;
 $arrayidx18 = ((($19)) + 180|0);
 _STlib_initNum(392832,314,173,393280,$arrayidx18,398916,3);
 $20 = HEAP32[99733]|0;
 $arrayidx20 = ((($20)) + 184|0);
 _STlib_initNum((392864),314,179,393280,$arrayidx20,398916,3);
 $21 = HEAP32[99733]|0;
 $arrayidx22 = ((($21)) + 188|0);
 _STlib_initNum((392896),314,191,393280,$arrayidx22,398916,3);
 $22 = HEAP32[99733]|0;
 $arrayidx24 = ((($22)) + 192|0);
 _STlib_initNum((392928),314,185,393280,$arrayidx24,398916,3);
 return;
}
function _ST_Start() {
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx$i = 0, $call$i = 0, $scevgep$i = 0, $tobool = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[32431]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  $1 = HEAP32[99757]|0;
  $call$i = (_W_CacheLumpNum($1,8)|0);
  _I_SetPalette($call$i);
  HEAP32[32431] = 1;
 }
 HEAP32[99732] = 1;
 $2 = HEAP32[99076]|0;
 $arrayidx$i = (181680 + (($2*288)|0)|0);
 HEAP32[99733] = $arrayidx$i;
 HEAP32[99755] = 0;
 HEAP32[99729] = 1;
 HEAP32[99736] = 0;
 HEAP32[99756] = -1;
 HEAP32[32428] = -1;
 $scevgep$i = (((181680 + (($2*288)|0)|0)) + 128|0);
 dest=392656; src=$scevgep$i; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 ;HEAP32[398988>>2]=4294967295|0;HEAP32[398988+4>>2]=4294967295|0;HEAP32[398988+8>>2]=4294967295|0;
 _STlib_init();
 _ST_createWidgets();
 HEAP32[32431] = 0;
 return;
}
function _ST_Init() {
 var $call = 0, $call$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call$i = (_W_GetNumForName(156315)|0);
 HEAP32[99757] = $call$i;
 _ST_loadGraphics();
 $call = (_Z_Malloc(10240,1,0)|0);
 HEAP32[99728] = $call;
 return;
}
function _S_Init($sfxVolume,$musicVolume) {
 $sfxVolume = $sfxVolume|0;
 $musicVolume = $musicVolume|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $cmp = 0, $cmp10 = 0, $exitcond = 0, $i$011 = 0, $i$19 = 0, $inc = 0, $inc7 = 0, $lumpnum = 0, $mul = 0, $sfxinfo = 0, $usefulness = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($sfxVolume>>>0)>(127);
 if ($0) {
  HEAP32[$vararg_buffer>>2] = $sfxVolume;
  _I_Error(156032,$vararg_buffer);
  // unreachable;
 }
 HEAP32[99800] = $sfxVolume;
 $1 = ($musicVolume>>>0)>(127);
 if ($1) {
  HEAP32[$vararg_buffer1>>2] = $musicVolume;
  _I_Error(156064,$vararg_buffer1);
  // unreachable;
 }
 $2 = HEAP32[32434]|0;
 $mul = ($2*12)|0;
 $call = (_Z_Malloc($mul,1,0)|0);
 HEAP32[99801] = $call;
 $3 = HEAP32[32434]|0;
 $cmp10 = ($3|0)>(0);
 if ($cmp10) {
  $i$011 = 0;
  while(1) {
   $sfxinfo = (($call) + (($i$011*12)|0)|0);
   HEAP32[$sfxinfo>>2] = 0;
   $inc = (($i$011) + 1)|0;
   $cmp = ($inc|0)<($3|0);
   if ($cmp) {
    $i$011 = $inc;
   } else {
    break;
   }
  }
 }
 HEAP32[99802] = 0;
 $i$19 = 1;
 while(1) {
  $usefulness = (((52688 + (($i$19*48)|0)|0)) + 32|0);
  HEAP32[$usefulness>>2] = -1;
  $lumpnum = (((52688 + (($i$19*48)|0)|0)) + 36|0);
  HEAP32[$lumpnum>>2] = -1;
  $inc7 = (($i$19) + 1)|0;
  $exitcond = ($inc7|0)==(109);
  if ($exitcond) {
   break;
  } else {
   $i$19 = $inc7;
  }
 }
 _I_AtExit(160,1);
 STACKTOP = sp;return;
}
function _S_Shutdown() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _S_SetSfxVolume($volume) {
 $volume = $volume|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = ($volume>>>0)>(127);
 if ($0) {
  HEAP32[$vararg_buffer>>2] = $volume;
  _I_Error(156032,$vararg_buffer);
  // unreachable;
 } else {
  HEAP32[99800] = $volume;
  STACKTOP = sp;return;
 }
}
function _S_SetMusicVolume($volume) {
 $volume = $volume|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = ($volume>>>0)>(127);
 if ($0) {
  HEAP32[$vararg_buffer>>2] = $volume;
  _I_Error(156064,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _S_Start() {
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add7 = 0, $arrayidx11 = 0, $call$i = 0, $cmp = 0;
 var $cmp1 = 0, $cmp3 = 0, $cmp6 = 0, $cnum$07 = 0, $dec$i = 0, $handle$i = 0, $inc = 0, $mnum$1 = 0, $sfxinfo = 0, $sub = 0, $sub10 = 0, $sub8 = 0, $tobool = 0, $tobool1$i = 0, $usefulness$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32434]|0;
 $cmp6 = ($0|0)>(0);
 if ($cmp6) {
  $14 = $0;$cnum$07 = 0;
  while(1) {
   $1 = HEAP32[99801]|0;
   $sfxinfo = (($1) + (($cnum$07*12)|0)|0);
   $2 = HEAP32[$sfxinfo>>2]|0;
   $tobool = ($2|0)==(0|0);
   if ($tobool) {
    $6 = $14;
   } else {
    $handle$i = (((($1) + (($cnum$07*12)|0)|0)) + 8|0);
    $3 = HEAP32[$handle$i>>2]|0;
    $call$i = (_I_SoundIsPlaying($3)|0);
    $tobool1$i = ($call$i|0)==(0);
    if (!($tobool1$i)) {
    }
    $4 = HEAP32[$sfxinfo>>2]|0;
    $usefulness$i = ((($4)) + 32|0);
    $5 = HEAP32[$usefulness$i>>2]|0;
    $dec$i = (($5) + -1)|0;
    HEAP32[$usefulness$i>>2] = $dec$i;
    HEAP32[$sfxinfo>>2] = 0;
    $$pre = HEAP32[32434]|0;
    $6 = $$pre;
   }
   $inc = (($cnum$07) + 1)|0;
   $cmp = ($inc|0)<($6|0);
   if ($cmp) {
    $14 = $6;$cnum$07 = $inc;
   } else {
    break;
   }
  }
 }
 HEAP32[99802] = 0;
 $7 = HEAP32[32140]|0;
 $cmp1 = ($7|0)==(2);
 if ($cmp1) {
  $8 = HEAP32[99084]|0;
  $sub = (($8) + 32)|0;
  $mnum$1 = $sub;
  _S_ChangeMusic($mnum$1,1);
  return;
 }
 $9 = HEAP32[99085]|0;
 $cmp3 = ($9|0)<(4);
 if ($cmp3) {
  $10 = ($9*9)|0;
  $11 = HEAP32[99084]|0;
  $add7 = (($10) + -9)|0;
  $sub8 = (($add7) + ($11))|0;
  $mnum$1 = $sub8;
  _S_ChangeMusic($mnum$1,1);
  return;
 } else {
  $12 = HEAP32[99084]|0;
  $sub10 = (($12) + -1)|0;
  $arrayidx11 = (58288 + ($sub10<<2)|0);
  $13 = HEAP32[$arrayidx11>>2]|0;
  $mnum$1 = $13;
  _S_ChangeMusic($mnum$1,1);
  return;
 }
}
function _S_ChangeMusic($musicnum,$looping) {
 $musicnum = $musicnum|0;
 $looping = $looping|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call13 = 0, $call17 = 0, $call20 = 0, $call21 = 0, $cmp = 0, $cmp8 = 0;
 var $data = 0, $data$i = 0, $handle22 = 0, $lumpnum = 0, $lumpnum$i = 0, $musicnum$addr$0 = 0, $musicnum$addr$0$off = 0, $namebuf = 0, $spec$select = 0, $tobool = 0, $tobool$i = 0, $tobool1$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $namebuf = sp + 12|0;
 $cmp = ($musicnum|0)==(29);
 if ($cmp) {
  $0 = HEAP32[32167]|0;
  $1 = $0 | 1;
  $2 = ($1|0)==(3);
  $spec$select = $2 ? 32 : 29;
  $musicnum$addr$0 = $spec$select;
 } else {
  $musicnum$addr$0 = $musicnum;
 }
 $musicnum$addr$0$off = (($musicnum$addr$0) + -1)|0;
 $3 = ($musicnum$addr$0$off>>>0)>(66);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = $musicnum$addr$0;
  _I_Error(156098,$vararg_buffer);
  // unreachable;
 }
 $arrayidx = (51600 + ($musicnum$addr$0<<4)|0);
 $4 = HEAP32[99803]|0;
 $cmp8 = ($4|0)==($arrayidx|0);
 if ($cmp8) {
  STACKTOP = sp;return;
 }
 $tobool$i = ($4|0)==(0|0);
 if (!($tobool$i)) {
  $5 = HEAP32[99802]|0;
  $tobool1$i = ($5|0)==(0);
  if (!($tobool1$i)) {
  }
  $6 = HEAP32[99803]|0;
  $lumpnum$i = ((($6)) + 4|0);
  $7 = HEAP32[$lumpnum$i>>2]|0;
  _W_ReleaseLumpNum($7);
  $8 = HEAP32[99803]|0;
  $data$i = ((($8)) + 8|0);
  HEAP32[$data$i>>2] = 0;
  HEAP32[99803] = 0;
 }
 $lumpnum = ((($arrayidx)) + 4|0);
 $9 = HEAP32[$lumpnum>>2]|0;
 $tobool = ($9|0)==(0);
 if ($tobool) {
  $10 = HEAP32[$arrayidx>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $10;
  (_M_snprintf($namebuf,9,156118,$vararg_buffer1)|0);
  $call13 = (_W_GetNumForName($namebuf)|0);
  HEAP32[$lumpnum>>2] = $call13;
  $11 = $call13;
 } else {
  $11 = $9;
 }
 $call17 = (_W_CacheLumpNum($11,1)|0);
 $data = ((($arrayidx)) + 8|0);
 HEAP32[$data>>2] = $call17;
 $12 = HEAP32[$lumpnum>>2]|0;
 $call20 = (_W_LumpLength($12)|0);
 $call21 = (_I_RegisterSong($call17,$call20)|0);
 $handle22 = ((($arrayidx)) + 12|0);
 HEAP32[$handle22>>2] = $call21;
 HEAP32[99803] = $arrayidx;
 STACKTOP = sp;return;
}
function _S_StopSound($origin) {
 $origin = $origin|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call$i = 0, $cmp = 0, $cmp3 = 0, $cmp7 = 0, $cnum$08 = 0, $dec$i = 0, $handle$i = 0, $inc = 0, $origin2 = 0, $sfxinfo = 0, $tobool = 0, $tobool1$i = 0, $usefulness$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32434]|0;
 $cmp7 = ($0|0)>(0);
 if (!($cmp7)) {
  return;
 }
 $1 = HEAP32[99801]|0;
 $cnum$08 = 0;
 while(1) {
  $sfxinfo = (($1) + (($cnum$08*12)|0)|0);
  $2 = HEAP32[$sfxinfo>>2]|0;
  $tobool = ($2|0)==(0|0);
  if (!($tobool)) {
   $origin2 = (((($1) + (($cnum$08*12)|0)|0)) + 4|0);
   $3 = HEAP32[$origin2>>2]|0;
   $cmp3 = ($3|0)==($origin|0);
   if ($cmp3) {
    break;
   }
  }
  $inc = (($cnum$08) + 1)|0;
  $cmp = ($inc|0)<($0|0);
  if ($cmp) {
   $cnum$08 = $inc;
  } else {
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return;
 }
 $handle$i = (((($1) + (($cnum$08*12)|0)|0)) + 8|0);
 $4 = HEAP32[$handle$i>>2]|0;
 $call$i = (_I_SoundIsPlaying($4)|0);
 $tobool1$i = ($call$i|0)==(0);
 if (!($tobool1$i)) {
 }
 $5 = HEAP32[$sfxinfo>>2]|0;
 $usefulness$i = ((($5)) + 32|0);
 $6 = HEAP32[$usefulness$i>>2]|0;
 $dec$i = (($6) + -1)|0;
 HEAP32[$usefulness$i>>2] = $dec$i;
 HEAP32[$sfxinfo>>2] = 0;
 return;
}
function _S_StartSound($origin_p,$sfx_id) {
 $origin_p = $origin_p|0;
 $sfx_id = $sfx_id|0;
 var $$idx = 0, $$idx$val = 0, $$idx24 = 0, $$idx24$val = 0, $$pr = 0, $$pr$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $call = 0, $call$i$i = 0, $call$i$i30 = 0, $call$i22$i = 0, $call42 = 0, $call45 = 0, $cmp$i = 0, $cmp$i38 = 0;
 var $cmp$us$i = 0, $cmp11$i = 0, $cmp1132$i = 0, $cmp13 = 0, $cmp16$i = 0, $cmp20 = 0, $cmp22$i = 0, $cmp25 = 0, $cmp3$i = 0, $cmp35$i = 0, $cmp36 = 0, $cmp4 = 0, $cmp40 = 0, $cmp5$i = 0, $cmp7 = 0, $cmp7$i = 0, $cmp8$i = 0, $cnum$031$i = 0, $cnum$036$i = 0, $cnum$036$us$i = 0;
 var $cnum$08$i = 0, $cnum$1$lcssa$i = 0, $cnum$133$i = 0, $cnum$2$i = 0, $dec$i$i = 0, $dec$i$i35 = 0, $dec$i27$i = 0, $handle = 0, $handle$i$i = 0, $handle$i$i29 = 0, $handle$i21$i = 0, $inc = 0, $inc$i = 0, $inc$i37 = 0, $inc$us$i = 0, $inc20$i = 0, $link = 0, $lumpnum = 0, $mo = 0, $mo18 = 0;
 var $origin2$i = 0, $origin29$i = 0, $origin4$i = 0, $priority$i = 0, $priority15$i = 0, $sep = 0, $sfx_id$off = 0, $sfxinfo$i = 0, $sfxinfo$i19$i = 0, $sfxinfo1$i = 0, $sfxinfo1$us$i = 0, $sfxinfo14$i = 0, $sfxinfo28$i = 0, $spec$select = 0, $tobool = 0, $tobool$i = 0, $tobool$i20$i = 0, $tobool$i26 = 0, $tobool$us$i = 0, $tobool1$i$i = 0;
 var $tobool1$i$i31 = 0, $tobool1$i23$i = 0, $tobool11 = 0, $tobool28 = 0, $usefulness = 0, $usefulness$i$i = 0, $usefulness$i$i34 = 0, $usefulness$i26$i = 0, $vararg_buffer = 0, $volume = 0, $volume3 = 0, $x19 = 0, $y24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $sep = sp + 8|0;
 $volume = sp + 4|0;
 $0 = HEAP32[99800]|0;
 HEAP32[$volume>>2] = $0;
 $sfx_id$off = (($sfx_id) + -1)|0;
 $1 = ($sfx_id$off>>>0)>(108);
 if ($1) {
  HEAP32[$vararg_buffer>>2] = $sfx_id;
  _I_Error(156123,$vararg_buffer);
  // unreachable;
 }
 $arrayidx = (52688 + (($sfx_id*48)|0)|0);
 $link = (((52688 + (($sfx_id*48)|0)|0)) + 20|0);
 $2 = HEAP32[$link>>2]|0;
 $tobool = ($2|0)==(0|0);
 if (!($tobool)) {
  $volume3 = (((52688 + (($sfx_id*48)|0)|0)) + 28|0);
  $3 = HEAP32[$volume3>>2]|0;
  $add = (($3) + ($0))|0;
  HEAP32[$volume>>2] = $add;
  $cmp4 = ($add|0)<(1);
  if ($cmp4) {
   STACKTOP = sp;return;
  }
  $4 = HEAP32[99800]|0;
  $cmp7 = ($add|0)>($4|0);
  if ($cmp7) {
   HEAP32[$volume>>2] = $4;
  }
 }
 $tobool11 = ($origin_p|0)==(0|0);
 if ($tobool11) {
  label = 13;
 } else {
  $5 = HEAP32[99076]|0;
  $mo = (181680 + (($5*288)|0)|0);
  $6 = HEAP32[$mo>>2]|0;
  $cmp13 = ($6|0)==($origin_p|0);
  if ($cmp13) {
   label = 13;
  } else {
   $$idx = ((($origin_p)) + 12|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $$idx24 = ((($origin_p)) + 16|0);
   $$idx24$val = HEAP32[$$idx24>>2]|0;
   $call = (_S_AdjustSoundParams($6,$$idx$val,$$idx24$val,$volume,$sep)|0);
   $7 = HEAP32[$$idx>>2]|0;
   $8 = HEAP32[99076]|0;
   $mo18 = (181680 + (($8*288)|0)|0);
   $9 = HEAP32[$mo18>>2]|0;
   $x19 = ((($9)) + 12|0);
   $10 = HEAP32[$x19>>2]|0;
   $cmp20 = ($7|0)==($10|0);
   if ($cmp20) {
    $11 = HEAP32[$$idx24>>2]|0;
    $y24 = ((($9)) + 16|0);
    $12 = HEAP32[$y24>>2]|0;
    $cmp25 = ($11|0)==($12|0);
    if ($cmp25) {
     HEAP32[$sep>>2] = 128;
    }
   }
   $tobool28 = ($call|0)==(0);
   if ($tobool28) {
    STACKTOP = sp;return;
   }
  }
 }
 if ((label|0) == 13) {
  HEAP32[$sep>>2] = 128;
 }
 $13 = HEAP32[32434]|0;
 $cmp7$i = ($13|0)>(0);
 L22: do {
  if ($cmp7$i) {
   $14 = HEAP32[99801]|0;
   $cnum$08$i = 0;
   while(1) {
    $sfxinfo$i = (($14) + (($cnum$08$i*12)|0)|0);
    $15 = HEAP32[$sfxinfo$i>>2]|0;
    $tobool$i = ($15|0)==(0|0);
    if (!($tobool$i)) {
     $origin2$i = (((($14) + (($cnum$08$i*12)|0)|0)) + 4|0);
     $16 = HEAP32[$origin2$i>>2]|0;
     $cmp3$i = ($16|0)==($origin_p|0);
     if ($cmp3$i) {
      label = 18;
      break;
     }
    }
    $inc$i = (($cnum$08$i) + 1)|0;
    $cmp$i = ($inc$i|0)<($13|0);
    if ($cmp$i) {
     $cnum$08$i = $inc$i;
    } else {
     $$pr = $13;
     break;
    }
   }
   if ((label|0) == 18) {
    $handle$i$i = (((($14) + (($cnum$08$i*12)|0)|0)) + 8|0);
    $17 = HEAP32[$handle$i$i>>2]|0;
    $call$i$i = (_I_SoundIsPlaying($17)|0);
    $tobool1$i$i = ($call$i$i|0)==(0);
    if (!($tobool1$i$i)) {
    }
    $18 = HEAP32[$sfxinfo$i>>2]|0;
    $usefulness$i$i = ((($18)) + 32|0);
    $19 = HEAP32[$usefulness$i$i>>2]|0;
    $dec$i$i = (($19) + -1)|0;
    HEAP32[$usefulness$i$i>>2] = $dec$i$i;
    HEAP32[$sfxinfo$i>>2] = 0;
    $$pr$pre = HEAP32[32434]|0;
    $$pr = $$pr$pre;
   }
   $cmp35$i = ($$pr|0)>(0);
   if ($cmp35$i) {
    $20 = HEAP32[99801]|0;
    if ($tobool11) {
     $cnum$036$us$i = 0;
     while(1) {
      $sfxinfo1$us$i = (($20) + (($cnum$036$us$i*12)|0)|0);
      $21 = HEAP32[$sfxinfo1$us$i>>2]|0;
      $tobool$us$i = ($21|0)==(0|0);
      if ($tobool$us$i) {
       $27 = $$pr;$cnum$031$i = $cnum$036$us$i;
       break L22;
      }
      $inc$us$i = (($cnum$036$us$i) + 1)|0;
      $cmp$us$i = ($inc$us$i|0)<($$pr|0);
      if ($cmp$us$i) {
       $cnum$036$us$i = $inc$us$i;
      } else {
       $27 = $$pr;$cnum$031$i = $inc$us$i;
       break L22;
      }
     }
    }
    $cnum$036$i = 0;
    while(1) {
     $sfxinfo1$i = (($20) + (($cnum$036$i*12)|0)|0);
     $22 = HEAP32[$sfxinfo1$i>>2]|0;
     $tobool$i26 = ($22|0)==(0|0);
     if ($tobool$i26) {
      $27 = $$pr;$cnum$031$i = $cnum$036$i;
      break L22;
     }
     $origin4$i = (((($20) + (($cnum$036$i*12)|0)|0)) + 4|0);
     $23 = HEAP32[$origin4$i>>2]|0;
     $cmp5$i = ($23|0)==($origin_p|0);
     if ($cmp5$i) {
      break;
     }
     $inc$i37 = (($cnum$036$i) + 1)|0;
     $cmp$i38 = ($inc$i37|0)<($$pr|0);
     if ($cmp$i38) {
      $cnum$036$i = $inc$i37;
     } else {
      $27 = $$pr;$cnum$031$i = $inc$i37;
      break L22;
     }
    }
    $handle$i$i29 = (((($20) + (($cnum$036$i*12)|0)|0)) + 8|0);
    $24 = HEAP32[$handle$i$i29>>2]|0;
    $call$i$i30 = (_I_SoundIsPlaying($24)|0);
    $tobool1$i$i31 = ($call$i$i30|0)==(0);
    if (!($tobool1$i$i31)) {
    }
    $25 = HEAP32[$sfxinfo1$i>>2]|0;
    $usefulness$i$i34 = ((($25)) + 32|0);
    $26 = HEAP32[$usefulness$i$i34>>2]|0;
    $dec$i$i35 = (($26) + -1)|0;
    HEAP32[$usefulness$i$i34>>2] = $dec$i$i35;
    HEAP32[$sfxinfo1$i>>2] = 0;
    $$pre$i = HEAP32[32434]|0;
    $27 = $$pre$i;$cnum$031$i = $cnum$036$i;
   } else {
    $27 = $$pr;$cnum$031$i = 0;
   }
  } else {
   $27 = $13;$cnum$031$i = 0;
  }
 } while(0);
 $cmp8$i = ($cnum$031$i|0)==($27|0);
 if ($cmp8$i) {
  $cmp1132$i = ($27|0)>(0);
  L53: do {
   if ($cmp1132$i) {
    $28 = HEAP32[99801]|0;
    $priority15$i = (((52688 + (($sfx_id*48)|0)|0)) + 16|0);
    $29 = HEAP32[$priority15$i>>2]|0;
    $cnum$133$i = 0;
    while(1) {
     $sfxinfo14$i = (($28) + (($cnum$133$i*12)|0)|0);
     $30 = HEAP32[$sfxinfo14$i>>2]|0;
     $priority$i = ((($30)) + 16|0);
     $31 = HEAP32[$priority$i>>2]|0;
     $cmp16$i = ($31|0)<($29|0);
     if (!($cmp16$i)) {
      $cnum$1$lcssa$i = $cnum$133$i;
      break L53;
     }
     $inc20$i = (($cnum$133$i) + 1)|0;
     $cmp11$i = ($inc20$i|0)<($27|0);
     if ($cmp11$i) {
      $cnum$133$i = $inc20$i;
     } else {
      $cnum$1$lcssa$i = $inc20$i;
      break;
     }
    }
   } else {
    $cnum$1$lcssa$i = 0;
   }
  } while(0);
  $cmp22$i = ($cnum$1$lcssa$i|0)==($27|0);
  if ($cmp22$i) {
   STACKTOP = sp;return;
  }
  $32 = HEAP32[99801]|0;
  $sfxinfo$i19$i = (($32) + (($cnum$1$lcssa$i*12)|0)|0);
  $33 = HEAP32[$sfxinfo$i19$i>>2]|0;
  $tobool$i20$i = ($33|0)==(0|0);
  if ($tobool$i20$i) {
   $cnum$2$i = $cnum$1$lcssa$i;
  } else {
   $handle$i21$i = (((($32) + (($cnum$1$lcssa$i*12)|0)|0)) + 8|0);
   $34 = HEAP32[$handle$i21$i>>2]|0;
   $call$i22$i = (_I_SoundIsPlaying($34)|0);
   $tobool1$i23$i = ($call$i22$i|0)==(0);
   if (!($tobool1$i23$i)) {
   }
   $35 = HEAP32[$sfxinfo$i19$i>>2]|0;
   $usefulness$i26$i = ((($35)) + 32|0);
   $36 = HEAP32[$usefulness$i26$i>>2]|0;
   $dec$i27$i = (($36) + -1)|0;
   HEAP32[$usefulness$i26$i>>2] = $dec$i27$i;
   HEAP32[$sfxinfo$i19$i>>2] = 0;
   $cnum$2$i = $cnum$1$lcssa$i;
  }
 } else {
  $cnum$2$i = $cnum$031$i;
 }
 $37 = HEAP32[99801]|0;
 $sfxinfo28$i = (($37) + (($cnum$2$i*12)|0)|0);
 HEAP32[$sfxinfo28$i>>2] = $arrayidx;
 $origin29$i = (((($37) + (($cnum$2$i*12)|0)|0)) + 4|0);
 HEAP32[$origin29$i>>2] = $origin_p;
 $usefulness = (((52688 + (($sfx_id*48)|0)|0)) + 32|0);
 $38 = HEAP32[$usefulness>>2]|0;
 $inc = (($38) + 1)|0;
 $cmp36 = ($38|0)<(0);
 $spec$select = $cmp36 ? 1 : $inc;
 HEAP32[$usefulness>>2] = $spec$select;
 $lumpnum = (((52688 + (($sfx_id*48)|0)|0)) + 36|0);
 $39 = HEAP32[$lumpnum>>2]|0;
 $cmp40 = ($39|0)<(0);
 if ($cmp40) {
  $call42 = (_I_GetSfxLumpNum($arrayidx)|0);
  HEAP32[$lumpnum>>2] = $call42;
 }
 $40 = HEAP32[$volume>>2]|0;
 $41 = HEAP32[$sep>>2]|0;
 $call45 = (_I_StartSound($arrayidx,$cnum$2$i,$40,$41)|0);
 $42 = HEAP32[99801]|0;
 $handle = (((($42) + (($cnum$2$i*12)|0)|0)) + 8|0);
 HEAP32[$handle>>2] = $call45;
 STACKTOP = sp;return;
}
function _S_AdjustSoundParams($listener,$source$0$1$val,$source$0$2$val,$vol,$sep) {
 $listener = $listener|0;
 $source$0$1$val = $source$0$1$val|0;
 $source$0$2$val = $source$0$2$val|0;
 $vol = $vol|0;
 $sep = $sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add37 = 0, $add37$sink = 0, $angle$0 = 0, $angle$0$p = 0, $angle13 = 0, $arrayidx = 0, $call12 = 0, $call23 = 0;
 var $cmp = 0, $cmp14 = 0, $cmp26 = 0, $cmp29 = 0, $cmp45 = 0, $cmp6 = 0, $cmp7 = 0, $cond = 0, $conv = 0, $div = 0, $div42 = 0, $ispos = 0, $ispos27 = 0, $mul = 0, $mul41 = 0, $neg = 0, $neg28 = 0, $or$cond = 0, $retval$0 = 0, $shr = 0;
 var $shr22 = 0, $shr24 = 0, $shr36 = 0, $shr40 = 0, $sub = 0, $sub19 = 0, $sub25 = 0, $sub3 = 0, $sub34 = 0, $sub39 = 0, $sub5 = 0, $sub5$op = 0, $sub5$op$op = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $x = ((($listener)) + 12|0);
 $0 = HEAP32[$x>>2]|0;
 $sub = (($0) - ($source$0$1$val))|0;
 $ispos = ($sub|0)>(-1);
 $neg = (0 - ($sub))|0;
 $1 = $ispos ? $sub : $neg;
 $y = ((($listener)) + 16|0);
 $2 = HEAP32[$y>>2]|0;
 $sub3 = (($2) - ($source$0$2$val))|0;
 $ispos27 = ($sub3|0)>(-1);
 $neg28 = (0 - ($sub3))|0;
 $3 = $ispos27 ? $sub3 : $neg28;
 $add = (($3) + ($1))|0;
 $cmp = ($1|0)<($3|0);
 $cond = $cmp ? $1 : $3;
 $shr = $cond >> 1;
 $sub5 = (($add) - ($shr))|0;
 $4 = HEAP32[99084]|0;
 $cmp6 = ($4|0)!=(8);
 $cmp7 = ($sub5|0)>(78643200);
 $or$cond = $cmp6 & $cmp7;
 if ($or$cond) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $call12 = (_R_PointToAngle2($0,$2,$source$0$1$val,$source$0$2$val)|0);
 $angle13 = ((($listener)) + 32|0);
 $5 = HEAP32[$angle13>>2]|0;
 $cmp14 = ($call12>>>0)>($5>>>0);
 $sub19 = $5 ^ -1;
 $6 = (0 - ($5))|0;
 $angle$0$p = $cmp14 ? $6 : $sub19;
 $angle$0 = (($angle$0$p) + ($call12))|0;
 $shr22 = $angle$0 >>> 19;
 $arrayidx = (74720 + ($shr22<<2)|0);
 $7 = HEAP32[$arrayidx>>2]|0;
 $call23 = (_FixedMul(6291456,$7)|0);
 $shr24 = $call23 >> 16;
 $sub25 = (128 - ($shr24))|0;
 HEAP32[$sep>>2] = $sub25;
 $cmp26 = ($sub5|0)<(13107200);
 do {
  if ($cmp26) {
   $8 = HEAP32[99800]|0;
   $add37$sink = $8;
  } else {
   $9 = HEAP32[99084]|0;
   $cmp29 = ($9|0)==(8);
   $10 = HEAP32[99800]|0;
   if ($cmp29) {
    $sub34 = (($10) + -15)|0;
    $sub5$op = (78643200 - ($sub5))|0;
    $sub5$op$op = $sub5$op >> 16;
    $shr36 = $cmp7 ? 0 : $sub5$op$op;
    $mul = Math_imul($sub34, $shr36)|0;
    $div = (($mul|0) / 1000)&-1;
    $add37 = (($div) + 15)|0;
    $add37$sink = $add37;
    break;
   } else {
    $sub39 = (78643200 - ($sub5))|0;
    $shr40 = $sub39 >> 16;
    $mul41 = Math_imul($10, $shr40)|0;
    $div42 = (($mul41|0) / 1000)&-1;
    $add37$sink = $div42;
    break;
   }
  }
 } while(0);
 HEAP32[$vol>>2] = $add37$sink;
 $cmp45 = ($add37$sink|0)>(0);
 $conv = $cmp45&1;
 $retval$0 = $conv;
 return ($retval$0|0);
}
function _S_PauseSound() {
 var $0 = 0, $1 = 0, $or$cond = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99803]|0;
 $tobool = ($0|0)==(0|0);
 $1 = HEAP32[99802]|0;
 $tobool1 = ($1|0)!=(0);
 $or$cond = $tobool | $tobool1;
 if ($or$cond) {
  return;
 }
 HEAP32[99802] = 1;
 return;
}
function _S_ResumeSound() {
 var $0 = 0, $1 = 0, $or$cond = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99803]|0;
 $tobool = ($0|0)!=(0|0);
 $1 = HEAP32[99802]|0;
 $tobool1 = ($1|0)!=(0);
 $or$cond = $tobool & $tobool1;
 if (!($or$cond)) {
  return;
 }
 HEAP32[99802] = 0;
 return;
}
function _S_UpdateSounds($listener) {
 $listener = $listener|0;
 var $$idx = 0, $$idx$val = 0, $$idx18 = 0, $$idx18$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $call = 0, $call$i = 0, $call$i22 = 0, $call$i33 = 0, $call18 = 0, $cmp = 0, $cmp15 = 0, $cmp41 = 0, $cmp7 = 0, $cmp9 = 0, $cnum$042 = 0;
 var $dec$i = 0, $dec$i27 = 0, $dec$i38 = 0, $handle = 0, $handle$i = 0, $handle$i21 = 0, $handle$i32 = 0, $inc = 0, $link = 0, $or$cond = 0, $origin = 0, $sep = 0, $sfxinfo = 0, $sfxinfo$i = 0, $sfxinfo$i19 = 0, $sfxinfo$i30 = 0, $tobool = 0, $tobool$i = 0, $tobool$i20 = 0, $tobool$i31 = 0;
 var $tobool1$i = 0, $tobool1$i23 = 0, $tobool1$i34 = 0, $tobool13 = 0, $tobool19 = 0, $tobool2 = 0, $tobool4 = 0, $usefulness$i = 0, $usefulness$i26 = 0, $usefulness$i37 = 0, $volume = 0, $volume6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $volume = sp + 4|0;
 $sep = sp;
 $0 = HEAP32[32434]|0;
 $cmp41 = ($0|0)>(0);
 if (!($cmp41)) {
  STACKTOP = sp;return;
 }
 $cnum$042 = 0;
 while(1) {
  $1 = HEAP32[99801]|0;
  $sfxinfo = (($1) + (($cnum$042*12)|0)|0);
  $2 = HEAP32[$sfxinfo>>2]|0;
  $tobool = ($2|0)==(0|0);
  L6: do {
   if (!($tobool)) {
    $handle = (((($1) + (($cnum$042*12)|0)|0)) + 8|0);
    $3 = HEAP32[$handle>>2]|0;
    $call = (_I_SoundIsPlaying($3)|0);
    $tobool2 = ($call|0)==(0);
    if ($tobool2) {
     $18 = HEAP32[99801]|0;
     $sfxinfo$i30 = (($18) + (($cnum$042*12)|0)|0);
     $19 = HEAP32[$sfxinfo$i30>>2]|0;
     $tobool$i31 = ($19|0)==(0|0);
     if ($tobool$i31) {
      break;
     }
     $handle$i32 = (((($18) + (($cnum$042*12)|0)|0)) + 8|0);
     $20 = HEAP32[$handle$i32>>2]|0;
     $call$i33 = (_I_SoundIsPlaying($20)|0);
     $tobool1$i34 = ($call$i33|0)==(0);
     if (!($tobool1$i34)) {
     }
     $21 = HEAP32[$sfxinfo$i30>>2]|0;
     $usefulness$i37 = ((($21)) + 32|0);
     $22 = HEAP32[$usefulness$i37>>2]|0;
     $dec$i38 = (($22) + -1)|0;
     HEAP32[$usefulness$i37>>2] = $dec$i38;
     HEAP32[$sfxinfo$i30>>2] = 0;
     break;
    }
    $4 = HEAP32[99800]|0;
    HEAP32[$volume>>2] = $4;
    HEAP32[$sep>>2] = 128;
    $link = ((($2)) + 20|0);
    $5 = HEAP32[$link>>2]|0;
    $tobool4 = ($5|0)==(0|0);
    do {
     if (!($tobool4)) {
      $volume6 = ((($2)) + 28|0);
      $6 = HEAP32[$volume6>>2]|0;
      $add = (($6) + ($4))|0;
      HEAP32[$volume>>2] = $add;
      $cmp7 = ($add|0)<(1);
      if (!($cmp7)) {
       $cmp9 = ($6|0)>(0);
       if (!($cmp9)) {
        break;
       }
       HEAP32[$volume>>2] = $4;
       break;
      }
      $7 = HEAP32[99801]|0;
      $sfxinfo$i = (($7) + (($cnum$042*12)|0)|0);
      $8 = HEAP32[$sfxinfo$i>>2]|0;
      $tobool$i = ($8|0)==(0|0);
      if ($tobool$i) {
       break L6;
      }
      $handle$i = (((($7) + (($cnum$042*12)|0)|0)) + 8|0);
      $9 = HEAP32[$handle$i>>2]|0;
      $call$i = (_I_SoundIsPlaying($9)|0);
      $tobool1$i = ($call$i|0)==(0);
      if (!($tobool1$i)) {
      }
      $10 = HEAP32[$sfxinfo$i>>2]|0;
      $usefulness$i = ((($10)) + 32|0);
      $11 = HEAP32[$usefulness$i>>2]|0;
      $dec$i = (($11) + -1)|0;
      HEAP32[$usefulness$i>>2] = $dec$i;
      HEAP32[$sfxinfo$i>>2] = 0;
      break L6;
     }
    } while(0);
    $origin = (((($1) + (($cnum$042*12)|0)|0)) + 4|0);
    $12 = HEAP32[$origin>>2]|0;
    $tobool13 = ($12|0)==(0|0);
    $cmp15 = ($12|0)==($listener|0);
    $or$cond = $tobool13 | $cmp15;
    if (!($or$cond)) {
     $$idx = ((($12)) + 12|0);
     $$idx$val = HEAP32[$$idx>>2]|0;
     $$idx18 = ((($12)) + 16|0);
     $$idx18$val = HEAP32[$$idx18>>2]|0;
     $call18 = (_S_AdjustSoundParams($listener,$$idx$val,$$idx18$val,$volume,$sep)|0);
     $tobool19 = ($call18|0)==(0);
     if (!($tobool19)) {
      break;
     }
     $13 = HEAP32[99801]|0;
     $sfxinfo$i19 = (($13) + (($cnum$042*12)|0)|0);
     $14 = HEAP32[$sfxinfo$i19>>2]|0;
     $tobool$i20 = ($14|0)==(0|0);
     if (!($tobool$i20)) {
      $handle$i21 = (((($13) + (($cnum$042*12)|0)|0)) + 8|0);
      $15 = HEAP32[$handle$i21>>2]|0;
      $call$i22 = (_I_SoundIsPlaying($15)|0);
      $tobool1$i23 = ($call$i22|0)==(0);
      if (!($tobool1$i23)) {
      }
      $16 = HEAP32[$sfxinfo$i19>>2]|0;
      $usefulness$i26 = ((($16)) + 32|0);
      $17 = HEAP32[$usefulness$i26>>2]|0;
      $dec$i27 = (($17) + -1)|0;
      HEAP32[$usefulness$i26>>2] = $dec$i27;
      HEAP32[$sfxinfo$i19>>2] = 0;
     }
    }
   }
  } while(0);
  $inc = (($cnum$042) + 1)|0;
  $23 = HEAP32[32434]|0;
  $cmp = ($inc|0)<($23|0);
  if ($cmp) {
   $cnum$042 = $inc;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _S_StartMusic($m_id) {
 $m_id = $m_id|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _S_ChangeMusic($m_id,0);
 return;
}
function _SlopeDiv($num,$den) {
 $num = $num|0;
 $den = $den|0;
 var $0 = 0, $cmp = 0, $div = 0, $div$ = 0, $retval$0 = 0, $shl = 0, $shr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($den>>>0)<(512);
 if ($cmp) {
  $retval$0 = 2048;
  return ($retval$0|0);
 }
 $shr = $den >>> 8;
 $shl = $num << 3;
 $div = (($shl>>>0) / ($shr>>>0))&-1;
 $0 = ($div>>>0)<(2048);
 $div$ = $0 ? $div : 2048;
 $retval$0 = $div$;
 return ($retval$0|0);
}
function _V_MarkRect($x,$y,$width,$height) {
 $x = $x|0;
 $y = $y|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $add = 0, $add1 = 0, $cmp = 0, $sub = 0, $sub2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99804]|0;
 $1 = HEAP32[99853]|0;
 $cmp = ($0|0)==($1|0);
 if (!($cmp)) {
  return;
 }
 $add1 = (($y) + -1)|0;
 $sub2 = (($add1) + ($height))|0;
 $add = (($x) + -1)|0;
 $sub = (($add) + ($width))|0;
 _M_AddToBox(393584,$x,$y);
 _M_AddToBox(393584,$sub,$sub2);
 return;
}
function _V_CopyRect($srcx,$srcy,$source,$width,$height,$destx,$desty) {
 $srcx = $srcx|0;
 $srcy = $srcy|0;
 $source = $source|0;
 $width = $width|0;
 $height = $height|0;
 $destx = $destx|0;
 $desty = $desty|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr19 = 0, $add$ptr20 = 0, $add$ptr22 = 0, $add$ptr23 = 0, $add1$i = 0, $add10 = 0, $add15 = 0, $add5 = 0, $cmp = 0, $cmp$i = 0, $cmp1 = 0, $cmp11 = 0, $cmp13 = 0;
 var $cmp16 = 0, $cmp21 = 0, $cmp2125 = 0, $cmp3 = 0, $cmp6 = 0, $cmp8 = 0, $dec = 0, $dest$028 = 0, $height$addr$026 = 0, $mul = 0, $mul18 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond24 = 0, $src$027 = 0, $sub$i = 0, $sub2$i = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $cmp = ($srcx|0)<(0);
 if ($cmp) {
  _I_Error(156137,$vararg_buffer);
  // unreachable;
 }
 $add = (($width) + ($srcx))|0;
 $cmp1 = ($add|0)>(320);
 $cmp3 = ($srcy|0)<(0);
 $or$cond = $cmp3 | $cmp1;
 if ($or$cond) {
  _I_Error(156137,$vararg_buffer);
  // unreachable;
 }
 $add5 = (($height) + ($srcy))|0;
 $cmp6 = ($add5|0)>(200);
 $cmp8 = ($destx|0)<(0);
 $or$cond1 = $cmp6 | $cmp8;
 if ($or$cond1) {
  _I_Error(156137,$vararg_buffer);
  // unreachable;
 }
 $add10 = (($destx) + ($width))|0;
 $cmp11 = ($add10|0)>(320);
 $cmp13 = ($desty|0)<(0);
 $or$cond2 = $cmp11 | $cmp13;
 $add15 = (($desty) + ($height))|0;
 $cmp16 = ($add15|0)>(200);
 $or$cond24 = $or$cond2 | $cmp16;
 if ($or$cond24) {
  _I_Error(156137,$vararg_buffer);
  // unreachable;
 }
 $0 = HEAP32[99804]|0;
 $1 = HEAP32[99853]|0;
 $cmp$i = ($0|0)==($1|0);
 if ($cmp$i) {
  $add$i = (($destx) + ($width))|0;
  $sub$i = (($add$i) + -1)|0;
  $add1$i = (($desty) + ($height))|0;
  $sub2$i = (($add1$i) + -1)|0;
  _M_AddToBox(393584,$destx,$desty);
  _M_AddToBox(393584,$sub$i,$sub2$i);
 }
 $cmp2125 = ($height|0)>(0);
 if (!($cmp2125)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[99804]|0;
 $mul18 = ($desty*320)|0;
 $add$ptr19 = (($2) + ($mul18)|0);
 $add$ptr20 = (($add$ptr19) + ($destx)|0);
 $mul = ($srcy*320)|0;
 $add$ptr = (($source) + ($mul)|0);
 $add$ptr17 = (($add$ptr) + ($srcx)|0);
 $dest$028 = $add$ptr20;$height$addr$026 = $height;$src$027 = $add$ptr17;
 while(1) {
  _memcpy(($dest$028|0),($src$027|0),($width|0))|0;
  $add$ptr22 = ((($src$027)) + 320|0);
  $add$ptr23 = ((($dest$028)) + 320|0);
  $dec = (($height$addr$026) + -1)|0;
  $cmp21 = ($height$addr$026|0)>(1);
  if ($cmp21) {
   $dest$028 = $add$ptr23;$height$addr$026 = $dec;$src$027 = $add$ptr22;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _V_DrawPatch($x,$y,$patch) {
 $x = $x|0;
 $y = $y|0;
 $patch = $patch|0;
 var $$pre = 0, $$pre52 = 0, $$pre53 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr32 = 0, $add$ptr37 = 0, $add$ptr41 = 0, $add$ptr45 = 0, $add$ptr50 = 0, $add$ptr53 = 0, $add$ptr54 = 0, $add1$i = 0, $add15 = 0, $arrayidx = 0, $cmp = 0, $cmp$i = 0, $cmp11 = 0, $cmp16 = 0;
 var $cmp3549 = 0, $cmp39 = 0, $cmp3947 = 0, $cmp8 = 0, $col$050 = 0, $column$0$in48 = 0, $conv = 0, $conv1 = 0, $conv14 = 0, $conv22 = 0, $conv24 = 0, $conv26 = 0, $conv29 = 0, $conv31 = 0, $conv34 = 0, $conv38 = 0, $conv46 = 0, $conv52 = 0, $count$044 = 0, $dec = 0;
 var $dest$045 = 0, $desttop$051 = 0, $exitcond = 0, $height = 0, $height21 = 0, $height30 = 0, $inc56 = 0, $incdec$ptr = 0, $incdec$ptr57 = 0, $leftoffset = 0, $mul = 0, $mul44 = 0, $or$cond = 0, $source$046 = 0, $sub = 0, $sub$i = 0, $sub2 = 0, $sub2$i = 0, $tobool48 = 0, $tobool4843 = 0;
 var $topoffset = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $topoffset = ((($patch)) + 6|0);
 $0 = HEAPU8[$topoffset>>0]|(HEAPU8[$topoffset+1>>0]<<8);
 $conv = $0 << 16 >> 16;
 $sub = (($y) - ($conv))|0;
 $leftoffset = ((($patch)) + 4|0);
 $1 = HEAPU8[$leftoffset>>0]|(HEAPU8[$leftoffset+1>>0]<<8);
 $conv1 = $1 << 16 >> 16;
 $sub2 = (($x) - ($conv1))|0;
 $cmp = ($sub2|0)<(0);
 $$pre = HEAPU8[$patch>>0]|(HEAPU8[$patch+1>>0]<<8);
 $$pre53 = $$pre << 16 >> 16;
 if (!($cmp)) {
  $add = (($sub2) + ($$pre53))|0;
  $cmp8 = ($add|0)>(320);
  $cmp11 = ($sub|0)<(0);
  $or$cond = $cmp11 | $cmp8;
  if (!($or$cond)) {
   $height = ((($patch)) + 2|0);
   $2 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
   $conv14 = $2 << 16 >> 16;
   $add15 = (($sub) + ($conv14))|0;
   $cmp16 = ($add15|0)>(200);
   if (!($cmp16)) {
    $6 = HEAP32[99804]|0;
    $7 = HEAP32[99853]|0;
    $cmp$i = ($6|0)==($7|0);
    if ($cmp$i) {
     $add$i = (($sub2) + -1)|0;
     $8 = HEAPU8[$patch>>0]|(HEAPU8[$patch+1>>0]<<8);
     $conv29 = $8 << 16 >> 16;
     $sub$i = (($add$i) + ($conv29))|0;
     $add1$i = (($sub) + -1)|0;
     $height30 = ((($patch)) + 2|0);
     $9 = HEAPU8[$height30>>0]|(HEAPU8[$height30+1>>0]<<8);
     $conv31 = $9 << 16 >> 16;
     $sub2$i = (($add1$i) + ($conv31))|0;
     _M_AddToBox(393584,$sub2,$sub);
     _M_AddToBox(393584,$sub$i,$sub2$i);
    }
    $10 = HEAPU8[$patch>>0]|(HEAPU8[$patch+1>>0]<<8);
    $conv34 = $10 << 16 >> 16;
    $cmp3549 = ($10<<16>>16)>(0);
    if (!($cmp3549)) {
     STACKTOP = sp;return;
    }
    $11 = HEAP32[99804]|0;
    $mul = ($sub*320)|0;
    $add$ptr = (($11) + ($mul)|0);
    $add$ptr32 = (($add$ptr) + ($sub2)|0);
    $col$050 = 0;$desttop$051 = $add$ptr32;
    while(1) {
     $arrayidx = (((($patch)) + 8|0) + ($col$050<<2)|0);
     $12 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
     $add$ptr37 = (($patch) + ($12)|0);
     $13 = HEAP8[$add$ptr37>>0]|0;
     $cmp3947 = ($13<<24>>24)==(-1);
     if (!($cmp3947)) {
      $16 = $13;$column$0$in48 = $add$ptr37;
      while(1) {
       $14 = ((($column$0$in48)) + 1|0);
       $15 = HEAP8[$14>>0]|0;
       $tobool4843 = ($15<<24>>24)==(0);
       if ($tobool4843) {
        $18 = 0;
       } else {
        $conv46 = $15&255;
        $conv38 = $16&255;
        $mul44 = ($conv38*320)|0;
        $add$ptr45 = (($desttop$051) + ($mul44)|0);
        $add$ptr41 = ((($column$0$in48)) + 3|0);
        $count$044 = $conv46;$dest$045 = $add$ptr45;$source$046 = $add$ptr41;
        while(1) {
         $dec = (($count$044) + -1)|0;
         $incdec$ptr = ((($source$046)) + 1|0);
         $17 = HEAP8[$source$046>>0]|0;
         HEAP8[$dest$045>>0] = $17;
         $add$ptr50 = ((($dest$045)) + 320|0);
         $tobool48 = ($dec|0)==(0);
         if ($tobool48) {
          break;
         } else {
          $count$044 = $dec;$dest$045 = $add$ptr50;$source$046 = $incdec$ptr;
         }
        }
        $$pre52 = HEAP8[$14>>0]|0;
        $18 = $$pre52;
       }
       $conv52 = $18&255;
       $add$ptr53 = (($column$0$in48) + ($conv52)|0);
       $add$ptr54 = ((($add$ptr53)) + 4|0);
       $19 = HEAP8[$add$ptr54>>0]|0;
       $cmp39 = ($19<<24>>24)==(-1);
       if ($cmp39) {
        break;
       } else {
        $16 = $19;$column$0$in48 = $add$ptr54;
       }
      }
     }
     $inc56 = (($col$050) + 1)|0;
     $incdec$ptr57 = ((($desttop$051)) + 1|0);
     $exitcond = ($inc56|0)==($conv34|0);
     if ($exitcond) {
      break;
     } else {
      $col$050 = $inc56;$desttop$051 = $incdec$ptr57;
     }
    }
    STACKTOP = sp;return;
   }
  }
 }
 $height21 = ((($patch)) + 2|0);
 $3 = HEAPU8[$height21>>0]|(HEAPU8[$height21+1>>0]<<8);
 $conv22 = $3 << 16 >> 16;
 $4 = HEAPU8[$topoffset>>0]|(HEAPU8[$topoffset+1>>0]<<8);
 $conv24 = $4 << 16 >> 16;
 $5 = HEAPU8[$leftoffset>>0]|(HEAPU8[$leftoffset+1>>0]<<8);
 $conv26 = $5 << 16 >> 16;
 HEAP32[$vararg_buffer>>2] = $sub2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $sub;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $$pre53;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $conv22;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $conv24;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $conv26;
 _I_Error(156152,$vararg_buffer);
 // unreachable;
}
function _V_DrawPatchFlipped($x,$y,$patch) {
 $x = $x|0;
 $y = $y|0;
 $patch = $patch|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add$i = 0, $add$ptr = 0, $add$ptr24 = 0, $add$ptr31 = 0, $add$ptr35 = 0, $add$ptr39 = 0, $add$ptr44 = 0, $add$ptr47 = 0, $add$ptr48 = 0, $add1$i = 0, $add15 = 0, $arrayidx = 0, $cmp = 0, $cmp$i = 0, $cmp11 = 0, $cmp16 = 0, $cmp2744 = 0, $cmp33 = 0, $cmp3342 = 0, $cmp8 = 0;
 var $col$045 = 0, $column$0$in43 = 0, $conv = 0, $conv1 = 0, $conv14 = 0, $conv21 = 0, $conv23 = 0, $conv26 = 0, $conv32 = 0, $conv40 = 0, $conv46 = 0, $conv7 = 0, $count$039 = 0, $dec = 0, $dest$040 = 0, $desttop$046 = 0, $exitcond = 0, $height = 0, $height22 = 0, $inc50 = 0;
 var $incdec$ptr = 0, $incdec$ptr51 = 0, $leftoffset = 0, $mul = 0, $mul38 = 0, $or$cond = 0, $source$041 = 0, $sub = 0, $sub$i = 0, $sub2 = 0, $sub2$i = 0, $sub29 = 0, $sub30 = 0, $tobool42 = 0, $tobool4238 = 0, $topoffset = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $topoffset = ((($patch)) + 6|0);
 $0 = HEAPU8[$topoffset>>0]|(HEAPU8[$topoffset+1>>0]<<8);
 $conv = $0 << 16 >> 16;
 $sub = (($y) - ($conv))|0;
 $leftoffset = ((($patch)) + 4|0);
 $1 = HEAPU8[$leftoffset>>0]|(HEAPU8[$leftoffset+1>>0]<<8);
 $conv1 = $1 << 16 >> 16;
 $sub2 = (($x) - ($conv1))|0;
 $cmp = ($sub2|0)<(0);
 if ($cmp) {
  _I_Error(156236,$vararg_buffer);
  // unreachable;
 }
 $2 = HEAPU8[$patch>>0]|(HEAPU8[$patch+1>>0]<<8);
 $conv7 = $2 << 16 >> 16;
 $add = (($sub2) + ($conv7))|0;
 $cmp8 = ($add|0)>(320);
 $cmp11 = ($sub|0)<(0);
 $or$cond = $cmp11 | $cmp8;
 if ($or$cond) {
  _I_Error(156236,$vararg_buffer);
  // unreachable;
 }
 $height = ((($patch)) + 2|0);
 $3 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
 $conv14 = $3 << 16 >> 16;
 $add15 = (($sub) + ($conv14))|0;
 $cmp16 = ($add15|0)>(200);
 if ($cmp16) {
  _I_Error(156236,$vararg_buffer);
  // unreachable;
 }
 $4 = HEAP32[99804]|0;
 $5 = HEAP32[99853]|0;
 $cmp$i = ($4|0)==($5|0);
 if ($cmp$i) {
  $add$i = (($sub2) + -1)|0;
  $6 = HEAPU8[$patch>>0]|(HEAPU8[$patch+1>>0]<<8);
  $conv21 = $6 << 16 >> 16;
  $sub$i = (($add$i) + ($conv21))|0;
  $add1$i = (($sub) + -1)|0;
  $height22 = ((($patch)) + 2|0);
  $7 = HEAPU8[$height22>>0]|(HEAPU8[$height22+1>>0]<<8);
  $conv23 = $7 << 16 >> 16;
  $sub2$i = (($add1$i) + ($conv23))|0;
  _M_AddToBox(393584,$sub2,$sub);
  _M_AddToBox(393584,$sub$i,$sub2$i);
 }
 $8 = HEAPU8[$patch>>0]|(HEAPU8[$patch+1>>0]<<8);
 $conv26 = $8 << 16 >> 16;
 $cmp2744 = ($8<<16>>16)>(0);
 if (!($cmp2744)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[99804]|0;
 $mul = ($sub*320)|0;
 $add$ptr = (($9) + ($mul)|0);
 $add$ptr24 = (($add$ptr) + ($sub2)|0);
 $sub29 = (($conv26) + -1)|0;
 $col$045 = 0;$desttop$046 = $add$ptr24;
 while(1) {
  $sub30 = (($sub29) - ($col$045))|0;
  $arrayidx = (((($patch)) + 8|0) + ($sub30<<2)|0);
  $10 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
  $add$ptr31 = (($patch) + ($10)|0);
  $11 = HEAP8[$add$ptr31>>0]|0;
  $cmp3342 = ($11<<24>>24)==(-1);
  if (!($cmp3342)) {
   $14 = $11;$column$0$in43 = $add$ptr31;
   while(1) {
    $12 = ((($column$0$in43)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $tobool4238 = ($13<<24>>24)==(0);
    if ($tobool4238) {
     $16 = 0;
    } else {
     $conv40 = $13&255;
     $conv32 = $14&255;
     $mul38 = ($conv32*320)|0;
     $add$ptr39 = (($desttop$046) + ($mul38)|0);
     $add$ptr35 = ((($column$0$in43)) + 3|0);
     $count$039 = $conv40;$dest$040 = $add$ptr39;$source$041 = $add$ptr35;
     while(1) {
      $dec = (($count$039) + -1)|0;
      $incdec$ptr = ((($source$041)) + 1|0);
      $15 = HEAP8[$source$041>>0]|0;
      HEAP8[$dest$040>>0] = $15;
      $add$ptr44 = ((($dest$040)) + 320|0);
      $tobool42 = ($dec|0)==(0);
      if ($tobool42) {
       break;
      } else {
       $count$039 = $dec;$dest$040 = $add$ptr44;$source$041 = $incdec$ptr;
      }
     }
     $$pre = HEAP8[$12>>0]|0;
     $16 = $$pre;
    }
    $conv46 = $16&255;
    $add$ptr47 = (($column$0$in43) + ($conv46)|0);
    $add$ptr48 = ((($add$ptr47)) + 4|0);
    $17 = HEAP8[$add$ptr48>>0]|0;
    $cmp33 = ($17<<24>>24)==(-1);
    if ($cmp33) {
     break;
    } else {
     $14 = $17;$column$0$in43 = $add$ptr48;
    }
   }
  }
  $inc50 = (($col$045) + 1)|0;
  $incdec$ptr51 = ((($desttop$046)) + 1|0);
  $exitcond = ($inc50|0)==($conv26|0);
  if ($exitcond) {
   break;
  } else {
   $col$045 = $inc50;$desttop$046 = $incdec$ptr51;
  }
 }
 STACKTOP = sp;return;
}
function _V_DrawPatchDirect($x,$y,$patch) {
 $x = $x|0;
 $y = $y|0;
 $patch = $patch|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _V_DrawPatch($x,$y,$patch);
 return;
}
function _V_DrawBlock($x,$y,$width,$height,$src) {
 $x = $x|0;
 $y = $y|0;
 $width = $width|0;
 $height = $height|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr7 = 0, $add$ptr8 = 0, $add$ptr9 = 0, $add1$i = 0, $add5 = 0, $cmp = 0, $cmp$i = 0, $cmp1 = 0, $cmp3 = 0, $cmp6 = 0, $dec = 0, $dest$019 = 0, $height$addr$017 = 0, $mul = 0;
 var $or$cond = 0, $or$cond15 = 0, $src$addr$018 = 0, $sub$i = 0, $sub2$i = 0, $tobool = 0, $tobool16 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $cmp = ($x|0)<(0);
 if ($cmp) {
  _I_Error(156259,$vararg_buffer);
  // unreachable;
 }
 $add = (($width) + ($x))|0;
 $cmp1 = ($add|0)>(320);
 $cmp3 = ($y|0)<(0);
 $or$cond = $cmp3 | $cmp1;
 $add5 = (($height) + ($y))|0;
 $cmp6 = ($add5|0)>(200);
 $or$cond15 = $or$cond | $cmp6;
 if ($or$cond15) {
  _I_Error(156259,$vararg_buffer);
  // unreachable;
 }
 $0 = HEAP32[99804]|0;
 $1 = HEAP32[99853]|0;
 $cmp$i = ($0|0)==($1|0);
 if ($cmp$i) {
  $add$i = (($width) + ($x))|0;
  $sub$i = (($add$i) + -1)|0;
  $add1$i = (($height) + ($y))|0;
  $sub2$i = (($add1$i) + -1)|0;
  _M_AddToBox(393584,$x,$y);
  _M_AddToBox(393584,$sub$i,$sub2$i);
 }
 $tobool16 = ($height|0)==(0);
 if ($tobool16) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[99804]|0;
 $mul = ($y*320)|0;
 $add$ptr = (($2) + ($mul)|0);
 $add$ptr7 = (($add$ptr) + ($x)|0);
 $dest$019 = $add$ptr7;$height$addr$017 = $height;$src$addr$018 = $src;
 while(1) {
  $dec = (($height$addr$017) + -1)|0;
  _memcpy(($dest$019|0),($src$addr$018|0),($width|0))|0;
  $add$ptr8 = (($src$addr$018) + ($width)|0);
  $add$ptr9 = ((($dest$019)) + 320|0);
  $tobool = ($dec|0)==(0);
  if ($tobool) {
   break;
  } else {
   $dest$019 = $add$ptr9;$height$addr$017 = $dec;$src$addr$018 = $add$ptr8;
  }
 }
 STACKTOP = sp;return;
}
function _V_Init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _V_UseBuffer($buffer) {
 $buffer = $buffer|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99804] = $buffer;
 return;
}
function _V_RestoreBuffer() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99853]|0;
 HEAP32[99804] = $0;
 return;
}
function _V_ScreenShot($format) {
 $format = $format|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $bytes_per_line$i = 0, $call$i = 0, $call2 = 0, $call7 = 0, $cmp = 0, $cmp13$i = 0, $data$addr$046$i = 0, $data$addr$1$i = 0, $exitcond$i = 0, $exitcond48$i = 0, $filler$i = 0;
 var $hres$i = 0, $i$045$i = 0, $i$08 = 0, $i$141$i = 0, $inc = 0, $inc$i = 0, $inc27$i = 0, $incdec$ptr15$i = 0, $incdec$ptr18$i = 0, $incdec$ptr24$i = 0, $lbmname = 0, $pack$0$lcssa$pn$i = 0, $pack$047$i = 0, $pack$1$i = 0, $pack$243$i = 0, $palette$addr$042$i = 0, $palette6$i = 0, $palette_type$i = 0, $scevgep$i = 0, $sub$ptr$lhs$cast$i = 0;
 var $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $tobool = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vres$i = 0, $xmax$i = 0, $xmin$i = 0, $ymax$i = 0, $ymin$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $lbmname = sp;
 $i$08 = 0;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $i$08;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 156275;
  (_M_snprintf($lbmname,16,$format,$vararg_buffer)|0);
  $call2 = (_M_FileExists($lbmname)|0);
  $tobool = ($call2|0)==(0);
  if ($tobool) {
   break;
  }
  $inc = (($i$08) + 1)|0;
  $cmp = ($inc>>>0)<(100);
  if ($cmp) {
   $i$08 = $inc;
  } else {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  _I_Error(156279,$vararg_buffer2);
  // unreachable;
 }
 $0 = HEAP32[99853]|0;
 $call7 = (_W_CacheLumpName(156315,8)|0);
 $call$i = (_Z_Malloc(129000,1,0)|0);
 HEAP8[$call$i>>0] = 10;
 $1 = ((($call$i)) + 1|0);
 HEAP8[$1>>0] = 5;
 $2 = ((($call$i)) + 2|0);
 HEAP8[$2>>0] = 1;
 $3 = ((($call$i)) + 3|0);
 HEAP8[$3>>0] = 8;
 $xmin$i = ((($call$i)) + 4|0);
 HEAP8[$xmin$i>>0]=0&255;HEAP8[$xmin$i+1>>0]=0>>8;
 $ymin$i = ((($call$i)) + 6|0);
 HEAP8[$ymin$i>>0]=0&255;HEAP8[$ymin$i+1>>0]=0>>8;
 $xmax$i = ((($call$i)) + 8|0);
 HEAP8[$xmax$i>>0]=319&255;HEAP8[$xmax$i+1>>0]=319>>8;
 $ymax$i = ((($call$i)) + 10|0);
 HEAP8[$ymax$i>>0]=199&255;HEAP8[$ymax$i+1>>0]=199>>8;
 $hres$i = ((($call$i)) + 12|0);
 HEAP8[$hres$i>>0]=320&255;HEAP8[$hres$i+1>>0]=320>>8;
 $vres$i = ((($call$i)) + 14|0);
 HEAP8[$vres$i>>0]=200&255;HEAP8[$vres$i+1>>0]=200>>8;
 $palette6$i = ((($call$i)) + 16|0);
 dest=$palette6$i; stop=dest+48|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $4 = ((($call$i)) + 65|0);
 HEAP8[$4>>0] = 1;
 $bytes_per_line$i = ((($call$i)) + 66|0);
 HEAP8[$bytes_per_line$i>>0]=320&255;HEAP8[$bytes_per_line$i+1>>0]=320>>8;
 $palette_type$i = ((($call$i)) + 68|0);
 HEAP8[$palette_type$i>>0]=2&255;HEAP8[$palette_type$i+1>>0]=2>>8;
 $filler$i = ((($call$i)) + 70|0);
 dest=$filler$i; stop=dest+58|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $5 = ((($call$i)) + 128|0);
 $data$addr$046$i = $0;$i$045$i = 0;$pack$047$i = $5;
 while(1) {
  $6 = HEAP8[$data$addr$046$i>>0]|0;
  $cmp13$i = ($6&255)<(192);
  $incdec$ptr15$i = ((($pack$047$i)) + 1|0);
  if ($cmp13$i) {
   HEAP8[$pack$047$i>>0] = $6;
   $pack$1$i = $incdec$ptr15$i;
  } else {
   HEAP8[$pack$047$i>>0] = -63;
   $7 = HEAP8[$data$addr$046$i>>0]|0;
   $incdec$ptr18$i = ((($pack$047$i)) + 2|0);
   HEAP8[$incdec$ptr15$i>>0] = $7;
   $pack$1$i = $incdec$ptr18$i;
  }
  $data$addr$1$i = ((($data$addr$046$i)) + 1|0);
  $inc$i = (($i$045$i) + 1)|0;
  $exitcond48$i = ($inc$i|0)==(64000);
  if ($exitcond48$i) {
   break;
  } else {
   $data$addr$046$i = $data$addr$1$i;$i$045$i = $inc$i;$pack$047$i = $pack$1$i;
  }
 }
 HEAP8[$pack$1$i>>0] = 12;
 $i$141$i = 0;$pack$0$lcssa$pn$i = $pack$1$i;$palette$addr$042$i = $call7;
 while(1) {
  $pack$243$i = ((($pack$0$lcssa$pn$i)) + 1|0);
  $incdec$ptr24$i = ((($palette$addr$042$i)) + 1|0);
  $8 = HEAP8[$palette$addr$042$i>>0]|0;
  HEAP8[$pack$243$i>>0] = $8;
  $inc27$i = (($i$141$i) + 1)|0;
  $exitcond$i = ($inc27$i|0)==(768);
  if ($exitcond$i) {
   break;
  } else {
   $i$141$i = $inc27$i;$pack$0$lcssa$pn$i = $pack$243$i;$palette$addr$042$i = $incdec$ptr24$i;
  }
 }
 $scevgep$i = ((($pack$1$i)) + 769|0);
 $sub$ptr$lhs$cast$i = $scevgep$i;
 $sub$ptr$rhs$cast$i = $call$i;
 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
 (_M_WriteFile($lbmname,$call$i,$sub$ptr$sub$i)|0);
 _Z_Free($call$i);
 STACKTOP = sp;return;
}
function _V_DrawMouseSpeedBox($speed) {
 $speed = $speed|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add = 0, $add$ptr1$i = 0, $add$ptr1$i$i = 0, $add$ptr1$i16$i = 0, $add$ptr1$i37 = 0, $add$ptr1$i50 = 0, $add$ptr2$i = 0, $add$ptr2$i$1 = 0, $add$ptr2$i$2 = 0, $add$ptr2$i$3 = 0, $add$ptr2$i$4 = 0, $add$ptr2$i$5 = 0, $add$ptr2$i$i = 0, $add$ptr2$i$i$1 = 0;
 var $add$ptr2$i$i$2 = 0, $add$ptr2$i$i$3 = 0, $add$ptr2$i$i$4 = 0, $add$ptr2$i$i$5 = 0, $add$ptr2$i$i$6 = 0, $add$ptr2$i$i$7 = 0, $add$ptr2$i27$i = 0, $add$ptr2$i27$i$1 = 0, $add$ptr2$i27$i$2 = 0, $add$ptr2$i27$i$3 = 0, $add$ptr2$i27$i$4 = 0, $add$ptr2$i27$i$5 = 0, $add$ptr2$i27$i$6 = 0, $add$ptr2$i27$i$7 = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $call4 = 0, $call5 = 0;
 var $cmp = 0, $cmp21 = 0, $cmp4$i = 0, $cmp4$i43 = 0, $cmp7 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i34 = 0, $conv$i38 = 0, $conv$i41 = 0, $conv$i46 = 0, $conv$i51 = 0, $conv11 = 0.0, $conv12 = 0, $div = 0.0, $div14 = 0, $mul = 0, $original_speed$0 = 0, $scevgep$i = 0, $scevgep$i$1 = 0;
 var $scevgep$i$2 = 0, $scevgep$i$3 = 0, $scevgep$i$4 = 0, $scevgep$i$5 = 0, $scevgep$i$6 = 0, $scevgep$i$7 = 0, $scevgep$i$8 = 0, $spec$store$select = 0, $sub = 0.0, $sub10 = 0, $sub31 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_I_GetPaletteIndex(119,119,119)|0);
 $call1 = (_I_GetPaletteIndex(85,85,85)|0);
 $call2 = (_I_GetPaletteIndex(255,0,0)|0);
 $call3 = (_I_GetPaletteIndex(0,0,0)|0);
 $call4 = (_I_GetPaletteIndex(255,255,0)|0);
 $call5 = (_I_GetPaletteIndex(255,255,255)|0);
 $tobool = (0)==(0);
 if ($tobool) {
  return;
 }
 $sub = 2.0 + -1.0;
 $0 = (+Math_abs((+$sub)));
 $1 = $0;
 $cmp = $1 < 0.01;
 if ($cmp) {
  return;
 }
 $2 = HEAP32[99853]|0;
 $conv$i = $call&255;
 $scevgep$i = ((($2)) + 4990|0);
 _memset(($scevgep$i|0),($conv$i|0),120)|0;
 $scevgep$i$1 = ((($2)) + 5310|0);
 _memset(($scevgep$i$1|0),($conv$i|0),120)|0;
 $scevgep$i$2 = ((($2)) + 5630|0);
 _memset(($scevgep$i$2|0),($conv$i|0),120)|0;
 $scevgep$i$3 = ((($2)) + 5950|0);
 _memset(($scevgep$i$3|0),($conv$i|0),120)|0;
 $scevgep$i$4 = ((($2)) + 6270|0);
 _memset(($scevgep$i$4|0),($conv$i|0),120)|0;
 $scevgep$i$5 = ((($2)) + 6590|0);
 _memset(($scevgep$i$5|0),($conv$i|0),120)|0;
 $scevgep$i$6 = ((($2)) + 6910|0);
 _memset(($scevgep$i$6|0),($conv$i|0),120)|0;
 $scevgep$i$7 = ((($2)) + 7230|0);
 _memset(($scevgep$i$7|0),($conv$i|0),120)|0;
 $scevgep$i$8 = ((($2)) + 7550|0);
 _memset(($scevgep$i$8|0),($conv$i|0),120)|0;
 $3 = HEAP32[99853]|0;
 $add$ptr1$i$i = ((($3)) + 4990|0);
 $conv$i$i = $call1&255;
 $4 = ((($3)) + 7551|0);
 _memset(($4|0),($conv$i$i|0),118)|0;
 $add$ptr2$i27$i = ((($3)) + 5310|0);
 _memset(($add$ptr1$i$i|0),($conv$i$i|0),119)|0;
 HEAP8[$add$ptr2$i27$i>>0] = $conv$i$i;
 $add$ptr2$i27$i$1 = ((($3)) + 5630|0);
 HEAP8[$add$ptr2$i27$i$1>>0] = $conv$i$i;
 $add$ptr2$i27$i$2 = ((($3)) + 5950|0);
 HEAP8[$add$ptr2$i27$i$2>>0] = $conv$i$i;
 $add$ptr2$i27$i$3 = ((($3)) + 6270|0);
 HEAP8[$add$ptr2$i27$i$3>>0] = $conv$i$i;
 $add$ptr2$i27$i$4 = ((($3)) + 6590|0);
 HEAP8[$add$ptr2$i27$i$4>>0] = $conv$i$i;
 $add$ptr2$i27$i$5 = ((($3)) + 6910|0);
 HEAP8[$add$ptr2$i27$i$5>>0] = $conv$i$i;
 $add$ptr2$i27$i$6 = ((($3)) + 7230|0);
 HEAP8[$add$ptr2$i27$i$6>>0] = $conv$i$i;
 $add$ptr2$i27$i$7 = ((($3)) + 7550|0);
 HEAP8[$add$ptr2$i27$i$7>>0] = $conv$i$i;
 $add$ptr1$i16$i = ((($3)) + 5109|0);
 HEAP8[$add$ptr1$i16$i>>0] = $conv$i$i;
 $add$ptr2$i$i = ((($3)) + 5429|0);
 HEAP8[$add$ptr2$i$i>>0] = $conv$i$i;
 $add$ptr2$i$i$1 = ((($3)) + 5749|0);
 HEAP8[$add$ptr2$i$i$1>>0] = $conv$i$i;
 $add$ptr2$i$i$2 = ((($3)) + 6069|0);
 HEAP8[$add$ptr2$i$i$2>>0] = $conv$i$i;
 $add$ptr2$i$i$3 = ((($3)) + 6389|0);
 HEAP8[$add$ptr2$i$i$3>>0] = $conv$i$i;
 $add$ptr2$i$i$4 = ((($3)) + 6709|0);
 HEAP8[$add$ptr2$i$i$4>>0] = $conv$i$i;
 $add$ptr2$i$i$5 = ((($3)) + 7029|0);
 HEAP8[$add$ptr2$i$i$5>>0] = $conv$i$i;
 $add$ptr2$i$i$6 = ((($3)) + 7349|0);
 HEAP8[$add$ptr2$i$i$6>>0] = $conv$i$i;
 $add$ptr2$i$i$7 = ((($3)) + 7669|0);
 HEAP8[$add$ptr2$i$i$7>>0] = $conv$i$i;
 $cmp7 = (10)>($speed|0);
 if ($cmp7) {
  $original_speed$0 = $speed;
 } else {
  $sub10 = (($speed) - 10)|0;
  $conv11 = (+($sub10|0));
  $div = $conv11 / 2.0;
  $conv12 = (~~(($div)));
  $add = (10 + ($conv12))|0;
  $original_speed$0 = $add;
 }
 $mul = ($original_speed$0*40)|0;
 $div14 = (($mul|0) / 10)&-1;
 $5 = ($div14|0)<(119);
 $spec$store$select = $5 ? $div14 : 119;
 $add$ptr1$i50 = ((($3)) + 6271|0);
 $conv$i51 = $call3&255;
 _memset(($add$ptr1$i50|0),($conv$i51|0),118)|0;
 $cmp21 = ($spec$store$select|0)<(40);
 if ($cmp21) {
  $cmp4$i43 = ($div14|0)>(0);
  if ($cmp4$i43) {
   $conv$i46 = $call5&255;
   _memset(($add$ptr1$i50|0),($conv$i46|0),($spec$store$select|0))|0;
  }
 } else {
  $conv$i41 = $call5&255;
  _memset(($add$ptr1$i50|0),($conv$i41|0),40)|0;
  $cmp4$i = ($spec$store$select|0)==(40);
  if (!($cmp4$i)) {
   $sub31 = (($spec$store$select) + -40)|0;
   $add$ptr1$i37 = ((($3)) + 6310|0);
   $conv$i38 = $call4&255;
   _memset(($add$ptr1$i37|0),($conv$i38|0),($sub31|0))|0;
  }
 }
 $add$ptr1$i = ((($3)) + 5350|0);
 $conv$i34 = $call2&255;
 HEAP8[$add$ptr1$i>>0] = $conv$i34;
 $add$ptr2$i = ((($3)) + 5670|0);
 HEAP8[$add$ptr2$i>>0] = $conv$i34;
 $add$ptr2$i$1 = ((($3)) + 5990|0);
 HEAP8[$add$ptr2$i$1>>0] = $conv$i34;
 $add$ptr2$i$2 = ((($3)) + 6310|0);
 HEAP8[$add$ptr2$i$2>>0] = $conv$i34;
 $add$ptr2$i$3 = ((($3)) + 6630|0);
 HEAP8[$add$ptr2$i$3>>0] = $conv$i34;
 $add$ptr2$i$4 = ((($3)) + 6950|0);
 HEAP8[$add$ptr2$i$4>>0] = $conv$i34;
 $add$ptr2$i$5 = ((($3)) + 7270|0);
 HEAP8[$add$ptr2$i$5>>0] = $conv$i34;
 return;
}
function _WI_drawLF() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0;
 var $arrayidx6 = 0, $cmp = 0, $cmp1 = 0, $cmp19 = 0, $conv = 0, $conv10 = 0, $conv7 = 0, $div = 0, $div12 = 0, $div8 = 0, $height = 0, $last = 0, $last5 = 0, $mul = 0, $sub = 0, $sub11 = 0, $tmp = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $tmp = sp;
 $0 = HEAP32[32140]|0;
 $cmp = ($0|0)==(2);
 $1 = HEAP32[99806]|0;
 $last = ((($1)) + 8|0);
 $2 = HEAP32[$last>>2]|0;
 if ($cmp) {
  $3 = HEAP32[99807]|0;
  $cmp1 = ($2|0)<($3|0);
  if (!($cmp1)) {
   $cmp19 = ($2|0)>($3|0);
   if (!($cmp19)) {
    STACKTOP = sp;return;
   }
   $14 = ((($tmp)) + 8|0);
   dest=$14; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
   HEAP16[$tmp>>1] = 320;
   $15 = ((($tmp)) + 2|0);
   HEAP16[$15>>1] = 200;
   $16 = ((($tmp)) + 4|0);
   HEAP16[$16>>1] = 1;
   $17 = ((($tmp)) + 6|0);
   HEAP16[$17>>1] = 1;
   _V_DrawPatch(0,2,$tmp);
   STACKTOP = sp;return;
  }
 }
 $4 = HEAP32[99808]|0;
 $arrayidx = (($4) + ($2<<2)|0);
 $5 = HEAP32[$arrayidx>>2]|0;
 $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8);
 $conv = $6 << 16 >> 16;
 $sub = (320 - ($conv))|0;
 $div = (($sub|0) / 2)&-1;
 _V_DrawPatch($div,2,$5);
 $7 = HEAP32[99808]|0;
 $8 = HEAP32[99806]|0;
 $last5 = ((($8)) + 8|0);
 $9 = HEAP32[$last5>>2]|0;
 $arrayidx6 = (($7) + ($9<<2)|0);
 $10 = HEAP32[$arrayidx6>>2]|0;
 $height = ((($10)) + 2|0);
 $11 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
 $conv7 = $11 << 16 >> 16;
 $mul = ($conv7*5)|0;
 $div8 = (($mul|0) / 4)&-1;
 $add = (($div8) + 2)|0;
 $12 = HEAP32[99809]|0;
 $13 = HEAPU8[$12>>0]|(HEAPU8[$12+1>>0]<<8);
 $conv10 = $13 << 16 >> 16;
 $sub11 = (320 - ($conv10))|0;
 $div12 = (($sub11|0) / 2)&-1;
 _V_DrawPatch($div12,$add,$12);
 STACKTOP = sp;return;
}
function _WI_initAnimatedBack() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add11 = 0, $add11$sink = 0, $add15 = 0, $add16 = 0;
 var $add19 = 0, $add25 = 0, $arrayidx = 0, $arrayidx7 = 0, $call = 0, $call17 = 0, $cmp = 0, $cmp1 = 0, $cmp5 = 0, $ctr = 0, $data1 = 0, $data2 = 0, $i$017 = 0, $inc = 0, $nexttic = 0, $period = 0, $rem = 0, $rem18 = 0, $type = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32140]|0;
 $cmp = ($0|0)==(2);
 if ($cmp) {
  return;
 }
 $1 = HEAP32[99806]|0;
 $2 = HEAP32[$1>>2]|0;
 $cmp1 = ($2|0)>(2);
 if ($cmp1) {
  return;
 }
 $3 = $2;$i$017 = 0;
 while(1) {
  $arrayidx7 = (125456 + ($3<<2)|0);
  $4 = HEAP32[$arrayidx7>>2]|0;
  $ctr = (((($4) + (($i$017*56)|0)|0)) + 48|0);
  HEAP32[$ctr>>2] = -1;
  $type = (($4) + (($i$017*56)|0)|0);
  $5 = HEAP32[$type>>2]|0;
  switch ($5|0) {
  case 0:  {
   $6 = HEAP32[99811]|0;
   $add = (($6) + 1)|0;
   $call = (_M_Random()|0);
   $period = (((($4) + (($i$017*56)|0)|0)) + 4|0);
   $7 = HEAP32[$period>>2]|0;
   $rem = (($call|0) % ($7|0))&-1;
   $add11 = (($add) + ($rem))|0;
   $add11$sink = $add11;
   label = 8;
   break;
  }
  case 1:  {
   $8 = HEAP32[99811]|0;
   $add15 = (($8) + 1)|0;
   $data2 = (((($4) + (($i$017*56)|0)|0)) + 24|0);
   $9 = HEAP32[$data2>>2]|0;
   $add16 = (($add15) + ($9))|0;
   $call17 = (_M_Random()|0);
   $data1 = (((($4) + (($i$017*56)|0)|0)) + 20|0);
   $10 = HEAP32[$data1>>2]|0;
   $rem18 = (($call17|0) % ($10|0))&-1;
   $add19 = (($add16) + ($rem18))|0;
   $add11$sink = $add19;
   label = 8;
   break;
  }
  case 2:  {
   $11 = HEAP32[99811]|0;
   $add25 = (($11) + 1)|0;
   $add11$sink = $add25;
   label = 8;
   break;
  }
  default: {
  }
  }
  if ((label|0) == 8) {
   label = 0;
   $nexttic = (((($4) + (($i$017*56)|0)|0)) + 40|0);
   HEAP32[$nexttic>>2] = $add11$sink;
  }
  $inc = (($i$017) + 1)|0;
  $12 = HEAP32[99806]|0;
  $13 = HEAP32[$12>>2]|0;
  $arrayidx = (125472 + ($13<<2)|0);
  $14 = HEAP32[$arrayidx>>2]|0;
  $cmp5 = ($inc|0)<($14|0);
  if ($cmp5) {
   $3 = $13;$i$017 = $inc;
  } else {
   break;
  }
 }
 return;
}
function _WI_updateAnimatedBack() {
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add24 = 0, $add25 = 0, $add28 = 0, $add47 = 0, $arrayidx = 0, $arrayidx7 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp21 = 0, $cmp32 = 0;
 var $cmp33 = 0, $cmp36 = 0, $cmp42 = 0, $cmp5 = 0, $cmp9 = 0, $ctr = 0, $ctr17 = 0, $ctr38 = 0, $data1 = 0, $data135 = 0, $data2 = 0, $i$032 = 0, $inc = 0, $inc18 = 0, $inc39 = 0, $inc51 = 0, $nanims = 0, $nanims20 = 0, $nanims41 = 0, $next = 0;
 var $nexttic = 0, $or$cond = 0, $period = 0, $period27 = 0, $period46 = 0, $rem = 0, $spec$store$select = 0, $spec$store$select28 = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32140]|0;
 $cmp = ($0|0)==(2);
 if ($cmp) {
  return;
 }
 $1 = HEAP32[99806]|0;
 $2 = HEAP32[$1>>2]|0;
 $cmp1 = ($2|0)>(2);
 if ($cmp1) {
  return;
 }
 $17 = $1;$3 = $2;$i$032 = 0;
 while(1) {
  $arrayidx7 = (125456 + ($3<<2)|0);
  $4 = HEAP32[$arrayidx7>>2]|0;
  $5 = HEAP32[99811]|0;
  $nexttic = (((($4) + (($i$032*56)|0)|0)) + 40|0);
  $6 = HEAP32[$nexttic>>2]|0;
  $cmp9 = ($5|0)==($6|0);
  L9: do {
   if ($cmp9) {
    $type = (($4) + (($i$032*56)|0)|0);
    $7 = HEAP32[$type>>2]|0;
    switch ($7|0) {
    case 0:  {
     $ctr = (((($4) + (($i$032*56)|0)|0)) + 48|0);
     $8 = HEAP32[$ctr>>2]|0;
     $inc = (($8) + 1)|0;
     $nanims = (((($4) + (($i$032*56)|0)|0)) + 8|0);
     $9 = HEAP32[$nanims>>2]|0;
     $cmp11 = ($inc|0)<($9|0);
     $spec$store$select = $cmp11 ? $inc : 0;
     HEAP32[$ctr>>2] = $spec$store$select;
     $period = (((($4) + (($i$032*56)|0)|0)) + 4|0);
     $10 = HEAP32[$period>>2]|0;
     $add = (($10) + ($5))|0;
     HEAP32[$nexttic>>2] = $add;
     $24 = $17;
     break L9;
     break;
    }
    case 1:  {
     $ctr17 = (((($4) + (($i$032*56)|0)|0)) + 48|0);
     $11 = HEAP32[$ctr17>>2]|0;
     $inc18 = (($11) + 1)|0;
     HEAP32[$ctr17>>2] = $inc18;
     $nanims20 = (((($4) + (($i$032*56)|0)|0)) + 8|0);
     $12 = HEAP32[$nanims20>>2]|0;
     $cmp21 = ($inc18|0)==($12|0);
     if ($cmp21) {
      HEAP32[$ctr17>>2] = -1;
      $data2 = (((($4) + (($i$032*56)|0)|0)) + 24|0);
      $13 = HEAP32[$data2>>2]|0;
      $add24 = (($13) + ($5))|0;
      $call = (_M_Random()|0);
      $data1 = (((($4) + (($i$032*56)|0)|0)) + 20|0);
      $14 = HEAP32[$data1>>2]|0;
      $rem = (($call|0) % ($14|0))&-1;
      $add25 = (($add24) + ($rem))|0;
      HEAP32[$nexttic>>2] = $add25;
      $$pre = HEAP32[99806]|0;
      $24 = $$pre;
      break L9;
     } else {
      $period27 = (((($4) + (($i$032*56)|0)|0)) + 4|0);
      $15 = HEAP32[$period27>>2]|0;
      $add28 = (($15) + ($5))|0;
      HEAP32[$nexttic>>2] = $add28;
      $24 = $17;
      break L9;
     }
     break;
    }
    case 2:  {
     $16 = HEAP32[99812]|0;
     $cmp32 = ($16|0)==(0);
     $cmp33 = ($i$032|0)==(7);
     $or$cond = $cmp33 & $cmp32;
     if ($or$cond) {
      $24 = $17;
      break L9;
     }
     $next = ((($17)) + 12|0);
     $18 = HEAP32[$next>>2]|0;
     $data135 = (((($4) + (($i$032*56)|0)|0)) + 20|0);
     $19 = HEAP32[$data135>>2]|0;
     $cmp36 = ($18|0)==($19|0);
     if (!($cmp36)) {
      $24 = $17;
      break L9;
     }
     $ctr38 = (((($4) + (($i$032*56)|0)|0)) + 48|0);
     $20 = HEAP32[$ctr38>>2]|0;
     $inc39 = (($20) + 1)|0;
     $nanims41 = (((($4) + (($i$032*56)|0)|0)) + 8|0);
     $21 = HEAP32[$nanims41>>2]|0;
     $cmp42 = ($inc39|0)==($21|0);
     $spec$store$select28 = $cmp42 ? $20 : $inc39;
     HEAP32[$ctr38>>2] = $spec$store$select28;
     $period46 = (((($4) + (($i$032*56)|0)|0)) + 4|0);
     $22 = HEAP32[$period46>>2]|0;
     $add47 = (($22) + ($5))|0;
     HEAP32[$nexttic>>2] = $add47;
     $24 = $17;
     break L9;
     break;
    }
    default: {
     $24 = $17;
     break L9;
    }
    }
   } else {
    $24 = $17;
   }
  } while(0);
  $inc51 = (($i$032) + 1)|0;
  $23 = HEAP32[$24>>2]|0;
  $arrayidx = (125472 + ($23<<2)|0);
  $25 = HEAP32[$arrayidx>>2]|0;
  $cmp5 = ($inc51|0)<($25|0);
  if ($cmp5) {
   $17 = $24;$3 = $23;$i$032 = $inc51;
  } else {
   break;
  }
 }
 return;
}
function _WI_drawTime($x,$y,$t) {
 $x = $x|0;
 $y = $y|0;
 $t = $t|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx$i = 0, $arrayidx$i$1 = 0, $cmp = 0, $cmp1 = 0, $cmp10$i = 0, $cmp4 = 0;
 var $cmp5$i = 0, $conv = 0, $conv$i = 0, $conv12 = 0, $div$0 = 0, $div18$i = 0, $div3 = 0, $div6 = 0, $mul = 0, $rem = 0, $rem$i$1 = 0, $retval$0$i = 0, $spec$select$i = 0, $sub = 0, $sub$i = 0, $sub13 = 0, $sub17$i = 0, $sub17$i$1 = 0, $sub22$i = 0, $tobool = 0;
 var $tobool10 = 0, $x$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($t|0)<(0);
 if ($cmp) {
  return;
 }
 $cmp1 = ($t|0)<(3600);
 if (!($cmp1)) {
  $11 = HEAP32[99816]|0;
  $12 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8);
  $conv12 = $12 << 16 >> 16;
  $sub13 = (($x) - ($conv12))|0;
  _V_DrawPatch($sub13,$y,$11);
  return;
 }
 $div$0 = 1;$x$addr$0 = $x;
 while(1) {
  $div3 = (($t|0) / ($div$0|0))&-1;
  $rem = (($div3|0) % 60)&-1;
  $0 = HEAP32[98400]|0;
  $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8);
  $conv$i = $1 << 16 >> 16;
  $cmp5$i = ($rem|0)<(0);
  $sub$i = (0 - ($rem))|0;
  $spec$select$i = $cmp5$i ? $sub$i : $rem;
  $cmp10$i = ($spec$select$i|0)==(1994);
  if ($cmp10$i) {
   $retval$0$i = 0;
  } else {
   $sub17$i = (($x$addr$0) - ($conv$i))|0;
   $div18$i = (($spec$select$i|0) / 10)&-1;
   $2 = ($div18$i*10)|0;
   $3 = (($spec$select$i) - ($2))|0;
   $arrayidx$i = (393600 + ($3<<2)|0);
   $4 = HEAP32[$arrayidx$i>>2]|0;
   _V_DrawPatch($sub17$i,$y,$4);
   $sub17$i$1 = (($sub17$i) - ($conv$i))|0;
   $rem$i$1 = (($div18$i|0) % 10)&-1;
   $arrayidx$i$1 = (393600 + ($rem$i$1<<2)|0);
   $5 = HEAP32[$arrayidx$i$1>>2]|0;
   _V_DrawPatch($sub17$i$1,$y,$5);
   $6 = $conv$i << 1;
   $7 = (($x$addr$0) - ($6))|0;
   $sub22$i = (($7) + -8)|0;
   if ($cmp5$i) {
    $8 = HEAP32[99813]|0;
    _V_DrawPatch($sub22$i,$y,$8);
    $retval$0$i = $sub22$i;
   } else {
    $retval$0$i = $7;
   }
  }
  $9 = HEAP32[99815]|0;
  $10 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8);
  $conv = $10 << 16 >> 16;
  $sub = (($retval$0$i) - ($conv))|0;
  $mul = ($div$0*60)|0;
  $cmp4 = ($mul|0)==(60);
  if (!($cmp4)) {
   $div6 = (($t|0) / ($mul|0))&-1;
   $tobool = ($div6|0)==(0);
   if ($tobool) {
    label = 11;
    break;
   }
  }
  _V_DrawPatch($sub,$y,$9);
  $$pre = (($t|0) / ($mul|0))&-1;
  $tobool10 = ($$pre|0)==(0);
  if ($tobool10) {
   label = 11;
   break;
  } else {
   $div$0 = $mul;$x$addr$0 = $sub;
  }
 }
 if ((label|0) == 11) {
  return;
 }
}
function _WI_End() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _WI_unloadData();
 return;
}
function _WI_unloadData() {
 var $$pre = 0, $$pre$i = 0, $$pre76$i = 0, $$pre77$i = 0, $$pre78$i = 0, $$pre79$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx$i = 0, $arrayidx18$i = 0;
 var $arrayidx22$i = 0, $arrayidx35$i = 0, $arrayidx35$us$i = 0, $arrayidx35$us$i5 = 0, $arrayidx39$i = 0, $arrayidx41$i = 0, $arrayidx9$1$i = 0, $arrayidx9$2$i = 0, $arrayidx9$3$i = 0, $arrayidx9$4$i = 0, $arrayidx9$5$i = 0, $arrayidx9$6$i = 0, $arrayidx9$7$i = 0, $arrayidx9$8$i = 0, $call60$i = 0, $cmp$i = 0, $cmp1$i = 0, $cmp14$i = 0, $cmp163$i = 0, $cmp19$i = 0;
 var $cmp25$i = 0, $cmp25$us$i = 0, $cmp25$us$i6 = 0, $cmp2565$i = 0, $cmp28$i = 0, $cmp29$i = 0, $cmp61$i = 0, $cmp91$i = 0, $i$064$i = 0, $i$266$i = 0, $inc$i = 0, $inc43$i = 0, $inc43$us$i = 0, $inc43$us$i7 = 0, $inc46$i = 0, $j$070$i = 0, $name$i = 0, $nanims$i = 0, $or$cond1$i = 0, $tobool$i = 0;
 var $tobool63$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer100 = 0, $vararg_buffer103 = 0, $vararg_buffer106 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer33 = 0, $vararg_buffer37 = 0, $vararg_buffer42 = 0, $vararg_buffer47 = 0, $vararg_buffer5 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0;
 var $vararg_buffer64 = 0, $vararg_buffer67 = 0, $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer82 = 0, $vararg_buffer85 = 0, $vararg_buffer88 = 0, $vararg_buffer9 = 0, $vararg_buffer91 = 0, $vararg_buffer94 = 0, $vararg_buffer97 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0;
 var $vararg_ptr4 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr45 = 0, $vararg_ptr46 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $vararg_buffer106 = sp + 272|0;
 $vararg_buffer103 = sp + 264|0;
 $vararg_buffer100 = sp + 256|0;
 $vararg_buffer97 = sp + 248|0;
 $vararg_buffer94 = sp + 240|0;
 $vararg_buffer91 = sp + 232|0;
 $vararg_buffer88 = sp + 224|0;
 $vararg_buffer85 = sp + 216|0;
 $vararg_buffer82 = sp + 208|0;
 $vararg_buffer79 = sp + 200|0;
 $vararg_buffer76 = sp + 192|0;
 $vararg_buffer73 = sp + 184|0;
 $vararg_buffer70 = sp + 176|0;
 $vararg_buffer67 = sp + 168|0;
 $vararg_buffer64 = sp + 160|0;
 $vararg_buffer61 = sp + 152|0;
 $vararg_buffer58 = sp + 144|0;
 $vararg_buffer55 = sp + 136|0;
 $vararg_buffer52 = sp + 128|0;
 $vararg_buffer47 = sp + 112|0;
 $vararg_buffer42 = sp + 96|0;
 $vararg_buffer37 = sp + 80|0;
 $vararg_buffer33 = sp + 72|0;
 $vararg_buffer29 = sp + 64|0;
 $vararg_buffer25 = sp + 56|0;
 $vararg_buffer21 = sp + 48|0;
 $vararg_buffer17 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $name$i = sp + 276|0;
 $0 = HEAP32[32140]|0;
 $cmp$i = ($0|0)==(2);
 if ($cmp$i) {
  $1 = HEAP32[99807]|0;
  $cmp163$i = ($1|0)==(0);
  if (!($cmp163$i)) {
   $i$064$i = 0;
   while(1) {
    HEAP32[$vararg_buffer>>2] = $i$064$i;
    (_snprintf($name$i,9,156357,$vararg_buffer)|0);
    $2 = HEAP32[99808]|0;
    $arrayidx$i = (($2) + ($i$064$i<<2)|0);
    _W_ReleaseLumpName($name$i);
    HEAP32[$arrayidx$i>>2] = 0;
    $inc$i = (($i$064$i) + 1)|0;
    $3 = HEAP32[99807]|0;
    $cmp1$i = ($inc$i>>>0)<($3>>>0);
    if ($cmp1$i) {
     $i$064$i = $inc$i;
    } else {
     break;
    }
   }
  }
 } else {
  $4 = HEAP32[99806]|0;
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $5;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 0;
  (_snprintf($name$i,9,156368,$vararg_buffer1)|0);
  $6 = HEAP32[99808]|0;
  _W_ReleaseLumpName($name$i);
  HEAP32[$6>>2] = 0;
  $7 = HEAP32[99806]|0;
  $8 = HEAP32[$7>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $8;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = 1;
  (_snprintf($name$i,9,156368,$vararg_buffer5)|0);
  $9 = HEAP32[99808]|0;
  $arrayidx9$1$i = ((($9)) + 4|0);
  _W_ReleaseLumpName($name$i);
  HEAP32[$arrayidx9$1$i>>2] = 0;
  $10 = HEAP32[99806]|0;
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer9>>2] = $11;
  $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
  HEAP32[$vararg_ptr12>>2] = 2;
  (_snprintf($name$i,9,156368,$vararg_buffer9)|0);
  $12 = HEAP32[99808]|0;
  $arrayidx9$2$i = ((($12)) + 8|0);
  _W_ReleaseLumpName($name$i);
  HEAP32[$arrayidx9$2$i>>2] = 0;
  $13 = HEAP32[99806]|0;
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer13>>2] = $14;
  $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
  HEAP32[$vararg_ptr16>>2] = 3;
  (_snprintf($name$i,9,156368,$vararg_buffer13)|0);
  $15 = HEAP32[99808]|0;
  $arrayidx9$3$i = ((($15)) + 12|0);
  _W_ReleaseLumpName($name$i);
  HEAP32[$arrayidx9$3$i>>2] = 0;
  $16 = HEAP32[99806]|0;
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer17>>2] = $17;
  $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
  HEAP32[$vararg_ptr20>>2] = 4;
  (_snprintf($name$i,9,156368,$vararg_buffer17)|0);
  $18 = HEAP32[99808]|0;
  $arrayidx9$4$i = ((($18)) + 16|0);
  _W_ReleaseLumpName($name$i);
  HEAP32[$arrayidx9$4$i>>2] = 0;
  $19 = HEAP32[99806]|0;
  $20 = HEAP32[$19>>2]|0;
  HEAP32[$vararg_buffer21>>2] = $20;
  $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
  HEAP32[$vararg_ptr24>>2] = 5;
  (_snprintf($name$i,9,156368,$vararg_buffer21)|0);
  $21 = HEAP32[99808]|0;
  $arrayidx9$5$i = ((($21)) + 20|0);
  _W_ReleaseLumpName($name$i);
  HEAP32[$arrayidx9$5$i>>2] = 0;
  $22 = HEAP32[99806]|0;
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer25>>2] = $23;
  $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
  HEAP32[$vararg_ptr28>>2] = 6;
  (_snprintf($name$i,9,156368,$vararg_buffer25)|0);
  $24 = HEAP32[99808]|0;
  $arrayidx9$6$i = ((($24)) + 24|0);
  _W_ReleaseLumpName($name$i);
  HEAP32[$arrayidx9$6$i>>2] = 0;
  $25 = HEAP32[99806]|0;
  $26 = HEAP32[$25>>2]|0;
  HEAP32[$vararg_buffer29>>2] = $26;
  $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
  HEAP32[$vararg_ptr32>>2] = 7;
  (_snprintf($name$i,9,156368,$vararg_buffer29)|0);
  $27 = HEAP32[99808]|0;
  $arrayidx9$7$i = ((($27)) + 28|0);
  _W_ReleaseLumpName($name$i);
  HEAP32[$arrayidx9$7$i>>2] = 0;
  $28 = HEAP32[99806]|0;
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$vararg_buffer33>>2] = $29;
  $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
  HEAP32[$vararg_ptr36>>2] = 8;
  (_snprintf($name$i,9,156368,$vararg_buffer33)|0);
  $30 = HEAP32[99808]|0;
  $arrayidx9$8$i = ((($30)) + 32|0);
  _W_ReleaseLumpName($name$i);
  HEAP32[$arrayidx9$8$i>>2] = 0;
  _W_ReleaseLumpName(156377);
  HEAP32[99817] = 0;
  _W_ReleaseLumpName(156384);
  HEAP32[(399272)>>2] = 0;
  _W_ReleaseLumpName(156391);
  HEAP32[99820] = 0;
  $31 = HEAP32[99806]|0;
  $32 = HEAP32[$31>>2]|0;
  $cmp14$i = ($32|0)<(3);
  if ($cmp14$i) {
   $33 = $32;$j$070$i = 0;
   while(1) {
    $arrayidx22$i = (125456 + ($33<<2)|0);
    $34 = HEAP32[$arrayidx22$i>>2]|0;
    $nanims$i = (((($34) + (($j$070$i*56)|0)|0)) + 8|0);
    $35 = HEAP32[$nanims$i>>2]|0;
    $cmp2565$i = ($35|0)>(0);
    L10: do {
     if ($cmp2565$i) {
      $cmp29$i = ($j$070$i|0)==(8);
      if (!($cmp29$i)) {
       HEAP32[$vararg_buffer37>>2] = $33;
       $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
       HEAP32[$vararg_ptr40>>2] = $j$070$i;
       $vararg_ptr41 = ((($vararg_buffer37)) + 8|0);
       HEAP32[$vararg_ptr41>>2] = 0;
       (_snprintf($name$i,9,156399,$vararg_buffer37)|0);
       $arrayidx35$us$i5 = (((($34) + (($j$070$i*56)|0)|0)) + 28|0);
       _W_ReleaseLumpName($name$i);
       HEAP32[$arrayidx35$us$i5>>2] = 0;
       $36 = HEAP32[$nanims$i>>2]|0;
       $cmp25$us$i6 = ($36|0)>(1);
       if (!($cmp25$us$i6)) {
        break;
       }
       $inc43$us$i7 = 1;
       while(1) {
        $$pre$i = HEAP32[99806]|0;
        $37 = HEAP32[$$pre$i>>2]|0;
        HEAP32[$vararg_buffer42>>2] = $37;
        $vararg_ptr45 = ((($vararg_buffer42)) + 4|0);
        HEAP32[$vararg_ptr45>>2] = $j$070$i;
        $vararg_ptr46 = ((($vararg_buffer42)) + 8|0);
        HEAP32[$vararg_ptr46>>2] = $inc43$us$i7;
        (_snprintf($name$i,9,156399,$vararg_buffer42)|0);
        $arrayidx35$us$i = ((((($34) + (($j$070$i*56)|0)|0)) + 28|0) + ($inc43$us$i7<<2)|0);
        _W_ReleaseLumpName($name$i);
        HEAP32[$arrayidx35$us$i>>2] = 0;
        $inc43$us$i = (($inc43$us$i7) + 1)|0;
        $38 = HEAP32[$nanims$i>>2]|0;
        $cmp25$us$i = ($inc43$us$i|0)<($38|0);
        if ($cmp25$us$i) {
         $inc43$us$i7 = $inc43$us$i;
        } else {
         break L10;
        }
       }
      }
      $39 = $33;$51 = $35;$i$266$i = 0;
      while(1) {
       $cmp28$i = ($39|0)==(1);
       if ($cmp28$i) {
        $arrayidx39$i = (126300 + ($i$266$i<<2)|0);
        $40 = HEAP32[$arrayidx39$i>>2]|0;
        $arrayidx41$i = (((($34)) + 476|0) + ($i$266$i<<2)|0);
        HEAP32[$arrayidx41$i>>2] = $40;
        $41 = $51;
       } else {
        HEAP32[$vararg_buffer47>>2] = $39;
        $vararg_ptr50 = ((($vararg_buffer47)) + 4|0);
        HEAP32[$vararg_ptr50>>2] = 8;
        $vararg_ptr51 = ((($vararg_buffer47)) + 8|0);
        HEAP32[$vararg_ptr51>>2] = $i$266$i;
        (_snprintf($name$i,9,156399,$vararg_buffer47)|0);
        $arrayidx35$i = (((($34)) + 476|0) + ($i$266$i<<2)|0);
        _W_ReleaseLumpName($name$i);
        HEAP32[$arrayidx35$i>>2] = 0;
        $$pre77$i = HEAP32[$nanims$i>>2]|0;
        $41 = $$pre77$i;
       }
       $inc43$i = (($i$266$i) + 1)|0;
       $cmp25$i = ($inc43$i|0)<($41|0);
       if (!($cmp25$i)) {
        break L10;
       }
       $$pre76$i = HEAP32[99806]|0;
       $$pre = HEAP32[$$pre76$i>>2]|0;
       $39 = $$pre;$51 = $41;$i$266$i = $inc43$i;
      }
     }
    } while(0);
    $inc46$i = (($j$070$i) + 1)|0;
    $42 = HEAP32[99806]|0;
    $43 = HEAP32[$42>>2]|0;
    $arrayidx18$i = (125472 + ($43<<2)|0);
    $44 = HEAP32[$arrayidx18$i>>2]|0;
    $cmp19$i = ($inc46$i|0)<($44|0);
    if ($cmp19$i) {
     $33 = $43;$j$070$i = $inc46$i;
    } else {
     break;
    }
   }
  }
 }
 _W_ReleaseLumpName(156413);
 HEAP32[99813] = 0;
 HEAP32[$vararg_buffer52>>2] = 0;
 (_snprintf($name$i,9,156421,$vararg_buffer52)|0);
 _W_ReleaseLumpName($name$i);
 HEAP32[98400] = 0;
 HEAP32[$vararg_buffer55>>2] = 1;
 (_snprintf($name$i,9,156421,$vararg_buffer55)|0);
 _W_ReleaseLumpName($name$i);
 HEAP32[(393604)>>2] = 0;
 HEAP32[$vararg_buffer58>>2] = 2;
 (_snprintf($name$i,9,156421,$vararg_buffer58)|0);
 _W_ReleaseLumpName($name$i);
 HEAP32[(393608)>>2] = 0;
 HEAP32[$vararg_buffer61>>2] = 3;
 (_snprintf($name$i,9,156421,$vararg_buffer61)|0);
 _W_ReleaseLumpName($name$i);
 HEAP32[(393612)>>2] = 0;
 HEAP32[$vararg_buffer64>>2] = 4;
 (_snprintf($name$i,9,156421,$vararg_buffer64)|0);
 _W_ReleaseLumpName($name$i);
 HEAP32[(393616)>>2] = 0;
 HEAP32[$vararg_buffer67>>2] = 5;
 (_snprintf($name$i,9,156421,$vararg_buffer67)|0);
 _W_ReleaseLumpName($name$i);
 HEAP32[(393620)>>2] = 0;
 HEAP32[$vararg_buffer70>>2] = 6;
 (_snprintf($name$i,9,156421,$vararg_buffer70)|0);
 _W_ReleaseLumpName($name$i);
 HEAP32[(393624)>>2] = 0;
 HEAP32[$vararg_buffer73>>2] = 7;
 (_snprintf($name$i,9,156421,$vararg_buffer73)|0);
 _W_ReleaseLumpName($name$i);
 HEAP32[(393628)>>2] = 0;
 HEAP32[$vararg_buffer76>>2] = 8;
 (_snprintf($name$i,9,156421,$vararg_buffer76)|0);
 _W_ReleaseLumpName($name$i);
 HEAP32[(393632)>>2] = 0;
 HEAP32[$vararg_buffer79>>2] = 9;
 (_snprintf($name$i,9,156421,$vararg_buffer79)|0);
 _W_ReleaseLumpName($name$i);
 HEAP32[(393636)>>2] = 0;
 _W_ReleaseLumpName(156429);
 HEAP32[99814] = 0;
 _W_ReleaseLumpName(156436);
 HEAP32[99809] = 0;
 _W_ReleaseLumpName(156440);
 HEAP32[99810] = 0;
 _W_ReleaseLumpName(156448);
 HEAP32[99822] = 0;
 _W_ReleaseLumpName(156455);
 HEAP32[99823] = 0;
 _W_ReleaseLumpName(156462);
 HEAP32[99824] = 0;
 $call60$i = (_W_CheckNumForName(156470)|0);
 $cmp61$i = ($call60$i|0)>(-1);
 do {
  if ($cmp61$i) {
   $45 = HEAP32[99094]|0;
   $tobool$i = ($45|0)==(0);
   $46 = HEAP32[99091]|0;
   $tobool63$i = ($46|0)!=(0);
   $or$cond1$i = $tobool$i | $tobool63$i;
   if ($or$cond1$i) {
    _W_ReleaseLumpName(156476);
    break;
   } else {
    _W_ReleaseLumpName(156470);
    break;
   }
  } else {
   _W_ReleaseLumpName(156476);
  }
 } while(0);
 HEAP32[99825] = 0;
 _W_ReleaseLumpName(156483);
 HEAP32[99826] = 0;
 _W_ReleaseLumpName(156490);
 HEAP32[99815] = 0;
 _W_ReleaseLumpName(156498);
 HEAP32[99827] = 0;
 _W_ReleaseLumpName(156505);
 HEAP32[99816] = 0;
 _W_ReleaseLumpName(156513);
 HEAP32[99828] = 0;
 _W_ReleaseLumpName(156519);
 HEAP32[99829] = 0;
 _W_ReleaseLumpName(156527);
 HEAP32[99830] = 0;
 _W_ReleaseLumpName(156535);
 HEAP32[99831] = 0;
 HEAP32[$vararg_buffer82>>2] = 0;
 (_snprintf($name$i,9,156542,$vararg_buffer82)|0);
 _W_ReleaseLumpName($name$i);
 HEAP32[98412] = 0;
 HEAP32[$vararg_buffer85>>2] = 1;
 (_snprintf($name$i,9,156549,$vararg_buffer85)|0);
 _W_ReleaseLumpName($name$i);
 HEAP32[98416] = 0;
 HEAP32[$vararg_buffer88>>2] = 1;
 (_snprintf($name$i,9,156542,$vararg_buffer88)|0);
 _W_ReleaseLumpName($name$i);
 HEAP32[(393652)>>2] = 0;
 HEAP32[$vararg_buffer91>>2] = 2;
 (_snprintf($name$i,9,156549,$vararg_buffer91)|0);
 _W_ReleaseLumpName($name$i);
 HEAP32[(393668)>>2] = 0;
 HEAP32[$vararg_buffer94>>2] = 2;
 (_snprintf($name$i,9,156542,$vararg_buffer94)|0);
 _W_ReleaseLumpName($name$i);
 HEAP32[(393656)>>2] = 0;
 HEAP32[$vararg_buffer97>>2] = 3;
 (_snprintf($name$i,9,156549,$vararg_buffer97)|0);
 _W_ReleaseLumpName($name$i);
 HEAP32[(393672)>>2] = 0;
 HEAP32[$vararg_buffer100>>2] = 3;
 (_snprintf($name$i,9,156542,$vararg_buffer100)|0);
 _W_ReleaseLumpName($name$i);
 HEAP32[(393660)>>2] = 0;
 HEAP32[$vararg_buffer103>>2] = 4;
 (_snprintf($name$i,9,156549,$vararg_buffer103)|0);
 _W_ReleaseLumpName($name$i);
 HEAP32[(393676)>>2] = 0;
 $47 = HEAP32[32140]|0;
 switch ($47|0) {
 case 2:  {
  (_M_StringCopy($name$i,156556,9)|0);
  _W_ReleaseLumpName($name$i);
  HEAP32[99805] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $48 = HEAP32[99806]|0;
  $49 = HEAP32[$48>>2]|0;
  $cmp91$i = ($49|0)==(3);
  if ($cmp91$i) {
   (_M_StringCopy($name$i,156556,9)|0);
   _W_ReleaseLumpName($name$i);
   HEAP32[99805] = 0;
   STACKTOP = sp;return;
  } else {
   $50 = $49;
  }
  break;
 }
 default: {
  $$pre78$i = HEAP32[99806]|0;
  $$pre79$i = HEAP32[$$pre78$i>>2]|0;
  $50 = $$pre79$i;
 }
 }
 HEAP32[$vararg_buffer106>>2] = $50;
 (_snprintf($name$i,9,156565,$vararg_buffer106)|0);
 _W_ReleaseLumpName($name$i);
 HEAP32[99805] = 0;
 STACKTOP = sp;return;
}
function _WI_drawShowNextLoc() {
 var $$lcssa = 0, $$pr$pre = 0, $$pr107 = 0, $$pre = 0, $$pre$i = 0, $$pre$i19 = 0, $$pre$i56 = 0, $$pre$i9 = 0, $$pre126 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $add$i = 0, $add$i101 = 0, $add$i13 = 0, $add$i29 = 0, $add$i66 = 0, $add13$i = 0, $add13$i32 = 0, $add13$i69 = 0, $add44$i = 0, $add44$i87 = 0, $arrayidx$i = 0, $arrayidx$i5 = 0;
 var $arrayidx$i96 = 0, $arrayidx13$i = 0, $arrayidx26$i = 0, $arrayidx26$i42 = 0, $arrayidx26$i79 = 0, $arrayidx42$i = 0, $arrayidx42$i48 = 0, $arrayidx42$i85 = 0, $arrayidx7$i = 0, $cmp = 0, $cmp$i = 0, $cmp1 = 0, $cmp1$i = 0, $cmp14 = 0, $cmp15$i = 0, $cmp15$i33 = 0, $cmp15$i70 = 0, $cmp16 = 0, $cmp21$i = 0, $cmp21$i34 = 0;
 var $cmp21$i71 = 0, $cmp24$i = 0, $cmp24$i39 = 0, $cmp24$i76 = 0, $cmp27$i = 0, $cmp27$i43 = 0, $cmp27$i80 = 0, $cmp31$i = 0, $cmp31$i45 = 0, $cmp31$i82 = 0, $cmp4 = 0, $cmp5$i = 0, $cmp6115 = 0, $cmp9$i = 0, $cond = 0, $conv$i = 0, $conv$i10 = 0, $conv$i22 = 0, $conv$i59 = 0, $conv$i92 = 0;
 var $conv1$i = 0, $conv1$i98 = 0, $conv10$i = 0, $conv10$i28 = 0, $conv10$i65 = 0, $conv12$i = 0, $conv12$i31 = 0, $conv12$i68 = 0, $conv6$i = 0, $conv6$i103 = 0, $conv7$i = 0, $conv7$i25 = 0, $conv7$i62 = 0, $ctr$i = 0, $didsecret = 0, $div$i = 0, $div$i94 = 0, $div2$i = 0, $div2$i100 = 0, $div8$i = 0;
 var $div8$i105 = 0, $exitcond = 0, $height$i = 0, $height$i14 = 0, $height$i30 = 0, $height$i67 = 0, $height$i97 = 0, $i$0$i = 0, $i$0$i20 = 0, $i$0$i57 = 0, $i$0116 = 0, $i$012$i = 0, $i$1$i = 0, $i$1$i38 = 0, $i$1$i75 = 0, $inc$i = 0, $inc$i15 = 0, $inc$i37 = 0, $inc$i74 = 0, $inc$pre$phiZ2D = 0;
 var $last3 = 0, $leftoffset$i = 0, $leftoffset$i21 = 0, $leftoffset$i58 = 0, $mul$i = 0, $mul$i99 = 0, $next = 0, $next$i = 0, $next$i95 = 0, $next11 = 0, $next15 = 0, $not$or$cond2$i = 0, $not$or$cond2$i36 = 0, $not$or$cond2$i73 = 0, $or$cond2$i = 0, $or$cond2$i35 = 0, $or$cond2$i72 = 0, $or$cond3$i = 0, $or$cond3$i40 = 0, $or$cond3$i77 = 0;
 var $or$cond4$i = 0, $or$cond4$i46 = 0, $or$cond4$i83 = 0, $sub = 0, $sub$i = 0, $sub$i11 = 0, $sub$i23 = 0, $sub$i60 = 0, $sub$i93 = 0, $sub7$i = 0, $sub7$i104 = 0, $sub8$i = 0, $sub8$i26 = 0, $sub8$i63 = 0, $tobool = 0, $tobool9 = 0, $topoffset$i = 0, $topoffset$i24 = 0, $topoffset$i61 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer4 = 0, $x$i = 0, $x$i17 = 0, $x$i54 = 0, $x$i7 = 0, $y$i = 0, $y$i18 = 0, $y$i55 = 0, $y$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[99805]|0;
 _V_DrawPatch(0,0,$0);
 $1 = HEAP32[32140]|0;
 $cmp$i = ($1|0)==(2);
 do {
  if ($cmp$i) {
   label = 37;
  } else {
   $2 = HEAP32[99806]|0;
   $3 = HEAP32[$2>>2]|0;
   $cmp1$i = ($3|0)>(2);
   if (!($cmp1$i)) {
    $4 = $3;$78 = $2;$i$012$i = 0;
    while(1) {
     $arrayidx7$i = (125456 + ($4<<2)|0);
     $5 = HEAP32[$arrayidx7$i>>2]|0;
     $ctr$i = (((($5) + (($i$012$i*56)|0)|0)) + 48|0);
     $6 = HEAP32[$ctr$i>>2]|0;
     $cmp9$i = ($6|0)>(-1);
     if ($cmp9$i) {
      $arrayidx13$i = ((((($5) + (($i$012$i*56)|0)|0)) + 28|0) + ($6<<2)|0);
      $y$i = (((($5) + (($i$012$i*56)|0)|0)) + 16|0);
      $x$i = (((($5) + (($i$012$i*56)|0)|0)) + 12|0);
      $7 = HEAP32[$x$i>>2]|0;
      $8 = HEAP32[$y$i>>2]|0;
      $9 = HEAP32[$arrayidx13$i>>2]|0;
      _V_DrawPatch($7,$8,$9);
      $$pre$i = HEAP32[99806]|0;
      $11 = $$pre$i;
     } else {
      $11 = $78;
     }
     $inc$i = (($i$012$i) + 1)|0;
     $10 = HEAP32[$11>>2]|0;
     $arrayidx$i = (125472 + ($10<<2)|0);
     $12 = HEAP32[$arrayidx$i>>2]|0;
     $cmp5$i = ($inc$i|0)<($12|0);
     if ($cmp5$i) {
      $4 = $10;$78 = $11;$i$012$i = $inc$i;
     } else {
      break;
     }
    }
    $$pr$pre = HEAP32[32140]|0;
    $cmp = ($$pr$pre|0)==(2);
    if ($cmp) {
     label = 37;
     break;
    }
    $cmp1 = ($10|0)>(2);
    if (!($cmp1)) {
     $last3 = ((($11)) + 8|0);
     $21 = HEAP32[$last3>>2]|0;
     $cmp4 = ($21|0)==(8);
     if ($cmp4) {
      $next = ((($11)) + 12|0);
      $22 = HEAP32[$next>>2]|0;
      $sub = (($22) + -1)|0;
      $cond = $sub;
     } else {
      $cond = $21;
     }
     $cmp6115 = ($cond|0)<(0);
     L16: do {
      if ($cmp6115) {
       $$lcssa = $11;
      } else {
       $23 = (($cond) + 1)|0;
       $24 = $10;$i$0116 = 0;
       while(1) {
        $x$i7 = ((125168 + (($24*72)|0)|0) + ($i$0116<<3)|0);
        $25 = HEAP32[$x$i7>>2]|0;
        $y$i8 = ((((125168 + (($24*72)|0)|0) + ($i$0116<<3)|0)) + 4|0);
        $26 = HEAP32[$y$i8>>2]|0;
        $$pre$i9 = HEAP32[99820]|0;
        $27 = $$pre$i9;$i$0$i = 0;
        while(1) {
         $leftoffset$i = ((($27)) + 4|0);
         $28 = HEAPU8[$leftoffset$i>>0]|(HEAPU8[$leftoffset$i+1>>0]<<8);
         $conv$i10 = $28 << 16 >> 16;
         $sub$i11 = (($25) - ($conv$i10))|0;
         $topoffset$i = ((($27)) + 6|0);
         $29 = HEAPU8[$topoffset$i>>0]|(HEAPU8[$topoffset$i+1>>0]<<8);
         $conv7$i = $29 << 16 >> 16;
         $sub8$i = (($26) - ($conv7$i))|0;
         $30 = HEAPU8[$27>>0]|(HEAPU8[$27+1>>0]<<8);
         $conv10$i = $30 << 16 >> 16;
         $add$i13 = (($sub$i11) + ($conv10$i))|0;
         $height$i14 = ((($27)) + 2|0);
         $31 = HEAPU8[$height$i14>>0]|(HEAPU8[$height$i14+1>>0]<<8);
         $conv12$i = $31 << 16 >> 16;
         $add13$i = (($sub8$i) + ($conv12$i))|0;
         $cmp15$i = ($add$i13|0)<(320);
         $32 = $sub8$i | $sub$i11;
         $33 = ($32|0)>(-1);
         $34 = $33 & $cmp15$i;
         $cmp21$i = ($add13$i|0)<(200);
         $or$cond2$i = $34 & $cmp21$i;
         $not$or$cond2$i = $or$cond2$i ^ 1;
         $inc$i15 = $not$or$cond2$i&1;
         $i$1$i = (($i$0$i) + ($inc$i15))|0;
         $cmp24$i = ($i$1$i|0)!=(2);
         $or$cond3$i = $cmp24$i & $not$or$cond2$i;
         if (!($or$cond3$i)) {
          label = 17;
          break;
         }
         $arrayidx26$i = (399280 + ($i$1$i<<2)|0);
         $35 = HEAP32[$arrayidx26$i>>2]|0;
         $cmp27$i = ($35|0)==(0|0);
         if ($cmp27$i) {
          label = 19;
          break;
         } else {
          $27 = $35;$i$0$i = $i$1$i;
         }
        }
        if ((label|0) == 17) {
         label = 0;
         $cmp31$i = ($i$1$i>>>0)<(2);
         $or$cond4$i = $or$cond2$i & $cmp31$i;
         if ($or$cond4$i) {
          $arrayidx42$i = (399280 + ($i$1$i<<2)|0);
          $36 = HEAP32[$arrayidx42$i>>2]|0;
          _V_DrawPatch($25,$26,$36);
          $$pre126 = (($i$0116) + 1)|0;
          $inc$pre$phiZ2D = $$pre126;
         } else {
          label = 19;
         }
        }
        if ((label|0) == 19) {
         label = 0;
         $add44$i = (($i$0116) + 1)|0;
         HEAP32[$vararg_buffer>>2] = $add44$i;
         (_printf(156323,$vararg_buffer)|0);
         $inc$pre$phiZ2D = $add44$i;
        }
        $37 = HEAP32[99806]|0;
        $exitcond = ($inc$pre$phiZ2D|0)==($23|0);
        if ($exitcond) {
         $$lcssa = $37;
         break L16;
        }
        $$pre = HEAP32[$37>>2]|0;
        $24 = $$pre;$i$0116 = $inc$pre$phiZ2D;
       }
      }
     } while(0);
     $didsecret = ((($$lcssa)) + 4|0);
     $38 = HEAP32[$didsecret>>2]|0;
     $tobool = ($38|0)==(0);
     do {
      if (!($tobool)) {
       $39 = HEAP32[$$lcssa>>2]|0;
       $x$i17 = (((125168 + (($39*72)|0)|0)) + 64|0);
       $40 = HEAP32[$x$i17>>2]|0;
       $y$i18 = (((125168 + (($39*72)|0)|0)) + 68|0);
       $41 = HEAP32[$y$i18>>2]|0;
       $$pre$i19 = HEAP32[99820]|0;
       $42 = $$pre$i19;$i$0$i20 = 0;
       while(1) {
        $leftoffset$i21 = ((($42)) + 4|0);
        $43 = HEAPU8[$leftoffset$i21>>0]|(HEAPU8[$leftoffset$i21+1>>0]<<8);
        $conv$i22 = $43 << 16 >> 16;
        $sub$i23 = (($40) - ($conv$i22))|0;
        $topoffset$i24 = ((($42)) + 6|0);
        $44 = HEAPU8[$topoffset$i24>>0]|(HEAPU8[$topoffset$i24+1>>0]<<8);
        $conv7$i25 = $44 << 16 >> 16;
        $sub8$i26 = (($41) - ($conv7$i25))|0;
        $45 = HEAPU8[$42>>0]|(HEAPU8[$42+1>>0]<<8);
        $conv10$i28 = $45 << 16 >> 16;
        $add$i29 = (($sub$i23) + ($conv10$i28))|0;
        $height$i30 = ((($42)) + 2|0);
        $46 = HEAPU8[$height$i30>>0]|(HEAPU8[$height$i30+1>>0]<<8);
        $conv12$i31 = $46 << 16 >> 16;
        $add13$i32 = (($sub8$i26) + ($conv12$i31))|0;
        $cmp15$i33 = ($add$i29|0)<(320);
        $47 = $sub8$i26 | $sub$i23;
        $48 = ($47|0)>(-1);
        $49 = $48 & $cmp15$i33;
        $cmp21$i34 = ($add13$i32|0)<(200);
        $or$cond2$i35 = $49 & $cmp21$i34;
        $not$or$cond2$i36 = $or$cond2$i35 ^ 1;
        $inc$i37 = $not$or$cond2$i36&1;
        $i$1$i38 = (($i$0$i20) + ($inc$i37))|0;
        $cmp24$i39 = ($i$1$i38|0)!=(2);
        $or$cond3$i40 = $cmp24$i39 & $not$or$cond2$i36;
        if (!($or$cond3$i40)) {
         label = 26;
         break;
        }
        $arrayidx26$i42 = (399280 + ($i$1$i38<<2)|0);
        $50 = HEAP32[$arrayidx26$i42>>2]|0;
        $cmp27$i43 = ($50|0)==(0|0);
        if ($cmp27$i43) {
         break;
        } else {
         $42 = $50;$i$0$i20 = $i$1$i38;
        }
       }
       if ((label|0) == 26) {
        $cmp31$i45 = ($i$1$i38>>>0)<(2);
        $or$cond4$i46 = $or$cond2$i35 & $cmp31$i45;
        if ($or$cond4$i46) {
         $arrayidx42$i48 = (399280 + ($i$1$i38<<2)|0);
         $51 = HEAP32[$arrayidx42$i48>>2]|0;
         _V_DrawPatch($40,$41,$51);
         break;
        }
       }
       HEAP32[$vararg_buffer1>>2] = 9;
       (_printf(156323,$vararg_buffer1)|0);
      }
     } while(0);
     $52 = HEAP32[99834]|0;
     $tobool9 = ($52|0)==(0);
     do {
      if (!($tobool9)) {
       $53 = HEAP32[99806]|0;
       $next11 = ((($53)) + 12|0);
       $54 = HEAP32[$next11>>2]|0;
       $55 = HEAP32[$53>>2]|0;
       $x$i54 = ((125168 + (($55*72)|0)|0) + ($54<<3)|0);
       $56 = HEAP32[$x$i54>>2]|0;
       $y$i55 = ((((125168 + (($55*72)|0)|0) + ($54<<3)|0)) + 4|0);
       $57 = HEAP32[$y$i55>>2]|0;
       $$pre$i56 = HEAP32[99817]|0;
       $58 = $$pre$i56;$i$0$i57 = 0;
       while(1) {
        $leftoffset$i58 = ((($58)) + 4|0);
        $59 = HEAPU8[$leftoffset$i58>>0]|(HEAPU8[$leftoffset$i58+1>>0]<<8);
        $conv$i59 = $59 << 16 >> 16;
        $sub$i60 = (($56) - ($conv$i59))|0;
        $topoffset$i61 = ((($58)) + 6|0);
        $60 = HEAPU8[$topoffset$i61>>0]|(HEAPU8[$topoffset$i61+1>>0]<<8);
        $conv7$i62 = $60 << 16 >> 16;
        $sub8$i63 = (($57) - ($conv7$i62))|0;
        $61 = HEAPU8[$58>>0]|(HEAPU8[$58+1>>0]<<8);
        $conv10$i65 = $61 << 16 >> 16;
        $add$i66 = (($sub$i60) + ($conv10$i65))|0;
        $height$i67 = ((($58)) + 2|0);
        $62 = HEAPU8[$height$i67>>0]|(HEAPU8[$height$i67+1>>0]<<8);
        $conv12$i68 = $62 << 16 >> 16;
        $add13$i69 = (($sub8$i63) + ($conv12$i68))|0;
        $cmp15$i70 = ($add$i66|0)<(320);
        $63 = $sub8$i63 | $sub$i60;
        $64 = ($63|0)>(-1);
        $65 = $64 & $cmp15$i70;
        $cmp21$i71 = ($add13$i69|0)<(200);
        $or$cond2$i72 = $65 & $cmp21$i71;
        $not$or$cond2$i73 = $or$cond2$i72 ^ 1;
        $inc$i74 = $not$or$cond2$i73&1;
        $i$1$i75 = (($i$0$i57) + ($inc$i74))|0;
        $cmp24$i76 = ($i$1$i75|0)!=(2);
        $or$cond3$i77 = $cmp24$i76 & $not$or$cond2$i73;
        if (!($or$cond3$i77)) {
         label = 33;
         break;
        }
        $arrayidx26$i79 = (399268 + ($i$1$i75<<2)|0);
        $66 = HEAP32[$arrayidx26$i79>>2]|0;
        $cmp27$i80 = ($66|0)==(0|0);
        if ($cmp27$i80) {
         break;
        } else {
         $58 = $66;$i$0$i57 = $i$1$i75;
        }
       }
       if ((label|0) == 33) {
        $cmp31$i82 = ($i$1$i75>>>0)<(2);
        $or$cond4$i83 = $or$cond2$i72 & $cmp31$i82;
        if ($or$cond4$i83) {
         $arrayidx42$i85 = (399268 + ($i$1$i75<<2)|0);
         $67 = HEAP32[$arrayidx42$i85>>2]|0;
         _V_DrawPatch($56,$57,$67);
         break;
        }
       }
       $add44$i87 = (($54) + 1)|0;
       HEAP32[$vararg_buffer4>>2] = $add44$i87;
       (_printf(156323,$vararg_buffer4)|0);
      }
     } while(0);
     $$pr107 = HEAP32[32140]|0;
     $cmp14 = ($$pr107|0)==(2);
     if ($cmp14) {
      label = 37;
      break;
     } else {
      break;
     }
    }
   }
   $13 = HEAP32[99810]|0;
   $14 = HEAPU8[$13>>0]|(HEAPU8[$13+1>>0]<<8);
   $conv$i = $14 << 16 >> 16;
   $sub$i = (320 - ($conv$i))|0;
   $div$i = (($sub$i|0) / 2)&-1;
   _V_DrawPatch($div$i,2,$13);
   $15 = HEAP32[99808]|0;
   $16 = HEAP32[99806]|0;
   $next$i = ((($16)) + 12|0);
   $17 = HEAP32[$next$i>>2]|0;
   $arrayidx$i5 = (($15) + ($17<<2)|0);
   $18 = HEAP32[$arrayidx$i5>>2]|0;
   $height$i = ((($18)) + 2|0);
   $19 = HEAPU8[$height$i>>0]|(HEAPU8[$height$i+1>>0]<<8);
   $conv1$i = $19 << 16 >> 16;
   $mul$i = ($conv1$i*5)|0;
   $div2$i = (($mul$i|0) / 4)&-1;
   $add$i = (($div2$i) + 2)|0;
   $20 = HEAPU8[$18>>0]|(HEAPU8[$18+1>>0]<<8);
   $conv6$i = $20 << 16 >> 16;
   $sub7$i = (320 - ($conv6$i))|0;
   $div8$i = (($sub7$i|0) / 2)&-1;
   _V_DrawPatch($div8$i,$add$i,$18);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 37) {
  $68 = HEAP32[99806]|0;
  $next15 = ((($68)) + 12|0);
  $69 = HEAP32[$next15>>2]|0;
  $cmp16 = ($69|0)==(30);
  if ($cmp16) {
   STACKTOP = sp;return;
  }
 }
 $70 = HEAP32[99810]|0;
 $71 = HEAPU8[$70>>0]|(HEAPU8[$70+1>>0]<<8);
 $conv$i92 = $71 << 16 >> 16;
 $sub$i93 = (320 - ($conv$i92))|0;
 $div$i94 = (($sub$i93|0) / 2)&-1;
 _V_DrawPatch($div$i94,2,$70);
 $72 = HEAP32[99808]|0;
 $73 = HEAP32[99806]|0;
 $next$i95 = ((($73)) + 12|0);
 $74 = HEAP32[$next$i95>>2]|0;
 $arrayidx$i96 = (($72) + ($74<<2)|0);
 $75 = HEAP32[$arrayidx$i96>>2]|0;
 $height$i97 = ((($75)) + 2|0);
 $76 = HEAPU8[$height$i97>>0]|(HEAPU8[$height$i97+1>>0]<<8);
 $conv1$i98 = $76 << 16 >> 16;
 $mul$i99 = ($conv1$i98*5)|0;
 $div2$i100 = (($mul$i99|0) / 4)&-1;
 $add$i101 = (($div2$i100) + 2)|0;
 $77 = HEAPU8[$75>>0]|(HEAPU8[$75+1>>0]<<8);
 $conv6$i103 = $77 << 16 >> 16;
 $sub7$i104 = (320 - ($conv6$i103))|0;
 $div8$i105 = (($sub7$i104|0) / 2)&-1;
 _V_DrawPatch($div8$i105,$add$i101,$75);
 STACKTOP = sp;return;
}
function _WI_initDeathmatchStats() {
 var $$pre = 0, $$pre25 = 0, $$pre26 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tobool = 0, $tobool$1 = 0, $tobool$2 = 0, $tobool$3 = 0, $tobool5$1 = 0, $tobool5$2 = 0, $tobool5$2$1 = 0;
 var $tobool5$3 = 0, $tobool5$3$1 = 0, $tobool5$3$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99812] = 0;
 HEAP32[99832] = 0;
 HEAP32[99836] = 1;
 HEAP32[99837] = 35;
 $0 = HEAP32[45416]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  $$pre = HEAP32[(181668)>>2]|0;
  $2 = $$pre;
 } else {
  HEAP32[98420] = 0;
  $1 = HEAP32[(181668)>>2]|0;
  $tobool5$1 = ($1|0)==(0);
  if (!($tobool5$1)) {
   HEAP32[(393684)>>2] = 0;
  }
  $3 = HEAP32[(181672)>>2]|0;
  $tobool5$2 = ($3|0)==(0);
  if (!($tobool5$2)) {
   HEAP32[(393688)>>2] = 0;
  }
  $4 = HEAP32[(181676)>>2]|0;
  $tobool5$3 = ($4|0)==(0);
  if (!($tobool5$3)) {
   HEAP32[(393692)>>2] = 0;
  }
  HEAP32[98436] = 0;
  $2 = $1;
 }
 $tobool$1 = ($2|0)==(0);
 if ($tobool$1) {
  $$pre25 = HEAP32[(181672)>>2]|0;
  $7 = $$pre25;
 } else {
  if (!($tobool)) {
   HEAP32[(393696)>>2] = 0;
  }
  HEAP32[(393700)>>2] = 0;
  $5 = HEAP32[(181672)>>2]|0;
  $tobool5$2$1 = ($5|0)==(0);
  if (!($tobool5$2$1)) {
   HEAP32[(393704)>>2] = 0;
  }
  $6 = HEAP32[(181676)>>2]|0;
  $tobool5$3$1 = ($6|0)==(0);
  if (!($tobool5$3$1)) {
   HEAP32[(393708)>>2] = 0;
  }
  HEAP32[(393748)>>2] = 0;
  $7 = $5;
 }
 $tobool$2 = ($7|0)==(0);
 if ($tobool$2) {
  $$pre26 = HEAP32[(181676)>>2]|0;
  $9 = $$pre26;
 } else {
  if (!($tobool)) {
   HEAP32[(393712)>>2] = 0;
  }
  if (!($tobool$1)) {
   HEAP32[(393716)>>2] = 0;
  }
  HEAP32[(393720)>>2] = 0;
  $8 = HEAP32[(181676)>>2]|0;
  $tobool5$3$2 = ($8|0)==(0);
  if (!($tobool5$3$2)) {
   HEAP32[(393724)>>2] = 0;
  }
  HEAP32[(393752)>>2] = 0;
  $9 = $8;
 }
 $tobool$3 = ($9|0)==(0);
 if ($tobool$3) {
  _WI_initAnimatedBack();
  return;
 }
 if (!($tobool)) {
  HEAP32[(393728)>>2] = 0;
 }
 if (!($tobool$1)) {
  HEAP32[(393732)>>2] = 0;
 }
 if (!($tobool$2)) {
  HEAP32[(393736)>>2] = 0;
 }
 HEAP32[(393740)>>2] = 0;
 HEAP32[(393756)>>2] = 0;
 _WI_initAnimatedBack();
 return;
}
function _WI_updateDeathmatchStats() {
 var $$pre = 0, $$pre121 = 0, $$pre122 = 0, $$pre123 = 0, $$pre124 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$1$i$2 = 0, $add$1$i$3 = 0, $add$1$i57 = 0, $add$2$i = 0, $add$2$i$1 = 0, $add$2$i$3 = 0, $add$2$i$us$3 = 0, $add$2$i65 = 0, $add$2$i65$us = 0, $add$3$i = 0, $add$3$i$1 = 0, $add$3$i$2 = 0, $add$3$i$us$1 = 0;
 var $add$3$i$us$2 = 0, $add$3$i73 = 0, $add$3$i73$us = 0, $and = 0, $and104 = 0, $arrayidx11 = 0, $arrayidx11$1 = 0, $arrayidx11$1$1 = 0, $arrayidx11$1$2 = 0, $arrayidx11$1$3 = 0, $arrayidx11$1106 = 0, $arrayidx11$2 = 0, $arrayidx11$2$1 = 0, $arrayidx11$2$2 = 0, $arrayidx11$2$3 = 0, $arrayidx11$2111 = 0, $arrayidx11$3 = 0, $arrayidx11$3$1 = 0, $arrayidx11$3$2 = 0, $arrayidx11$3$3 = 0;
 var $arrayidx11$3116 = 0, $arrayidx11$us$1$1 = 0, $arrayidx11$us$1$2 = 0, $arrayidx11$us$1$3 = 0, $arrayidx11$us$2$1 = 0, $arrayidx11$us$2$2 = 0, $arrayidx11$us$2$3 = 0, $arrayidx11$us$3$1 = 0, $arrayidx11$us$3$2 = 0, $arrayidx11$us$3$3 = 0, $arrayidx28$phi$trans$insert = 0, $arrayidx28$us$phi$trans$insert = 0, $arrayidx38 = 0, $arrayidx38$1 = 0, $arrayidx38$2 = 0, $arrayidx38$3 = 0, $arrayidx38$us$1 = 0, $arrayidx38$us$2 = 0, $arrayidx38$us$3 = 0, $arrayidx4$1$i = 0;
 var $arrayidx4$1$i$2 = 0, $arrayidx4$1$i$3 = 0, $arrayidx4$1$i$us$2 = 0, $arrayidx4$1$i$us$3 = 0, $arrayidx4$1$i56 = 0, $arrayidx4$1$i56$us = 0, $arrayidx4$2$i = 0, $arrayidx4$2$i$1 = 0, $arrayidx4$2$i$3 = 0, $arrayidx4$2$i$us$1 = 0, $arrayidx4$2$i$us$3 = 0, $arrayidx4$2$i64 = 0, $arrayidx4$2$i64$us = 0, $arrayidx4$3$i = 0, $arrayidx4$3$i$1 = 0, $arrayidx4$3$i$2 = 0, $arrayidx4$3$i$us$1 = 0, $arrayidx4$3$i$us$2 = 0, $arrayidx4$3$i72 = 0, $arrayidx4$3$i72$us = 0;
 var $arrayidx4$i$1 = 0, $arrayidx4$i$2 = 0, $arrayidx4$i$3 = 0, $arrayidx4$i49 = 0, $arrayidx41 = 0, $arrayidx41$1 = 0, $arrayidx41$2 = 0, $arrayidx41$3 = 0, $arrayidx41$us$1 = 0, $arrayidx41$us$2 = 0, $arrayidx41$us$3 = 0, $arrayidx7$i = 0, $arrayidx7$i$1 = 0, $arrayidx7$i$2 = 0, $arrayidx7$i$3$phi$trans$insert = 0, $arrayidx7$i$us$1 = 0, $arrayidx7$i$us$2 = 0, $arrayidx7$i$us$3$phi$trans$insert = 0, $arrayidx7$i76 = 0, $arrayidx7$i76$us = 0;
 var $arrayidx74 = 0, $arrayidx74$us = 0, $cmp = 0, $cmp1$1$i53 = 0, $cmp1$1$i53$us = 0, $cmp1$2$i61 = 0, $cmp1$2$i61$us = 0, $cmp1$3$i69 = 0, $cmp1$3$i69$us = 0, $cmp1$i47 = 0, $cmp42 = 0, $cmp42$1 = 0, $cmp42$2 = 0, $cmp42$3 = 0, $cmp42$us$1 = 0, $cmp42$us$2 = 0, $cmp42$us$3 = 0, $cmp98 = 0, $dec107 = 0, $exitcond = 0;
 var $exitcond120 = 0, $frags$1$1$i = 0, $frags$1$1$i$2 = 0, $frags$1$1$i$3 = 0, $frags$1$1$i$us$2 = 0, $frags$1$1$i$us$3 = 0, $frags$1$1$i59 = 0, $frags$1$1$i59$us = 0, $frags$1$2$i = 0, $frags$1$2$i$1 = 0, $frags$1$2$i$3 = 0, $frags$1$2$i$us$1 = 0, $frags$1$2$i$us$3 = 0, $frags$1$2$i67 = 0, $frags$1$2$i67$us = 0, $frags$1$3$i = 0, $frags$1$3$i$1 = 0, $frags$1$3$i$2 = 0, $frags$1$3$i$us$1 = 0, $frags$1$3$i$us$2 = 0;
 var $frags$1$3$i75 = 0, $frags$1$3$i75$us = 0, $frags$1$i51 = 0, $i$184 = 0, $i$184$us = 0, $inc110 = 0, $inc87 = 0, $inc87$us = 0, $inc91 = 0, $or$cond = 0, $or$cond$1$i54 = 0, $or$cond$1$i54$us = 0, $or$cond$2$i62 = 0, $or$cond$2$i62$us = 0, $or$cond$3$i70 = 0, $or$cond$3$i70$us = 0, $spec$select = 0, $spec$select$1 = 0, $spec$select$2 = 0, $spec$select$3 = 0;
 var $spec$select$us$1 = 0, $spec$select$us$2 = 0, $spec$select$us$3 = 0, $spec$select45 = 0, $spec$select45$us = 0, $spec$store$select = 0, $spec$store$select$us = 0, $stillticking$0$lcssa = 0, $stillticking$086 = 0, $stillticking$086$us = 0, $stillticking$2 = 0, $stillticking$2$1 = 0, $stillticking$2$2 = 0, $stillticking$2$3 = 0, $stillticking$2$us$1 = 0, $stillticking$2$us$2 = 0, $stillticking$2$us$3 = 0, $stillticking$3 = 0, $stillticking$3$us = 0, $storemerge42 = 0;
 var $storemerge42$1 = 0, $storemerge42$2 = 0, $storemerge42$3 = 0, $storemerge42$us$1 = 0, $storemerge42$us$2 = 0, $storemerge42$us$3 = 0, $storemerge44 = 0, $storemerge44$1 = 0, $storemerge44$2 = 0, $storemerge44$3 = 0, $storemerge44$us$1 = 0, $storemerge44$us$2 = 0, $storemerge44$us$3 = 0, $sub$i = 0, $sub$i$1 = 0, $sub$i$2 = 0, $sub$i$3 = 0, $sub$i$us$1 = 0, $sub$i$us$2 = 0, $sub$i$us$3 = 0;
 var $sub$i77 = 0, $sub$i77$us = 0, $tobool = 0, $tobool$1$i = 0, $tobool$1$i52 = 0, $tobool$2$i = 0, $tobool$2$i60 = 0, $tobool$3$i = 0, $tobool$3$i68 = 0, $tobool$i = 0, $tobool$i46 = 0, $tobool105 = 0, $tobool108 = 0, $tobool22 = 0, $tobool29 = 0, $tobool29$us = 0, $tobool89 = 0, $tobool96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _WI_updateAnimatedBack();
 $0 = HEAP32[99832]|0;
 $tobool = ($0|0)!=(0);
 $1 = HEAP32[99836]|0;
 $cmp = ($1|0)!=(4);
 $or$cond = $tobool & $cmp;
 L1: do {
  if ($or$cond) {
   HEAP32[99832] = 0;
   $2 = HEAP32[99835]|0;
   $3 = HEAP32[45416]|0;
   $tobool$i = ($3|0)==(0);
   $4 = HEAP32[(181668)>>2]|0;
   $tobool$1$i = ($4|0)==(0);
   $5 = HEAP32[(181672)>>2]|0;
   $tobool$2$i = ($5|0)==(0);
   $6 = HEAP32[(181676)>>2]|0;
   $tobool$3$i = ($6|0)==(0);
   if ($tobool$i) {
    if (!($tobool$1$i)) {
     $arrayidx11$us$1$1 = ((($2)) + 64|0);
     $43 = HEAP32[$arrayidx11$us$1$1>>2]|0;
     HEAP32[(393700)>>2] = $43;
     if (!($tobool$2$i)) {
      $arrayidx11$us$2$1 = ((($2)) + 68|0);
      $44 = HEAP32[$arrayidx11$us$2$1>>2]|0;
      HEAP32[(393704)>>2] = $44;
     }
     if (!($tobool$3$i)) {
      $arrayidx11$us$3$1 = ((($2)) + 72|0);
      $45 = HEAP32[$arrayidx11$us$3$1>>2]|0;
      HEAP32[(393708)>>2] = $45;
     }
     if ($tobool$2$i) {
      $frags$1$2$i$us$1 = 0;
     } else {
      $arrayidx4$2$i$us$1 = ((($2)) + 68|0);
      $46 = HEAP32[$arrayidx4$2$i$us$1>>2]|0;
      $frags$1$2$i$us$1 = $46;
     }
     if ($tobool$3$i) {
      $frags$1$3$i$us$1 = $frags$1$2$i$us$1;
     } else {
      $arrayidx4$3$i$us$1 = ((($2)) + 72|0);
      $47 = HEAP32[$arrayidx4$3$i$us$1>>2]|0;
      $add$3$i$us$1 = (($47) + ($frags$1$2$i$us$1))|0;
      $frags$1$3$i$us$1 = $add$3$i$us$1;
     }
     $arrayidx7$i$us$1 = ((($2)) + 64|0);
     $48 = HEAP32[$arrayidx7$i$us$1>>2]|0;
     $sub$i$us$1 = (($frags$1$3$i$us$1) - ($48))|0;
     HEAP32[(393748)>>2] = $sub$i$us$1;
    }
    if (!($tobool$2$i)) {
     if (!($tobool$1$i)) {
      $arrayidx11$us$1$2 = ((($2)) + 104|0);
      $49 = HEAP32[$arrayidx11$us$1$2>>2]|0;
      HEAP32[(393716)>>2] = $49;
     }
     $arrayidx11$us$2$2 = ((($2)) + 108|0);
     $50 = HEAP32[$arrayidx11$us$2$2>>2]|0;
     HEAP32[(393720)>>2] = $50;
     if (!($tobool$3$i)) {
      $arrayidx11$us$3$2 = ((($2)) + 112|0);
      $51 = HEAP32[$arrayidx11$us$3$2>>2]|0;
      HEAP32[(393724)>>2] = $51;
     }
     if ($tobool$1$i) {
      $frags$1$1$i$us$2 = 0;
     } else {
      $arrayidx4$1$i$us$2 = ((($2)) + 104|0);
      $52 = HEAP32[$arrayidx4$1$i$us$2>>2]|0;
      $frags$1$1$i$us$2 = $52;
     }
     if ($tobool$3$i) {
      $frags$1$3$i$us$2 = $frags$1$1$i$us$2;
     } else {
      $arrayidx4$3$i$us$2 = ((($2)) + 112|0);
      $53 = HEAP32[$arrayidx4$3$i$us$2>>2]|0;
      $add$3$i$us$2 = (($53) + ($frags$1$1$i$us$2))|0;
      $frags$1$3$i$us$2 = $add$3$i$us$2;
     }
     $arrayidx7$i$us$2 = ((($2)) + 108|0);
     $54 = HEAP32[$arrayidx7$i$us$2>>2]|0;
     $sub$i$us$2 = (($frags$1$3$i$us$2) - ($54))|0;
     HEAP32[(393752)>>2] = $sub$i$us$2;
    }
    if (!($tobool$3$i)) {
     if (!($tobool$1$i)) {
      $arrayidx11$us$1$3 = ((($2)) + 144|0);
      $55 = HEAP32[$arrayidx11$us$1$3>>2]|0;
      HEAP32[(393732)>>2] = $55;
     }
     if (!($tobool$2$i)) {
      $arrayidx11$us$2$3 = ((($2)) + 148|0);
      $56 = HEAP32[$arrayidx11$us$2$3>>2]|0;
      HEAP32[(393736)>>2] = $56;
     }
     $arrayidx11$us$3$3 = ((($2)) + 152|0);
     $57 = HEAP32[$arrayidx11$us$3$3>>2]|0;
     HEAP32[(393740)>>2] = $57;
     if ($tobool$1$i) {
      $frags$1$1$i$us$3 = 0;
     } else {
      $arrayidx4$1$i$us$3 = ((($2)) + 144|0);
      $58 = HEAP32[$arrayidx4$1$i$us$3>>2]|0;
      $frags$1$1$i$us$3 = $58;
     }
     if ($tobool$2$i) {
      $frags$1$2$i$us$3 = $frags$1$1$i$us$3;
     } else {
      $arrayidx4$2$i$us$3 = ((($2)) + 148|0);
      $59 = HEAP32[$arrayidx4$2$i$us$3>>2]|0;
      $add$2$i$us$3 = (($59) + ($frags$1$1$i$us$3))|0;
      $frags$1$2$i$us$3 = $add$2$i$us$3;
     }
     $arrayidx7$i$us$3$phi$trans$insert = ((($2)) + 152|0);
     $$pre123 = HEAP32[$arrayidx7$i$us$3$phi$trans$insert>>2]|0;
     $sub$i$us$3 = (($frags$1$2$i$us$3) - ($$pre123))|0;
     HEAP32[(393756)>>2] = $sub$i$us$3;
    }
   } else {
    $arrayidx11 = ((($2)) + 20|0);
    $7 = HEAP32[$arrayidx11>>2]|0;
    HEAP32[98420] = $7;
    if (!($tobool$1$i)) {
     $arrayidx11$1 = ((($2)) + 24|0);
     $60 = HEAP32[$arrayidx11$1>>2]|0;
     HEAP32[(393684)>>2] = $60;
    }
    if (!($tobool$2$i)) {
     $arrayidx11$2 = ((($2)) + 28|0);
     $61 = HEAP32[$arrayidx11$2>>2]|0;
     HEAP32[(393688)>>2] = $61;
    }
    if (!($tobool$3$i)) {
     $arrayidx11$3 = ((($2)) + 32|0);
     $62 = HEAP32[$arrayidx11$3>>2]|0;
     HEAP32[(393692)>>2] = $62;
    }
    if ($tobool$1$i) {
     $frags$1$1$i = 0;
    } else {
     $arrayidx4$1$i = ((($2)) + 24|0);
     $8 = HEAP32[$arrayidx4$1$i>>2]|0;
     $frags$1$1$i = $8;
    }
    if ($tobool$2$i) {
     $frags$1$2$i = $frags$1$1$i;
    } else {
     $arrayidx4$2$i = ((($2)) + 28|0);
     $9 = HEAP32[$arrayidx4$2$i>>2]|0;
     $add$2$i = (($9) + ($frags$1$1$i))|0;
     $frags$1$2$i = $add$2$i;
    }
    if ($tobool$3$i) {
     $frags$1$3$i = $frags$1$2$i;
    } else {
     $arrayidx4$3$i = ((($2)) + 32|0);
     $10 = HEAP32[$arrayidx4$3$i>>2]|0;
     $add$3$i = (($10) + ($frags$1$2$i))|0;
     $frags$1$3$i = $add$3$i;
    }
    $arrayidx7$i = ((($2)) + 20|0);
    $11 = HEAP32[$arrayidx7$i>>2]|0;
    $sub$i = (($frags$1$3$i) - ($11))|0;
    HEAP32[98436] = $sub$i;
    if (!($tobool$1$i)) {
     $arrayidx11$1106 = ((($2)) + 60|0);
     $63 = HEAP32[$arrayidx11$1106>>2]|0;
     HEAP32[(393696)>>2] = $63;
     $arrayidx11$1$1 = ((($2)) + 64|0);
     $64 = HEAP32[$arrayidx11$1$1>>2]|0;
     HEAP32[(393700)>>2] = $64;
     if (!($tobool$2$i)) {
      $arrayidx11$2$1 = ((($2)) + 68|0);
      $65 = HEAP32[$arrayidx11$2$1>>2]|0;
      HEAP32[(393704)>>2] = $65;
     }
     if (!($tobool$3$i)) {
      $arrayidx11$3$1 = ((($2)) + 72|0);
      $66 = HEAP32[$arrayidx11$3$1>>2]|0;
      HEAP32[(393708)>>2] = $66;
     }
     $arrayidx4$i$1 = ((($2)) + 60|0);
     $67 = HEAP32[$arrayidx4$i$1>>2]|0;
     if ($tobool$2$i) {
      $frags$1$2$i$1 = $67;
     } else {
      $arrayidx4$2$i$1 = ((($2)) + 68|0);
      $68 = HEAP32[$arrayidx4$2$i$1>>2]|0;
      $add$2$i$1 = (($68) + ($67))|0;
      $frags$1$2$i$1 = $add$2$i$1;
     }
     if ($tobool$3$i) {
      $frags$1$3$i$1 = $frags$1$2$i$1;
     } else {
      $arrayidx4$3$i$1 = ((($2)) + 72|0);
      $69 = HEAP32[$arrayidx4$3$i$1>>2]|0;
      $add$3$i$1 = (($69) + ($frags$1$2$i$1))|0;
      $frags$1$3$i$1 = $add$3$i$1;
     }
     $arrayidx7$i$1 = ((($2)) + 64|0);
     $70 = HEAP32[$arrayidx7$i$1>>2]|0;
     $sub$i$1 = (($frags$1$3$i$1) - ($70))|0;
     HEAP32[(393748)>>2] = $sub$i$1;
    }
    if (!($tobool$2$i)) {
     $arrayidx11$2111 = ((($2)) + 100|0);
     $71 = HEAP32[$arrayidx11$2111>>2]|0;
     HEAP32[(393712)>>2] = $71;
     if (!($tobool$1$i)) {
      $arrayidx11$1$2 = ((($2)) + 104|0);
      $72 = HEAP32[$arrayidx11$1$2>>2]|0;
      HEAP32[(393716)>>2] = $72;
     }
     $arrayidx11$2$2 = ((($2)) + 108|0);
     $73 = HEAP32[$arrayidx11$2$2>>2]|0;
     HEAP32[(393720)>>2] = $73;
     if (!($tobool$3$i)) {
      $arrayidx11$3$2 = ((($2)) + 112|0);
      $74 = HEAP32[$arrayidx11$3$2>>2]|0;
      HEAP32[(393724)>>2] = $74;
     }
     $arrayidx4$i$2 = ((($2)) + 100|0);
     $75 = HEAP32[$arrayidx4$i$2>>2]|0;
     if ($tobool$1$i) {
      $frags$1$1$i$2 = $75;
     } else {
      $arrayidx4$1$i$2 = ((($2)) + 104|0);
      $76 = HEAP32[$arrayidx4$1$i$2>>2]|0;
      $add$1$i$2 = (($76) + ($75))|0;
      $frags$1$1$i$2 = $add$1$i$2;
     }
     if ($tobool$3$i) {
      $frags$1$3$i$2 = $frags$1$1$i$2;
     } else {
      $arrayidx4$3$i$2 = ((($2)) + 112|0);
      $77 = HEAP32[$arrayidx4$3$i$2>>2]|0;
      $add$3$i$2 = (($77) + ($frags$1$1$i$2))|0;
      $frags$1$3$i$2 = $add$3$i$2;
     }
     $arrayidx7$i$2 = ((($2)) + 108|0);
     $78 = HEAP32[$arrayidx7$i$2>>2]|0;
     $sub$i$2 = (($frags$1$3$i$2) - ($78))|0;
     HEAP32[(393752)>>2] = $sub$i$2;
    }
    if (!($tobool$3$i)) {
     $arrayidx11$3116 = ((($2)) + 140|0);
     $79 = HEAP32[$arrayidx11$3116>>2]|0;
     HEAP32[(393728)>>2] = $79;
     if (!($tobool$1$i)) {
      $arrayidx11$1$3 = ((($2)) + 144|0);
      $80 = HEAP32[$arrayidx11$1$3>>2]|0;
      HEAP32[(393732)>>2] = $80;
     }
     if (!($tobool$2$i)) {
      $arrayidx11$2$3 = ((($2)) + 148|0);
      $81 = HEAP32[$arrayidx11$2$3>>2]|0;
      HEAP32[(393736)>>2] = $81;
     }
     $arrayidx11$3$3 = ((($2)) + 152|0);
     $82 = HEAP32[$arrayidx11$3$3>>2]|0;
     HEAP32[(393740)>>2] = $82;
     $arrayidx4$i$3 = ((($2)) + 140|0);
     $83 = HEAP32[$arrayidx4$i$3>>2]|0;
     if ($tobool$1$i) {
      $frags$1$1$i$3 = $83;
     } else {
      $arrayidx4$1$i$3 = ((($2)) + 144|0);
      $84 = HEAP32[$arrayidx4$1$i$3>>2]|0;
      $add$1$i$3 = (($84) + ($83))|0;
      $frags$1$1$i$3 = $add$1$i$3;
     }
     if ($tobool$2$i) {
      $frags$1$2$i$3 = $frags$1$1$i$3;
     } else {
      $arrayidx4$2$i$3 = ((($2)) + 148|0);
      $85 = HEAP32[$arrayidx4$2$i$3>>2]|0;
      $add$2$i$3 = (($85) + ($frags$1$1$i$3))|0;
      $frags$1$2$i$3 = $add$2$i$3;
     }
     $arrayidx7$i$3$phi$trans$insert = ((($2)) + 152|0);
     $$pre122 = HEAP32[$arrayidx7$i$3$phi$trans$insert>>2]|0;
     $sub$i$3 = (($frags$1$2$i$3) - ($$pre122))|0;
     HEAP32[(393756)>>2] = $sub$i$3;
    }
   }
   _S_StartSound(0,82);
   HEAP32[99836] = 4;
   $$pre124 = HEAP32[99832]|0;
   $40 = $$pre124;
  } else {
   switch ($1|0) {
   case 4:  {
    $40 = $0;
    break L1;
    break;
   }
   case 2:  {
    break;
   }
   default: {
    $and104 = $1 & 1;
    $tobool105 = ($and104|0)==(0);
    if ($tobool105) {
     return;
    }
    $42 = HEAP32[99837]|0;
    $dec107 = (($42) + -1)|0;
    HEAP32[99837] = $dec107;
    $tobool108 = ($dec107|0)==(0);
    if (!($tobool108)) {
     return;
    }
    $inc110 = (($1) + 1)|0;
    HEAP32[99836] = $inc110;
    HEAP32[99837] = 35;
    return;
   }
   }
   $12 = HEAP32[99811]|0;
   $and = $12 & 3;
   $tobool22 = ($and|0)==(0);
   if ($tobool22) {
    _S_StartSound(0,1);
   }
   $13 = HEAP32[99835]|0;
   $14 = HEAP32[45416]|0;
   $tobool$i46 = ($14|0)==(0);
   $15 = HEAP32[(181668)>>2]|0;
   $tobool$1$i52 = ($15|0)==(0);
   $16 = HEAP32[(181672)>>2]|0;
   $tobool$2$i60 = ($16|0)==(0);
   $17 = HEAP32[(181676)>>2]|0;
   $tobool$3$i68 = ($17|0)==(0);
   L125: do {
    if ($tobool$i46) {
     $18 = 0;$i$184$us = 0;$stillticking$086$us = 0;
     while(1) {
      $tobool29$us = ($18|0)==(0);
      if ($tobool29$us) {
       $stillticking$3$us = $stillticking$086$us;
      } else {
       if ($tobool$1$i52) {
        $stillticking$2$us$1 = $stillticking$086$us;
       } else {
        $arrayidx38$us$1 = (((393680 + ($i$184$us<<4)|0)) + 4|0);
        $86 = HEAP32[$arrayidx38$us$1>>2]|0;
        $arrayidx41$us$1 = (((($13) + (($i$184$us*40)|0)|0)) + 24|0);
        $87 = HEAP32[$arrayidx41$us$1>>2]|0;
        $cmp42$us$1 = ($86|0)==($87|0);
        if ($cmp42$us$1) {
         $stillticking$2$us$1 = $stillticking$086$us;
        } else {
         $88 = $87 >> 31;
         $89 = $88 | 1;
         $storemerge42$us$1 = (($89) + ($86))|0;
         $90 = ($storemerge42$us$1|0)<(99);
         $spec$select$us$1 = $90 ? $storemerge42$us$1 : 99;
         $91 = ($spec$select$us$1|0)>(-99);
         $storemerge44$us$1 = $91 ? $spec$select$us$1 : -99;
         HEAP32[$arrayidx38$us$1>>2] = $storemerge44$us$1;
         $stillticking$2$us$1 = 1;
        }
       }
       if ($tobool$2$i60) {
        $stillticking$2$us$2 = $stillticking$2$us$1;
       } else {
        $arrayidx38$us$2 = (((393680 + ($i$184$us<<4)|0)) + 8|0);
        $92 = HEAP32[$arrayidx38$us$2>>2]|0;
        $arrayidx41$us$2 = (((($13) + (($i$184$us*40)|0)|0)) + 28|0);
        $93 = HEAP32[$arrayidx41$us$2>>2]|0;
        $cmp42$us$2 = ($92|0)==($93|0);
        if ($cmp42$us$2) {
         $stillticking$2$us$2 = $stillticking$2$us$1;
        } else {
         $94 = $93 >> 31;
         $95 = $94 | 1;
         $storemerge42$us$2 = (($95) + ($92))|0;
         $96 = ($storemerge42$us$2|0)<(99);
         $spec$select$us$2 = $96 ? $storemerge42$us$2 : 99;
         $97 = ($spec$select$us$2|0)>(-99);
         $storemerge44$us$2 = $97 ? $spec$select$us$2 : -99;
         HEAP32[$arrayidx38$us$2>>2] = $storemerge44$us$2;
         $stillticking$2$us$2 = 1;
        }
       }
       if ($tobool$3$i68) {
        $stillticking$2$us$3 = $stillticking$2$us$2;
       } else {
        $arrayidx38$us$3 = (((393680 + ($i$184$us<<4)|0)) + 12|0);
        $98 = HEAP32[$arrayidx38$us$3>>2]|0;
        $arrayidx41$us$3 = (((($13) + (($i$184$us*40)|0)|0)) + 32|0);
        $99 = HEAP32[$arrayidx41$us$3>>2]|0;
        $cmp42$us$3 = ($98|0)==($99|0);
        if ($cmp42$us$3) {
         $stillticking$2$us$3 = $stillticking$2$us$2;
        } else {
         $100 = $99 >> 31;
         $101 = $100 | 1;
         $storemerge42$us$3 = (($101) + ($98))|0;
         $102 = ($storemerge42$us$3|0)<(99);
         $spec$select$us$3 = $102 ? $storemerge42$us$3 : 99;
         $103 = ($spec$select$us$3|0)>(-99);
         $storemerge44$us$3 = $103 ? $spec$select$us$3 : -99;
         HEAP32[$arrayidx38$us$3>>2] = $storemerge44$us$3;
         $stillticking$2$us$3 = 1;
        }
       }
       $cmp1$1$i53$us = ($i$184$us|0)==(1);
       $or$cond$1$i54$us = $cmp1$1$i53$us | $tobool$1$i52;
       if ($or$cond$1$i54$us) {
        $frags$1$1$i59$us = 0;
       } else {
        $arrayidx4$1$i56$us = (((($13) + (($i$184$us*40)|0)|0)) + 24|0);
        $19 = HEAP32[$arrayidx4$1$i56$us>>2]|0;
        $frags$1$1$i59$us = $19;
       }
       $cmp1$2$i61$us = ($i$184$us|0)==(2);
       $or$cond$2$i62$us = $cmp1$2$i61$us | $tobool$2$i60;
       if ($or$cond$2$i62$us) {
        $frags$1$2$i67$us = $frags$1$1$i59$us;
       } else {
        $arrayidx4$2$i64$us = (((($13) + (($i$184$us*40)|0)|0)) + 28|0);
        $20 = HEAP32[$arrayidx4$2$i64$us>>2]|0;
        $add$2$i65$us = (($20) + ($frags$1$1$i59$us))|0;
        $frags$1$2$i67$us = $add$2$i65$us;
       }
       $cmp1$3$i69$us = ($i$184$us|0)==(3);
       $or$cond$3$i70$us = $cmp1$3$i69$us | $tobool$3$i68;
       if ($or$cond$3$i70$us) {
        $frags$1$3$i75$us = $frags$1$2$i67$us;
       } else {
        $arrayidx4$3$i72$us = (((($13) + (($i$184$us*40)|0)|0)) + 32|0);
        $21 = HEAP32[$arrayidx4$3$i72$us>>2]|0;
        $add$3$i73$us = (($21) + ($frags$1$2$i67$us))|0;
        $frags$1$3$i75$us = $add$3$i73$us;
       }
       $arrayidx7$i76$us = ((((($13) + (($i$184$us*40)|0)|0)) + 20|0) + ($i$184$us<<2)|0);
       $22 = HEAP32[$arrayidx7$i76$us>>2]|0;
       $sub$i77$us = (($frags$1$3$i75$us) - ($22))|0;
       $arrayidx74$us = (393744 + ($i$184$us<<2)|0);
       $23 = ($sub$i77$us|0)<(99);
       $spec$select45$us = $23 ? $sub$i77$us : 99;
       $24 = ($spec$select45$us|0)>(-99);
       $spec$store$select$us = $24 ? $spec$select45$us : -99;
       HEAP32[$arrayidx74$us>>2] = $spec$store$select$us;
       $stillticking$3$us = $stillticking$2$us$3;
      }
      $inc87$us = (($i$184$us) + 1)|0;
      $exitcond = ($inc87$us|0)==(4);
      if ($exitcond) {
       $stillticking$0$lcssa = $stillticking$3$us;
       break L125;
      }
      $arrayidx28$us$phi$trans$insert = (181664 + ($inc87$us<<2)|0);
      $$pre121 = HEAP32[$arrayidx28$us$phi$trans$insert>>2]|0;
      $18 = $$pre121;$i$184$us = $inc87$us;$stillticking$086$us = $stillticking$3$us;
     }
    } else {
     $25 = $14;$i$184 = 0;$stillticking$086 = 0;
     while(1) {
      $tobool29 = ($25|0)==(0);
      if ($tobool29) {
       $stillticking$3 = $stillticking$086;
      } else {
       $arrayidx38 = (393680 + ($i$184<<4)|0);
       $26 = HEAP32[$arrayidx38>>2]|0;
       $arrayidx41 = (((($13) + (($i$184*40)|0)|0)) + 20|0);
       $27 = HEAP32[$arrayidx41>>2]|0;
       $cmp42 = ($26|0)==($27|0);
       if ($cmp42) {
        $stillticking$2 = $stillticking$086;
       } else {
        $28 = $27 >> 31;
        $29 = $28 | 1;
        $storemerge42 = (($29) + ($26))|0;
        $30 = ($storemerge42|0)<(99);
        $spec$select = $30 ? $storemerge42 : 99;
        $31 = ($spec$select|0)>(-99);
        $storemerge44 = $31 ? $spec$select : -99;
        HEAP32[$arrayidx38>>2] = $storemerge44;
        $stillticking$2 = 1;
       }
       if ($tobool$1$i52) {
        $stillticking$2$1 = $stillticking$2;
       } else {
        $arrayidx38$1 = (((393680 + ($i$184<<4)|0)) + 4|0);
        $104 = HEAP32[$arrayidx38$1>>2]|0;
        $arrayidx41$1 = (((($13) + (($i$184*40)|0)|0)) + 24|0);
        $105 = HEAP32[$arrayidx41$1>>2]|0;
        $cmp42$1 = ($104|0)==($105|0);
        if ($cmp42$1) {
         $stillticking$2$1 = $stillticking$2;
        } else {
         $106 = $105 >> 31;
         $107 = $106 | 1;
         $storemerge42$1 = (($107) + ($104))|0;
         $108 = ($storemerge42$1|0)<(99);
         $spec$select$1 = $108 ? $storemerge42$1 : 99;
         $109 = ($spec$select$1|0)>(-99);
         $storemerge44$1 = $109 ? $spec$select$1 : -99;
         HEAP32[$arrayidx38$1>>2] = $storemerge44$1;
         $stillticking$2$1 = 1;
        }
       }
       if ($tobool$2$i60) {
        $stillticking$2$2 = $stillticking$2$1;
       } else {
        $arrayidx38$2 = (((393680 + ($i$184<<4)|0)) + 8|0);
        $110 = HEAP32[$arrayidx38$2>>2]|0;
        $arrayidx41$2 = (((($13) + (($i$184*40)|0)|0)) + 28|0);
        $111 = HEAP32[$arrayidx41$2>>2]|0;
        $cmp42$2 = ($110|0)==($111|0);
        if ($cmp42$2) {
         $stillticking$2$2 = $stillticking$2$1;
        } else {
         $112 = $111 >> 31;
         $113 = $112 | 1;
         $storemerge42$2 = (($113) + ($110))|0;
         $114 = ($storemerge42$2|0)<(99);
         $spec$select$2 = $114 ? $storemerge42$2 : 99;
         $115 = ($spec$select$2|0)>(-99);
         $storemerge44$2 = $115 ? $spec$select$2 : -99;
         HEAP32[$arrayidx38$2>>2] = $storemerge44$2;
         $stillticking$2$2 = 1;
        }
       }
       if ($tobool$3$i68) {
        $stillticking$2$3 = $stillticking$2$2;
       } else {
        $arrayidx38$3 = (((393680 + ($i$184<<4)|0)) + 12|0);
        $116 = HEAP32[$arrayidx38$3>>2]|0;
        $arrayidx41$3 = (((($13) + (($i$184*40)|0)|0)) + 32|0);
        $117 = HEAP32[$arrayidx41$3>>2]|0;
        $cmp42$3 = ($116|0)==($117|0);
        if ($cmp42$3) {
         $stillticking$2$3 = $stillticking$2$2;
        } else {
         $118 = $117 >> 31;
         $119 = $118 | 1;
         $storemerge42$3 = (($119) + ($116))|0;
         $120 = ($storemerge42$3|0)<(99);
         $spec$select$3 = $120 ? $storemerge42$3 : 99;
         $121 = ($spec$select$3|0)>(-99);
         $storemerge44$3 = $121 ? $spec$select$3 : -99;
         HEAP32[$arrayidx38$3>>2] = $storemerge44$3;
         $stillticking$2$3 = 1;
        }
       }
       $cmp1$i47 = ($i$184|0)==(0);
       if ($cmp1$i47) {
        $frags$1$i51 = 0;
       } else {
        $arrayidx4$i49 = (((($13) + (($i$184*40)|0)|0)) + 20|0);
        $32 = HEAP32[$arrayidx4$i49>>2]|0;
        $frags$1$i51 = $32;
       }
       $cmp1$1$i53 = ($i$184|0)==(1);
       $or$cond$1$i54 = $cmp1$1$i53 | $tobool$1$i52;
       if ($or$cond$1$i54) {
        $frags$1$1$i59 = $frags$1$i51;
       } else {
        $arrayidx4$1$i56 = (((($13) + (($i$184*40)|0)|0)) + 24|0);
        $33 = HEAP32[$arrayidx4$1$i56>>2]|0;
        $add$1$i57 = (($33) + ($frags$1$i51))|0;
        $frags$1$1$i59 = $add$1$i57;
       }
       $cmp1$2$i61 = ($i$184|0)==(2);
       $or$cond$2$i62 = $cmp1$2$i61 | $tobool$2$i60;
       if ($or$cond$2$i62) {
        $frags$1$2$i67 = $frags$1$1$i59;
       } else {
        $arrayidx4$2$i64 = (((($13) + (($i$184*40)|0)|0)) + 28|0);
        $34 = HEAP32[$arrayidx4$2$i64>>2]|0;
        $add$2$i65 = (($34) + ($frags$1$1$i59))|0;
        $frags$1$2$i67 = $add$2$i65;
       }
       $cmp1$3$i69 = ($i$184|0)==(3);
       $or$cond$3$i70 = $cmp1$3$i69 | $tobool$3$i68;
       if ($or$cond$3$i70) {
        $frags$1$3$i75 = $frags$1$2$i67;
       } else {
        $arrayidx4$3$i72 = (((($13) + (($i$184*40)|0)|0)) + 32|0);
        $35 = HEAP32[$arrayidx4$3$i72>>2]|0;
        $add$3$i73 = (($35) + ($frags$1$2$i67))|0;
        $frags$1$3$i75 = $add$3$i73;
       }
       $arrayidx7$i76 = ((((($13) + (($i$184*40)|0)|0)) + 20|0) + ($i$184<<2)|0);
       $36 = HEAP32[$arrayidx7$i76>>2]|0;
       $sub$i77 = (($frags$1$3$i75) - ($36))|0;
       $arrayidx74 = (393744 + ($i$184<<2)|0);
       $37 = ($sub$i77|0)<(99);
       $spec$select45 = $37 ? $sub$i77 : 99;
       $38 = ($spec$select45|0)>(-99);
       $spec$store$select = $38 ? $spec$select45 : -99;
       HEAP32[$arrayidx74>>2] = $spec$store$select;
       $stillticking$3 = $stillticking$2$3;
      }
      $inc87 = (($i$184) + 1)|0;
      $exitcond120 = ($inc87|0)==(4);
      if ($exitcond120) {
       $stillticking$0$lcssa = $stillticking$3;
       break L125;
      }
      $arrayidx28$phi$trans$insert = (181664 + ($inc87<<2)|0);
      $$pre = HEAP32[$arrayidx28$phi$trans$insert>>2]|0;
      $25 = $$pre;$i$184 = $inc87;$stillticking$086 = $stillticking$3;
     }
    }
   } while(0);
   $tobool89 = ($stillticking$0$lcssa|0)==(0);
   if (!($tobool89)) {
    return;
   }
   _S_StartSound(0,82);
   $39 = HEAP32[99836]|0;
   $inc91 = (($39) + 1)|0;
   HEAP32[99836] = $inc91;
   return;
  }
 } while(0);
 $tobool96 = ($40|0)==(0);
 if ($tobool96) {
  return;
 }
 _S_StartSound(0,31);
 $41 = HEAP32[32140]|0;
 $cmp98 = ($41|0)==(2);
 if ($cmp98) {
  HEAP32[99812] = -1;
  HEAP32[99832] = 0;
  HEAP32[99833] = 10;
  return;
 } else {
  HEAP32[99812] = 1;
  HEAP32[99832] = 0;
  HEAP32[99833] = 140;
  _WI_initAnimatedBack();
  return;
 }
}
function _WI_drawDeathmatchStats() {
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $add45 = 0, $add45$1 = 0, $add45$2 = 0, $add45$3 = 0, $add53 = 0, $add57 = 0, $arrayidx$i = 0, $arrayidx$i34 = 0, $arrayidx$i34$1 = 0, $arrayidx$i34$1$1 = 0, $arrayidx$i34$1$2 = 0, $arrayidx$i34$1$3 = 0, $arrayidx$i34$169 = 0, $arrayidx$i34$2 = 0, $arrayidx$i34$3 = 0, $arrayidx$i48 = 0, $arrayidx$i48$1 = 0, $arrayidx13$i = 0, $arrayidx35 = 0;
 var $arrayidx47 = 0, $arrayidx47$1 = 0, $arrayidx47$2 = 0, $arrayidx47$3 = 0, $arrayidx54 = 0, $arrayidx7$i = 0, $cmp$i = 0, $cmp1$i = 0, $cmp10$i = 0, $cmp10$i$1 = 0, $cmp10$i$2 = 0, $cmp10$i$3 = 0, $cmp10$i40 = 0, $cmp14 = 0, $cmp14$1 = 0, $cmp14$2 = 0, $cmp14$3 = 0, $cmp5$i = 0, $cmp5$i33 = 0, $cmp5$i33$1 = 0;
 var $cmp5$i33$2 = 0, $cmp5$i33$3 = 0, $cmp5$i37 = 0, $cmp9$i = 0, $conv$i = 0, $conv$i$1 = 0, $conv$i$2 = 0, $conv$i$3 = 0, $conv$i36 = 0, $conv30 = 0, $ctr$i = 0, $div = 0, $div11 = 0, $div11$1 = 0, $div11$2 = 0, $div11$3 = 0, $div18$i = 0, $div18$i$1 = 0, $div18$i$2 = 0, $div18$i$3 = 0;
 var $div18$i49 = 0, $div20 = 0, $div20$1 = 0, $div20$2 = 0, $div20$3 = 0, $div25 = 0, $div25$1 = 0, $div25$2 = 0, $div25$3 = 0, $div5 = 0, $div5$1 = 0, $div5$2 = 0, $div5$3 = 0, $exitcond = 0, $i$012$i = 0, $i$162 = 0, $inc$i = 0, $inc59 = 0, $rem$i$1 = 0, $rem$i$1$1 = 0;
 var $rem$i$1$2 = 0, $rem$i$1$3 = 0, $rem$i47$1 = 0, $spec$select$i = 0, $spec$select$i$1 = 0, $spec$select$i$2 = 0, $spec$select$i$3 = 0, $spec$select$i39 = 0, $sub = 0, $sub$i = 0, $sub$i$1 = 0, $sub$i$2 = 0, $sub$i$3 = 0, $sub$i38 = 0, $sub12 = 0, $sub12$1 = 0, $sub12$2 = 0, $sub12$3 = 0, $sub17$i = 0, $sub17$i$1 = 0;
 var $sub17$i$1$1 = 0, $sub17$i$1$2 = 0, $sub17$i$1$3 = 0, $sub17$i$167 = 0, $sub17$i$2 = 0, $sub17$i$3 = 0, $sub17$i46 = 0, $sub17$i46$1 = 0, $sub21 = 0, $sub21$1 = 0, $sub21$2 = 0, $sub21$3 = 0, $sub22$i = 0, $sub22$i$1 = 0, $sub22$i$2 = 0, $sub22$i$3 = 0, $sub22$i53 = 0, $sub26 = 0, $sub26$1 = 0, $sub26$2 = 0;
 var $sub26$3 = 0, $sub6 = 0, $sub6$1 = 0, $sub6$2 = 0, $sub6$3 = 0, $tobool = 0, $tobool$1 = 0, $tobool$2 = 0, $tobool$3 = 0, $tobool36 = 0, $tobool43 = 0, $tobool43$1 = 0, $tobool43$2 = 0, $tobool43$3 = 0, $x$i = 0, $y$160 = 0, $y$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99805]|0;
 _V_DrawPatch(0,0,$0);
 $1 = HEAP32[32140]|0;
 $cmp$i = ($1|0)==(2);
 if (!($cmp$i)) {
  $2 = HEAP32[99806]|0;
  $3 = HEAP32[$2>>2]|0;
  $cmp1$i = ($3|0)>(2);
  if (!($cmp1$i)) {
   $139 = $2;$4 = $3;$i$012$i = 0;
   while(1) {
    $arrayidx7$i = (125456 + ($4<<2)|0);
    $5 = HEAP32[$arrayidx7$i>>2]|0;
    $ctr$i = (((($5) + (($i$012$i*56)|0)|0)) + 48|0);
    $6 = HEAP32[$ctr$i>>2]|0;
    $cmp9$i = ($6|0)>(-1);
    if ($cmp9$i) {
     $arrayidx13$i = ((((($5) + (($i$012$i*56)|0)|0)) + 28|0) + ($6<<2)|0);
     $y$i = (((($5) + (($i$012$i*56)|0)|0)) + 16|0);
     $x$i = (((($5) + (($i$012$i*56)|0)|0)) + 12|0);
     $7 = HEAP32[$x$i>>2]|0;
     $8 = HEAP32[$y$i>>2]|0;
     $9 = HEAP32[$arrayidx13$i>>2]|0;
     _V_DrawPatch($7,$8,$9);
     $$pre$i = HEAP32[99806]|0;
     $11 = $$pre$i;
    } else {
     $11 = $139;
    }
    $inc$i = (($i$012$i) + 1)|0;
    $10 = HEAP32[$11>>2]|0;
    $arrayidx$i = (125472 + ($10<<2)|0);
    $12 = HEAP32[$arrayidx$i>>2]|0;
    $cmp5$i = ($inc$i|0)<($12|0);
    if ($cmp5$i) {
     $139 = $11;$4 = $10;$i$012$i = $inc$i;
    } else {
     break;
    }
   }
  }
 }
 _WI_drawLF();
 $13 = HEAP32[99831]|0;
 $14 = HEAPU8[$13>>0]|(HEAPU8[$13+1>>0]<<8);
 $15 = (($14<<16>>16) / 2)&-1;
 $div = $15 << 16 >> 16;
 $sub = (269 - ($div))|0;
 _V_DrawPatch($sub,45,$13);
 $16 = HEAP32[99829]|0;
 _V_DrawPatch(10,100,$16);
 $17 = HEAP32[99830]|0;
 _V_DrawPatch(5,50,$17);
 $18 = HEAP32[45416]|0;
 $tobool = ($18|0)==(0);
 if (!($tobool)) {
  $19 = HEAP32[98412]|0;
  $20 = HEAPU8[$19>>0]|(HEAPU8[$19+1>>0]<<8);
  $21 = (($20<<16>>16) / 2)&-1;
  $div5 = $21 << 16 >> 16;
  $sub6 = (82 - ($div5))|0;
  _V_DrawPatch($sub6,35,$19);
  $22 = HEAP32[98412]|0;
  $23 = HEAPU8[$22>>0]|(HEAPU8[$22+1>>0]<<8);
  $24 = (($23<<16>>16) / 2)&-1;
  $div11 = $24 << 16 >> 16;
  $sub12 = (42 - ($div11))|0;
  _V_DrawPatch($sub12,68,$22);
  $25 = HEAP32[99838]|0;
  $cmp14 = ($25|0)==(0);
  if ($cmp14) {
   $26 = HEAP32[98412]|0;
   $27 = HEAPU8[$26>>0]|(HEAPU8[$26+1>>0]<<8);
   $28 = (($27<<16>>16) / 2)&-1;
   $div20 = $28 << 16 >> 16;
   $sub21 = (82 - ($div20))|0;
   $29 = HEAP32[99839]|0;
   _V_DrawPatch($sub21,35,$29);
   $30 = HEAP32[98412]|0;
   $31 = HEAPU8[$30>>0]|(HEAPU8[$30+1>>0]<<8);
   $32 = (($31<<16>>16) / 2)&-1;
   $div25 = $32 << 16 >> 16;
   $sub26 = (42 - ($div25))|0;
   $33 = HEAP32[99840]|0;
   _V_DrawPatch($sub26,68,$33);
  }
 }
 $34 = HEAP32[(181668)>>2]|0;
 $tobool$1 = ($34|0)==(0);
 if (!($tobool$1)) {
  $90 = HEAP32[(393652)>>2]|0;
  $91 = HEAPU8[$90>>0]|(HEAPU8[$90+1>>0]<<8);
  $92 = (($91<<16>>16) / 2)&-1;
  $div5$1 = $92 << 16 >> 16;
  $sub6$1 = (122 - ($div5$1))|0;
  _V_DrawPatch($sub6$1,35,$90);
  $93 = HEAP32[(393652)>>2]|0;
  $94 = HEAPU8[$93>>0]|(HEAPU8[$93+1>>0]<<8);
  $95 = (($94<<16>>16) / 2)&-1;
  $div11$1 = $95 << 16 >> 16;
  $sub12$1 = (42 - ($div11$1))|0;
  _V_DrawPatch($sub12$1,101,$93);
  $96 = HEAP32[99838]|0;
  $cmp14$1 = ($96|0)==(1);
  if ($cmp14$1) {
   $97 = HEAP32[(393652)>>2]|0;
   $98 = HEAPU8[$97>>0]|(HEAPU8[$97+1>>0]<<8);
   $99 = (($98<<16>>16) / 2)&-1;
   $div20$1 = $99 << 16 >> 16;
   $sub21$1 = (122 - ($div20$1))|0;
   $100 = HEAP32[99839]|0;
   _V_DrawPatch($sub21$1,35,$100);
   $101 = HEAP32[(393652)>>2]|0;
   $102 = HEAPU8[$101>>0]|(HEAPU8[$101+1>>0]<<8);
   $103 = (($102<<16>>16) / 2)&-1;
   $div25$1 = $103 << 16 >> 16;
   $sub26$1 = (42 - ($div25$1))|0;
   $104 = HEAP32[99840]|0;
   _V_DrawPatch($sub26$1,101,$104);
  }
 }
 $105 = HEAP32[(181672)>>2]|0;
 $tobool$2 = ($105|0)==(0);
 if (!($tobool$2)) {
  $106 = HEAP32[(393656)>>2]|0;
  $107 = HEAPU8[$106>>0]|(HEAPU8[$106+1>>0]<<8);
  $108 = (($107<<16>>16) / 2)&-1;
  $div5$2 = $108 << 16 >> 16;
  $sub6$2 = (162 - ($div5$2))|0;
  _V_DrawPatch($sub6$2,35,$106);
  $109 = HEAP32[(393656)>>2]|0;
  $110 = HEAPU8[$109>>0]|(HEAPU8[$109+1>>0]<<8);
  $111 = (($110<<16>>16) / 2)&-1;
  $div11$2 = $111 << 16 >> 16;
  $sub12$2 = (42 - ($div11$2))|0;
  _V_DrawPatch($sub12$2,134,$109);
  $112 = HEAP32[99838]|0;
  $cmp14$2 = ($112|0)==(2);
  if ($cmp14$2) {
   $113 = HEAP32[(393656)>>2]|0;
   $114 = HEAPU8[$113>>0]|(HEAPU8[$113+1>>0]<<8);
   $115 = (($114<<16>>16) / 2)&-1;
   $div20$2 = $115 << 16 >> 16;
   $sub21$2 = (162 - ($div20$2))|0;
   $116 = HEAP32[99839]|0;
   _V_DrawPatch($sub21$2,35,$116);
   $117 = HEAP32[(393656)>>2]|0;
   $118 = HEAPU8[$117>>0]|(HEAPU8[$117+1>>0]<<8);
   $119 = (($118<<16>>16) / 2)&-1;
   $div25$2 = $119 << 16 >> 16;
   $sub26$2 = (42 - ($div25$2))|0;
   $120 = HEAP32[99840]|0;
   _V_DrawPatch($sub26$2,134,$120);
  }
 }
 $121 = HEAP32[(181676)>>2]|0;
 $tobool$3 = ($121|0)==(0);
 if (!($tobool$3)) {
  $122 = HEAP32[(393660)>>2]|0;
  $123 = HEAPU8[$122>>0]|(HEAPU8[$122+1>>0]<<8);
  $124 = (($123<<16>>16) / 2)&-1;
  $div5$3 = $124 << 16 >> 16;
  $sub6$3 = (202 - ($div5$3))|0;
  _V_DrawPatch($sub6$3,35,$122);
  $125 = HEAP32[(393660)>>2]|0;
  $126 = HEAPU8[$125>>0]|(HEAPU8[$125+1>>0]<<8);
  $127 = (($126<<16>>16) / 2)&-1;
  $div11$3 = $127 << 16 >> 16;
  $sub12$3 = (42 - ($div11$3))|0;
  _V_DrawPatch($sub12$3,167,$125);
  $128 = HEAP32[99838]|0;
  $cmp14$3 = ($128|0)==(3);
  if ($cmp14$3) {
   $129 = HEAP32[(393660)>>2]|0;
   $130 = HEAPU8[$129>>0]|(HEAPU8[$129+1>>0]<<8);
   $131 = (($130<<16>>16) / 2)&-1;
   $div20$3 = $131 << 16 >> 16;
   $sub21$3 = (202 - ($div20$3))|0;
   $132 = HEAP32[99839]|0;
   _V_DrawPatch($sub21$3,35,$132);
   $133 = HEAP32[(393660)>>2]|0;
   $134 = HEAPU8[$133>>0]|(HEAPU8[$133+1>>0]<<8);
   $135 = (($134<<16>>16) / 2)&-1;
   $div25$3 = $135 << 16 >> 16;
   $sub26$3 = (42 - ($div25$3))|0;
   $136 = HEAP32[99840]|0;
   _V_DrawPatch($sub26$3,167,$136);
  }
 }
 $137 = HEAP32[98400]|0;
 $138 = HEAPU8[$137>>0]|(HEAPU8[$137+1>>0]<<8);
 $conv30 = $138 << 16 >> 16;
 $add53 = (($conv30) + 269)|0;
 $53 = (($conv30) + 261)|0;
 $add45 = (($conv30) + 82)|0;
 $add45$1 = (($conv30) + 122)|0;
 $45 = (($conv30) + 74)|0;
 $add45$2 = (($conv30) + 162)|0;
 $63 = (($conv30) + 114)|0;
 $add45$3 = (($conv30) + 202)|0;
 $74 = (($conv30) + 154)|0;
 $85 = (($conv30) + 194)|0;
 $i$162 = 0;$y$160 = 78;
 while(1) {
  $arrayidx35 = (181664 + ($i$162<<2)|0);
  $35 = HEAP32[$arrayidx35>>2]|0;
  $tobool36 = ($35|0)==(0);
  if (!($tobool36)) {
   $36 = HEAP32[45416]|0;
   $tobool43 = ($36|0)==(0);
   if (!($tobool43)) {
    $arrayidx47 = (393680 + ($i$162<<4)|0);
    $37 = HEAP32[$arrayidx47>>2]|0;
    $38 = HEAP32[98400]|0;
    $39 = HEAPU8[$38>>0]|(HEAPU8[$38+1>>0]<<8);
    $conv$i = $39 << 16 >> 16;
    $cmp5$i33 = ($37|0)<(0);
    $sub$i = (0 - ($37))|0;
    $spec$select$i = $cmp5$i33 ? $sub$i : $37;
    $cmp10$i = ($spec$select$i|0)==(1994);
    if (!($cmp10$i)) {
     $sub17$i = (($add45) - ($conv$i))|0;
     $div18$i = (($spec$select$i|0) / 10)&-1;
     $40 = ($div18$i*10)|0;
     $41 = (($spec$select$i) - ($40))|0;
     $arrayidx$i34 = (393600 + ($41<<2)|0);
     $42 = HEAP32[$arrayidx$i34>>2]|0;
     _V_DrawPatch($sub17$i,$y$160,$42);
     $sub17$i$1 = (($sub17$i) - ($conv$i))|0;
     $rem$i$1 = (($div18$i|0) % 10)&-1;
     $arrayidx$i34$1 = (393600 + ($rem$i$1<<2)|0);
     $43 = HEAP32[$arrayidx$i34$1>>2]|0;
     _V_DrawPatch($sub17$i$1,$y$160,$43);
     if ($cmp5$i33) {
      $44 = $conv$i << 1;
      $sub22$i = (($45) - ($44))|0;
      $46 = HEAP32[99813]|0;
      _V_DrawPatch($sub22$i,$y$160,$46);
     }
    }
   }
   $47 = HEAP32[(181668)>>2]|0;
   $tobool43$1 = ($47|0)==(0);
   if (!($tobool43$1)) {
    $arrayidx47$1 = (((393680 + ($i$162<<4)|0)) + 4|0);
    $55 = HEAP32[$arrayidx47$1>>2]|0;
    $56 = HEAP32[98400]|0;
    $57 = HEAPU8[$56>>0]|(HEAPU8[$56+1>>0]<<8);
    $conv$i$1 = $57 << 16 >> 16;
    $cmp5$i33$1 = ($55|0)<(0);
    $sub$i$1 = (0 - ($55))|0;
    $spec$select$i$1 = $cmp5$i33$1 ? $sub$i$1 : $55;
    $cmp10$i$1 = ($spec$select$i$1|0)==(1994);
    if (!($cmp10$i$1)) {
     $sub17$i$167 = (($add45$1) - ($conv$i$1))|0;
     $div18$i$1 = (($spec$select$i$1|0) / 10)&-1;
     $58 = ($div18$i$1*10)|0;
     $59 = (($spec$select$i$1) - ($58))|0;
     $arrayidx$i34$169 = (393600 + ($59<<2)|0);
     $60 = HEAP32[$arrayidx$i34$169>>2]|0;
     _V_DrawPatch($sub17$i$167,$y$160,$60);
     $sub17$i$1$1 = (($sub17$i$167) - ($conv$i$1))|0;
     $rem$i$1$1 = (($div18$i$1|0) % 10)&-1;
     $arrayidx$i34$1$1 = (393600 + ($rem$i$1$1<<2)|0);
     $61 = HEAP32[$arrayidx$i34$1$1>>2]|0;
     _V_DrawPatch($sub17$i$1$1,$y$160,$61);
     if ($cmp5$i33$1) {
      $62 = $conv$i$1 << 1;
      $sub22$i$1 = (($63) - ($62))|0;
      $64 = HEAP32[99813]|0;
      _V_DrawPatch($sub22$i$1,$y$160,$64);
     }
    }
   }
   $65 = HEAP32[(181672)>>2]|0;
   $tobool43$2 = ($65|0)==(0);
   if (!($tobool43$2)) {
    $arrayidx47$2 = (((393680 + ($i$162<<4)|0)) + 8|0);
    $66 = HEAP32[$arrayidx47$2>>2]|0;
    $67 = HEAP32[98400]|0;
    $68 = HEAPU8[$67>>0]|(HEAPU8[$67+1>>0]<<8);
    $conv$i$2 = $68 << 16 >> 16;
    $cmp5$i33$2 = ($66|0)<(0);
    $sub$i$2 = (0 - ($66))|0;
    $spec$select$i$2 = $cmp5$i33$2 ? $sub$i$2 : $66;
    $cmp10$i$2 = ($spec$select$i$2|0)==(1994);
    if (!($cmp10$i$2)) {
     $sub17$i$2 = (($add45$2) - ($conv$i$2))|0;
     $div18$i$2 = (($spec$select$i$2|0) / 10)&-1;
     $69 = ($div18$i$2*10)|0;
     $70 = (($spec$select$i$2) - ($69))|0;
     $arrayidx$i34$2 = (393600 + ($70<<2)|0);
     $71 = HEAP32[$arrayidx$i34$2>>2]|0;
     _V_DrawPatch($sub17$i$2,$y$160,$71);
     $sub17$i$1$2 = (($sub17$i$2) - ($conv$i$2))|0;
     $rem$i$1$2 = (($div18$i$2|0) % 10)&-1;
     $arrayidx$i34$1$2 = (393600 + ($rem$i$1$2<<2)|0);
     $72 = HEAP32[$arrayidx$i34$1$2>>2]|0;
     _V_DrawPatch($sub17$i$1$2,$y$160,$72);
     if ($cmp5$i33$2) {
      $73 = $conv$i$2 << 1;
      $sub22$i$2 = (($74) - ($73))|0;
      $75 = HEAP32[99813]|0;
      _V_DrawPatch($sub22$i$2,$y$160,$75);
     }
    }
   }
   $76 = HEAP32[(181676)>>2]|0;
   $tobool43$3 = ($76|0)==(0);
   if (!($tobool43$3)) {
    $arrayidx47$3 = (((393680 + ($i$162<<4)|0)) + 12|0);
    $77 = HEAP32[$arrayidx47$3>>2]|0;
    $78 = HEAP32[98400]|0;
    $79 = HEAPU8[$78>>0]|(HEAPU8[$78+1>>0]<<8);
    $conv$i$3 = $79 << 16 >> 16;
    $cmp5$i33$3 = ($77|0)<(0);
    $sub$i$3 = (0 - ($77))|0;
    $spec$select$i$3 = $cmp5$i33$3 ? $sub$i$3 : $77;
    $cmp10$i$3 = ($spec$select$i$3|0)==(1994);
    if (!($cmp10$i$3)) {
     $sub17$i$3 = (($add45$3) - ($conv$i$3))|0;
     $div18$i$3 = (($spec$select$i$3|0) / 10)&-1;
     $80 = ($div18$i$3*10)|0;
     $81 = (($spec$select$i$3) - ($80))|0;
     $arrayidx$i34$3 = (393600 + ($81<<2)|0);
     $82 = HEAP32[$arrayidx$i34$3>>2]|0;
     _V_DrawPatch($sub17$i$3,$y$160,$82);
     $sub17$i$1$3 = (($sub17$i$3) - ($conv$i$3))|0;
     $rem$i$1$3 = (($div18$i$3|0) % 10)&-1;
     $arrayidx$i34$1$3 = (393600 + ($rem$i$1$3<<2)|0);
     $83 = HEAP32[$arrayidx$i34$1$3>>2]|0;
     _V_DrawPatch($sub17$i$1$3,$y$160,$83);
     if ($cmp5$i33$3) {
      $84 = $conv$i$3 << 1;
      $sub22$i$3 = (($85) - ($84))|0;
      $86 = HEAP32[99813]|0;
      _V_DrawPatch($sub22$i$3,$y$160,$86);
     }
    }
   }
   $arrayidx54 = (393744 + ($i$162<<2)|0);
   $87 = HEAP32[$arrayidx54>>2]|0;
   $88 = HEAP32[98400]|0;
   $89 = HEAPU8[$88>>0]|(HEAPU8[$88+1>>0]<<8);
   $conv$i36 = $89 << 16 >> 16;
   $cmp5$i37 = ($87|0)<(0);
   $sub$i38 = (0 - ($87))|0;
   $spec$select$i39 = $cmp5$i37 ? $sub$i38 : $87;
   $cmp10$i40 = ($spec$select$i39|0)==(1994);
   if (!($cmp10$i40)) {
    $sub17$i46 = (($add53) - ($conv$i36))|0;
    $div18$i49 = (($spec$select$i39|0) / 10)&-1;
    $48 = ($div18$i49*10)|0;
    $49 = (($spec$select$i39) - ($48))|0;
    $arrayidx$i48 = (393600 + ($49<<2)|0);
    $50 = HEAP32[$arrayidx$i48>>2]|0;
    _V_DrawPatch($sub17$i46,$y$160,$50);
    $sub17$i46$1 = (($sub17$i46) - ($conv$i36))|0;
    $rem$i47$1 = (($div18$i49|0) % 10)&-1;
    $arrayidx$i48$1 = (393600 + ($rem$i47$1<<2)|0);
    $51 = HEAP32[$arrayidx$i48$1>>2]|0;
    _V_DrawPatch($sub17$i46$1,$y$160,$51);
    if ($cmp5$i37) {
     $52 = $conv$i36 << 1;
     $sub22$i53 = (($53) - ($52))|0;
     $54 = HEAP32[99813]|0;
     _V_DrawPatch($sub22$i53,$y$160,$54);
    }
   }
  }
  $add57 = (($y$160) + 33)|0;
  $inc59 = (($i$162) + 1)|0;
  $exitcond = ($inc59|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $i$162 = $inc59;$y$160 = $add57;
  }
 }
 return;
}
function _WI_initNetgameStats() {
 var $$pre = 0, $$pre55 = 0, $$pre56 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$1 = 0, $add$1$i$2 = 0, $add$1$i$3 = 0, $add$2 = 0, $add$2$i = 0, $add$2$i$1 = 0, $add$2$i$3 = 0, $add$2$i$us$3 = 0, $add$2$i$us35$3 = 0;
 var $add$3 = 0, $add$3$i = 0, $add$3$i$1 = 0, $add$3$i$2 = 0, $add$3$i$us$1 = 0, $add$3$i$us$2 = 0, $add$3$i$us42 = 0, $add$3$i$us42$2 = 0, $add$us$1 = 0, $add$us$2 = 0, $add$us$3 = 0, $add$us48 = 0, $add$us48$2 = 0, $add$us48$3 = 0, $arrayidx4$1$i = 0, $arrayidx4$1$i$2 = 0, $arrayidx4$1$i$3 = 0, $arrayidx4$1$i$us$2 = 0, $arrayidx4$1$i$us$3 = 0, $arrayidx4$2$i = 0;
 var $arrayidx4$2$i$1 = 0, $arrayidx4$2$i$3 = 0, $arrayidx4$2$i$us$1 = 0, $arrayidx4$2$i$us$3 = 0, $arrayidx4$2$i$us34 = 0, $arrayidx4$2$i$us34$3 = 0, $arrayidx4$3$i = 0, $arrayidx4$3$i$1 = 0, $arrayidx4$3$i$2 = 0, $arrayidx4$3$i$us$1 = 0, $arrayidx4$3$i$us$2 = 0, $arrayidx4$3$i$us41 = 0, $arrayidx4$3$i$us41$2 = 0, $arrayidx4$i$1 = 0, $arrayidx4$i$2 = 0, $arrayidx4$i$3 = 0, $arrayidx4$i$us21$2 = 0, $arrayidx4$i$us21$3 = 0, $arrayidx7$i = 0, $arrayidx7$i$1 = 0;
 var $arrayidx7$i$2 = 0, $arrayidx7$i$3$phi$trans$insert = 0, $arrayidx7$i$us$1 = 0, $arrayidx7$i$us$2 = 0, $arrayidx7$i$us$3$phi$trans$insert = 0, $arrayidx7$i$us45 = 0, $arrayidx7$i$us45$2 = 0, $arrayidx7$i$us45$3$phi$trans$insert = 0, $frags$1$1$i$us$2 = 0, $frags$1$1$i$us$3 = 0, $frags$1$2$i = 0, $frags$1$2$i$1 = 0, $frags$1$2$i$3 = 0, $frags$1$2$i$us$1 = 0, $frags$1$2$i$us$3 = 0, $frags$1$2$i$us37 = 0, $frags$1$2$i$us37$3 = 0, $frags$1$3$i = 0, $frags$1$3$i$1 = 0, $frags$1$3$i$2 = 0;
 var $frags$1$3$i$us$1 = 0, $frags$1$3$i$us$2 = 0, $frags$1$3$i$us44 = 0, $frags$1$3$i$us44$2 = 0, $lnot$ext = 0, $sub$i = 0, $sub$i$1 = 0, $sub$i$2 = 0, $sub$i$3 = 0, $sub$i$us$1 = 0, $sub$i$us$2 = 0, $sub$i$us$3 = 0, $sub$i$us47 = 0, $sub$i$us47$2 = 0, $sub$i$us47$3 = 0, $tobool$1$i = 0, $tobool$2$i = 0, $tobool$3$i = 0, $tobool$i = 0, $tobool5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99812] = 0;
 HEAP32[99832] = 0;
 HEAP32[99841] = 1;
 HEAP32[99837] = 35;
 $0 = HEAP32[99835]|0;
 $1 = HEAP32[45416]|0;
 $tobool$i = ($1|0)==(0);
 $2 = HEAP32[(181668)>>2]|0;
 $tobool$1$i = ($2|0)==(0);
 $3 = HEAP32[(181672)>>2]|0;
 $tobool$2$i = ($3|0)==(0);
 $4 = HEAP32[(181676)>>2]|0;
 $tobool$3$i = ($4|0)==(0);
 if ($tobool$i) {
  if (!($tobool$1$i)) {
   HEAP32[(393764)>>2] = 0;
   HEAP32[(393780)>>2] = 0;
   HEAP32[(393796)>>2] = 0;
   HEAP32[(393812)>>2] = 0;
   if ($tobool$2$i) {
    $frags$1$2$i$us$1 = 0;
   } else {
    $arrayidx4$2$i$us$1 = ((($0)) + 68|0);
    $11 = HEAP32[$arrayidx4$2$i$us$1>>2]|0;
    $frags$1$2$i$us$1 = $11;
   }
   if ($tobool$3$i) {
    $frags$1$3$i$us$1 = $frags$1$2$i$us$1;
   } else {
    $arrayidx4$3$i$us$1 = ((($0)) + 72|0);
    $12 = HEAP32[$arrayidx4$3$i$us$1>>2]|0;
    $add$3$i$us$1 = (($12) + ($frags$1$2$i$us$1))|0;
    $frags$1$3$i$us$1 = $add$3$i$us$1;
   }
   $arrayidx7$i$us$1 = ((($0)) + 64|0);
   $13 = HEAP32[$arrayidx7$i$us$1>>2]|0;
   $sub$i$us$1 = (($frags$1$3$i$us$1) - ($13))|0;
   $14 = HEAP32[99842]|0;
   $add$us$1 = (($sub$i$us$1) + ($14))|0;
   HEAP32[99842] = $add$us$1;
  }
  if (!($tobool$2$i)) {
   HEAP32[(393768)>>2] = 0;
   HEAP32[(393784)>>2] = 0;
   HEAP32[(393800)>>2] = 0;
   HEAP32[(393816)>>2] = 0;
   if ($tobool$1$i) {
    $frags$1$1$i$us$2 = 0;
   } else {
    $arrayidx4$1$i$us$2 = ((($0)) + 104|0);
    $15 = HEAP32[$arrayidx4$1$i$us$2>>2]|0;
    $frags$1$1$i$us$2 = $15;
   }
   if ($tobool$3$i) {
    $frags$1$3$i$us$2 = $frags$1$1$i$us$2;
   } else {
    $arrayidx4$3$i$us$2 = ((($0)) + 112|0);
    $16 = HEAP32[$arrayidx4$3$i$us$2>>2]|0;
    $add$3$i$us$2 = (($16) + ($frags$1$1$i$us$2))|0;
    $frags$1$3$i$us$2 = $add$3$i$us$2;
   }
   $arrayidx7$i$us$2 = ((($0)) + 108|0);
   $17 = HEAP32[$arrayidx7$i$us$2>>2]|0;
   $sub$i$us$2 = (($frags$1$3$i$us$2) - ($17))|0;
   $18 = HEAP32[99842]|0;
   $add$us$2 = (($sub$i$us$2) + ($18))|0;
   HEAP32[99842] = $add$us$2;
  }
  if ($tobool$3$i) {
   $10 = HEAP32[99842]|0;
   $tobool5 = ($10|0)!=(0);
   $lnot$ext = $tobool5&1;
   HEAP32[99842] = $lnot$ext;
   _WI_initAnimatedBack();
   return;
  }
  HEAP32[(393772)>>2] = 0;
  HEAP32[(393788)>>2] = 0;
  HEAP32[(393804)>>2] = 0;
  HEAP32[(393820)>>2] = 0;
  if ($tobool$1$i) {
   $frags$1$1$i$us$3 = 0;
  } else {
   $arrayidx4$1$i$us$3 = ((($0)) + 144|0);
   $19 = HEAP32[$arrayidx4$1$i$us$3>>2]|0;
   $frags$1$1$i$us$3 = $19;
  }
  if ($tobool$2$i) {
   $frags$1$2$i$us$3 = $frags$1$1$i$us$3;
  } else {
   $arrayidx4$2$i$us$3 = ((($0)) + 148|0);
   $20 = HEAP32[$arrayidx4$2$i$us$3>>2]|0;
   $add$2$i$us$3 = (($20) + ($frags$1$1$i$us$3))|0;
   $frags$1$2$i$us$3 = $add$2$i$us$3;
  }
  $arrayidx7$i$us$3$phi$trans$insert = ((($0)) + 152|0);
  $$pre56 = HEAP32[$arrayidx7$i$us$3$phi$trans$insert>>2]|0;
  $sub$i$us$3 = (($frags$1$2$i$us$3) - ($$pre56))|0;
  $21 = HEAP32[99842]|0;
  $add$us$3 = (($sub$i$us$3) + ($21))|0;
  HEAP32[99842] = $add$us$3;
  $10 = HEAP32[99842]|0;
  $tobool5 = ($10|0)!=(0);
  $lnot$ext = $tobool5&1;
  HEAP32[99842] = $lnot$ext;
  _WI_initAnimatedBack();
  return;
 }
 HEAP32[98440] = 0;
 HEAP32[98444] = 0;
 HEAP32[98448] = 0;
 HEAP32[98452] = 0;
 if ($tobool$1$i) {
  if ($tobool$2$i) {
   $frags$1$2$i$us37 = 0;
  } else {
   $arrayidx4$2$i$us34 = ((($0)) + 28|0);
   $5 = HEAP32[$arrayidx4$2$i$us34>>2]|0;
   $frags$1$2$i$us37 = $5;
  }
  if ($tobool$3$i) {
   $frags$1$3$i$us44 = $frags$1$2$i$us37;
  } else {
   $arrayidx4$3$i$us41 = ((($0)) + 32|0);
   $6 = HEAP32[$arrayidx4$3$i$us41>>2]|0;
   $add$3$i$us42 = (($6) + ($frags$1$2$i$us37))|0;
   $frags$1$3$i$us44 = $add$3$i$us42;
  }
  $arrayidx7$i$us45 = ((($0)) + 20|0);
  $22 = HEAP32[$arrayidx7$i$us45>>2]|0;
  $sub$i$us47 = (($frags$1$3$i$us44) - ($22))|0;
  $23 = HEAP32[99842]|0;
  $add$us48 = (($sub$i$us47) + ($23))|0;
  HEAP32[99842] = $add$us48;
  if (!($tobool$2$i)) {
   HEAP32[(393768)>>2] = 0;
   HEAP32[(393784)>>2] = 0;
   HEAP32[(393800)>>2] = 0;
   HEAP32[(393816)>>2] = 0;
   $arrayidx4$i$us21$2 = ((($0)) + 100|0);
   $24 = HEAP32[$arrayidx4$i$us21$2>>2]|0;
   if ($tobool$3$i) {
    $frags$1$3$i$us44$2 = $24;
   } else {
    $arrayidx4$3$i$us41$2 = ((($0)) + 112|0);
    $25 = HEAP32[$arrayidx4$3$i$us41$2>>2]|0;
    $add$3$i$us42$2 = (($25) + ($24))|0;
    $frags$1$3$i$us44$2 = $add$3$i$us42$2;
   }
   $arrayidx7$i$us45$2 = ((($0)) + 108|0);
   $26 = HEAP32[$arrayidx7$i$us45$2>>2]|0;
   $sub$i$us47$2 = (($frags$1$3$i$us44$2) - ($26))|0;
   $27 = HEAP32[99842]|0;
   $add$us48$2 = (($sub$i$us47$2) + ($27))|0;
   HEAP32[99842] = $add$us48$2;
  }
  if ($tobool$3$i) {
   $10 = HEAP32[99842]|0;
   $tobool5 = ($10|0)!=(0);
   $lnot$ext = $tobool5&1;
   HEAP32[99842] = $lnot$ext;
   _WI_initAnimatedBack();
   return;
  }
  HEAP32[(393772)>>2] = 0;
  HEAP32[(393788)>>2] = 0;
  HEAP32[(393804)>>2] = 0;
  HEAP32[(393820)>>2] = 0;
  $arrayidx4$i$us21$3 = ((($0)) + 140|0);
  $28 = HEAP32[$arrayidx4$i$us21$3>>2]|0;
  if ($tobool$2$i) {
   $frags$1$2$i$us37$3 = $28;
  } else {
   $arrayidx4$2$i$us34$3 = ((($0)) + 148|0);
   $29 = HEAP32[$arrayidx4$2$i$us34$3>>2]|0;
   $add$2$i$us35$3 = (($29) + ($28))|0;
   $frags$1$2$i$us37$3 = $add$2$i$us35$3;
  }
  $arrayidx7$i$us45$3$phi$trans$insert = ((($0)) + 152|0);
  $$pre55 = HEAP32[$arrayidx7$i$us45$3$phi$trans$insert>>2]|0;
  $sub$i$us47$3 = (($frags$1$2$i$us37$3) - ($$pre55))|0;
  $30 = HEAP32[99842]|0;
  $add$us48$3 = (($sub$i$us47$3) + ($30))|0;
  HEAP32[99842] = $add$us48$3;
  $10 = HEAP32[99842]|0;
  $tobool5 = ($10|0)!=(0);
  $lnot$ext = $tobool5&1;
  HEAP32[99842] = $lnot$ext;
  _WI_initAnimatedBack();
  return;
 }
 $arrayidx4$1$i = ((($0)) + 24|0);
 $7 = HEAP32[$arrayidx4$1$i>>2]|0;
 if ($tobool$2$i) {
  $frags$1$2$i = $7;
 } else {
  $arrayidx4$2$i = ((($0)) + 28|0);
  $8 = HEAP32[$arrayidx4$2$i>>2]|0;
  $add$2$i = (($8) + ($7))|0;
  $frags$1$2$i = $add$2$i;
 }
 if ($tobool$3$i) {
  $frags$1$3$i = $frags$1$2$i;
 } else {
  $arrayidx4$3$i = ((($0)) + 32|0);
  $9 = HEAP32[$arrayidx4$3$i>>2]|0;
  $add$3$i = (($9) + ($frags$1$2$i))|0;
  $frags$1$3$i = $add$3$i;
 }
 $arrayidx7$i = ((($0)) + 20|0);
 $31 = HEAP32[$arrayidx7$i>>2]|0;
 $sub$i = (($frags$1$3$i) - ($31))|0;
 $32 = HEAP32[99842]|0;
 $add = (($sub$i) + ($32))|0;
 HEAP32[99842] = $add;
 HEAP32[(393764)>>2] = 0;
 HEAP32[(393780)>>2] = 0;
 HEAP32[(393796)>>2] = 0;
 HEAP32[(393812)>>2] = 0;
 $arrayidx4$i$1 = ((($0)) + 60|0);
 $33 = HEAP32[$arrayidx4$i$1>>2]|0;
 if ($tobool$2$i) {
  $frags$1$2$i$1 = $33;
 } else {
  $arrayidx4$2$i$1 = ((($0)) + 68|0);
  $34 = HEAP32[$arrayidx4$2$i$1>>2]|0;
  $add$2$i$1 = (($34) + ($33))|0;
  $frags$1$2$i$1 = $add$2$i$1;
 }
 if ($tobool$3$i) {
  $frags$1$3$i$1 = $frags$1$2$i$1;
 } else {
  $arrayidx4$3$i$1 = ((($0)) + 72|0);
  $35 = HEAP32[$arrayidx4$3$i$1>>2]|0;
  $add$3$i$1 = (($35) + ($frags$1$2$i$1))|0;
  $frags$1$3$i$1 = $add$3$i$1;
 }
 $arrayidx7$i$1 = ((($0)) + 64|0);
 $36 = HEAP32[$arrayidx7$i$1>>2]|0;
 $sub$i$1 = (($frags$1$3$i$1) - ($36))|0;
 $37 = HEAP32[99842]|0;
 $add$1 = (($sub$i$1) + ($37))|0;
 HEAP32[99842] = $add$1;
 if (!($tobool$2$i)) {
  HEAP32[(393768)>>2] = 0;
  HEAP32[(393784)>>2] = 0;
  HEAP32[(393800)>>2] = 0;
  HEAP32[(393816)>>2] = 0;
  $arrayidx4$i$2 = ((($0)) + 100|0);
  $38 = HEAP32[$arrayidx4$i$2>>2]|0;
  $arrayidx4$1$i$2 = ((($0)) + 104|0);
  $39 = HEAP32[$arrayidx4$1$i$2>>2]|0;
  $add$1$i$2 = (($39) + ($38))|0;
  if ($tobool$3$i) {
   $frags$1$3$i$2 = $add$1$i$2;
  } else {
   $arrayidx4$3$i$2 = ((($0)) + 112|0);
   $40 = HEAP32[$arrayidx4$3$i$2>>2]|0;
   $add$3$i$2 = (($40) + ($add$1$i$2))|0;
   $frags$1$3$i$2 = $add$3$i$2;
  }
  $arrayidx7$i$2 = ((($0)) + 108|0);
  $41 = HEAP32[$arrayidx7$i$2>>2]|0;
  $sub$i$2 = (($frags$1$3$i$2) - ($41))|0;
  $42 = HEAP32[99842]|0;
  $add$2 = (($sub$i$2) + ($42))|0;
  HEAP32[99842] = $add$2;
 }
 if ($tobool$3$i) {
  $10 = HEAP32[99842]|0;
  $tobool5 = ($10|0)!=(0);
  $lnot$ext = $tobool5&1;
  HEAP32[99842] = $lnot$ext;
  _WI_initAnimatedBack();
  return;
 }
 HEAP32[(393772)>>2] = 0;
 HEAP32[(393788)>>2] = 0;
 HEAP32[(393804)>>2] = 0;
 HEAP32[(393820)>>2] = 0;
 $arrayidx4$i$3 = ((($0)) + 140|0);
 $43 = HEAP32[$arrayidx4$i$3>>2]|0;
 $arrayidx4$1$i$3 = ((($0)) + 144|0);
 $44 = HEAP32[$arrayidx4$1$i$3>>2]|0;
 $add$1$i$3 = (($44) + ($43))|0;
 if ($tobool$2$i) {
  $frags$1$2$i$3 = $add$1$i$3;
 } else {
  $arrayidx4$2$i$3 = ((($0)) + 148|0);
  $45 = HEAP32[$arrayidx4$2$i$3>>2]|0;
  $add$2$i$3 = (($45) + ($add$1$i$3))|0;
  $frags$1$2$i$3 = $add$2$i$3;
 }
 $arrayidx7$i$3$phi$trans$insert = ((($0)) + 152|0);
 $$pre = HEAP32[$arrayidx7$i$3$phi$trans$insert>>2]|0;
 $sub$i$3 = (($frags$1$2$i$3) - ($$pre))|0;
 $46 = HEAP32[99842]|0;
 $add$3 = (($sub$i$3) + ($46))|0;
 HEAP32[99842] = $add$3;
 $10 = HEAP32[99842]|0;
 $tobool5 = ($10|0)!=(0);
 $lnot$ext = $tobool5&1;
 HEAP32[99842] = $lnot$ext;
 _WI_initAnimatedBack();
 return;
}
function _WI_updateNetgameStats() {
 var $$pre = 0, $$pre141 = 0, $$pre142 = 0, $$pre143 = 0, $$pre144 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add$1 = 0, $add$1$i$2 = 0, $add$1$i$3 = 0, $add$1$i59$2 = 0, $add$1$i59$3 = 0, $add$2 = 0, $add$2$i = 0, $add$2$i$1 = 0, $add$2$i$3 = 0, $add$2$i67 = 0, $add$2$i67$1 = 0;
 var $add$2$i67$3 = 0, $add$2$i67$us$3 = 0, $add$2$i67$us115$3 = 0, $add$3 = 0, $add$3$i = 0, $add$3$i$1 = 0, $add$3$i$2 = 0, $add$3$i75 = 0, $add$3$i75$1 = 0, $add$3$i75$2 = 0, $add$3$i75$us$1 = 0, $add$3$i75$us$2 = 0, $add$3$i75$us122 = 0, $add$3$i75$us122$2 = 0, $add108 = 0, $add108$1 = 0, $add108$2 = 0, $add108$3 = 0, $add132 = 0, $add133 = 0;
 var $add150$1 = 0, $add150$2 = 0, $add150$3 = 0, $add150$us$1 = 0, $add150$us$2 = 0, $add150$us$3 = 0, $add150$us99 = 0, $add150$us99$2 = 0, $add150$us99$3 = 0, $add69 = 0, $add69$1 = 0, $add69$2 = 0, $add69$3 = 0, $and = 0, $and138 = 0, $and176 = 0, $and57 = 0, $and96 = 0, $arrayidx4$1$i = 0, $arrayidx4$1$i$2 = 0;
 var $arrayidx4$1$i$3 = 0, $arrayidx4$1$i58 = 0, $arrayidx4$1$i58$2 = 0, $arrayidx4$1$i58$3 = 0, $arrayidx4$1$i58$us$2 = 0, $arrayidx4$1$i58$us$3 = 0, $arrayidx4$2$i = 0, $arrayidx4$2$i$1 = 0, $arrayidx4$2$i$3 = 0, $arrayidx4$2$i66 = 0, $arrayidx4$2$i66$1 = 0, $arrayidx4$2$i66$3 = 0, $arrayidx4$2$i66$us$1 = 0, $arrayidx4$2$i66$us$3 = 0, $arrayidx4$2$i66$us114 = 0, $arrayidx4$2$i66$us114$3 = 0, $arrayidx4$3$i = 0, $arrayidx4$3$i$1 = 0, $arrayidx4$3$i$2 = 0, $arrayidx4$3$i74 = 0;
 var $arrayidx4$3$i74$1 = 0, $arrayidx4$3$i74$2 = 0, $arrayidx4$3$i74$us$1 = 0, $arrayidx4$3$i74$us$2 = 0, $arrayidx4$3$i74$us121 = 0, $arrayidx4$3$i74$us121$2 = 0, $arrayidx4$i$1 = 0, $arrayidx4$i$2 = 0, $arrayidx4$i$3 = 0, $arrayidx4$i51$1 = 0, $arrayidx4$i51$2 = 0, $arrayidx4$i51$3 = 0, $arrayidx4$i51$us101$2 = 0, $arrayidx4$i51$us101$3 = 0, $arrayidx7$i = 0, $arrayidx7$i$1 = 0, $arrayidx7$i$2 = 0, $arrayidx7$i$3$phi$trans$insert = 0, $arrayidx7$i78 = 0, $arrayidx7$i78$1 = 0;
 var $arrayidx7$i78$2 = 0, $arrayidx7$i78$3$phi$trans$insert = 0, $arrayidx7$i78$us$1 = 0, $arrayidx7$i78$us$2 = 0, $arrayidx7$i78$us$3$phi$trans$insert = 0, $arrayidx7$i78$us125 = 0, $arrayidx7$i78$us125$2 = 0, $arrayidx7$i78$us125$3$phi$trans$insert = 0, $cmp = 0, $cmp115 = 0, $cmp115$1 = 0, $cmp115$2 = 0, $cmp115$3 = 0, $cmp115$3$not = 0, $cmp153 = 0, $cmp153$1 = 0, $cmp153$2 = 0, $cmp153$3 = 0, $cmp153$us$1 = 0, $cmp153$us$2 = 0;
 var $cmp153$us$3 = 0, $cmp153$us127 = 0, $cmp153$us127$2 = 0, $cmp153$us127$3 = 0, $cmp170 = 0, $cmp38 = 0, $cmp38$1 = 0, $cmp38$2 = 0, $cmp38$3 = 0, $cmp38$3$not = 0, $cmp76 = 0, $cmp76$1 = 0, $cmp76$2 = 0, $cmp76$3 = 0, $cmp76$3$not = 0, $dec = 0, $div = 0, $div$1 = 0, $div$2 = 0, $div$3 = 0;
 var $div$us = 0, $div$us$1 = 0, $div$us$2 = 0, $div$us$3 = 0, $div114 = 0, $div114$1 = 0, $div114$2 = 0, $div114$3 = 0, $div12 = 0, $div12$1 = 0, $div12$2 = 0, $div12$3 = 0, $div12$us = 0, $div12$us$1 = 0, $div12$us$2 = 0, $div12$us$3 = 0, $div37 = 0, $div37$1 = 0, $div37$2 = 0, $div37$3 = 0;
 var $div75 = 0, $div75$1 = 0, $div75$2 = 0, $div75$3 = 0, $div8 = 0, $div8$1 = 0, $div8$2 = 0, $div8$3 = 0, $div8$us = 0, $div8$us$1 = 0, $div8$us$2 = 0, $div8$us$3 = 0, $frags$1$1$i = 0, $frags$1$1$i$2 = 0, $frags$1$1$i$3 = 0, $frags$1$1$i61$us$2 = 0, $frags$1$1$i61$us$3 = 0, $frags$1$2$i = 0, $frags$1$2$i$1 = 0, $frags$1$2$i$3 = 0;
 var $frags$1$2$i69 = 0, $frags$1$2$i69$1 = 0, $frags$1$2$i69$3 = 0, $frags$1$2$i69$us$1 = 0, $frags$1$2$i69$us$3 = 0, $frags$1$2$i69$us117 = 0, $frags$1$2$i69$us117$3 = 0, $frags$1$3$i = 0, $frags$1$3$i$1 = 0, $frags$1$3$i$2 = 0, $frags$1$3$i77 = 0, $frags$1$3$i77$1 = 0, $frags$1$3$i77$2 = 0, $frags$1$3$i77$us$1 = 0, $frags$1$3$i77$us$2 = 0, $frags$1$3$i77$us124 = 0, $frags$1$3$i77$us124$2 = 0, $frags$1$i$1 = 0, $frags$1$i$2 = 0, $frags$1$i$3 = 0;
 var $inc163 = 0, $inc181 = 0, $inc52 = 0, $inc91 = 0, $lnot$ext = 0, $maxitems = 0, $maxitems74 = 0, $maxkills = 0, $maxkills36 = 0, $maxsecret = 0, $maxsecret113 = 0, $mul = 0, $mul$1 = 0, $mul$2 = 0, $mul$3 = 0, $mul$us = 0, $mul$us$1 = 0, $mul$us$2 = 0, $mul$us$3 = 0, $mul11 = 0;
 var $mul11$1 = 0, $mul11$2 = 0, $mul11$3 = 0, $mul11$us = 0, $mul11$us$1 = 0, $mul11$us$2 = 0, $mul11$us$3 = 0, $mul112 = 0, $mul112$1 = 0, $mul112$2 = 0, $mul112$3 = 0, $mul131 = 0, $mul35 = 0, $mul35$1 = 0, $mul35$2 = 0, $mul35$3 = 0, $mul7 = 0, $mul7$1 = 0, $mul7$2 = 0, $mul7$3 = 0;
 var $mul7$us = 0, $mul7$us$1 = 0, $mul7$us$2 = 0, $mul7$us$3 = 0, $mul73 = 0, $mul73$1 = 0, $mul73$2 = 0, $mul73$3 = 0, $or$cond = 0, $or$cond151 = 0, $or$cond152 = 0, $or$cond153 = 0, $sitems = 0, $sitems$1 = 0, $sitems$2 = 0, $sitems$3 = 0, $sitems$us = 0, $sitems$us$1 = 0, $sitems$us$2 = 0, $sitems$us$3 = 0;
 var $sitems72 = 0, $sitems72$1 = 0, $sitems72$2 = 0, $sitems72$3 = 0, $skills = 0, $skills$1 = 0, $skills$2 = 0, $skills$3 = 0, $skills$us = 0, $skills$us$1 = 0, $skills$us$2 = 0, $skills$us$3 = 0, $skills34 = 0, $skills34$1 = 0, $skills34$2 = 0, $skills34$3 = 0, $spec$select = 0, $spec$select$1 = 0, $spec$select$2 = 0, $spec$select135 = 0;
 var $spec$select135$1 = 0, $spec$select135$2 = 0, $spec$select137 = 0, $spec$select137$1 = 0, $spec$select137$2 = 0, $spec$store$select = 0, $spec$store$select$1 = 0, $spec$store$select$2 = 0, $spec$store$select$3 = 0, $spec$store$select134 = 0, $spec$store$select134$1 = 0, $spec$store$select134$2 = 0, $spec$store$select134$3 = 0, $spec$store$select136 = 0, $spec$store$select136$1 = 0, $spec$store$select136$2 = 0, $spec$store$select136$3 = 0, $ssecret = 0, $ssecret$1 = 0, $ssecret$2 = 0;
 var $ssecret$3 = 0, $ssecret$us = 0, $ssecret$us$1 = 0, $ssecret$us$2 = 0, $ssecret$us$3 = 0, $ssecret111 = 0, $ssecret111$1 = 0, $ssecret111$2 = 0, $ssecret111$3 = 0, $stillticking$1 = 0, $stillticking$1$1 = 0, $stillticking$1$2 = 0, $stillticking$3 = 0, $stillticking$3$1 = 0, $stillticking$3$2 = 0, $stillticking$5 = 0, $stillticking$5$1 = 0, $stillticking$5$2 = 0, $stillticking$6$lcssa = 0, $stillticking$7 = 0;
 var $stillticking$7$1 = 0, $stillticking$7$2 = 0, $stillticking$7$us$1 = 0, $stillticking$7$us$2 = 0, $stillticking$7$us131 = 0, $stillticking$7$us131$2 = 0, $sub$i = 0, $sub$i$1 = 0, $sub$i$2 = 0, $sub$i$3 = 0, $sub$i79 = 0, $sub$i79$1 = 0, $sub$i79$2 = 0, $sub$i79$3 = 0, $sub$i79$us$1 = 0, $sub$i79$us$2 = 0, $sub$i79$us$3 = 0, $sub$i79$us126 = 0, $sub$i79$us126$2 = 0, $sub$i79$us126$3 = 0;
 var $tobool = 0, $tobool$1$i = 0, $tobool$1$i54 = 0, $tobool$2$i = 0, $tobool$2$i62 = 0, $tobool$3$i = 0, $tobool$3$i70 = 0, $tobool$i = 0, $tobool$i48 = 0, $tobool104 = 0, $tobool104$1 = 0, $tobool104$2 = 0, $tobool104$3 = 0, $tobool128 = 0, $tobool128$old = 0, $tobool130 = 0, $tobool139 = 0, $tobool14 = 0, $tobool161 = 0, $tobool168 = 0;
 var $tobool177 = 0, $tobool179 = 0, $tobool21 = 0, $tobool28 = 0, $tobool28$1 = 0, $tobool28$2 = 0, $tobool28$3 = 0, $tobool50 = 0, $tobool50$old = 0, $tobool58 = 0, $tobool65 = 0, $tobool65$1 = 0, $tobool65$2 = 0, $tobool65$3 = 0, $tobool89 = 0, $tobool89$old = 0, $tobool97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _WI_updateAnimatedBack();
 $0 = HEAP32[99832]|0;
 $tobool = ($0|0)!=(0);
 $1 = HEAP32[99841]|0;
 $cmp = ($1|0)!=(10);
 $or$cond = $tobool & $cmp;
 L1: do {
  if ($or$cond) {
   HEAP32[99832] = 0;
   $2 = HEAP32[99835]|0;
   $3 = HEAP32[99806]|0;
   $maxkills = ((($3)) + 16|0);
   $maxitems = ((($3)) + 20|0);
   $maxsecret = ((($3)) + 24|0);
   $4 = HEAP32[99842]|0;
   $tobool14 = ($4|0)==(0);
   $5 = HEAP32[45416]|0;
   $tobool$i = ($5|0)==(0);
   $6 = HEAP32[(181668)>>2]|0;
   $tobool$1$i = ($6|0)==(0);
   $7 = HEAP32[(181672)>>2]|0;
   $tobool$2$i = ($7|0)==(0);
   $8 = HEAP32[(181676)>>2]|0;
   $tobool$3$i = ($8|0)==(0);
   if ($tobool14) {
    if (!($tobool$i)) {
     $skills$us = ((($2)) + 4|0);
     $9 = HEAP32[$skills$us>>2]|0;
     $mul$us = ($9*100)|0;
     $10 = HEAP32[$maxkills>>2]|0;
     $div$us = (($mul$us|0) / ($10|0))&-1;
     HEAP32[98452] = $div$us;
     $sitems$us = ((($2)) + 8|0);
     $11 = HEAP32[$sitems$us>>2]|0;
     $mul7$us = ($11*100)|0;
     $12 = HEAP32[$maxitems>>2]|0;
     $div8$us = (($mul7$us|0) / ($12|0))&-1;
     HEAP32[98448] = $div8$us;
     $ssecret$us = ((($2)) + 12|0);
     $13 = HEAP32[$ssecret$us>>2]|0;
     $mul11$us = ($13*100)|0;
     $14 = HEAP32[$maxsecret>>2]|0;
     $div12$us = (($mul11$us|0) / ($14|0))&-1;
     HEAP32[98444] = $div12$us;
    }
    if (!($tobool$1$i)) {
     $skills$us$1 = ((($2)) + 44|0);
     $71 = HEAP32[$skills$us$1>>2]|0;
     $mul$us$1 = ($71*100)|0;
     $72 = HEAP32[$maxkills>>2]|0;
     $div$us$1 = (($mul$us$1|0) / ($72|0))&-1;
     HEAP32[(393812)>>2] = $div$us$1;
     $sitems$us$1 = ((($2)) + 48|0);
     $73 = HEAP32[$sitems$us$1>>2]|0;
     $mul7$us$1 = ($73*100)|0;
     $74 = HEAP32[$maxitems>>2]|0;
     $div8$us$1 = (($mul7$us$1|0) / ($74|0))&-1;
     HEAP32[(393796)>>2] = $div8$us$1;
     $ssecret$us$1 = ((($2)) + 52|0);
     $75 = HEAP32[$ssecret$us$1>>2]|0;
     $mul11$us$1 = ($75*100)|0;
     $76 = HEAP32[$maxsecret>>2]|0;
     $div12$us$1 = (($mul11$us$1|0) / ($76|0))&-1;
     HEAP32[(393780)>>2] = $div12$us$1;
    }
    if (!($tobool$2$i)) {
     $skills$us$2 = ((($2)) + 84|0);
     $77 = HEAP32[$skills$us$2>>2]|0;
     $mul$us$2 = ($77*100)|0;
     $78 = HEAP32[$maxkills>>2]|0;
     $div$us$2 = (($mul$us$2|0) / ($78|0))&-1;
     HEAP32[(393816)>>2] = $div$us$2;
     $sitems$us$2 = ((($2)) + 88|0);
     $79 = HEAP32[$sitems$us$2>>2]|0;
     $mul7$us$2 = ($79*100)|0;
     $80 = HEAP32[$maxitems>>2]|0;
     $div8$us$2 = (($mul7$us$2|0) / ($80|0))&-1;
     HEAP32[(393800)>>2] = $div8$us$2;
     $ssecret$us$2 = ((($2)) + 92|0);
     $81 = HEAP32[$ssecret$us$2>>2]|0;
     $mul11$us$2 = ($81*100)|0;
     $82 = HEAP32[$maxsecret>>2]|0;
     $div12$us$2 = (($mul11$us$2|0) / ($82|0))&-1;
     HEAP32[(393784)>>2] = $div12$us$2;
    }
    if (!($tobool$3$i)) {
     $skills$us$3 = ((($2)) + 124|0);
     $83 = HEAP32[$skills$us$3>>2]|0;
     $mul$us$3 = ($83*100)|0;
     $84 = HEAP32[$maxkills>>2]|0;
     $div$us$3 = (($mul$us$3|0) / ($84|0))&-1;
     HEAP32[(393820)>>2] = $div$us$3;
     $sitems$us$3 = ((($2)) + 128|0);
     $85 = HEAP32[$sitems$us$3>>2]|0;
     $mul7$us$3 = ($85*100)|0;
     $86 = HEAP32[$maxitems>>2]|0;
     $div8$us$3 = (($mul7$us$3|0) / ($86|0))&-1;
     HEAP32[(393804)>>2] = $div8$us$3;
     $ssecret$us$3 = ((($2)) + 132|0);
     $87 = HEAP32[$ssecret$us$3>>2]|0;
     $mul11$us$3 = ($87*100)|0;
     $88 = HEAP32[$maxsecret>>2]|0;
     $div12$us$3 = (($mul11$us$3|0) / ($88|0))&-1;
     HEAP32[(393788)>>2] = $div12$us$3;
    }
   } else {
    if (!($tobool$i)) {
     $skills = ((($2)) + 4|0);
     $15 = HEAP32[$skills>>2]|0;
     $mul = ($15*100)|0;
     $16 = HEAP32[$maxkills>>2]|0;
     $div = (($mul|0) / ($16|0))&-1;
     HEAP32[98452] = $div;
     $sitems = ((($2)) + 8|0);
     $17 = HEAP32[$sitems>>2]|0;
     $mul7 = ($17*100)|0;
     $18 = HEAP32[$maxitems>>2]|0;
     $div8 = (($mul7|0) / ($18|0))&-1;
     HEAP32[98448] = $div8;
     $ssecret = ((($2)) + 12|0);
     $19 = HEAP32[$ssecret>>2]|0;
     $mul11 = ($19*100)|0;
     $20 = HEAP32[$maxsecret>>2]|0;
     $div12 = (($mul11|0) / ($20|0))&-1;
     HEAP32[98444] = $div12;
     if ($tobool$1$i) {
      $frags$1$1$i = 0;
     } else {
      $arrayidx4$1$i = ((($2)) + 24|0);
      $21 = HEAP32[$arrayidx4$1$i>>2]|0;
      $frags$1$1$i = $21;
     }
     if ($tobool$2$i) {
      $frags$1$2$i = $frags$1$1$i;
     } else {
      $arrayidx4$2$i = ((($2)) + 28|0);
      $22 = HEAP32[$arrayidx4$2$i>>2]|0;
      $add$2$i = (($22) + ($frags$1$1$i))|0;
      $frags$1$2$i = $add$2$i;
     }
     if ($tobool$3$i) {
      $frags$1$3$i = $frags$1$2$i;
     } else {
      $arrayidx4$3$i = ((($2)) + 32|0);
      $23 = HEAP32[$arrayidx4$3$i>>2]|0;
      $add$3$i = (($23) + ($frags$1$2$i))|0;
      $frags$1$3$i = $add$3$i;
     }
     $arrayidx7$i = ((($2)) + 20|0);
     $24 = HEAP32[$arrayidx7$i>>2]|0;
     $sub$i = (($frags$1$3$i) - ($24))|0;
     HEAP32[98440] = $sub$i;
    }
    if (!($tobool$1$i)) {
     $skills$1 = ((($2)) + 44|0);
     $89 = HEAP32[$skills$1>>2]|0;
     $mul$1 = ($89*100)|0;
     $90 = HEAP32[$maxkills>>2]|0;
     $div$1 = (($mul$1|0) / ($90|0))&-1;
     HEAP32[(393812)>>2] = $div$1;
     $sitems$1 = ((($2)) + 48|0);
     $91 = HEAP32[$sitems$1>>2]|0;
     $mul7$1 = ($91*100)|0;
     $92 = HEAP32[$maxitems>>2]|0;
     $div8$1 = (($mul7$1|0) / ($92|0))&-1;
     HEAP32[(393796)>>2] = $div8$1;
     $ssecret$1 = ((($2)) + 52|0);
     $93 = HEAP32[$ssecret$1>>2]|0;
     $mul11$1 = ($93*100)|0;
     $94 = HEAP32[$maxsecret>>2]|0;
     $div12$1 = (($mul11$1|0) / ($94|0))&-1;
     HEAP32[(393780)>>2] = $div12$1;
     if ($tobool$i) {
      $frags$1$i$1 = 0;
     } else {
      $arrayidx4$i$1 = ((($2)) + 60|0);
      $95 = HEAP32[$arrayidx4$i$1>>2]|0;
      $frags$1$i$1 = $95;
     }
     if ($tobool$2$i) {
      $frags$1$2$i$1 = $frags$1$i$1;
     } else {
      $arrayidx4$2$i$1 = ((($2)) + 68|0);
      $96 = HEAP32[$arrayidx4$2$i$1>>2]|0;
      $add$2$i$1 = (($96) + ($frags$1$i$1))|0;
      $frags$1$2$i$1 = $add$2$i$1;
     }
     if ($tobool$3$i) {
      $frags$1$3$i$1 = $frags$1$2$i$1;
     } else {
      $arrayidx4$3$i$1 = ((($2)) + 72|0);
      $97 = HEAP32[$arrayidx4$3$i$1>>2]|0;
      $add$3$i$1 = (($97) + ($frags$1$2$i$1))|0;
      $frags$1$3$i$1 = $add$3$i$1;
     }
     $arrayidx7$i$1 = ((($2)) + 64|0);
     $98 = HEAP32[$arrayidx7$i$1>>2]|0;
     $sub$i$1 = (($frags$1$3$i$1) - ($98))|0;
     HEAP32[(393764)>>2] = $sub$i$1;
    }
    if (!($tobool$2$i)) {
     $skills$2 = ((($2)) + 84|0);
     $99 = HEAP32[$skills$2>>2]|0;
     $mul$2 = ($99*100)|0;
     $100 = HEAP32[$maxkills>>2]|0;
     $div$2 = (($mul$2|0) / ($100|0))&-1;
     HEAP32[(393816)>>2] = $div$2;
     $sitems$2 = ((($2)) + 88|0);
     $101 = HEAP32[$sitems$2>>2]|0;
     $mul7$2 = ($101*100)|0;
     $102 = HEAP32[$maxitems>>2]|0;
     $div8$2 = (($mul7$2|0) / ($102|0))&-1;
     HEAP32[(393800)>>2] = $div8$2;
     $ssecret$2 = ((($2)) + 92|0);
     $103 = HEAP32[$ssecret$2>>2]|0;
     $mul11$2 = ($103*100)|0;
     $104 = HEAP32[$maxsecret>>2]|0;
     $div12$2 = (($mul11$2|0) / ($104|0))&-1;
     HEAP32[(393784)>>2] = $div12$2;
     if ($tobool$i) {
      $frags$1$i$2 = 0;
     } else {
      $arrayidx4$i$2 = ((($2)) + 100|0);
      $105 = HEAP32[$arrayidx4$i$2>>2]|0;
      $frags$1$i$2 = $105;
     }
     if ($tobool$1$i) {
      $frags$1$1$i$2 = $frags$1$i$2;
     } else {
      $arrayidx4$1$i$2 = ((($2)) + 104|0);
      $106 = HEAP32[$arrayidx4$1$i$2>>2]|0;
      $add$1$i$2 = (($106) + ($frags$1$i$2))|0;
      $frags$1$1$i$2 = $add$1$i$2;
     }
     if ($tobool$3$i) {
      $frags$1$3$i$2 = $frags$1$1$i$2;
     } else {
      $arrayidx4$3$i$2 = ((($2)) + 112|0);
      $107 = HEAP32[$arrayidx4$3$i$2>>2]|0;
      $add$3$i$2 = (($107) + ($frags$1$1$i$2))|0;
      $frags$1$3$i$2 = $add$3$i$2;
     }
     $arrayidx7$i$2 = ((($2)) + 108|0);
     $108 = HEAP32[$arrayidx7$i$2>>2]|0;
     $sub$i$2 = (($frags$1$3$i$2) - ($108))|0;
     HEAP32[(393768)>>2] = $sub$i$2;
    }
    if (!($tobool$3$i)) {
     $skills$3 = ((($2)) + 124|0);
     $109 = HEAP32[$skills$3>>2]|0;
     $mul$3 = ($109*100)|0;
     $110 = HEAP32[$maxkills>>2]|0;
     $div$3 = (($mul$3|0) / ($110|0))&-1;
     HEAP32[(393820)>>2] = $div$3;
     $sitems$3 = ((($2)) + 128|0);
     $111 = HEAP32[$sitems$3>>2]|0;
     $mul7$3 = ($111*100)|0;
     $112 = HEAP32[$maxitems>>2]|0;
     $div8$3 = (($mul7$3|0) / ($112|0))&-1;
     HEAP32[(393804)>>2] = $div8$3;
     $ssecret$3 = ((($2)) + 132|0);
     $113 = HEAP32[$ssecret$3>>2]|0;
     $mul11$3 = ($113*100)|0;
     $114 = HEAP32[$maxsecret>>2]|0;
     $div12$3 = (($mul11$3|0) / ($114|0))&-1;
     HEAP32[(393788)>>2] = $div12$3;
     if ($tobool$i) {
      $frags$1$i$3 = 0;
     } else {
      $arrayidx4$i$3 = ((($2)) + 140|0);
      $115 = HEAP32[$arrayidx4$i$3>>2]|0;
      $frags$1$i$3 = $115;
     }
     if ($tobool$1$i) {
      $frags$1$1$i$3 = $frags$1$i$3;
     } else {
      $arrayidx4$1$i$3 = ((($2)) + 144|0);
      $116 = HEAP32[$arrayidx4$1$i$3>>2]|0;
      $add$1$i$3 = (($116) + ($frags$1$i$3))|0;
      $frags$1$1$i$3 = $add$1$i$3;
     }
     if ($tobool$2$i) {
      $frags$1$2$i$3 = $frags$1$1$i$3;
     } else {
      $arrayidx4$2$i$3 = ((($2)) + 148|0);
      $117 = HEAP32[$arrayidx4$2$i$3>>2]|0;
      $add$2$i$3 = (($117) + ($frags$1$1$i$3))|0;
      $frags$1$2$i$3 = $add$2$i$3;
     }
     $arrayidx7$i$3$phi$trans$insert = ((($2)) + 152|0);
     $$pre143 = HEAP32[$arrayidx7$i$3$phi$trans$insert>>2]|0;
     $sub$i$3 = (($frags$1$2$i$3) - ($$pre143))|0;
     HEAP32[(393772)>>2] = $sub$i$3;
    }
   }
   _S_StartSound(0,82);
   HEAP32[99841] = 10;
   $$pre144 = HEAP32[99832]|0;
   $68 = $$pre144;
  } else {
   switch ($1|0) {
   case 10:  {
    $68 = $0;
    break L1;
    break;
   }
   case 2:  {
    $25 = HEAP32[99811]|0;
    $and = $25 & 3;
    $tobool21 = ($and|0)==(0);
    if ($tobool21) {
     _S_StartSound(0,1);
    }
    $26 = HEAP32[99835]|0;
    $27 = HEAP32[99806]|0;
    $maxkills36 = ((($27)) + 16|0);
    $28 = HEAP32[45416]|0;
    $tobool28 = ($28|0)==(0);
    if ($tobool28) {
     $stillticking$1 = 0;
    } else {
     $29 = HEAP32[98452]|0;
     $add = (($29) + 2)|0;
     $skills34 = ((($26)) + 4|0);
     $30 = HEAP32[$skills34>>2]|0;
     $mul35 = ($30*100)|0;
     $31 = HEAP32[$maxkills36>>2]|0;
     $div37 = (($mul35|0) / ($31|0))&-1;
     $cmp38 = ($add|0)<($div37|0);
     $spec$store$select = $cmp38 ? $add : $div37;
     HEAP32[98452] = $spec$store$select;
     $spec$select = $cmp38&1;
     $stillticking$1 = $spec$select;
    }
    $32 = HEAP32[(181668)>>2]|0;
    $tobool28$1 = ($32|0)==(0);
    if ($tobool28$1) {
     $stillticking$1$1 = $stillticking$1;
    } else {
     $118 = HEAP32[(393812)>>2]|0;
     $add$1 = (($118) + 2)|0;
     $skills34$1 = ((($26)) + 44|0);
     $119 = HEAP32[$skills34$1>>2]|0;
     $mul35$1 = ($119*100)|0;
     $120 = HEAP32[$maxkills36>>2]|0;
     $div37$1 = (($mul35$1|0) / ($120|0))&-1;
     $cmp38$1 = ($add$1|0)<($div37$1|0);
     $spec$store$select$1 = $cmp38$1 ? $add$1 : $div37$1;
     HEAP32[(393812)>>2] = $spec$store$select$1;
     $spec$select$1 = $cmp38$1 ? 1 : $stillticking$1;
     $stillticking$1$1 = $spec$select$1;
    }
    $121 = HEAP32[(181672)>>2]|0;
    $tobool28$2 = ($121|0)==(0);
    if ($tobool28$2) {
     $stillticking$1$2 = $stillticking$1$1;
    } else {
     $122 = HEAP32[(393816)>>2]|0;
     $add$2 = (($122) + 2)|0;
     $skills34$2 = ((($26)) + 84|0);
     $123 = HEAP32[$skills34$2>>2]|0;
     $mul35$2 = ($123*100)|0;
     $124 = HEAP32[$maxkills36>>2]|0;
     $div37$2 = (($mul35$2|0) / ($124|0))&-1;
     $cmp38$2 = ($add$2|0)<($div37$2|0);
     $spec$store$select$2 = $cmp38$2 ? $add$2 : $div37$2;
     HEAP32[(393816)>>2] = $spec$store$select$2;
     $spec$select$2 = $cmp38$2 ? 1 : $stillticking$1$1;
     $stillticking$1$2 = $spec$select$2;
    }
    $125 = HEAP32[(181676)>>2]|0;
    $tobool28$3 = ($125|0)==(0);
    if ($tobool28$3) {
     $tobool50$old = ($stillticking$1$2|0)==(0);
     if (!($tobool50$old)) {
      return;
     }
    } else {
     $126 = HEAP32[(393820)>>2]|0;
     $add$3 = (($126) + 2)|0;
     $skills34$3 = ((($26)) + 124|0);
     $127 = HEAP32[$skills34$3>>2]|0;
     $mul35$3 = ($127*100)|0;
     $128 = HEAP32[$maxkills36>>2]|0;
     $div37$3 = (($mul35$3|0) / ($128|0))&-1;
     $cmp38$3 = ($add$3|0)<($div37$3|0);
     $spec$store$select$3 = $cmp38$3 ? $add$3 : $div37$3;
     HEAP32[(393820)>>2] = $spec$store$select$3;
     $cmp38$3$not = $cmp38$3 ^ 1;
     $tobool50 = ($stillticking$1$2|0)==(0);
     $or$cond151 = $tobool50 & $cmp38$3$not;
     if (!($or$cond151)) {
      return;
     }
    }
    _S_StartSound(0,82);
    $33 = HEAP32[99841]|0;
    $inc52 = (($33) + 1)|0;
    HEAP32[99841] = $inc52;
    return;
    break;
   }
   case 4:  {
    $34 = HEAP32[99811]|0;
    $and57 = $34 & 3;
    $tobool58 = ($and57|0)==(0);
    if ($tobool58) {
     _S_StartSound(0,1);
    }
    $35 = HEAP32[99835]|0;
    $36 = HEAP32[99806]|0;
    $maxitems74 = ((($36)) + 20|0);
    $37 = HEAP32[45416]|0;
    $tobool65 = ($37|0)==(0);
    if ($tobool65) {
     $stillticking$3 = 0;
    } else {
     $38 = HEAP32[98448]|0;
     $add69 = (($38) + 2)|0;
     $sitems72 = ((($35)) + 8|0);
     $39 = HEAP32[$sitems72>>2]|0;
     $mul73 = ($39*100)|0;
     $40 = HEAP32[$maxitems74>>2]|0;
     $div75 = (($mul73|0) / ($40|0))&-1;
     $cmp76 = ($add69|0)<($div75|0);
     $spec$store$select134 = $cmp76 ? $add69 : $div75;
     HEAP32[98448] = $spec$store$select134;
     $spec$select135 = $cmp76&1;
     $stillticking$3 = $spec$select135;
    }
    $41 = HEAP32[(181668)>>2]|0;
    $tobool65$1 = ($41|0)==(0);
    if ($tobool65$1) {
     $stillticking$3$1 = $stillticking$3;
    } else {
     $129 = HEAP32[(393796)>>2]|0;
     $add69$1 = (($129) + 2)|0;
     $sitems72$1 = ((($35)) + 48|0);
     $130 = HEAP32[$sitems72$1>>2]|0;
     $mul73$1 = ($130*100)|0;
     $131 = HEAP32[$maxitems74>>2]|0;
     $div75$1 = (($mul73$1|0) / ($131|0))&-1;
     $cmp76$1 = ($add69$1|0)<($div75$1|0);
     $spec$store$select134$1 = $cmp76$1 ? $add69$1 : $div75$1;
     HEAP32[(393796)>>2] = $spec$store$select134$1;
     $spec$select135$1 = $cmp76$1 ? 1 : $stillticking$3;
     $stillticking$3$1 = $spec$select135$1;
    }
    $132 = HEAP32[(181672)>>2]|0;
    $tobool65$2 = ($132|0)==(0);
    if ($tobool65$2) {
     $stillticking$3$2 = $stillticking$3$1;
    } else {
     $133 = HEAP32[(393800)>>2]|0;
     $add69$2 = (($133) + 2)|0;
     $sitems72$2 = ((($35)) + 88|0);
     $134 = HEAP32[$sitems72$2>>2]|0;
     $mul73$2 = ($134*100)|0;
     $135 = HEAP32[$maxitems74>>2]|0;
     $div75$2 = (($mul73$2|0) / ($135|0))&-1;
     $cmp76$2 = ($add69$2|0)<($div75$2|0);
     $spec$store$select134$2 = $cmp76$2 ? $add69$2 : $div75$2;
     HEAP32[(393800)>>2] = $spec$store$select134$2;
     $spec$select135$2 = $cmp76$2 ? 1 : $stillticking$3$1;
     $stillticking$3$2 = $spec$select135$2;
    }
    $136 = HEAP32[(181676)>>2]|0;
    $tobool65$3 = ($136|0)==(0);
    if ($tobool65$3) {
     $tobool89$old = ($stillticking$3$2|0)==(0);
     if (!($tobool89$old)) {
      return;
     }
    } else {
     $137 = HEAP32[(393804)>>2]|0;
     $add69$3 = (($137) + 2)|0;
     $sitems72$3 = ((($35)) + 128|0);
     $138 = HEAP32[$sitems72$3>>2]|0;
     $mul73$3 = ($138*100)|0;
     $139 = HEAP32[$maxitems74>>2]|0;
     $div75$3 = (($mul73$3|0) / ($139|0))&-1;
     $cmp76$3 = ($add69$3|0)<($div75$3|0);
     $spec$store$select134$3 = $cmp76$3 ? $add69$3 : $div75$3;
     HEAP32[(393804)>>2] = $spec$store$select134$3;
     $cmp76$3$not = $cmp76$3 ^ 1;
     $tobool89 = ($stillticking$3$2|0)==(0);
     $or$cond152 = $tobool89 & $cmp76$3$not;
     if (!($or$cond152)) {
      return;
     }
    }
    _S_StartSound(0,82);
    $42 = HEAP32[99841]|0;
    $inc91 = (($42) + 1)|0;
    HEAP32[99841] = $inc91;
    return;
    break;
   }
   case 6:  {
    $43 = HEAP32[99811]|0;
    $and96 = $43 & 3;
    $tobool97 = ($and96|0)==(0);
    if ($tobool97) {
     _S_StartSound(0,1);
    }
    $44 = HEAP32[99835]|0;
    $45 = HEAP32[99806]|0;
    $maxsecret113 = ((($45)) + 24|0);
    $46 = HEAP32[45416]|0;
    $tobool104 = ($46|0)==(0);
    if ($tobool104) {
     $stillticking$5 = 0;
    } else {
     $47 = HEAP32[98444]|0;
     $add108 = (($47) + 2)|0;
     $ssecret111 = ((($44)) + 12|0);
     $48 = HEAP32[$ssecret111>>2]|0;
     $mul112 = ($48*100)|0;
     $49 = HEAP32[$maxsecret113>>2]|0;
     $div114 = (($mul112|0) / ($49|0))&-1;
     $cmp115 = ($add108|0)<($div114|0);
     $spec$store$select136 = $cmp115 ? $add108 : $div114;
     HEAP32[98444] = $spec$store$select136;
     $spec$select137 = $cmp115&1;
     $stillticking$5 = $spec$select137;
    }
    $50 = HEAP32[(181668)>>2]|0;
    $tobool104$1 = ($50|0)==(0);
    if ($tobool104$1) {
     $stillticking$5$1 = $stillticking$5;
    } else {
     $140 = HEAP32[(393780)>>2]|0;
     $add108$1 = (($140) + 2)|0;
     $ssecret111$1 = ((($44)) + 52|0);
     $141 = HEAP32[$ssecret111$1>>2]|0;
     $mul112$1 = ($141*100)|0;
     $142 = HEAP32[$maxsecret113>>2]|0;
     $div114$1 = (($mul112$1|0) / ($142|0))&-1;
     $cmp115$1 = ($add108$1|0)<($div114$1|0);
     $spec$store$select136$1 = $cmp115$1 ? $add108$1 : $div114$1;
     HEAP32[(393780)>>2] = $spec$store$select136$1;
     $spec$select137$1 = $cmp115$1 ? 1 : $stillticking$5;
     $stillticking$5$1 = $spec$select137$1;
    }
    $143 = HEAP32[(181672)>>2]|0;
    $tobool104$2 = ($143|0)==(0);
    if ($tobool104$2) {
     $stillticking$5$2 = $stillticking$5$1;
    } else {
     $144 = HEAP32[(393784)>>2]|0;
     $add108$2 = (($144) + 2)|0;
     $ssecret111$2 = ((($44)) + 92|0);
     $145 = HEAP32[$ssecret111$2>>2]|0;
     $mul112$2 = ($145*100)|0;
     $146 = HEAP32[$maxsecret113>>2]|0;
     $div114$2 = (($mul112$2|0) / ($146|0))&-1;
     $cmp115$2 = ($add108$2|0)<($div114$2|0);
     $spec$store$select136$2 = $cmp115$2 ? $add108$2 : $div114$2;
     HEAP32[(393784)>>2] = $spec$store$select136$2;
     $spec$select137$2 = $cmp115$2 ? 1 : $stillticking$5$1;
     $stillticking$5$2 = $spec$select137$2;
    }
    $147 = HEAP32[(181676)>>2]|0;
    $tobool104$3 = ($147|0)==(0);
    if ($tobool104$3) {
     $tobool128$old = ($stillticking$5$2|0)==(0);
     if (!($tobool128$old)) {
      return;
     }
    } else {
     $148 = HEAP32[(393788)>>2]|0;
     $add108$3 = (($148) + 2)|0;
     $ssecret111$3 = ((($44)) + 132|0);
     $149 = HEAP32[$ssecret111$3>>2]|0;
     $mul112$3 = ($149*100)|0;
     $150 = HEAP32[$maxsecret113>>2]|0;
     $div114$3 = (($mul112$3|0) / ($150|0))&-1;
     $cmp115$3 = ($add108$3|0)<($div114$3|0);
     $spec$store$select136$3 = $cmp115$3 ? $add108$3 : $div114$3;
     HEAP32[(393788)>>2] = $spec$store$select136$3;
     $cmp115$3$not = $cmp115$3 ^ 1;
     $tobool128 = ($stillticking$5$2|0)==(0);
     $or$cond153 = $tobool128 & $cmp115$3$not;
     if (!($or$cond153)) {
      return;
     }
    }
    _S_StartSound(0,82);
    $51 = HEAP32[99842]|0;
    $tobool130 = ($51|0)==(0);
    $lnot$ext = $tobool130&1;
    $mul131 = $lnot$ext << 1;
    $add132 = $mul131 | 1;
    $52 = HEAP32[99841]|0;
    $add133 = (($add132) + ($52))|0;
    HEAP32[99841] = $add133;
    return;
    break;
   }
   case 8:  {
    $53 = HEAP32[99811]|0;
    $and138 = $53 & 3;
    $tobool139 = ($and138|0)==(0);
    if ($tobool139) {
     _S_StartSound(0,1);
    }
    $54 = HEAP32[99835]|0;
    $55 = HEAP32[45416]|0;
    $tobool$i48 = ($55|0)==(0);
    $56 = HEAP32[(181668)>>2]|0;
    $tobool$1$i54 = ($56|0)==(0);
    $57 = HEAP32[(181672)>>2]|0;
    $tobool$2$i62 = ($57|0)==(0);
    $58 = HEAP32[(181676)>>2]|0;
    $tobool$3$i70 = ($58|0)==(0);
    do {
     if ($tobool$i48) {
      if ($tobool$1$i54) {
       $stillticking$7$us$1 = 0;
      } else {
       $151 = HEAP32[(393764)>>2]|0;
       $add150$us$1 = (($151) + 1)|0;
       HEAP32[(393764)>>2] = $add150$us$1;
       if ($tobool$2$i62) {
        $frags$1$2$i69$us$1 = 0;
       } else {
        $arrayidx4$2$i66$us$1 = ((($54)) + 68|0);
        $152 = HEAP32[$arrayidx4$2$i66$us$1>>2]|0;
        $frags$1$2$i69$us$1 = $152;
       }
       if ($tobool$3$i70) {
        $frags$1$3$i77$us$1 = $frags$1$2$i69$us$1;
       } else {
        $arrayidx4$3$i74$us$1 = ((($54)) + 72|0);
        $153 = HEAP32[$arrayidx4$3$i74$us$1>>2]|0;
        $add$3$i75$us$1 = (($153) + ($frags$1$2$i69$us$1))|0;
        $frags$1$3$i77$us$1 = $add$3$i75$us$1;
       }
       $arrayidx7$i78$us$1 = ((($54)) + 64|0);
       $154 = HEAP32[$arrayidx7$i78$us$1>>2]|0;
       $sub$i79$us$1 = (($frags$1$3$i77$us$1) - ($154))|0;
       $cmp153$us$1 = ($add150$us$1|0)<($sub$i79$us$1|0);
       if ($cmp153$us$1) {
        $stillticking$7$us$1 = 1;
       } else {
        HEAP32[(393764)>>2] = $sub$i79$us$1;
        $stillticking$7$us$1 = 0;
       }
      }
      if ($tobool$2$i62) {
       $stillticking$7$us$2 = $stillticking$7$us$1;
      } else {
       $155 = HEAP32[(393768)>>2]|0;
       $add150$us$2 = (($155) + 1)|0;
       HEAP32[(393768)>>2] = $add150$us$2;
       if ($tobool$1$i54) {
        $frags$1$1$i61$us$2 = 0;
       } else {
        $arrayidx4$1$i58$us$2 = ((($54)) + 104|0);
        $156 = HEAP32[$arrayidx4$1$i58$us$2>>2]|0;
        $frags$1$1$i61$us$2 = $156;
       }
       if ($tobool$3$i70) {
        $frags$1$3$i77$us$2 = $frags$1$1$i61$us$2;
       } else {
        $arrayidx4$3$i74$us$2 = ((($54)) + 112|0);
        $157 = HEAP32[$arrayidx4$3$i74$us$2>>2]|0;
        $add$3$i75$us$2 = (($157) + ($frags$1$1$i61$us$2))|0;
        $frags$1$3$i77$us$2 = $add$3$i75$us$2;
       }
       $arrayidx7$i78$us$2 = ((($54)) + 108|0);
       $158 = HEAP32[$arrayidx7$i78$us$2>>2]|0;
       $sub$i79$us$2 = (($frags$1$3$i77$us$2) - ($158))|0;
       $cmp153$us$2 = ($add150$us$2|0)<($sub$i79$us$2|0);
       if ($cmp153$us$2) {
        $stillticking$7$us$2 = 1;
       } else {
        HEAP32[(393768)>>2] = $sub$i79$us$2;
        $stillticking$7$us$2 = $stillticking$7$us$1;
       }
      }
      if ($tobool$3$i70) {
       $stillticking$6$lcssa = $stillticking$7$us$2;
      } else {
       $159 = HEAP32[(393772)>>2]|0;
       $add150$us$3 = (($159) + 1)|0;
       HEAP32[(393772)>>2] = $add150$us$3;
       if ($tobool$1$i54) {
        $frags$1$1$i61$us$3 = 0;
       } else {
        $arrayidx4$1$i58$us$3 = ((($54)) + 144|0);
        $160 = HEAP32[$arrayidx4$1$i58$us$3>>2]|0;
        $frags$1$1$i61$us$3 = $160;
       }
       if ($tobool$2$i62) {
        $frags$1$2$i69$us$3 = $frags$1$1$i61$us$3;
       } else {
        $arrayidx4$2$i66$us$3 = ((($54)) + 148|0);
        $161 = HEAP32[$arrayidx4$2$i66$us$3>>2]|0;
        $add$2$i67$us$3 = (($161) + ($frags$1$1$i61$us$3))|0;
        $frags$1$2$i69$us$3 = $add$2$i67$us$3;
       }
       $arrayidx7$i78$us$3$phi$trans$insert = ((($54)) + 152|0);
       $$pre142 = HEAP32[$arrayidx7$i78$us$3$phi$trans$insert>>2]|0;
       $sub$i79$us$3 = (($frags$1$2$i69$us$3) - ($$pre142))|0;
       $cmp153$us$3 = ($add150$us$3|0)<($sub$i79$us$3|0);
       if ($cmp153$us$3) {
        return;
       } else {
        HEAP32[(393772)>>2] = $sub$i79$us$3;
        $stillticking$6$lcssa = $stillticking$7$us$2;
        break;
       }
      }
     } else {
      $59 = HEAP32[98440]|0;
      $add150$us99 = (($59) + 1)|0;
      HEAP32[98440] = $add150$us99;
      if ($tobool$1$i54) {
       if ($tobool$2$i62) {
        $frags$1$2$i69$us117 = 0;
       } else {
        $arrayidx4$2$i66$us114 = ((($54)) + 28|0);
        $60 = HEAP32[$arrayidx4$2$i66$us114>>2]|0;
        $frags$1$2$i69$us117 = $60;
       }
       if ($tobool$3$i70) {
        $frags$1$3$i77$us124 = $frags$1$2$i69$us117;
       } else {
        $arrayidx4$3$i74$us121 = ((($54)) + 32|0);
        $61 = HEAP32[$arrayidx4$3$i74$us121>>2]|0;
        $add$3$i75$us122 = (($61) + ($frags$1$2$i69$us117))|0;
        $frags$1$3$i77$us124 = $add$3$i75$us122;
       }
       $arrayidx7$i78$us125 = ((($54)) + 20|0);
       $62 = HEAP32[$arrayidx7$i78$us125>>2]|0;
       $sub$i79$us126 = (($frags$1$3$i77$us124) - ($62))|0;
       $cmp153$us127 = ($add150$us99|0)<($sub$i79$us126|0);
       if ($cmp153$us127) {
        $stillticking$7$us131 = 1;
       } else {
        HEAP32[98440] = $sub$i79$us126;
        $stillticking$7$us131 = 0;
       }
       if ($tobool$2$i62) {
        $stillticking$7$us131$2 = $stillticking$7$us131;
       } else {
        $162 = HEAP32[(393768)>>2]|0;
        $add150$us99$2 = (($162) + 1)|0;
        HEAP32[(393768)>>2] = $add150$us99$2;
        $arrayidx4$i51$us101$2 = ((($54)) + 100|0);
        $163 = HEAP32[$arrayidx4$i51$us101$2>>2]|0;
        if ($tobool$3$i70) {
         $frags$1$3$i77$us124$2 = $163;
        } else {
         $arrayidx4$3$i74$us121$2 = ((($54)) + 112|0);
         $164 = HEAP32[$arrayidx4$3$i74$us121$2>>2]|0;
         $add$3$i75$us122$2 = (($164) + ($163))|0;
         $frags$1$3$i77$us124$2 = $add$3$i75$us122$2;
        }
        $arrayidx7$i78$us125$2 = ((($54)) + 108|0);
        $165 = HEAP32[$arrayidx7$i78$us125$2>>2]|0;
        $sub$i79$us126$2 = (($frags$1$3$i77$us124$2) - ($165))|0;
        $cmp153$us127$2 = ($add150$us99$2|0)<($sub$i79$us126$2|0);
        if ($cmp153$us127$2) {
         $stillticking$7$us131$2 = 1;
        } else {
         HEAP32[(393768)>>2] = $sub$i79$us126$2;
         $stillticking$7$us131$2 = $stillticking$7$us131;
        }
       }
       if ($tobool$3$i70) {
        $stillticking$6$lcssa = $stillticking$7$us131$2;
        break;
       }
       $166 = HEAP32[(393772)>>2]|0;
       $add150$us99$3 = (($166) + 1)|0;
       HEAP32[(393772)>>2] = $add150$us99$3;
       $arrayidx4$i51$us101$3 = ((($54)) + 140|0);
       $167 = HEAP32[$arrayidx4$i51$us101$3>>2]|0;
       if ($tobool$2$i62) {
        $frags$1$2$i69$us117$3 = $167;
       } else {
        $arrayidx4$2$i66$us114$3 = ((($54)) + 148|0);
        $168 = HEAP32[$arrayidx4$2$i66$us114$3>>2]|0;
        $add$2$i67$us115$3 = (($168) + ($167))|0;
        $frags$1$2$i69$us117$3 = $add$2$i67$us115$3;
       }
       $arrayidx7$i78$us125$3$phi$trans$insert = ((($54)) + 152|0);
       $$pre141 = HEAP32[$arrayidx7$i78$us125$3$phi$trans$insert>>2]|0;
       $sub$i79$us126$3 = (($frags$1$2$i69$us117$3) - ($$pre141))|0;
       $cmp153$us127$3 = ($add150$us99$3|0)<($sub$i79$us126$3|0);
       if ($cmp153$us127$3) {
        return;
       } else {
        HEAP32[(393772)>>2] = $sub$i79$us126$3;
        $stillticking$6$lcssa = $stillticking$7$us131$2;
        break;
       }
      }
      $arrayidx4$1$i58 = ((($54)) + 24|0);
      $63 = HEAP32[$arrayidx4$1$i58>>2]|0;
      if ($tobool$2$i62) {
       $frags$1$2$i69 = $63;
      } else {
       $arrayidx4$2$i66 = ((($54)) + 28|0);
       $64 = HEAP32[$arrayidx4$2$i66>>2]|0;
       $add$2$i67 = (($64) + ($63))|0;
       $frags$1$2$i69 = $add$2$i67;
      }
      if ($tobool$3$i70) {
       $frags$1$3$i77 = $frags$1$2$i69;
      } else {
       $arrayidx4$3$i74 = ((($54)) + 32|0);
       $65 = HEAP32[$arrayidx4$3$i74>>2]|0;
       $add$3$i75 = (($65) + ($frags$1$2$i69))|0;
       $frags$1$3$i77 = $add$3$i75;
      }
      $arrayidx7$i78 = ((($54)) + 20|0);
      $66 = HEAP32[$arrayidx7$i78>>2]|0;
      $sub$i79 = (($frags$1$3$i77) - ($66))|0;
      $cmp153 = ($add150$us99|0)<($sub$i79|0);
      if ($cmp153) {
       $stillticking$7 = 1;
      } else {
       HEAP32[98440] = $sub$i79;
       $stillticking$7 = 0;
      }
      $169 = HEAP32[(393764)>>2]|0;
      $add150$1 = (($169) + 1)|0;
      HEAP32[(393764)>>2] = $add150$1;
      $arrayidx4$i51$1 = ((($54)) + 60|0);
      $170 = HEAP32[$arrayidx4$i51$1>>2]|0;
      if ($tobool$2$i62) {
       $frags$1$2$i69$1 = $170;
      } else {
       $arrayidx4$2$i66$1 = ((($54)) + 68|0);
       $171 = HEAP32[$arrayidx4$2$i66$1>>2]|0;
       $add$2$i67$1 = (($171) + ($170))|0;
       $frags$1$2$i69$1 = $add$2$i67$1;
      }
      if ($tobool$3$i70) {
       $frags$1$3$i77$1 = $frags$1$2$i69$1;
      } else {
       $arrayidx4$3$i74$1 = ((($54)) + 72|0);
       $172 = HEAP32[$arrayidx4$3$i74$1>>2]|0;
       $add$3$i75$1 = (($172) + ($frags$1$2$i69$1))|0;
       $frags$1$3$i77$1 = $add$3$i75$1;
      }
      $arrayidx7$i78$1 = ((($54)) + 64|0);
      $173 = HEAP32[$arrayidx7$i78$1>>2]|0;
      $sub$i79$1 = (($frags$1$3$i77$1) - ($173))|0;
      $cmp153$1 = ($add150$1|0)<($sub$i79$1|0);
      if ($cmp153$1) {
       $stillticking$7$1 = 1;
      } else {
       HEAP32[(393764)>>2] = $sub$i79$1;
       $stillticking$7$1 = $stillticking$7;
      }
      if ($tobool$2$i62) {
       $stillticking$7$2 = $stillticking$7$1;
      } else {
       $174 = HEAP32[(393768)>>2]|0;
       $add150$2 = (($174) + 1)|0;
       HEAP32[(393768)>>2] = $add150$2;
       $arrayidx4$i51$2 = ((($54)) + 100|0);
       $175 = HEAP32[$arrayidx4$i51$2>>2]|0;
       $arrayidx4$1$i58$2 = ((($54)) + 104|0);
       $176 = HEAP32[$arrayidx4$1$i58$2>>2]|0;
       $add$1$i59$2 = (($176) + ($175))|0;
       if ($tobool$3$i70) {
        $frags$1$3$i77$2 = $add$1$i59$2;
       } else {
        $arrayidx4$3$i74$2 = ((($54)) + 112|0);
        $177 = HEAP32[$arrayidx4$3$i74$2>>2]|0;
        $add$3$i75$2 = (($177) + ($add$1$i59$2))|0;
        $frags$1$3$i77$2 = $add$3$i75$2;
       }
       $arrayidx7$i78$2 = ((($54)) + 108|0);
       $178 = HEAP32[$arrayidx7$i78$2>>2]|0;
       $sub$i79$2 = (($frags$1$3$i77$2) - ($178))|0;
       $cmp153$2 = ($add150$2|0)<($sub$i79$2|0);
       if ($cmp153$2) {
        $stillticking$7$2 = 1;
       } else {
        HEAP32[(393768)>>2] = $sub$i79$2;
        $stillticking$7$2 = $stillticking$7$1;
       }
      }
      if ($tobool$3$i70) {
       $stillticking$6$lcssa = $stillticking$7$2;
      } else {
       $179 = HEAP32[(393772)>>2]|0;
       $add150$3 = (($179) + 1)|0;
       HEAP32[(393772)>>2] = $add150$3;
       $arrayidx4$i51$3 = ((($54)) + 140|0);
       $180 = HEAP32[$arrayidx4$i51$3>>2]|0;
       $arrayidx4$1$i58$3 = ((($54)) + 144|0);
       $181 = HEAP32[$arrayidx4$1$i58$3>>2]|0;
       $add$1$i59$3 = (($181) + ($180))|0;
       if ($tobool$2$i62) {
        $frags$1$2$i69$3 = $add$1$i59$3;
       } else {
        $arrayidx4$2$i66$3 = ((($54)) + 148|0);
        $182 = HEAP32[$arrayidx4$2$i66$3>>2]|0;
        $add$2$i67$3 = (($182) + ($add$1$i59$3))|0;
        $frags$1$2$i69$3 = $add$2$i67$3;
       }
       $arrayidx7$i78$3$phi$trans$insert = ((($54)) + 152|0);
       $$pre = HEAP32[$arrayidx7$i78$3$phi$trans$insert>>2]|0;
       $sub$i79$3 = (($frags$1$2$i69$3) - ($$pre))|0;
       $cmp153$3 = ($add150$3|0)<($sub$i79$3|0);
       if ($cmp153$3) {
        return;
       } else {
        HEAP32[(393772)>>2] = $sub$i79$3;
        $stillticking$6$lcssa = $stillticking$7$2;
        break;
       }
      }
     }
    } while(0);
    $tobool161 = ($stillticking$6$lcssa|0)==(0);
    if (!($tobool161)) {
     return;
    }
    _S_StartSound(0,57);
    $67 = HEAP32[99841]|0;
    $inc163 = (($67) + 1)|0;
    HEAP32[99841] = $inc163;
    return;
    break;
   }
   default: {
    $and176 = $1 & 1;
    $tobool177 = ($and176|0)==(0);
    if ($tobool177) {
     return;
    }
    $70 = HEAP32[99837]|0;
    $dec = (($70) + -1)|0;
    HEAP32[99837] = $dec;
    $tobool179 = ($dec|0)==(0);
    if (!($tobool179)) {
     return;
    }
    $inc181 = (($1) + 1)|0;
    HEAP32[99841] = $inc181;
    HEAP32[99837] = 35;
    return;
   }
   }
  }
 } while(0);
 $tobool168 = ($68|0)==(0);
 if ($tobool168) {
  return;
 }
 _S_StartSound(0,3);
 $69 = HEAP32[32140]|0;
 $cmp170 = ($69|0)==(2);
 if ($cmp170) {
  HEAP32[99812] = -1;
  HEAP32[99832] = 0;
  HEAP32[99833] = 10;
  return;
 } else {
  HEAP32[99812] = 1;
  HEAP32[99832] = 0;
  HEAP32[99833] = 140;
  _WI_initAnimatedBack();
  return;
 }
}
function _WI_drawNetgameStats() {
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $add = 0, $add10 = 0, $add15 = 0, $add16 = 0, $add23 = 0, $add28 = 0, $add29 = 0, $add3 = 0, $add37 = 0, $add4 = 0, $add43 = 0;
 var $add48 = 0, $add56 = 0, $add61 = 0, $add75 = 0, $add77 = 0, $add79 = 0, $add83 = 0, $add87 = 0, $add93 = 0, $addconv = 0, $addconv32 = 0, $addconv33 = 0, $addconv34 = 0, $addconv35 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i$i60 = 0, $arrayidx$i$i87 = 0, $arrayidx$i94 = 0;
 var $arrayidx13$i = 0, $arrayidx62 = 0, $arrayidx7$i = 0, $arrayidx78 = 0, $arrayidx82 = 0, $arrayidx86 = 0, $arrayidx91 = 0, $cmp$i = 0, $cmp$i36 = 0, $cmp$i38 = 0, $cmp$i65 = 0, $cmp1$i = 0, $cmp10$i = 0, $cmp10$i$i = 0, $cmp10$i$i50 = 0, $cmp10$i$i77 = 0, $cmp5$i = 0, $cmp5$i93 = 0, $cmp67 = 0, $cmp9$i = 0;
 var $conv = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i40 = 0, $conv$i$i67 = 0, $conv18 = 0, $conv31 = 0, $conv45 = 0, $conv47 = 0, $conv6 = 0, $conv64 = 0, $conv72 = 0, $ctr$i = 0, $dec$i = 0, $dec$i$i = 0, $dec$i$i57 = 0, $dec$i$i84 = 0, $digits$addr$023$i = 0, $digits$addr$023$i$i = 0, $digits$addr$023$i$i45 = 0;
 var $digits$addr$023$i$i72 = 0, $digits$addr$1$i = 0, $digits$addr$220$i = 0, $digits$addr$220$i$i = 0, $digits$addr$220$i$i$ph = 0, $digits$addr$220$i$i55 = 0, $digits$addr$220$i$i55$ph = 0, $digits$addr$220$i$i82 = 0, $digits$addr$220$i$i82$ph = 0, $div$i = 0, $div$i$i = 0, $div$i$i46 = 0, $div$i$i73 = 0, $div18$i = 0, $div18$i$i = 0, $div18$i$i61 = 0, $div18$i$i88 = 0, $exitcond = 0, $height = 0, $i$012$i = 0;
 var $i$096 = 0, $inc = 0, $inc$i = 0, $inc$i$i = 0, $inc$i$i47 = 0, $inc$i$i74 = 0, $inc$i92 = 0, $lnot$ext = 0, $lnot$ext13 = 0, $lnot$ext26 = 0, $lnot$ext59 = 0, $mul = 0, $mul14 = 0, $mul27 = 0, $mul60 = 0, $n$addr$119$i = 0, $n$addr$119$i$i = 0, $n$addr$119$i$i56 = 0, $n$addr$119$i$i83 = 0, $spec$select$i = 0;
 var $sub = 0, $sub$i = 0, $sub17$i = 0, $sub17$i$i = 0, $sub17$i$i58 = 0, $sub17$i$i85 = 0, $sub19 = 0, $sub22$i = 0, $sub32 = 0, $sub46 = 0, $sub65 = 0, $sub73 = 0, $sub76 = 0, $sub80 = 0, $sub84 = 0, $temp$024$i = 0, $temp$024$i$i = 0, $temp$024$i$i44 = 0, $temp$024$i$i71 = 0, $temp$024$off$i = 0;
 var $temp$024$off$i$i = 0, $temp$024$off$i$i48 = 0, $temp$024$off$i$i75 = 0, $tobool = 0, $tobool$i = 0, $tobool$i$i = 0, $tobool$i$i41 = 0, $tobool$i$i68 = 0, $tobool11 = 0, $tobool15$i = 0, $tobool15$i$i = 0, $tobool15$i$i62 = 0, $tobool15$i$i89 = 0, $tobool24 = 0, $tobool33 = 0, $tobool50 = 0, $tobool57 = 0, $tobool88 = 0, $x$addr$021$i = 0, $x$addr$021$i$i = 0;
 var $x$addr$021$i$i54 = 0, $x$addr$021$i$i81 = 0, $x$i = 0, $y$095 = 0, $y$1 = 0, $y$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99814]|0;
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8);
 $conv = $1 << 16 >> 16;
 $2 = HEAP32[99805]|0;
 _V_DrawPatch(0,0,$2);
 $3 = HEAP32[32140]|0;
 $cmp$i = ($3|0)==(2);
 if (!($cmp$i)) {
  $4 = HEAP32[99806]|0;
  $5 = HEAP32[$4>>2]|0;
  $cmp1$i = ($5|0)>(2);
  if (!($cmp1$i)) {
   $6 = $5;$87 = $4;$i$012$i = 0;
   while(1) {
    $arrayidx7$i = (125456 + ($6<<2)|0);
    $7 = HEAP32[$arrayidx7$i>>2]|0;
    $ctr$i = (((($7) + (($i$012$i*56)|0)|0)) + 48|0);
    $8 = HEAP32[$ctr$i>>2]|0;
    $cmp9$i = ($8|0)>(-1);
    if ($cmp9$i) {
     $arrayidx13$i = ((((($7) + (($i$012$i*56)|0)|0)) + 28|0) + ($8<<2)|0);
     $y$i = (((($7) + (($i$012$i*56)|0)|0)) + 16|0);
     $x$i = (((($7) + (($i$012$i*56)|0)|0)) + 12|0);
     $9 = HEAP32[$x$i>>2]|0;
     $10 = HEAP32[$y$i>>2]|0;
     $11 = HEAP32[$arrayidx13$i>>2]|0;
     _V_DrawPatch($9,$10,$11);
     $$pre$i = HEAP32[99806]|0;
     $13 = $$pre$i;
    } else {
     $13 = $87;
    }
    $inc$i = (($i$012$i) + 1)|0;
    $12 = HEAP32[$13>>2]|0;
    $arrayidx$i = (125472 + ($12<<2)|0);
    $14 = HEAP32[$arrayidx$i>>2]|0;
    $cmp5$i = ($inc$i|0)<($14|0);
    if ($cmp5$i) {
     $6 = $12;$87 = $13;$i$012$i = $inc$i;
    } else {
     break;
    }
   }
  }
 }
 _WI_drawLF();
 $15 = HEAP32[99840]|0;
 $16 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8);
 $17 = (($16<<16>>16) / 2)&-1;
 $addconv = (($17) + 32)<<16>>16;
 $add = $addconv << 16 >> 16;
 $18 = HEAP32[99842]|0;
 $tobool = ($18|0)==(0);
 $lnot$ext = $tobool&1;
 $mul = $lnot$ext << 5;
 $19 = HEAP32[99822]|0;
 $20 = HEAPU8[$19>>0]|(HEAPU8[$19+1>>0]<<8);
 $conv6 = $20 << 16 >> 16;
 $add3 = (($add) + 64)|0;
 $add4 = (($add3) + ($mul))|0;
 $sub = (($add4) - ($conv6))|0;
 _V_DrawPatch($sub,50,$19);
 $21 = HEAP32[99840]|0;
 $22 = HEAPU8[$21>>0]|(HEAPU8[$21+1>>0]<<8);
 $23 = (($22<<16>>16) / 2)&-1;
 $addconv32 = (($23) + 32)<<16>>16;
 $add10 = $addconv32 << 16 >> 16;
 $24 = HEAP32[99842]|0;
 $tobool11 = ($24|0)==(0);
 $lnot$ext13 = $tobool11&1;
 $mul14 = $lnot$ext13 << 5;
 $25 = HEAP32[99825]|0;
 $26 = HEAPU8[$25>>0]|(HEAPU8[$25+1>>0]<<8);
 $conv18 = $26 << 16 >> 16;
 $add15 = (($add10) + 128)|0;
 $add16 = (($add15) + ($mul14))|0;
 $sub19 = (($add16) - ($conv18))|0;
 _V_DrawPatch($sub19,50,$25);
 $27 = HEAP32[99840]|0;
 $28 = HEAPU8[$27>>0]|(HEAPU8[$27+1>>0]<<8);
 $29 = (($28<<16>>16) / 2)&-1;
 $addconv33 = (($29) + 32)<<16>>16;
 $add23 = $addconv33 << 16 >> 16;
 $30 = HEAP32[99842]|0;
 $tobool24 = ($30|0)==(0);
 $lnot$ext26 = $tobool24&1;
 $mul27 = $lnot$ext26 << 5;
 $31 = HEAP32[99823]|0;
 $32 = HEAPU8[$31>>0]|(HEAPU8[$31+1>>0]<<8);
 $conv31 = $32 << 16 >> 16;
 $add28 = (($add23) + 192)|0;
 $add29 = (($add28) + ($mul27))|0;
 $sub32 = (($add29) - ($conv31))|0;
 _V_DrawPatch($sub32,50,$31);
 $33 = HEAP32[99842]|0;
 $tobool33 = ($33|0)==(0);
 if (!($tobool33)) {
  $34 = HEAP32[99840]|0;
  $35 = HEAPU8[$34>>0]|(HEAPU8[$34+1>>0]<<8);
  $36 = (($35<<16>>16) / 2)&-1;
  $addconv35 = (($36) + 32)<<16>>16;
  $add37 = $addconv35 << 16 >> 16;
  $add43 = (($add37) + 256)|0;
  $37 = HEAP32[99826]|0;
  $38 = HEAPU8[$37>>0]|(HEAPU8[$37+1>>0]<<8);
  $conv45 = $38 << 16 >> 16;
  $sub46 = (($add43) - ($conv45))|0;
  _V_DrawPatch($sub46,50,$37);
 }
 $39 = HEAP32[99822]|0;
 $height = ((($39)) + 2|0);
 $40 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
 $conv47 = $40 << 16 >> 16;
 $add48 = (($conv47) + 50)|0;
 $add75 = (64 - ($conv))|0;
 $add79 = (128 - ($conv))|0;
 $add83 = (192 - ($conv))|0;
 $i$096 = 0;$y$095 = $add48;
 while(1) {
  $arrayidx = (181664 + ($i$096<<2)|0);
  $41 = HEAP32[$arrayidx>>2]|0;
  $tobool50 = ($41|0)==(0);
  if ($tobool50) {
   $y$1 = $y$095;
  } else {
   $42 = HEAP32[99840]|0;
   $43 = HEAPU8[$42>>0]|(HEAPU8[$42+1>>0]<<8);
   $44 = (($43<<16>>16) / 2)&-1;
   $addconv34 = (($44) + 32)<<16>>16;
   $add56 = $addconv34 << 16 >> 16;
   $45 = HEAP32[99842]|0;
   $tobool57 = ($45|0)==(0);
   $lnot$ext59 = $tobool57&1;
   $mul60 = $lnot$ext59 << 5;
   $add61 = (($mul60) + ($add56))|0;
   $arrayidx62 = (393648 + ($i$096<<2)|0);
   $46 = HEAP32[$arrayidx62>>2]|0;
   $47 = HEAPU8[$46>>0]|(HEAPU8[$46+1>>0]<<8);
   $conv64 = $47 << 16 >> 16;
   $sub65 = (($add61) - ($conv64))|0;
   _V_DrawPatch($sub65,$y$095,$46);
   $48 = HEAP32[99838]|0;
   $cmp67 = ($i$096|0)==($48|0);
   if ($cmp67) {
    $49 = HEAP32[$arrayidx62>>2]|0;
    $50 = HEAPU8[$49>>0]|(HEAPU8[$49+1>>0]<<8);
    $conv72 = $50 << 16 >> 16;
    $sub73 = (($add61) - ($conv72))|0;
    $51 = HEAP32[99840]|0;
    _V_DrawPatch($sub73,$y$095,$51);
   }
   $sub76 = (($add75) + ($add61))|0;
   $add77 = (($y$095) + 10)|0;
   $arrayidx78 = (393808 + ($i$096<<2)|0);
   $52 = HEAP32[$arrayidx78>>2]|0;
   $cmp$i36 = ($52|0)<(0);
   do {
    if (!($cmp$i36)) {
     $53 = HEAP32[99814]|0;
     _V_DrawPatch($sub76,$add77,$53);
     $54 = HEAP32[98400]|0;
     $55 = HEAPU8[$54>>0]|(HEAPU8[$54+1>>0]<<8);
     $conv$i$i = $55 << 16 >> 16;
     $tobool$i$i = ($52|0)==(0);
     if ($tobool$i$i) {
      $digits$addr$220$i$i$ph = 1;
     } else {
      $digits$addr$023$i$i = 0;$temp$024$i$i = $52;
      while(1) {
       $div$i$i = (($temp$024$i$i|0) / 10)&-1;
       $inc$i$i = (($digits$addr$023$i$i) + 1)|0;
       $temp$024$off$i$i = (($temp$024$i$i) + 9)|0;
       $56 = ($temp$024$off$i$i>>>0)<(19);
       if ($56) {
        break;
       } else {
        $digits$addr$023$i$i = $inc$i$i;$temp$024$i$i = $div$i$i;
       }
      }
      $cmp10$i$i = ($52|0)==(1994);
      if ($cmp10$i$i) {
       break;
      } else {
       $digits$addr$220$i$i$ph = $inc$i$i;
      }
     }
     $digits$addr$220$i$i = $digits$addr$220$i$i$ph;$n$addr$119$i$i = $52;$x$addr$021$i$i = $sub76;
     while(1) {
      $dec$i$i = (($digits$addr$220$i$i) + -1)|0;
      $sub17$i$i = (($x$addr$021$i$i) - ($conv$i$i))|0;
      $div18$i$i = (($n$addr$119$i$i|0) / 10)&-1;
      $57 = ($div18$i$i*10)|0;
      $58 = (($n$addr$119$i$i) - ($57))|0;
      $arrayidx$i$i = (393600 + ($58<<2)|0);
      $59 = HEAP32[$arrayidx$i$i>>2]|0;
      _V_DrawPatch($sub17$i$i,$add77,$59);
      $tobool15$i$i = ($dec$i$i|0)==(0);
      if ($tobool15$i$i) {
       break;
      } else {
       $digits$addr$220$i$i = $dec$i$i;$n$addr$119$i$i = $div18$i$i;$x$addr$021$i$i = $sub17$i$i;
      }
     }
    }
   } while(0);
   $sub80 = (($add79) + ($add61))|0;
   $arrayidx82 = (393792 + ($i$096<<2)|0);
   $60 = HEAP32[$arrayidx82>>2]|0;
   $cmp$i38 = ($60|0)<(0);
   do {
    if (!($cmp$i38)) {
     $61 = HEAP32[99814]|0;
     _V_DrawPatch($sub80,$add77,$61);
     $62 = HEAP32[98400]|0;
     $63 = HEAPU8[$62>>0]|(HEAPU8[$62+1>>0]<<8);
     $conv$i$i40 = $63 << 16 >> 16;
     $tobool$i$i41 = ($60|0)==(0);
     if ($tobool$i$i41) {
      $digits$addr$220$i$i55$ph = 1;
     } else {
      $digits$addr$023$i$i45 = 0;$temp$024$i$i44 = $60;
      while(1) {
       $div$i$i46 = (($temp$024$i$i44|0) / 10)&-1;
       $inc$i$i47 = (($digits$addr$023$i$i45) + 1)|0;
       $temp$024$off$i$i48 = (($temp$024$i$i44) + 9)|0;
       $64 = ($temp$024$off$i$i48>>>0)<(19);
       if ($64) {
        break;
       } else {
        $digits$addr$023$i$i45 = $inc$i$i47;$temp$024$i$i44 = $div$i$i46;
       }
      }
      $cmp10$i$i50 = ($60|0)==(1994);
      if ($cmp10$i$i50) {
       break;
      } else {
       $digits$addr$220$i$i55$ph = $inc$i$i47;
      }
     }
     $digits$addr$220$i$i55 = $digits$addr$220$i$i55$ph;$n$addr$119$i$i56 = $60;$x$addr$021$i$i54 = $sub80;
     while(1) {
      $dec$i$i57 = (($digits$addr$220$i$i55) + -1)|0;
      $sub17$i$i58 = (($x$addr$021$i$i54) - ($conv$i$i40))|0;
      $div18$i$i61 = (($n$addr$119$i$i56|0) / 10)&-1;
      $65 = ($div18$i$i61*10)|0;
      $66 = (($n$addr$119$i$i56) - ($65))|0;
      $arrayidx$i$i60 = (393600 + ($66<<2)|0);
      $67 = HEAP32[$arrayidx$i$i60>>2]|0;
      _V_DrawPatch($sub17$i$i58,$add77,$67);
      $tobool15$i$i62 = ($dec$i$i57|0)==(0);
      if ($tobool15$i$i62) {
       break;
      } else {
       $digits$addr$220$i$i55 = $dec$i$i57;$n$addr$119$i$i56 = $div18$i$i61;$x$addr$021$i$i54 = $sub17$i$i58;
      }
     }
    }
   } while(0);
   $sub84 = (($add83) + ($add61))|0;
   $arrayidx86 = (393776 + ($i$096<<2)|0);
   $68 = HEAP32[$arrayidx86>>2]|0;
   $cmp$i65 = ($68|0)<(0);
   do {
    if (!($cmp$i65)) {
     $69 = HEAP32[99814]|0;
     _V_DrawPatch($sub84,$add77,$69);
     $70 = HEAP32[98400]|0;
     $71 = HEAPU8[$70>>0]|(HEAPU8[$70+1>>0]<<8);
     $conv$i$i67 = $71 << 16 >> 16;
     $tobool$i$i68 = ($68|0)==(0);
     if ($tobool$i$i68) {
      $digits$addr$220$i$i82$ph = 1;
     } else {
      $digits$addr$023$i$i72 = 0;$temp$024$i$i71 = $68;
      while(1) {
       $div$i$i73 = (($temp$024$i$i71|0) / 10)&-1;
       $inc$i$i74 = (($digits$addr$023$i$i72) + 1)|0;
       $temp$024$off$i$i75 = (($temp$024$i$i71) + 9)|0;
       $72 = ($temp$024$off$i$i75>>>0)<(19);
       if ($72) {
        break;
       } else {
        $digits$addr$023$i$i72 = $inc$i$i74;$temp$024$i$i71 = $div$i$i73;
       }
      }
      $cmp10$i$i77 = ($68|0)==(1994);
      if ($cmp10$i$i77) {
       break;
      } else {
       $digits$addr$220$i$i82$ph = $inc$i$i74;
      }
     }
     $digits$addr$220$i$i82 = $digits$addr$220$i$i82$ph;$n$addr$119$i$i83 = $68;$x$addr$021$i$i81 = $sub84;
     while(1) {
      $dec$i$i84 = (($digits$addr$220$i$i82) + -1)|0;
      $sub17$i$i85 = (($x$addr$021$i$i81) - ($conv$i$i67))|0;
      $div18$i$i88 = (($n$addr$119$i$i83|0) / 10)&-1;
      $73 = ($div18$i$i88*10)|0;
      $74 = (($n$addr$119$i$i83) - ($73))|0;
      $arrayidx$i$i87 = (393600 + ($74<<2)|0);
      $75 = HEAP32[$arrayidx$i$i87>>2]|0;
      _V_DrawPatch($sub17$i$i85,$add77,$75);
      $tobool15$i$i89 = ($dec$i$i84|0)==(0);
      if ($tobool15$i$i89) {
       break;
      } else {
       $digits$addr$220$i$i82 = $dec$i$i84;$n$addr$119$i$i83 = $div18$i$i88;$x$addr$021$i$i81 = $sub17$i$i85;
      }
     }
    }
   } while(0);
   $76 = HEAP32[99842]|0;
   $tobool88 = ($76|0)==(0);
   if (!($tobool88)) {
    $add87 = (($add61) + 256)|0;
    $arrayidx91 = (393760 + ($i$096<<2)|0);
    $77 = HEAP32[$arrayidx91>>2]|0;
    $78 = HEAP32[98400]|0;
    $79 = HEAPU8[$78>>0]|(HEAPU8[$78+1>>0]<<8);
    $conv$i = $79 << 16 >> 16;
    $tobool$i = ($77|0)==(0);
    if ($tobool$i) {
     $digits$addr$1$i = 1;
    } else {
     $digits$addr$023$i = 0;$temp$024$i = $77;
     while(1) {
      $div$i = (($temp$024$i|0) / 10)&-1;
      $inc$i92 = (($digits$addr$023$i) + 1)|0;
      $temp$024$off$i = (($temp$024$i) + 9)|0;
      $80 = ($temp$024$off$i>>>0)<(19);
      if ($80) {
       $digits$addr$1$i = $inc$i92;
       break;
      } else {
       $digits$addr$023$i = $inc$i92;$temp$024$i = $div$i;
      }
     }
    }
    $cmp5$i93 = ($77|0)<(0);
    $sub$i = (0 - ($77))|0;
    $spec$select$i = $cmp5$i93 ? $sub$i : $77;
    $cmp10$i = ($spec$select$i|0)==(1994);
    if (!($cmp10$i)) {
     $digits$addr$220$i = $digits$addr$1$i;$n$addr$119$i = $spec$select$i;$x$addr$021$i = $add87;
     while(1) {
      $dec$i = (($digits$addr$220$i) + -1)|0;
      $sub17$i = (($x$addr$021$i) - ($conv$i))|0;
      $div18$i = (($n$addr$119$i|0) / 10)&-1;
      $81 = ($div18$i*10)|0;
      $82 = (($n$addr$119$i) - ($81))|0;
      $arrayidx$i94 = (393600 + ($82<<2)|0);
      $83 = HEAP32[$arrayidx$i94>>2]|0;
      _V_DrawPatch($sub17$i,$add77,$83);
      $tobool15$i = ($dec$i|0)==(0);
      if ($tobool15$i) {
       break;
      } else {
       $digits$addr$220$i = $dec$i;$n$addr$119$i = $div18$i;$x$addr$021$i = $sub17$i;
      }
     }
     if ($cmp5$i93) {
      $84 = Math_imul($digits$addr$1$i, $conv$i)|0;
      $85 = (($add61) + 248)|0;
      $sub22$i = (($85) - ($84))|0;
      $86 = HEAP32[99813]|0;
      _V_DrawPatch($sub22$i,$add77,$86);
     }
    }
   }
   $add93 = (($y$095) + 33)|0;
   $y$1 = $add93;
  }
  $inc = (($i$096) + 1)|0;
  $exitcond = ($inc|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $i$096 = $inc;$y$095 = $y$1;
  }
 }
 return;
}
function _WI_updateStats() {
 var $$pre = 0, $$pre1 = 0, $$pre2 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add30 = 0, $add52 = 0, $add78 = 0;
 var $add88 = 0, $and = 0, $and114 = 0, $and31 = 0, $and53 = 0, $and74 = 0, $cmp = 0, $cmp108 = 0, $cmp20 = 0, $cmp40 = 0, $cmp62 = 0, $cmp82 = 0, $cmp91 = 0, $dec = 0, $div = 0, $div19 = 0, $div3 = 0, $div39 = 0, $div6 = 0, $div61 = 0;
 var $div8 = 0, $div81 = 0, $div9 = 0, $div90 = 0, $inc = 0, $inc100 = 0, $inc119 = 0, $inc47 = 0, $inc69 = 0, $maxitems = 0, $maxitems38 = 0, $maxkills = 0, $maxkills18 = 0, $maxsecret = 0, $maxsecret60 = 0, $mul = 0, $mul17 = 0, $mul2 = 0, $mul37 = 0, $mul5 = 0;
 var $mul59 = 0, $or$cond = 0, $partime = 0, $partime89 = 0, $sitems = 0, $sitems36 = 0, $skills = 0, $skills16 = 0, $spec$store$select = 0, $ssecret = 0, $ssecret58 = 0, $stime = 0, $stime80 = 0, $tobool = 0, $tobool106 = 0, $tobool115 = 0, $tobool117 = 0, $tobool12 = 0, $tobool32 = 0, $tobool54 = 0;
 var $tobool75 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _WI_updateAnimatedBack();
 $0 = HEAP32[99832]|0;
 $tobool = ($0|0)!=(0);
 $1 = HEAP32[99843]|0;
 $cmp = ($1|0)!=(10);
 $or$cond = $tobool & $cmp;
 L1: do {
  if ($or$cond) {
   HEAP32[99832] = 0;
   $2 = HEAP32[99835]|0;
   $3 = HEAP32[99838]|0;
   $skills = (((($2) + (($3*40)|0)|0)) + 4|0);
   $4 = HEAP32[$skills>>2]|0;
   $mul = ($4*100)|0;
   $5 = HEAP32[99806]|0;
   $maxkills = ((($5)) + 16|0);
   $6 = HEAP32[$maxkills>>2]|0;
   $div = (($mul|0) / ($6|0))&-1;
   HEAP32[98452] = $div;
   $sitems = (((($2) + (($3*40)|0)|0)) + 8|0);
   $7 = HEAP32[$sitems>>2]|0;
   $mul2 = ($7*100)|0;
   $maxitems = ((($5)) + 20|0);
   $8 = HEAP32[$maxitems>>2]|0;
   $div3 = (($mul2|0) / ($8|0))&-1;
   HEAP32[98448] = $div3;
   $ssecret = (((($2) + (($3*40)|0)|0)) + 12|0);
   $9 = HEAP32[$ssecret>>2]|0;
   $mul5 = ($9*100)|0;
   $maxsecret = ((($5)) + 24|0);
   $10 = HEAP32[$maxsecret>>2]|0;
   $div6 = (($mul5|0) / ($10|0))&-1;
   HEAP32[98444] = $div6;
   $stime = (((($2) + (($3*40)|0)|0)) + 16|0);
   $11 = HEAP32[$stime>>2]|0;
   $div8 = (($11|0) / 35)&-1;
   HEAP32[99845] = $div8;
   $partime = ((($5)) + 32|0);
   $12 = HEAP32[$partime>>2]|0;
   $div9 = (($12|0) / 35)&-1;
   HEAP32[99844] = $div9;
   _S_StartSound(0,82);
   HEAP32[99843] = 10;
   $$pre3 = HEAP32[99832]|0;
   $49 = $$pre3;
  } else {
   switch ($1|0) {
   case 10:  {
    $49 = $0;
    break L1;
    break;
   }
   case 2:  {
    $13 = HEAP32[98452]|0;
    $add = (($13) + 2)|0;
    HEAP32[98452] = $add;
    $14 = HEAP32[99811]|0;
    $and = $14 & 3;
    $tobool12 = ($and|0)==(0);
    if ($tobool12) {
     _S_StartSound(0,1);
     $$pre2 = HEAP32[98452]|0;
     $20 = $$pre2;
    } else {
     $20 = $add;
    }
    $15 = HEAP32[99835]|0;
    $16 = HEAP32[99838]|0;
    $skills16 = (((($15) + (($16*40)|0)|0)) + 4|0);
    $17 = HEAP32[$skills16>>2]|0;
    $mul17 = ($17*100)|0;
    $18 = HEAP32[99806]|0;
    $maxkills18 = ((($18)) + 16|0);
    $19 = HEAP32[$maxkills18>>2]|0;
    $div19 = (($mul17|0) / ($19|0))&-1;
    $cmp20 = ($20|0)<($div19|0);
    if ($cmp20) {
     return;
    }
    HEAP32[98452] = $div19;
    _S_StartSound(0,82);
    $21 = HEAP32[99843]|0;
    $inc = (($21) + 1)|0;
    HEAP32[99843] = $inc;
    return;
    break;
   }
   case 4:  {
    $22 = HEAP32[98448]|0;
    $add30 = (($22) + 2)|0;
    HEAP32[98448] = $add30;
    $23 = HEAP32[99811]|0;
    $and31 = $23 & 3;
    $tobool32 = ($and31|0)==(0);
    if ($tobool32) {
     _S_StartSound(0,1);
     $$pre1 = HEAP32[98448]|0;
     $29 = $$pre1;
    } else {
     $29 = $add30;
    }
    $24 = HEAP32[99835]|0;
    $25 = HEAP32[99838]|0;
    $sitems36 = (((($24) + (($25*40)|0)|0)) + 8|0);
    $26 = HEAP32[$sitems36>>2]|0;
    $mul37 = ($26*100)|0;
    $27 = HEAP32[99806]|0;
    $maxitems38 = ((($27)) + 20|0);
    $28 = HEAP32[$maxitems38>>2]|0;
    $div39 = (($mul37|0) / ($28|0))&-1;
    $cmp40 = ($29|0)<($div39|0);
    if ($cmp40) {
     return;
    }
    HEAP32[98448] = $div39;
    _S_StartSound(0,82);
    $30 = HEAP32[99843]|0;
    $inc47 = (($30) + 1)|0;
    HEAP32[99843] = $inc47;
    return;
    break;
   }
   case 6:  {
    $31 = HEAP32[98444]|0;
    $add52 = (($31) + 2)|0;
    HEAP32[98444] = $add52;
    $32 = HEAP32[99811]|0;
    $and53 = $32 & 3;
    $tobool54 = ($and53|0)==(0);
    if ($tobool54) {
     _S_StartSound(0,1);
     $$pre = HEAP32[98444]|0;
     $38 = $$pre;
    } else {
     $38 = $add52;
    }
    $33 = HEAP32[99835]|0;
    $34 = HEAP32[99838]|0;
    $ssecret58 = (((($33) + (($34*40)|0)|0)) + 12|0);
    $35 = HEAP32[$ssecret58>>2]|0;
    $mul59 = ($35*100)|0;
    $36 = HEAP32[99806]|0;
    $maxsecret60 = ((($36)) + 24|0);
    $37 = HEAP32[$maxsecret60>>2]|0;
    $div61 = (($mul59|0) / ($37|0))&-1;
    $cmp62 = ($38|0)<($div61|0);
    if ($cmp62) {
     return;
    }
    HEAP32[98444] = $div61;
    _S_StartSound(0,82);
    $39 = HEAP32[99843]|0;
    $inc69 = (($39) + 1)|0;
    HEAP32[99843] = $inc69;
    return;
    break;
   }
   case 8:  {
    $40 = HEAP32[99811]|0;
    $and74 = $40 & 3;
    $tobool75 = ($and74|0)==(0);
    if ($tobool75) {
     _S_StartSound(0,1);
    }
    $41 = HEAP32[99845]|0;
    $add78 = (($41) + 3)|0;
    $42 = HEAP32[99835]|0;
    $43 = HEAP32[99838]|0;
    $stime80 = (((($42) + (($43*40)|0)|0)) + 16|0);
    $44 = HEAP32[$stime80>>2]|0;
    $div81 = (($44|0) / 35)&-1;
    $cmp82 = ($add78|0)<($div81|0);
    $spec$store$select = $cmp82 ? $add78 : $div81;
    HEAP32[99845] = $spec$store$select;
    $45 = HEAP32[99844]|0;
    $add88 = (($45) + 3)|0;
    HEAP32[99844] = $add88;
    $46 = HEAP32[99806]|0;
    $partime89 = ((($46)) + 32|0);
    $47 = HEAP32[$partime89>>2]|0;
    $div90 = (($47|0) / 35)&-1;
    $cmp91 = ($add88|0)<($div90|0);
    if ($cmp91) {
     return;
    }
    HEAP32[99844] = $div90;
    if ($cmp82) {
     return;
    }
    _S_StartSound(0,82);
    $48 = HEAP32[99843]|0;
    $inc100 = (($48) + 1)|0;
    HEAP32[99843] = $inc100;
    return;
    break;
   }
   default: {
    $and114 = $1 & 1;
    $tobool115 = ($and114|0)==(0);
    if ($tobool115) {
     return;
    }
    $51 = HEAP32[99837]|0;
    $dec = (($51) + -1)|0;
    HEAP32[99837] = $dec;
    $tobool117 = ($dec|0)==(0);
    if (!($tobool117)) {
     return;
    }
    $inc119 = (($1) + 1)|0;
    HEAP32[99843] = $inc119;
    HEAP32[99837] = 35;
    return;
   }
   }
  }
 } while(0);
 $tobool106 = ($49|0)==(0);
 if ($tobool106) {
  return;
 }
 _S_StartSound(0,3);
 $50 = HEAP32[32140]|0;
 $cmp108 = ($50|0)==(2);
 if ($cmp108) {
  HEAP32[99812] = -1;
  HEAP32[99832] = 0;
  HEAP32[99833] = 10;
  return;
 } else {
  HEAP32[99812] = 1;
  HEAP32[99832] = 0;
  HEAP32[99833] = 140;
  _WI_initAnimatedBack();
  return;
 }
}
function _WI_drawStats() {
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add3 = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i$i29 = 0, $arrayidx$i$i56 = 0, $arrayidx13$i = 0, $arrayidx7$i = 0, $cmp = 0, $cmp$i = 0;
 var $cmp$i34 = 0, $cmp$i5 = 0, $cmp$i7 = 0, $cmp1$i = 0, $cmp10$i$i = 0, $cmp10$i$i19 = 0, $cmp10$i$i46 = 0, $cmp5$i = 0, $cmp9$i = 0, $conv = 0, $conv$i$i = 0, $conv$i$i36 = 0, $conv$i$i9 = 0, $ctr$i = 0, $dec$i$i = 0, $dec$i$i26 = 0, $dec$i$i53 = 0, $digits$addr$023$i$i = 0, $digits$addr$023$i$i14 = 0, $digits$addr$023$i$i41 = 0;
 var $digits$addr$220$i$i = 0, $digits$addr$220$i$i$ph = 0, $digits$addr$220$i$i24 = 0, $digits$addr$220$i$i24$ph = 0, $digits$addr$220$i$i51 = 0, $digits$addr$220$i$i51$ph = 0, $div = 0, $div$i$i = 0, $div$i$i15 = 0, $div$i$i42 = 0, $div18$i$i = 0, $div18$i$i30 = 0, $div18$i$i57 = 0, $height = 0, $i$012$i = 0, $inc$i = 0, $inc$i$i = 0, $inc$i$i16 = 0, $inc$i$i43 = 0, $mul = 0;
 var $mul2 = 0, $n$addr$119$i$i = 0, $n$addr$119$i$i25 = 0, $n$addr$119$i$i52 = 0, $sub17$i$i = 0, $sub17$i$i27 = 0, $sub17$i$i54 = 0, $temp$024$i$i = 0, $temp$024$i$i13 = 0, $temp$024$i$i40 = 0, $temp$024$off$i$i = 0, $temp$024$off$i$i17 = 0, $temp$024$off$i$i44 = 0, $tobool$i$i = 0, $tobool$i$i10 = 0, $tobool$i$i37 = 0, $tobool15$i$i = 0, $tobool15$i$i31 = 0, $tobool15$i$i58 = 0, $x$addr$021$i$i = 0;
 var $x$addr$021$i$i23 = 0, $x$addr$021$i$i50 = 0, $x$i = 0, $y$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[98400]|0;
 $height = ((($0)) + 2|0);
 $1 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
 $conv = $1 << 16 >> 16;
 $mul = ($conv*3)|0;
 $div = (($mul|0) / 2)&-1;
 $2 = HEAP32[99805]|0;
 _V_DrawPatch(0,0,$2);
 $3 = HEAP32[32140]|0;
 $cmp$i = ($3|0)==(2);
 if (!($cmp$i)) {
  $4 = HEAP32[99806]|0;
  $5 = HEAP32[$4>>2]|0;
  $cmp1$i = ($5|0)>(2);
  if (!($cmp1$i)) {
   $48 = $4;$6 = $5;$i$012$i = 0;
   while(1) {
    $arrayidx7$i = (125456 + ($6<<2)|0);
    $7 = HEAP32[$arrayidx7$i>>2]|0;
    $ctr$i = (((($7) + (($i$012$i*56)|0)|0)) + 48|0);
    $8 = HEAP32[$ctr$i>>2]|0;
    $cmp9$i = ($8|0)>(-1);
    if ($cmp9$i) {
     $arrayidx13$i = ((((($7) + (($i$012$i*56)|0)|0)) + 28|0) + ($8<<2)|0);
     $y$i = (((($7) + (($i$012$i*56)|0)|0)) + 16|0);
     $x$i = (((($7) + (($i$012$i*56)|0)|0)) + 12|0);
     $9 = HEAP32[$x$i>>2]|0;
     $10 = HEAP32[$y$i>>2]|0;
     $11 = HEAP32[$arrayidx13$i>>2]|0;
     _V_DrawPatch($9,$10,$11);
     $$pre$i = HEAP32[99806]|0;
     $13 = $$pre$i;
    } else {
     $13 = $48;
    }
    $inc$i = (($i$012$i) + 1)|0;
    $12 = HEAP32[$13>>2]|0;
    $arrayidx$i = (125472 + ($12<<2)|0);
    $14 = HEAP32[$arrayidx$i>>2]|0;
    $cmp5$i = ($inc$i|0)<($14|0);
    if ($cmp5$i) {
     $48 = $13;$6 = $12;$i$012$i = $inc$i;
    } else {
     break;
    }
   }
  }
 }
 _WI_drawLF();
 $15 = HEAP32[99822]|0;
 _V_DrawPatch(50,50,$15);
 $16 = HEAP32[98452]|0;
 $cmp$i5 = ($16|0)<(0);
 do {
  if (!($cmp$i5)) {
   $17 = HEAP32[99814]|0;
   _V_DrawPatch(270,50,$17);
   $18 = HEAP32[98400]|0;
   $19 = HEAPU8[$18>>0]|(HEAPU8[$18+1>>0]<<8);
   $conv$i$i = $19 << 16 >> 16;
   $tobool$i$i = ($16|0)==(0);
   if ($tobool$i$i) {
    $digits$addr$220$i$i$ph = 1;
   } else {
    $digits$addr$023$i$i = 0;$temp$024$i$i = $16;
    while(1) {
     $div$i$i = (($temp$024$i$i|0) / 10)&-1;
     $inc$i$i = (($digits$addr$023$i$i) + 1)|0;
     $temp$024$off$i$i = (($temp$024$i$i) + 9)|0;
     $20 = ($temp$024$off$i$i>>>0)<(19);
     if ($20) {
      break;
     } else {
      $digits$addr$023$i$i = $inc$i$i;$temp$024$i$i = $div$i$i;
     }
    }
    $cmp10$i$i = ($16|0)==(1994);
    if ($cmp10$i$i) {
     break;
    } else {
     $digits$addr$220$i$i$ph = $inc$i$i;
    }
   }
   $digits$addr$220$i$i = $digits$addr$220$i$i$ph;$n$addr$119$i$i = $16;$x$addr$021$i$i = 270;
   while(1) {
    $dec$i$i = (($digits$addr$220$i$i) + -1)|0;
    $sub17$i$i = (($x$addr$021$i$i) - ($conv$i$i))|0;
    $div18$i$i = (($n$addr$119$i$i|0) / 10)&-1;
    $21 = ($div18$i$i*10)|0;
    $22 = (($n$addr$119$i$i) - ($21))|0;
    $arrayidx$i$i = (393600 + ($22<<2)|0);
    $23 = HEAP32[$arrayidx$i$i>>2]|0;
    _V_DrawPatch($sub17$i$i,50,$23);
    $tobool15$i$i = ($dec$i$i|0)==(0);
    if ($tobool15$i$i) {
     break;
    } else {
     $digits$addr$220$i$i = $dec$i$i;$n$addr$119$i$i = $div18$i$i;$x$addr$021$i$i = $sub17$i$i;
    }
   }
  }
 } while(0);
 $add = (($div) + 50)|0;
 $24 = HEAP32[99825]|0;
 _V_DrawPatch(50,$add,$24);
 $25 = HEAP32[98448]|0;
 $cmp$i7 = ($25|0)<(0);
 do {
  if (!($cmp$i7)) {
   $26 = HEAP32[99814]|0;
   _V_DrawPatch(270,$add,$26);
   $27 = HEAP32[98400]|0;
   $28 = HEAPU8[$27>>0]|(HEAPU8[$27+1>>0]<<8);
   $conv$i$i9 = $28 << 16 >> 16;
   $tobool$i$i10 = ($25|0)==(0);
   if ($tobool$i$i10) {
    $digits$addr$220$i$i24$ph = 1;
   } else {
    $digits$addr$023$i$i14 = 0;$temp$024$i$i13 = $25;
    while(1) {
     $div$i$i15 = (($temp$024$i$i13|0) / 10)&-1;
     $inc$i$i16 = (($digits$addr$023$i$i14) + 1)|0;
     $temp$024$off$i$i17 = (($temp$024$i$i13) + 9)|0;
     $29 = ($temp$024$off$i$i17>>>0)<(19);
     if ($29) {
      break;
     } else {
      $digits$addr$023$i$i14 = $inc$i$i16;$temp$024$i$i13 = $div$i$i15;
     }
    }
    $cmp10$i$i19 = ($25|0)==(1994);
    if ($cmp10$i$i19) {
     break;
    } else {
     $digits$addr$220$i$i24$ph = $inc$i$i16;
    }
   }
   $digits$addr$220$i$i24 = $digits$addr$220$i$i24$ph;$n$addr$119$i$i25 = $25;$x$addr$021$i$i23 = 270;
   while(1) {
    $dec$i$i26 = (($digits$addr$220$i$i24) + -1)|0;
    $sub17$i$i27 = (($x$addr$021$i$i23) - ($conv$i$i9))|0;
    $div18$i$i30 = (($n$addr$119$i$i25|0) / 10)&-1;
    $30 = ($div18$i$i30*10)|0;
    $31 = (($n$addr$119$i$i25) - ($30))|0;
    $arrayidx$i$i29 = (393600 + ($31<<2)|0);
    $32 = HEAP32[$arrayidx$i$i29>>2]|0;
    _V_DrawPatch($sub17$i$i27,$add,$32);
    $tobool15$i$i31 = ($dec$i$i26|0)==(0);
    if ($tobool15$i$i31) {
     break;
    } else {
     $digits$addr$220$i$i24 = $dec$i$i26;$n$addr$119$i$i25 = $div18$i$i30;$x$addr$021$i$i23 = $sub17$i$i27;
    }
   }
  }
 } while(0);
 $mul2 = $div << 1;
 $add3 = (($mul2) + 50)|0;
 $33 = HEAP32[99824]|0;
 _V_DrawPatch(50,$add3,$33);
 $34 = HEAP32[98444]|0;
 $cmp$i34 = ($34|0)<(0);
 do {
  if (!($cmp$i34)) {
   $35 = HEAP32[99814]|0;
   _V_DrawPatch(270,$add3,$35);
   $36 = HEAP32[98400]|0;
   $37 = HEAPU8[$36>>0]|(HEAPU8[$36+1>>0]<<8);
   $conv$i$i36 = $37 << 16 >> 16;
   $tobool$i$i37 = ($34|0)==(0);
   if ($tobool$i$i37) {
    $digits$addr$220$i$i51$ph = 1;
   } else {
    $digits$addr$023$i$i41 = 0;$temp$024$i$i40 = $34;
    while(1) {
     $div$i$i42 = (($temp$024$i$i40|0) / 10)&-1;
     $inc$i$i43 = (($digits$addr$023$i$i41) + 1)|0;
     $temp$024$off$i$i44 = (($temp$024$i$i40) + 9)|0;
     $38 = ($temp$024$off$i$i44>>>0)<(19);
     if ($38) {
      break;
     } else {
      $digits$addr$023$i$i41 = $inc$i$i43;$temp$024$i$i40 = $div$i$i42;
     }
    }
    $cmp10$i$i46 = ($34|0)==(1994);
    if ($cmp10$i$i46) {
     break;
    } else {
     $digits$addr$220$i$i51$ph = $inc$i$i43;
    }
   }
   $digits$addr$220$i$i51 = $digits$addr$220$i$i51$ph;$n$addr$119$i$i52 = $34;$x$addr$021$i$i50 = 270;
   while(1) {
    $dec$i$i53 = (($digits$addr$220$i$i51) + -1)|0;
    $sub17$i$i54 = (($x$addr$021$i$i50) - ($conv$i$i36))|0;
    $div18$i$i57 = (($n$addr$119$i$i52|0) / 10)&-1;
    $39 = ($div18$i$i57*10)|0;
    $40 = (($n$addr$119$i$i52) - ($39))|0;
    $arrayidx$i$i56 = (393600 + ($40<<2)|0);
    $41 = HEAP32[$arrayidx$i$i56>>2]|0;
    _V_DrawPatch($sub17$i$i54,$add3,$41);
    $tobool15$i$i58 = ($dec$i$i53|0)==(0);
    if ($tobool15$i$i58) {
     break;
    } else {
     $digits$addr$220$i$i51 = $dec$i$i53;$n$addr$119$i$i52 = $div18$i$i57;$x$addr$021$i$i50 = $sub17$i$i54;
    }
   }
  }
 } while(0);
 $42 = HEAP32[99827]|0;
 _V_DrawPatch(16,168,$42);
 $43 = HEAP32[99845]|0;
 _WI_drawTime(144,168,$43);
 $44 = HEAP32[99806]|0;
 $45 = HEAP32[$44>>2]|0;
 $cmp = ($45|0)<(3);
 if (!($cmp)) {
  return;
 }
 $46 = HEAP32[99828]|0;
 _V_DrawPatch(176,168,$46);
 $47 = HEAP32[99844]|0;
 _WI_drawTime(304,168,$47);
 return;
}
function _WI_checkForAccelerate() {
 var $$sink = 0, $$sink13 = 0, $$sink14 = 0, $$sink15 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, $storemerge$1 = 0, $storemerge$2 = 0, $storemerge$3 = 0, $tobool = 0, $tobool$1 = 0, $tobool$2 = 0, $tobool$3 = 0, $tobool1 = 0, $tobool1$1 = 0, $tobool1$2 = 0, $tobool1$3 = 0;
 var $tobool12 = 0, $tobool12$1 = 0, $tobool12$2 = 0, $tobool12$3 = 0, $tobool14 = 0, $tobool14$1 = 0, $tobool14$2 = 0, $tobool14$3 = 0, $tobool3 = 0, $tobool3$1 = 0, $tobool3$2 = 0, $tobool3$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[45416]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  $1 = HEAP8[(181693)>>0]|0;
  $2 = $1 & 1;
  $tobool1 = ($2<<24>>24)==(0);
  if ($tobool1) {
   $storemerge = 0;
  } else {
   $3 = HEAP32[(181876)>>2]|0;
   $tobool3 = ($3|0)==(0);
   if ($tobool3) {
    HEAP32[99832] = 1;
    $storemerge = 1;
   } else {
    $storemerge = 1;
   }
  }
  HEAP32[(181876)>>2] = $storemerge;
  $4 = $1 & 2;
  $tobool12 = ($4<<24>>24)==(0);
  if ($tobool12) {
   $$sink = 0;
  } else {
   $5 = HEAP32[(181880)>>2]|0;
   $tobool14 = ($5|0)==(0);
   if ($tobool14) {
    HEAP32[99832] = 1;
    $$sink = 1;
   } else {
    $$sink = 1;
   }
  }
  HEAP32[(181880)>>2] = $$sink;
 }
 $6 = HEAP32[(181668)>>2]|0;
 $tobool$1 = ($6|0)==(0);
 if (!($tobool$1)) {
  $7 = HEAP8[(181981)>>0]|0;
  $8 = $7 & 1;
  $tobool1$1 = ($8<<24>>24)==(0);
  if ($tobool1$1) {
   $storemerge$1 = 0;
  } else {
   $9 = HEAP32[(182164)>>2]|0;
   $tobool3$1 = ($9|0)==(0);
   if ($tobool3$1) {
    HEAP32[99832] = 1;
    $storemerge$1 = 1;
   } else {
    $storemerge$1 = 1;
   }
  }
  HEAP32[(182164)>>2] = $storemerge$1;
  $10 = $7 & 2;
  $tobool12$1 = ($10<<24>>24)==(0);
  if ($tobool12$1) {
   $$sink13 = 0;
  } else {
   $11 = HEAP32[(182168)>>2]|0;
   $tobool14$1 = ($11|0)==(0);
   if ($tobool14$1) {
    HEAP32[99832] = 1;
    $$sink13 = 1;
   } else {
    $$sink13 = 1;
   }
  }
  HEAP32[(182168)>>2] = $$sink13;
 }
 $12 = HEAP32[(181672)>>2]|0;
 $tobool$2 = ($12|0)==(0);
 if (!($tobool$2)) {
  $13 = HEAP8[(182269)>>0]|0;
  $14 = $13 & 1;
  $tobool1$2 = ($14<<24>>24)==(0);
  if ($tobool1$2) {
   $storemerge$2 = 0;
  } else {
   $15 = HEAP32[(182452)>>2]|0;
   $tobool3$2 = ($15|0)==(0);
   if ($tobool3$2) {
    HEAP32[99832] = 1;
    $storemerge$2 = 1;
   } else {
    $storemerge$2 = 1;
   }
  }
  HEAP32[(182452)>>2] = $storemerge$2;
  $16 = $13 & 2;
  $tobool12$2 = ($16<<24>>24)==(0);
  if ($tobool12$2) {
   $$sink14 = 0;
  } else {
   $17 = HEAP32[(182456)>>2]|0;
   $tobool14$2 = ($17|0)==(0);
   if ($tobool14$2) {
    HEAP32[99832] = 1;
    $$sink14 = 1;
   } else {
    $$sink14 = 1;
   }
  }
  HEAP32[(182456)>>2] = $$sink14;
 }
 $18 = HEAP32[(181676)>>2]|0;
 $tobool$3 = ($18|0)==(0);
 if ($tobool$3) {
  return;
 }
 $19 = HEAP8[(182557)>>0]|0;
 $20 = $19 & 1;
 $tobool1$3 = ($20<<24>>24)==(0);
 if ($tobool1$3) {
  $storemerge$3 = 0;
 } else {
  $21 = HEAP32[(182740)>>2]|0;
  $tobool3$3 = ($21|0)==(0);
  if ($tobool3$3) {
   HEAP32[99832] = 1;
   $storemerge$3 = 1;
  } else {
   $storemerge$3 = 1;
  }
 }
 HEAP32[(182740)>>2] = $storemerge$3;
 $22 = $19 & 2;
 $tobool12$3 = ($22<<24>>24)==(0);
 if ($tobool12$3) {
  $$sink15 = 0;
 } else {
  $23 = HEAP32[(182744)>>2]|0;
  $tobool14$3 = ($23|0)==(0);
  if ($tobool14$3) {
   HEAP32[99832] = 1;
   $$sink15 = 1;
  } else {
   $$sink15 = 1;
  }
 }
 HEAP32[(182744)>>2] = $$sink15;
 return;
}
function _WI_Ticker() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $and$i = 0, $cmp = 0, $cmp$i = 0, $cmp1 = 0, $conv$i = 0, $dec$i = 0, $dec$i1 = 0, $inc = 0, $or$cond$i = 0, $tobool = 0, $tobool$i = 0, $tobool$i2 = 0;
 var $tobool1$i = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99811]|0;
 $inc = (($0) + 1)|0;
 HEAP32[99811] = $inc;
 $cmp = ($0|0)==(0);
 do {
  if ($cmp) {
   $1 = HEAP32[32140]|0;
   $cmp1 = ($1|0)==(2);
   if ($cmp1) {
    _S_ChangeMusic(67,1);
    break;
   } else {
    _S_ChangeMusic(28,1);
    break;
   }
  }
 } while(0);
 _WI_checkForAccelerate();
 $2 = HEAP32[99812]|0;
 switch ($2|0) {
 case 0:  {
  $3 = HEAP32[99091]|0;
  $tobool = ($3|0)==(0);
  if (!($tobool)) {
   _WI_updateDeathmatchStats();
   return;
  }
  $4 = HEAP32[99094]|0;
  $tobool6 = ($4|0)==(0);
  if ($tobool6) {
   _WI_updateStats();
   return;
  } else {
   _WI_updateNetgameStats();
   return;
  }
  break;
 }
 case 1:  {
  _WI_updateAnimatedBack();
  $5 = HEAP32[99833]|0;
  $dec$i = (($5) + -1)|0;
  HEAP32[99833] = $dec$i;
  $tobool$i = ($dec$i|0)==(0);
  $6 = HEAP32[99832]|0;
  $tobool1$i = ($6|0)!=(0);
  $or$cond$i = $tobool$i | $tobool1$i;
  if ($or$cond$i) {
   HEAP32[99812] = -1;
   HEAP32[99832] = 0;
   HEAP32[99833] = 10;
   return;
  } else {
   $and$i = $dec$i & 28;
   $cmp$i = ($and$i>>>0)<(20);
   $conv$i = $cmp$i&1;
   HEAP32[99834] = $conv$i;
   return;
  }
  break;
 }
 case -1:  {
  _WI_updateAnimatedBack();
  $7 = HEAP32[99833]|0;
  $dec$i1 = (($7) + -1)|0;
  HEAP32[99833] = $dec$i1;
  $tobool$i2 = ($dec$i1|0)==(0);
  if (!($tobool$i2)) {
   return;
  }
  _G_WorldDone();
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _WI_loadData() {
 var $$ = 0, $$pre$i = 0, $$pre76$i = 0, $$pre77$i = 0, $$pre78$i = 0, $$pre79$i = 0, $$sink = 0, $$sink61 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $arrayidx$i = 0, $arrayidx18$i = 0, $arrayidx22$i = 0, $arrayidx35$i = 0, $arrayidx35$us$i = 0, $arrayidx39$i = 0, $arrayidx41$i = 0, $arrayidx9$1$i = 0, $arrayidx9$2$i = 0, $arrayidx9$3$i = 0, $arrayidx9$4$i = 0, $arrayidx9$5$i = 0, $arrayidx9$6$i = 0, $arrayidx9$7$i = 0, $arrayidx9$8$i = 0, $call$i1 = 0, $call$i10 = 0;
 var $call$i11 = 0, $call$i12 = 0, $call$i13 = 0, $call$i14 = 0, $call$i15 = 0, $call$i18 = 0, $call$i19 = 0, $call$i2 = 0, $call$i20 = 0, $call$i21 = 0, $call$i22 = 0, $call$i23 = 0, $call$i24 = 0, $call$i25 = 0, $call$i26 = 0, $call$i27 = 0, $call$i28 = 0, $call$i29 = 0, $call$i3 = 0, $call$i30 = 0;
 var $call$i31 = 0, $call$i32 = 0, $call$i33 = 0, $call$i34 = 0, $call$i35 = 0, $call$i36 = 0, $call$i37 = 0, $call$i38 = 0, $call$i39 = 0, $call$i4 = 0, $call$i40 = 0, $call$i41 = 0, $call$i42 = 0, $call$i43 = 0, $call$i44 = 0, $call$i45 = 0, $call$i46 = 0, $call$i47 = 0, $call$i48 = 0, $call$i49 = 0;
 var $call$i5 = 0, $call$i50 = 0, $call$i51 = 0, $call$i52 = 0, $call$i6 = 0, $call$i7 = 0, $call$i8 = 0, $call$i9 = 0, $call1 = 0, $call2 = 0, $call3 = 0, $call60$i = 0, $cmp = 0, $cmp$i = 0, $cmp1$i = 0, $cmp14$i = 0, $cmp163$i = 0, $cmp19$i = 0, $cmp25$i = 0, $cmp25$us$i = 0;
 var $cmp2565$i = 0, $cmp28$i = 0, $cmp29$i = 0, $cmp61$i = 0, $cmp91$i = 0, $i$064$i = 0, $i$266$i = 0, $i$266$us$i = 0, $inc$i = 0, $inc43$i = 0, $inc43$us$i = 0, $inc46$i = 0, $j$070$i = 0, $name$i = 0, $nanims$i = 0, $or$cond1$i = 0, $tobool$i = 0, $tobool63$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer101 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer33 = 0, $vararg_buffer37 = 0, $vararg_buffer42 = 0, $vararg_buffer47 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer56 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer71 = 0, $vararg_buffer74 = 0;
 var $vararg_buffer77 = 0, $vararg_buffer80 = 0, $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_buffer89 = 0, $vararg_buffer9 = 0, $vararg_buffer92 = 0, $vararg_buffer95 = 0, $vararg_buffer98 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr4 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr45 = 0;
 var $vararg_ptr46 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $vararg_buffer101 = sp + 256|0;
 $vararg_buffer98 = sp + 248|0;
 $vararg_buffer95 = sp + 240|0;
 $vararg_buffer92 = sp + 232|0;
 $vararg_buffer89 = sp + 224|0;
 $vararg_buffer86 = sp + 216|0;
 $vararg_buffer83 = sp + 208|0;
 $vararg_buffer80 = sp + 200|0;
 $vararg_buffer77 = sp + 192|0;
 $vararg_buffer74 = sp + 184|0;
 $vararg_buffer71 = sp + 176|0;
 $vararg_buffer68 = sp + 168|0;
 $vararg_buffer65 = sp + 160|0;
 $vararg_buffer62 = sp + 152|0;
 $vararg_buffer59 = sp + 144|0;
 $vararg_buffer56 = sp + 136|0;
 $vararg_buffer53 = sp + 128|0;
 $vararg_buffer50 = sp + 120|0;
 $vararg_buffer47 = sp + 112|0;
 $vararg_buffer42 = sp + 96|0;
 $vararg_buffer37 = sp + 80|0;
 $vararg_buffer33 = sp + 72|0;
 $vararg_buffer29 = sp + 64|0;
 $vararg_buffer25 = sp + 56|0;
 $vararg_buffer21 = sp + 48|0;
 $vararg_buffer17 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $name$i = sp + 260|0;
 $0 = HEAP32[32140]|0;
 $cmp = ($0|0)==(2);
 if ($cmp) {
  HEAP32[99807] = 32;
  $$sink = 128;
 } else {
  $$sink = 36;
 }
 $call1 = (_Z_Malloc($$sink,1,0)|0);
 HEAP32[99808] = $call1;
 $1 = HEAP32[32140]|0;
 $cmp$i = ($1|0)==(2);
 if ($cmp$i) {
  $2 = HEAP32[99807]|0;
  $cmp163$i = ($2|0)==(0);
  if (!($cmp163$i)) {
   $i$064$i = 0;
   while(1) {
    HEAP32[$vararg_buffer>>2] = $i$064$i;
    (_snprintf($name$i,9,156357,$vararg_buffer)|0);
    $3 = HEAP32[99808]|0;
    $arrayidx$i = (($3) + ($i$064$i<<2)|0);
    $call$i2 = (_W_CacheLumpName($name$i,1)|0);
    HEAP32[$arrayidx$i>>2] = $call$i2;
    $inc$i = (($i$064$i) + 1)|0;
    $4 = HEAP32[99807]|0;
    $cmp1$i = ($inc$i>>>0)<($4>>>0);
    if ($cmp1$i) {
     $i$064$i = $inc$i;
    } else {
     break;
    }
   }
  }
 } else {
  $5 = HEAP32[99806]|0;
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $6;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 0;
  (_snprintf($name$i,9,156368,$vararg_buffer1)|0);
  $7 = HEAP32[99808]|0;
  $call$i3 = (_W_CacheLumpName($name$i,1)|0);
  HEAP32[$7>>2] = $call$i3;
  $8 = HEAP32[99806]|0;
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $9;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = 1;
  (_snprintf($name$i,9,156368,$vararg_buffer5)|0);
  $10 = HEAP32[99808]|0;
  $arrayidx9$1$i = ((($10)) + 4|0);
  $call$i30 = (_W_CacheLumpName($name$i,1)|0);
  HEAP32[$arrayidx9$1$i>>2] = $call$i30;
  $11 = HEAP32[99806]|0;
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer9>>2] = $12;
  $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
  HEAP32[$vararg_ptr12>>2] = 2;
  (_snprintf($name$i,9,156368,$vararg_buffer9)|0);
  $13 = HEAP32[99808]|0;
  $arrayidx9$2$i = ((($13)) + 8|0);
  $call$i31 = (_W_CacheLumpName($name$i,1)|0);
  HEAP32[$arrayidx9$2$i>>2] = $call$i31;
  $14 = HEAP32[99806]|0;
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$vararg_buffer13>>2] = $15;
  $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
  HEAP32[$vararg_ptr16>>2] = 3;
  (_snprintf($name$i,9,156368,$vararg_buffer13)|0);
  $16 = HEAP32[99808]|0;
  $arrayidx9$3$i = ((($16)) + 12|0);
  $call$i32 = (_W_CacheLumpName($name$i,1)|0);
  HEAP32[$arrayidx9$3$i>>2] = $call$i32;
  $17 = HEAP32[99806]|0;
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$vararg_buffer17>>2] = $18;
  $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
  HEAP32[$vararg_ptr20>>2] = 4;
  (_snprintf($name$i,9,156368,$vararg_buffer17)|0);
  $19 = HEAP32[99808]|0;
  $arrayidx9$4$i = ((($19)) + 16|0);
  $call$i33 = (_W_CacheLumpName($name$i,1)|0);
  HEAP32[$arrayidx9$4$i>>2] = $call$i33;
  $20 = HEAP32[99806]|0;
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$vararg_buffer21>>2] = $21;
  $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
  HEAP32[$vararg_ptr24>>2] = 5;
  (_snprintf($name$i,9,156368,$vararg_buffer21)|0);
  $22 = HEAP32[99808]|0;
  $arrayidx9$5$i = ((($22)) + 20|0);
  $call$i34 = (_W_CacheLumpName($name$i,1)|0);
  HEAP32[$arrayidx9$5$i>>2] = $call$i34;
  $23 = HEAP32[99806]|0;
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$vararg_buffer25>>2] = $24;
  $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
  HEAP32[$vararg_ptr28>>2] = 6;
  (_snprintf($name$i,9,156368,$vararg_buffer25)|0);
  $25 = HEAP32[99808]|0;
  $arrayidx9$6$i = ((($25)) + 24|0);
  $call$i35 = (_W_CacheLumpName($name$i,1)|0);
  HEAP32[$arrayidx9$6$i>>2] = $call$i35;
  $26 = HEAP32[99806]|0;
  $27 = HEAP32[$26>>2]|0;
  HEAP32[$vararg_buffer29>>2] = $27;
  $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
  HEAP32[$vararg_ptr32>>2] = 7;
  (_snprintf($name$i,9,156368,$vararg_buffer29)|0);
  $28 = HEAP32[99808]|0;
  $arrayidx9$7$i = ((($28)) + 28|0);
  $call$i36 = (_W_CacheLumpName($name$i,1)|0);
  HEAP32[$arrayidx9$7$i>>2] = $call$i36;
  $29 = HEAP32[99806]|0;
  $30 = HEAP32[$29>>2]|0;
  HEAP32[$vararg_buffer33>>2] = $30;
  $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
  HEAP32[$vararg_ptr36>>2] = 8;
  (_snprintf($name$i,9,156368,$vararg_buffer33)|0);
  $31 = HEAP32[99808]|0;
  $arrayidx9$8$i = ((($31)) + 32|0);
  $call$i37 = (_W_CacheLumpName($name$i,1)|0);
  HEAP32[$arrayidx9$8$i>>2] = $call$i37;
  $call$i4 = (_W_CacheLumpName(156377,1)|0);
  HEAP32[99817] = $call$i4;
  $call$i5 = (_W_CacheLumpName(156384,1)|0);
  HEAP32[(399272)>>2] = $call$i5;
  $call$i6 = (_W_CacheLumpName(156391,1)|0);
  HEAP32[99820] = $call$i6;
  $32 = HEAP32[99806]|0;
  $33 = HEAP32[$32>>2]|0;
  $cmp14$i = ($33|0)<(3);
  if ($cmp14$i) {
   $34 = $33;$53 = $32;$j$070$i = 0;
   while(1) {
    $arrayidx22$i = (125456 + ($34<<2)|0);
    $35 = HEAP32[$arrayidx22$i>>2]|0;
    $nanims$i = (((($35) + (($j$070$i*56)|0)|0)) + 8|0);
    $36 = HEAP32[$nanims$i>>2]|0;
    $cmp2565$i = ($36|0)>(0);
    L13: do {
     if ($cmp2565$i) {
      $cmp29$i = ($j$070$i|0)==(8);
      if (!($cmp29$i)) {
       $38 = $53;$i$266$us$i = 0;
       while(1) {
        $37 = HEAP32[$38>>2]|0;
        HEAP32[$vararg_buffer37>>2] = $37;
        $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
        HEAP32[$vararg_ptr40>>2] = $j$070$i;
        $vararg_ptr41 = ((($vararg_buffer37)) + 8|0);
        HEAP32[$vararg_ptr41>>2] = $i$266$us$i;
        (_snprintf($name$i,9,156399,$vararg_buffer37)|0);
        $arrayidx35$us$i = ((((($35) + (($j$070$i*56)|0)|0)) + 28|0) + ($i$266$us$i<<2)|0);
        $call$i38 = (_W_CacheLumpName($name$i,1)|0);
        HEAP32[$arrayidx35$us$i>>2] = $call$i38;
        $inc43$us$i = (($i$266$us$i) + 1)|0;
        $39 = HEAP32[$nanims$i>>2]|0;
        $cmp25$us$i = ($inc43$us$i|0)<($39|0);
        if (!($cmp25$us$i)) {
         break L13;
        }
        $$pre$i = HEAP32[99806]|0;
        $38 = $$pre$i;$i$266$us$i = $inc43$us$i;
       }
      }
      $41 = $53;$54 = $36;$i$266$i = 0;
      while(1) {
       $40 = HEAP32[$41>>2]|0;
       $cmp28$i = ($40|0)==(1);
       if ($cmp28$i) {
        $arrayidx39$i = (126300 + ($i$266$i<<2)|0);
        $42 = HEAP32[$arrayidx39$i>>2]|0;
        $arrayidx41$i = (((($35)) + 476|0) + ($i$266$i<<2)|0);
        HEAP32[$arrayidx41$i>>2] = $42;
        $43 = $54;
       } else {
        HEAP32[$vararg_buffer42>>2] = $40;
        $vararg_ptr45 = ((($vararg_buffer42)) + 4|0);
        HEAP32[$vararg_ptr45>>2] = 8;
        $vararg_ptr46 = ((($vararg_buffer42)) + 8|0);
        HEAP32[$vararg_ptr46>>2] = $i$266$i;
        (_snprintf($name$i,9,156399,$vararg_buffer42)|0);
        $arrayidx35$i = (((($35)) + 476|0) + ($i$266$i<<2)|0);
        $call$i7 = (_W_CacheLumpName($name$i,1)|0);
        HEAP32[$arrayidx35$i>>2] = $call$i7;
        $$pre77$i = HEAP32[$nanims$i>>2]|0;
        $43 = $$pre77$i;
       }
       $inc43$i = (($i$266$i) + 1)|0;
       $cmp25$i = ($inc43$i|0)<($43|0);
       if (!($cmp25$i)) {
        break L13;
       }
       $$pre76$i = HEAP32[99806]|0;
       $41 = $$pre76$i;$54 = $43;$i$266$i = $inc43$i;
      }
     }
    } while(0);
    $inc46$i = (($j$070$i) + 1)|0;
    $44 = HEAP32[99806]|0;
    $45 = HEAP32[$44>>2]|0;
    $arrayidx18$i = (125472 + ($45<<2)|0);
    $46 = HEAP32[$arrayidx18$i>>2]|0;
    $cmp19$i = ($inc46$i|0)<($46|0);
    if ($cmp19$i) {
     $34 = $45;$53 = $44;$j$070$i = $inc46$i;
    } else {
     break;
    }
   }
  }
 }
 $call$i8 = (_W_CacheLumpName(156413,1)|0);
 HEAP32[99813] = $call$i8;
 HEAP32[$vararg_buffer47>>2] = 0;
 (_snprintf($name$i,9,156421,$vararg_buffer47)|0);
 $call$i9 = (_W_CacheLumpName($name$i,1)|0);
 HEAP32[98400] = $call$i9;
 HEAP32[$vararg_buffer50>>2] = 1;
 (_snprintf($name$i,9,156421,$vararg_buffer50)|0);
 $call$i39 = (_W_CacheLumpName($name$i,1)|0);
 HEAP32[(393604)>>2] = $call$i39;
 HEAP32[$vararg_buffer53>>2] = 2;
 (_snprintf($name$i,9,156421,$vararg_buffer53)|0);
 $call$i40 = (_W_CacheLumpName($name$i,1)|0);
 HEAP32[(393608)>>2] = $call$i40;
 HEAP32[$vararg_buffer56>>2] = 3;
 (_snprintf($name$i,9,156421,$vararg_buffer56)|0);
 $call$i41 = (_W_CacheLumpName($name$i,1)|0);
 HEAP32[(393612)>>2] = $call$i41;
 HEAP32[$vararg_buffer59>>2] = 4;
 (_snprintf($name$i,9,156421,$vararg_buffer59)|0);
 $call$i42 = (_W_CacheLumpName($name$i,1)|0);
 HEAP32[(393616)>>2] = $call$i42;
 HEAP32[$vararg_buffer62>>2] = 5;
 (_snprintf($name$i,9,156421,$vararg_buffer62)|0);
 $call$i43 = (_W_CacheLumpName($name$i,1)|0);
 HEAP32[(393620)>>2] = $call$i43;
 HEAP32[$vararg_buffer65>>2] = 6;
 (_snprintf($name$i,9,156421,$vararg_buffer65)|0);
 $call$i44 = (_W_CacheLumpName($name$i,1)|0);
 HEAP32[(393624)>>2] = $call$i44;
 HEAP32[$vararg_buffer68>>2] = 7;
 (_snprintf($name$i,9,156421,$vararg_buffer68)|0);
 $call$i45 = (_W_CacheLumpName($name$i,1)|0);
 HEAP32[(393628)>>2] = $call$i45;
 HEAP32[$vararg_buffer71>>2] = 8;
 (_snprintf($name$i,9,156421,$vararg_buffer71)|0);
 $call$i46 = (_W_CacheLumpName($name$i,1)|0);
 HEAP32[(393632)>>2] = $call$i46;
 HEAP32[$vararg_buffer74>>2] = 9;
 (_snprintf($name$i,9,156421,$vararg_buffer74)|0);
 $call$i47 = (_W_CacheLumpName($name$i,1)|0);
 HEAP32[(393636)>>2] = $call$i47;
 $call$i10 = (_W_CacheLumpName(156429,1)|0);
 HEAP32[99814] = $call$i10;
 $call$i11 = (_W_CacheLumpName(156436,1)|0);
 HEAP32[99809] = $call$i11;
 $call$i12 = (_W_CacheLumpName(156440,1)|0);
 HEAP32[99810] = $call$i12;
 $call$i13 = (_W_CacheLumpName(156448,1)|0);
 HEAP32[99822] = $call$i13;
 $call$i14 = (_W_CacheLumpName(156455,1)|0);
 HEAP32[99823] = $call$i14;
 $call$i15 = (_W_CacheLumpName(156462,1)|0);
 HEAP32[99824] = $call$i15;
 $call60$i = (_W_CheckNumForName(156470)|0);
 $cmp61$i = ($call60$i|0)>(-1);
 if ($cmp61$i) {
  $47 = HEAP32[99094]|0;
  $tobool$i = ($47|0)==(0);
  $48 = HEAP32[99091]|0;
  $tobool63$i = ($48|0)!=(0);
  $or$cond1$i = $tobool$i | $tobool63$i;
  $$ = $or$cond1$i ? 156476 : 156470;
  $$sink61 = $$;
 } else {
  $$sink61 = 156476;
 }
 $call$i18 = (_W_CacheLumpName($$sink61,1)|0);
 HEAP32[99825] = $call$i18;
 $call$i19 = (_W_CacheLumpName(156483,1)|0);
 HEAP32[99826] = $call$i19;
 $call$i20 = (_W_CacheLumpName(156490,1)|0);
 HEAP32[99815] = $call$i20;
 $call$i21 = (_W_CacheLumpName(156498,1)|0);
 HEAP32[99827] = $call$i21;
 $call$i22 = (_W_CacheLumpName(156505,1)|0);
 HEAP32[99816] = $call$i22;
 $call$i23 = (_W_CacheLumpName(156513,1)|0);
 HEAP32[99828] = $call$i23;
 $call$i24 = (_W_CacheLumpName(156519,1)|0);
 HEAP32[99829] = $call$i24;
 $call$i25 = (_W_CacheLumpName(156527,1)|0);
 HEAP32[99830] = $call$i25;
 $call$i26 = (_W_CacheLumpName(156535,1)|0);
 HEAP32[99831] = $call$i26;
 HEAP32[$vararg_buffer77>>2] = 0;
 (_snprintf($name$i,9,156542,$vararg_buffer77)|0);
 $call$i27 = (_W_CacheLumpName($name$i,1)|0);
 HEAP32[98412] = $call$i27;
 HEAP32[$vararg_buffer80>>2] = 1;
 (_snprintf($name$i,9,156549,$vararg_buffer80)|0);
 $call$i28 = (_W_CacheLumpName($name$i,1)|0);
 HEAP32[98416] = $call$i28;
 HEAP32[$vararg_buffer83>>2] = 1;
 (_snprintf($name$i,9,156542,$vararg_buffer83)|0);
 $call$i48 = (_W_CacheLumpName($name$i,1)|0);
 HEAP32[(393652)>>2] = $call$i48;
 HEAP32[$vararg_buffer86>>2] = 2;
 (_snprintf($name$i,9,156549,$vararg_buffer86)|0);
 $call$i49 = (_W_CacheLumpName($name$i,1)|0);
 HEAP32[(393668)>>2] = $call$i49;
 HEAP32[$vararg_buffer89>>2] = 2;
 (_snprintf($name$i,9,156542,$vararg_buffer89)|0);
 $call$i50 = (_W_CacheLumpName($name$i,1)|0);
 HEAP32[(393656)>>2] = $call$i50;
 HEAP32[$vararg_buffer92>>2] = 3;
 (_snprintf($name$i,9,156549,$vararg_buffer92)|0);
 $call$i51 = (_W_CacheLumpName($name$i,1)|0);
 HEAP32[(393672)>>2] = $call$i51;
 HEAP32[$vararg_buffer95>>2] = 3;
 (_snprintf($name$i,9,156542,$vararg_buffer95)|0);
 $call$i52 = (_W_CacheLumpName($name$i,1)|0);
 HEAP32[(393660)>>2] = $call$i52;
 HEAP32[$vararg_buffer98>>2] = 4;
 (_snprintf($name$i,9,156549,$vararg_buffer98)|0);
 $call$i1 = (_W_CacheLumpName($name$i,1)|0);
 HEAP32[(393676)>>2] = $call$i1;
 $49 = HEAP32[32140]|0;
 switch ($49|0) {
 case 2:  {
  (_M_StringCopy($name$i,156556,9)|0);
  $call$i29 = (_W_CacheLumpName($name$i,1)|0);
  HEAP32[99805] = $call$i29;
  $call2 = (_W_CacheLumpName(156573,1)|0);
  HEAP32[99840] = $call2;
  $call3 = (_W_CacheLumpName(156581,1)|0);
  HEAP32[99839] = $call3;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $50 = HEAP32[99806]|0;
  $51 = HEAP32[$50>>2]|0;
  $cmp91$i = ($51|0)==(3);
  if ($cmp91$i) {
   (_M_StringCopy($name$i,156556,9)|0);
   $call$i29 = (_W_CacheLumpName($name$i,1)|0);
   HEAP32[99805] = $call$i29;
   $call2 = (_W_CacheLumpName(156573,1)|0);
   HEAP32[99840] = $call2;
   $call3 = (_W_CacheLumpName(156581,1)|0);
   HEAP32[99839] = $call3;
   STACKTOP = sp;return;
  } else {
   $52 = $51;
  }
  break;
 }
 default: {
  $$pre78$i = HEAP32[99806]|0;
  $$pre79$i = HEAP32[$$pre78$i>>2]|0;
  $52 = $$pre79$i;
 }
 }
 HEAP32[$vararg_buffer101>>2] = $52;
 (_snprintf($name$i,9,156565,$vararg_buffer101)|0);
 $call$i29 = (_W_CacheLumpName($name$i,1)|0);
 HEAP32[99805] = $call$i29;
 $call2 = (_W_CacheLumpName(156573,1)|0);
 HEAP32[99840] = $call2;
 $call3 = (_W_CacheLumpName(156581,1)|0);
 HEAP32[99839] = $call3;
 STACKTOP = sp;return;
}
function _WI_Drawer() {
 var $0 = 0, $1 = 0, $2 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99812]|0;
 switch ($0|0) {
 case 0:  {
  $1 = HEAP32[99091]|0;
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   _WI_drawDeathmatchStats();
   return;
  }
  $2 = HEAP32[99094]|0;
  $tobool1 = ($2|0)==(0);
  if ($tobool1) {
   _WI_drawStats();
   return;
  } else {
   _WI_drawNetgameStats();
   return;
  }
  break;
 }
 case 1:  {
  _WI_drawShowNextLoc();
  return;
  break;
 }
 case -1:  {
  HEAP32[99834] = 1;
  _WI_drawShowNextLoc();
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _WI_Start($wbstartstruct) {
 $wbstartstruct = $wbstartstruct|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arraydecay$i = 0, $cmp$i = 0, $cmp11$i = 0, $maxitems$i = 0, $maxkills$i = 0, $maxsecret$i = 0, $pnum$i = 0, $sub$i = 0, $tobool = 0, $tobool$i = 0, $tobool1 = 0, $tobool2$i = 0;
 var $tobool6$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99806] = $wbstartstruct;
 HEAP32[99832] = 0;
 HEAP32[99811] = 0;
 HEAP32[99833] = 0;
 $pnum$i = ((($wbstartstruct)) + 36|0);
 $0 = HEAP32[$pnum$i>>2]|0;
 HEAP32[99838] = $0;
 $arraydecay$i = ((($wbstartstruct)) + 40|0);
 HEAP32[99835] = $arraydecay$i;
 $maxkills$i = ((($wbstartstruct)) + 16|0);
 $1 = HEAP32[$maxkills$i>>2]|0;
 $tobool$i = ($1|0)==(0);
 if ($tobool$i) {
  HEAP32[$maxkills$i>>2] = 1;
 }
 $maxitems$i = ((($wbstartstruct)) + 20|0);
 $2 = HEAP32[$maxitems$i>>2]|0;
 $tobool2$i = ($2|0)==(0);
 if ($tobool2$i) {
  HEAP32[$maxitems$i>>2] = 1;
 }
 $maxsecret$i = ((($wbstartstruct)) + 24|0);
 $3 = HEAP32[$maxsecret$i>>2]|0;
 $tobool6$i = ($3|0)==(0);
 if ($tobool6$i) {
  HEAP32[$maxsecret$i>>2] = 1;
 }
 $4 = HEAP32[32140]|0;
 $cmp$i = ($4|0)==(3);
 if (!($cmp$i)) {
  $5 = HEAP32[$wbstartstruct>>2]|0;
  $cmp11$i = ($5|0)>(2);
  if ($cmp11$i) {
   $sub$i = (($5) + -3)|0;
   HEAP32[$wbstartstruct>>2] = $sub$i;
  }
 }
 _WI_loadData();
 $6 = HEAP32[99091]|0;
 $tobool = ($6|0)==(0);
 if (!($tobool)) {
  _WI_initDeathmatchStats();
  return;
 }
 $7 = HEAP32[99094]|0;
 $tobool1 = ($7|0)==(0);
 if ($tobool1) {
  HEAP32[99812] = 0;
  HEAP32[99832] = 0;
  HEAP32[99843] = 1;
  HEAP32[98444] = -1;
  HEAP32[98448] = -1;
  HEAP32[98452] = -1;
  HEAP32[99844] = -1;
  HEAP32[99845] = -1;
  HEAP32[99837] = 35;
  _WI_initAnimatedBack();
  return;
 } else {
  _WI_initNetgameStats();
  return;
 }
}
function _W_Checksum($digest) {
 $digest = $digest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i$i = 0, $arraydecay1$i = 0, $arrayidx$i$i = 0, $arrayidx2$i$i = 0, $buf$i = 0, $call$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cmp1$i$i = 0, $cmp10$i$i = 0;
 var $cmp5 = 0, $i$011$i$i = 0, $i$06 = 0, $inc = 0, $inc$i$i = 0, $inc3$i$i = 0, $mul$i$i = 0, $position$i = 0, $retval$0$i$i = 0, $sha1_context = 0, $size$i = 0, $wad_file$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $buf$i = sp + 92|0;
 $sha1_context = sp;
 _SHA1_Init($sha1_context);
 HEAP32[99846] = 0;
 $0 = HEAP32[99848]|0;
 $cmp5 = ($0|0)==(0);
 if ($cmp5) {
  _SHA1_Final($digest,$sha1_context);
  STACKTOP = sp;return;
 }
 $i$06 = 0;
 while(1) {
  $1 = HEAP32[99849]|0;
  $arraydecay1$i = (($1) + (($i$06*28)|0)|0);
  (_M_StringCopy($buf$i,$arraydecay1$i,9)|0);
  _SHA1_UpdateString($sha1_context,$buf$i);
  $wad_file$i = (((($1) + (($i$06*28)|0)|0)) + 8|0);
  $2 = HEAP32[$wad_file$i>>2]|0;
  $3 = HEAP32[99846]|0;
  $cmp10$i$i = ($3|0)>(0);
  $4 = HEAP32[99847]|0;
  L6: do {
   if ($cmp10$i$i) {
    $i$011$i$i = 0;
    while(1) {
     $arrayidx$i$i = (($4) + ($i$011$i$i<<2)|0);
     $5 = HEAP32[$arrayidx$i$i>>2]|0;
     $cmp1$i$i = ($5|0)==($2|0);
     if ($cmp1$i$i) {
      $retval$0$i$i = $i$011$i$i;
      break L6;
     }
     $inc$i$i = (($i$011$i$i) + 1)|0;
     $cmp$i$i = ($inc$i$i|0)<($3|0);
     if ($cmp$i$i) {
      $i$011$i$i = $inc$i$i;
     } else {
      label = 7;
      break;
     }
    }
   } else {
    label = 7;
   }
  } while(0);
  if ((label|0) == 7) {
   label = 0;
   $add$i$i = $3 << 2;
   $mul$i$i = (($add$i$i) + 4)|0;
   $call$i$i = (_realloc($4,$mul$i$i)|0);
   HEAP32[99847] = $call$i$i;
   $6 = HEAP32[99846]|0;
   $arrayidx2$i$i = (($call$i$i) + ($6<<2)|0);
   HEAP32[$arrayidx2$i$i>>2] = $2;
   $inc3$i$i = (($6) + 1)|0;
   HEAP32[99846] = $inc3$i$i;
   $retval$0$i$i = $6;
  }
  _SHA1_UpdateInt32($sha1_context,$retval$0$i$i);
  $position$i = (((($1) + (($i$06*28)|0)|0)) + 12|0);
  $7 = HEAP32[$position$i>>2]|0;
  _SHA1_UpdateInt32($sha1_context,$7);
  $size$i = (((($1) + (($i$06*28)|0)|0)) + 16|0);
  $8 = HEAP32[$size$i>>2]|0;
  _SHA1_UpdateInt32($sha1_context,$8);
  $inc = (($i$06) + 1)|0;
  $9 = HEAP32[99848]|0;
  $cmp = ($inc>>>0)<($9>>>0);
  if ($cmp) {
   $i$06 = $inc;
  } else {
   break;
  }
 }
 _SHA1_Final($digest,$sha1_context);
 STACKTOP = sp;return;
}
function _W_OpenFile($path) {
 $path = $path|0;
 var $0 = 0, $call1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32435]|0;
 $call1 = (FUNCTION_TABLE_ii[$0 & 255]($path)|0);
 return ($call1|0);
}
function _W_Read($wad,$offset,$buffer,$buffer_len) {
 $wad = $wad|0;
 $offset = $offset|0;
 $buffer = $buffer|0;
 $buffer_len = $buffer_len|0;
 var $0 = 0, $1 = 0, $Read = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$wad>>2]|0;
 $Read = ((($0)) + 8|0);
 $1 = HEAP32[$Read>>2]|0;
 $call = (FUNCTION_TABLE_iiiii[$1 & 127]($wad,$offset,$buffer,$buffer_len)|0);
 return ($call|0);
}
function _W_ParseCommandLine() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $call = 0, $call5 = 0, $cmp = 0, $cmp2 = 0, $cmp9 = 0, $inc = 0, $inc10 = 0, $inc8 = 0, $modifiedgame$0 = 0, $tobool = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $call = (_M_CheckParmWithArgs(156596,1)|0);
 $tobool = ($call|0)==(0);
 L1: do {
  if ($tobool) {
   $modifiedgame$0 = 0;
  } else {
   $inc8 = (($call) + 1)|0;
   $0 = HEAP32[99373]|0;
   $cmp9 = ($inc8|0)==($0|0);
   if ($cmp9) {
    $modifiedgame$0 = 1;
   } else {
    $inc10 = $inc8;
    while(1) {
     $1 = HEAP32[99374]|0;
     $arrayidx = (($1) + ($inc10<<2)|0);
     $2 = HEAP32[$arrayidx>>2]|0;
     $3 = HEAP8[$2>>0]|0;
     $cmp2 = ($3<<24>>24)==(45);
     if ($cmp2) {
      $modifiedgame$0 = 1;
      break L1;
     }
     $call5 = (_D_TryFindWADByName($2)|0);
     HEAP32[$vararg_buffer>>2] = $call5;
     (_printf(156602,$vararg_buffer)|0);
     (_W_AddFile($call5)|0);
     $inc = (($inc10) + 1)|0;
     $4 = HEAP32[99373]|0;
     $cmp = ($inc|0)==($4|0);
     if ($cmp) {
      $modifiedgame$0 = 1;
      break;
     } else {
      $inc10 = $inc;
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($modifiedgame$0|0);
}
function _W_LumpNameHash($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx$1 = 0, $arrayidx$2 = 0, $arrayidx$3 = 0, $arrayidx$4 = 0, $arrayidx$5 = 0, $arrayidx$6 = 0, $arrayidx$7 = 0, $call = 0, $call$1 = 0, $call$2 = 0, $call$3 = 0, $call$4 = 0;
 var $call$5 = 0, $call$6 = 0, $call$7 = 0, $cmp1 = 0, $cmp1$1 = 0, $cmp1$2 = 0, $cmp1$3 = 0, $cmp1$4 = 0, $cmp1$5 = 0, $cmp1$6 = 0, $cmp1$7 = 0, $conv4 = 0, $conv4$1 = 0, $conv4$2 = 0, $conv4$3 = 0, $conv4$4 = 0, $conv4$5 = 0, $conv4$6 = 0, $conv4$7 = 0, $result$0$lcssa = 0;
 var $shl$1 = 0, $shl$2 = 0, $shl$3 = 0, $shl$4 = 0, $shl$5 = 0, $shl$6 = 0, $shl$7 = 0, $xor$1 = 0, $xor$2 = 0, $xor$3 = 0, $xor$4 = 0, $xor$5 = 0, $xor$6 = 0, $xor$7 = 0, $xor5 = 0, $xor5$1 = 0, $xor5$2 = 0, $xor5$3 = 0, $xor5$4 = 0, $xor5$5 = 0;
 var $xor5$6 = 0, $xor5$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$s>>0]|0;
 $cmp1 = ($0<<24>>24)==(0);
 if ($cmp1) {
  $result$0$lcssa = 5381;
  return ($result$0$lcssa|0);
 }
 $conv4 = $0 << 24 >> 24;
 $call = (_toupper($conv4)|0);
 $xor5 = $call ^ 177573;
 $arrayidx$1 = ((($s)) + 1|0);
 $1 = HEAP8[$arrayidx$1>>0]|0;
 $cmp1$1 = ($1<<24>>24)==(0);
 if ($cmp1$1) {
  $result$0$lcssa = $xor5;
  return ($result$0$lcssa|0);
 }
 $shl$1 = $xor5 << 5;
 $xor$1 = $shl$1 ^ $xor5;
 $conv4$1 = $1 << 24 >> 24;
 $call$1 = (_toupper($conv4$1)|0);
 $xor5$1 = $xor$1 ^ $call$1;
 $arrayidx$2 = ((($s)) + 2|0);
 $2 = HEAP8[$arrayidx$2>>0]|0;
 $cmp1$2 = ($2<<24>>24)==(0);
 if ($cmp1$2) {
  $result$0$lcssa = $xor5$1;
  return ($result$0$lcssa|0);
 }
 $shl$2 = $xor5$1 << 5;
 $xor$2 = $shl$2 ^ $xor5$1;
 $conv4$2 = $2 << 24 >> 24;
 $call$2 = (_toupper($conv4$2)|0);
 $xor5$2 = $xor$2 ^ $call$2;
 $arrayidx$3 = ((($s)) + 3|0);
 $3 = HEAP8[$arrayidx$3>>0]|0;
 $cmp1$3 = ($3<<24>>24)==(0);
 if ($cmp1$3) {
  $result$0$lcssa = $xor5$2;
  return ($result$0$lcssa|0);
 }
 $shl$3 = $xor5$2 << 5;
 $xor$3 = $shl$3 ^ $xor5$2;
 $conv4$3 = $3 << 24 >> 24;
 $call$3 = (_toupper($conv4$3)|0);
 $xor5$3 = $xor$3 ^ $call$3;
 $arrayidx$4 = ((($s)) + 4|0);
 $4 = HEAP8[$arrayidx$4>>0]|0;
 $cmp1$4 = ($4<<24>>24)==(0);
 if ($cmp1$4) {
  $result$0$lcssa = $xor5$3;
  return ($result$0$lcssa|0);
 }
 $shl$4 = $xor5$3 << 5;
 $xor$4 = $shl$4 ^ $xor5$3;
 $conv4$4 = $4 << 24 >> 24;
 $call$4 = (_toupper($conv4$4)|0);
 $xor5$4 = $xor$4 ^ $call$4;
 $arrayidx$5 = ((($s)) + 5|0);
 $5 = HEAP8[$arrayidx$5>>0]|0;
 $cmp1$5 = ($5<<24>>24)==(0);
 if ($cmp1$5) {
  $result$0$lcssa = $xor5$4;
  return ($result$0$lcssa|0);
 }
 $shl$5 = $xor5$4 << 5;
 $xor$5 = $shl$5 ^ $xor5$4;
 $conv4$5 = $5 << 24 >> 24;
 $call$5 = (_toupper($conv4$5)|0);
 $xor5$5 = $xor$5 ^ $call$5;
 $arrayidx$6 = ((($s)) + 6|0);
 $6 = HEAP8[$arrayidx$6>>0]|0;
 $cmp1$6 = ($6<<24>>24)==(0);
 if ($cmp1$6) {
  $result$0$lcssa = $xor5$5;
  return ($result$0$lcssa|0);
 }
 $shl$6 = $xor5$5 << 5;
 $xor$6 = $shl$6 ^ $xor5$5;
 $conv4$6 = $6 << 24 >> 24;
 $call$6 = (_toupper($conv4$6)|0);
 $xor5$6 = $xor$6 ^ $call$6;
 $arrayidx$7 = ((($s)) + 7|0);
 $7 = HEAP8[$arrayidx$7>>0]|0;
 $cmp1$7 = ($7<<24>>24)==(0);
 if ($cmp1$7) {
  $result$0$lcssa = $xor5$6;
  return ($result$0$lcssa|0);
 }
 $shl$7 = $xor5$6 << 5;
 $xor$7 = $shl$7 ^ $xor5$6;
 $conv4$7 = $7 << 24 >> 24;
 $call$7 = (_toupper($conv4$7)|0);
 $xor5$7 = $xor$7 ^ $call$7;
 $result$0$lcssa = $xor5$7;
 return ($result$0$lcssa|0);
}
function _W_AddFile($filename) {
 $filename = $filename|0;
 var $$pre$i = 0, $$pre27$i = 0, $$pre28$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr3 = 0, $arraydecay36 = 0, $arrayidx = 0, $arrayidx17$i = 0, $cache = 0, $cache$i = 0, $call = 0, $call$i = 0, $call10 = 0, $call15 = 0, $call2 = 0, $call23 = 0, $call4 = 0, $call6 = 0;
 var $cmp = 0, $cmp$i = 0, $cmp1$i = 0, $cmp123$i = 0, $cmp13$i = 0, $cmp2$i = 0, $cmp224$i = 0, $cmp28 = 0, $cmp2837 = 0, $cmp40 = 0, $cmp5$i = 0, $filerover$040 = 0, $header = 0, $i$026$i = 0, $i$038 = 0, $inc = 0, $inc$i = 0, $inc39 = 0, $incdec$ptr = 0, $incdec$ptr38 = 0;
 var $infotableofs = 0, $length7 = 0, $lump_p$039 = 0, $mul = 0, $name = 0, $newnumlumps$0 = 0, $next$i = 0, $next19$i = 0, $numlumps = 0, $or$cond$i = 0, $or$cond25$i = 0, $position = 0, $retval$0 = 0, $size = 0, $size31 = 0, $size32 = 0, $sub$ptr$div$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0;
 var $tobool = 0, $tobool11 = 0, $tobool16 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $wad_file29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $header = sp + 20|0;
 $call = (_W_OpenFile($filename)|0);
 $cmp = ($call|0)==(0|0);
 if ($cmp) {
  HEAP32[$vararg_buffer>>2] = $filename;
  (_printf(156614,$vararg_buffer)|0);
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $0 = HEAP32[99848]|0;
 $call2 = (_strlen($filename)|0);
 $add$ptr = (($filename) + ($call2)|0);
 $add$ptr3 = ((($add$ptr)) + -3|0);
 $call4 = (_strcasecmp($add$ptr3,156633)|0);
 $tobool = ($call4|0)==(0);
 if ($tobool) {
  (_W_Read($call,0,$header,12)|0);
  $call10 = (_strncmp($header,156637,4)|0);
  $tobool11 = ($call10|0)==(0);
  if (!($tobool11)) {
   $call15 = (_strncmp($header,156642,4)|0);
   $tobool16 = ($call15|0)==(0);
   if (!($tobool16)) {
    HEAP32[$vararg_buffer1>>2] = $filename;
    _I_Error(156647,$vararg_buffer1);
    // unreachable;
   }
  }
  $numlumps = ((($header)) + 4|0);
  $2 = HEAPU8[$numlumps>>0]|(HEAPU8[$numlumps+1>>0]<<8)|(HEAPU8[$numlumps+2>>0]<<16)|(HEAPU8[$numlumps+3>>0]<<24);
  $infotableofs = ((($header)) + 8|0);
  $mul = $2 << 4;
  $call23 = (_Z_Malloc($mul,1,0)|0);
  $3 = HEAPU8[$infotableofs>>0]|(HEAPU8[$infotableofs+1>>0]<<8)|(HEAPU8[$infotableofs+2>>0]<<16)|(HEAPU8[$infotableofs+3>>0]<<24);
  (_W_Read($call,$3,$call23,$mul)|0);
  $4 = HEAPU8[$numlumps>>0]|(HEAPU8[$numlumps+1>>0]<<8)|(HEAPU8[$numlumps+2>>0]<<16)|(HEAPU8[$numlumps+3>>0]<<24);
  $add = (($4) + ($0))|0;
  $17 = $call23;$newnumlumps$0 = $add;
 } else {
  $call6 = (_Z_Malloc(16,1,0)|0);
  HEAP8[$call6>>0]=0&255;HEAP8[$call6+1>>0]=(0>>8)&255;HEAP8[$call6+2>>0]=(0>>16)&255;HEAP8[$call6+3>>0]=0>>24;
  $length7 = ((($call)) + 8|0);
  $1 = HEAP32[$length7>>2]|0;
  $size = ((($call6)) + 4|0);
  HEAP8[$size>>0]=$1&255;HEAP8[$size+1>>0]=($1>>8)&255;HEAP8[$size+2>>0]=($1>>16)&255;HEAP8[$size+3>>0]=$1>>24;
  $name = ((($call6)) + 8|0);
  _M_ExtractFileBase($filename,$name);
  $inc = (($0) + 1)|0;
  $17 = $call6;$newnumlumps$0 = $inc;
 }
 $5 = HEAP32[99848]|0;
 $call$i = (_calloc($newnumlumps$0,28)|0);
 $cmp$i = ($call$i|0)==(0|0);
 if ($cmp$i) {
  _I_Error(156689,$vararg_buffer4);
  // unreachable;
 }
 $cmp123$i = ($5|0)!=(0);
 $cmp224$i = ($newnumlumps$0|0)!=(0);
 $or$cond25$i = $cmp224$i & $cmp123$i;
 if ($or$cond25$i) {
  $$pre$i = HEAP32[99849]|0;
  $19 = $$pre$i;$8 = $$pre$i;$i$026$i = 0;
  while(1) {
   $6 = (($call$i) + (($i$026$i*28)|0)|0);
   $7 = (($8) + (($i$026$i*28)|0)|0);
   ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$6+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$6+20>>2]=HEAP32[$7+20>>2]|0;HEAP32[$6+24>>2]=HEAP32[$7+24>>2]|0;
   $cache$i = (((($call$i) + (($i$026$i*28)|0)|0)) + 20|0);
   $9 = HEAP32[$cache$i>>2]|0;
   $cmp5$i = ($9|0)==(0|0);
   if ($cmp5$i) {
    $10 = $8;$20 = $19;
   } else {
    _Z_ChangeUser($9,$cache$i);
    $$pre27$i = HEAP32[99849]|0;
    $10 = $$pre27$i;$20 = $$pre27$i;
   }
   $next$i = (((($10) + (($i$026$i*28)|0)|0)) + 24|0);
   $11 = HEAP32[$next$i>>2]|0;
   $cmp13$i = ($11|0)==(0|0);
   if (!($cmp13$i)) {
    $sub$ptr$lhs$cast$i = $11;
    $sub$ptr$rhs$cast$i = $10;
    $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
    $next19$i = (((($call$i) + (($i$026$i*28)|0)|0)) + 24|0);
    $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 28)&-1;
    $arrayidx17$i = (($call$i) + (($sub$ptr$div$i*28)|0)|0);
    HEAP32[$next19$i>>2] = $arrayidx17$i;
   }
   $inc$i = (($i$026$i) + 1)|0;
   $12 = HEAP32[99848]|0;
   $cmp1$i = ($inc$i>>>0)<($12>>>0);
   $cmp2$i = ($inc$i>>>0)<($newnumlumps$0>>>0);
   $or$cond$i = $cmp2$i & $cmp1$i;
   if ($or$cond$i) {
    $19 = $20;$8 = $10;$i$026$i = $inc$i;
   } else {
    $13 = $20;
    break;
   }
  }
 } else {
  $$pre28$i = HEAP32[99849]|0;
  $13 = $$pre28$i;
 }
 _free($13);
 HEAP32[99849] = $call$i;
 HEAP32[99848] = $newnumlumps$0;
 $cmp2837 = ($5>>>0)<($newnumlumps$0>>>0);
 if ($cmp2837) {
  $arrayidx = (($call$i) + (($5*28)|0)|0);
  $filerover$040 = $17;$i$038 = $5;$lump_p$039 = $arrayidx;
  while(1) {
   $wad_file29 = ((($lump_p$039)) + 8|0);
   HEAP32[$wad_file29>>2] = $call;
   $14 = HEAPU8[$filerover$040>>0]|(HEAPU8[$filerover$040+1>>0]<<8)|(HEAPU8[$filerover$040+2>>0]<<16)|(HEAPU8[$filerover$040+3>>0]<<24);
   $position = ((($lump_p$039)) + 12|0);
   HEAP32[$position>>2] = $14;
   $size31 = ((($filerover$040)) + 4|0);
   $15 = HEAPU8[$size31>>0]|(HEAPU8[$size31+1>>0]<<8)|(HEAPU8[$size31+2>>0]<<16)|(HEAPU8[$size31+3>>0]<<24);
   $size32 = ((($lump_p$039)) + 16|0);
   HEAP32[$size32>>2] = $15;
   $cache = ((($lump_p$039)) + 20|0);
   HEAP32[$cache>>2] = 0;
   $arraydecay36 = ((($filerover$040)) + 8|0);
   (_strncpy($lump_p$039,$arraydecay36,8)|0);
   $incdec$ptr = ((($lump_p$039)) + 28|0);
   $incdec$ptr38 = ((($filerover$040)) + 16|0);
   $inc39 = (($i$038) + 1)|0;
   $16 = HEAP32[99848]|0;
   $cmp28 = ($inc39>>>0)<($16>>>0);
   if ($cmp28) {
    $filerover$040 = $incdec$ptr38;$i$038 = $inc39;$lump_p$039 = $incdec$ptr;
   } else {
    break;
   }
  }
 }
 _Z_Free($17);
 $18 = HEAP32[99850]|0;
 $cmp40 = ($18|0)==(0|0);
 if ($cmp40) {
  $retval$0 = $call;
  STACKTOP = sp;return ($retval$0|0);
 }
 _Z_Free($18);
 HEAP32[99850] = 0;
 $retval$0 = $call;
 STACKTOP = sp;return ($retval$0|0);
}
function _W_CheckNumForName($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arraydecay10 = 0, $arrayidx = 0, $call = 0, $call11 = 0, $call3 = 0, $cmp = 0, $cmp1 = 0, $cmp117 = 0, $cmp6 = 0, $cmp613 = 0, $i$0 = 0, $i$012 = 0, $i$014 = 0, $lump_p$0 = 0, $lump_p$016 = 0;
 var $lump_p$018 = 0, $next = 0, $rem = 0, $retval$1 = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99850]|0;
 $cmp = ($0|0)==(0|0);
 if ($cmp) {
  $3 = HEAP32[99848]|0;
  $i$012 = (($3) + -1)|0;
  $cmp613 = ($i$012|0)>(-1);
  if (!($cmp613)) {
   $retval$1 = -1;
   return ($retval$1|0);
  }
  $4 = HEAP32[99849]|0;
  $i$014 = $i$012;
  while(1) {
   $arraydecay10 = (($4) + (($i$014*28)|0)|0);
   $call11 = (_strncasecmp($arraydecay10,$name,8)|0);
   $tobool12 = ($call11|0)==(0);
   if ($tobool12) {
    $retval$1 = $i$014;
    label = 11;
    break;
   }
   $i$0 = (($i$014) + -1)|0;
   $cmp6 = ($i$0|0)>(-1);
   if ($cmp6) {
    $i$014 = $i$0;
   } else {
    $retval$1 = -1;
    label = 11;
    break;
   }
  }
  if ((label|0) == 11) {
   return ($retval$1|0);
  }
 }
 $call = (_W_LumpNameHash($name)|0);
 $1 = HEAP32[99848]|0;
 $rem = (($call>>>0) % ($1>>>0))&-1;
 $arrayidx = (($0) + ($rem<<2)|0);
 $lump_p$016 = HEAP32[$arrayidx>>2]|0;
 $cmp117 = ($lump_p$016|0)==(0|0);
 if ($cmp117) {
  $retval$1 = -1;
  return ($retval$1|0);
 }
 $lump_p$018 = $lump_p$016;
 while(1) {
  $call3 = (_strncasecmp($lump_p$018,$name,8)|0);
  $tobool = ($call3|0)==(0);
  if ($tobool) {
   break;
  }
  $next = ((($lump_p$018)) + 24|0);
  $lump_p$0 = HEAP32[$next>>2]|0;
  $cmp1 = ($lump_p$0|0)==(0|0);
  if ($cmp1) {
   $retval$1 = -1;
   label = 11;
   break;
  } else {
   $lump_p$018 = $lump_p$0;
  }
 }
 if ((label|0) == 11) {
  return ($retval$1|0);
 }
 $2 = HEAP32[99849]|0;
 $sub$ptr$lhs$cast = $lump_p$018;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($2))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 28)&-1;
 $retval$1 = $sub$ptr$div;
 return ($retval$1|0);
}
function _W_GetNumForName($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arraydecay10$i = 0, $arrayidx$i = 0, $call$i = 0, $call11$i = 0, $call3$i = 0, $cmp = 0, $cmp$i = 0, $cmp1$i = 0, $cmp117$i = 0, $cmp6$i = 0, $cmp613$i = 0, $i$0$i = 0, $i$012$i = 0, $i$014$i = 0, $lump_p$0$i = 0;
 var $lump_p$016$i = 0, $lump_p$018$i = 0, $next$i = 0, $rem$i = 0, $retval$1$i5 = 0, $sub$ptr$div$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$sub$i = 0, $tobool$i = 0, $tobool12$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99850]|0;
 $cmp$i = ($0|0)==(0|0);
 L1: do {
  if ($cmp$i) {
   $2 = HEAP32[99848]|0;
   $i$012$i = (($2) + -1)|0;
   $cmp613$i = ($i$012$i|0)>(-1);
   if ($cmp613$i) {
    $3 = HEAP32[99849]|0;
    $i$014$i = $i$012$i;
    while(1) {
     $arraydecay10$i = (($3) + (($i$014$i*28)|0)|0);
     $call11$i = (_strncasecmp($arraydecay10$i,$name,8)|0);
     $tobool12$i = ($call11$i|0)==(0);
     if ($tobool12$i) {
      $retval$1$i5 = $i$014$i;
      break;
     }
     $i$0$i = (($i$014$i) + -1)|0;
     $cmp6$i = ($i$0$i|0)>(-1);
     if ($cmp6$i) {
      $i$014$i = $i$0$i;
     } else {
      break L1;
     }
    }
    STACKTOP = sp;return ($retval$1$i5|0);
   }
  } else {
   $call$i = (_W_LumpNameHash($name)|0);
   $1 = HEAP32[99848]|0;
   $rem$i = (($call$i>>>0) % ($1>>>0))&-1;
   $arrayidx$i = (($0) + ($rem$i<<2)|0);
   $lump_p$016$i = HEAP32[$arrayidx$i>>2]|0;
   $cmp117$i = ($lump_p$016$i|0)==(0|0);
   if (!($cmp117$i)) {
    $lump_p$018$i = $lump_p$016$i;
    while(1) {
     $call3$i = (_strncasecmp($lump_p$018$i,$name,8)|0);
     $tobool$i = ($call3$i|0)==(0);
     if ($tobool$i) {
      break;
     }
     $next$i = ((($lump_p$018$i)) + 24|0);
     $lump_p$0$i = HEAP32[$next$i>>2]|0;
     $cmp1$i = ($lump_p$0$i|0)==(0|0);
     if ($cmp1$i) {
      break L1;
     } else {
      $lump_p$018$i = $lump_p$0$i;
     }
    }
    $4 = HEAP32[99849]|0;
    $sub$ptr$lhs$cast$i = $lump_p$018$i;
    $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($4))|0;
    $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 28)&-1;
    $cmp = ($sub$ptr$sub$i|0)<(0);
    if (!($cmp)) {
     $retval$1$i5 = $sub$ptr$div$i;
     STACKTOP = sp;return ($retval$1$i5|0);
    }
   }
  }
 } while(0);
 HEAP32[$vararg_buffer>>2] = $name;
 _I_Error(156715,$vararg_buffer);
 // unreachable;
 return (0)|0;
}
function _W_LumpLength($lump) {
 $lump = $lump|0;
 var $0 = 0, $1 = 0, $2 = 0, $cmp = 0, $size = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99848]|0;
 $cmp = ($0>>>0)>($lump>>>0);
 if ($cmp) {
  $1 = HEAP32[99849]|0;
  $size = (((($1) + (($lump*28)|0)|0)) + 16|0);
  $2 = HEAP32[$size>>2]|0;
  STACKTOP = sp;return ($2|0);
 } else {
  HEAP32[$vararg_buffer>>2] = $lump;
  _I_Error(156746,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _W_ReadLump($lump,$dest) {
 $lump = $lump|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $cmp = 0, $cmp2 = 0, $position = 0, $size = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $wad_file = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[99848]|0;
 $cmp = ($0>>>0)>($lump>>>0);
 if (!($cmp)) {
  HEAP32[$vararg_buffer>>2] = $lump;
  _I_Error(156775,$vararg_buffer);
  // unreachable;
 }
 $1 = HEAP32[99849]|0;
 $wad_file = (((($1) + (($lump*28)|0)|0)) + 8|0);
 $2 = HEAP32[$wad_file>>2]|0;
 $position = (((($1) + (($lump*28)|0)|0)) + 12|0);
 $3 = HEAP32[$position>>2]|0;
 $size = (((($1) + (($lump*28)|0)|0)) + 16|0);
 $4 = HEAP32[$size>>2]|0;
 $call = (_W_Read($2,$3,$dest,$4)|0);
 $5 = HEAP32[$size>>2]|0;
 $cmp2 = ($call|0)<($5|0);
 if ($cmp2) {
  HEAP32[$vararg_buffer1>>2] = $call;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $5;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $lump;
  _I_Error(156802,$vararg_buffer1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _W_CacheLumpNum($lumpnum,$tag) {
 $lumpnum = $lumpnum|0;
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $cache = 0, $call$i = 0, $call11 = 0, $cmp = 0;
 var $cmp$i = 0, $cmp$i16 = 0, $cmp1 = 0, $cmp2$i = 0, $cmp5 = 0, $mapped = 0, $position = 0, $position$i = 0, $result$0 = 0, $size$i = 0, $size$i18 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $wad_file = 0, $wad_file$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[99848]|0;
 $cmp = ($0>>>0)>($lumpnum>>>0);
 if (!($cmp)) {
  HEAP32[$vararg_buffer>>2] = $lumpnum;
  _I_Error(156844,$vararg_buffer);
  // unreachable;
 }
 $1 = HEAP32[99849]|0;
 $wad_file = (((($1) + (($lumpnum*28)|0)|0)) + 8|0);
 $2 = HEAP32[$wad_file>>2]|0;
 $mapped = ((($2)) + 4|0);
 $3 = HEAP32[$mapped>>2]|0;
 $cmp1 = ($3|0)==(0|0);
 if (!($cmp1)) {
  $position = (((($1) + (($lumpnum*28)|0)|0)) + 12|0);
  $4 = HEAP32[$position>>2]|0;
  $add$ptr = (($3) + ($4)|0);
  $result$0 = $add$ptr;
  STACKTOP = sp;return ($result$0|0);
 }
 $cache = (((($1) + (($lumpnum*28)|0)|0)) + 20|0);
 $5 = HEAP32[$cache>>2]|0;
 $cmp5 = ($5|0)==(0|0);
 if (!($cmp5)) {
  _Z_ChangeTag2($5,$tag,156875,410);
  $result$0 = $5;
  STACKTOP = sp;return ($result$0|0);
 }
 $6 = HEAP32[99848]|0;
 $cmp$i = ($6>>>0)>($lumpnum>>>0);
 if (!($cmp$i)) {
  HEAP32[$vararg_buffer1>>2] = $lumpnum;
  _I_Error(156746,$vararg_buffer1);
  // unreachable;
 }
 $size$i = (((($1) + (($lumpnum*28)|0)|0)) + 16|0);
 $7 = HEAP32[$size$i>>2]|0;
 $call11 = (_Z_Malloc($7,$tag,$cache)|0);
 HEAP32[$cache>>2] = $call11;
 $8 = HEAP32[99848]|0;
 $cmp$i16 = ($8>>>0)>($lumpnum>>>0);
 if (!($cmp$i16)) {
  HEAP32[$vararg_buffer4>>2] = $lumpnum;
  _I_Error(156775,$vararg_buffer4);
  // unreachable;
 }
 $9 = HEAP32[99849]|0;
 $wad_file$i = (((($9) + (($lumpnum*28)|0)|0)) + 8|0);
 $10 = HEAP32[$wad_file$i>>2]|0;
 $position$i = (((($9) + (($lumpnum*28)|0)|0)) + 12|0);
 $11 = HEAP32[$position$i>>2]|0;
 $size$i18 = (((($9) + (($lumpnum*28)|0)|0)) + 16|0);
 $12 = HEAP32[$size$i18>>2]|0;
 $call$i = (_W_Read($10,$11,$call11,$12)|0);
 $13 = HEAP32[$size$i18>>2]|0;
 $cmp2$i = ($call$i|0)<($13|0);
 if ($cmp2$i) {
  HEAP32[$vararg_buffer7>>2] = $call$i;
  $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
  HEAP32[$vararg_ptr10>>2] = $13;
  $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
  HEAP32[$vararg_ptr11>>2] = $lumpnum;
  _I_Error(156802,$vararg_buffer7);
  // unreachable;
 }
 $14 = HEAP32[$cache>>2]|0;
 $result$0 = $14;
 STACKTOP = sp;return ($result$0|0);
}
function _W_CacheLumpName($name,$tag) {
 $name = $name|0;
 $tag = $tag|0;
 var $call = 0, $call1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_GetNumForName($name)|0);
 $call1 = (_W_CacheLumpNum($call,$tag)|0);
 return ($call1|0);
}
function _W_ReleaseLumpNum($lumpnum) {
 $lumpnum = $lumpnum|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cache = 0, $cmp = 0, $cmp1 = 0, $mapped = 0, $vararg_buffer = 0, $wad_file = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99848]|0;
 $cmp = ($0>>>0)>($lumpnum>>>0);
 if (!($cmp)) {
  HEAP32[$vararg_buffer>>2] = $lumpnum;
  _I_Error(156883,$vararg_buffer);
  // unreachable;
 }
 $1 = HEAP32[99849]|0;
 $wad_file = (((($1) + (($lumpnum*28)|0)|0)) + 8|0);
 $2 = HEAP32[$wad_file>>2]|0;
 $mapped = ((($2)) + 4|0);
 $3 = HEAP32[$mapped>>2]|0;
 $cmp1 = ($3|0)==(0|0);
 if (!($cmp1)) {
  STACKTOP = sp;return;
 }
 $cache = (((($1) + (($lumpnum*28)|0)|0)) + 20|0);
 $4 = HEAP32[$cache>>2]|0;
 _Z_ChangeTag2($4,8,156875,461);
 STACKTOP = sp;return;
}
function _W_ReleaseLumpName($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cache$i = 0, $call = 0, $cmp$i = 0, $cmp1$i = 0, $mapped$i = 0, $vararg_buffer = 0, $wad_file$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $call = (_W_GetNumForName($name)|0);
 $0 = HEAP32[99848]|0;
 $cmp$i = ($0>>>0)>($call>>>0);
 if (!($cmp$i)) {
  HEAP32[$vararg_buffer>>2] = $call;
  _I_Error(156883,$vararg_buffer);
  // unreachable;
 }
 $1 = HEAP32[99849]|0;
 $wad_file$i = (((($1) + (($call*28)|0)|0)) + 8|0);
 $2 = HEAP32[$wad_file$i>>2]|0;
 $mapped$i = ((($2)) + 4|0);
 $3 = HEAP32[$mapped$i>>2]|0;
 $cmp1$i = ($3|0)==(0|0);
 if (!($cmp1$i)) {
  STACKTOP = sp;return;
 }
 $cache$i = (((($1) + (($call*28)|0)|0)) + 20|0);
 $4 = HEAP32[$cache$i>>2]|0;
 _Z_ChangeTag2($4,8,156875,461);
 STACKTOP = sp;return;
}
function _W_GenerateHashTable() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arraydecay = 0, $arrayidx6 = 0, $arrayidx8 = 0, $call = 0, $call5 = 0, $cmp = 0, $cmp1 = 0, $cmp4 = 0, $cmp48 = 0, $i$09 = 0, $inc = 0, $mul = 0, $mul3 = 0, $next = 0;
 var $rem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99850]|0;
 $cmp = ($0|0)==(0|0);
 if (!($cmp)) {
  _Z_Free($0);
 }
 $1 = HEAP32[99848]|0;
 $cmp1 = ($1|0)==(0);
 if ($cmp1) {
  return;
 }
 $mul = $1 << 2;
 $call = (_Z_Malloc($mul,1,0)|0);
 HEAP32[99850] = $call;
 $2 = HEAP32[99848]|0;
 $mul3 = $2 << 2;
 _memset(($call|0),0,($mul3|0))|0;
 $3 = HEAP32[99848]|0;
 $cmp48 = ($3|0)==(0);
 if ($cmp48) {
  return;
 }
 $i$09 = 0;
 while(1) {
  $4 = HEAP32[99849]|0;
  $arraydecay = (($4) + (($i$09*28)|0)|0);
  $call5 = (_W_LumpNameHash($arraydecay)|0);
  $rem = (($call5>>>0) % ($3>>>0))&-1;
  $arrayidx6 = (($call) + ($rem<<2)|0);
  $5 = HEAP32[$arrayidx6>>2]|0;
  $next = (((($4) + (($i$09*28)|0)|0)) + 24|0);
  HEAP32[$next>>2] = $5;
  $arrayidx8 = (($4) + (($i$09*28)|0)|0);
  HEAP32[$arrayidx6>>2] = $arrayidx8;
  $inc = (($i$09) + 1)|0;
  $cmp4 = ($inc>>>0)<($3>>>0);
  if ($cmp4) {
   $i$09 = $inc;
  } else {
   break;
  }
 }
 return;
}
function _W_CheckCorrectIWAD($mission) {
 $mission = $mission|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $arraydecay10$i = 0, $arraydecay10$i$1 = 0, $arraydecay10$i$2 = 0, $arraydecay10$i$3 = 0, $arrayidx$i = 0, $arrayidx$i$1 = 0, $arrayidx$i$2 = 0, $arrayidx$i$3 = 0, $call$i = 0, $call$i$1 = 0, $call$i$2 = 0, $call$i$3 = 0, $call11$i = 0, $call11$i$1 = 0, $call11$i$2 = 0, $call11$i$3 = 0, $call12 = 0, $call12$1 = 0, $call12$2 = 0, $call12$3 = 0;
 var $call3$i = 0, $call3$i$1 = 0, $call3$i$2 = 0, $call3$i$3 = 0, $call8 = 0, $call8$1 = 0, $call8$2 = 0, $call8$3 = 0, $call9 = 0, $call9$1 = 0, $call9$2 = 0, $call9$3 = 0, $cmp$i = 0, $cmp$i$1 = 0, $cmp$i$2 = 0, $cmp$i$3 = 0, $cmp1$i = 0, $cmp1$i$1 = 0, $cmp1$i$2 = 0, $cmp1$i$3 = 0;
 var $cmp117$i = 0, $cmp117$i$1 = 0, $cmp117$i$2 = 0, $cmp117$i$3 = 0, $cmp2 = 0, $cmp2$1 = 0, $cmp2$2 = 0, $cmp2$3 = 0, $cmp4 = 0, $cmp4$1 = 0, $cmp4$2 = 0, $cmp4$3 = 0, $cmp6$i = 0, $cmp6$i$1 = 0, $cmp6$i$2 = 0, $cmp6$i$3 = 0, $cmp613$i = 0, $cmp613$i$1 = 0, $cmp613$i$2 = 0, $cmp613$i$3 = 0;
 var $i$0$i = 0, $i$0$i$1 = 0, $i$0$i$2 = 0, $i$0$i$3 = 0, $i$012$i = 0, $i$012$i$1 = 0, $i$012$i$2 = 0, $i$012$i$3 = 0, $i$014$i = 0, $i$014$i$1 = 0, $i$014$i$2 = 0, $i$014$i$3 = 0, $lump_p$0$i = 0, $lump_p$0$i$1 = 0, $lump_p$0$i$2 = 0, $lump_p$0$i$3 = 0, $lump_p$016$i = 0, $lump_p$016$i$1 = 0, $lump_p$016$i$2 = 0, $lump_p$016$i$3 = 0;
 var $lump_p$018$i = 0, $lump_p$018$i$1 = 0, $lump_p$018$i$2 = 0, $lump_p$018$i$3 = 0, $next$i = 0, $next$i$1 = 0, $next$i$2 = 0, $next$i$3 = 0, $rem$i = 0, $rem$i$1 = 0, $rem$i$2 = 0, $rem$i$3 = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$i$1 = 0, $sub$ptr$lhs$cast$i$2 = 0, $sub$ptr$lhs$cast$i$3 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$1 = 0, $sub$ptr$sub$i$2 = 0, $sub$ptr$sub$i$3 = 0;
 var $tobool$i = 0, $tobool$i$1 = 0, $tobool$i$2 = 0, $tobool$i$3 = 0, $tobool12$i = 0, $tobool12$i$1 = 0, $tobool12$i$2 = 0, $tobool12$i$3 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer19 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer19 = sp + 72|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $cmp2 = ($mission|0)==(0);
 if ($cmp2) {
  label = 14;
 } else {
  $0 = HEAP32[99850]|0;
  $cmp$i = ($0|0)==(0|0);
  L3: do {
   if ($cmp$i) {
    $2 = HEAP32[99848]|0;
    $i$012$i = (($2) + -1)|0;
    $cmp613$i = ($i$012$i|0)>(-1);
    if ($cmp613$i) {
     $3 = HEAP32[99849]|0;
     $i$014$i = $i$012$i;
     while(1) {
      $arraydecay10$i = (($3) + (($i$014$i*28)|0)|0);
      $call11$i = (_strncasecmp($arraydecay10$i,156916,8)|0);
      $tobool12$i = ($call11$i|0)==(0);
      if ($tobool12$i) {
       break;
      }
      $i$0$i = (($i$014$i) + -1)|0;
      $cmp6$i = ($i$0$i|0)>(-1);
      if ($cmp6$i) {
       $i$014$i = $i$0$i;
      } else {
       break L3;
      }
     }
     $call8 = (_D_SuggestGameName(0,4)|0);
     $call9 = (_D_GameMissionString($mission)|0);
     $call12 = (_D_GameMissionString(0)|0);
     HEAP32[$vararg_buffer>>2] = $call8;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = 157051;
     $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
     HEAP32[$vararg_ptr2>>2] = $call9;
     $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
     HEAP32[$vararg_ptr3>>2] = 157051;
     $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
     HEAP32[$vararg_ptr4>>2] = $call12;
     _I_Error(156923,$vararg_buffer);
     // unreachable;
    }
   } else {
    $call$i = (_W_LumpNameHash(156916)|0);
    $1 = HEAP32[99848]|0;
    $rem$i = (($call$i>>>0) % ($1>>>0))&-1;
    $arrayidx$i = (($0) + ($rem$i<<2)|0);
    $lump_p$016$i = HEAP32[$arrayidx$i>>2]|0;
    $cmp117$i = ($lump_p$016$i|0)==(0|0);
    if (!($cmp117$i)) {
     $lump_p$018$i = $lump_p$016$i;
     while(1) {
      $call3$i = (_strncasecmp($lump_p$018$i,156916,8)|0);
      $tobool$i = ($call3$i|0)==(0);
      if ($tobool$i) {
       break;
      }
      $next$i = ((($lump_p$018$i)) + 24|0);
      $lump_p$0$i = HEAP32[$next$i>>2]|0;
      $cmp1$i = ($lump_p$0$i|0)==(0|0);
      if ($cmp1$i) {
       break L3;
      } else {
       $lump_p$018$i = $lump_p$0$i;
      }
     }
     $4 = HEAP32[99849]|0;
     $sub$ptr$lhs$cast$i = $lump_p$018$i;
     $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($4))|0;
     $cmp4 = ($sub$ptr$sub$i|0)>(-28);
     if ($cmp4) {
      $call8 = (_D_SuggestGameName(0,4)|0);
      $call9 = (_D_GameMissionString($mission)|0);
      $call12 = (_D_GameMissionString(0)|0);
      HEAP32[$vararg_buffer>>2] = $call8;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = 157051;
      $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr2>>2] = $call9;
      $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
      HEAP32[$vararg_ptr3>>2] = 157051;
      $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
      HEAP32[$vararg_ptr4>>2] = $call12;
      _I_Error(156923,$vararg_buffer);
      // unreachable;
     }
    }
   }
  } while(0);
  $cmp2$1 = ($mission|0)==(6);
  if ($cmp2$1) {
   label = 26;
  } else {
   label = 14;
  }
 }
 if ((label|0) == 14) {
  $5 = HEAP32[99850]|0;
  $cmp$i$1 = ($5|0)==(0|0);
  L20: do {
   if ($cmp$i$1) {
    $8 = HEAP32[99848]|0;
    $i$012$i$1 = (($8) + -1)|0;
    $cmp613$i$1 = ($i$012$i$1|0)>(-1);
    if ($cmp613$i$1) {
     $9 = HEAP32[99849]|0;
     $i$014$i$1 = $i$012$i$1;
     while(1) {
      $arraydecay10$i$1 = (($9) + (($i$014$i$1*28)|0)|0);
      $call11$i$1 = (_strncasecmp($arraydecay10$i$1,157063,8)|0);
      $tobool12$i$1 = ($call11$i$1|0)==(0);
      if ($tobool12$i$1) {
       break;
      }
      $i$0$i$1 = (($i$014$i$1) + -1)|0;
      $cmp6$i$1 = ($i$0$i$1|0)>(-1);
      if ($cmp6$i$1) {
       $i$014$i$1 = $i$0$i$1;
      } else {
       break L20;
      }
     }
     $call8$1 = (_D_SuggestGameName(6,4)|0);
     $call9$1 = (_D_GameMissionString($mission)|0);
     $call12$1 = (_D_GameMissionString(6)|0);
     HEAP32[$vararg_buffer5>>2] = $call8$1;
     $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
     HEAP32[$vararg_ptr8>>2] = 157051;
     $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
     HEAP32[$vararg_ptr9>>2] = $call9$1;
     $vararg_ptr10 = ((($vararg_buffer5)) + 12|0);
     HEAP32[$vararg_ptr10>>2] = 157051;
     $vararg_ptr11 = ((($vararg_buffer5)) + 16|0);
     HEAP32[$vararg_ptr11>>2] = $call12$1;
     _I_Error(156923,$vararg_buffer5);
     // unreachable;
    }
   } else {
    $call$i$1 = (_W_LumpNameHash(157063)|0);
    $6 = HEAP32[99848]|0;
    $rem$i$1 = (($call$i$1>>>0) % ($6>>>0))&-1;
    $arrayidx$i$1 = (($5) + ($rem$i$1<<2)|0);
    $lump_p$016$i$1 = HEAP32[$arrayidx$i$1>>2]|0;
    $cmp117$i$1 = ($lump_p$016$i$1|0)==(0|0);
    if (!($cmp117$i$1)) {
     $lump_p$018$i$1 = $lump_p$016$i$1;
     while(1) {
      $call3$i$1 = (_strncasecmp($lump_p$018$i$1,157063,8)|0);
      $tobool$i$1 = ($call3$i$1|0)==(0);
      if ($tobool$i$1) {
       break;
      }
      $next$i$1 = ((($lump_p$018$i$1)) + 24|0);
      $lump_p$0$i$1 = HEAP32[$next$i$1>>2]|0;
      $cmp1$i$1 = ($lump_p$0$i$1|0)==(0|0);
      if ($cmp1$i$1) {
       break L20;
      } else {
       $lump_p$018$i$1 = $lump_p$0$i$1;
      }
     }
     $7 = HEAP32[99849]|0;
     $sub$ptr$lhs$cast$i$1 = $lump_p$018$i$1;
     $sub$ptr$sub$i$1 = (($sub$ptr$lhs$cast$i$1) - ($7))|0;
     $cmp4$1 = ($sub$ptr$sub$i$1|0)>(-28);
     if ($cmp4$1) {
      $call8$1 = (_D_SuggestGameName(6,4)|0);
      $call9$1 = (_D_GameMissionString($mission)|0);
      $call12$1 = (_D_GameMissionString(6)|0);
      HEAP32[$vararg_buffer5>>2] = $call8$1;
      $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
      HEAP32[$vararg_ptr8>>2] = 157051;
      $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
      HEAP32[$vararg_ptr9>>2] = $call9$1;
      $vararg_ptr10 = ((($vararg_buffer5)) + 12|0);
      HEAP32[$vararg_ptr10>>2] = 157051;
      $vararg_ptr11 = ((($vararg_buffer5)) + 16|0);
      HEAP32[$vararg_ptr11>>2] = $call12$1;
      _I_Error(156923,$vararg_buffer5);
      // unreachable;
     }
    }
   }
  } while(0);
  $cmp2$2 = ($mission|0)==(7);
  if (!($cmp2$2)) {
   label = 26;
  }
 }
 if ((label|0) == 26) {
  $10 = HEAP32[99850]|0;
  $cmp$i$2 = ($10|0)==(0|0);
  L37: do {
   if ($cmp$i$2) {
    $13 = HEAP32[99848]|0;
    $i$012$i$2 = (($13) + -1)|0;
    $cmp613$i$2 = ($i$012$i$2|0)>(-1);
    if ($cmp613$i$2) {
     $14 = HEAP32[99849]|0;
     $i$014$i$2 = $i$012$i$2;
     while(1) {
      $arraydecay10$i$2 = (($14) + (($i$014$i$2*28)|0)|0);
      $call11$i$2 = (_strncasecmp($arraydecay10$i$2,157070,8)|0);
      $tobool12$i$2 = ($call11$i$2|0)==(0);
      if ($tobool12$i$2) {
       break;
      }
      $i$0$i$2 = (($i$014$i$2) + -1)|0;
      $cmp6$i$2 = ($i$0$i$2|0)>(-1);
      if ($cmp6$i$2) {
       $i$014$i$2 = $i$0$i$2;
      } else {
       break L37;
      }
     }
     $call8$2 = (_D_SuggestGameName(7,4)|0);
     $call9$2 = (_D_GameMissionString($mission)|0);
     $call12$2 = (_D_GameMissionString(7)|0);
     HEAP32[$vararg_buffer12>>2] = $call8$2;
     $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
     HEAP32[$vararg_ptr15>>2] = 157051;
     $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
     HEAP32[$vararg_ptr16>>2] = $call9$2;
     $vararg_ptr17 = ((($vararg_buffer12)) + 12|0);
     HEAP32[$vararg_ptr17>>2] = 157051;
     $vararg_ptr18 = ((($vararg_buffer12)) + 16|0);
     HEAP32[$vararg_ptr18>>2] = $call12$2;
     _I_Error(156923,$vararg_buffer12);
     // unreachable;
    }
   } else {
    $call$i$2 = (_W_LumpNameHash(157070)|0);
    $11 = HEAP32[99848]|0;
    $rem$i$2 = (($call$i$2>>>0) % ($11>>>0))&-1;
    $arrayidx$i$2 = (($10) + ($rem$i$2<<2)|0);
    $lump_p$016$i$2 = HEAP32[$arrayidx$i$2>>2]|0;
    $cmp117$i$2 = ($lump_p$016$i$2|0)==(0|0);
    if (!($cmp117$i$2)) {
     $lump_p$018$i$2 = $lump_p$016$i$2;
     while(1) {
      $call3$i$2 = (_strncasecmp($lump_p$018$i$2,157070,8)|0);
      $tobool$i$2 = ($call3$i$2|0)==(0);
      if ($tobool$i$2) {
       break;
      }
      $next$i$2 = ((($lump_p$018$i$2)) + 24|0);
      $lump_p$0$i$2 = HEAP32[$next$i$2>>2]|0;
      $cmp1$i$2 = ($lump_p$0$i$2|0)==(0|0);
      if ($cmp1$i$2) {
       break L37;
      } else {
       $lump_p$018$i$2 = $lump_p$0$i$2;
      }
     }
     $12 = HEAP32[99849]|0;
     $sub$ptr$lhs$cast$i$2 = $lump_p$018$i$2;
     $sub$ptr$sub$i$2 = (($sub$ptr$lhs$cast$i$2) - ($12))|0;
     $cmp4$2 = ($sub$ptr$sub$i$2|0)>(-28);
     if ($cmp4$2) {
      $call8$2 = (_D_SuggestGameName(7,4)|0);
      $call9$2 = (_D_GameMissionString($mission)|0);
      $call12$2 = (_D_GameMissionString(7)|0);
      HEAP32[$vararg_buffer12>>2] = $call8$2;
      $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
      HEAP32[$vararg_ptr15>>2] = 157051;
      $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
      HEAP32[$vararg_ptr16>>2] = $call9$2;
      $vararg_ptr17 = ((($vararg_buffer12)) + 12|0);
      HEAP32[$vararg_ptr17>>2] = 157051;
      $vararg_ptr18 = ((($vararg_buffer12)) + 16|0);
      HEAP32[$vararg_ptr18>>2] = $call12$2;
      _I_Error(156923,$vararg_buffer12);
      // unreachable;
     }
    }
   }
  } while(0);
  $cmp2$3 = ($mission|0)==(8);
  if ($cmp2$3) {
   STACKTOP = sp;return;
  }
 }
 $15 = HEAP32[99850]|0;
 $cmp$i$3 = ($15|0)==(0|0);
 if ($cmp$i$3) {
  $18 = HEAP32[99848]|0;
  $i$012$i$3 = (($18) + -1)|0;
  $cmp613$i$3 = ($i$012$i$3|0)>(-1);
  if (!($cmp613$i$3)) {
   STACKTOP = sp;return;
  }
  $19 = HEAP32[99849]|0;
  $i$014$i$3 = $i$012$i$3;
  while(1) {
   $arraydecay10$i$3 = (($19) + (($i$014$i$3*28)|0)|0);
   $call11$i$3 = (_strncasecmp($arraydecay10$i$3,157077,8)|0);
   $tobool12$i$3 = ($call11$i$3|0)==(0);
   if ($tobool12$i$3) {
    label = 48;
    break;
   }
   $i$0$i$3 = (($i$014$i$3) + -1)|0;
   $cmp6$i$3 = ($i$0$i$3|0)>(-1);
   if ($cmp6$i$3) {
    $i$014$i$3 = $i$0$i$3;
   } else {
    label = 49;
    break;
   }
  }
  if ((label|0) == 48) {
   $call8$3 = (_D_SuggestGameName(8,4)|0);
   $call9$3 = (_D_GameMissionString($mission)|0);
   $call12$3 = (_D_GameMissionString(8)|0);
   HEAP32[$vararg_buffer19>>2] = $call8$3;
   $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
   HEAP32[$vararg_ptr22>>2] = 157051;
   $vararg_ptr23 = ((($vararg_buffer19)) + 8|0);
   HEAP32[$vararg_ptr23>>2] = $call9$3;
   $vararg_ptr24 = ((($vararg_buffer19)) + 12|0);
   HEAP32[$vararg_ptr24>>2] = 157051;
   $vararg_ptr25 = ((($vararg_buffer19)) + 16|0);
   HEAP32[$vararg_ptr25>>2] = $call12$3;
   _I_Error(156923,$vararg_buffer19);
   // unreachable;
  }
  else if ((label|0) == 49) {
   STACKTOP = sp;return;
  }
 }
 $call$i$3 = (_W_LumpNameHash(157077)|0);
 $16 = HEAP32[99848]|0;
 $rem$i$3 = (($call$i$3>>>0) % ($16>>>0))&-1;
 $arrayidx$i$3 = (($15) + ($rem$i$3<<2)|0);
 $lump_p$016$i$3 = HEAP32[$arrayidx$i$3>>2]|0;
 $cmp117$i$3 = ($lump_p$016$i$3|0)==(0|0);
 if ($cmp117$i$3) {
  STACKTOP = sp;return;
 }
 $lump_p$018$i$3 = $lump_p$016$i$3;
 while(1) {
  $call3$i$3 = (_strncasecmp($lump_p$018$i$3,157077,8)|0);
  $tobool$i$3 = ($call3$i$3|0)==(0);
  if ($tobool$i$3) {
   break;
  }
  $next$i$3 = ((($lump_p$018$i$3)) + 24|0);
  $lump_p$0$i$3 = HEAP32[$next$i$3>>2]|0;
  $cmp1$i$3 = ($lump_p$0$i$3|0)==(0|0);
  if ($cmp1$i$3) {
   label = 49;
   break;
  } else {
   $lump_p$018$i$3 = $lump_p$0$i$3;
  }
 }
 if ((label|0) == 49) {
  STACKTOP = sp;return;
 }
 $17 = HEAP32[99849]|0;
 $sub$ptr$lhs$cast$i$3 = $lump_p$018$i$3;
 $sub$ptr$sub$i$3 = (($sub$ptr$lhs$cast$i$3) - ($17))|0;
 $cmp4$3 = ($sub$ptr$sub$i$3|0)>(-28);
 if ($cmp4$3) {
  $call8$3 = (_D_SuggestGameName(8,4)|0);
  $call9$3 = (_D_GameMissionString($mission)|0);
  $call12$3 = (_D_GameMissionString(8)|0);
  HEAP32[$vararg_buffer19>>2] = $call8$3;
  $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
  HEAP32[$vararg_ptr22>>2] = 157051;
  $vararg_ptr23 = ((($vararg_buffer19)) + 8|0);
  HEAP32[$vararg_ptr23>>2] = $call9$3;
  $vararg_ptr24 = ((($vararg_buffer19)) + 12|0);
  HEAP32[$vararg_ptr24>>2] = 157051;
  $vararg_ptr25 = ((($vararg_buffer19)) + 16|0);
  HEAP32[$vararg_ptr25>>2] = $call12$3;
  _I_Error(156923,$vararg_buffer19);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _Z_Init() {
 var $0 = 0, $1 = 0, $add$ptr6 = 0, $blocklist5 = 0, $call = 0, $next = 0, $next6 = 0, $prev = 0, $rover = 0, $size = 0, $sub = 0, $tag = 0, $tag8 = 0, $user = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $size = sp;
 $call = (_I_ZoneBase($size)|0);
 HEAP32[99851] = $call;
 $0 = HEAP32[$size>>2]|0;
 HEAP32[$call>>2] = $0;
 $add$ptr6 = ((($call)) + 32|0);
 $prev = ((($call)) + 24|0);
 HEAP32[$prev>>2] = $add$ptr6;
 $next = ((($call)) + 20|0);
 HEAP32[$next>>2] = $add$ptr6;
 $user = ((($call)) + 8|0);
 HEAP32[$user>>2] = $call;
 $tag = ((($call)) + 12|0);
 HEAP32[$tag>>2] = 1;
 $rover = ((($call)) + 28|0);
 HEAP32[$rover>>2] = $add$ptr6;
 $blocklist5 = ((($call)) + 4|0);
 $next6 = ((($call)) + 48|0);
 HEAP32[$next6>>2] = $blocklist5;
 $1 = ((($call)) + 52|0);
 HEAP32[$1>>2] = $blocklist5;
 $tag8 = ((($call)) + 40|0);
 HEAP32[$tag8>>2] = 4;
 $sub = (($0) + -32)|0;
 HEAP32[$add$ptr6>>2] = $sub;
 STACKTOP = sp;return;
}
function _Z_Free($ptr) {
 $ptr = $ptr|0;
 var $$pre = 0, $$pre29 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add$ptr = 0, $add27 = 0, $block$0 = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp16 = 0, $cmp2 = 0, $cmp23 = 0, $cmp33 = 0, $id = 0, $next = 0, $next13 = 0, $next21$phi$trans$insert = 0, $next21$pre$phiZ2D = 0, $next28 = 0, $prev = 0, $prev15 = 0, $prev31 = 0, $rover = 0;
 var $rover32 = 0, $tag = 0, $tag22 = 0, $tag9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $add$ptr = ((($ptr)) + -24|0);
 $id = ((($ptr)) + -12|0);
 $0 = HEAP32[$id>>2]|0;
 $cmp = ($0|0)==(1919505);
 if (!($cmp)) {
  _I_Error(157084,$vararg_buffer);
  // unreachable;
 }
 $tag = ((($ptr)) + -16|0);
 $1 = HEAP32[$tag>>2]|0;
 $cmp1 = ($1|0)==(4);
 $$pre29 = ((($ptr)) + -20|0);
 if (!($cmp1)) {
  $2 = HEAP32[$$pre29>>2]|0;
  $cmp2 = ($2|0)==(0|0);
  if (!($cmp2)) {
   HEAP32[$2>>2] = 0;
  }
 }
 HEAP32[$tag>>2] = 4;
 HEAP32[$$pre29>>2] = 0;
 HEAP32[$id>>2] = 0;
 $prev = ((($ptr)) + -4|0);
 $3 = HEAP32[$prev>>2]|0;
 $tag9 = ((($3)) + 8|0);
 $4 = HEAP32[$tag9>>2]|0;
 $cmp10 = ($4|0)==(4);
 if ($cmp10) {
  $5 = HEAP32[$add$ptr>>2]|0;
  $6 = HEAP32[$3>>2]|0;
  $add = (($6) + ($5))|0;
  HEAP32[$3>>2] = $add;
  $next = ((($ptr)) + -8|0);
  $7 = HEAP32[$next>>2]|0;
  $next13 = ((($3)) + 16|0);
  HEAP32[$next13>>2] = $7;
  $prev15 = ((($7)) + 20|0);
  HEAP32[$prev15>>2] = $3;
  $8 = HEAP32[99851]|0;
  $rover = ((($8)) + 28|0);
  $9 = HEAP32[$rover>>2]|0;
  $cmp16 = ($9|0)==($add$ptr|0);
  if ($cmp16) {
   HEAP32[$rover>>2] = $3;
   $10 = $7;$block$0 = $3;$next21$pre$phiZ2D = $next13;
  } else {
   $10 = $7;$block$0 = $3;$next21$pre$phiZ2D = $next13;
  }
 } else {
  $next21$phi$trans$insert = ((($ptr)) + -8|0);
  $$pre = HEAP32[$next21$phi$trans$insert>>2]|0;
  $10 = $$pre;$block$0 = $add$ptr;$next21$pre$phiZ2D = $next21$phi$trans$insert;
 }
 $tag22 = ((($10)) + 8|0);
 $11 = HEAP32[$tag22>>2]|0;
 $cmp23 = ($11|0)==(4);
 if (!($cmp23)) {
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$10>>2]|0;
 $13 = HEAP32[$block$0>>2]|0;
 $add27 = (($13) + ($12))|0;
 HEAP32[$block$0>>2] = $add27;
 $next28 = ((($10)) + 16|0);
 $14 = HEAP32[$next28>>2]|0;
 HEAP32[$next21$pre$phiZ2D>>2] = $14;
 $prev31 = ((($14)) + 20|0);
 HEAP32[$prev31>>2] = $block$0;
 $15 = HEAP32[99851]|0;
 $rover32 = ((($15)) + 28|0);
 $16 = HEAP32[$rover32>>2]|0;
 $cmp33 = ($10|0)==($16|0);
 if (!($cmp33)) {
  STACKTOP = sp;return;
 }
 HEAP32[$rover32>>2] = $block$0;
 STACKTOP = sp;return;
}
function _Z_Malloc($size,$tag,$user) {
 $size = $size|0;
 $tag = $tag|0;
 $user = $user|0;
 var $$pre$i = 0, $$pre29$i56 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add$ptr30 = 0, $add$ptr4850 = 0, $add1 = 0, $add27$i = 0, $and49 = 0;
 var $base$1 = 0, $base$2 = 0, $block$0$i = 0, $cmp = 0, $cmp$i = 0, $cmp10 = 0, $cmp10$i = 0, $cmp13 = 0, $cmp16$i = 0, $cmp2$i = 0, $cmp23 = 0, $cmp23$i = 0, $cmp25 = 0, $cmp28 = 0, $cmp33$i = 0, $cmp42 = 0, $cmp43 = 0, $cmp6 = 0, $id = 0, $id$i = 0;
 var $next = 0, $next$i = 0, $next13$i = 0, $next16 = 0, $next17 = 0, $next20 = 0, $next21$phi$trans$insert$i = 0, $next21$pre$phi$iZ2D = 0, $next28$i = 0, $next35 = 0, $next36 = 0, $next53 = 0, $or$cond = 0, $prev = 0, $prev$i = 0, $prev15 = 0, $prev15$i = 0, $prev31$i = 0, $prev34 = 0, $prev38 = 0;
 var $prev5 = 0, $rover$0 = 0, $rover$1 = 0, $rover$i = 0, $rover2 = 0, $rover32$i = 0, $rover54 = 0, $spec$select = 0, $sub27 = 0, $tag22 = 0, $tag22$i = 0, $tag22$le = 0, $tag3 = 0, $tag32 = 0, $tag9 = 0, $tag9$i = 0, $user33 = 0, $user46 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $and49 = (($size) + 27)|0;
 $add1 = $and49 & -4;
 $0 = HEAP32[99851]|0;
 $rover2 = ((($0)) + 28|0);
 $1 = HEAP32[$rover2>>2]|0;
 $prev = ((($1)) + 20|0);
 $2 = HEAP32[$prev>>2]|0;
 $tag3 = ((($2)) + 8|0);
 $3 = HEAP32[$tag3>>2]|0;
 $cmp = ($3|0)==(4);
 $spec$select = $cmp ? $2 : $1;
 $prev5 = ((($spec$select)) + 20|0);
 $4 = HEAP32[$prev5>>2]|0;
 $base$1 = $spec$select;$rover$0 = $spec$select;
 L1: while(1) {
  $cmp6 = ($rover$0|0)==($4|0);
  if ($cmp6) {
   label = 3;
   break;
  }
  $tag9 = ((($rover$0)) + 8|0);
  $5 = HEAP32[$tag9>>2]|0;
  $cmp10 = ($5|0)==(4);
  do {
   if ($cmp10) {
    $next20 = ((($rover$0)) + 16|0);
    $26 = HEAP32[$next20>>2]|0;
    $base$2 = $base$1;$rover$1 = $26;
   } else {
    $cmp13 = ($5|0)<(7);
    if ($cmp13) {
     $next = ((($rover$0)) + 16|0);
     $6 = HEAP32[$next>>2]|0;
     $base$2 = $6;$rover$1 = $6;
     break;
    }
    $prev15 = ((($base$1)) + 20|0);
    $7 = HEAP32[$prev15>>2]|0;
    $id$i = ((($rover$0)) + 12|0);
    $8 = HEAP32[$id$i>>2]|0;
    $cmp$i = ($8|0)==(1919505);
    if (!($cmp$i)) {
     label = 9;
     break L1;
    }
    $$pre29$i56 = ((($rover$0)) + 4|0);
    $9 = HEAP32[$$pre29$i56>>2]|0;
    $cmp2$i = ($9|0)==(0|0);
    if (!($cmp2$i)) {
     HEAP32[$9>>2] = 0;
    }
    HEAP32[$tag9>>2] = 4;
    HEAP32[$$pre29$i56>>2] = 0;
    HEAP32[$id$i>>2] = 0;
    $prev$i = ((($rover$0)) + 20|0);
    $10 = HEAP32[$prev$i>>2]|0;
    $tag9$i = ((($10)) + 8|0);
    $11 = HEAP32[$tag9$i>>2]|0;
    $cmp10$i = ($11|0)==(4);
    if ($cmp10$i) {
     $12 = HEAP32[$rover$0>>2]|0;
     $13 = HEAP32[$10>>2]|0;
     $add$i = (($13) + ($12))|0;
     HEAP32[$10>>2] = $add$i;
     $next$i = ((($rover$0)) + 16|0);
     $14 = HEAP32[$next$i>>2]|0;
     $next13$i = ((($10)) + 16|0);
     HEAP32[$next13$i>>2] = $14;
     $prev15$i = ((($14)) + 20|0);
     HEAP32[$prev15$i>>2] = $10;
     $15 = HEAP32[99851]|0;
     $rover$i = ((($15)) + 28|0);
     $16 = HEAP32[$rover$i>>2]|0;
     $cmp16$i = ($16|0)==($rover$0|0);
     if ($cmp16$i) {
      HEAP32[$rover$i>>2] = $10;
      $17 = $14;$block$0$i = $10;$next21$pre$phi$iZ2D = $next13$i;
     } else {
      $17 = $14;$block$0$i = $10;$next21$pre$phi$iZ2D = $next13$i;
     }
    } else {
     $next21$phi$trans$insert$i = ((($rover$0)) + 16|0);
     $$pre$i = HEAP32[$next21$phi$trans$insert$i>>2]|0;
     $17 = $$pre$i;$block$0$i = $rover$0;$next21$pre$phi$iZ2D = $next21$phi$trans$insert$i;
    }
    $tag22$i = ((($17)) + 8|0);
    $18 = HEAP32[$tag22$i>>2]|0;
    $cmp23$i = ($18|0)==(4);
    if ($cmp23$i) {
     $19 = HEAP32[$17>>2]|0;
     $20 = HEAP32[$block$0$i>>2]|0;
     $add27$i = (($20) + ($19))|0;
     HEAP32[$block$0$i>>2] = $add27$i;
     $next28$i = ((($17)) + 16|0);
     $21 = HEAP32[$next28$i>>2]|0;
     HEAP32[$next21$pre$phi$iZ2D>>2] = $21;
     $prev31$i = ((($21)) + 20|0);
     HEAP32[$prev31$i>>2] = $block$0$i;
     $22 = HEAP32[99851]|0;
     $rover32$i = ((($22)) + 28|0);
     $23 = HEAP32[$rover32$i>>2]|0;
     $cmp33$i = ($17|0)==($23|0);
     if ($cmp33$i) {
      HEAP32[$rover32$i>>2] = $block$0$i;
     }
    }
    $next16 = ((($7)) + 16|0);
    $24 = HEAP32[$next16>>2]|0;
    $next17 = ((($24)) + 16|0);
    $25 = HEAP32[$next17>>2]|0;
    $base$2 = $24;$rover$1 = $25;
   }
  } while(0);
  $tag22 = ((($base$2)) + 8|0);
  $27 = HEAP32[$tag22>>2]|0;
  $cmp23 = ($27|0)==(4);
  if ($cmp23) {
   $28 = HEAP32[$base$2>>2]|0;
   $cmp25 = ($28|0)<($add1|0);
   if (!($cmp25)) {
    label = 23;
    break;
   }
  }
  $base$1 = $base$2;$rover$0 = $rover$1;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = $add1;
  _I_Error(157123,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 9) {
  _I_Error(157084,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 23) {
  $tag22$le = ((($base$2)) + 8|0);
  $sub27 = (($28) - ($add1))|0;
  $cmp28 = ($sub27|0)>(64);
  if ($cmp28) {
   $add$ptr30 = (($base$2) + ($add1)|0);
   HEAP32[$add$ptr30>>2] = $sub27;
   $tag32 = ((($add$ptr30)) + 8|0);
   HEAP32[$tag32>>2] = 4;
   $user33 = ((($add$ptr30)) + 4|0);
   HEAP32[$user33>>2] = 0;
   $prev34 = ((($add$ptr30)) + 20|0);
   HEAP32[$prev34>>2] = $base$2;
   $next35 = ((($base$2)) + 16|0);
   $29 = HEAP32[$next35>>2]|0;
   $next36 = ((($add$ptr30)) + 16|0);
   HEAP32[$next36>>2] = $29;
   $prev38 = ((($29)) + 20|0);
   HEAP32[$prev38>>2] = $add$ptr30;
   HEAP32[$next35>>2] = $add$ptr30;
   HEAP32[$base$2>>2] = $add1;
  }
  $cmp42 = ($user|0)==(0|0);
  $cmp43 = ($tag|0)>(6);
  $or$cond = $cmp43 & $cmp42;
  if ($or$cond) {
   _I_Error(157166,$vararg_buffer3);
   // unreachable;
  }
  $user46 = ((($base$2)) + 4|0);
  HEAP32[$user46>>2] = $user;
  HEAP32[$tag22$le>>2] = $tag;
  $add$ptr4850 = ((($base$2)) + 24|0);
  if ($cmp42) {
   $next53 = ((($base$2)) + 16|0);
   $30 = HEAP32[$next53>>2]|0;
   $31 = HEAP32[99851]|0;
   $rover54 = ((($31)) + 28|0);
   HEAP32[$rover54>>2] = $30;
   $id = ((($base$2)) + 12|0);
   HEAP32[$id>>2] = 1919505;
   STACKTOP = sp;return ($add$ptr4850|0);
  }
  HEAP32[$user>>2] = $add$ptr4850;
  $next53 = ((($base$2)) + 16|0);
  $30 = HEAP32[$next53>>2]|0;
  $31 = HEAP32[99851]|0;
  $rover54 = ((($31)) + 28|0);
  HEAP32[$rover54>>2] = $30;
  $id = ((($base$2)) + 12|0);
  HEAP32[$id>>2] = 1919505;
  STACKTOP = sp;return ($add$ptr4850|0);
 }
 return (0)|0;
}
function _Z_FreeTags($lowtag,$hightag) {
 $lowtag = $lowtag|0;
 $hightag = $hightag|0;
 var $$in1114 = 0, $$pre$i = 0, $$pre15 = 0, $$pre29$i17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add27$i = 0, $block$0$i = 0, $blocklist2 = 0, $blocklist212 = 0, $cmp = 0, $cmp$i = 0, $cmp10$i = 0, $cmp13 = 0, $cmp16$i = 0, $cmp2$i = 0, $cmp23$i = 0, $cmp33$i = 0, $cmp4 = 0;
 var $cmp6 = 0, $cmp8 = 0, $id$i = 0, $next1 = 0, $next13$i = 0, $next21$pre$phi$iZ2D = 0, $next28$i = 0, $next3 = 0, $or$cond = 0, $or$cond9 = 0, $prev$i = 0, $prev15$i = 0, $prev31$i = 0, $rover$i = 0, $rover32$i = 0, $tag = 0, $tag22$i = 0, $tag9$i = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99851]|0;
 $next1 = ((($0)) + 20|0);
 $1 = HEAP32[$next1>>2]|0;
 $blocklist212 = ((($0)) + 4|0);
 $cmp13 = ($1|0)==($blocklist212|0);
 if ($cmp13) {
  STACKTOP = sp;return;
 }
 $$in1114 = $1;$21 = $0;
 L4: while(1) {
  $next3 = ((($$in1114)) + 16|0);
  $2 = HEAP32[$next3>>2]|0;
  $tag = ((($$in1114)) + 8|0);
  $3 = HEAP32[$tag>>2]|0;
  $cmp4 = ($3|0)==(4);
  $cmp6 = ($3|0)<($lowtag|0);
  $or$cond = $cmp4 | $cmp6;
  $cmp8 = ($3|0)>($hightag|0);
  $or$cond9 = $cmp8 | $or$cond;
  do {
   if ($or$cond9) {
    $20 = $21;
   } else {
    $id$i = ((($$in1114)) + 12|0);
    $4 = HEAP32[$id$i>>2]|0;
    $cmp$i = ($4|0)==(1919505);
    if (!($cmp$i)) {
     label = 6;
     break L4;
    }
    $$pre29$i17 = ((($$in1114)) + 4|0);
    $5 = HEAP32[$$pre29$i17>>2]|0;
    $cmp2$i = ($5|0)==(0|0);
    if (!($cmp2$i)) {
     HEAP32[$5>>2] = 0;
    }
    HEAP32[$tag>>2] = 4;
    HEAP32[$$pre29$i17>>2] = 0;
    HEAP32[$id$i>>2] = 0;
    $prev$i = ((($$in1114)) + 20|0);
    $6 = HEAP32[$prev$i>>2]|0;
    $tag9$i = ((($6)) + 8|0);
    $7 = HEAP32[$tag9$i>>2]|0;
    $cmp10$i = ($7|0)==(4);
    if ($cmp10$i) {
     $8 = HEAP32[$$in1114>>2]|0;
     $9 = HEAP32[$6>>2]|0;
     $add$i = (($9) + ($8))|0;
     HEAP32[$6>>2] = $add$i;
     $10 = HEAP32[$next3>>2]|0;
     $next13$i = ((($6)) + 16|0);
     HEAP32[$next13$i>>2] = $10;
     $prev15$i = ((($10)) + 20|0);
     HEAP32[$prev15$i>>2] = $6;
     $11 = HEAP32[99851]|0;
     $rover$i = ((($11)) + 28|0);
     $12 = HEAP32[$rover$i>>2]|0;
     $cmp16$i = ($12|0)==($$in1114|0);
     if ($cmp16$i) {
      HEAP32[$rover$i>>2] = $6;
      $13 = $10;$block$0$i = $6;$next21$pre$phi$iZ2D = $next13$i;
     } else {
      $13 = $10;$block$0$i = $6;$next21$pre$phi$iZ2D = $next13$i;
     }
    } else {
     $$pre$i = HEAP32[$next3>>2]|0;
     $13 = $$pre$i;$block$0$i = $$in1114;$next21$pre$phi$iZ2D = $next3;
    }
    $tag22$i = ((($13)) + 8|0);
    $14 = HEAP32[$tag22$i>>2]|0;
    $cmp23$i = ($14|0)==(4);
    if (!($cmp23$i)) {
     $$pre15 = HEAP32[99851]|0;
     $20 = $$pre15;
     break;
    }
    $15 = HEAP32[$13>>2]|0;
    $16 = HEAP32[$block$0$i>>2]|0;
    $add27$i = (($16) + ($15))|0;
    HEAP32[$block$0$i>>2] = $add27$i;
    $next28$i = ((($13)) + 16|0);
    $17 = HEAP32[$next28$i>>2]|0;
    HEAP32[$next21$pre$phi$iZ2D>>2] = $17;
    $prev31$i = ((($17)) + 20|0);
    HEAP32[$prev31$i>>2] = $block$0$i;
    $18 = HEAP32[99851]|0;
    $rover32$i = ((($18)) + 28|0);
    $19 = HEAP32[$rover32$i>>2]|0;
    $cmp33$i = ($13|0)==($19|0);
    if ($cmp33$i) {
     HEAP32[$rover32$i>>2] = $block$0$i;
     $20 = $18;
    } else {
     $20 = $18;
    }
   }
  } while(0);
  $blocklist2 = ((($20)) + 4|0);
  $cmp = ($2|0)==($blocklist2|0);
  if ($cmp) {
   label = 17;
   break;
  } else {
   $$in1114 = $2;$21 = $20;
  }
 }
 if ((label|0) == 6) {
  _I_Error(157084,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
}
function _Z_CheckHeap() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $block$0 = 0, $block$010 = 0, $block$014 = 0, $blocklist2 = 0, $blocklist212 = 0, $cmp = 0, $cmp11 = 0, $cmp13 = 0, $cmp14 = 0;
 var $cmp4 = 0, $cmp8 = 0, $next = 0, $next1 = 0, $next111 = 0, $next115 = 0, $prev = 0, $tag = 0, $tag13 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[99851]|0;
 $next = ((($0)) + 20|0);
 $block$010 = HEAP32[$next>>2]|0;
 $next111 = ((($block$010)) + 16|0);
 $1 = HEAP32[$next111>>2]|0;
 $blocklist212 = ((($0)) + 4|0);
 $cmp13 = ($1|0)==($blocklist212|0);
 if ($cmp13) {
  STACKTOP = sp;return;
 }
 $3 = $1;$block$014 = $block$010;$next115 = $next111;
 while(1) {
  $2 = HEAP32[$block$014>>2]|0;
  $add$ptr = (($block$014) + ($2)|0);
  $cmp4 = ($add$ptr|0)==($3|0);
  if (!($cmp4)) {
   label = 4;
   break;
  }
  $prev = ((($3)) + 20|0);
  $4 = HEAP32[$prev>>2]|0;
  $cmp8 = ($4|0)==($block$014|0);
  if (!($cmp8)) {
   label = 6;
   break;
  }
  $tag = ((($block$014)) + 8|0);
  $5 = HEAP32[$tag>>2]|0;
  $cmp11 = ($5|0)==(4);
  if ($cmp11) {
   $6 = HEAP32[$next115>>2]|0;
   $tag13 = ((($6)) + 8|0);
   $7 = HEAP32[$tag13>>2]|0;
   $cmp14 = ($7|0)==(4);
   if ($cmp14) {
    label = 9;
    break;
   }
  }
  $block$0 = HEAP32[$next115>>2]|0;
  $next1 = ((($block$0)) + 16|0);
  $8 = HEAP32[$next1>>2]|0;
  $9 = HEAP32[99851]|0;
  $blocklist2 = ((($9)) + 4|0);
  $cmp = ($8|0)==($blocklist2|0);
  if ($cmp) {
   label = 11;
   break;
  } else {
   $3 = $8;$block$014 = $block$0;$next115 = $next1;
  }
 }
 if ((label|0) == 4) {
  _I_Error(157217,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 6) {
  _I_Error(157272,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 9) {
  _I_Error(157327,$vararg_buffer3);
  // unreachable;
 }
 else if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function _Z_ChangeTag2($ptr,$tag,$file,$line) {
 $ptr = $ptr|0;
 $tag = $tag|0;
 $file = $file|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $id = 0, $tag5 = 0, $user = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $id = ((($ptr)) + -12|0);
 $0 = HEAP32[$id>>2]|0;
 $cmp = ($0|0)==(1919505);
 if (!($cmp)) {
  HEAP32[$vararg_buffer>>2] = $file;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $line;
  _I_Error(157369,$vararg_buffer);
  // unreachable;
 }
 $cmp1 = ($tag|0)>(6);
 if (!($cmp1)) {
  $tag5 = ((($ptr)) + -16|0);
  HEAP32[$tag5>>2] = $tag;
  STACKTOP = sp;return;
 }
 $user = ((($ptr)) + -20|0);
 $1 = HEAP32[$user>>2]|0;
 $cmp2 = ($1|0)==(0|0);
 if ($cmp2) {
  HEAP32[$vararg_buffer2>>2] = $file;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $line;
  _I_Error(157413,$vararg_buffer2);
  // unreachable;
 } else {
  $tag5 = ((($ptr)) + -16|0);
  HEAP32[$tag5>>2] = $tag;
  STACKTOP = sp;return;
 }
}
function _Z_ChangeUser($ptr,$user) {
 $ptr = $ptr|0;
 $user = $user|0;
 var $0 = 0, $cmp = 0, $id = 0, $user1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $id = ((($ptr)) + -12|0);
 $0 = HEAP32[$id>>2]|0;
 $cmp = ($0|0)==(1919505);
 if ($cmp) {
  $user1 = ((($ptr)) + -20|0);
  HEAP32[$user1>>2] = $user;
  HEAP32[$user>>2] = $ptr;
  STACKTOP = sp;return;
 } else {
  _I_Error(157474,$vararg_buffer);
  // unreachable;
 }
}
function _W_StdC_OpenFile($path) {
 $path = $path|0;
 var $call = 0, $call1 = 0, $call3 = 0, $cmp = 0, $fstream5 = 0, $length = 0, $mapped = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_fopen($path,157528)|0);
 $cmp = ($call|0)==(0|0);
 if ($cmp) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $call1 = (_Z_Malloc(16,1,0)|0);
 HEAP32[$call1>>2] = 129740;
 $mapped = ((($call1)) + 4|0);
 HEAP32[$mapped>>2] = 0;
 $call3 = (_M_FileLength($call)|0);
 $length = ((($call1)) + 8|0);
 HEAP32[$length>>2] = $call3;
 $fstream5 = ((($call1)) + 12|0);
 HEAP32[$fstream5>>2] = $call;
 $retval$0 = $call1;
 return ($retval$0|0);
}
function _W_StdC_CloseFile($wad) {
 $wad = $wad|0;
 var $0 = 0, $fstream = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $fstream = ((($wad)) + 12|0);
 $0 = HEAP32[$fstream>>2]|0;
 (_fclose($0)|0);
 _Z_Free($wad);
 return;
}
function _W_StdC_Read($wad,$offset,$buffer,$buffer_len) {
 $wad = $wad|0;
 $offset = $offset|0;
 $buffer = $buffer|0;
 $buffer_len = $buffer_len|0;
 var $0 = 0, $1 = 0, $call2 = 0, $fstream = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $fstream = ((($wad)) + 12|0);
 $0 = HEAP32[$fstream>>2]|0;
 (_fseek($0,$offset,0)|0);
 $1 = HEAP32[$fstream>>2]|0;
 $call2 = (_fread($buffer,1,$buffer_len,$1)|0);
 return ($call2|0);
}
function _I_GetEvent() {
 var $$$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$i = 0, $arrayidx$i = 0, $call = 0, $call2 = 0, $cmp = 0, $cmp$i = 0, $cmp$i1 = 0, $cmp14 = 0, $cmp4$i = 0, $conv = 0, $conv10 = 0, $conv4 = 0, $data1 = 0, $data2 = 0;
 var $event = 0, $key = 0, $key$addr$0$i = 0, $pressed = 0, $tobool = 0, $tobool$i = 0, $tobool1 = 0, $tobool3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $event = sp + 4|0;
 $pressed = sp;
 $key = sp + 24|0;
 $call2 = (_DG_GetKey($pressed,$key)|0);
 $tobool3 = ($call2|0)==(0);
 if ($tobool3) {
  STACKTOP = sp;return;
 }
 $data1 = ((($event)) + 4|0);
 $data2 = ((($event)) + 8|0);
 while(1) {
  $0 = HEAP32[$pressed>>2]|0;
  $1 = HEAP8[$key>>0]|0;
  $cmp$i = ($1<<24>>24)==(-74);
  if ($cmp$i) {
   $tobool$i = ($0|0)==(0);
   $$$i = $tobool$i ? -1 : 1;
   $2 = HEAP32[99852]|0;
   $add$i = (($2) + ($$$i))|0;
   HEAP32[99852] = $add$i;
  }
  $tobool1 = ($0|0)==(0);
  if ($tobool1) {
   break;
  }
  HEAP32[$event>>2] = 0;
  $conv = $1&255;
  HEAP32[$data1>>2] = $conv;
  $3 = HEAP32[99852]|0;
  $cmp$i1 = ($3|0)>(0);
  do {
   if ($cmp$i1) {
    $cmp4$i = ($1<<24>>24)>(-1);
    if ($cmp4$i) {
     $arrayidx$i = (126896 + ($conv)|0);
     $4 = HEAP8[$arrayidx$i>>0]|0;
     $key$addr$0$i = $4;
     label = 10;
     break;
    } else {
     HEAP32[$data2>>2] = 0;
     label = 11;
     break;
    }
   } else {
    $key$addr$0$i = $1;
    label = 10;
   }
  } while(0);
  if ((label|0) == 10) {
   label = 0;
   $conv4 = $key$addr$0$i&255;
   HEAP32[$data2>>2] = $conv4;
   $cmp = ($1<<24>>24)==(0);
   if (!($cmp)) {
    label = 11;
   }
  }
  if ((label|0) == 11) {
   label = 0;
   _D_PostEvent($event);
  }
  $call = (_DG_GetKey($pressed,$key)|0);
  $tobool = ($call|0)==(0);
  if ($tobool) {
   label = 15;
   break;
  }
 }
 if ((label|0) == 15) {
  STACKTOP = sp;return;
 }
 HEAP32[$event>>2] = 1;
 $conv10 = $1&255;
 HEAP32[$data1>>2] = $conv10;
 HEAP32[$data2>>2] = 0;
 $cmp14 = ($1<<24>>24)==(0);
 if ($cmp14) {
  STACKTOP = sp;return;
 }
 _D_PostEvent($event);
 STACKTOP = sp;return;
}
function _I_InitInput() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_InitGraphics() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $call12 = 0, $call3 = 0, $call4 = 0, $cmp = 0, $cmp7 = 0, $div = 0, $div6 = 0;
 var $spec$store$select = 0, $vararg_buffer = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 HEAP32[99862] = 320;
 HEAP32[99863] = 200;
 HEAP32[99861] = 32;
 HEAP32[99858] = 8;
 HEAP32[99857] = 8;
 HEAP32[99856] = 8;
 HEAP32[99864] = 8;
 HEAP32[99860] = 8;
 HEAP32[99859] = 16;
 HEAP32[99865] = 24;
 HEAP32[$vararg_buffer>>2] = 320;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 200;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 320;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 200;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = 32;
 (_printf(157531,$vararg_buffer)|0);
 $0 = HEAP32[99856]|0;
 $1 = HEAP32[99857]|0;
 $2 = HEAP32[99858]|0;
 $3 = HEAP32[99864]|0;
 $4 = HEAP32[99859]|0;
 $5 = HEAP32[99860]|0;
 $6 = HEAP32[99865]|0;
 HEAP32[$vararg_buffer5>>2] = $0;
 $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
 HEAP32[$vararg_ptr8>>2] = $1;
 $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
 HEAP32[$vararg_ptr9>>2] = $2;
 $vararg_ptr10 = ((($vararg_buffer5)) + 12|0);
 HEAP32[$vararg_ptr10>>2] = $3;
 $vararg_ptr11 = ((($vararg_buffer5)) + 16|0);
 HEAP32[$vararg_ptr11>>2] = $4;
 $vararg_ptr12 = ((($vararg_buffer5)) + 20|0);
 HEAP32[$vararg_ptr12>>2] = $5;
 $vararg_ptr13 = ((($vararg_buffer5)) + 24|0);
 HEAP32[$vararg_ptr13>>2] = 0;
 $vararg_ptr14 = ((($vararg_buffer5)) + 28|0);
 HEAP32[$vararg_ptr14>>2] = $6;
 (_printf(157621,$vararg_buffer5)|0);
 HEAP32[$vararg_buffer15>>2] = 320;
 $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
 HEAP32[$vararg_ptr18>>2] = 200;
 (_printf(157724,$vararg_buffer15)|0);
 $call3 = (_M_CheckParmWithArgs(157774,1)|0);
 $cmp = ($call3|0)>(0);
 if ($cmp) {
  $7 = HEAP32[99374]|0;
  $add = (($call3) + 1)|0;
  $arrayidx = (($7) + ($add<<2)|0);
  $8 = HEAP32[$arrayidx>>2]|0;
  $call4 = (_atoi($8)|0);
  HEAP32[32438] = $call4;
  HEAP32[$vararg_buffer19>>2] = $call4;
  (_printf(157783,$vararg_buffer19)|0);
  $call12 = (_Z_Malloc(64000,1,0)|0);
  HEAP32[99853] = $call12;
  HEAP32[99855] = 1;
  STACKTOP = sp;return;
 } else {
  $9 = HEAP32[99862]|0;
  $div = (($9>>>0) / 320)&-1;
  $10 = HEAP32[99863]|0;
  $div6 = (($10>>>0) / 200)&-1;
  $cmp7 = ($div6>>>0)<($div>>>0);
  $spec$store$select = $cmp7 ? $div6 : $div;
  HEAP32[32438] = $spec$store$select;
  HEAP32[$vararg_buffer22>>2] = $spec$store$select;
  (_printf(157819,$vararg_buffer22)|0);
  $call12 = (_Z_Malloc(64000,1,0)|0);
  HEAP32[99853] = $call12;
  HEAP32[99855] = 1;
  STACKTOP = sp;return;
 }
}
function _I_StartFrame() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_StartTic() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _I_GetEvent();
 return;
}
function _I_UpdateNoBlit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_FinishUpdate() {
 var $$pre31$i = 0, $$pre31$i24 = 0, $$pre31$i25 = 0, $$pre31$i26 = 0, $$pre31$i27 = 0, $$pre31$i28 = 0, $$pre32$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr17 = 0, $bf$clear$i = 0, $bf$clear3$i = 0, $bf$clear8$i = 0, $bf$lshr$i = 0, $bf$lshr2$i = 0, $c$sroa$0$0$$sroa_idx$i = 0;
 var $c$sroa$0$0$copyload$i = 0, $cmp = 0, $cmp14 = 0, $cmp19$i = 0, $cmp1923$i = 0, $cmp23$i = 0, $cmp2320$i = 0, $conv12$i = 0, $conv13$i = 0, $conv15$i = 0, $conv27$i = 0, $dec = 0, $dec20 = 0, $div$i = 0, $div14 = 0, $div6 = 0, $div7 = 0, $exitcond$i = 0, $i$016 = 0, $i$028$i = 0;
 var $idxprom$i = 0, $in$addr$029$i = 0, $inc = 0, $inc$i = 0, $inc29$i = 0, $inc33$i = 0, $incdec$ptr$i = 0, $incdec$ptr31$i = 0, $j$021$i = 0, $k$024$i = 0, $line_in$017 = 0, $line_out$019 = 0, $line_out$1$lcssa = 0, $line_out$115 = 0, $mul$i = 0, $mul13 = 0, $mul15 = 0, $mul5 = 0, $or$i = 0, $or17$i = 0;
 var $out$addr$030$i = 0, $out$addr$1$lcssa$i = 0, $out$addr$125$i = 0, $out$addr$2$lcssa$i = 0, $out$addr$222$i = 0, $shl$i = 0, $shl14$i = 0, $shr$i = 0, $shr10$i = 0, $shr26$i = 0, $shr5$i = 0, $sub$i = 0, $sub12 = 0, $sub4 = 0, $sub4$i = 0, $sub9$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32438]|0;
 $1 = HEAP32[99861]|0;
 $2 = HEAP32[99862]|0;
 $3 = Math_imul($0, -320)|0;
 $sub4 = (($2) + ($3))|0;
 $mul5 = Math_imul($sub4, $1)|0;
 $div6 = $mul5 >>> 3;
 $div7 = $mul5 >>> 4;
 $sub12 = (($div6) - ($div7))|0;
 $4 = HEAP32[99853]|0;
 $5 = HEAP32[99866]|0;
 $$pre31$i26 = $1;$6 = $0;$dec20 = 199;$line_in$017 = $4;$line_out$019 = $5;
 while(1) {
  $cmp14 = ($6|0)>(0);
  if ($cmp14) {
   $$pre31$i28 = $$pre31$i26;$20 = $6;$i$016 = 0;$line_out$115 = $line_out$019;
   while(1) {
    $add$ptr = (($line_out$115) + ($div7)|0);
    $$pre31$i = $$pre31$i28;$13 = $20;$i$028$i = 0;$in$addr$029$i = $line_in$017;$out$addr$030$i = $add$ptr;
    while(1) {
     $7 = HEAP8[$in$addr$029$i>>0]|0;
     $idxprom$i = $7&255;
     $c$sroa$0$0$$sroa_idx$i = (393824 + ($idxprom$i<<2)|0);
     $c$sroa$0$0$copyload$i = HEAP32[$c$sroa$0$0$$sroa_idx$i>>2]|0;
     $bf$lshr$i = $c$sroa$0$0$copyload$i >>> 16;
     $bf$clear$i = $bf$lshr$i & 255;
     $8 = HEAP32[99856]|0;
     $sub$i = (8 - ($8))|0;
     $shr$i = $bf$clear$i >>> $sub$i;
     $bf$lshr2$i = $c$sroa$0$0$copyload$i >>> 8;
     $bf$clear3$i = $bf$lshr2$i & 255;
     $9 = HEAP32[99857]|0;
     $sub4$i = (8 - ($9))|0;
     $shr5$i = $bf$clear3$i >>> $sub4$i;
     $bf$clear8$i = $c$sroa$0$0$copyload$i & 255;
     $10 = HEAP32[99858]|0;
     $sub9$i = (8 - ($10))|0;
     $shr10$i = $bf$clear8$i >>> $sub9$i;
     $conv12$i = $shr$i & 65535;
     $11 = HEAP32[99859]|0;
     $shl$i = $conv12$i << $11;
     $conv13$i = $shr5$i & 65535;
     $12 = HEAP32[99860]|0;
     $shl14$i = $conv13$i << $12;
     $or$i = $shl14$i | $shl$i;
     $conv15$i = $shr10$i & 65535;
     $or17$i = $or$i | $conv15$i;
     $cmp1923$i = ($13|0)>(0);
     if ($cmp1923$i) {
      $$pre31$i24 = $$pre31$i;$14 = $$pre31$i;$21 = $13;$k$024$i = 0;$out$addr$125$i = $out$addr$030$i;
      while(1) {
       $cmp2320$i = ($14>>>0)>(7);
       if ($cmp2320$i) {
        $j$021$i = 0;$out$addr$222$i = $out$addr$125$i;
        while(1) {
         $mul$i = $j$021$i << 3;
         $shr26$i = $or17$i >>> $mul$i;
         $conv27$i = $shr26$i&255;
         HEAP8[$out$addr$222$i>>0] = $conv27$i;
         $incdec$ptr$i = ((($out$addr$222$i)) + 1|0);
         $inc$i = (($j$021$i) + 1)|0;
         $15 = HEAP32[99861]|0;
         $div$i = $15 >>> 3;
         $cmp23$i = ($inc$i>>>0)<($div$i>>>0);
         if ($cmp23$i) {
          $j$021$i = $inc$i;$out$addr$222$i = $incdec$ptr$i;
         } else {
          break;
         }
        }
        $$pre32$i = HEAP32[32438]|0;
        $$pre31$i25 = $15;$16 = $$pre32$i;$22 = $15;$out$addr$2$lcssa$i = $incdec$ptr$i;
       } else {
        $$pre31$i25 = $$pre31$i24;$16 = $21;$22 = $14;$out$addr$2$lcssa$i = $out$addr$125$i;
       }
       $inc29$i = (($k$024$i) + 1)|0;
       $cmp19$i = ($inc29$i|0)<($16|0);
       if ($cmp19$i) {
        $$pre31$i24 = $$pre31$i25;$14 = $22;$21 = $16;$k$024$i = $inc29$i;$out$addr$125$i = $out$addr$2$lcssa$i;
       } else {
        $17 = $16;$18 = $$pre31$i25;$out$addr$1$lcssa$i = $out$addr$2$lcssa$i;
        break;
       }
      }
     } else {
      $17 = $13;$18 = $$pre31$i;$out$addr$1$lcssa$i = $out$addr$030$i;
     }
     $incdec$ptr31$i = ((($in$addr$029$i)) + 1|0);
     $inc33$i = (($i$028$i) + 1)|0;
     $exitcond$i = ($inc33$i|0)==(320);
     if ($exitcond$i) {
      break;
     } else {
      $$pre31$i = $18;$13 = $17;$i$028$i = $inc33$i;$in$addr$029$i = $incdec$ptr31$i;$out$addr$030$i = $out$addr$1$lcssa$i;
     }
    }
    $mul13 = ($17*320)|0;
    $div14 = $18 >>> 3;
    $mul15 = Math_imul($mul13, $div14)|0;
    $add = (($sub12) + ($mul15))|0;
    $add$ptr16 = (($add$ptr) + ($add)|0);
    $inc = (($i$016) + 1)|0;
    $cmp = ($inc|0)<($17|0);
    if ($cmp) {
     $$pre31$i28 = $18;$20 = $17;$i$016 = $inc;$line_out$115 = $add$ptr16;
    } else {
     $$pre31$i27 = $18;$19 = $17;$line_out$1$lcssa = $add$ptr16;
     break;
    }
   }
  } else {
   $$pre31$i27 = $$pre31$i26;$19 = $6;$line_out$1$lcssa = $line_out$019;
  }
  $add$ptr17 = ((($line_in$017)) + 320|0);
  $dec = (($dec20) + -1)|0;
  $tobool = ($dec20|0)==(0);
  if ($tobool) {
   break;
  } else {
   $$pre31$i26 = $$pre31$i27;$6 = $19;$dec20 = $dec;$line_in$017 = $add$ptr17;$line_out$019 = $line_out$1$lcssa;
  }
 }
 _DG_DrawFrame();
 return;
}
function _I_ReadScreen($scr) {
 $scr = $scr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99853]|0;
 _memcpy(($scr|0),($0|0),64000)|0;
 return;
}
function _I_SetPalette($palette) {
 $palette = $palette|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx2 = 0, $arrayidx20 = 0, $arrayidx9 = 0, $bf$set16 = 0, $bf$set26 = 0, $bf$shl = 0, $bf$shl14 = 0, $conv = 0, $conv10 = 0, $conv21 = 0, $exitcond = 0, $i$010 = 0;
 var $idxprom = 0, $idxprom19 = 0, $idxprom8 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr18 = 0, $incdec$ptr7 = 0, $palette$addr$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99854]|0;
 $i$010 = 0;$palette$addr$09 = $palette;
 while(1) {
  $1 = (393824 + ($i$010<<2)|0);
  $incdec$ptr = ((($palette$addr$09)) + 1|0);
  $2 = HEAP8[$palette$addr$09>>0]|0;
  $idxprom = $2&255;
  $arrayidx2 = ((123888 + ($0<<8)|0) + ($idxprom)|0);
  $3 = HEAP8[$arrayidx2>>0]|0;
  $conv = $3&255;
  $bf$shl = $conv << 16;
  $incdec$ptr7 = ((($palette$addr$09)) + 2|0);
  $4 = HEAP8[$incdec$ptr>>0]|0;
  $idxprom8 = $4&255;
  $arrayidx9 = ((123888 + ($0<<8)|0) + ($idxprom8)|0);
  $5 = HEAP8[$arrayidx9>>0]|0;
  $conv10 = $5&255;
  $bf$shl14 = $conv10 << 8;
  $bf$set16 = $bf$shl14 | $bf$shl;
  $incdec$ptr18 = ((($palette$addr$09)) + 3|0);
  $6 = HEAP8[$incdec$ptr7>>0]|0;
  $idxprom19 = $6&255;
  $arrayidx20 = ((123888 + ($0<<8)|0) + ($idxprom19)|0);
  $7 = HEAP8[$arrayidx20>>0]|0;
  $conv21 = $7&255;
  $bf$set26 = $bf$set16 | $conv21;
  HEAP32[$1>>2] = $bf$set26;
  $inc = (($i$010) + 1)|0;
  $exitcond = ($inc|0)==(256);
  if ($exitcond) {
   break;
  } else {
   $i$010 = $inc;$palette$addr$09 = $incdec$ptr18;
  }
 }
 return;
}
function _I_GetPaletteIndex($r,$g,$b) {
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 var $add = 0, $add33 = 0, $best$021 = 0, $best$2 = 0, $best_diff$020 = 0, $cmp34 = 0, $cmp36 = 0, $exitcond = 0, $i$019 = 0, $inc = 0, $mul = 0, $mul25 = 0, $mul32 = 0, $spec$select = 0, $spec$select18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_puts(157860)|0);
 $mul = Math_imul($r, $r)|0;
 $mul25 = Math_imul($g, $g)|0;
 $add = (($mul25) + ($mul))|0;
 $mul32 = Math_imul($b, $b)|0;
 $add33 = (($add) + ($mul32))|0;
 $cmp36 = ($add33|0)==(0);
 if ($cmp36) {
  $best$2 = 0;
  return ($best$2|0);
 }
 $best$021 = 0;$best_diff$020 = 2147483647;$i$019 = 0;
 while(1) {
  $cmp34 = ($add33|0)<($best_diff$020|0);
  $spec$select18 = $cmp34 ? $i$019 : $best$021;
  $spec$select = $cmp34 ? $add33 : $best_diff$020;
  $inc = (($i$019) + 1)|0;
  $exitcond = ($inc|0)==(256);
  if ($exitcond) {
   $best$2 = $spec$select18;
   break;
  } else {
   $best$021 = $spec$select18;$best_diff$020 = $spec$select;$i$019 = $inc;
  }
 }
 return ($best$2|0);
}
function _I_BeginRead() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_EndRead() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_SetWindowTitle($title) {
 $title = $title|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_GraphicsCheckCommandLine() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_SetGrabMouseCallback($func) {
 $func = $func|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_EnableLoadingDisk() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_BindVideoVariables() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_DisplayFPSDots($dots_on) {
 $dots_on = $dots_on|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_CheckIsScreensaver() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _doomgeneric_Create($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99373] = $argc;
 HEAP32[99374] = $argv;
 $call = (_malloc(256000)|0);
 HEAP32[99866] = $call;
 _DG_Init();
 _D_DoomMain();
 return;
}
function _DG_SleepMs($ms) {
 $ms = $ms|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _DG_GetTicksMs() {
 var $0 = 0, $call$i = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call$i = _emscripten_asm_const_i(0)|0;
 $0 = HEAP32[99868]|0;
 $sub = (($call$i) - ($0))|0;
 return ($sub|0);
}
function _DG_Init() {
 var $call$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call$i = _emscripten_asm_const_i(0)|0;
 HEAP32[99868] = $call$i;
 return;
}
function _DG_GetKey($pressed,$doomKey) {
 $pressed = $pressed|0;
 $doomKey = $doomKey|0;
 var $call = 0, $cmp = 0, $conv = 0, $retval$0 = 0, $shr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _emscripten_asm_const_i(1)|0;
 $cmp = ($call|0)==(0);
 if ($cmp) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $shr = $call >> 8;
 HEAP32[$pressed>>2] = $shr;
 $conv = $call&255;
 HEAP8[$doomKey>>0] = $conv;
 $retval$0 = 1;
 return ($retval$0|0);
}
function _DG_SetWindowTitle($title) {
 $title = $title|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _key_to_doomkey($key) {
 $key = $key|0;
 var $call = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($key|0) {
  case 97:  {
   $retval$0 = 172;
   break;
  }
  case 100:  {
   $retval$0 = 174;
   break;
  }
  case 119:  {
   $retval$0 = 173;
   break;
  }
  case 115:  {
   $retval$0 = 175;
   break;
  }
  case 113:  {
   $retval$0 = 27;
   break;
  }
  case 122:  {
   $retval$0 = 13;
   break;
  }
  case 101:  {
   $retval$0 = 162;
   break;
  }
  case 32:  {
   $retval$0 = 163;
   break;
  }
  case 109:  {
   $retval$0 = 9;
   break;
  }
  case 95:  {
   $retval$0 = 182;
   break;
  }
  default: {
   $call = (_tolower($key)|0);
   $retval$0 = $call;
  }
  }
 } while(0);
 return ($retval$0|0);
}
function _DG_DrawFrame() {
 var $0 = 0, $call = 0, $call1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _emscripten_asm_const_i(2)|0;
 $0 = HEAP32[99866]|0;
 $call1 = _emscripten_asm_const_iiiii(3,($0|0),256000,320,200)|0;
 return;
}
function _doomjs_tick() {
 var $0 = 0, $call$i = 0, $call$i6 = 0, $cmp = 0, $div = 0, $inc = 0, $rem = 0, $sub = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $call$i = _emscripten_asm_const_i(0)|0;
 _doomgeneric_Tick();
 $call$i6 = _emscripten_asm_const_i(0)|0;
 $0 = HEAP32[99867]|0;
 $inc = (($0) + 1)|0;
 HEAP32[99867] = $inc;
 $rem = (($inc|0) % 30)&-1;
 $cmp = ($rem|0)==(0);
 $sub = (($call$i6) - ($call$i))|0;
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $div = (1000 / ($sub|0))&-1;
 HEAP32[$vararg_buffer>>2] = $sub;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $div;
 (_printf(158298,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $call = 0, $call1 = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _emscripten_asm_const_iii(4,320,200)|0;
 $call1 = _emscripten_asm_const_i(5)|0;
 _doomgeneric_Create($argc,$argv);
 $call2 = _emscripten_asm_const_i(6)|0;
 return 0;
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $call = 0, $call1 = 0, $conv = 0, $fd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $fd = ((($f)) + 60|0);
 $0 = HEAP32[$fd>>2]|0;
 $call = (_dummy_554($0)|0);
 $call1 = (___wasi_fd_close(($call|0))|0);
 $conv = $call1&65535;
 return ($conv|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$cast = 0, $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $and = 0, $arrayidx24 = 0, $arrayinit$element = 0, $buf3 = 0, $buf_size = 0, $call = 0, $call6 = 0, $cmp = 0;
 var $cmp11 = 0, $fd = 0, $incdec$ptr = 0, $iov = 0, $iov_len = 0, $iov_len4 = 0, $lnot$ext = 0, $num = 0, $or = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $sub16 = 0, $sub23 = 0, $tobool = 0, $tobool20 = 0, $tobool7 = 0, $xor = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $iov = sp;
 $num = sp + 16|0;
 HEAP32[$iov>>2] = $buf;
 $iov_len = ((($iov)) + 4|0);
 $buf_size = ((($f)) + 48|0);
 $0 = HEAP32[$buf_size>>2]|0;
 $tobool = ($0|0)!=(0);
 $lnot$ext = $tobool&1;
 $sub = (($len) - ($lnot$ext))|0;
 HEAP32[$iov_len>>2] = $sub;
 $arrayinit$element = ((($iov)) + 8|0);
 $buf3 = ((($f)) + 44|0);
 $1 = HEAP32[$buf3>>2]|0;
 HEAP32[$arrayinit$element>>2] = $1;
 $iov_len4 = ((($iov)) + 12|0);
 HEAP32[$iov_len4>>2] = $0;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $call = (___wasi_fd_read(($2|0),($iov|0),2,($num|0))|0);
 $call6 = (___wasi_syscall_ret($call)|0);
 $tobool7 = ($call6|0)==(0);
 if ($tobool7) {
  $$pr = HEAP32[$num>>2]|0;
  $cmp = ($$pr|0)<(1);
  if ($cmp) {
   $3 = $$pr;
   label = 4;
  } else {
   $5 = HEAP32[$iov_len>>2]|0;
   $cmp11 = ($$pr>>>0)>($5>>>0);
   if ($cmp11) {
    $sub16 = (($$pr) - ($5))|0;
    $6 = HEAP32[$buf3>>2]|0;
    $rpos = ((($f)) + 4|0);
    HEAP32[$rpos>>2] = $6;
    $$cast = $6;
    $add$ptr = (($$cast) + ($sub16)|0);
    $rend = ((($f)) + 8|0);
    HEAP32[$rend>>2] = $add$ptr;
    $7 = HEAP32[$buf_size>>2]|0;
    $tobool20 = ($7|0)==(0);
    if ($tobool20) {
     $retval$0 = $len;
    } else {
     $incdec$ptr = ((($$cast)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr;
     $8 = HEAP8[$$cast>>0]|0;
     $sub23 = (($len) + -1)|0;
     $arrayidx24 = (($buf) + ($sub23)|0);
     HEAP8[$arrayidx24>>0] = $8;
     $retval$0 = $len;
    }
   } else {
    $retval$0 = $$pr;
   }
  }
 } else {
  HEAP32[$num>>2] = -1;
  $3 = -1;
  label = 4;
 }
 if ((label|0) == 4) {
  $and = $3 & 48;
  $xor = $and ^ 16;
  $4 = HEAP32[$f>>2]|0;
  $or = $xor | $4;
  HEAP32[$f>>2] = $or;
  $retval$0 = $3;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___stdio_seek($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call1 = 0, $conv = 0, $fd = 0, $ret = 0, $tobool = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ret = sp;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $conv = $whence&255;
 $3 = (___wasi_fd_seek(($2|0),($0|0),($1|0),($conv|0),($ret|0))|0);
 $call1 = (___wasi_syscall_ret($3)|0);
 $tobool = ($call1|0)==(0);
 if ($tobool) {
  $4 = $ret;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $14 = $9;$15 = $6;
 } else {
  $10 = $ret;
  $11 = $10;
  HEAP32[$11>>2] = -1;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = -1;
  $14 = -1;$15 = -1;
 }
 setTempRet0(($14) | 0);
 STACKTOP = sp;return ($15|0);
}
function ___wasi_syscall_ret($code) {
 $code = $code|0;
 var $call = 0, $cmp = 0, $conv = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($code<<16>>16)==(0);
 if ($cmp) {
  $retval$0 = 0;
 } else {
  $conv = $code&65535;
  $call = (___errno_location()|0);
  HEAP32[$call>>2] = $conv;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (399540|0);
}
function _dummy_554($fd) {
 $fd = $fd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($fd|0);
}
function ___emscripten_stdout_close($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr34 = 0, $buf9 = 0, $buf_size = 0, $call = 0, $call7 = 0;
 var $cmp = 0, $cmp14 = 0, $cmp19 = 0, $cmp26 = 0, $cnt$0 = 0, $dec = 0, $fd = 0, $incdec$ptr = 0, $iov$0 = 0, $iov$1 = 0, $iov_base2 = 0, $iov_len = 0, $iov_len21 = 0, $iov_len25 = 0, $iov_len3 = 0, $iov_len38 = 0, $iovcnt$0 = 0, $iovcnt$1 = 0, $iovs = 0, $num = 0;
 var $or = 0, $rem$0 = 0, $retval$1$ph = 0, $sub = 0, $sub$ptr$sub = 0, $sub23 = 0, $sub30 = 0, $sub39 = 0, $tobool = 0, $wbase = 0, $wend = 0, $wend16 = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $iovs = sp;
 $num = sp + 16|0;
 $wbase = ((($f)) + 28|0);
 $0 = HEAP32[$wbase>>2]|0;
 HEAP32[$iovs>>2] = $0;
 $iov_len = ((($iovs)) + 4|0);
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$sub = (($1) - ($0))|0;
 HEAP32[$iov_len>>2] = $sub$ptr$sub;
 $iov_base2 = ((($iovs)) + 8|0);
 HEAP32[$iov_base2>>2] = $buf;
 $iov_len3 = ((($iovs)) + 12|0);
 HEAP32[$iov_len3>>2] = $len;
 $add = (($sub$ptr$sub) + ($len))|0;
 $fd = ((($f)) + 60|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $add;
 while(1) {
  $2 = HEAP32[$fd>>2]|0;
  $call = (___wasi_fd_write(($2|0),($iov$0|0),($iovcnt$0|0),($num|0))|0);
  $call7 = (___wasi_syscall_ret($call)|0);
  $tobool = ($call7|0)==(0);
  if ($tobool) {
   $$pr = HEAP32[$num>>2]|0;
   $3 = $$pr;
  } else {
   HEAP32[$num>>2] = -1;
   $3 = -1;
  }
  $cmp = ($rem$0|0)==($3|0);
  if ($cmp) {
   label = 6;
   break;
  }
  $cmp14 = ($3|0)<(0);
  if ($cmp14) {
   label = 8;
   break;
  }
  $sub23 = (($rem$0) - ($3))|0;
  $iov_len25 = ((($iov$0)) + 4|0);
  $9 = HEAP32[$iov_len25>>2]|0;
  $cmp26 = ($3>>>0)>($9>>>0);
  $incdec$ptr = ((($iov$0)) + 8|0);
  $iov$1 = $cmp26 ? $incdec$ptr : $iov$0;
  $dec = $cmp26 << 31 >> 31;
  $iovcnt$1 = (($iovcnt$0) + ($dec))|0;
  $sub30 = $cmp26 ? $9 : 0;
  $cnt$0 = (($3) - ($sub30))|0;
  $10 = HEAP32[$iov$1>>2]|0;
  $add$ptr34 = (($10) + ($cnt$0)|0);
  HEAP32[$iov$1>>2] = $add$ptr34;
  $iov_len38 = ((($iov$1)) + 4|0);
  $11 = HEAP32[$iov_len38>>2]|0;
  $sub39 = (($11) - ($cnt$0))|0;
  HEAP32[$iov_len38>>2] = $sub39;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $sub23;
 }
 if ((label|0) == 6) {
  $buf9 = ((($f)) + 44|0);
  $4 = HEAP32[$buf9>>2]|0;
  $buf_size = ((($f)) + 48|0);
  $5 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($4) + ($5)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $6 = $4;
  HEAP32[$wbase>>2] = $6;
  HEAP32[$wpos>>2] = $6;
  $retval$1$ph = $len;
 }
 else if ((label|0) == 8) {
  $wend16 = ((($f)) + 16|0);
  HEAP32[$wend16>>2] = 0;
  HEAP32[$wbase>>2] = 0;
  HEAP32[$wpos>>2] = 0;
  $7 = HEAP32[$f>>2]|0;
  $or = $7 | 32;
  HEAP32[$f>>2] = $or;
  $cmp19 = ($iovcnt$0|0)==(2);
  if ($cmp19) {
   $retval$1$ph = 0;
  } else {
   $iov_len21 = ((($iov$0)) + 4|0);
   $8 = HEAP32[$iov_len21>>2]|0;
   $sub = (($len) - ($8))|0;
   $retval$1$ph = $sub;
  }
 }
 STACKTOP = sp;return ($retval$1$ph|0);
}
function ___emscripten_stdout_seek($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 setTempRet0((0) | 0);
 return 0;
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp7 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $l$addr$010 = 0, $or$cond = 0, $or$cond9 = 0, $r$addr$011 = 0, $sub = 0, $tobool = 0, $tobool8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $cmp7 = ($0<<24>>24)!=($1<<24>>24);
 $tobool8 = ($0<<24>>24)==(0);
 $or$cond9 = $tobool8 | $cmp7;
 if ($or$cond9) {
  $$lcssa = $1;$$lcssa6 = $0;
 } else {
  $l$addr$010 = $l;$r$addr$011 = $r;
  while(1) {
   $incdec$ptr = ((($l$addr$010)) + 1|0);
   $incdec$ptr4 = ((($r$addr$011)) + 1|0);
   $2 = HEAP8[$incdec$ptr>>0]|0;
   $3 = HEAP8[$incdec$ptr4>>0]|0;
   $cmp = ($2<<24>>24)!=($3<<24>>24);
   $tobool = ($2<<24>>24)==(0);
   $or$cond = $tobool | $cmp;
   if ($or$cond) {
    $$lcssa = $3;$$lcssa6 = $2;
    break;
   } else {
    $l$addr$010 = $incdec$ptr;$r$addr$011 = $incdec$ptr4;
   }
  }
 }
 $conv5 = $$lcssa6&255;
 $conv6 = $$lcssa&255;
 $sub = (($conv5) - ($conv6))|0;
 return ($sub|0);
}
function ___lock($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___unlock($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $and = 0, $and14 = 0, $and15 = 0, $and29 = 0, $and9 = 0, $and930 = 0, $call = 0, $cmp = 0, $cmp26 = 0, $conv1 = 0;
 var $incdec$ptr = 0, $incdec$ptr19 = 0, $incdec$ptr31 = 0, $mul = 0, $neg = 0, $neg13 = 0, $neg28 = 0, $or$cond = 0, $or$cond24 = 0, $rem = 0, $rem34 = 0, $retval$1 = 0, $s$addr$0$lcssa = 0, $s$addr$036 = 0, $s$addr$1 = 0, $sub = 0, $sub11 = 0, $sub27 = 0, $tobool = 0, $tobool10 = 0;
 var $tobool1031 = 0, $tobool16 = 0, $tobool2 = 0, $tobool23 = 0, $tobool235 = 0, $tobool3 = 0, $w$0$lcssa = 0, $w$032 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $tobool = ($conv1|0)==(0);
 L1: do {
  if ($tobool) {
   $call = (_strlen($s)|0);
   $add$ptr = (($s) + ($call)|0);
   $retval$1 = $add$ptr;
  } else {
   $0 = $s;
   $rem34 = $0 & 3;
   $tobool235 = ($rem34|0)==(0);
   if ($tobool235) {
    $s$addr$0$lcssa = $s;
   } else {
    $1 = $c&255;
    $s$addr$036 = $s;
    while(1) {
     $2 = HEAP8[$s$addr$036>>0]|0;
     $tobool3 = ($2<<24>>24)==(0);
     $cmp = ($2<<24>>24)==($1<<24>>24);
     $or$cond = $tobool3 | $cmp;
     if ($or$cond) {
      $retval$1 = $s$addr$036;
      break L1;
     }
     $incdec$ptr = ((($s$addr$036)) + 1|0);
     $3 = $incdec$ptr;
     $rem = $3 & 3;
     $tobool2 = ($rem|0)==(0);
     if ($tobool2) {
      $s$addr$0$lcssa = $incdec$ptr;
      break;
     } else {
      $s$addr$036 = $incdec$ptr;
     }
    }
   }
   $mul = Math_imul($conv1, 16843009)|0;
   $4 = HEAP32[$s$addr$0$lcssa>>2]|0;
   $sub27 = (($4) + -16843009)|0;
   $neg28 = $4 & -2139062144;
   $and29 = $neg28 ^ -2139062144;
   $and930 = $and29 & $sub27;
   $tobool1031 = ($and930|0)==(0);
   L10: do {
    if ($tobool1031) {
     $5 = $4;$w$032 = $s$addr$0$lcssa;
     while(1) {
      $xor = $5 ^ $mul;
      $sub11 = (($xor) + -16843009)|0;
      $neg13 = $xor & -2139062144;
      $and14 = $neg13 ^ -2139062144;
      $and15 = $and14 & $sub11;
      $tobool16 = ($and15|0)==(0);
      if (!($tobool16)) {
       $w$0$lcssa = $w$032;
       break L10;
      }
      $incdec$ptr19 = ((($w$032)) + 4|0);
      $6 = HEAP32[$incdec$ptr19>>2]|0;
      $sub = (($6) + -16843009)|0;
      $neg = $6 & -2139062144;
      $and = $neg ^ -2139062144;
      $and9 = $and & $sub;
      $tobool10 = ($and9|0)==(0);
      if ($tobool10) {
       $5 = $6;$w$032 = $incdec$ptr19;
      } else {
       $w$0$lcssa = $incdec$ptr19;
       break;
      }
     }
    } else {
     $w$0$lcssa = $s$addr$0$lcssa;
    }
   } while(0);
   $7 = $c&255;
   $s$addr$1 = $w$0$lcssa;
   while(1) {
    $8 = HEAP8[$s$addr$1>>0]|0;
    $tobool23 = ($8<<24>>24)==(0);
    $cmp26 = ($8<<24>>24)==($7<<24>>24);
    $or$cond24 = $tobool23 | $cmp26;
    $incdec$ptr31 = ((($s$addr$1)) + 1|0);
    if ($or$cond24) {
     $retval$1 = $s$addr$1;
     break;
    } else {
     $s$addr$1 = $incdec$ptr31;
    }
   }
  }
 } while(0);
 return ($retval$1|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $call = 0, $cmp = 0, $retval$0 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($r>>>0)>(4294963200);
 if ($cmp) {
  $sub = (0 - ($r))|0;
  $call = (___errno_location()|0);
  HEAP32[$call>>2] = $sub;
  $retval$0 = -1;
 } else {
  $retval$0 = $r;
 }
 return ($retval$0|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$pn = 0, $$pn24 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $and = 0, $and3 = 0, $incdec$ptr = 0, $incdec$ptr1323 = 0, $incdec$ptr7 = 0, $neg = 0, $rem = 0, $rem13 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0;
 var $s$addr$1$lcssa = 0, $sub = 0, $sub$ptr$lhs$cast15 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool1021 = 0, $tobool14 = 0, $tobool4 = 0, $w$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $rem13 = $0 & 3;
 $tobool14 = ($rem13|0)==(0);
 L1: do {
  if ($tobool14) {
   $s$addr$0$lcssa = $s;
   label = 5;
  } else {
   $5 = $0;$s$addr$015 = $s;
   while(1) {
    $1 = HEAP8[$s$addr$015>>0]|0;
    $tobool1 = ($1<<24>>24)==(0);
    if ($tobool1) {
     $$pn = $5;
     break L1;
    }
    $incdec$ptr = ((($s$addr$015)) + 1|0);
    $2 = $incdec$ptr;
    $rem = $2 & 3;
    $tobool = ($rem|0)==(0);
    if ($tobool) {
     $s$addr$0$lcssa = $incdec$ptr;
     label = 5;
     break;
    } else {
     $5 = $2;$s$addr$015 = $incdec$ptr;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $w$0 = $s$addr$0$lcssa;
  while(1) {
   $3 = HEAP32[$w$0>>2]|0;
   $sub = (($3) + -16843009)|0;
   $neg = $3 & -2139062144;
   $and = $neg ^ -2139062144;
   $and3 = $and & $sub;
   $tobool4 = ($and3|0)==(0);
   $incdec$ptr7 = ((($w$0)) + 4|0);
   if ($tobool4) {
    $w$0 = $incdec$ptr7;
   } else {
    break;
   }
  }
  $4 = $3&255;
  $tobool1021 = ($4<<24>>24)==(0);
  if ($tobool1021) {
   $s$addr$1$lcssa = $w$0;
  } else {
   $$pn24 = $w$0;
   while(1) {
    $incdec$ptr1323 = ((($$pn24)) + 1|0);
    $$pre = HEAP8[$incdec$ptr1323>>0]|0;
    $tobool10 = ($$pre<<24>>24)==(0);
    if ($tobool10) {
     $s$addr$1$lcssa = $incdec$ptr1323;
     break;
    } else {
     $$pn24 = $incdec$ptr1323;
    }
   }
  }
  $sub$ptr$lhs$cast15 = $s$addr$1$lcssa;
  $$pn = $sub$ptr$lhs$cast15;
 }
 $retval$0 = (($$pn) - ($0))|0;
 return ($retval$0|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $conv11 = 0, $conv12 = 0, $incdec$ptr = 0, $incdec$ptr9 = 0, $l$015 = 0, $n$addr$017 = 0, $n$addr$017$in = 0, $or$cond = 0, $or$cond12 = 0, $r$0$lcssa = 0, $r$016 = 0, $retval$0 = 0, $sub = 0;
 var $tobool = 0, $tobool1 = 0, $tobool114 = 0, $tobool3 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($n|0)==(0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $0 = HEAP8[$_l>>0]|0;
  $tobool114 = ($0<<24>>24)==(0);
  L3: do {
   if ($tobool114) {
    $$lcssa = 0;$r$0$lcssa = $_r;
   } else {
    $2 = $0;$l$015 = $_l;$n$addr$017$in = $n;$r$016 = $_r;
    while(1) {
     $n$addr$017 = (($n$addr$017$in) + -1)|0;
     $1 = HEAP8[$r$016>>0]|0;
     $tobool3 = ($1<<24>>24)!=(0);
     $tobool5 = ($n$addr$017|0)!=(0);
     $or$cond = $tobool5 & $tobool3;
     $cmp = ($2<<24>>24)==($1<<24>>24);
     $or$cond12 = $cmp & $or$cond;
     if (!($or$cond12)) {
      $$lcssa = $2;$r$0$lcssa = $r$016;
      break L3;
     }
     $incdec$ptr = ((($l$015)) + 1|0);
     $incdec$ptr9 = ((($r$016)) + 1|0);
     $3 = HEAP8[$incdec$ptr>>0]|0;
     $tobool1 = ($3<<24>>24)==(0);
     if ($tobool1) {
      $$lcssa = 0;$r$0$lcssa = $incdec$ptr9;
      break;
     } else {
      $2 = $3;$l$015 = $incdec$ptr;$n$addr$017$in = $n$addr$017;$r$016 = $incdec$ptr9;
     }
    }
   }
  } while(0);
  $conv11 = $$lcssa&255;
  $4 = HEAP8[$r$0$lcssa>>0]|0;
  $conv12 = $4&255;
  $sub = (($conv11) - ($conv12))|0;
  $retval$0 = $sub;
 }
 return ($retval$0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $call = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___strchrnul($s,$c)|0);
 $0 = HEAP8[$call>>0]|0;
 $1 = $c&255;
 $cmp = ($0<<24>>24)==($1<<24>>24);
 $cond = $cmp ? $call : 0;
 return ($cond|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $cmp = 0, $cmp1 = 0, $narrow = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($c|0)==(32);
 $sub = (($c) + -9)|0;
 $cmp1 = ($sub>>>0)<(5);
 $narrow = $cmp | $cmp1;
 $0 = $narrow&1;
 return ($0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and15 = 0, $and16 = 0, $and40 = 0, $cmp = 0, $cmp11 = 0, $cmp1133 = 0, $cmp28 = 0, $cmp8 = 0, $conv1 = 0;
 var $dec = 0, $dec34 = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa53 = 0, $n$addr$044 = 0, $n$addr$1$lcssa = 0, $n$addr$134 = 0, $n$addr$2 = 0, $n$addr$327 = 0, $neg = 0, $or$cond = 0, $or$cond43 = 0, $s$0$lcssa = 0, $s$0$lcssa54 = 0, $s$045 = 0, $s$1 = 0;
 var $s$228 = 0, $sub = 0, $sub22 = 0, $tobool = 0, $tobool17 = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool242 = 0, $tobool25 = 0, $tobool2526 = 0, $tobool41 = 0, $w$0$lcssa = 0, $w$035 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $0 = $src;
 $and40 = $0 & 3;
 $tobool41 = ($and40|0)!=(0);
 $tobool242 = ($n|0)!=(0);
 $or$cond43 = $tobool242 & $tobool41;
 L1: do {
  if ($or$cond43) {
   $1 = $c&255;
   $n$addr$044 = $n;$s$045 = $src;
   while(1) {
    $2 = HEAP8[$s$045>>0]|0;
    $cmp = ($2<<24>>24)==($1<<24>>24);
    if ($cmp) {
     $n$addr$0$lcssa53 = $n$addr$044;$s$0$lcssa54 = $s$045;
     label = 6;
     break L1;
    }
    $incdec$ptr = ((($s$045)) + 1|0);
    $dec = (($n$addr$044) + -1)|0;
    $3 = $incdec$ptr;
    $and = $3 & 3;
    $tobool = ($and|0)!=(0);
    $tobool2 = ($dec|0)!=(0);
    $or$cond = $tobool2 & $tobool;
    if ($or$cond) {
     $n$addr$044 = $dec;$s$045 = $incdec$ptr;
    } else {
     $n$addr$0$lcssa = $dec;$s$0$lcssa = $incdec$ptr;$tobool2$lcssa = $tobool2;
     label = 5;
     break;
    }
   }
  } else {
   $n$addr$0$lcssa = $n;$s$0$lcssa = $src;$tobool2$lcssa = $tobool242;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($tobool2$lcssa) {
   $n$addr$0$lcssa53 = $n$addr$0$lcssa;$s$0$lcssa54 = $s$0$lcssa;
   label = 6;
  } else {
   $9 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $4 = HEAP8[$s$0$lcssa54>>0]|0;
   $5 = $c&255;
   $cmp8 = ($4<<24>>24)==($5<<24>>24);
   if ($cmp8) {
    $n$addr$2 = $n$addr$0$lcssa53;$s$1 = $s$0$lcssa54;
   } else {
    $mul = Math_imul($conv1, 16843009)|0;
    $cmp1133 = ($n$addr$0$lcssa53>>>0)>(3);
    L12: do {
     if ($cmp1133) {
      $n$addr$134 = $n$addr$0$lcssa53;$w$035 = $s$0$lcssa54;
      while(1) {
       $6 = HEAP32[$w$035>>2]|0;
       $xor = $6 ^ $mul;
       $sub = (($xor) + -16843009)|0;
       $neg = $xor & -2139062144;
       $and15 = $neg ^ -2139062144;
       $and16 = $and15 & $sub;
       $tobool17 = ($and16|0)==(0);
       if (!($tobool17)) {
        $n$addr$1$lcssa = $n$addr$134;$w$0$lcssa = $w$035;
        break L12;
       }
       $incdec$ptr21 = ((($w$035)) + 4|0);
       $sub22 = (($n$addr$134) + -4)|0;
       $cmp11 = ($sub22>>>0)>(3);
       if ($cmp11) {
        $n$addr$134 = $sub22;$w$035 = $incdec$ptr21;
       } else {
        $n$addr$1$lcssa = $sub22;$w$0$lcssa = $incdec$ptr21;
        break;
       }
      }
     } else {
      $n$addr$1$lcssa = $n$addr$0$lcssa53;$w$0$lcssa = $s$0$lcssa54;
     }
    } while(0);
    $n$addr$2 = $n$addr$1$lcssa;$s$1 = $w$0$lcssa;
   }
   $tobool2526 = ($n$addr$2|0)==(0);
   if ($tobool2526) {
    $9 = 0;
   } else {
    $7 = $c&255;
    $n$addr$327 = $n$addr$2;$s$228 = $s$1;
    while(1) {
     $8 = HEAP8[$s$228>>0]|0;
     $cmp28 = ($8<<24>>24)==($7<<24>>24);
     if ($cmp28) {
      $9 = $s$228;
      break L8;
     }
     $incdec$ptr33 = ((($s$228)) + 1|0);
     $dec34 = (($n$addr$327) + -1)|0;
     $tobool25 = ($dec34|0)==(0);
     if ($tobool25) {
      $9 = 0;
      break;
     } else {
      $n$addr$327 = $dec34;$s$228 = $incdec$ptr33;
     }
    }
   }
  }
 } while(0);
 return ($9|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($c) + -48)|0;
 $cmp = ($sub>>>0)<(10);
 $conv = $cmp&1;
 return ($conv|0);
}
function ___shlim($f,$0,$1) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add$ptr = 0, $or$cond = 0, $rend = 0, $rpos = 0, $shcnt = 0, $shend = 0, $shend5 = 0, $shlim = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $shlim = ((($f)) + 112|0);
 $2 = $shlim;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $rend = ((($f)) + 8|0);
 $6 = HEAP32[$rend>>2]|0;
 $rpos = ((($f)) + 4|0);
 $7 = HEAP32[$rpos>>2]|0;
 $sub$ptr$sub = (($6) - ($7))|0;
 $8 = ($sub$ptr$sub|0)<(0);
 $9 = $8 << 31 >> 31;
 $shcnt = ((($f)) + 120|0);
 $10 = $shcnt;
 $11 = $10;
 HEAP32[$11>>2] = $sub$ptr$sub;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = ($0|0)!=(0);
 $15 = ($1|0)!=(0);
 $16 = $14 | $15;
 $17 = ($9|0)>($1|0);
 $18 = ($sub$ptr$sub>>>0)>($0>>>0);
 $19 = ($9|0)==($1|0);
 $20 = $19 & $18;
 $21 = $17 | $20;
 $or$cond = $16 & $21;
 if ($or$cond) {
  $22 = $7;
  $add$ptr = (($22) + ($0)|0);
  $shend = ((($f)) + 104|0);
  HEAP32[$shend>>2] = $add$ptr;
 } else {
  $shend5 = ((($f)) + 104|0);
  HEAP32[$shend5>>2] = $6;
 }
 return;
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add249 = 0, $and = 0, $and174 = 0, $arrayidx = 0, $arrayidx175 = 0;
 var $arrayidx178 = 0, $arrayidx178158 = 0, $arrayidx206 = 0, $arrayidx237 = 0, $arrayidx237176 = 0, $arrayidx266 = 0, $arrayidx305 = 0, $arrayidx311 = 0, $arrayidx93 = 0, $base$addr$1 = 0, $base$addr$1135 = 0, $base$addr$1136 = 0, $c$0 = 0, $c$1 = 0, $c$1137 = 0, $c$3185 = 0, $c$4$lcssa = 0, $c$6$lcssa = 0, $c$7168 = 0, $c$8 = 0;
 var $call = 0, $call105 = 0, $call126 = 0, $call160 = 0, $call200 = 0, $call21 = 0, $call231 = 0, $call260 = 0, $call299 = 0, $call3 = 0, $call326 = 0, $call330 = 0, $call351 = 0, $call357 = 0, $call4 = 0, $call42 = 0, $call57 = 0, $cmp = 0, $cmp1 = 0, $cmp108 = 0;
 var $cmp112 = 0, $cmp112192 = 0, $cmp114 = 0, $cmp119 = 0, $cmp132 = 0, $cmp132184 = 0, $cmp14 = 0, $cmp153 = 0, $cmp165 = 0, $cmp180 = 0, $cmp180160 = 0, $cmp183 = 0, $cmp193 = 0, $cmp208 = 0, $cmp208153 = 0, $cmp224 = 0, $cmp239 = 0, $cmp239178 = 0, $cmp242 = 0, $cmp25 = 0;
 var $cmp253 = 0, $cmp268 = 0, $cmp268167 = 0, $cmp292 = 0, $cmp30 = 0, $cmp307 = 0, $cmp313 = 0, $cmp319 = 0, $cmp35 = 0, $cmp45 = 0, $cmp50 = 0, $cmp61 = 0, $cmp7 = 0, $cmp95 = 0, $cond = 0, $cond128 = 0, $cond162 = 0, $cond202 = 0, $cond233 = 0, $cond262 = 0;
 var $cond301 = 0, $cond328 = 0, $cond44 = 0, $cond59 = 0, $conv = 0, $conv124 = 0, $conv158 = 0, $conv176 = 0, $conv179 = 0, $conv179159 = 0, $conv179162 = 0, $conv19 = 0, $conv198 = 0, $conv207 = 0, $conv207152$pre$phiZ2D = 0, $conv229 = 0, $conv238 = 0, $conv238177 = 0, $conv238180 = 0, $conv258 = 0;
 var $conv267 = 0, $conv267166$pre$phiZ2D = 0, $conv297 = 0, $conv306 = 0, $conv312 = 0, $conv324 = 0, $conv40 = 0, $conv55 = 0, $conv94 = 0, $incdec$ptr = 0, $incdec$ptr102 = 0, $incdec$ptr123 = 0, $incdec$ptr157 = 0, $incdec$ptr18 = 0, $incdec$ptr197 = 0, $incdec$ptr228 = 0, $incdec$ptr257 = 0, $incdec$ptr296 = 0, $incdec$ptr323 = 0, $incdec$ptr340 = 0;
 var $incdec$ptr39 = 0, $incdec$ptr54 = 0, $incdec$ptr68 = 0, $incdec$ptr77 = 0, $mul = 0, $mul173 = 0, $mul246 = 0, $neg$0 = 0, $neg$1 = 0, $or = 0, $or$cond = 0, $or$cond155 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond5 = 0, $or189 = 0, $rpos = 0, $shend = 0, $shl = 0, $shr = 0;
 var $spec$select132 = 0, $spec$select133 = 0, $sub = 0, $sub111 = 0, $sub111191 = 0, $sub111194 = 0, $sub131 = 0, $sub131187 = 0, $sub170 = 0, $tobool = 0, $tobool171 = 0, $tobool337 = 0, $tobool349 = 0, $tobool65 = 0, $tobool71 = 0, $tobool99 = 0, $x$0193 = 0, $x$1161 = 0, $x$2179 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $cmp = ($base>>>0)>(36);
 L1: do {
  if ($cmp) {
   $call = (___errno_location()|0);
   HEAP32[$call>>2] = 28;
   $148 = 0;$149 = 0;
  } else {
   $rpos = ((($f)) + 4|0);
   $shend = ((($f)) + 104|0);
   while(1) {
    $2 = HEAP32[$rpos>>2]|0;
    $3 = HEAP32[$shend>>2]|0;
    $cmp1 = ($2>>>0)<($3>>>0);
    if ($cmp1) {
     $incdec$ptr = ((($2)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr;
     $4 = HEAP8[$2>>0]|0;
     $conv = $4&255;
     $cond = $conv;
    } else {
     $call3 = (___shgetc($f)|0);
     $cond = $call3;
    }
    $call4 = (_isspace($cond)|0);
    $tobool = ($call4|0)==(0);
    if ($tobool) {
     break;
    }
   }
   L11: do {
    switch ($cond|0) {
    case 43: case 45:  {
     $cmp7 = ($cond|0)==(45);
     $sub = $cmp7 << 31 >> 31;
     $5 = HEAP32[$rpos>>2]|0;
     $6 = HEAP32[$shend>>2]|0;
     $cmp14 = ($5>>>0)<($6>>>0);
     if ($cmp14) {
      $incdec$ptr18 = ((($5)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr18;
      $7 = HEAP8[$5>>0]|0;
      $conv19 = $7&255;
      $c$0 = $conv19;$neg$0 = $sub;
      break L11;
     } else {
      $call21 = (___shgetc($f)|0);
      $c$0 = $call21;$neg$0 = $sub;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $cond;$neg$0 = 0;
    }
    }
   } while(0);
   $cmp25 = ($base|0)==(0);
   $8 = $base | 16;
   $9 = ($8|0)==(16);
   $cmp30 = ($c$0|0)==(48);
   $or$cond2 = $9 & $cmp30;
   do {
    if ($or$cond2) {
     $10 = HEAP32[$rpos>>2]|0;
     $11 = HEAP32[$shend>>2]|0;
     $cmp35 = ($10>>>0)<($11>>>0);
     if ($cmp35) {
      $incdec$ptr39 = ((($10)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr39;
      $12 = HEAP8[$10>>0]|0;
      $conv40 = $12&255;
      $cond44 = $conv40;
     } else {
      $call42 = (___shgetc($f)|0);
      $cond44 = $call42;
     }
     $or = $cond44 | 32;
     $cmp45 = ($or|0)==(120);
     if (!($cmp45)) {
      if ($cmp25) {
       $base$addr$1135 = 8;$c$1137 = $cond44;
       label = 47;
       break;
      } else {
       $base$addr$1 = $base;$c$1 = $cond44;
       label = 32;
       break;
      }
     }
     $13 = HEAP32[$rpos>>2]|0;
     $14 = HEAP32[$shend>>2]|0;
     $cmp50 = ($13>>>0)<($14>>>0);
     if ($cmp50) {
      $incdec$ptr54 = ((($13)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr54;
      $15 = HEAP8[$13>>0]|0;
      $conv55 = $15&255;
      $cond59 = $conv55;
     } else {
      $call57 = (___shgetc($f)|0);
      $cond59 = $call57;
     }
     $arrayidx = ((127233) + ($cond59)|0);
     $16 = HEAP8[$arrayidx>>0]|0;
     $cmp61 = ($16&255)>(15);
     if ($cmp61) {
      $17 = HEAP32[$shend>>2]|0;
      $tobool65 = ($17|0)==(0|0);
      if (!($tobool65)) {
       $18 = HEAP32[$rpos>>2]|0;
       $incdec$ptr68 = ((($18)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr68;
      }
      $tobool71 = ($pok|0)==(0);
      if ($tobool71) {
       ___shlim($f,0,0);
       $148 = 0;$149 = 0;
       break L1;
      }
      if ($tobool65) {
       $148 = 0;$149 = 0;
       break L1;
      }
      $19 = HEAP32[$rpos>>2]|0;
      $incdec$ptr77 = ((($19)) + -1|0);
      HEAP32[$rpos>>2] = $incdec$ptr77;
      $148 = 0;$149 = 0;
      break L1;
     } else {
      $base$addr$1135 = 16;$c$1137 = $cond59;
      label = 47;
     }
    } else {
     $spec$select132 = $cmp25 ? 10 : $base;
     $arrayidx93 = ((127233) + ($c$0)|0);
     $20 = HEAP8[$arrayidx93>>0]|0;
     $conv94 = $20&255;
     $cmp95 = ($spec$select132>>>0)>($conv94>>>0);
     if ($cmp95) {
      $base$addr$1 = $spec$select132;$c$1 = $c$0;
      label = 32;
     } else {
      $21 = HEAP32[$shend>>2]|0;
      $tobool99 = ($21|0)==(0|0);
      if (!($tobool99)) {
       $22 = HEAP32[$rpos>>2]|0;
       $incdec$ptr102 = ((($22)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr102;
      }
      ___shlim($f,0,0);
      $call105 = (___errno_location()|0);
      HEAP32[$call105>>2] = 28;
      $148 = 0;$149 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $cmp108 = ($base$addr$1|0)==(10);
     if ($cmp108) {
      $sub111191 = (($c$1) + -48)|0;
      $cmp112192 = ($sub111191>>>0)<(10);
      if ($cmp112192) {
       $sub111194 = $sub111191;$x$0193 = 0;
       while(1) {
        $mul = ($x$0193*10)|0;
        $add = (($mul) + ($sub111194))|0;
        $23 = HEAP32[$rpos>>2]|0;
        $24 = HEAP32[$shend>>2]|0;
        $cmp119 = ($23>>>0)<($24>>>0);
        if ($cmp119) {
         $incdec$ptr123 = ((($23)) + 1|0);
         HEAP32[$rpos>>2] = $incdec$ptr123;
         $25 = HEAP8[$23>>0]|0;
         $conv124 = $25&255;
         $cond128 = $conv124;
        } else {
         $call126 = (___shgetc($f)|0);
         $cond128 = $call126;
        }
        $sub111 = (($cond128) + -48)|0;
        $cmp112 = ($sub111>>>0)<(10);
        $cmp114 = ($add>>>0)<(429496729);
        $26 = $cmp112 & $cmp114;
        if ($26) {
         $sub111194 = $sub111;$x$0193 = $add;
        } else {
         break;
        }
       }
       $cmp132184 = ($sub111>>>0)<(10);
       if ($cmp132184) {
        $27 = $add;$28 = 0;$c$3185 = $cond128;$sub131187 = $sub111;
        while(1) {
         $29 = (___muldi3(($27|0),($28|0),10,0)|0);
         $30 = (getTempRet0() | 0);
         $31 = ($sub131187|0)<(0);
         $32 = $31 << 31 >> 31;
         $33 = $sub131187 ^ -1;
         $34 = $32 ^ -1;
         $35 = ($30>>>0)>($34>>>0);
         $36 = ($29>>>0)>($33>>>0);
         $37 = ($30|0)==($34|0);
         $38 = $37 & $36;
         $39 = $35 | $38;
         if ($39) {
          $150 = $27;$151 = $28;$base$addr$1136 = 10;$c$8 = $c$3185;
          label = 76;
          break L43;
         }
         $40 = (_i64Add(($29|0),($30|0),($sub131187|0),($32|0))|0);
         $41 = (getTempRet0() | 0);
         $42 = HEAP32[$rpos>>2]|0;
         $43 = HEAP32[$shend>>2]|0;
         $cmp153 = ($42>>>0)<($43>>>0);
         if ($cmp153) {
          $incdec$ptr157 = ((($42)) + 1|0);
          HEAP32[$rpos>>2] = $incdec$ptr157;
          $44 = HEAP8[$42>>0]|0;
          $conv158 = $44&255;
          $cond162 = $conv158;
         } else {
          $call160 = (___shgetc($f)|0);
          $cond162 = $call160;
         }
         $sub131 = (($cond162) + -48)|0;
         $cmp132 = ($sub131>>>0)<(10);
         $45 = ($41>>>0)<(429496729);
         $46 = ($40>>>0)<(2576980378);
         $47 = ($41|0)==(429496729);
         $48 = $47 & $46;
         $49 = $45 | $48;
         $or$cond3 = $cmp132 & $49;
         if ($or$cond3) {
          $27 = $40;$28 = $41;$c$3185 = $cond162;$sub131187 = $sub131;
         } else {
          break;
         }
        }
        $cmp165 = ($sub131>>>0)>(9);
        if ($cmp165) {
         $125 = $41;$127 = $40;$neg$1 = $neg$0;
        } else {
         $150 = $40;$151 = $41;$base$addr$1136 = 10;$c$8 = $cond162;
         label = 76;
        }
       } else {
        $125 = 0;$127 = $add;$neg$1 = $neg$0;
       }
      } else {
       $125 = 0;$127 = 0;$neg$1 = $neg$0;
      }
     } else {
      $base$addr$1135 = $base$addr$1;$c$1137 = $c$1;
      label = 47;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 47) {
     $sub170 = (($base$addr$1135) + -1)|0;
     $and = $sub170 & $base$addr$1135;
     $tobool171 = ($and|0)==(0);
     if ($tobool171) {
      $mul173 = ($base$addr$1135*23)|0;
      $shr = $mul173 >>> 5;
      $and174 = $shr & 7;
      $arrayidx175 = (158494 + ($and174)|0);
      $50 = HEAP8[$arrayidx175>>0]|0;
      $conv176 = $50 << 24 >> 24;
      $arrayidx178158 = ((127233) + ($c$1137)|0);
      $51 = HEAP8[$arrayidx178158>>0]|0;
      $conv179159 = $51&255;
      $cmp180160 = ($base$addr$1135>>>0)>($conv179159>>>0);
      if ($cmp180160) {
       $conv179162 = $conv179159;$x$1161 = 0;
       while(1) {
        $shl = $x$1161 << $conv176;
        $or189 = $conv179162 | $shl;
        $52 = HEAP32[$rpos>>2]|0;
        $53 = HEAP32[$shend>>2]|0;
        $cmp193 = ($52>>>0)<($53>>>0);
        if ($cmp193) {
         $incdec$ptr197 = ((($52)) + 1|0);
         HEAP32[$rpos>>2] = $incdec$ptr197;
         $54 = HEAP8[$52>>0]|0;
         $conv198 = $54&255;
         $cond202 = $conv198;
        } else {
         $call200 = (___shgetc($f)|0);
         $cond202 = $call200;
        }
        $arrayidx178 = ((127233) + ($cond202)|0);
        $55 = HEAP8[$arrayidx178>>0]|0;
        $conv179 = $55&255;
        $cmp180 = ($base$addr$1135>>>0)>($conv179>>>0);
        $cmp183 = ($or189>>>0)<(134217728);
        $56 = $cmp183 & $cmp180;
        if ($56) {
         $conv179162 = $conv179;$x$1161 = $or189;
        } else {
         break;
        }
       }
       $152 = $55;$60 = 0;$62 = $or189;$c$4$lcssa = $cond202;$conv207152$pre$phiZ2D = $conv179;
      } else {
       $152 = $51;$60 = 0;$62 = 0;$c$4$lcssa = $c$1137;$conv207152$pre$phiZ2D = $conv179159;
      }
      $57 = (_bitshift64Lshr(-1,-1,($conv176|0))|0);
      $58 = (getTempRet0() | 0);
      $cmp208153 = ($base$addr$1135>>>0)<=($conv207152$pre$phiZ2D>>>0);
      $59 = ($58>>>0)<($60>>>0);
      $61 = ($57>>>0)<($62>>>0);
      $63 = ($58|0)==($60|0);
      $64 = $63 & $61;
      $65 = $59 | $64;
      $or$cond155 = $cmp208153 | $65;
      if ($or$cond155) {
       $150 = $62;$151 = $60;$base$addr$1136 = $base$addr$1135;$c$8 = $c$4$lcssa;
       label = 76;
       break;
      }
      $66 = $62;$67 = $60;$71 = $152;
      while(1) {
       $68 = (_bitshift64Shl(($66|0),($67|0),($conv176|0))|0);
       $69 = (getTempRet0() | 0);
       $70 = $71&255;
       $72 = $68 | $70;
       $73 = HEAP32[$rpos>>2]|0;
       $74 = HEAP32[$shend>>2]|0;
       $cmp224 = ($73>>>0)<($74>>>0);
       if ($cmp224) {
        $incdec$ptr228 = ((($73)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr228;
        $75 = HEAP8[$73>>0]|0;
        $conv229 = $75&255;
        $cond233 = $conv229;
       } else {
        $call231 = (___shgetc($f)|0);
        $cond233 = $call231;
       }
       $arrayidx206 = ((127233) + ($cond233)|0);
       $76 = HEAP8[$arrayidx206>>0]|0;
       $conv207 = $76&255;
       $cmp208 = ($base$addr$1135>>>0)<=($conv207>>>0);
       $77 = ($69>>>0)>($58>>>0);
       $78 = ($72>>>0)>($57>>>0);
       $79 = ($69|0)==($58|0);
       $80 = $79 & $78;
       $81 = $77 | $80;
       $or$cond = $cmp208 | $81;
       if ($or$cond) {
        $150 = $72;$151 = $69;$base$addr$1136 = $base$addr$1135;$c$8 = $cond233;
        label = 76;
        break L63;
       } else {
        $66 = $72;$67 = $69;$71 = $76;
       }
      }
     }
     $arrayidx237176 = ((127233) + ($c$1137)|0);
     $82 = HEAP8[$arrayidx237176>>0]|0;
     $conv238177 = $82&255;
     $cmp239178 = ($base$addr$1135>>>0)>($conv238177>>>0);
     if ($cmp239178) {
      $conv238180 = $conv238177;$x$2179 = 0;
      while(1) {
       $mul246 = Math_imul($x$2179, $base$addr$1135)|0;
       $add249 = (($conv238180) + ($mul246))|0;
       $83 = HEAP32[$rpos>>2]|0;
       $84 = HEAP32[$shend>>2]|0;
       $cmp253 = ($83>>>0)<($84>>>0);
       if ($cmp253) {
        $incdec$ptr257 = ((($83)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr257;
        $85 = HEAP8[$83>>0]|0;
        $conv258 = $85&255;
        $cond262 = $conv258;
       } else {
        $call260 = (___shgetc($f)|0);
        $cond262 = $call260;
       }
       $arrayidx237 = ((127233) + ($cond262)|0);
       $86 = HEAP8[$arrayidx237>>0]|0;
       $conv238 = $86&255;
       $cmp239 = ($base$addr$1135>>>0)>($conv238>>>0);
       $cmp242 = ($add249>>>0)<(119304647);
       $87 = $cmp242 & $cmp239;
       if ($87) {
        $conv238180 = $conv238;$x$2179 = $add249;
       } else {
        break;
       }
      }
      $153 = $86;$154 = $add249;$155 = 0;$c$6$lcssa = $cond262;$conv267166$pre$phiZ2D = $conv238;
     } else {
      $153 = $82;$154 = 0;$155 = 0;$c$6$lcssa = $c$1137;$conv267166$pre$phiZ2D = $conv238177;
     }
     $cmp268167 = ($base$addr$1135>>>0)>($conv267166$pre$phiZ2D>>>0);
     if ($cmp268167) {
      $88 = (___udivdi3(-1,-1,($base$addr$1135|0),0)|0);
      $89 = (getTempRet0() | 0);
      $100 = $153;$91 = $155;$93 = $154;$c$7168 = $c$6$lcssa;
      while(1) {
       $90 = ($91>>>0)>($89>>>0);
       $92 = ($93>>>0)>($88>>>0);
       $94 = ($91|0)==($89|0);
       $95 = $94 & $92;
       $96 = $90 | $95;
       if ($96) {
        $150 = $93;$151 = $91;$base$addr$1136 = $base$addr$1135;$c$8 = $c$7168;
        label = 76;
        break L63;
       }
       $97 = (___muldi3(($93|0),($91|0),($base$addr$1135|0),0)|0);
       $98 = (getTempRet0() | 0);
       $99 = $100&255;
       $101 = $99 ^ -1;
       $102 = ($98>>>0)>(4294967295);
       $103 = ($97>>>0)>($101>>>0);
       $104 = ($98|0)==(-1);
       $105 = $104 & $103;
       $106 = $102 | $105;
       if ($106) {
        $150 = $93;$151 = $91;$base$addr$1136 = $base$addr$1135;$c$8 = $c$7168;
        label = 76;
        break L63;
       }
       $107 = (_i64Add(($97|0),($98|0),($99|0),0)|0);
       $108 = (getTempRet0() | 0);
       $109 = HEAP32[$rpos>>2]|0;
       $110 = HEAP32[$shend>>2]|0;
       $cmp292 = ($109>>>0)<($110>>>0);
       if ($cmp292) {
        $incdec$ptr296 = ((($109)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr296;
        $111 = HEAP8[$109>>0]|0;
        $conv297 = $111&255;
        $cond301 = $conv297;
       } else {
        $call299 = (___shgetc($f)|0);
        $cond301 = $call299;
       }
       $arrayidx266 = ((127233) + ($cond301)|0);
       $112 = HEAP8[$arrayidx266>>0]|0;
       $conv267 = $112&255;
       $cmp268 = ($base$addr$1135>>>0)>($conv267>>>0);
       if ($cmp268) {
        $100 = $112;$91 = $108;$93 = $107;$c$7168 = $cond301;
       } else {
        $150 = $107;$151 = $108;$base$addr$1136 = $base$addr$1135;$c$8 = $cond301;
        label = 76;
        break;
       }
      }
     } else {
      $150 = $154;$151 = $155;$base$addr$1136 = $base$addr$1135;$c$8 = $c$6$lcssa;
      label = 76;
     }
    }
   } while(0);
   if ((label|0) == 76) {
    $arrayidx305 = ((127233) + ($c$8)|0);
    $113 = HEAP8[$arrayidx305>>0]|0;
    $conv306 = $113&255;
    $cmp307 = ($base$addr$1136>>>0)>($conv306>>>0);
    if ($cmp307) {
     while(1) {
      $114 = HEAP32[$rpos>>2]|0;
      $115 = HEAP32[$shend>>2]|0;
      $cmp319 = ($114>>>0)<($115>>>0);
      if ($cmp319) {
       $incdec$ptr323 = ((($114)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr323;
       $116 = HEAP8[$114>>0]|0;
       $conv324 = $116&255;
       $cond328 = $conv324;
      } else {
       $call326 = (___shgetc($f)|0);
       $cond328 = $call326;
      }
      $arrayidx311 = ((127233) + ($cond328)|0);
      $117 = HEAP8[$arrayidx311>>0]|0;
      $conv312 = $117&255;
      $cmp313 = ($base$addr$1136>>>0)>($conv312>>>0);
      if (!($cmp313)) {
       break;
      }
     }
     $call330 = (___errno_location()|0);
     HEAP32[$call330>>2] = 68;
     $118 = $0 & 1;
     $119 = ($118|0)==(0);
     $120 = (0)==(0);
     $121 = $119 & $120;
     $spec$select133 = $121 ? $neg$0 : 0;
     $125 = $1;$127 = $0;$neg$1 = $spec$select133;
    } else {
     $125 = $151;$127 = $150;$neg$1 = $neg$0;
    }
   }
   $122 = HEAP32[$shend>>2]|0;
   $tobool337 = ($122|0)==(0|0);
   if (!($tobool337)) {
    $123 = HEAP32[$rpos>>2]|0;
    $incdec$ptr340 = ((($123)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr340;
   }
   $124 = ($125>>>0)<($1>>>0);
   $126 = ($127>>>0)<($0>>>0);
   $128 = ($125|0)==($1|0);
   $129 = $128 & $126;
   $130 = $124 | $129;
   if (!($130)) {
    $131 = $0 & 1;
    $132 = ($131|0)!=(0);
    $133 = (0)!=(0);
    $134 = $132 | $133;
    $tobool349 = ($neg$1|0)!=(0);
    $or$cond5 = $134 | $tobool349;
    if (!($or$cond5)) {
     $call351 = (___errno_location()|0);
     HEAP32[$call351>>2] = 68;
     $135 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $136 = (getTempRet0() | 0);
     $148 = $136;$149 = $135;
     break;
    }
    $137 = ($125>>>0)>($1>>>0);
    $138 = ($127>>>0)>($0>>>0);
    $139 = ($125|0)==($1|0);
    $140 = $139 & $138;
    $141 = $137 | $140;
    if ($141) {
     $call357 = (___errno_location()|0);
     HEAP32[$call357>>2] = 68;
     $148 = $1;$149 = $0;
     break;
    }
   }
   $142 = ($neg$1|0)<(0);
   $143 = $142 << 31 >> 31;
   $144 = $127 ^ $neg$1;
   $145 = $125 ^ $143;
   $146 = (_i64Subtract(($144|0),($145|0),($neg$1|0),($143|0))|0);
   $147 = (getTempRet0() | 0);
   $148 = $147;$149 = $146;
  }
 } while(0);
 setTempRet0(($148) | 0);
 return ($149|0);
}
function ___shgetc($f) {
 $f = $f|0;
 var $$pre = 0, $$pre25 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $arrayidx = 0, $call = 0, $cmp2 = 0, $cmp35 = 0, $conv34 = 0, $conv38 = 0, $idx$ext = 0, $rend18$phi$trans$insert = 0, $retval$0 = 0;
 var $rpos = 0, $rpos33$phi$trans$insert = 0, $shcnt = 0, $shcnt30 = 0, $shcnt7 = 0, $shend = 0, $shend17 = 0, $shend19 = 0, $shlim = 0, $sub$ptr$lhs$cast26 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub28 = 0, $tobool22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $shlim = ((($f)) + 112|0);
 $0 = $shlim;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2|0)==(0);
 $7 = ($5|0)==(0);
 $8 = $6 & $7;
 if ($8) {
  label = 3;
 } else {
  $shcnt = ((($f)) + 120|0);
  $9 = $shcnt;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) + 4)|0;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)<($5|0);
  $16 = ($11>>>0)<($2>>>0);
  $17 = ($14|0)==($5|0);
  $18 = $17 & $16;
  $19 = $15 | $18;
  if ($19) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $call = (___uflow($f)|0);
  $cmp2 = ($call|0)<(0);
  if ($cmp2) {
   label = 4;
  } else {
   $20 = $shlim;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = (($20) + 4)|0;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   $26 = ($22|0)==(0);
   $27 = ($25|0)==(0);
   $28 = $26 & $27;
   $rend18$phi$trans$insert = ((($f)) + 8|0);
   $$pre = HEAP32[$rend18$phi$trans$insert>>2]|0;
   if ($28) {
    $29 = $$pre;
    $66 = $29;
    label = 9;
   } else {
    $rpos = ((($f)) + 4|0);
    $30 = HEAP32[$rpos>>2]|0;
    $sub$ptr$rhs$cast = $30;
    $sub$ptr$sub = (($$pre) - ($sub$ptr$rhs$cast))|0;
    $31 = ($sub$ptr$sub|0)<(0);
    $32 = $31 << 31 >> 31;
    $shcnt7 = ((($f)) + 120|0);
    $33 = $shcnt7;
    $34 = $33;
    $35 = HEAP32[$34>>2]|0;
    $36 = (($33) + 4)|0;
    $37 = $36;
    $38 = HEAP32[$37>>2]|0;
    $39 = (_i64Subtract(($22|0),($25|0),($35|0),($38|0))|0);
    $40 = (getTempRet0() | 0);
    $41 = ($40|0)>($32|0);
    $42 = ($39>>>0)>($sub$ptr$sub>>>0);
    $43 = ($40|0)==($32|0);
    $44 = $43 & $42;
    $45 = $41 | $44;
    $46 = $$pre;
    if ($45) {
     $66 = $46;
     label = 9;
    } else {
     $idx$ext = (($39) + -1)|0;
     $add$ptr = (($30) + ($idx$ext)|0);
     $shend17 = ((($f)) + 104|0);
     HEAP32[$shend17>>2] = $add$ptr;
     $47 = $46;
    }
   }
   if ((label|0) == 9) {
    $shend19 = ((($f)) + 104|0);
    HEAP32[$shend19>>2] = $$pre;
    $47 = $66;
   }
   $tobool22 = ($47|0)==(0|0);
   $rpos33$phi$trans$insert = ((($f)) + 4|0);
   if ($tobool22) {
    $$pre25 = HEAP32[$rpos33$phi$trans$insert>>2]|0;
    $64 = $$pre25;
   } else {
    $48 = HEAP32[$rpos33$phi$trans$insert>>2]|0;
    $sub$ptr$lhs$cast26 = $47;
    $sub$ptr$sub28 = (($sub$ptr$lhs$cast26) + 1)|0;
    $add = (($sub$ptr$sub28) - ($48))|0;
    $49 = ($add|0)<(0);
    $50 = $49 << 31 >> 31;
    $shcnt30 = ((($f)) + 120|0);
    $51 = $shcnt30;
    $52 = $51;
    $53 = HEAP32[$52>>2]|0;
    $54 = (($51) + 4)|0;
    $55 = $54;
    $56 = HEAP32[$55>>2]|0;
    $57 = (_i64Add(($53|0),($56|0),($add|0),($50|0))|0);
    $58 = (getTempRet0() | 0);
    $59 = $shcnt30;
    $60 = $59;
    HEAP32[$60>>2] = $57;
    $61 = (($59) + 4)|0;
    $62 = $61;
    HEAP32[$62>>2] = $58;
    $63 = $48;
    $64 = $63;
   }
   $arrayidx = ((($64)) + -1|0);
   $65 = HEAP8[$arrayidx>>0]|0;
   $conv34 = $65&255;
   $cmp35 = ($call|0)==($conv34|0);
   if ($cmp35) {
    $retval$0 = $call;
   } else {
    $conv38 = $call&255;
    HEAP8[$arrayidx>>0] = $conv38;
    $retval$0 = $call;
   }
  }
 }
 if ((label|0) == 4) {
  $shend = ((($f)) + 104|0);
  HEAP32[$shend>>2] = 0;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $c = 0, $call = 0, $call1 = 0, $cmp = 0, $conv = 0, $read = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c = sp;
 $call = (___toread($f)|0);
 $tobool = ($call|0)==(0);
 if ($tobool) {
  $read = ((($f)) + 32|0);
  $0 = HEAP32[$read>>2]|0;
  $call1 = (FUNCTION_TABLE_iiii[$0 & 255]($f,$c,1)|0);
  $cmp = ($call1|0)==(1);
  if ($cmp) {
   $1 = HEAP8[$c>>0]|0;
   $conv = $1&255;
   $retval$0 = $conv;
  } else {
   $retval$0 = -1;
  }
 } else {
  $retval$0 = -1;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___toread($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $cmp = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or9 = 0, $rend = 0, $retval$0 = 0;
 var $rpos = 0, $sext = 0, $sub = 0, $tobool = 0, $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = ((($f)) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $2 = HEAP32[$wbase>>2]|0;
 $cmp = ($1>>>0)>($2>>>0);
 if ($cmp) {
  $write = ((($f)) + 36|0);
  $3 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$3 & 255]($f,0,0)|0);
 }
 $wend = ((($f)) + 16|0);
 HEAP32[$wend>>2] = 0;
 HEAP32[$wbase>>2] = 0;
 HEAP32[$wpos>>2] = 0;
 $4 = HEAP32[$f>>2]|0;
 $and = $4 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $buf = ((($f)) + 44|0);
  $5 = HEAP32[$buf>>2]|0;
  $buf_size = ((($f)) + 48|0);
  $6 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($5) + ($6)|0);
  $rend = ((($f)) + 8|0);
  HEAP32[$rend>>2] = $add$ptr;
  $rpos = ((($f)) + 4|0);
  HEAP32[$rpos>>2] = $add$ptr;
  $7 = $4 << 27;
  $sext = $7 >> 31;
  $retval$0 = $sext;
 } else {
  $or9 = $4 | 32;
  HEAP32[$f>>2] = $or9;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (129768|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $arrayidx = 0, $b = 0, $buf = 0, $buf_size = 0, $call = 0, $call10 = 0, $cmp = 0, $cmp16 = 0, $cmp4 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $spec$select = 0, $sub = 0, $sub$ptr$rhs$cast = 0, $sub17 = 0;
 var $sub3 = 0, $tobool = 0, $tobool11 = 0, $wbase = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $b = sp + 144|0;
 $f = sp;
 _memcpy(($f|0),(128304|0),144)|0;
 $sub = (($n) + -1)|0;
 $cmp = ($sub>>>0)>(2147483646);
 if ($cmp) {
  $tobool = ($n|0)==(0);
  if ($tobool) {
   $n$addr$0 = 1;$s$addr$0 = $b;
   label = 4;
  } else {
   $call = (___errno_location()|0);
   HEAP32[$call>>2] = 61;
   $retval$0 = -1;
  }
 } else {
  $n$addr$0 = $n;$s$addr$0 = $s;
  label = 4;
 }
 if ((label|0) == 4) {
  $sub$ptr$rhs$cast = $s$addr$0;
  $sub3 = (-2 - ($sub$ptr$rhs$cast))|0;
  $cmp4 = ($n$addr$0>>>0)>($sub3>>>0);
  $spec$select = $cmp4 ? $sub3 : $n$addr$0;
  $buf_size = ((($f)) + 48|0);
  HEAP32[$buf_size>>2] = $spec$select;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $s$addr$0;
  $buf = ((($f)) + 44|0);
  HEAP32[$buf>>2] = $s$addr$0;
  $add$ptr = (($s$addr$0) + ($spec$select)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $add$ptr;
  $call10 = (_vfprintf($f,$fmt,$ap)|0);
  $tobool11 = ($spec$select|0)==(0);
  if ($tobool11) {
   $retval$0 = $call10;
  } else {
   $0 = HEAP32[$wpos>>2]|0;
   $1 = HEAP32[$wend>>2]|0;
   $cmp16 = ($0|0)==($1|0);
   $sub17 = $cmp16 << 31 >> 31;
   $arrayidx = (($0) + ($sub17)|0);
   HEAP8[$arrayidx>>0] = 0;
   $retval$0 = $call10;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___vfprintf_internal($f,$fmt,$ap,161,162)|0);
 return ($call|0);
}
function _fmt_fp($f,$y,$w,$p,$fl,$t) {
 $f = $f|0;
 $y = +$y;
 $w = $w|0;
 $p = $p|0;
 $fl = $fl|0;
 $t = $t|0;
 var $$ = 0, $$pr = 0, $$pr415 = 0, $$pre = 0, $$pre517 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $a$1$lcssa = 0, $a$1502 = 0, $a$2 = 0, $a$3$lcssa = 0, $a$3488 = 0, $a$5$lcssa = 0, $a$5471 = 0, $a$6 = 0, $a$8 = 0;
 var $a$9 = 0, $add = 0, $add$ptr213 = 0, $add$ptr311 = 0, $add$ptr354 = 0, $add$ptr358 = 0, $add$ptr373 = 0, $add$ptr442 = 0, $add$ptr65 = 0, $add$ptr671 = 0, $add$ptr742 = 0, $add$ptr756 = 0, $add113 = 0, $add150 = 0, $add154 = 0, $add163 = 0, $add165 = 0, $add273 = 0, $add275 = 0, $add284 = 0;
 var $add313 = 0, $add355 = 0, $add410 = 0.0, $add414 = 0, $add477$neg = 0, $add561 = 0, $add608 = 0, $add612 = 0, $add620 = 0, $add653 = 0, $add653$sink524 = 0, $add67 = 0, $add737 = 0, $add810 = 0, $add87 = 0.0, $add90 = 0.0, $and = 0, $and12 = 0, $and134 = 0, $and282 = 0;
 var $and36 = 0, $and379 = 0, $and45 = 0, $and483 = 0, $and610 = 0, $and610$lobit = 0, $and62 = 0, $and702 = 0, $and780 = 0, $arrayidx = 0, $arrayidx117 = 0, $arrayidx251 = 0, $arrayidx453 = 0, $arrayidx489 = 0, $big = 0, $buf = 0, $call55 = 0.0, $carry$0493 = 0, $carry262$0484 = 0, $cmp103 = 0;
 var $cmp127 = 0, $cmp131 = 0, $cmp147 = 0, $cmp196 = 0, $cmp205 = 0, $cmp225 = 0, $cmp225500 = 0, $cmp235 = 0, $cmp235492 = 0, $cmp249 = 0, $cmp249496 = 0, $cmp259 = 0, $cmp259486 = 0, $cmp277 = 0, $cmp277482 = 0, $cmp299 = 0, $cmp308 = 0, $cmp315 = 0, $cmp324 = 0, $cmp324478 = 0;
 var $cmp333 = 0, $cmp338 = 0, $cmp350 = 0, $cmp363 = 0, $cmp363474 = 0, $cmp374 = 0, $cmp38 = 0, $cmp385 = 0, $cmp390 = 0, $cmp403 = 0, $cmp411 = 0, $cmp416 = 0, $cmp416469 = 0, $cmp420 = 0, $cmp433 = 0, $cmp433465 = 0, $cmp443 = 0, $cmp450 = 0, $cmp450$lcssa = 0, $cmp450458 = 0;
 var $cmp470 = 0, $cmp473 = 0, $cmp495 = 0, $cmp495454 = 0, $cmp505 = 0, $cmp528 = 0, $cmp577 = 0, $cmp59 = 0, $cmp614 = 0, $cmp617 = 0, $cmp623 = 0, $cmp636 = 0, $cmp636449 = 0, $cmp660 = 0, $cmp665 = 0, $cmp673 = 0, $cmp678 = 0, $cmp678435 = 0, $cmp686 = 0, $cmp707 = 0;
 var $cmp707430 = 0, $cmp710 = 0, $cmp710431 = 0, $cmp722 = 0, $cmp722427 = 0, $cmp745 = 0, $cmp745442 = 0, $cmp748 = 0, $cmp748443 = 0, $cmp760 = 0, $cmp765 = 0, $cmp770 = 0, $cmp770439 = 0, $cmp777 = 0, $cmp790 = 0, $cmp818 = 0, $cmp82 = 0, $cmp94 = 0, $cond = 0, $cond100 = 0;
 var $cond233 = 0, $cond271 = 0, $cond304 = 0, $cond43 = 0, $cond629 = 0, $cond732 = 0, $cond800 = 0, $conv111 = 0, $conv114 = 0, $conv116 = 0, $conv118393 = 0, $conv121 = 0, $conv123 = 0.0, $conv216 = 0, $conv218 = 0.0, $conv644 = 0, $conv646 = 0, $d$0 = 0, $d$0491 = 0, $d$0494 = 0;
 var $d$1483 = 0, $d$2$lcssa = 0, $d$2470 = 0, $d$4 = 0, $d$5438 = 0, $d$6432 = 0, $d$7444 = 0, $dec = 0, $dec476 = 0, $dec481 = 0, $dec78 = 0, $div274 = 0, $div356 = 0, $div378 = 0, $div384 = 0, $e$0480 = 0, $e$1 = 0, $e$2467 = 0, $e$4 = 0, $e$5 = 0;
 var $e2 = 0, $ebuf0 = 0, $estr$0 = 0, $estr$1$lcssa = 0, $estr$1450 = 0, $estr$2 = 0, $i$0479 = 0, $i$1$lcssa = 0, $i$1475 = 0, $i$2466 = 0, $i$3455 = 0, $inc = 0, $inc425 = 0, $inc438 = 0, $inc468 = 0, $inc500 = 0, $incdec$ptr106 = 0, $incdec$ptr112 = 0, $incdec$ptr115 = 0, $incdec$ptr122 = 0;
 var $incdec$ptr137 = 0, $incdec$ptr217 = 0, $incdec$ptr246 = 0, $incdec$ptr288 = 0, $incdec$ptr292 = 0, $incdec$ptr292520 = 0, $incdec$ptr296 = 0, $incdec$ptr419 = 0, $incdec$ptr423 = 0, $incdec$ptr639 = 0, $incdec$ptr645 = 0, $incdec$ptr647 = 0, $incdec$ptr681 = 0, $incdec$ptr689 = 0, $incdec$ptr698 = 0, $incdec$ptr725 = 0, $incdec$ptr734 = 0, $incdec$ptr763 = 0, $incdec$ptr773 = 0, $incdec$ptr776 = 0;
 var $incdec$ptr808 = 0, $j$0 = 0, $j$0$in476 = 0, $j$1456 = 0, $j$2 = 0, $l$0 = 0, $l$1 = 0, $land$ext$neg = 0, $mul = 0.0, $mul125 = 0.0, $mul202 = 0.0, $mul220 = 0.0, $mul286 = 0, $mul322 = 0, $mul328 = 0, $mul335 = 0, $mul349 = 0, $mul367 = 0, $mul406 = 0.0, $mul407 = 0.0;
 var $mul431 = 0, $mul437 = 0, $mul499 = 0, $mul513 = 0, $mul80 = 0.0, $not$tobool341 = 0, $or = 0, $or$cond = 0, $or$cond1$not = 0, $or$cond2 = 0, $or$cond398 = 0, $or$cond400 = 0, $or$cond409 = 0, $or$cond411 = 0, $or120 = 0, $or504 = 0, $or613 = 0, $p$addr$2 = 0, $p$addr$3 = 0, $p$addr$4$lcssa = 0;
 var $p$addr$4433 = 0, $p$addr$5$lcssa = 0, $p$addr$5445 = 0, $pl$0 = 0, $prefix$0 = 0, $re$1426 = 0, $rem494 = 0, $rem494453 = 0, $round$0425 = 0.0, $round377$1 = 0.0, $s$0 = 0, $s$1 = 0, $s35$0 = 0, $s668$0436 = 0, $s668$1 = 0, $s715$0$lcssa = 0, $s715$0428 = 0, $s753$0 = 0, $s753$1440 = 0, $s753$2 = 0;
 var $scevgep513 = 0, $scevgep513514 = 0, $shl280 = 0, $shr283 = 0, $shr285 = 0, $small$1 = 0.0, $spec$select = 0, $spec$select395 = 0, $spec$select396 = 0, $spec$select396521 = 0, $spec$select396523 = 0, $spec$select397 = 0, $spec$select399 = 0.0, $spec$select401 = 0, $spec$select402 = 0, $spec$select403 = 0, $spec$select405 = 0, $spec$select408 = 0, $spec$select410 = 0, $spec$select412 = 0.0;
 var $spec$select413 = 0, $spec$select414 = 0, $spec$select416 = 0, $spec$select417 = 0, $spec$select418 = 0.0, $spec$select419 = 0.0, $spec$select420 = 0.0, $sub = 0.0, $sub$ptr$div = 0, $sub$ptr$div321 = 0, $sub$ptr$div347 = 0, $sub$ptr$div430 = 0, $sub$ptr$div511 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast151 = 0, $sub$ptr$lhs$cast160 = 0, $sub$ptr$lhs$cast173$pre$phiZZZZ2D = 0, $sub$ptr$lhs$cast305 = 0, $sub$ptr$lhs$cast344 = 0, $sub$ptr$lhs$cast508 = 0;
 var $sub$ptr$lhs$cast633 = 0, $sub$ptr$lhs$cast694 = 0, $sub$ptr$lhs$cast787 = 0, $sub$ptr$lhs$cast811 = 0, $sub$ptr$rhs$cast$le = 0, $sub$ptr$rhs$cast152 = 0, $sub$ptr$rhs$cast161 = 0, $sub$ptr$rhs$cast174$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast306 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast345 = 0, $sub$ptr$rhs$cast428 = 0, $sub$ptr$rhs$cast634 = 0, $sub$ptr$rhs$cast634447 = 0, $sub$ptr$rhs$cast649 = 0, $sub$ptr$rhs$cast695 = 0, $sub$ptr$rhs$cast788 = 0, $sub$ptr$rhs$cast812 = 0, $sub$ptr$sub = 0, $sub$ptr$sub145 = 0;
 var $sub$ptr$sub153 = 0, $sub$ptr$sub159 = 0, $sub$ptr$sub162 = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub175 = 0, $sub$ptr$sub307 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub346 = 0, $sub$ptr$sub429 = 0, $sub$ptr$sub510 = 0, $sub$ptr$sub635 = 0, $sub$ptr$sub635448 = 0, $sub$ptr$sub650 = 0, $sub$ptr$sub650$pn = 0, $sub$ptr$sub696 = 0, $sub$ptr$sub789 = 0, $sub$ptr$sub813 = 0, $sub124 = 0.0, $sub146 = 0, $sub181 = 0;
 var $sub203 = 0, $sub219 = 0.0, $sub256 = 0, $sub264 = 0, $sub281 = 0, $sub336 = 0, $sub343 = 0, $sub357 = 0, $sub409 = 0, $sub478 = 0, $sub480 = 0, $sub514 = 0, $sub562 = 0, $sub626 = 0, $sub735 = 0, $sub74 = 0, $sub806 = 0, $sub85 = 0.0, $sub86 = 0.0, $sub88 = 0.0;
 var $sub91 = 0.0, $sub97 = 0, $t$addr$0 = 0, $t$addr$1 = 0, $tobool129 = 0, $tobool13 = 0, $tobool135 = 0, $tobool139 = 0, $tobool140 = 0, $tobool222 = 0, $tobool244 = 0, $tobool252 = 0, $tobool290 = 0, $tobool290519 = 0, $tobool294 = 0, $tobool341 = 0, $tobool37 = 0, $tobool371 = 0, $tobool380 = 0, $tobool400 = 0;
 var $tobool454 = 0, $tobool484 = 0, $tobool490 = 0, $tobool56 = 0, $tobool609 = 0, $tobool609$not = 0, $tobool63 = 0, $tobool703 = 0, $tobool76 = 0, $tobool76421 = 0, $tobool781 = 0, $tobool79 = 0, $tobool9 = 0, $w$add653 = 0, $xor = 0, $xor167 = 0, $xor186 = 0, $xor655 = 0, $xor816 = 0, $y$addr$0 = 0.0;
 var $y$addr$1 = 0.0, $y$addr$2 = 0.0, $y$addr$3 = 0.0, $y$addr$4 = 0.0, $z$0 = 0, $z$1 = 0, $z$2$lcssa = 0, $z$2501 = 0, $z$3$lcssa = 0, $z$3497 = 0, $z$4$lcssa = 0, $z$4487 = 0, $z$5 = 0, $z$8 = 0, $z$9$lcssa = 0, $z$9459 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $big = sp + 32|0;
 $e2 = sp + 536|0;
 $buf = sp;
 $sub$ptr$rhs$cast$le = $buf;
 $ebuf0 = sp + 540|0;
 HEAP32[$e2>>2] = 0;
 $arrayidx = ((($ebuf0)) + 12|0);
 $0 = (___DOUBLE_BITS_639($y)|0);
 $1 = (getTempRet0() | 0);
 $2 = ($1|0)<(0);
 if ($2) {
  $sub = - $y;
  $3 = (___DOUBLE_BITS_639($sub)|0);
  $4 = (getTempRet0() | 0);
  $8 = $4;$85 = $3;$pl$0 = 1;$prefix$0 = 158520;$y$addr$0 = $sub;
 } else {
  $and = $fl & 2048;
  $tobool9 = ($and|0)==(0);
  $and12 = $fl & 1;
  $tobool13 = ($and12|0)==(0);
  $$ = $tobool13 ? (158521) : (158526);
  $spec$select416 = $tobool9 ? $$ : (158523);
  $5 = $fl & 2049;
  $6 = ($5|0)!=(0);
  $spec$select417 = $6&1;
  $8 = $1;$85 = $0;$pl$0 = $spec$select417;$prefix$0 = $spec$select416;$y$addr$0 = $y;
 }
 $7 = $8 & 2146435072;
 $9 = (0)==(0);
 $10 = ($7|0)==(2146435072);
 $11 = $9 & $10;
 do {
  if ($11) {
   $and36 = $t & 32;
   $tobool37 = ($and36|0)!=(0);
   $cond = $tobool37 ? 158539 : 158543;
   $cmp38 = ($y$addr$0 != $y$addr$0) | (0.0 != 0.0);
   $cond43 = $tobool37 ? 158562 : 158547;
   $s35$0 = $cmp38 ? $cond43 : $cond;
   $add = (($pl$0) + 3)|0;
   $and45 = $fl & -65537;
   _pad_636($f,32,$w,$add,$and45);
   _out($f,$prefix$0,$pl$0);
   _out($f,$s35$0,3);
   $xor = $fl ^ 8192;
   _pad_636($f,32,$w,$add,$xor);
   $add653$sink524 = $add;
  } else {
   $call55 = (+_frexp($y$addr$0,$e2));
   $mul = $call55 * 2.0;
   $tobool56 = $mul != 0.0;
   if ($tobool56) {
    $12 = HEAP32[$e2>>2]|0;
    $dec = (($12) + -1)|0;
    HEAP32[$e2>>2] = $dec;
   }
   $or = $t | 32;
   $cmp59 = ($or|0)==(97);
   if ($cmp59) {
    $and62 = $t & 32;
    $tobool63 = ($and62|0)==(0);
    $add$ptr65 = ((($prefix$0)) + 9|0);
    $spec$select = $tobool63 ? $prefix$0 : $add$ptr65;
    $add67 = $pl$0 | 2;
    $13 = ($p>>>0)>(11);
    $sub74 = (12 - ($p))|0;
    $tobool76421 = ($sub74|0)==(0);
    $tobool76 = $13 | $tobool76421;
    do {
     if ($tobool76) {
      $y$addr$1 = $mul;
     } else {
      $re$1426 = $sub74;$round$0425 = 8.0;
      while(1) {
       $dec78 = (($re$1426) + -1)|0;
       $mul80 = $round$0425 * 16.0;
       $tobool79 = ($dec78|0)==(0);
       if ($tobool79) {
        break;
       } else {
        $re$1426 = $dec78;$round$0425 = $mul80;
       }
      }
      $14 = HEAP8[$spec$select>>0]|0;
      $cmp82 = ($14<<24>>24)==(45);
      if ($cmp82) {
       $sub85 = - $mul;
       $sub86 = $sub85 - $mul80;
       $add87 = $mul80 + $sub86;
       $sub88 = - $add87;
       $y$addr$1 = $sub88;
       break;
      } else {
       $add90 = $mul + $mul80;
       $sub91 = $add90 - $mul80;
       $y$addr$1 = $sub91;
       break;
      }
     }
    } while(0);
    $15 = HEAP32[$e2>>2]|0;
    $cmp94 = ($15|0)<(0);
    $sub97 = (0 - ($15))|0;
    $cond100 = $cmp94 ? $sub97 : $15;
    $16 = ($cond100|0)<(0);
    $17 = $16 << 31 >> 31;
    $18 = (_fmt_u($cond100,$17,$arrayidx)|0);
    $cmp103 = ($18|0)==($arrayidx|0);
    if ($cmp103) {
     $incdec$ptr106 = ((($ebuf0)) + 11|0);
     HEAP8[$incdec$ptr106>>0] = 48;
     $estr$0 = $incdec$ptr106;
    } else {
     $estr$0 = $18;
    }
    $19 = $15 >> 31;
    $20 = $19 & 2;
    $21 = (($20) + 43)|0;
    $conv111 = $21&255;
    $incdec$ptr112 = ((($estr$0)) + -1|0);
    HEAP8[$incdec$ptr112>>0] = $conv111;
    $add113 = (($t) + 15)|0;
    $conv114 = $add113&255;
    $incdec$ptr115 = ((($estr$0)) + -2|0);
    HEAP8[$incdec$ptr115>>0] = $conv114;
    $cmp131 = ($p|0)<(1);
    $and134 = $fl & 8;
    $tobool135 = ($and134|0)==(0);
    $s$0 = $buf;$y$addr$2 = $y$addr$1;
    while(1) {
     $conv116 = (~~(($y$addr$2)));
     $arrayidx117 = (127968 + ($conv116)|0);
     $22 = HEAP8[$arrayidx117>>0]|0;
     $conv118393 = $22&255;
     $or120 = $and62 | $conv118393;
     $conv121 = $or120&255;
     $incdec$ptr122 = ((($s$0)) + 1|0);
     HEAP8[$s$0>>0] = $conv121;
     $conv123 = (+($conv116|0));
     $sub124 = $y$addr$2 - $conv123;
     $mul125 = $sub124 * 16.0;
     $sub$ptr$lhs$cast = $incdec$ptr122;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast$le))|0;
     $cmp127 = ($sub$ptr$sub|0)==(1);
     if ($cmp127) {
      $tobool129 = $mul125 == 0.0;
      $or$cond1$not = $cmp131 & $tobool129;
      $or$cond = $tobool135 & $or$cond1$not;
      if ($or$cond) {
       $s$1 = $incdec$ptr122;
      } else {
       $incdec$ptr137 = ((($s$0)) + 2|0);
       HEAP8[$incdec$ptr122>>0] = 46;
       $s$1 = $incdec$ptr137;
      }
     } else {
      $s$1 = $incdec$ptr122;
     }
     $tobool139 = $mul125 != 0.0;
     if ($tobool139) {
      $s$0 = $s$1;$y$addr$2 = $mul125;
     } else {
      break;
     }
    }
    $tobool140 = ($p|0)==(0);
    $$pre517 = $s$1;
    if ($tobool140) {
     label = 25;
    } else {
     $sub$ptr$sub145 = (-2 - ($sub$ptr$rhs$cast$le))|0;
     $sub146 = (($sub$ptr$sub145) + ($$pre517))|0;
     $cmp147 = ($sub146|0)<($p|0);
     if ($cmp147) {
      $sub$ptr$lhs$cast151 = $arrayidx;
      $sub$ptr$rhs$cast152 = $incdec$ptr115;
      $sub$ptr$sub153 = (($p) + 2)|0;
      $add150 = (($sub$ptr$sub153) + ($sub$ptr$lhs$cast151))|0;
      $add154 = (($add150) - ($sub$ptr$rhs$cast152))|0;
      $l$0 = $add154;$sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast151;$sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast152;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $sub$ptr$lhs$cast160 = $arrayidx;
     $sub$ptr$rhs$cast161 = $incdec$ptr115;
     $sub$ptr$sub159 = (($sub$ptr$lhs$cast160) - ($sub$ptr$rhs$cast$le))|0;
     $sub$ptr$sub162 = (($sub$ptr$sub159) - ($sub$ptr$rhs$cast161))|0;
     $add163 = (($sub$ptr$sub162) + ($$pre517))|0;
     $l$0 = $add163;$sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast160;$sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast161;
    }
    $add165 = (($l$0) + ($add67))|0;
    _pad_636($f,32,$w,$add165,$fl);
    _out($f,$spec$select,$add67);
    $xor167 = $fl ^ 65536;
    _pad_636($f,48,$w,$add165,$xor167);
    $sub$ptr$sub172 = (($$pre517) - ($sub$ptr$rhs$cast$le))|0;
    _out($f,$buf,$sub$ptr$sub172);
    $sub$ptr$sub175 = (($sub$ptr$lhs$cast173$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast174$pre$phiZZZZ2D))|0;
    $23 = (($sub$ptr$sub172) + ($sub$ptr$sub175))|0;
    $sub181 = (($l$0) - ($23))|0;
    _pad_636($f,48,$sub181,0,0);
    _out($f,$incdec$ptr115,$sub$ptr$sub175);
    $xor186 = $fl ^ 8192;
    _pad_636($f,32,$w,$add165,$xor186);
    $add653$sink524 = $add165;
    break;
   }
   $cmp196 = ($p|0)<(0);
   $spec$select395 = $cmp196 ? 6 : $p;
   if ($tobool56) {
    $mul202 = $mul * 268435456.0;
    $24 = HEAP32[$e2>>2]|0;
    $sub203 = (($24) + -28)|0;
    HEAP32[$e2>>2] = $sub203;
    $$pr = $sub203;$y$addr$3 = $mul202;
   } else {
    $$pre = HEAP32[$e2>>2]|0;
    $$pr = $$pre;$y$addr$3 = $mul;
   }
   $cmp205 = ($$pr|0)<(0);
   $add$ptr213 = ((($big)) + 288|0);
   $z$0 = $cmp205 ? $big : $add$ptr213;
   $y$addr$4 = $y$addr$3;$z$1 = $z$0;
   while(1) {
    $conv216 = (~~(($y$addr$4))>>>0);
    HEAP32[$z$1>>2] = $conv216;
    $incdec$ptr217 = ((($z$1)) + 4|0);
    $conv218 = (+($conv216>>>0));
    $sub219 = $y$addr$4 - $conv218;
    $mul220 = $sub219 * 1.0E+9;
    $tobool222 = $mul220 != 0.0;
    if ($tobool222) {
     $y$addr$4 = $mul220;$z$1 = $incdec$ptr217;
    } else {
     break;
    }
   }
   $sub$ptr$rhs$cast345 = $z$0;
   $cmp225500 = ($$pr|0)>(0);
   if ($cmp225500) {
    $26 = $$pr;$a$1502 = $z$0;$z$2501 = $incdec$ptr217;
    while(1) {
     $25 = ($26|0)<(29);
     $cond233 = $25 ? $26 : 29;
     $d$0491 = ((($z$2501)) + -4|0);
     $cmp235492 = ($d$0491>>>0)<($a$1502>>>0);
     if ($cmp235492) {
      $a$2 = $a$1502;
     } else {
      $carry$0493 = 0;$d$0494 = $d$0491;
      while(1) {
       $27 = HEAP32[$d$0494>>2]|0;
       $28 = (_bitshift64Shl(($27|0),0,($cond233|0))|0);
       $29 = (getTempRet0() | 0);
       $30 = (_i64Add(($28|0),($29|0),($carry$0493|0),0)|0);
       $31 = (getTempRet0() | 0);
       $32 = (___udivdi3(($30|0),($31|0),1000000000,0)|0);
       $33 = (getTempRet0() | 0);
       $34 = (___muldi3(($32|0),($33|0),1000000000,0)|0);
       $35 = (getTempRet0() | 0);
       $36 = (_i64Subtract(($30|0),($31|0),($34|0),($35|0))|0);
       $37 = (getTempRet0() | 0);
       HEAP32[$d$0494>>2] = $36;
       $d$0 = ((($d$0494)) + -4|0);
       $cmp235 = ($d$0>>>0)<($a$1502>>>0);
       if ($cmp235) {
        break;
       } else {
        $carry$0493 = $32;$d$0494 = $d$0;
       }
      }
      $tobool244 = ($32|0)==(0);
      if ($tobool244) {
       $a$2 = $a$1502;
      } else {
       $incdec$ptr246 = ((($a$1502)) + -4|0);
       HEAP32[$incdec$ptr246>>2] = $32;
       $a$2 = $incdec$ptr246;
      }
     }
     $cmp249496 = ($z$2501>>>0)>($a$2>>>0);
     L57: do {
      if ($cmp249496) {
       $z$3497 = $z$2501;
       while(1) {
        $arrayidx251 = ((($z$3497)) + -4|0);
        $38 = HEAP32[$arrayidx251>>2]|0;
        $tobool252 = ($38|0)==(0);
        if (!($tobool252)) {
         $z$3$lcssa = $z$3497;
         break L57;
        }
        $cmp249 = ($arrayidx251>>>0)>($a$2>>>0);
        if ($cmp249) {
         $z$3497 = $arrayidx251;
        } else {
         $z$3$lcssa = $arrayidx251;
         break;
        }
       }
      } else {
       $z$3$lcssa = $z$2501;
      }
     } while(0);
     $39 = HEAP32[$e2>>2]|0;
     $sub256 = (($39) - ($cond233))|0;
     HEAP32[$e2>>2] = $sub256;
     $cmp225 = ($sub256|0)>(0);
     if ($cmp225) {
      $26 = $sub256;$a$1502 = $a$2;$z$2501 = $z$3$lcssa;
     } else {
      $$pr415 = $sub256;$a$1$lcssa = $a$2;$z$2$lcssa = $z$3$lcssa;
      break;
     }
    }
   } else {
    $$pr415 = $$pr;$a$1$lcssa = $z$0;$z$2$lcssa = $incdec$ptr217;
   }
   $cmp259486 = ($$pr415|0)<(0);
   if ($cmp259486) {
    $add273 = (($spec$select395) + 25)|0;
    $div274 = (($add273|0) / 9)&-1;
    $add275 = (($div274) + 1)|0;
    $cmp299 = ($or|0)==(102);
    $40 = $$pr415;$a$3488 = $a$1$lcssa;$z$4487 = $z$2$lcssa;
    while(1) {
     $sub264 = (0 - ($40))|0;
     $41 = ($sub264|0)<(9);
     $cond271 = $41 ? $sub264 : 9;
     $cmp277482 = ($a$3488>>>0)<($z$4487>>>0);
     if ($cmp277482) {
      $shl280 = 1 << $cond271;
      $sub281 = (($shl280) + -1)|0;
      $shr285 = 1000000000 >>> $cond271;
      $carry262$0484 = 0;$d$1483 = $a$3488;
      while(1) {
       $43 = HEAP32[$d$1483>>2]|0;
       $and282 = $43 & $sub281;
       $shr283 = $43 >>> $cond271;
       $add284 = (($shr283) + ($carry262$0484))|0;
       HEAP32[$d$1483>>2] = $add284;
       $mul286 = Math_imul($and282, $shr285)|0;
       $incdec$ptr288 = ((($d$1483)) + 4|0);
       $cmp277 = ($incdec$ptr288>>>0)<($z$4487>>>0);
       if ($cmp277) {
        $carry262$0484 = $mul286;$d$1483 = $incdec$ptr288;
       } else {
        break;
       }
      }
      $44 = HEAP32[$a$3488>>2]|0;
      $tobool290 = ($44|0)==(0);
      $incdec$ptr292 = ((($a$3488)) + 4|0);
      $spec$select396 = $tobool290 ? $incdec$ptr292 : $a$3488;
      $tobool294 = ($mul286|0)==(0);
      if ($tobool294) {
       $spec$select396523 = $spec$select396;$z$5 = $z$4487;
      } else {
       $incdec$ptr296 = ((($z$4487)) + 4|0);
       HEAP32[$z$4487>>2] = $mul286;
       $spec$select396523 = $spec$select396;$z$5 = $incdec$ptr296;
      }
     } else {
      $42 = HEAP32[$a$3488>>2]|0;
      $tobool290519 = ($42|0)==(0);
      $incdec$ptr292520 = ((($a$3488)) + 4|0);
      $spec$select396521 = $tobool290519 ? $incdec$ptr292520 : $a$3488;
      $spec$select396523 = $spec$select396521;$z$5 = $z$4487;
     }
     $cond304 = $cmp299 ? $z$0 : $spec$select396523;
     $sub$ptr$lhs$cast305 = $z$5;
     $sub$ptr$rhs$cast306 = $cond304;
     $sub$ptr$sub307 = (($sub$ptr$lhs$cast305) - ($sub$ptr$rhs$cast306))|0;
     $sub$ptr$div = $sub$ptr$sub307 >> 2;
     $cmp308 = ($sub$ptr$div|0)>($add275|0);
     $add$ptr311 = (($cond304) + ($add275<<2)|0);
     $spec$select397 = $cmp308 ? $add$ptr311 : $z$5;
     $45 = HEAP32[$e2>>2]|0;
     $add313 = (($45) + ($cond271))|0;
     HEAP32[$e2>>2] = $add313;
     $cmp259 = ($add313|0)<(0);
     if ($cmp259) {
      $40 = $add313;$a$3488 = $spec$select396523;$z$4487 = $spec$select397;
     } else {
      $a$3$lcssa = $spec$select396523;$z$4$lcssa = $spec$select397;
      break;
     }
    }
   } else {
    $a$3$lcssa = $a$1$lcssa;$z$4$lcssa = $z$2$lcssa;
   }
   $cmp315 = ($a$3$lcssa>>>0)<($z$4$lcssa>>>0);
   if ($cmp315) {
    $sub$ptr$rhs$cast319 = $a$3$lcssa;
    $sub$ptr$sub320 = (($sub$ptr$rhs$cast345) - ($sub$ptr$rhs$cast319))|0;
    $sub$ptr$div321 = $sub$ptr$sub320 >> 2;
    $mul322 = ($sub$ptr$div321*9)|0;
    $46 = HEAP32[$a$3$lcssa>>2]|0;
    $cmp324478 = ($46>>>0)<(10);
    if ($cmp324478) {
     $e$1 = $mul322;
    } else {
     $e$0480 = $mul322;$i$0479 = 10;
     while(1) {
      $mul328 = ($i$0479*10)|0;
      $inc = (($e$0480) + 1)|0;
      $cmp324 = ($46>>>0)<($mul328>>>0);
      if ($cmp324) {
       $e$1 = $inc;
       break;
      } else {
       $e$0480 = $inc;$i$0479 = $mul328;
      }
     }
    }
   } else {
    $e$1 = 0;
   }
   $cmp333 = ($or|0)==(102);
   $mul335 = $cmp333 ? 0 : $e$1;
   $sub336 = (($spec$select395) - ($mul335))|0;
   $cmp338 = ($or|0)==(103);
   $tobool341 = ($spec$select395|0)!=(0);
   $47 = $tobool341 & $cmp338;
   $land$ext$neg = $47 << 31 >> 31;
   $sub343 = (($sub336) + ($land$ext$neg))|0;
   $sub$ptr$lhs$cast344 = $z$4$lcssa;
   $sub$ptr$sub346 = (($sub$ptr$lhs$cast344) - ($sub$ptr$rhs$cast345))|0;
   $sub$ptr$div347 = $sub$ptr$sub346 >> 2;
   $48 = ($sub$ptr$div347*9)|0;
   $mul349 = (($48) + -9)|0;
   $cmp350 = ($sub343|0)<($mul349|0);
   if ($cmp350) {
    $add$ptr354 = ((($z$0)) + 4|0);
    $add355 = (($sub343) + 9216)|0;
    $div356 = (($add355|0) / 9)&-1;
    $sub357 = (($div356) + -1024)|0;
    $add$ptr358 = (($add$ptr354) + ($sub357<<2)|0);
    $49 = ($div356*9)|0;
    $50 = (($add355) - ($49))|0;
    $cmp363474 = ($50|0)<(8);
    if ($cmp363474) {
     $i$1475 = 10;$j$0$in476 = $50;
     while(1) {
      $j$0 = (($j$0$in476) + 1)|0;
      $mul367 = ($i$1475*10)|0;
      $cmp363 = ($j$0$in476|0)<(7);
      if ($cmp363) {
       $i$1475 = $mul367;$j$0$in476 = $j$0;
      } else {
       $i$1$lcssa = $mul367;
       break;
      }
     }
    } else {
     $i$1$lcssa = 10;
    }
    $51 = HEAP32[$add$ptr358>>2]|0;
    $div378 = (($51>>>0) / ($i$1$lcssa>>>0))&-1;
    $52 = Math_imul($div378, $i$1$lcssa)|0;
    $53 = (($51) - ($52))|0;
    $tobool371 = ($53|0)==(0);
    $add$ptr373 = ((($add$ptr358)) + 4|0);
    $cmp374 = ($add$ptr373|0)==($z$4$lcssa|0);
    $or$cond398 = $cmp374 & $tobool371;
    if ($or$cond398) {
     $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
    } else {
     $and379 = $div378 & 1;
     $tobool380 = ($and379|0)==(0);
     $spec$select399 = $tobool380 ? 9007199254740992.0 : 9007199254740994.0;
     $div384 = $i$1$lcssa >>> 1;
     $cmp385 = ($53>>>0)<($div384>>>0);
     $cmp390 = ($53|0)==($div384|0);
     $or$cond400 = $cmp374 & $cmp390;
     $spec$select412 = $or$cond400 ? 1.0 : 1.5;
     $spec$select418 = $cmp385 ? 0.5 : $spec$select412;
     $tobool400 = ($pl$0|0)==(0);
     if ($tobool400) {
      $round377$1 = $spec$select399;$small$1 = $spec$select418;
     } else {
      $54 = HEAP8[$prefix$0>>0]|0;
      $cmp403 = ($54<<24>>24)==(45);
      $mul406 = - $spec$select399;
      $mul407 = - $spec$select418;
      $spec$select419 = $cmp403 ? $mul406 : $spec$select399;
      $spec$select420 = $cmp403 ? $mul407 : $spec$select418;
      $round377$1 = $spec$select419;$small$1 = $spec$select420;
     }
     $sub409 = (($51) - ($53))|0;
     HEAP32[$add$ptr358>>2] = $sub409;
     $add410 = $round377$1 + $small$1;
     $cmp411 = $add410 != $round377$1;
     if ($cmp411) {
      $add414 = (($sub409) + ($i$1$lcssa))|0;
      HEAP32[$add$ptr358>>2] = $add414;
      $cmp416469 = ($add414>>>0)>(999999999);
      if ($cmp416469) {
       $a$5471 = $a$3$lcssa;$d$2470 = $add$ptr358;
       while(1) {
        $incdec$ptr419 = ((($d$2470)) + -4|0);
        HEAP32[$d$2470>>2] = 0;
        $cmp420 = ($incdec$ptr419>>>0)<($a$5471>>>0);
        if ($cmp420) {
         $incdec$ptr423 = ((($a$5471)) + -4|0);
         HEAP32[$incdec$ptr423>>2] = 0;
         $a$6 = $incdec$ptr423;
        } else {
         $a$6 = $a$5471;
        }
        $55 = HEAP32[$incdec$ptr419>>2]|0;
        $inc425 = (($55) + 1)|0;
        HEAP32[$incdec$ptr419>>2] = $inc425;
        $cmp416 = ($inc425>>>0)>(999999999);
        if ($cmp416) {
         $a$5471 = $a$6;$d$2470 = $incdec$ptr419;
        } else {
         $a$5$lcssa = $a$6;$d$2$lcssa = $incdec$ptr419;
         break;
        }
       }
      } else {
       $a$5$lcssa = $a$3$lcssa;$d$2$lcssa = $add$ptr358;
      }
      $sub$ptr$rhs$cast428 = $a$5$lcssa;
      $sub$ptr$sub429 = (($sub$ptr$rhs$cast345) - ($sub$ptr$rhs$cast428))|0;
      $sub$ptr$div430 = $sub$ptr$sub429 >> 2;
      $mul431 = ($sub$ptr$div430*9)|0;
      $56 = HEAP32[$a$5$lcssa>>2]|0;
      $cmp433465 = ($56>>>0)<(10);
      if ($cmp433465) {
       $a$8 = $a$5$lcssa;$d$4 = $d$2$lcssa;$e$4 = $mul431;
      } else {
       $e$2467 = $mul431;$i$2466 = 10;
       while(1) {
        $mul437 = ($i$2466*10)|0;
        $inc438 = (($e$2467) + 1)|0;
        $cmp433 = ($56>>>0)<($mul437>>>0);
        if ($cmp433) {
         $a$8 = $a$5$lcssa;$d$4 = $d$2$lcssa;$e$4 = $inc438;
         break;
        } else {
         $e$2467 = $inc438;$i$2466 = $mul437;
        }
       }
      }
     } else {
      $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
     }
    }
    $add$ptr442 = ((($d$4)) + 4|0);
    $cmp443 = ($z$4$lcssa>>>0)>($add$ptr442>>>0);
    $spec$select401 = $cmp443 ? $add$ptr442 : $z$4$lcssa;
    $a$9 = $a$8;$e$5 = $e$4;$z$8 = $spec$select401;
   } else {
    $a$9 = $a$3$lcssa;$e$5 = $e$1;$z$8 = $z$4$lcssa;
   }
   $sub626 = (0 - ($e$5))|0;
   $cmp450458 = ($z$8>>>0)>($a$9>>>0);
   L109: do {
    if ($cmp450458) {
     $z$9459 = $z$8;
     while(1) {
      $arrayidx453 = ((($z$9459)) + -4|0);
      $57 = HEAP32[$arrayidx453>>2]|0;
      $tobool454 = ($57|0)==(0);
      if (!($tobool454)) {
       $cmp450$lcssa = 1;$z$9$lcssa = $z$9459;
       break L109;
      }
      $cmp450 = ($arrayidx453>>>0)>($a$9>>>0);
      if ($cmp450) {
       $z$9459 = $arrayidx453;
      } else {
       $cmp450$lcssa = 0;$z$9$lcssa = $arrayidx453;
       break;
      }
     }
    } else {
     $cmp450$lcssa = 0;$z$9$lcssa = $z$8;
    }
   } while(0);
   do {
    if ($cmp338) {
     $not$tobool341 = $tobool341 ^ 1;
     $inc468 = $not$tobool341&1;
     $spec$select402 = (($spec$select395) + ($inc468))|0;
     $cmp470 = ($spec$select402|0)>($e$5|0);
     $cmp473 = ($e$5|0)>(-5);
     $or$cond2 = $cmp470 & $cmp473;
     if ($or$cond2) {
      $dec476 = (($t) + -1)|0;
      $add477$neg = (($spec$select402) + -1)|0;
      $sub478 = (($add477$neg) - ($e$5))|0;
      $p$addr$2 = $sub478;$t$addr$0 = $dec476;
     } else {
      $sub480 = (($t) + -2)|0;
      $dec481 = (($spec$select402) + -1)|0;
      $p$addr$2 = $dec481;$t$addr$0 = $sub480;
     }
     $and483 = $fl & 8;
     $tobool484 = ($and483|0)==(0);
     if ($tobool484) {
      if ($cmp450$lcssa) {
       $arrayidx489 = ((($z$9$lcssa)) + -4|0);
       $58 = HEAP32[$arrayidx489>>2]|0;
       $tobool490 = ($58|0)==(0);
       if ($tobool490) {
        $j$2 = 9;
       } else {
        $rem494453 = (($58>>>0) % 10)&-1;
        $cmp495454 = ($rem494453|0)==(0);
        if ($cmp495454) {
         $i$3455 = 10;$j$1456 = 0;
         while(1) {
          $mul499 = ($i$3455*10)|0;
          $inc500 = (($j$1456) + 1)|0;
          $rem494 = (($58>>>0) % ($mul499>>>0))&-1;
          $cmp495 = ($rem494|0)==(0);
          if ($cmp495) {
           $i$3455 = $mul499;$j$1456 = $inc500;
          } else {
           $j$2 = $inc500;
           break;
          }
         }
        } else {
         $j$2 = 0;
        }
       }
      } else {
       $j$2 = 9;
      }
      $or504 = $t$addr$0 | 32;
      $cmp505 = ($or504|0)==(102);
      $sub$ptr$lhs$cast508 = $z$9$lcssa;
      $sub$ptr$sub510 = (($sub$ptr$lhs$cast508) - ($sub$ptr$rhs$cast345))|0;
      $sub$ptr$div511 = $sub$ptr$sub510 >> 2;
      $59 = ($sub$ptr$div511*9)|0;
      $mul513 = (($59) + -9)|0;
      if ($cmp505) {
       $sub514 = (($mul513) - ($j$2))|0;
       $60 = ($sub514|0)>(0);
       $spec$select403 = $60 ? $sub514 : 0;
       $cmp528 = ($p$addr$2|0)<($spec$select403|0);
       $spec$select413 = $cmp528 ? $p$addr$2 : $spec$select403;
       $p$addr$3 = $spec$select413;$t$addr$1 = $t$addr$0;
       break;
      } else {
       $add561 = (($mul513) + ($e$5))|0;
       $sub562 = (($add561) - ($j$2))|0;
       $61 = ($sub562|0)>(0);
       $spec$select405 = $61 ? $sub562 : 0;
       $cmp577 = ($p$addr$2|0)<($spec$select405|0);
       $spec$select414 = $cmp577 ? $p$addr$2 : $spec$select405;
       $p$addr$3 = $spec$select414;$t$addr$1 = $t$addr$0;
       break;
      }
     } else {
      $p$addr$3 = $p$addr$2;$t$addr$1 = $t$addr$0;
     }
    } else {
     $p$addr$3 = $spec$select395;$t$addr$1 = $t;
    }
   } while(0);
   $tobool609 = ($p$addr$3|0)!=(0);
   $and610 = $fl >>> 3;
   $and610$lobit = $and610 & 1;
   $62 = $tobool609 ? 1 : $and610$lobit;
   $or613 = $t$addr$1 | 32;
   $cmp614 = ($or613|0)==(102);
   if ($cmp614) {
    $cmp617 = ($e$5|0)>(0);
    $add620 = $cmp617 ? $e$5 : 0;
    $estr$2 = 0;$sub$ptr$sub650$pn = $add620;
   } else {
    $cmp623 = ($e$5|0)<(0);
    $cond629 = $cmp623 ? $sub626 : $e$5;
    $63 = ($cond629|0)<(0);
    $64 = $63 << 31 >> 31;
    $65 = (_fmt_u($cond629,$64,$arrayidx)|0);
    $sub$ptr$lhs$cast633 = $arrayidx;
    $sub$ptr$rhs$cast634447 = $65;
    $sub$ptr$sub635448 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634447))|0;
    $cmp636449 = ($sub$ptr$sub635448|0)<(2);
    if ($cmp636449) {
     $estr$1450 = $65;
     while(1) {
      $incdec$ptr639 = ((($estr$1450)) + -1|0);
      HEAP8[$incdec$ptr639>>0] = 48;
      $sub$ptr$rhs$cast634 = $incdec$ptr639;
      $sub$ptr$sub635 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634))|0;
      $cmp636 = ($sub$ptr$sub635|0)<(2);
      if ($cmp636) {
       $estr$1450 = $incdec$ptr639;
      } else {
       $estr$1$lcssa = $incdec$ptr639;
       break;
      }
     }
    } else {
     $estr$1$lcssa = $65;
    }
    $66 = $e$5 >> 31;
    $67 = $66 & 2;
    $68 = (($67) + 43)|0;
    $conv644 = $68&255;
    $incdec$ptr645 = ((($estr$1$lcssa)) + -1|0);
    HEAP8[$incdec$ptr645>>0] = $conv644;
    $conv646 = $t$addr$1&255;
    $incdec$ptr647 = ((($estr$1$lcssa)) + -2|0);
    HEAP8[$incdec$ptr647>>0] = $conv646;
    $sub$ptr$rhs$cast649 = $incdec$ptr647;
    $sub$ptr$sub650 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast649))|0;
    $estr$2 = $incdec$ptr647;$sub$ptr$sub650$pn = $sub$ptr$sub650;
   }
   $add608 = (($pl$0) + 1)|0;
   $add612 = (($add608) + ($p$addr$3))|0;
   $l$1 = (($add612) + ($62))|0;
   $add653 = (($l$1) + ($sub$ptr$sub650$pn))|0;
   _pad_636($f,32,$w,$add653,$fl);
   _out($f,$prefix$0,$pl$0);
   $xor655 = $fl ^ 65536;
   _pad_636($f,48,$w,$add653,$xor655);
   if ($cmp614) {
    $cmp660 = ($a$9>>>0)>($z$0>>>0);
    $spec$select408 = $cmp660 ? $z$0 : $a$9;
    $add$ptr671 = ((($buf)) + 9|0);
    $sub$ptr$lhs$cast694 = $add$ptr671;
    $incdec$ptr689 = ((($buf)) + 8|0);
    $d$5438 = $spec$select408;
    while(1) {
     $69 = HEAP32[$d$5438>>2]|0;
     $70 = (_fmt_u($69,0,$add$ptr671)|0);
     $cmp673 = ($d$5438|0)==($spec$select408|0);
     if ($cmp673) {
      $cmp686 = ($70|0)==($add$ptr671|0);
      if ($cmp686) {
       HEAP8[$incdec$ptr689>>0] = 48;
       $s668$1 = $incdec$ptr689;
      } else {
       $s668$1 = $70;
      }
     } else {
      $cmp678435 = ($70>>>0)>($buf>>>0);
      if ($cmp678435) {
       $71 = $70;
       $72 = (($71) - ($sub$ptr$rhs$cast$le))|0;
       _memset(($buf|0),48,($72|0))|0;
       $s668$0436 = $70;
       while(1) {
        $incdec$ptr681 = ((($s668$0436)) + -1|0);
        $cmp678 = ($incdec$ptr681>>>0)>($buf>>>0);
        if ($cmp678) {
         $s668$0436 = $incdec$ptr681;
        } else {
         $s668$1 = $incdec$ptr681;
         break;
        }
       }
      } else {
       $s668$1 = $70;
      }
     }
     $sub$ptr$rhs$cast695 = $s668$1;
     $sub$ptr$sub696 = (($sub$ptr$lhs$cast694) - ($sub$ptr$rhs$cast695))|0;
     _out($f,$s668$1,$sub$ptr$sub696);
     $incdec$ptr698 = ((($d$5438)) + 4|0);
     $cmp665 = ($incdec$ptr698>>>0)>($z$0>>>0);
     if ($cmp665) {
      break;
     } else {
      $d$5438 = $incdec$ptr698;
     }
    }
    $tobool609$not = $tobool609 ^ 1;
    $and702 = $fl & 8;
    $tobool703 = ($and702|0)==(0);
    $or$cond409 = $tobool703 & $tobool609$not;
    if (!($or$cond409)) {
     _out($f,158551,1);
    }
    $cmp707430 = ($incdec$ptr698>>>0)<($z$9$lcssa>>>0);
    $cmp710431 = ($p$addr$3|0)>(0);
    $73 = $cmp707430 & $cmp710431;
    if ($73) {
     $d$6432 = $incdec$ptr698;$p$addr$4433 = $p$addr$3;
     while(1) {
      $74 = HEAP32[$d$6432>>2]|0;
      $75 = (_fmt_u($74,0,$add$ptr671)|0);
      $cmp722427 = ($75>>>0)>($buf>>>0);
      if ($cmp722427) {
       $76 = $75;
       $77 = (($76) - ($sub$ptr$rhs$cast$le))|0;
       _memset(($buf|0),48,($77|0))|0;
       $s715$0428 = $75;
       while(1) {
        $incdec$ptr725 = ((($s715$0428)) + -1|0);
        $cmp722 = ($incdec$ptr725>>>0)>($buf>>>0);
        if ($cmp722) {
         $s715$0428 = $incdec$ptr725;
        } else {
         $s715$0$lcssa = $incdec$ptr725;
         break;
        }
       }
      } else {
       $s715$0$lcssa = $75;
      }
      $78 = ($p$addr$4433|0)<(9);
      $cond732 = $78 ? $p$addr$4433 : 9;
      _out($f,$s715$0$lcssa,$cond732);
      $incdec$ptr734 = ((($d$6432)) + 4|0);
      $sub735 = (($p$addr$4433) + -9)|0;
      $cmp707 = ($incdec$ptr734>>>0)<($z$9$lcssa>>>0);
      $cmp710 = ($p$addr$4433|0)>(9);
      $79 = $cmp707 & $cmp710;
      if ($79) {
       $d$6432 = $incdec$ptr734;$p$addr$4433 = $sub735;
      } else {
       $p$addr$4$lcssa = $sub735;
       break;
      }
     }
    } else {
     $p$addr$4$lcssa = $p$addr$3;
    }
    $add737 = (($p$addr$4$lcssa) + 9)|0;
    _pad_636($f,48,$add737,9,0);
   } else {
    $add$ptr742 = ((($a$9)) + 4|0);
    $spec$select410 = $cmp450$lcssa ? $z$9$lcssa : $add$ptr742;
    $cmp745442 = ($a$9>>>0)<($spec$select410>>>0);
    $cmp748443 = ($p$addr$3|0)>(-1);
    $80 = $cmp745442 & $cmp748443;
    if ($80) {
     $add$ptr756 = ((($buf)) + 9|0);
     $and780 = $fl & 8;
     $tobool781 = ($and780|0)==(0);
     $sub$ptr$lhs$cast787 = $add$ptr756;
     $81 = (0 - ($sub$ptr$rhs$cast$le))|0;
     $incdec$ptr763 = ((($buf)) + 8|0);
     $d$7444 = $a$9;$p$addr$5445 = $p$addr$3;
     while(1) {
      $82 = HEAP32[$d$7444>>2]|0;
      $83 = (_fmt_u($82,0,$add$ptr756)|0);
      $cmp760 = ($83|0)==($add$ptr756|0);
      if ($cmp760) {
       HEAP8[$incdec$ptr763>>0] = 48;
       $s753$0 = $incdec$ptr763;
      } else {
       $s753$0 = $83;
      }
      $cmp765 = ($d$7444|0)==($a$9|0);
      do {
       if ($cmp765) {
        $incdec$ptr776 = ((($s753$0)) + 1|0);
        _out($f,$s753$0,1);
        $cmp777 = ($p$addr$5445|0)<(1);
        $or$cond411 = $tobool781 & $cmp777;
        if ($or$cond411) {
         $s753$2 = $incdec$ptr776;
         break;
        }
        _out($f,158551,1);
        $s753$2 = $incdec$ptr776;
       } else {
        $cmp770439 = ($s753$0>>>0)>($buf>>>0);
        if (!($cmp770439)) {
         $s753$2 = $s753$0;
         break;
        }
        $scevgep513 = (($s753$0) + ($81)|0);
        $scevgep513514 = $scevgep513;
        _memset(($buf|0),48,($scevgep513514|0))|0;
        $s753$1440 = $s753$0;
        while(1) {
         $incdec$ptr773 = ((($s753$1440)) + -1|0);
         $cmp770 = ($incdec$ptr773>>>0)>($buf>>>0);
         if ($cmp770) {
          $s753$1440 = $incdec$ptr773;
         } else {
          $s753$2 = $incdec$ptr773;
          break;
         }
        }
       }
      } while(0);
      $sub$ptr$rhs$cast788 = $s753$2;
      $sub$ptr$sub789 = (($sub$ptr$lhs$cast787) - ($sub$ptr$rhs$cast788))|0;
      $cmp790 = ($p$addr$5445|0)>($sub$ptr$sub789|0);
      $cond800 = $cmp790 ? $sub$ptr$sub789 : $p$addr$5445;
      _out($f,$s753$2,$cond800);
      $sub806 = (($p$addr$5445) - ($sub$ptr$sub789))|0;
      $incdec$ptr808 = ((($d$7444)) + 4|0);
      $cmp745 = ($incdec$ptr808>>>0)<($spec$select410>>>0);
      $cmp748 = ($sub806|0)>(-1);
      $84 = $cmp745 & $cmp748;
      if ($84) {
       $d$7444 = $incdec$ptr808;$p$addr$5445 = $sub806;
      } else {
       $p$addr$5$lcssa = $sub806;
       break;
      }
     }
    } else {
     $p$addr$5$lcssa = $p$addr$3;
    }
    $add810 = (($p$addr$5$lcssa) + 18)|0;
    _pad_636($f,48,$add810,18,0);
    $sub$ptr$lhs$cast811 = $arrayidx;
    $sub$ptr$rhs$cast812 = $estr$2;
    $sub$ptr$sub813 = (($sub$ptr$lhs$cast811) - ($sub$ptr$rhs$cast812))|0;
    _out($f,$estr$2,$sub$ptr$sub813);
   }
   $xor816 = $fl ^ 8192;
   _pad_636($f,32,$w,$add653,$xor816);
   $add653$sink524 = $add653;
  }
 } while(0);
 $cmp818 = ($add653$sink524|0)<($w|0);
 $w$add653 = $cmp818 ? $w : $add653$sink524;
 STACKTOP = sp;return ($w$add653|0);
}
function _pop_arg_long_double($arg,$ap) {
 $arg = $arg|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 8|0);
 $expanded1 = $1;
 $expanded = (($expanded1) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 8|0);
 $expanded5 = $3;
 $expanded4 = (($expanded5) - 1)|0;
 $expanded3 = $expanded4 ^ -1;
 $4 = $2 & $expanded3;
 $5 = $4;
 $6 = +HEAPF64[$5>>3];
 $arglist_next = ((($5)) + 8|0);
 HEAP32[$ap>>2] = $arglist_next;
 HEAPF64[$arg>>3] = $6;
 return;
}
function ___vfprintf_internal($f,$fmt,$ap,$fmt_fp,$pop_arg_long_double) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $fmt_fp = $fmt_fp|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $and11 = 0, $and36 = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call = 0, $call21 = 0, $call2133 = 0, $call6 = 0, $cmp = 0;
 var $cmp5 = 0, $cmp7 = 0, $cond = 0, $internal_buf = 0, $lock = 0, $mode = 0, $nl_arg = 0, $nl_type = 0, $or = 0, $ret$1 = 0, $retval$0 = 0, $spec$select = 0, $spec$select32 = 0, $tobool = 0, $tobool22 = 0, $tobool26 = 0, $tobool37 = 0, $tobool41 = 0, $vacopy_currentptr = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, $write = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $ap2 = sp + 208|0;
 $nl_type = sp + 160|0;
 $nl_arg = sp + 80|0;
 $internal_buf = sp;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $call = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
 $cmp = ($call|0)<(0);
 if ($cmp) {
  $retval$0 = -1;
 } else {
  $lock = ((($f)) + 76|0);
  $0 = HEAP32[$lock>>2]|0;
  $cmp5 = ($0|0)>(-1);
  if ($cmp5) {
   $call6 = (___lockfile($f)|0);
   $cond = $call6;
  } else {
   $cond = 0;
  }
  $1 = HEAP32[$f>>2]|0;
  $and = $1 & 32;
  $mode = ((($f)) + 74|0);
  $2 = HEAP8[$mode>>0]|0;
  $cmp7 = ($2<<24>>24)<(1);
  if ($cmp7) {
   $and11 = $1 & -33;
   HEAP32[$f>>2] = $and11;
  }
  $buf_size = ((($f)) + 48|0);
  $3 = HEAP32[$buf_size>>2]|0;
  $tobool = ($3|0)==(0);
  if ($tobool) {
   $buf = ((($f)) + 44|0);
   $4 = HEAP32[$buf>>2]|0;
   HEAP32[$buf>>2] = $internal_buf;
   $wbase = ((($f)) + 28|0);
   HEAP32[$wbase>>2] = $internal_buf;
   $wpos = ((($f)) + 20|0);
   HEAP32[$wpos>>2] = $internal_buf;
   HEAP32[$buf_size>>2] = 80;
   $add$ptr = ((($internal_buf)) + 80|0);
   $wend = ((($f)) + 16|0);
   HEAP32[$wend>>2] = $add$ptr;
   $call21 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
   $tobool22 = ($4|0)==(0|0);
   if ($tobool22) {
    $ret$1 = $call21;
   } else {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    (FUNCTION_TABLE_iiii[$5 & 255]($f,0,0)|0);
    $6 = HEAP32[$wpos>>2]|0;
    $tobool26 = ($6|0)==(0|0);
    $spec$select = $tobool26 ? -1 : $call21;
    HEAP32[$buf>>2] = $4;
    HEAP32[$buf_size>>2] = 0;
    HEAP32[$wend>>2] = 0;
    HEAP32[$wbase>>2] = 0;
    HEAP32[$wpos>>2] = 0;
    $ret$1 = $spec$select;
   }
  } else {
   $call2133 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
   $ret$1 = $call2133;
  }
  $7 = HEAP32[$f>>2]|0;
  $and36 = $7 & 32;
  $tobool37 = ($and36|0)==(0);
  $spec$select32 = $tobool37 ? $ret$1 : -1;
  $or = $7 | $and;
  HEAP32[$f>>2] = $or;
  $tobool41 = ($cond|0)==(0);
  if (!($tobool41)) {
   ___unlockfile($f);
  }
  $retval$0 = $spec$select32;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 $fmt_fp = $fmt_fp|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $$ = 0, $$lcssa213 = 0, $$pre = 0, $$pre261 = 0, $$pre262 = 0, $$pre263 = 0, $$pre263$pre = 0, $$pre264 = 0, $$pre267 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0;
 var $add = 0, $add$ptr = 0, $add$ptr139 = 0, $add$ptr150 = 0, $add$ptr206 = 0, $add$ptr258 = 0, $add$ptr341 = 0, $add$ptr354 = 0, $add$ptr468 = 0, $add$ptr88 = 0, $add270 = 0, $add323 = 0, $add390 = 0, $add407 = 0, $add436 = 0, $and = 0, $and211 = 0, $and215 = 0, $and217 = 0, $and220 = 0;
 var $and233 = 0, $and250 = 0, $and255 = 0, $and264 = 0, $and290 = 0, $and295 = 0, $and310 = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $argpos$0 = 0, $arrayidx114 = 0, $arrayidx119 = 0, $arrayidx124 = 0, $arrayidx129 = 0, $arrayidx132 = 0, $arrayidx16 = 0, $arrayidx174 = 0;
 var $arrayidx193 = 0, $arrayidx207 = 0, $arrayidx31 = 0, $arrayidx35 = 0, $arrayidx365 = 0, $arrayidx40 = 0, $arrayidx464 = 0, $arrayidx476 = 0, $arrayidx68 = 0, $arrayidx73 = 0, $arrayidx78 = 0, $arrayidx81 = 0, $brmerge = 0, $brmerge235 = 0, $buf = 0, $call = 0, $call104 = 0, $call121 = 0, $call160 = 0, $call33 = 0;
 var $call351 = 0, $call379 = 0, $call406 = 0, $call424 = 0, $call70 = 0, $cmp = 0, $cmp1 = 0, $cmp105 = 0, $cmp111 = 0, $cmp116 = 0, $cmp126 = 0, $cmp13 = 0, $cmp166 = 0, $cmp177 = 0, $cmp18 = 0, $cmp182 = 0, $cmp185 = 0, $cmp212 = 0, $cmp241 = 0, $cmp271 = 0;
 var $cmp307 = 0, $cmp324 = 0, $cmp37 = 0, $cmp372 = 0, $cmp372242 = 0, $cmp380 = 0, $cmp385 = 0, $cmp399 = 0, $cmp399247 = 0, $cmp408 = 0, $cmp416 = 0, $cmp429 = 0, $cmp437 = 0, $cmp461 = 0, $cmp473 = 0, $cmp50 = 0, $cmp50231 = 0, $cmp65 = 0, $cmp75 = 0, $cmp97 = 0;
 var $cnt$0 = 0, $cnt$0$ph = 0, $cnt$1 = 0, $cond = 0, $cond149 = 0, $cond246 = 0, $cond350 = 0, $cond421 = 0, $conv120 = 0, $conv130 = 0, $conv134 = 0, $conv164 = 0, $conv172 = 0, $conv175 = 0, $conv208 = 0, $conv230 = 0, $conv233 = 0, $conv32 = 0, $conv41 = 0, $conv48 = 0;
 var $conv48229 = 0, $conv69 = 0, $conv79 = 0, $conv83 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fl$0$lcssa = 0, $fl$0237 = 0, $fl$1 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0;
 var $i$0217 = 0, $i$0217271 = 0, $i$0243 = 0, $i$1248 = 0, $i$2224 = 0, $i$3221 = 0, $i137 = 0, $i86 = 0, $inc = 0, $inc483 = 0, $incdec$ptr = 0, $incdec$ptr171 = 0, $incdec$ptr23 = 0, $incdec$ptr378 = 0, $incdec$ptr405 = 0, $incdec$ptr45 = 0, $incdec$ptr62 = 0, $incdec$ptr93 = 0, $l$0 = 0, $l$0$ph = 0;
 var $l$0$ph$be = 0, $l10n$0$ph = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $lnot = 0, $lnot$ext = 0, $mb = 0, $or = 0, $or$cond = 0, $or$cond189 = 0, $or$cond190 = 0, $or$cond194 = 0, $or100 = 0, $or247 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$add323 = 0, $p$3 = 0;
 var $p$4269 = 0, $p$5 = 0, $pl$0 = 0, $pl$1 = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$1 = 0, $prefix$2 = 0, $retval$0 = 0, $s = 0, $shl = 0, $shl232 = 0, $shl60 = 0, $shr199 = 0, $spec$select = 0, $spec$select193 = 0, $spec$select195 = 0, $spec$select200 = 0, $spec$select201 = 0, $spec$select202 = 0;
 var $spec$select203 = 0, $spec$select204 = 0, $spec$select205 = 0, $spec$select206 = 0, $spec$select207 = 0, $spec$select208 = 0, $st$0 = 0, $storemerge187$lcssa = 0, $storemerge187236 = 0, $storemerge188 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast356 = 0, $sub$ptr$lhs$cast426$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast268 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast357 = 0, $sub$ptr$rhs$cast427 = 0;
 var $sub$ptr$sub = 0, $sub$ptr$sub269 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub358 = 0, $sub$ptr$sub428 = 0, $sub101 = 0, $sub131 = 0, $sub135 = 0, $sub165 = 0, $sub173 = 0, $sub176 = 0, $sub384 = 0, $sub42 = 0, $sub49 = 0, $sub49230 = 0, $sub49238 = 0, $sub80 = 0, $sub84 = 0, $t$0 = 0, $t$1 = 0;
 var $tobool = 0, $tobool122 = 0, $tobool141 = 0, $tobool179 = 0, $tobool209 = 0, $tobool218 = 0, $tobool25 = 0, $tobool256 = 0, $tobool265 = 0, $tobool28 = 0, $tobool291 = 0, $tobool296 = 0, $tobool315 = 0, $tobool34 = 0, $tobool345 = 0, $tobool352 = 0, $tobool375 = 0, $tobool402 = 0, $tobool454 = 0, $tobool457 = 0;
 var $tobool465 = 0, $tobool477 = 0, $tobool55 = 0, $tobool55234 = 0, $tobool71 = 0, $tobool90 = 0, $trunc = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0244 = 0, $ws$1249 = 0, $xor = 0, $xor444 = 0, $xor452 = 0, $z$0$lcssa = 0, $z$0226 = 0, $z$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $s = sp + 56|0;
 $arg = sp + 40|0;
 $buf = sp;
 $wc = sp + 48|0;
 $mb = sp + 60|0;
 HEAP32[$s>>2] = $fmt;
 $tobool25 = ($f|0)!=(0|0);
 $add$ptr206 = ((($buf)) + 40|0);
 $sub$ptr$lhs$cast318 = $add$ptr206;
 $add$ptr341 = ((($buf)) + 39|0);
 $arrayidx365 = ((($wc)) + 4|0);
 $cnt$0$ph = 0;$l$0$ph = 0;$l10n$0$ph = 0;
 L1: while(1) {
  $cnt$0 = $cnt$0$ph;$l$0 = $l$0$ph;
  while(1) {
   $cmp = ($cnt$0|0)>(-1);
   do {
    if ($cmp) {
     $sub = (2147483647 - ($cnt$0))|0;
     $cmp1 = ($l$0|0)>($sub|0);
     if ($cmp1) {
      $call = (___errno_location()|0);
      HEAP32[$call>>2] = 61;
      $cnt$1 = -1;
      break;
     } else {
      $add = (($l$0) + ($cnt$0))|0;
      $cnt$1 = $add;
      break;
     }
    } else {
     $cnt$1 = $cnt$0;
    }
   } while(0);
   $0 = HEAP32[$s>>2]|0;
   $1 = HEAP8[$0>>0]|0;
   $tobool = ($1<<24>>24)==(0);
   if ($tobool) {
    label = 92;
    break L1;
   }
   $2 = $1;$3 = $0;
   L12: while(1) {
    switch ($2<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $z$0$lcssa = $3;
     break L12;
     break;
    }
    default: {
    }
    }
    $incdec$ptr = ((($3)) + 1|0);
    HEAP32[$s>>2] = $incdec$ptr;
    $$pre = HEAP8[$incdec$ptr>>0]|0;
    $2 = $$pre;$3 = $incdec$ptr;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $4 = $3;$z$0226 = $3;
     while(1) {
      $arrayidx16 = ((($4)) + 1|0);
      $5 = HEAP8[$arrayidx16>>0]|0;
      $cmp18 = ($5<<24>>24)==(37);
      if (!($cmp18)) {
       $z$0$lcssa = $z$0226;
       break L15;
      }
      $incdec$ptr23 = ((($z$0226)) + 1|0);
      $add$ptr = ((($4)) + 2|0);
      HEAP32[$s>>2] = $add$ptr;
      $6 = HEAP8[$add$ptr>>0]|0;
      $cmp13 = ($6<<24>>24)==(37);
      if ($cmp13) {
       $4 = $add$ptr;$z$0226 = $incdec$ptr23;
      } else {
       $z$0$lcssa = $incdec$ptr23;
       break;
      }
     }
    }
   } while(0);
   $sub$ptr$lhs$cast = $z$0$lcssa;
   $sub$ptr$rhs$cast = $0;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   if ($tobool25) {
    _out($f,$0,$sub$ptr$sub);
   }
   $tobool28 = ($sub$ptr$sub|0)==(0);
   if ($tobool28) {
    break;
   } else {
    $cnt$0 = $cnt$1;$l$0 = $sub$ptr$sub;
   }
  }
  $7 = HEAP32[$s>>2]|0;
  $arrayidx31 = ((($7)) + 1|0);
  $8 = HEAP8[$arrayidx31>>0]|0;
  $conv32 = $8 << 24 >> 24;
  $call33 = (_isdigit($conv32)|0);
  $tobool34 = ($call33|0)==(0);
  $$pre261 = HEAP32[$s>>2]|0;
  if ($tobool34) {
   $$sink = 1;$argpos$0 = -1;$l10n$1 = $l10n$0$ph;
  } else {
   $arrayidx35 = ((($$pre261)) + 2|0);
   $9 = HEAP8[$arrayidx35>>0]|0;
   $cmp37 = ($9<<24>>24)==(36);
   if ($cmp37) {
    $arrayidx40 = ((($$pre261)) + 1|0);
    $10 = HEAP8[$arrayidx40>>0]|0;
    $conv41 = $10 << 24 >> 24;
    $sub42 = (($conv41) + -48)|0;
    $$sink = 3;$argpos$0 = $sub42;$l10n$1 = 1;
   } else {
    $$sink = 1;$argpos$0 = -1;$l10n$1 = $l10n$0$ph;
   }
  }
  $incdec$ptr45 = (($$pre261) + ($$sink)|0);
  HEAP32[$s>>2] = $incdec$ptr45;
  $11 = HEAP8[$incdec$ptr45>>0]|0;
  $conv48229 = $11 << 24 >> 24;
  $sub49230 = (($conv48229) + -32)|0;
  $cmp50231 = ($sub49230>>>0)>(31);
  $shl232 = 1 << $sub49230;
  $and233 = $shl232 & 75913;
  $tobool55234 = ($and233|0)==(0);
  $brmerge235 = $cmp50231 | $tobool55234;
  if ($brmerge235) {
   $$lcssa213 = $11;$fl$0$lcssa = 0;$storemerge187$lcssa = $incdec$ptr45;
  } else {
   $fl$0237 = 0;$storemerge187236 = $incdec$ptr45;$sub49238 = $sub49230;
   while(1) {
    $shl60 = 1 << $sub49238;
    $or = $shl60 | $fl$0237;
    $incdec$ptr62 = ((($storemerge187236)) + 1|0);
    HEAP32[$s>>2] = $incdec$ptr62;
    $12 = HEAP8[$incdec$ptr62>>0]|0;
    $conv48 = $12 << 24 >> 24;
    $sub49 = (($conv48) + -32)|0;
    $cmp50 = ($sub49>>>0)>(31);
    $shl = 1 << $sub49;
    $and = $shl & 75913;
    $tobool55 = ($and|0)==(0);
    $brmerge = $cmp50 | $tobool55;
    if ($brmerge) {
     $$lcssa213 = $12;$fl$0$lcssa = $or;$storemerge187$lcssa = $incdec$ptr62;
     break;
    } else {
     $fl$0237 = $or;$storemerge187236 = $incdec$ptr62;$sub49238 = $sub49;
    }
   }
  }
  $cmp65 = ($$lcssa213<<24>>24)==(42);
  if ($cmp65) {
   $arrayidx68 = ((($storemerge187$lcssa)) + 1|0);
   $13 = HEAP8[$arrayidx68>>0]|0;
   $conv69 = $13 << 24 >> 24;
   $call70 = (_isdigit($conv69)|0);
   $tobool71 = ($call70|0)==(0);
   if ($tobool71) {
    label = 27;
   } else {
    $14 = HEAP32[$s>>2]|0;
    $arrayidx73 = ((($14)) + 2|0);
    $15 = HEAP8[$arrayidx73>>0]|0;
    $cmp75 = ($15<<24>>24)==(36);
    if ($cmp75) {
     $arrayidx78 = ((($14)) + 1|0);
     $16 = HEAP8[$arrayidx78>>0]|0;
     $conv79 = $16 << 24 >> 24;
     $sub80 = (($conv79) + -48)|0;
     $arrayidx81 = (($nl_type) + ($sub80<<2)|0);
     HEAP32[$arrayidx81>>2] = 10;
     $17 = HEAP8[$arrayidx78>>0]|0;
     $conv83 = $17 << 24 >> 24;
     $sub84 = (($conv83) + -48)|0;
     $i86 = (($nl_arg) + ($sub84<<3)|0);
     $18 = $i86;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = (($18) + 4)|0;
     $22 = $21;
     $23 = HEAP32[$22>>2]|0;
     $add$ptr88 = ((($14)) + 3|0);
     $l10n$2 = 1;$storemerge188 = $add$ptr88;$w$0 = $20;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $tobool90 = ($l10n$1|0)==(0);
    if (!($tobool90)) {
     $retval$0 = -1;
     break;
    }
    if ($tobool25) {
     $arglist_current = HEAP32[$ap>>2]|0;
     $24 = $arglist_current;
     $25 = ((0) + 4|0);
     $expanded4 = $25;
     $expanded = (($expanded4) - 1)|0;
     $26 = (($24) + ($expanded))|0;
     $27 = ((0) + 4|0);
     $expanded8 = $27;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $28 = $26 & $expanded6;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next = ((($29)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $cond = $30;
    } else {
     $cond = 0;
    }
    $31 = HEAP32[$s>>2]|0;
    $incdec$ptr93 = ((($31)) + 1|0);
    $l10n$2 = 0;$storemerge188 = $incdec$ptr93;$w$0 = $cond;
   }
   HEAP32[$s>>2] = $storemerge188;
   $cmp97 = ($w$0|0)<(0);
   $or100 = $fl$0$lcssa | 8192;
   $sub101 = (0 - ($w$0))|0;
   $spec$select200 = $cmp97 ? $or100 : $fl$0$lcssa;
   $spec$select201 = $cmp97 ? $sub101 : $w$0;
   $33 = $storemerge188;$fl$1 = $spec$select200;$l10n$3 = $l10n$2;$w$1 = $spec$select201;
  } else {
   $call104 = (_getint($s)|0);
   $cmp105 = ($call104|0)<(0);
   if ($cmp105) {
    $retval$0 = -1;
    break;
   }
   $$pre262 = HEAP32[$s>>2]|0;
   $33 = $$pre262;$fl$1 = $fl$0$lcssa;$l10n$3 = $l10n$1;$w$1 = $call104;
  }
  $32 = HEAP8[$33>>0]|0;
  $cmp111 = ($32<<24>>24)==(46);
  do {
   if ($cmp111) {
    $arrayidx114 = ((($33)) + 1|0);
    $34 = HEAP8[$arrayidx114>>0]|0;
    $cmp116 = ($34<<24>>24)==(42);
    if (!($cmp116)) {
     HEAP32[$s>>2] = $arrayidx114;
     $call160 = (_getint($s)|0);
     $$pre263$pre = HEAP32[$s>>2]|0;
     $$pre263 = $$pre263$pre;$p$0 = $call160;
     break;
    }
    $arrayidx119 = ((($33)) + 2|0);
    $35 = HEAP8[$arrayidx119>>0]|0;
    $conv120 = $35 << 24 >> 24;
    $call121 = (_isdigit($conv120)|0);
    $tobool122 = ($call121|0)==(0);
    if (!($tobool122)) {
     $36 = HEAP32[$s>>2]|0;
     $arrayidx124 = ((($36)) + 3|0);
     $37 = HEAP8[$arrayidx124>>0]|0;
     $cmp126 = ($37<<24>>24)==(36);
     if ($cmp126) {
      $arrayidx129 = ((($36)) + 2|0);
      $38 = HEAP8[$arrayidx129>>0]|0;
      $conv130 = $38 << 24 >> 24;
      $sub131 = (($conv130) + -48)|0;
      $arrayidx132 = (($nl_type) + ($sub131<<2)|0);
      HEAP32[$arrayidx132>>2] = 10;
      $39 = HEAP8[$arrayidx129>>0]|0;
      $conv134 = $39 << 24 >> 24;
      $sub135 = (($conv134) + -48)|0;
      $i137 = (($nl_arg) + ($sub135<<3)|0);
      $40 = $i137;
      $41 = $40;
      $42 = HEAP32[$41>>2]|0;
      $43 = (($40) + 4)|0;
      $44 = $43;
      $45 = HEAP32[$44>>2]|0;
      $add$ptr139 = ((($36)) + 4|0);
      HEAP32[$s>>2] = $add$ptr139;
      $$pre263 = $add$ptr139;$p$0 = $42;
      break;
     }
    }
    $tobool141 = ($l10n$3|0)==(0);
    if (!($tobool141)) {
     $retval$0 = -1;
     break L1;
    }
    if ($tobool25) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $46 = $arglist_current2;
     $47 = ((0) + 4|0);
     $expanded11 = $47;
     $expanded10 = (($expanded11) - 1)|0;
     $48 = (($46) + ($expanded10))|0;
     $49 = ((0) + 4|0);
     $expanded15 = $49;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $50 = $48 & $expanded13;
     $51 = $50;
     $52 = HEAP32[$51>>2]|0;
     $arglist_next3 = ((($51)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $cond149 = $52;
    } else {
     $cond149 = 0;
    }
    $53 = HEAP32[$s>>2]|0;
    $add$ptr150 = ((($53)) + 2|0);
    HEAP32[$s>>2] = $add$ptr150;
    $$pre263 = $add$ptr150;$p$0 = $cond149;
   } else {
    $$pre263 = $33;$p$0 = -1;
   }
  } while(0);
  $55 = $$pre263;$st$0 = 0;
  while(1) {
   $54 = HEAP8[$55>>0]|0;
   $conv164 = $54 << 24 >> 24;
   $sub165 = (($conv164) + -65)|0;
   $cmp166 = ($sub165>>>0)>(57);
   if ($cmp166) {
    $retval$0 = -1;
    break L1;
   }
   $incdec$ptr171 = ((($55)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr171;
   $56 = HEAP8[$55>>0]|0;
   $conv172 = $56 << 24 >> 24;
   $sub173 = (($conv172) + -65)|0;
   $arrayidx174 = ((127504 + (($st$0*58)|0)|0) + ($sub173)|0);
   $57 = HEAP8[$arrayidx174>>0]|0;
   $conv175 = $57&255;
   $sub176 = (($conv175) + -1)|0;
   $cmp177 = ($sub176>>>0)<(8);
   if ($cmp177) {
    $55 = $incdec$ptr171;$st$0 = $conv175;
   } else {
    break;
   }
  }
  $tobool179 = ($57<<24>>24)==(0);
  if ($tobool179) {
   $retval$0 = -1;
   break;
  }
  $cmp182 = ($57<<24>>24)==(19);
  $cmp185 = ($argpos$0|0)>(-1);
  do {
   if ($cmp182) {
    if ($cmp185) {
     $retval$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($cmp185) {
     $arrayidx193 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$arrayidx193>>2] = $conv175;
     $58 = (($nl_arg) + ($argpos$0<<3)|0);
     $59 = $58;
     $60 = $59;
     $61 = HEAP32[$60>>2]|0;
     $62 = (($59) + 4)|0;
     $63 = $62;
     $64 = HEAP32[$63>>2]|0;
     $65 = $arg;
     $66 = $65;
     HEAP32[$66>>2] = $61;
     $67 = (($65) + 4)|0;
     $68 = $67;
     HEAP32[$68>>2] = $64;
     label = 54;
     break;
    }
    if (!($tobool25)) {
     $retval$0 = 0;
     break L1;
    }
    _pop_arg($arg,$conv175,$ap,$pop_arg_long_double);
    $$pre264 = HEAP32[$s>>2]|0;
    $69 = $$pre264;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($tobool25) {
    $69 = $incdec$ptr171;
    label = 55;
   } else {
    $l$0$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $arrayidx207 = ((($69)) + -1|0);
    $70 = HEAP8[$arrayidx207>>0]|0;
    $conv208 = $70 << 24 >> 24;
    $tobool209 = ($st$0|0)!=(0);
    $and211 = $conv208 & 15;
    $cmp212 = ($and211|0)==(3);
    $or$cond189 = $tobool209 & $cmp212;
    $and215 = $conv208 & -33;
    $t$0 = $or$cond189 ? $and215 : $conv208;
    $and217 = $fl$1 & 8192;
    $tobool218 = ($and217|0)==(0);
    $and220 = $fl$1 & -65537;
    $spec$select = $tobool218 ? $fl$1 : $and220;
    L79: do {
     switch ($t$0|0) {
     case 110:  {
      $trunc = $st$0&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $77 = HEAP32[$arg>>2]|0;
       HEAP32[$77>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $78 = HEAP32[$arg>>2]|0;
       HEAP32[$78>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $79 = ($cnt$1|0)<(0);
       $80 = $79 << 31 >> 31;
       $81 = HEAP32[$arg>>2]|0;
       $82 = $81;
       $83 = $82;
       HEAP32[$83>>2] = $cnt$1;
       $84 = (($82) + 4)|0;
       $85 = $84;
       HEAP32[$85>>2] = $80;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $conv230 = $cnt$1&65535;
       $86 = HEAP32[$arg>>2]|0;
       HEAP16[$86>>1] = $conv230;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $conv233 = $cnt$1&255;
       $87 = HEAP32[$arg>>2]|0;
       HEAP8[$87>>0] = $conv233;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $88 = HEAP32[$arg>>2]|0;
       HEAP32[$88>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $89 = ($cnt$1|0)<(0);
       $90 = $89 << 31 >> 31;
       $91 = HEAP32[$arg>>2]|0;
       $92 = $91;
       $93 = $92;
       HEAP32[$93>>2] = $cnt$1;
       $94 = (($92) + 4)|0;
       $95 = $94;
       HEAP32[$95>>2] = $90;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $l$0$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $cmp241 = ($p$0>>>0)>(8);
      $cond246 = $cmp241 ? $p$0 : 8;
      $or247 = $spec$select | 8;
      $fl$3 = $or247;$p$1 = $cond246;$t$1 = 120;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $fl$3 = $spec$select;$p$1 = $p$0;$t$1 = $t$0;
      label = 67;
      break;
     }
     case 111:  {
      $112 = $arg;
      $113 = $112;
      $114 = HEAP32[$113>>2]|0;
      $115 = (($112) + 4)|0;
      $116 = $115;
      $117 = HEAP32[$116>>2]|0;
      $118 = (_fmt_o($114,$117,$add$ptr206)|0);
      $and264 = $spec$select & 8;
      $tobool265 = ($and264|0)==(0);
      $sub$ptr$rhs$cast268 = $118;
      $sub$ptr$sub269 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast268))|0;
      $cmp271 = ($p$0|0)>($sub$ptr$sub269|0);
      $add270 = (($sub$ptr$sub269) + 1)|0;
      $119 = $tobool265 | $cmp271;
      $spec$select204 = $119 ? $p$0 : $add270;
      $a$0 = $118;$fl$4 = $spec$select;$p$2 = $spec$select204;$pl$1 = 0;$prefix$1 = 158503;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $120 = $arg;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ($125|0)<(0);
      if ($126) {
       $127 = (_i64Subtract(0,0,($122|0),($125|0))|0);
       $128 = (getTempRet0() | 0);
       $129 = $arg;
       $130 = $129;
       HEAP32[$130>>2] = $127;
       $131 = (($129) + 4)|0;
       $132 = $131;
       HEAP32[$132>>2] = $128;
       $135 = $127;$136 = $128;$pl$0 = 1;$prefix$0 = 158503;
       label = 72;
       break L79;
      } else {
       $and290 = $spec$select & 2048;
       $tobool291 = ($and290|0)==(0);
       $and295 = $spec$select & 1;
       $tobool296 = ($and295|0)==(0);
       $$ = $tobool296 ? 158503 : (158505);
       $spec$select205 = $tobool291 ? $$ : (158504);
       $133 = $spec$select & 2049;
       $134 = ($133|0)!=(0);
       $spec$select206 = $134&1;
       $135 = $122;$136 = $125;$pl$0 = $spec$select206;$prefix$0 = $spec$select205;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $71 = $arg;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) + 4)|0;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $135 = $73;$136 = $76;$pl$0 = 0;$prefix$0 = 158503;
      label = 72;
      break;
     }
     case 99:  {
      $147 = $arg;
      $148 = $147;
      $149 = HEAP32[$148>>2]|0;
      $150 = (($147) + 4)|0;
      $151 = $150;
      $152 = HEAP32[$151>>2]|0;
      $153 = $149&255;
      HEAP8[$add$ptr341>>0] = $153;
      $a$1 = $add$ptr341;$fl$6 = $and220;$p$5 = 1;$pl$2 = 0;$prefix$2 = 158503;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
      break;
     }
     case 115:  {
      $154 = HEAP32[$arg>>2]|0;
      $tobool345 = ($154|0)==(0|0);
      $cond350 = $tobool345 ? 158513 : $154;
      $call351 = (_memchr($cond350,0,$p$0)|0);
      $tobool352 = ($call351|0)==(0|0);
      $sub$ptr$lhs$cast356 = $call351;
      $sub$ptr$rhs$cast357 = $cond350;
      $sub$ptr$sub358 = (($sub$ptr$lhs$cast356) - ($sub$ptr$rhs$cast357))|0;
      $add$ptr354 = (($cond350) + ($p$0)|0);
      $p$3 = $tobool352 ? $p$0 : $sub$ptr$sub358;
      $z$1 = $tobool352 ? $add$ptr354 : $call351;
      $$pre267 = $z$1;
      $a$1 = $cond350;$fl$6 = $and220;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 158503;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $$pre267;
      break;
     }
     case 67:  {
      $155 = $arg;
      $156 = $155;
      $157 = HEAP32[$156>>2]|0;
      $158 = (($155) + 4)|0;
      $159 = $158;
      $160 = HEAP32[$159>>2]|0;
      HEAP32[$wc>>2] = $157;
      HEAP32[$arrayidx365>>2] = 0;
      HEAP32[$arg>>2] = $wc;
      $p$4269 = -1;
      label = 79;
      break;
     }
     case 83:  {
      $cmp372242 = ($p$0|0)==(0);
      if ($cmp372242) {
       _pad_636($f,32,$w$1,0,$spec$select);
       $i$0217271 = 0;
       label = 89;
      } else {
       $p$4269 = $p$0;
       label = 79;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $165 = +HEAPF64[$arg>>3];
      $call424 = (FUNCTION_TABLE_iidiiii[$fmt_fp & 255]($f,$165,$w$1,$p$0,$spec$select,$t$0)|0);
      $l$0$ph$be = $call424;
      break L77;
      break;
     }
     default: {
      $a$1 = $0;$fl$6 = $spec$select;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 158503;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
     }
     }
    } while(0);
    L102: do {
     if ((label|0) == 67) {
      label = 0;
      $96 = $arg;
      $97 = $96;
      $98 = HEAP32[$97>>2]|0;
      $99 = (($96) + 4)|0;
      $100 = $99;
      $101 = HEAP32[$100>>2]|0;
      $and250 = $t$1 & 32;
      $102 = (_fmt_x($98,$101,$add$ptr206,$and250)|0);
      $103 = $arg;
      $104 = $103;
      $105 = HEAP32[$104>>2]|0;
      $106 = (($103) + 4)|0;
      $107 = $106;
      $108 = HEAP32[$107>>2]|0;
      $109 = ($105|0)==(0);
      $110 = ($108|0)==(0);
      $111 = $109 & $110;
      $and255 = $fl$3 & 8;
      $tobool256 = ($and255|0)==(0);
      $or$cond190 = $tobool256 | $111;
      $shr199 = $t$1 >>> 4;
      $add$ptr258 = (158503 + ($shr199)|0);
      $spec$select202 = $or$cond190 ? 158503 : $add$ptr258;
      $spec$select203 = $or$cond190 ? 0 : 2;
      $a$0 = $102;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = $spec$select203;$prefix$1 = $spec$select202;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $137 = (_fmt_u($135,$136,$add$ptr206)|0);
      $a$0 = $137;$fl$4 = $spec$select;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
      label = 73;
     }
     else if ((label|0) == 79) {
      label = 0;
      $161 = HEAP32[$arg>>2]|0;
      $i$0243 = 0;$ws$0244 = $161;
      while(1) {
       $162 = HEAP32[$ws$0244>>2]|0;
       $tobool375 = ($162|0)==(0);
       if ($tobool375) {
        $i$0217 = $i$0243;
        break;
       }
       $call379 = (_wctomb($mb,$162)|0);
       $cmp380 = ($call379|0)<(0);
       $sub384 = (($p$4269) - ($i$0243))|0;
       $cmp385 = ($call379>>>0)>($sub384>>>0);
       $or$cond194 = $cmp380 | $cmp385;
       if ($or$cond194) {
        label = 83;
        break;
       }
       $incdec$ptr378 = ((($ws$0244)) + 4|0);
       $add390 = (($call379) + ($i$0243))|0;
       $cmp372 = ($p$4269>>>0)>($add390>>>0);
       if ($cmp372) {
        $i$0243 = $add390;$ws$0244 = $incdec$ptr378;
       } else {
        $i$0217 = $add390;
        break;
       }
      }
      if ((label|0) == 83) {
       label = 0;
       if ($cmp380) {
        $retval$0 = -1;
        break L1;
       } else {
        $i$0217 = $i$0243;
       }
      }
      _pad_636($f,32,$w$1,$i$0217,$spec$select);
      $cmp399247 = ($i$0217|0)==(0);
      if ($cmp399247) {
       $i$0217271 = 0;
       label = 89;
      } else {
       $163 = HEAP32[$arg>>2]|0;
       $i$1248 = 0;$ws$1249 = $163;
       while(1) {
        $164 = HEAP32[$ws$1249>>2]|0;
        $tobool402 = ($164|0)==(0);
        if ($tobool402) {
         $i$0217271 = $i$0217;
         label = 89;
         break L102;
        }
        $call406 = (_wctomb($mb,$164)|0);
        $add407 = (($call406) + ($i$1248))|0;
        $cmp408 = ($add407|0)>($i$0217|0);
        if ($cmp408) {
         $i$0217271 = $i$0217;
         label = 89;
         break L102;
        }
        $incdec$ptr405 = ((($ws$1249)) + 4|0);
        _out($f,$mb,$call406);
        $cmp399 = ($add407>>>0)<($i$0217>>>0);
        if ($cmp399) {
         $i$1248 = $add407;$ws$1249 = $incdec$ptr405;
        } else {
         $i$0217271 = $i$0217;
         label = 89;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $cmp307 = ($p$2|0)>(-1);
     $and310 = $fl$4 & -65537;
     $spec$select193 = $cmp307 ? $and310 : $fl$4;
     $138 = $arg;
     $139 = $138;
     $140 = HEAP32[$139>>2]|0;
     $141 = (($138) + 4)|0;
     $142 = $141;
     $143 = HEAP32[$142>>2]|0;
     $144 = ($140|0)!=(0);
     $145 = ($143|0)!=(0);
     $146 = $144 | $145;
     $tobool315 = ($p$2|0)!=(0);
     $or$cond = $tobool315 | $146;
     $sub$ptr$rhs$cast319 = $a$0;
     $sub$ptr$sub320 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast319))|0;
     $lnot = $146 ^ 1;
     $lnot$ext = $lnot&1;
     $add323 = (($sub$ptr$sub320) + ($lnot$ext))|0;
     $cmp324 = ($p$2|0)>($add323|0);
     $p$2$add323 = $cmp324 ? $p$2 : $add323;
     $spec$select207 = $or$cond ? $p$2$add323 : 0;
     $spec$select208 = $or$cond ? $a$0 : $add$ptr206;
     $a$1 = $spec$select208;$fl$6 = $spec$select193;$p$5 = $spec$select207;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
    }
    else if ((label|0) == 89) {
     label = 0;
     $xor = $spec$select ^ 8192;
     _pad_636($f,32,$w$1,$i$0217271,$xor);
     $cmp416 = ($w$1|0)>($i$0217271|0);
     $cond421 = $cmp416 ? $w$1 : $i$0217271;
     $l$0$ph$be = $cond421;
     break;
    }
    $sub$ptr$rhs$cast427 = $a$1;
    $sub$ptr$sub428 = (($sub$ptr$lhs$cast426$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast427))|0;
    $cmp429 = ($p$5|0)<($sub$ptr$sub428|0);
    $spec$select195 = $cmp429 ? $sub$ptr$sub428 : $p$5;
    $add436 = (($spec$select195) + ($pl$2))|0;
    $cmp437 = ($w$1|0)<($add436|0);
    $w$2 = $cmp437 ? $add436 : $w$1;
    _pad_636($f,32,$w$2,$add436,$fl$6);
    _out($f,$prefix$2,$pl$2);
    $xor444 = $fl$6 ^ 65536;
    _pad_636($f,48,$w$2,$add436,$xor444);
    _pad_636($f,48,$spec$select195,$sub$ptr$sub428,0);
    _out($f,$a$1,$sub$ptr$sub428);
    $xor452 = $fl$6 ^ 8192;
    _pad_636($f,32,$w$2,$add436,$xor452);
    $l$0$ph$be = $w$2;
   }
  } while(0);
  $cnt$0$ph = $cnt$1;$l$0$ph = $l$0$ph$be;$l10n$0$ph = $l10n$3;
 }
 L123: do {
  if ((label|0) == 92) {
   $tobool454 = ($f|0)==(0|0);
   if ($tobool454) {
    $tobool457 = ($l10n$0$ph|0)==(0);
    if ($tobool457) {
     $retval$0 = 0;
    } else {
     $i$2224 = 1;
     while(1) {
      $arrayidx464 = (($nl_type) + ($i$2224<<2)|0);
      $166 = HEAP32[$arrayidx464>>2]|0;
      $tobool465 = ($166|0)==(0);
      if ($tobool465) {
       break;
      }
      $add$ptr468 = (($nl_arg) + ($i$2224<<3)|0);
      _pop_arg($add$ptr468,$166,$ap,$pop_arg_long_double);
      $inc = (($i$2224) + 1)|0;
      $cmp461 = ($inc>>>0)<(10);
      if ($cmp461) {
       $i$2224 = $inc;
      } else {
       $retval$0 = 1;
       break L123;
      }
     }
     $i$3221 = $i$2224;
     while(1) {
      $arrayidx476 = (($nl_type) + ($i$3221<<2)|0);
      $167 = HEAP32[$arrayidx476>>2]|0;
      $tobool477 = ($167|0)==(0);
      $inc483 = (($i$3221) + 1)|0;
      if (!($tobool477)) {
       $retval$0 = -1;
       break L123;
      }
      $cmp473 = ($inc483>>>0)<(10);
      if ($cmp473) {
       $i$3221 = $inc483;
      } else {
       $retval$0 = 1;
       break;
      }
     }
    }
   } else {
    $retval$0 = $cnt$1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $and = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $and = $0 & 32;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  (___fwritex($s,$l,$f)|0);
 }
 return;
}
function _getint($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add = 0, $call = 0, $call5 = 0, $conv = 0, $conv1 = 0, $conv4 = 0, $i$0$lcssa = 0, $i$07 = 0, $incdec$ptr = 0, $mul = 0, $sub = 0, $tobool = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $conv4 = $1 << 24 >> 24;
 $call5 = (_isdigit($conv4)|0);
 $tobool6 = ($call5|0)==(0);
 if ($tobool6) {
  $i$0$lcssa = 0;
 } else {
  $i$07 = 0;
  while(1) {
   $mul = ($i$07*10)|0;
   $2 = HEAP32[$s>>2]|0;
   $3 = HEAP8[$2>>0]|0;
   $conv1 = $3 << 24 >> 24;
   $sub = (($mul) + -48)|0;
   $add = (($sub) + ($conv1))|0;
   $incdec$ptr = ((($2)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr;
   $4 = HEAP8[$incdec$ptr>>0]|0;
   $conv = $4 << 24 >> 24;
   $call = (_isdigit($conv)|0);
   $tobool = ($call|0)==(0);
   if ($tobool) {
    $i$0$lcssa = $add;
    break;
   } else {
    $i$07 = $add;
   }
  }
 }
 return ($i$0$lcssa|0);
}
function _pop_arg($arg,$type,$ap,$pop_arg_long_double) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next3 = 0;
 var $arglist_next6 = 0, $arglist_next9 = 0, $cmp = 0, $conv16 = 0, $conv22$mask = 0, $conv28 = 0, $conv34$mask = 0, $expanded = 0, $expanded25 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0;
 var $expanded42 = 0, $expanded43 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0;
 var $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($type>>>0)>(20);
 L1: do {
  if (!($cmp)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $0 = $arglist_current;
     $1 = ((0) + 4|0);
     $expanded25 = $1;
     $expanded = (($expanded25) - 1)|0;
     $2 = (($0) + ($expanded))|0;
     $3 = ((0) + 4|0);
     $expanded29 = $3;
     $expanded28 = (($expanded29) - 1)|0;
     $expanded27 = $expanded28 ^ -1;
     $4 = $2 & $expanded27;
     $5 = $4;
     $6 = HEAP32[$5>>2]|0;
     $arglist_next = ((($5)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $6;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $7 = $arglist_current2;
     $8 = ((0) + 4|0);
     $expanded32 = $8;
     $expanded31 = (($expanded32) - 1)|0;
     $9 = (($7) + ($expanded31))|0;
     $10 = ((0) + 4|0);
     $expanded36 = $10;
     $expanded35 = (($expanded36) - 1)|0;
     $expanded34 = $expanded35 ^ -1;
     $11 = $9 & $expanded34;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $arglist_next3 = ((($12)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $14 = ($13|0)<(0);
     $15 = $14 << 31 >> 31;
     $16 = $arg;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = (($16) + 4)|0;
     $19 = $18;
     HEAP32[$19>>2] = $15;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $20 = $arglist_current5;
     $21 = ((0) + 4|0);
     $expanded39 = $21;
     $expanded38 = (($expanded39) - 1)|0;
     $22 = (($20) + ($expanded38))|0;
     $23 = ((0) + 4|0);
     $expanded43 = $23;
     $expanded42 = (($expanded43) - 1)|0;
     $expanded41 = $expanded42 ^ -1;
     $24 = $22 & $expanded41;
     $25 = $24;
     $26 = HEAP32[$25>>2]|0;
     $arglist_next6 = ((($25)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $27 = $arg;
     $28 = $27;
     HEAP32[$28>>2] = $26;
     $29 = (($27) + 4)|0;
     $30 = $29;
     HEAP32[$30>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $31 = $arglist_current8;
     $32 = ((0) + 8|0);
     $expanded46 = $32;
     $expanded45 = (($expanded46) - 1)|0;
     $33 = (($31) + ($expanded45))|0;
     $34 = ((0) + 8|0);
     $expanded50 = $34;
     $expanded49 = (($expanded50) - 1)|0;
     $expanded48 = $expanded49 ^ -1;
     $35 = $33 & $expanded48;
     $36 = $35;
     $37 = $36;
     $38 = $37;
     $39 = HEAP32[$38>>2]|0;
     $40 = (($37) + 4)|0;
     $41 = $40;
     $42 = HEAP32[$41>>2]|0;
     $arglist_next9 = ((($36)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $43 = $arg;
     $44 = $43;
     HEAP32[$44>>2] = $39;
     $45 = (($43) + 4)|0;
     $46 = $45;
     HEAP32[$46>>2] = $42;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $47 = $arglist_current11;
     $48 = ((0) + 4|0);
     $expanded53 = $48;
     $expanded52 = (($expanded53) - 1)|0;
     $49 = (($47) + ($expanded52))|0;
     $50 = ((0) + 4|0);
     $expanded57 = $50;
     $expanded56 = (($expanded57) - 1)|0;
     $expanded55 = $expanded56 ^ -1;
     $51 = $49 & $expanded55;
     $52 = $51;
     $53 = HEAP32[$52>>2]|0;
     $arglist_next12 = ((($52)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $conv16 = $53&65535;
     $54 = $conv16 << 16 >> 16;
     $55 = ($54|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = $arg;
     $58 = $57;
     HEAP32[$58>>2] = $54;
     $59 = (($57) + 4)|0;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $61 = $arglist_current14;
     $62 = ((0) + 4|0);
     $expanded60 = $62;
     $expanded59 = (($expanded60) - 1)|0;
     $63 = (($61) + ($expanded59))|0;
     $64 = ((0) + 4|0);
     $expanded64 = $64;
     $expanded63 = (($expanded64) - 1)|0;
     $expanded62 = $expanded63 ^ -1;
     $65 = $63 & $expanded62;
     $66 = $65;
     $67 = HEAP32[$66>>2]|0;
     $arglist_next15 = ((($66)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $conv22$mask = $67 & 65535;
     $68 = $arg;
     $69 = $68;
     HEAP32[$69>>2] = $conv22$mask;
     $70 = (($68) + 4)|0;
     $71 = $70;
     HEAP32[$71>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $72 = $arglist_current17;
     $73 = ((0) + 4|0);
     $expanded67 = $73;
     $expanded66 = (($expanded67) - 1)|0;
     $74 = (($72) + ($expanded66))|0;
     $75 = ((0) + 4|0);
     $expanded71 = $75;
     $expanded70 = (($expanded71) - 1)|0;
     $expanded69 = $expanded70 ^ -1;
     $76 = $74 & $expanded69;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $arglist_next18 = ((($77)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $conv28 = $78&255;
     $79 = $conv28 << 24 >> 24;
     $80 = ($79|0)<(0);
     $81 = $80 << 31 >> 31;
     $82 = $arg;
     $83 = $82;
     HEAP32[$83>>2] = $79;
     $84 = (($82) + 4)|0;
     $85 = $84;
     HEAP32[$85>>2] = $81;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $86 = $arglist_current20;
     $87 = ((0) + 4|0);
     $expanded74 = $87;
     $expanded73 = (($expanded74) - 1)|0;
     $88 = (($86) + ($expanded73))|0;
     $89 = ((0) + 4|0);
     $expanded78 = $89;
     $expanded77 = (($expanded78) - 1)|0;
     $expanded76 = $expanded77 ^ -1;
     $90 = $88 & $expanded76;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next21 = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $conv34$mask = $92 & 255;
     $93 = $arg;
     $94 = $93;
     HEAP32[$94>>2] = $conv34$mask;
     $95 = (($93) + 4)|0;
     $96 = $95;
     HEAP32[$96>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $97 = $arglist_current23;
     $98 = ((0) + 8|0);
     $expanded81 = $98;
     $expanded80 = (($expanded81) - 1)|0;
     $99 = (($97) + ($expanded80))|0;
     $100 = ((0) + 8|0);
     $expanded85 = $100;
     $expanded84 = (($expanded85) - 1)|0;
     $expanded83 = $expanded84 ^ -1;
     $101 = $99 & $expanded83;
     $102 = $101;
     $103 = +HEAPF64[$102>>3];
     $arglist_next24 = ((($102)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $103;
     break L1;
     break;
    }
    case 18:  {
     FUNCTION_TABLE_vii[$pop_arg_long_double & 255]($arg,$ap);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$s,$lower) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 $lower = $lower|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $conv1 = 0, $conv4 = 0, $idxprom = 0, $incdec$ptr = 0, $or = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $5 = $0;$7 = $1;$s$addr$06 = $s;
  while(1) {
   $idxprom = $5 & 15;
   $arrayidx = (127968 + ($idxprom)|0);
   $6 = HEAP8[$arrayidx>>0]|0;
   $conv4 = $6&255;
   $or = $conv4 | $lower;
   $conv1 = $or&255;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv1;
   $8 = (_bitshift64Lshr(($5|0),($7|0),4)|0);
   $9 = (getTempRet0() | 0);
   $10 = ($8|0)==(0);
   $11 = ($9|0)==(0);
   $12 = $10 & $11;
   if ($12) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $5 = $8;$7 = $9;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_o($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conv = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $6 = $0;$8 = $1;$s$addr$06 = $s;
  while(1) {
   $5 = $6&255;
   $7 = $5 & 7;
   $conv = $7 | 48;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $9 = (_bitshift64Lshr(($6|0),($8|0),3)|0);
   $10 = (getTempRet0() | 0);
   $11 = ($9|0)==(0);
   $12 = ($10|0)==(0);
   $13 = $11 & $12;
   if ($13) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $6 = $9;$8 = $10;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add5 = 0, $conv = 0, $conv6 = 0, $div9 = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $s$addr$1$lcssa = 0, $s$addr$19 = 0, $tobool8 = 0, $x$addr$0$lcssa$off0 = 0, $y$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $7 = $0;$8 = $1;$s$addr$013 = $s;
  while(1) {
   $9 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $10 = (getTempRet0() | 0);
   $11 = (___muldi3(($9|0),($10|0),10,0)|0);
   $12 = (getTempRet0() | 0);
   $13 = (_i64Subtract(($7|0),($8|0),($11|0),($12|0))|0);
   $14 = (getTempRet0() | 0);
   $15 = $13&255;
   $conv = $15 | 48;
   $incdec$ptr = ((($s$addr$013)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $7 = $9;$8 = $10;$s$addr$013 = $incdec$ptr;
   } else {
    break;
   }
  }
  $s$addr$0$lcssa = $incdec$ptr;$x$addr$0$lcssa$off0 = $9;
 } else {
  $s$addr$0$lcssa = $s;$x$addr$0$lcssa$off0 = $0;
 }
 $tobool8 = ($x$addr$0$lcssa$off0|0)==(0);
 if ($tobool8) {
  $s$addr$1$lcssa = $s$addr$0$lcssa;
 } else {
  $s$addr$19 = $s$addr$0$lcssa;$y$010 = $x$addr$0$lcssa$off0;
  while(1) {
   $div9 = (($y$010>>>0) / 10)&-1;
   $21 = ($div9*10)|0;
   $22 = (($y$010) - ($21))|0;
   $add5 = $22 | 48;
   $conv6 = $add5&255;
   $incdec$ptr7 = ((($s$addr$19)) + -1|0);
   HEAP8[$incdec$ptr7>>0] = $conv6;
   $23 = ($y$010>>>0)<(10);
   if ($23) {
    $s$addr$1$lcssa = $incdec$ptr7;
    break;
   } else {
    $s$addr$19 = $incdec$ptr7;$y$010 = $div9;
   }
  }
 }
 return ($s$addr$1$lcssa|0);
}
function _pad_636($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $cmp = 0, $cmp3 = 0, $cmp38 = 0, $cond = 0, $conv = 0, $l$addr$0$lcssa = 0, $l$addr$09 = 0, $or$cond = 0, $pad = 0, $sub = 0, $sub6 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $pad = sp;
 $and = $fl & 73728;
 $tobool = ($and|0)==(0);
 $cmp = ($w|0)>($l|0);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  $sub = (($w) - ($l))|0;
  $conv = $c << 24 >> 24;
  $0 = ($sub>>>0)<(256);
  $cond = $0 ? $sub : 256;
  (_memset(($pad|0),($conv|0),($cond|0))|0);
  $cmp38 = ($sub>>>0)>(255);
  if ($cmp38) {
   $1 = (($w) - ($l))|0;
   $l$addr$09 = $sub;
   while(1) {
    _out($f,$pad,256);
    $sub6 = (($l$addr$09) + -256)|0;
    $cmp3 = ($sub6>>>0)>(255);
    if ($cmp3) {
     $l$addr$09 = $sub6;
    } else {
     break;
    }
   }
   $2 = $1 & 255;
   $l$addr$0$lcssa = $2;
  } else {
   $l$addr$0$lcssa = $sub;
  }
  _out($f,$pad,$l$addr$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call = (_wcrtomb($s,$wc,0)|0);
  $retval$0 = $call;
 }
 return ($retval$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and32 = 0, $and36 = 0, $and49 = 0, $and54 = 0, $and58 = 0, $call = 0, $call10 = 0, $call66 = 0, $cmp = 0;
 var $cmp14 = 0, $cmp21 = 0, $cmp24 = 0, $cmp41 = 0, $cmp7 = 0, $conv = 0, $conv12 = 0, $conv17 = 0, $conv19 = 0, $conv29 = 0, $conv34 = 0, $conv38 = 0, $conv46 = 0, $conv51 = 0, $conv56 = 0, $conv60 = 0, $incdec$ptr = 0, $incdec$ptr30 = 0, $incdec$ptr35 = 0, $incdec$ptr47 = 0;
 var $incdec$ptr52 = 0, $incdec$ptr57 = 0, $locale = 0, $or = 0, $or$cond = 0, $or18 = 0, $or28 = 0, $or33 = 0, $or37 = 0, $or45 = 0, $or50 = 0, $or55 = 0, $or59 = 0, $retval$0 = 0, $sub40 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 do {
  if ($tobool) {
   $retval$0 = 1;
  } else {
   $cmp = ($wc>>>0)<(128);
   if ($cmp) {
    $conv = $wc&255;
    HEAP8[$s>>0] = $conv;
    $retval$0 = 1;
    break;
   }
   $call = (___pthread_self_137()|0);
   $locale = ((($call)) + 176|0);
   $0 = HEAP32[$locale>>2]|0;
   $1 = HEAP32[$0>>2]|0;
   $tobool2 = ($1|0)==(0|0);
   if ($tobool2) {
    $2 = $wc & -128;
    $cmp7 = ($2|0)==(57216);
    if ($cmp7) {
     $conv12 = $wc&255;
     HEAP8[$s>>0] = $conv12;
     $retval$0 = 1;
     break;
    } else {
     $call10 = (___errno_location()|0);
     HEAP32[$call10>>2] = 25;
     $retval$0 = -1;
     break;
    }
   }
   $cmp14 = ($wc>>>0)<(2048);
   if ($cmp14) {
    $3 = $wc >>> 6;
    $or = $3 | 192;
    $conv17 = $or&255;
    $incdec$ptr = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv17;
    $and = $wc & 63;
    $or18 = $and | 128;
    $conv19 = $or18&255;
    HEAP8[$incdec$ptr>>0] = $conv19;
    $retval$0 = 2;
    break;
   }
   $cmp21 = ($wc>>>0)<(55296);
   $4 = $wc & -8192;
   $cmp24 = ($4|0)==(57344);
   $or$cond = $cmp21 | $cmp24;
   if ($or$cond) {
    $5 = $wc >>> 12;
    $or28 = $5 | 224;
    $conv29 = $or28&255;
    $incdec$ptr30 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv29;
    $6 = $wc >>> 6;
    $and32 = $6 & 63;
    $or33 = $and32 | 128;
    $conv34 = $or33&255;
    $incdec$ptr35 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr30>>0] = $conv34;
    $and36 = $wc & 63;
    $or37 = $and36 | 128;
    $conv38 = $or37&255;
    HEAP8[$incdec$ptr35>>0] = $conv38;
    $retval$0 = 3;
    break;
   }
   $sub40 = (($wc) + -65536)|0;
   $cmp41 = ($sub40>>>0)<(1048576);
   if ($cmp41) {
    $7 = $wc >>> 18;
    $or45 = $7 | 240;
    $conv46 = $or45&255;
    $incdec$ptr47 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv46;
    $8 = $wc >>> 12;
    $and49 = $8 & 63;
    $or50 = $and49 | 128;
    $conv51 = $or50&255;
    $incdec$ptr52 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr47>>0] = $conv51;
    $9 = $wc >>> 6;
    $and54 = $9 & 63;
    $or55 = $and54 | 128;
    $conv56 = $or55&255;
    $incdec$ptr57 = ((($s)) + 3|0);
    HEAP8[$incdec$ptr52>>0] = $conv56;
    $and58 = $wc & 63;
    $or59 = $and58 | 128;
    $conv60 = $or59&255;
    HEAP8[$incdec$ptr57>>0] = $conv60;
    $retval$0 = 4;
    break;
   } else {
    $call66 = (___errno_location()|0);
    HEAP32[$call66>>2] = 25;
    $retval$0 = -1;
    break;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___pthread_self_137() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$pre = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr27 = 0, $arrayidx = 0, $call = 0, $call16 = 0, $call4 = 0;
 var $cmp = 0, $cmp11 = 0, $cmp17 = 0, $cmp6 = 0, $i$033 = 0, $i$1 = 0, $l$addr$0 = 0, $l$addr$1 = 0, $lbf = 0, $or$cond = 0, $retval$1 = 0, $s$addr$1 = 0, $sub = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool1 = 0, $tobool9 = 0, $tobool932 = 0, $wend = 0, $wpos = 0;
 var $write = 0, $write15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $3 = $$pre;
   label = 5;
  } else {
   $retval$1 = 0;
  }
 } else {
  $1 = $0;
  $3 = $1;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $wpos = ((($f)) + 20|0);
   $2 = HEAP32[$wpos>>2]|0;
   $sub$ptr$sub = (($3) - ($2))|0;
   $cmp = ($sub$ptr$sub>>>0)<($l>>>0);
   $4 = $2;
   if ($cmp) {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    $call4 = (FUNCTION_TABLE_iiii[$5 & 255]($f,$s,$l)|0);
    $retval$1 = $call4;
    break;
   }
   $lbf = ((($f)) + 75|0);
   $6 = HEAP8[$lbf>>0]|0;
   $cmp6 = ($6<<24>>24)<(0);
   $tobool932 = ($l|0)==(0);
   $or$cond = $cmp6 | $tobool932;
   L10: do {
    if ($or$cond) {
     $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
    } else {
     $i$033 = $l;
     while(1) {
      $sub = (($i$033) + -1)|0;
      $arrayidx = (($s) + ($sub)|0);
      $7 = HEAP8[$arrayidx>>0]|0;
      $cmp11 = ($7<<24>>24)==(10);
      if ($cmp11) {
       break;
      }
      $tobool9 = ($sub|0)==(0);
      if ($tobool9) {
       $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
       break L10;
      } else {
       $i$033 = $sub;
      }
     }
     $write15 = ((($f)) + 36|0);
     $8 = HEAP32[$write15>>2]|0;
     $call16 = (FUNCTION_TABLE_iiii[$8 & 255]($f,$s,$i$033)|0);
     $cmp17 = ($call16>>>0)<($i$033>>>0);
     if ($cmp17) {
      $retval$1 = $call16;
      break L5;
     }
     $add$ptr = (($s) + ($i$033)|0);
     $l$addr$0 = (($l) - ($i$033))|0;
     $$pre35 = HEAP32[$wpos>>2]|0;
     $9 = $$pre35;$i$1 = $i$033;$l$addr$1 = $l$addr$0;$s$addr$1 = $add$ptr;
    }
   } while(0);
   (_memcpy(($9|0),($s$addr$1|0),($l$addr$1|0))|0);
   $10 = HEAP32[$wpos>>2]|0;
   $add$ptr27 = (($10) + ($l$addr$1)|0);
   HEAP32[$wpos>>2] = $add$ptr27;
   $add = (($i$1) + ($l$addr$1))|0;
   $retval$1 = $add;
  }
 } while(0);
 return ($retval$1|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $tobool = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = ((($f)) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 8;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $rend = ((($f)) + 8|0);
  HEAP32[$rend>>2] = 0;
  $rpos = ((($f)) + 4|0);
  HEAP32[$rpos>>2] = 0;
  $buf = ((($f)) + 44|0);
  $2 = HEAP32[$buf>>2]|0;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $2;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $2;
  $3 = $2;
  $buf_size = ((($f)) + 48|0);
  $4 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($3) + ($4)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $retval$0 = 0;
 } else {
  $or5 = $1 | 32;
  HEAP32[$f>>2] = $or5;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function ___DOUBLE_BITS_639($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $__f;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($1) | 0);
 return ($0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $call = 0.0, $conv = 0, $mul = 0.0, $retval$0 = 0.0, $storemerge = 0, $sub = 0, $sub8 = 0, $tobool1 = 0, $trunc$clear = 0, $x$addr$0 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = (getTempRet0() | 0);
 $4 = $2&65535;
 $trunc$clear = $4 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $tobool1 = $x != 0.0;
  if ($tobool1) {
   $mul = $x * 1.8446744073709552E+19;
   $call = (+_frexp($mul,$e));
   $5 = HEAP32[$e>>2]|0;
   $sub = (($5) + -64)|0;
   $storemerge = $sub;$x$addr$0 = $call;
  } else {
   $storemerge = 0;$x$addr$0 = $x;
  }
  HEAP32[$e>>2] = $storemerge;
  $retval$0 = $x$addr$0;
  break;
 }
 case 2047:  {
  $retval$0 = $x;
  break;
 }
 default: {
  $conv = $2 & 2047;
  $sub8 = (($conv) + -1022)|0;
  HEAP32[$e>>2] = $sub8;
  $6 = $1 & -2146435073;
  $7 = $6 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $7;$8 = +HEAPF64[tempDoublePtr>>3];
  $retval$0 = $8;
 }
 }
 return (+$retval$0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $cmp = 0, $spec$select = 0, $sub$ptr$sub = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $cmp = ($sub$ptr$sub>>>0)>($l>>>0);
 $spec$select = $cmp ? $l : $sub$ptr$sub;
 $$cast = $1;
 (_memcpy(($$cast|0),($s|0),($spec$select|0))|0);
 $2 = HEAP32[$wpos>>2]|0;
 $add$ptr = (($2) + ($spec$select)|0);
 HEAP32[$wpos>>2] = $add$ptr;
 return ($l|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $arrayidx38 = 0, $c$036 = 0, $c$2 = 0, $call = 0, $call71 = 0, $cmp = 0, $cmp32 = 0, $cmp65 = 0;
 var $conv = 0, $conv29 = 0, $conv31 = 0, $conv42 = 0, $conv52 = 0, $dec = 0, $dec55 = 0, $dec55$lcssa = 0, $dec5547 = 0, $dec5551 = 0, $dummy = 0, $incdec$ptr = 0, $incdec$ptr5149 = 0, $lnot$ext = 0, $locale = 0, $n$addr$035 = 0, $or = 0, $or54 = 0, $or54$lcssa = 0, $or5446 = 0;
 var $or5450 = 0, $retval$0 = 0, $s$037 = 0, $s$037$pn = 0, $shl = 0, $shl42 = 0, $shr46 = 0, $spec$select = 0, $spec$select32 = 0, $sub = 0, $sub43 = 0, $sub53 = 0, $sub5345 = 0, $sub59 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool13 = 0, $tobool18 = 0, $tobool21 = 0;
 var $tobool3 = 0, $tobool40 = 0, $tobool48 = 0, $tobool57 = 0, $tobool5748 = 0, $tobool6 = 0, $tobool61 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $dummy = sp;
 $tobool = ($st|0)==(0|0);
 $spec$select = $tobool ? 399544 : $st;
 $0 = HEAP32[$spec$select>>2]|0;
 $tobool1 = ($src|0)==(0|0);
 L1: do {
  if ($tobool1) {
   $tobool3 = ($0|0)==(0);
   if ($tobool3) {
    $retval$0 = 0;
   } else {
    label = 19;
   }
  } else {
   $tobool6 = ($wc|0)==(0|0);
   $spec$select32 = $tobool6 ? $dummy : $wc;
   $tobool10 = ($n|0)==(0);
   if ($tobool10) {
    $retval$0 = -2;
   } else {
    $tobool13 = ($0|0)==(0);
    if ($tobool13) {
     $1 = HEAP8[$src>>0]|0;
     $cmp = ($1<<24>>24)>(-1);
     if ($cmp) {
      $conv = $1&255;
      HEAP32[$spec$select32>>2] = $conv;
      $tobool18 = ($1<<24>>24)!=(0);
      $lnot$ext = $tobool18&1;
      $retval$0 = $lnot$ext;
      break;
     }
     $call = (___pthread_self_145()|0);
     $locale = ((($call)) + 176|0);
     $2 = HEAP32[$locale>>2]|0;
     $3 = HEAP32[$2>>2]|0;
     $tobool21 = ($3|0)==(0|0);
     $4 = HEAP8[$src>>0]|0;
     if ($tobool21) {
      $conv29 = $4 << 24 >> 24;
      $and = $conv29 & 57343;
      HEAP32[$spec$select32>>2] = $and;
      $retval$0 = 1;
      break;
     }
     $conv31 = $4&255;
     $sub = (($conv31) + -194)|0;
     $cmp32 = ($sub>>>0)>(50);
     if ($cmp32) {
      label = 19;
      break;
     }
     $incdec$ptr = ((($src)) + 1|0);
     $arrayidx38 = (127024 + ($sub<<2)|0);
     $5 = HEAP32[$arrayidx38>>2]|0;
     $dec = (($n) + -1)|0;
     $tobool40 = ($dec|0)==(0);
     if ($tobool40) {
      $c$2 = $5;
     } else {
      $c$036 = $5;$n$addr$035 = $dec;$s$037 = $incdec$ptr;
      label = 11;
     }
    } else {
     $c$036 = $0;$n$addr$035 = $n;$s$037 = $src;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $6 = HEAP8[$s$037>>0]|0;
      $conv42 = $6&255;
      $7 = $conv42 >>> 3;
      $sub43 = (($7) + -16)|0;
      $shr46 = $c$036 >> 26;
      $add = (($7) + ($shr46))|0;
      $or = $sub43 | $add;
      $tobool48 = ($or>>>0)>(7);
      if ($tobool48) {
       label = 19;
       break L1;
      }
      $shl42 = $c$036 << 6;
      $sub5345 = (($conv42) + -128)|0;
      $or5446 = $sub5345 | $shl42;
      $dec5547 = (($n$addr$035) + -1)|0;
      $tobool5748 = ($or5446|0)<(0);
      if ($tobool5748) {
       $dec5551 = $dec5547;$or5450 = $or5446;$s$037$pn = $s$037;
       while(1) {
        $incdec$ptr5149 = ((($s$037$pn)) + 1|0);
        $tobool61 = ($dec5551|0)==(0);
        if ($tobool61) {
         $c$2 = $or5450;
         break L14;
        }
        $8 = HEAP8[$incdec$ptr5149>>0]|0;
        $9 = $8 & -64;
        $cmp65 = ($9<<24>>24)==(-128);
        if (!($cmp65)) {
         label = 19;
         break L1;
        }
        $shl = $or5450 << 6;
        $conv52 = $8&255;
        $sub53 = (($conv52) + -128)|0;
        $or54 = $sub53 | $shl;
        $dec55 = (($dec5551) + -1)|0;
        $tobool57 = ($or54|0)<(0);
        if ($tobool57) {
         $dec5551 = $dec55;$or5450 = $or54;$s$037$pn = $incdec$ptr5149;
        } else {
         $dec55$lcssa = $dec55;$or54$lcssa = $or54;
         break;
        }
       }
      } else {
       $dec55$lcssa = $dec5547;$or54$lcssa = $or5446;
      }
      HEAP32[$spec$select>>2] = 0;
      HEAP32[$spec$select32>>2] = $or54$lcssa;
      $sub59 = (($n) - ($dec55$lcssa))|0;
      $retval$0 = $sub59;
      break L1;
     }
    } while(0);
    HEAP32[$spec$select>>2] = $c$2;
    $retval$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 19) {
  HEAP32[$spec$select>>2] = 0;
  $call71 = (___errno_location()|0);
  HEAP32[$call71>>2] = 25;
  $retval$0 = -1;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___pthread_self_145() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$pre$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call13 = 0, $call15 = 0, $call8 = 0, $cmp = 0, $cmp9 = 0, $conv = 0, $conv12 = 0, $conv13 = 0, $conv14 = 0, $conv17 = 0, $conv7 = 0;
 var $incdec$ptr = 0, $incdec$ptr11 = 0, $l$015 = 0, $r$0$lcssa = 0, $r$016 = 0, $sub = 0, $tobool = 0, $tobool14 = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l>>0]|0;
 $tobool14 = ($0<<24>>24)==(0);
 L1: do {
  if ($tobool14) {
   $5 = 0;$r$0$lcssa = $_r;
  } else {
   $conv13 = $0&255;
   $2 = $0;$conv17 = $conv13;$l$015 = $_l;$r$016 = $_r;
   while(1) {
    $1 = HEAP8[$r$016>>0]|0;
    $tobool2 = ($1<<24>>24)==(0);
    if ($tobool2) {
     $5 = $2;$r$0$lcssa = $r$016;
     break L1;
    }
    $cmp = ($2<<24>>24)==($1<<24>>24);
    if (!($cmp)) {
     $call = (_tolower($conv17)|0);
     $3 = HEAP8[$r$016>>0]|0;
     $conv7 = $3&255;
     $call8 = (_tolower($conv7)|0);
     $cmp9 = ($call|0)==($call8|0);
     if (!($cmp9)) {
      break;
     }
    }
    $incdec$ptr = ((($l$015)) + 1|0);
    $incdec$ptr11 = ((($r$016)) + 1|0);
    $4 = HEAP8[$incdec$ptr>>0]|0;
    $conv = $4&255;
    $tobool = ($4<<24>>24)==(0);
    if ($tobool) {
     $5 = 0;$r$0$lcssa = $incdec$ptr11;
     break L1;
    } else {
     $2 = $4;$conv17 = $conv;$l$015 = $incdec$ptr;$r$016 = $incdec$ptr11;
    }
   }
   $$pre$pre = HEAP8[$l$015>>0]|0;
   $5 = $$pre$pre;$r$0$lcssa = $r$016;
  }
 } while(0);
 $conv12 = $5&255;
 $call13 = (_tolower($conv12)|0);
 $6 = HEAP8[$r$0$lcssa>>0]|0;
 $conv14 = $6&255;
 $call15 = (_tolower($conv14)|0);
 $sub = (($call13) - ($call15))|0;
 return ($sub|0);
}
function _tolower($c) {
 $c = $c|0;
 var $call = 0, $or = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_isupper($c)|0);
 $tobool = ($call|0)==(0);
 $or = $c | 32;
 $retval$0 = $tobool ? $c : $or;
 return ($retval$0|0);
}
function _isupper($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($c) + -65)|0;
 $cmp = ($sub>>>0)<(26);
 $conv = $cmp&1;
 return ($conv|0);
}
function _islower($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($c) + -97)|0;
 $cmp = ($sub>>>0)<(26);
 $conv = $cmp&1;
 return ($conv|0);
}
function _toupper($c) {
 $c = $c|0;
 var $and = 0, $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_islower($c)|0);
 $tobool = ($call|0)==(0);
 $and = $c & 95;
 $retval$0 = $tobool ? $c : $and;
 return ($retval$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $phitmp = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($st|0)==(0|0);
 if ($tobool) {
  $1 = 1;
 } else {
  $0 = HEAP32[$st>>2]|0;
  $tobool1 = ($0|0)==(0);
  $phitmp = $tobool1&1;
  $1 = $phitmp;
 }
 return ($1|0);
}
function _strncasecmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$pre$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call11 = 0, $call17 = 0, $call19 = 0, $cmp = 0, $cmp12 = 0, $conv = 0, $conv10 = 0, $conv15 = 0, $conv16 = 0, $conv18 = 0, $conv20 = 0;
 var $incdec$ptr = 0, $incdec$ptr14 = 0, $l$017 = 0, $n$addr$019 = 0, $n$addr$019$in = 0, $or$cond = 0, $r$0$lcssa = 0, $r$018 = 0, $retval$0 = 0, $sub = 0, $tobool = 0, $tobool1 = 0, $tobool116 = 0, $tobool3 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($n|0)==(0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $0 = HEAP8[$_l>>0]|0;
  $tobool116 = ($0<<24>>24)==(0);
  L3: do {
   if ($tobool116) {
    $5 = 0;$r$0$lcssa = $_r;
   } else {
    $conv15 = $0&255;
    $2 = $0;$conv20 = $conv15;$l$017 = $_l;$n$addr$019$in = $n;$r$018 = $_r;
    while(1) {
     $n$addr$019 = (($n$addr$019$in) + -1)|0;
     $1 = HEAP8[$r$018>>0]|0;
     $tobool3 = ($1<<24>>24)!=(0);
     $tobool5 = ($n$addr$019|0)!=(0);
     $or$cond = $tobool5 & $tobool3;
     if (!($or$cond)) {
      $5 = $2;$r$0$lcssa = $r$018;
      break L3;
     }
     $cmp = ($2<<24>>24)==($1<<24>>24);
     if (!($cmp)) {
      $call = (_tolower($conv20)|0);
      $3 = HEAP8[$r$018>>0]|0;
      $conv10 = $3&255;
      $call11 = (_tolower($conv10)|0);
      $cmp12 = ($call|0)==($call11|0);
      if (!($cmp12)) {
       break;
      }
     }
     $incdec$ptr = ((($l$017)) + 1|0);
     $incdec$ptr14 = ((($r$018)) + 1|0);
     $4 = HEAP8[$incdec$ptr>>0]|0;
     $conv = $4&255;
     $tobool1 = ($4<<24>>24)==(0);
     if ($tobool1) {
      $5 = 0;$r$0$lcssa = $incdec$ptr14;
      break L3;
     } else {
      $2 = $4;$conv20 = $conv;$l$017 = $incdec$ptr;$n$addr$019$in = $n$addr$019;$r$018 = $incdec$ptr14;
     }
    }
    $$pre$pre = HEAP8[$l$017>>0]|0;
    $5 = $$pre$pre;$r$0$lcssa = $r$018;
   }
  } while(0);
  $conv16 = $5&255;
  $call17 = (_tolower($conv16)|0);
  $6 = HEAP8[$r$0$lcssa>>0]|0;
  $conv18 = $6&255;
  $call19 = (_tolower($conv18)|0);
  $sub = (($call17) - ($call19))|0;
  $retval$0 = $sub;
 }
 return ($retval$0|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $add = 0, $call = 0, $call1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($s)|0);
 $add = (($call) + 1)|0;
 $call1 = (___memrchr($s,$c,$add)|0);
 return ($call1|0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $arrayidx = 0, $arrayidx$le = 0, $cmp = 0, $dec8 = 0, $dec8$in = 0, $retval$0 = 0, $tobool = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool7 = ($n|0)==(0);
 L1: do {
  if ($tobool7) {
   $retval$0 = 0;
  } else {
   $0 = $c&255;
   $dec8$in = $n;
   while(1) {
    $dec8 = (($dec8$in) + -1)|0;
    $arrayidx = (($m) + ($dec8)|0);
    $1 = HEAP8[$arrayidx>>0]|0;
    $cmp = ($1<<24>>24)==($0<<24>>24);
    if ($cmp) {
     break;
    }
    $tobool = ($dec8|0)==(0);
    if ($tobool) {
     $retval$0 = 0;
     break L1;
    } else {
     $dec8$in = $dec8;
    }
   }
   $arrayidx$le = (($m) + ($dec8)|0);
   $retval$0 = $arrayidx$le;
  }
 } while(0);
 return ($retval$0|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $add = 0, $call = 0, $call1 = 0, $call3 = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($s)|0);
 $add = (($call) + 1)|0;
 $call1 = (_malloc($add)|0);
 $tobool = ($call1|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call3 = (_memcpy(($call1|0),($s|0),($add|0))|0);
  $retval$0 = $call3;
 }
 return ($retval$0|0);
}
function _strncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($d,$s,$n)|0);
 return ($d|0);
}
function ___stpncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $and13 = 0, $and14 = 0, $and2 = 0, $and247 = 0, $cmp = 0, $cmp10 = 0, $cmp1037 = 0, $d$addr$0$lcssa = 0, $d$addr$051 = 0, $d$addr$1 = 0, $d$addr$231 = 0;
 var $d$addr$3 = 0, $dec = 0, $dec32 = 0, $incdec$ptr = 0, $incdec$ptr20 = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $incdec$ptr34 = 0, $incdec$ptr5 = 0, $n$addr$0$lcssa = 0, $n$addr$053 = 0, $n$addr$1$lcssa = 0, $n$addr$138 = 0, $n$addr$2 = 0, $n$addr$333 = 0, $n$addr$4 = 0, $neg = 0, $or$cond = 0, $or$cond50 = 0, $s$addr$0$lcssa = 0;
 var $s$addr$052 = 0, $s$addr$1 = 0, $s$addr$232 = 0, $sub = 0, $sub19 = 0, $tobool = 0, $tobool15 = 0, $tobool25 = 0, $tobool2530 = 0, $tobool28 = 0, $tobool3 = 0, $tobool3$lcssa = 0, $tobool349 = 0, $tobool4 = 0, $tobool48 = 0, $tobool7 = 0, $wd$0$lcssa = 0, $wd$039 = 0, $ws$0$lcssa = 0, $ws$040 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $cmp = ($3|0)==(0);
 L1: do {
  if ($cmp) {
   $and247 = $0 & 3;
   $tobool48 = ($and247|0)!=(0);
   $tobool349 = ($n|0)!=(0);
   $or$cond50 = $tobool349 & $tobool48;
   if ($or$cond50) {
    $d$addr$051 = $d;$n$addr$053 = $n;$s$addr$052 = $s;
    while(1) {
     $4 = HEAP8[$s$addr$052>>0]|0;
     HEAP8[$d$addr$051>>0] = $4;
     $tobool4 = ($4<<24>>24)==(0);
     if ($tobool4) {
      $d$addr$3 = $d$addr$051;$n$addr$4 = $n$addr$053;
      break L1;
     }
     $dec = (($n$addr$053) + -1)|0;
     $incdec$ptr = ((($s$addr$052)) + 1|0);
     $incdec$ptr5 = ((($d$addr$051)) + 1|0);
     $5 = $incdec$ptr;
     $and2 = $5 & 3;
     $tobool = ($and2|0)!=(0);
     $tobool3 = ($dec|0)!=(0);
     $or$cond = $tobool3 & $tobool;
     if ($or$cond) {
      $d$addr$051 = $incdec$ptr5;$n$addr$053 = $dec;$s$addr$052 = $incdec$ptr;
     } else {
      $d$addr$0$lcssa = $incdec$ptr5;$n$addr$0$lcssa = $dec;$s$addr$0$lcssa = $incdec$ptr;$tobool3$lcssa = $tobool3;
      break;
     }
    }
   } else {
    $d$addr$0$lcssa = $d;$n$addr$0$lcssa = $n;$s$addr$0$lcssa = $s;$tobool3$lcssa = $tobool349;
   }
   if ($tobool3$lcssa) {
    $$pr = HEAP8[$s$addr$0$lcssa>>0]|0;
    $tobool7 = ($$pr<<24>>24)==(0);
    if ($tobool7) {
     $d$addr$3 = $d$addr$0$lcssa;$n$addr$4 = $n$addr$0$lcssa;
    } else {
     $cmp1037 = ($n$addr$0$lcssa>>>0)>(3);
     L11: do {
      if ($cmp1037) {
       $n$addr$138 = $n$addr$0$lcssa;$wd$039 = $d$addr$0$lcssa;$ws$040 = $s$addr$0$lcssa;
       while(1) {
        $6 = HEAP32[$ws$040>>2]|0;
        $sub = (($6) + -16843009)|0;
        $neg = $6 & -2139062144;
        $and13 = $neg ^ -2139062144;
        $and14 = $and13 & $sub;
        $tobool15 = ($and14|0)==(0);
        if (!($tobool15)) {
         $n$addr$1$lcssa = $n$addr$138;$wd$0$lcssa = $wd$039;$ws$0$lcssa = $ws$040;
         break L11;
        }
        HEAP32[$wd$039>>2] = $6;
        $sub19 = (($n$addr$138) + -4)|0;
        $incdec$ptr20 = ((($ws$040)) + 4|0);
        $incdec$ptr21 = ((($wd$039)) + 4|0);
        $cmp10 = ($sub19>>>0)>(3);
        if ($cmp10) {
         $n$addr$138 = $sub19;$wd$039 = $incdec$ptr21;$ws$040 = $incdec$ptr20;
        } else {
         $n$addr$1$lcssa = $sub19;$wd$0$lcssa = $incdec$ptr21;$ws$0$lcssa = $incdec$ptr20;
         break;
        }
       }
      } else {
       $n$addr$1$lcssa = $n$addr$0$lcssa;$wd$0$lcssa = $d$addr$0$lcssa;$ws$0$lcssa = $s$addr$0$lcssa;
      }
     } while(0);
     $d$addr$1 = $wd$0$lcssa;$n$addr$2 = $n$addr$1$lcssa;$s$addr$1 = $ws$0$lcssa;
     label = 13;
    }
   } else {
    $d$addr$3 = $d$addr$0$lcssa;$n$addr$4 = 0;
   }
  } else {
   $d$addr$1 = $d;$n$addr$2 = $n;$s$addr$1 = $s;
   label = 13;
  }
 } while(0);
 L17: do {
  if ((label|0) == 13) {
   $tobool2530 = ($n$addr$2|0)==(0);
   if ($tobool2530) {
    $d$addr$3 = $d$addr$1;$n$addr$4 = 0;
   } else {
    $d$addr$231 = $d$addr$1;$n$addr$333 = $n$addr$2;$s$addr$232 = $s$addr$1;
    while(1) {
     $7 = HEAP8[$s$addr$232>>0]|0;
     HEAP8[$d$addr$231>>0] = $7;
     $tobool28 = ($7<<24>>24)==(0);
     if ($tobool28) {
      $d$addr$3 = $d$addr$231;$n$addr$4 = $n$addr$333;
      break L17;
     }
     $dec32 = (($n$addr$333) + -1)|0;
     $incdec$ptr33 = ((($s$addr$232)) + 1|0);
     $incdec$ptr34 = ((($d$addr$231)) + 1|0);
     $tobool25 = ($dec32|0)==(0);
     if ($tobool25) {
      $d$addr$3 = $incdec$ptr34;$n$addr$4 = 0;
      break;
     } else {
      $d$addr$231 = $incdec$ptr34;$n$addr$333 = $dec32;$s$addr$232 = $incdec$ptr33;
     }
    }
   }
  }
 } while(0);
 (_memset(($d$addr$3|0),0,($n$addr$4|0))|0);
 return ($d$addr$3|0);
}
function _htons($n) {
 $n = $n|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___bswap_16_247($n)|0);
 return ($call|0);
}
function ___bswap_16_247($__x) {
 $__x = $__x|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($__x|0))|0);
 return ($rev|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _htonl($n) {
 $n = $n|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___bswap_32($n)|0);
 return ($call|0);
}
function ___bswap_32($__x) {
 $__x = $__x|0;
 var $or5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $or5 = (_llvm_bswap_i32(($__x|0))|0);
 return ($or5|0);
}
function _ntohs($n) {
 $n = $n|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___bswap_16($n)|0);
 return ($call|0);
}
function ___bswap_16($__x) {
 $__x = $__x|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($__x|0))|0);
 return ($rev|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx95 = 0, $bits$0 = 0, $c$0 = 0, $c$1$lcssa = 0;
 var $c$197 = 0, $c$2 = 0, $c$395 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $call = 0, $call113 = 0, $call133 = 0, $call157 = 0, $call189 = 0, $call215 = 0, $call229 = 0, $call23 = 0, $call236 = 0.0, $call246 = 0.0, $call43 = 0, $call6 = 0, $cmp = 0, $cmp101 = 0;
 var $cmp106 = 0, $cmp126 = 0, $cmp136 = 0, $cmp150 = 0, $cmp16 = 0, $cmp161 = 0, $cmp165 = 0, $cmp169 = 0, $cmp172 = 0, $cmp176 = 0, $cmp217 = 0, $cmp222 = 0, $cmp233 = 0, $cmp26 = 0, $cmp29 = 0, $cmp31 = 0, $cmp36 = 0, $cmp53 = 0, $cmp57 = 0, $cmp70 = 0;
 var $cmp7089 = 0, $cmp9 = 0, $cmp91 = 0, $cmp97 = 0, $cond = 0, $cond135 = 0, $cond159 = 0, $cond231 = 0, $conv = 0, $conv111 = 0, $conv12 = 0, $conv131 = 0, $conv155 = 0, $conv21 = 0, $conv227 = 0, $conv28 = 0, $conv41 = 0, $conv84 = 0.0, $conv86 = 0.0, $conv96 = 0;
 var $dec = 0, $dec19293 = 0, $dec19293$in = 0, $emin$0 = 0, $i$096 = 0, $i$190 = 0, $i$294 = 0, $i$3 = 0, $i$4 = 0, $inc = 0, $inc118 = 0, $inc204 = 0, $incdec$ptr = 0, $incdec$ptr110 = 0, $incdec$ptr130 = 0, $incdec$ptr143 = 0, $incdec$ptr154 = 0, $incdec$ptr184 = 0, $incdec$ptr199 = 0, $incdec$ptr20 = 0;
 var $incdec$ptr212 = 0, $incdec$ptr226 = 0, $incdec$ptr242 = 0, $incdec$ptr40 = 0, $incdec$ptr64 = 0, $incdec$ptr77 = 0, $mul = 0, $mul85 = 0.0, $or = 0, $or$cond = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond98 = 0, $or232 = 0, $or94 = 0, $retval$0 = 0.0, $rpos = 0, $shend = 0, $sign$0 = 0, $sub13 = 0;
 var $sub160 = 0, $sub164 = 0, $sub168 = 0, $tobool = 0, $tobool140 = 0, $tobool181 = 0, $tobool193 = 0, $tobool19392 = 0, $tobool209 = 0, $tobool239 = 0, $tobool55 = 0, $tobool61 = 0, $tobool67 = 0, $tobool88 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($prec|0) {
 case 0:  {
  $bits$0 = 24;$emin$0 = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0 = 53;$emin$0 = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0 = 53;$emin$0 = -1074;
  label = 4;
  break;
 }
 default: {
  $retval$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $rpos = ((($f)) + 4|0);
   $shend = ((($f)) + 104|0);
   while(1) {
    $0 = HEAP32[$rpos>>2]|0;
    $1 = HEAP32[$shend>>2]|0;
    $cmp = ($0>>>0)<($1>>>0);
    if ($cmp) {
     $incdec$ptr = ((($0)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr;
     $2 = HEAP8[$0>>0]|0;
     $conv = $2&255;
     $cond = $conv;
    } else {
     $call = (___shgetc($f)|0);
     $cond = $call;
    }
    $call6 = (_isspace($cond)|0);
    $tobool = ($call6|0)==(0);
    if ($tobool) {
     break;
    }
   }
   L13: do {
    switch ($cond|0) {
    case 43: case 45:  {
     $cmp9 = ($cond|0)==(45);
     $conv12 = $cmp9&1;
     $mul = $conv12 << 1;
     $sub13 = (1 - ($mul))|0;
     $3 = HEAP32[$rpos>>2]|0;
     $4 = HEAP32[$shend>>2]|0;
     $cmp16 = ($3>>>0)<($4>>>0);
     if ($cmp16) {
      $incdec$ptr20 = ((($3)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr20;
      $5 = HEAP8[$3>>0]|0;
      $conv21 = $5&255;
      $c$0 = $conv21;$sign$0 = $sub13;
      break L13;
     } else {
      $call23 = (___shgetc($f)|0);
      $c$0 = $call23;$sign$0 = $sub13;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $cond;$sign$0 = 1;
    }
    }
   } while(0);
   $c$197 = $c$0;$i$096 = 0;
   while(1) {
    $or = $c$197 | 32;
    $arrayidx = (158553 + ($i$096)|0);
    $6 = HEAP8[$arrayidx>>0]|0;
    $conv28 = $6 << 24 >> 24;
    $cmp29 = ($or|0)==($conv28|0);
    if (!($cmp29)) {
     $c$1$lcssa = $c$197;$trunc = $i$096;
     break;
    }
    $cmp31 = ($i$096>>>0)<(7);
    do {
     if ($cmp31) {
      $7 = HEAP32[$rpos>>2]|0;
      $8 = HEAP32[$shend>>2]|0;
      $cmp36 = ($7>>>0)<($8>>>0);
      if ($cmp36) {
       $incdec$ptr40 = ((($7)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr40;
       $9 = HEAP8[$7>>0]|0;
       $conv41 = $9&255;
       $c$2 = $conv41;
       break;
      } else {
       $call43 = (___shgetc($f)|0);
       $c$2 = $call43;
       break;
      }
     } else {
      $c$2 = $c$197;
     }
    } while(0);
    $inc = (($i$096) + 1)|0;
    $cmp26 = ($inc>>>0)<(8);
    if ($cmp26) {
     $c$197 = $c$2;$i$096 = $inc;
    } else {
     $c$1$lcssa = $c$2;$trunc = 8;
     break;
    }
   }
   $trunc$clear = $trunc & 2147483647;
   L29: do {
    switch ($trunc$clear|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $cmp53 = ($trunc>>>0)>(3);
     $tobool55 = ($pok|0)!=(0);
     $or$cond2 = $tobool55 & $cmp53;
     if ($or$cond2) {
      $cmp57 = ($trunc|0)==(8);
      if ($cmp57) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $tobool88 = ($trunc|0)==(0);
     L34: do {
      if ($tobool88) {
       $c$395 = $c$1$lcssa;$i$294 = 0;
       while(1) {
        $or94 = $c$395 | 32;
        $arrayidx95 = (158562 + ($i$294)|0);
        $13 = HEAP8[$arrayidx95>>0]|0;
        $conv96 = $13 << 24 >> 24;
        $cmp97 = ($or94|0)==($conv96|0);
        if (!($cmp97)) {
         $c$5 = $c$395;$i$3 = $i$294;
         break L34;
        }
        $cmp101 = ($i$294>>>0)<(2);
        do {
         if ($cmp101) {
          $14 = HEAP32[$rpos>>2]|0;
          $15 = HEAP32[$shend>>2]|0;
          $cmp106 = ($14>>>0)<($15>>>0);
          if ($cmp106) {
           $incdec$ptr110 = ((($14)) + 1|0);
           HEAP32[$rpos>>2] = $incdec$ptr110;
           $16 = HEAP8[$14>>0]|0;
           $conv111 = $16&255;
           $c$4 = $conv111;
           break;
          } else {
           $call113 = (___shgetc($f)|0);
           $c$4 = $call113;
           break;
          }
         } else {
          $c$4 = $c$395;
         }
        } while(0);
        $inc118 = (($i$294) + 1)|0;
        $cmp91 = ($inc118>>>0)<(3);
        if ($cmp91) {
         $c$395 = $c$4;$i$294 = $inc118;
        } else {
         $c$5 = $c$4;$i$3 = 3;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $trunc;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $17 = HEAP32[$rpos>>2]|0;
      $18 = HEAP32[$shend>>2]|0;
      $cmp126 = ($17>>>0)<($18>>>0);
      if ($cmp126) {
       $incdec$ptr130 = ((($17)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr130;
       $19 = HEAP8[$17>>0]|0;
       $conv131 = $19&255;
       $cond135 = $conv131;
      } else {
       $call133 = (___shgetc($f)|0);
       $cond135 = $call133;
      }
      $cmp136 = ($cond135|0)==(40);
      if (!($cmp136)) {
       $20 = HEAP32[$shend>>2]|0;
       $tobool140 = ($20|0)==(0|0);
       if ($tobool140) {
        $retval$0 = nan;
        break L4;
       }
       $21 = HEAP32[$rpos>>2]|0;
       $incdec$ptr143 = ((($21)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr143;
       $retval$0 = nan;
       break L4;
      }
      $i$4 = 1;
      while(1) {
       $22 = HEAP32[$rpos>>2]|0;
       $23 = HEAP32[$shend>>2]|0;
       $cmp150 = ($22>>>0)<($23>>>0);
       if ($cmp150) {
        $incdec$ptr154 = ((($22)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr154;
        $24 = HEAP8[$22>>0]|0;
        $conv155 = $24&255;
        $cond159 = $conv155;
       } else {
        $call157 = (___shgetc($f)|0);
        $cond159 = $call157;
       }
       $sub160 = (($cond159) + -48)|0;
       $cmp161 = ($sub160>>>0)<(10);
       $sub164 = (($cond159) + -65)|0;
       $cmp165 = ($sub164>>>0)<(26);
       $or$cond = $cmp161 | $cmp165;
       if (!($or$cond)) {
        $sub168 = (($cond159) + -97)|0;
        $cmp169 = ($sub168>>>0)<(26);
        $cmp172 = ($cond159|0)==(95);
        $or$cond3 = $cmp172 | $cmp169;
        if (!($or$cond3)) {
         break;
        }
       }
       $inc204 = (($i$4) + 1)|0;
       $i$4 = $inc204;
      }
      $cmp176 = ($cond159|0)==(41);
      if ($cmp176) {
       $retval$0 = nan;
       break L4;
      }
      $25 = HEAP32[$shend>>2]|0;
      $tobool181 = ($25|0)==(0|0);
      if (!($tobool181)) {
       $26 = HEAP32[$rpos>>2]|0;
       $incdec$ptr184 = ((($26)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr184;
      }
      if (!($tobool55)) {
       $call189 = (___errno_location()|0);
       HEAP32[$call189>>2] = 28;
       ___shlim($f,0,0);
       $retval$0 = 0.0;
       break L4;
      }
      $tobool19392 = ($i$4|0)==(0);
      if ($tobool19392) {
       $retval$0 = nan;
       break L4;
      }
      $dec19293$in = $i$4;
      while(1) {
       $dec19293 = (($dec19293$in) + -1)|0;
       if (!($tobool181)) {
        $27 = HEAP32[$rpos>>2]|0;
        $incdec$ptr199 = ((($27)) + -1|0);
        HEAP32[$rpos>>2] = $incdec$ptr199;
       }
       $tobool193 = ($dec19293|0)==(0);
       if ($tobool193) {
        $retval$0 = nan;
        break L4;
       } else {
        $dec19293$in = $dec19293;
       }
      }
      break;
     }
     case 0:  {
      $cmp217 = ($c$5|0)==(48);
      if ($cmp217) {
       $30 = HEAP32[$rpos>>2]|0;
       $31 = HEAP32[$shend>>2]|0;
       $cmp222 = ($30>>>0)<($31>>>0);
       if ($cmp222) {
        $incdec$ptr226 = ((($30)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr226;
        $32 = HEAP8[$30>>0]|0;
        $conv227 = $32&255;
        $cond231 = $conv227;
       } else {
        $call229 = (___shgetc($f)|0);
        $cond231 = $call229;
       }
       $or232 = $cond231 | 32;
       $cmp233 = ($or232|0)==(120);
       if ($cmp233) {
        $call236 = (+_hexfloat($f,$bits$0,$emin$0,$sign$0,$pok));
        $retval$0 = $call236;
        break L4;
       }
       $33 = HEAP32[$shend>>2]|0;
       $tobool239 = ($33|0)==(0|0);
       if ($tobool239) {
        $c$6 = 48;
       } else {
        $34 = HEAP32[$rpos>>2]|0;
        $incdec$ptr242 = ((($34)) + -1|0);
        HEAP32[$rpos>>2] = $incdec$ptr242;
        $c$6 = 48;
       }
      } else {
       $c$6 = $c$5;
      }
      $call246 = (+_decfloat($f,$c$6,$bits$0,$emin$0,$sign$0,$pok));
      $retval$0 = $call246;
      break L4;
      break;
     }
     default: {
      $28 = HEAP32[$shend>>2]|0;
      $tobool209 = ($28|0)==(0|0);
      if (!($tobool209)) {
       $29 = HEAP32[$rpos>>2]|0;
       $incdec$ptr212 = ((($29)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr212;
      }
      $call215 = (___errno_location()|0);
      HEAP32[$call215>>2] = 28;
      ___shlim($f,0,0);
      $retval$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $10 = HEAP32[$shend>>2]|0;
    $tobool61 = ($10|0)==(0|0);
    if (!($tobool61)) {
     $11 = HEAP32[$rpos>>2]|0;
     $incdec$ptr64 = ((($11)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr64;
    }
    $tobool67 = ($pok|0)!=(0);
    $cmp7089 = ($trunc>>>0)>(3);
    $or$cond98 = $tobool67 & $cmp7089;
    if ($or$cond98) {
     $i$190 = $trunc;
     while(1) {
      if (!($tobool61)) {
       $12 = HEAP32[$rpos>>2]|0;
       $incdec$ptr77 = ((($12)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr77;
      }
      $dec = (($i$190) + -1)|0;
      $cmp70 = ($dec>>>0)>(3);
      if ($cmp70) {
       $i$190 = $dec;
      } else {
       break;
      }
     }
    }
   }
   $conv84 = (+($sign$0|0));
   $mul85 = $conv84 * inf;
   $conv86 = $mul85;
   $retval$0 = $conv86;
  }
 } while(0);
 return (+$retval$0);
}
function _hexfloat($f,$bits,$emin,$sign,$pok) {
 $f = $f|0;
 $bits = $bits|0;
 $emin = $emin|0;
 $sign = $sign|0;
 $pok = $pok|0;
 var $$pre = 0, $$pre136 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add210 = 0, $add214 = 0, $add256 = 0.0, $add259 = 0.0, $add73 = 0, $add80 = 0.0;
 var $add86 = 0.0, $and = 0, $bias$0 = 0.0, $bits$addr$0 = 0, $bits$addr$0109 = 0, $bits$addr$0110 = 0, $brmerge = 0, $c$0 = 0, $c$0$be = 0, $c$0$ph = 0, $c$3 = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$3$ph = 0, $call = 0, $call101 = 0, $call13 = 0, $call187 = 0, $call197 = 0, $call240 = 0.0;
 var $call242 = 0.0, $call263 = 0, $call266 = 0.0, $call27 = 0, $call44 = 0, $cmp = 0, $cmp146 = 0, $cmp20 = 0, $cmp203 = 0, $cmp203118 = 0, $cmp206 = 0, $cmp235 = 0, $cmp244 = 0, $cmp31 = 0, $cmp31128 = 0, $cmp37 = 0, $cmp49 = 0, $cmp52 = 0, $cmp54 = 0, $cmp6 = 0;
 var $cmp62 = 0, $cmp94 = 0, $cond29 = 0, $cond46 = 0, $conv = 0, $conv11 = 0, $conv135 = 0.0, $conv179 = 0.0, $conv188 = 0.0, $conv198 = 0.0, $conv241112 = 0.0, $conv25 = 0, $conv253$pre$phiZ2D = 0.0, $conv254 = 0.0, $conv42 = 0, $conv78 = 0.0, $conv99 = 0, $d$0 = 0, $div = 0.0, $gotdig$0 = 0;
 var $gotdig$3 = 0, $gotdig$3$ph = 0, $gotdig$4 = 0, $gotrad$1 = 0, $gotrad$1$ph = 0, $gotrad$2 = 0, $gottail$0 = 0, $gottail$1 = 0, $gottail$2 = 0, $inc251 = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $incdec$ptr111 = 0, $incdec$ptr120 = 0, $incdec$ptr129 = 0, $incdec$ptr159 = 0, $incdec$ptr170 = 0, $incdec$ptr24 = 0, $incdec$ptr41 = 0, $incdec$ptr98 = 0;
 var $mul = 0, $mul136 = 0.0, $mul143 = 0, $mul180 = 0.0, $mul189 = 0.0, $mul190 = 0.0, $mul199 = 0.0, $mul200 = 0.0, $mul255 = 0.0, $mul258 = 0.0, $mul79 = 0.0, $mul85 = 0.0, $not$cmp206 = 0, $or$cond = 0, $or$cond103 = 0, $or$cond2 = 0, $or$cond3 = 0, $or145 = 0, $retval$0 = 0.0, $rpos = 0;
 var $scale$0 = 0.0, $scale$1 = 0.0, $scale$2 = 0.0, $shend = 0, $spec$select113 = 0.0, $spec$select114 = 0, $sub = 0, $sub182 = 0, $sub192 = 0, $sub211 = 0.0, $sub211$pn = 0.0, $sub239 = 0, $sub239111 = 0, $sub260 = 0.0, $sub51 = 0, $sub66 = 0, $tobool = 0, $tobool105 = 0, $tobool108 = 0, $tobool114 = 0;
 var $tobool123 = 0, $tobool138 = 0, $tobool153 = 0, $tobool156 = 0, $tobool167 = 0, $tobool177 = 0, $tobool247 = 0, $tobool249 = 0, $tobool261 = 0, $tobool82 = 0, $tobool83 = 0, $x$0 = 0, $x$1 = 0, $x$2 = 0, $x$3$lcssa = 0, $x$3125 = 0, $x$4$lcssa = 0, $x$4119 = 0, $x$5 = 0, $x$6 = 0;
 var $y$0 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3$lcssa = 0.0, $y$3120 = 0.0, $y$4 = 0.0, $y$5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $rpos = ((($f)) + 4|0);
 $0 = HEAP32[$rpos>>2]|0;
 $shend = ((($f)) + 104|0);
 $1 = HEAP32[$shend>>2]|0;
 $cmp = ($0>>>0)<($1>>>0);
 if ($cmp) {
  $incdec$ptr = ((($0)) + 1|0);
  HEAP32[$rpos>>2] = $incdec$ptr;
  $2 = HEAP8[$0>>0]|0;
  $conv = $2&255;
  $c$0$ph = $conv;
 } else {
  $call = (___shgetc($f)|0);
  $c$0$ph = $call;
 }
 $c$0 = $c$0$ph;$gotdig$0 = 0;
 L5: while(1) {
  switch ($c$0|0) {
  case 46:  {
   label = 10;
   break L5;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $106 = 0;$107 = 0;$c$3$ph = $c$0;$gotdig$3$ph = $gotdig$0;$gotrad$1$ph = 0;
   break L5;
  }
  }
  $3 = HEAP32[$rpos>>2]|0;
  $4 = HEAP32[$shend>>2]|0;
  $cmp6 = ($3>>>0)<($4>>>0);
  if ($cmp6) {
   $incdec$ptr10 = ((($3)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr10;
   $5 = HEAP8[$3>>0]|0;
   $conv11 = $5&255;
   $c$0$be = $conv11;
  } else {
   $call13 = (___shgetc($f)|0);
   $c$0$be = $call13;
  }
  $c$0 = $c$0$be;$gotdig$0 = 1;
 }
 if ((label|0) == 10) {
  $6 = HEAP32[$rpos>>2]|0;
  $7 = HEAP32[$shend>>2]|0;
  $cmp20 = ($6>>>0)<($7>>>0);
  if ($cmp20) {
   $incdec$ptr24 = ((($6)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr24;
   $8 = HEAP8[$6>>0]|0;
   $conv25 = $8&255;
   $cond29 = $conv25;
  } else {
   $call27 = (___shgetc($f)|0);
   $cond29 = $call27;
  }
  $cmp31128 = ($cond29|0)==(48);
  if ($cmp31128) {
   $12 = 0;$13 = 0;
   while(1) {
    $9 = HEAP32[$rpos>>2]|0;
    $10 = HEAP32[$shend>>2]|0;
    $cmp37 = ($9>>>0)<($10>>>0);
    if ($cmp37) {
     $incdec$ptr41 = ((($9)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr41;
     $11 = HEAP8[$9>>0]|0;
     $conv42 = $11&255;
     $cond46 = $conv42;
    } else {
     $call44 = (___shgetc($f)|0);
     $cond46 = $call44;
    }
    $14 = (_i64Add(($12|0),($13|0),-1,-1)|0);
    $15 = (getTempRet0() | 0);
    $cmp31 = ($cond46|0)==(48);
    if ($cmp31) {
     $12 = $14;$13 = $15;
    } else {
     $106 = $14;$107 = $15;$c$3$ph = $cond46;$gotdig$3$ph = 1;$gotrad$1$ph = 1;
     break;
    }
   }
  } else {
   $106 = 0;$107 = 0;$c$3$ph = $cond29;$gotdig$3$ph = $gotdig$0;$gotrad$1$ph = 1;
  }
 }
 $17 = 0;$19 = 0;$38 = $106;$40 = $107;$c$3 = $c$3$ph;$gotdig$3 = $gotdig$3$ph;$gotrad$1 = $gotrad$1$ph;$gottail$0 = 0;$scale$0 = 1.0;$x$0 = 0;$y$0 = 0.0;
 while(1) {
  $sub = (($c$3) + -48)|0;
  $cmp49 = ($sub>>>0)<(10);
  $$pre = $c$3 | 32;
  if ($cmp49) {
   label = 24;
  } else {
   $sub51 = (($$pre) + -97)|0;
   $cmp52 = ($sub51>>>0)<(6);
   $cmp54 = ($c$3|0)==(46);
   $or$cond3 = $cmp54 | $cmp52;
   if (!($or$cond3)) {
    $c$3$lcssa = $c$3;
    break;
   }
   if ($cmp54) {
    $tobool = ($gotrad$1|0)==(0);
    if ($tobool) {
     $108 = $19;$109 = $17;$110 = $19;$111 = $17;$gotdig$4 = $gotdig$3;$gotrad$2 = 1;$gottail$2 = $gottail$0;$scale$2 = $scale$0;$x$2 = $x$0;$y$2 = $y$0;
    } else {
     $c$3$lcssa = 46;
     break;
    }
   } else {
    label = 24;
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $cmp62 = ($c$3|0)>(57);
   $sub66 = (($$pre) + -87)|0;
   $d$0 = $cmp62 ? $sub66 : $sub;
   $16 = ($17|0)<(0);
   $18 = ($19>>>0)<(8);
   $20 = ($17|0)==(0);
   $21 = $20 & $18;
   $22 = $16 | $21;
   do {
    if ($22) {
     $mul = $x$0 << 4;
     $add73 = (($d$0) + ($mul))|0;
     $gottail$1 = $gottail$0;$scale$1 = $scale$0;$x$1 = $add73;$y$1 = $y$0;
    } else {
     $23 = ($17|0)<(0);
     $24 = ($19>>>0)<(14);
     $25 = ($17|0)==(0);
     $26 = $25 & $24;
     $27 = $23 | $26;
     if ($27) {
      $conv78 = (+($d$0|0));
      $div = $scale$0 * 0.0625;
      $mul79 = $div * $conv78;
      $add80 = $y$0 + $mul79;
      $gottail$1 = $gottail$0;$scale$1 = $div;$x$1 = $x$0;$y$1 = $add80;
      break;
     } else {
      $tobool82 = ($d$0|0)==(0);
      $tobool83 = ($gottail$0|0)!=(0);
      $or$cond = $tobool83 | $tobool82;
      $mul85 = $scale$0 * 0.5;
      $add86 = $y$0 + $mul85;
      $spec$select113 = $or$cond ? $y$0 : $add86;
      $spec$select114 = $or$cond ? $gottail$0 : 1;
      $gottail$1 = $spec$select114;$scale$1 = $scale$0;$x$1 = $x$0;$y$1 = $spec$select113;
      break;
     }
    }
   } while(0);
   $28 = (_i64Add(($19|0),($17|0),1,0)|0);
   $29 = (getTempRet0() | 0);
   $108 = $38;$109 = $40;$110 = $28;$111 = $29;$gotdig$4 = 1;$gotrad$2 = $gotrad$1;$gottail$2 = $gottail$1;$scale$2 = $scale$1;$x$2 = $x$1;$y$2 = $y$1;
  }
  $30 = HEAP32[$rpos>>2]|0;
  $31 = HEAP32[$shend>>2]|0;
  $cmp94 = ($30>>>0)<($31>>>0);
  if ($cmp94) {
   $incdec$ptr98 = ((($30)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr98;
   $32 = HEAP8[$30>>0]|0;
   $conv99 = $32&255;
   $c$3$be = $conv99;
  } else {
   $call101 = (___shgetc($f)|0);
   $c$3$be = $call101;
  }
  $17 = $111;$19 = $110;$38 = $108;$40 = $109;$c$3 = $c$3$be;$gotdig$3 = $gotdig$4;$gotrad$1 = $gotrad$2;$gottail$0 = $gottail$2;$scale$0 = $scale$2;$x$0 = $x$2;$y$0 = $y$2;
 }
 $tobool105 = ($gotdig$3|0)==(0);
 do {
  if ($tobool105) {
   $33 = HEAP32[$shend>>2]|0;
   $tobool108 = ($33|0)==(0|0);
   if (!($tobool108)) {
    $34 = HEAP32[$rpos>>2]|0;
    $incdec$ptr111 = ((($34)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr111;
   }
   $tobool114 = ($pok|0)==(0);
   if ($tobool114) {
    ___shlim($f,0,0);
   } else {
    if (!($tobool108)) {
     $35 = HEAP32[$rpos>>2]|0;
     $incdec$ptr120 = ((($35)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr120;
     $tobool123 = ($gotrad$1|0)==(0);
     $brmerge = $tobool123 | $tobool108;
     if (!($brmerge)) {
      $36 = HEAP32[$rpos>>2]|0;
      $incdec$ptr129 = ((($36)) + -1|0);
      HEAP32[$rpos>>2] = $incdec$ptr129;
     }
    }
   }
   $conv135 = (+($sign|0));
   $mul136 = $conv135 * 0.0;
   $retval$0 = $mul136;
  } else {
   $tobool138 = ($gotrad$1|0)==(0);
   $37 = $tobool138 ? $19 : $38;
   $39 = $tobool138 ? $17 : $40;
   $41 = ($17|0)<(0);
   $42 = ($19>>>0)<(8);
   $43 = ($17|0)==(0);
   $44 = $43 & $42;
   $45 = $41 | $44;
   if ($45) {
    $46 = $19;$47 = $17;$x$3125 = $x$0;
    while(1) {
     $mul143 = $x$3125 << 4;
     $48 = (_i64Add(($46|0),($47|0),1,0)|0);
     $49 = (getTempRet0() | 0);
     $50 = ($47|0)<(0);
     $51 = ($46>>>0)<(7);
     $52 = ($47|0)==(0);
     $53 = $52 & $51;
     $54 = $50 | $53;
     if ($54) {
      $46 = $48;$47 = $49;$x$3125 = $mul143;
     } else {
      $x$3$lcssa = $mul143;
      break;
     }
    }
   } else {
    $x$3$lcssa = $x$0;
   }
   $or145 = $c$3$lcssa | 32;
   $cmp146 = ($or145|0)==(112);
   if ($cmp146) {
    $55 = (_scanexp($f,$pok)|0);
    $56 = (getTempRet0() | 0);
    $57 = ($55|0)==(0);
    $58 = ($56|0)==(-2147483648);
    $59 = $57 & $58;
    if ($59) {
     $tobool153 = ($pok|0)==(0);
     if ($tobool153) {
      ___shlim($f,0,0);
      $retval$0 = 0.0;
      break;
     }
     $60 = HEAP32[$shend>>2]|0;
     $tobool156 = ($60|0)==(0|0);
     if ($tobool156) {
      $68 = 0;$69 = 0;
     } else {
      $61 = HEAP32[$rpos>>2]|0;
      $incdec$ptr159 = ((($61)) + -1|0);
      HEAP32[$rpos>>2] = $incdec$ptr159;
      $68 = 0;$69 = 0;
     }
    } else {
     $68 = $55;$69 = $56;
    }
   } else {
    $62 = HEAP32[$shend>>2]|0;
    $tobool167 = ($62|0)==(0|0);
    if ($tobool167) {
     $68 = 0;$69 = 0;
    } else {
     $63 = HEAP32[$rpos>>2]|0;
     $incdec$ptr170 = ((($63)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr170;
     $68 = 0;$69 = 0;
    }
   }
   $64 = (_bitshift64Shl(($37|0),($39|0),2)|0);
   $65 = (getTempRet0() | 0);
   $66 = (_i64Add(($64|0),($65|0),-32,-1)|0);
   $67 = (getTempRet0() | 0);
   $70 = (_i64Add(($66|0),($67|0),($68|0),($69|0))|0);
   $71 = (getTempRet0() | 0);
   $tobool177 = ($x$3$lcssa|0)==(0);
   if ($tobool177) {
    $conv179 = (+($sign|0));
    $mul180 = $conv179 * 0.0;
    $retval$0 = $mul180;
    break;
   }
   $sub182 = (0 - ($emin))|0;
   $72 = ($sub182|0)<(0);
   $73 = $72 << 31 >> 31;
   $74 = ($71|0)>($73|0);
   $75 = ($70>>>0)>($sub182>>>0);
   $76 = ($71|0)==($73|0);
   $77 = $76 & $75;
   $78 = $74 | $77;
   if ($78) {
    $call187 = (___errno_location()|0);
    HEAP32[$call187>>2] = 68;
    $conv188 = (+($sign|0));
    $mul189 = $conv188 * 1.7976931348623157E+308;
    $mul190 = $mul189 * 1.7976931348623157E+308;
    $retval$0 = $mul190;
    break;
   }
   $sub192 = (($emin) + -106)|0;
   $79 = ($sub192|0)<(0);
   $80 = $79 << 31 >> 31;
   $81 = ($71|0)<($80|0);
   $82 = ($70>>>0)<($sub192>>>0);
   $83 = ($71|0)==($80|0);
   $84 = $83 & $82;
   $85 = $81 | $84;
   if ($85) {
    $call197 = (___errno_location()|0);
    HEAP32[$call197>>2] = 68;
    $conv198 = (+($sign|0));
    $mul199 = $conv198 * 2.2250738585072014E-308;
    $mul200 = $mul199 * 2.2250738585072014E-308;
    $retval$0 = $mul200;
    break;
   }
   $cmp203118 = ($x$3$lcssa|0)>(-1);
   if ($cmp203118) {
    $86 = $70;$87 = $71;$x$4119 = $x$3$lcssa;$y$3120 = $y$0;
    while(1) {
     $cmp206 = !($y$3120 >= 0.5);
     $add214 = $x$4119 << 1;
     $sub211 = $y$3120 + -1.0;
     $not$cmp206 = $cmp206 ^ 1;
     $add210 = $not$cmp206&1;
     $x$5 = $add214 | $add210;
     $sub211$pn = $cmp206 ? $y$3120 : $sub211;
     $y$4 = $y$3120 + $sub211$pn;
     $88 = (_i64Add(($86|0),($87|0),-1,-1)|0);
     $89 = (getTempRet0() | 0);
     $cmp203 = ($x$5|0)>(-1);
     if ($cmp203) {
      $86 = $88;$87 = $89;$x$4119 = $x$5;$y$3120 = $y$4;
     } else {
      $96 = $88;$97 = $89;$x$4$lcssa = $x$5;$y$3$lcssa = $y$4;
      break;
     }
    }
   } else {
    $96 = $70;$97 = $71;$x$4$lcssa = $x$3$lcssa;$y$3$lcssa = $y$0;
   }
   $90 = ($bits|0)<(0);
   $91 = $90 << 31 >> 31;
   $92 = ($emin|0)<(0);
   $93 = $92 << 31 >> 31;
   $94 = (_i64Subtract(32,0,($emin|0),($93|0))|0);
   $95 = (getTempRet0() | 0);
   $98 = (_i64Add(($94|0),($95|0),($96|0),($97|0))|0);
   $99 = (getTempRet0() | 0);
   $100 = ($99|0)<($91|0);
   $101 = ($98>>>0)<($bits>>>0);
   $102 = ($99|0)==($91|0);
   $103 = $102 & $101;
   $104 = $100 | $103;
   if ($104) {
    $105 = ($98|0)>(0);
    if ($105) {
     $bits$addr$0 = $98;
     label = 65;
    } else {
     $bits$addr$0110 = 0;$sub239111 = 84;
     label = 67;
    }
   } else {
    $bits$addr$0 = $bits;
    label = 65;
   }
   if ((label|0) == 65) {
    $cmp235 = ($bits$addr$0|0)<(53);
    $sub239 = (84 - ($bits$addr$0))|0;
    if ($cmp235) {
     $bits$addr$0110 = $bits$addr$0;$sub239111 = $sub239;
     label = 67;
    } else {
     $$pre136 = (+($sign|0));
     $bias$0 = 0.0;$bits$addr$0109 = $bits$addr$0;$conv253$pre$phiZ2D = $$pre136;
    }
   }
   if ((label|0) == 67) {
    $conv241112 = (+($sign|0));
    $call240 = (+_scalbn(1.0,$sub239111));
    $call242 = (+_copysignl($call240,$conv241112));
    $bias$0 = $call242;$bits$addr$0109 = $bits$addr$0110;$conv253$pre$phiZ2D = $conv241112;
   }
   $cmp244 = ($bits$addr$0109|0)<(32);
   $tobool247 = $y$3$lcssa != 0.0;
   $or$cond2 = $tobool247 & $cmp244;
   $and = $x$4$lcssa & 1;
   $tobool249 = ($and|0)==(0);
   $or$cond103 = $tobool249 & $or$cond2;
   $inc251 = $or$cond103&1;
   $x$6 = (($x$4$lcssa) + ($inc251))|0;
   $y$5 = $or$cond103 ? 0.0 : $y$3$lcssa;
   $conv254 = (+($x$6>>>0));
   $mul255 = $conv253$pre$phiZ2D * $conv254;
   $add256 = $bias$0 + $mul255;
   $mul258 = $y$5 * $conv253$pre$phiZ2D;
   $add259 = $mul258 + $add256;
   $sub260 = $add259 - $bias$0;
   $tobool261 = $sub260 != 0.0;
   if (!($tobool261)) {
    $call263 = (___errno_location()|0);
    HEAP32[$call263>>2] = 68;
   }
   $call266 = (+_scalbnl($sub260,$96));
   $retval$0 = $call266;
  }
 } while(0);
 return (+$retval$0);
}
function _decfloat($f,$c,$bits,$emin,$sign,$pok) {
 $f = $f|0;
 $c = $c|0;
 $bits = $bits|0;
 $emin = $emin|0;
 $sign = $sign|0;
 $pok = $pok|0;
 var $$neg = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa381 = 0, $a$0335 = 0, $a$3$ph = 0, $a$3$ph408 = 0, $a$5 = 0, $a$5$ph = 0, $a$5$ph$ph = 0, $a$6328 = 0, $add260 = 0, $add273 = 0, $add283 = 0, $add295 = 0, $add315$sink$off0 = 0, $add353 = 0, $add375 = 0;
 var $add408 = 0, $add420 = 0, $add430 = 0, $add436 = 0, $add441 = 0, $add465 = 0, $add470 = 0, $add480 = 0.0, $add486 = 0, $add509 = 0.0, $add511 = 0, $add525 = 0, $add532 = 0.0, $add539 = 0.0, $add545 = 0, $add552 = 0.0, $add556 = 0.0, $add571 = 0.0, $add59 = 0, $and = 0;
 var $and329 = 0, $and355 = 0, $and360 = 0, $and363 = 0, $and376 = 0, $and417 = 0, $and431 = 0, $and437 = 0, $and442 = 0, $and451 = 0, $and466 = 0, $and471 = 0, $and512 = 0, $and526 = 0, $and546 = 0, $and574 = 0, $arrayidx186 = 0, $arrayidx186$promoted = 0, $arrayidx219 = 0, $arrayidx239 = 0;
 var $arrayidx246 = 0, $arrayidx264 = 0, $arrayidx269 = 0, $arrayidx292 = 0, $arrayidx302 = 0, $arrayidx312 = 0, $arrayidx361 = 0, $arrayidx364 = 0, $arrayidx367 = 0, $arrayidx380 = 0, $arrayidx381 = 0, $arrayidx414 = 0, $arrayidx446 = 0, $arrayidx452 = 0, $arrayidx473 = 0, $arrayidx478 = 0, $arrayidx518 = 0, $arrayidx64 = 0, $arrayidx77 = 0, $bias$0 = 0.0;
 var $bits$addr$0 = 0, $c$addr$0 = 0, $c$addr$0$be = 0, $c$addr$2 = 0, $c$addr$3$lcssa = 0, $c$addr$3354 = 0, $call = 0, $call135 = 0, $call15 = 0, $call165 = 0, $call175 = 0, $call32 = 0, $call503 = 0.0, $call504 = 0.0, $call506 = 0.0, $call507 = 0.0, $call565 = 0.0, $call579 = 0.0, $call602 = 0, $call605 = 0.0;
 var $call91 = 0, $carry$0337 = 0, $carry306$0 = 0, $carry306$1 = 0, $carry370$0330 = 0, $cmp100 = 0, $cmp121 = 0, $cmp149 = 0, $cmp152 = 0, $cmp183 = 0, $cmp183341 = 0, $cmp19 = 0, $cmp19365 = 0, $cmp194 = 0, $cmp197 = 0, $cmp2 = 0, $cmp200 = 0, $cmp203 = 0, $cmp211 = 0, $cmp226 = 0;
 var $cmp231 = 0, $cmp25 = 0, $cmp254 = 0, $cmp266 = 0, $cmp266333 = 0, $cmp277 = 0, $cmp297 = 0, $cmp300 = 0, $cmp303 = 0, $cmp330 = 0, $cmp333 = 0, $cmp356 = 0, $cmp372 = 0, $cmp377 = 0, $cmp38 = 0, $cmp382 = 0, $cmp38345 = 0, $cmp390 = 0, $cmp40 = 0, $cmp400 = 0;
 var $cmp40346 = 0, $cmp40356 = 0, $cmp404 = 0, $cmp410 = 0, $cmp410326 = 0, $cmp424 = 0, $cmp443 = 0, $cmp467 = 0, $cmp48 = 0, $cmp488 = 0, $cmp498 = 0, $cmp51 = 0, $cmp513 = 0, $cmp519 = 0, $cmp527 = 0, $cmp534 = 0, $cmp547 = 0, $cmp562 = 0, $cmp576 = 0, $cmp580 = 0;
 var $cmp587 = 0, $cmp595 = 0, $cmp67 = 0, $cmp8 = 0, $cmp84 = 0, $cond17 = 0, $cond262 = 0, $cond270 = 0, $cond34 = 0, $cond93 = 0, $conv = 0, $conv13 = 0, $conv140 = 0.0, $conv155 = 0.0, $conv157 = 0.0, $conv166 = 0.0, $conv176 = 0.0, $conv206 = 0.0, $conv208 = 0.0, $conv214 = 0.0;
 var $conv216 = 0.0, $conv220 = 0.0, $conv234 = 0.0, $conv236 = 0.0, $conv240 = 0.0, $conv30 = 0, $conv479 = 0.0, $conv484 = 0.0, $conv89 = 0, $denormal$2$v = 0, $div = 0, $div221 = 0.0, $div272 = 0, $div275 = 0, $e2$0 = 0, $e2$0$ph = 0, $e2$1 = 0, $e2$1$ph = 0, $e2$1$ph$ph = 0, $e2$3 = 0;
 var $e2$4 = 0, $exitcond = 0, $frac$0 = 0.0, $frac$1 = 0.0, $frac$3 = 0.0, $gotdig$0 = 0, $gotdig$2 = 0, $gotdig$3$lcssa = 0, $gotdig$3350 = 0, $gotdig$4 = 0, $gotrad$0 = 0, $gotrad$1$lcssa = 0, $gotrad$1351 = 0, $gotrad$2 = 0, $i$0325 = 0, $i$4324 = 0, $inc189 = 0, $inc191 = 0, $inc287 = 0, $inc291 = 0;
 var $inc395 = 0, $inc482 = 0, $inc568 = 0.0, $inc592 = 0, $inc66 = 0, $inc70 = 0, $incdec$ptr = 0, $incdec$ptr113 = 0, $incdec$ptr12 = 0, $incdec$ptr128 = 0, $incdec$ptr29 = 0, $incdec$ptr88 = 0, $j$0$lcssa = 0, $j$0302 = 0, $j$0303 = 0, $j$0304 = 0, $j$0353 = 0, $j$2 = 0, $j$3342 = 0, $k$0$lcssa = 0;
 var $k$0306 = 0, $k$0307 = 0, $k$0308 = 0, $k$0352 = 0, $k$2 = 0, $k$3 = 0, $k$4336 = 0, $k$5 = 0, $k$5$in = 0, $k$6329 = 0, $lnz$0$lcssa = 0, $lnz$0312 = 0, $lnz$0313 = 0, $lnz$0314 = 0, $lnz$0349 = 0, $lnz$2 = 0, $mul = 0, $mul141 = 0.0, $mul158 = 0.0, $mul167 = 0.0;
 var $mul168 = 0.0, $mul177 = 0.0, $mul178 = 0.0, $mul187 = 0, $mul187343 = 0, $mul209 = 0.0, $mul217 = 0.0, $mul224$neg = 0, $mul237 = 0.0, $mul241 = 0.0, $mul276 = 0, $mul423 = 0, $mul475 = 0.0, $mul485 = 0.0, $mul531 = 0.0, $mul538 = 0.0, $mul551 = 0.0, $mul555 = 0.0, $mul591 = 0.0, $narrow = 0;
 var $not$cmp580 = 0, $or = 0, $or$cond = 0, $or$cond2 = 0, $or$cond262 = 0, $or$cond263 = 0, $or$cond264 = 0, $or$cond265 = 0, $or$cond268 = 0, $or$cond394 = 0, $or$cond5 = 0, $or365 = 0, $or453 = 0, $or99 = 0, $rem = 0, $retval$1 = 0.0, $rp$0$lcssa380 = 0, $rp$0334 = 0, $rp$3$ph = 0, $rp$3$ph406 = 0;
 var $rp$5$ph = 0, $rp$5$ph405 = 0, $rp$5$ph405$ph = 0, $rp$6327 = 0, $rpos = 0, $shend = 0, $shl415 = 0, $shr = 0, $shr230 = 0, $shr419 = 0, $shr422 = 0, $spec$select = 0, $spec$select259 = 0, $spec$select260 = 0, $spec$select266 = 0, $spec$select267 = 0, $spec$select292 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$select295 = 0;
 var $spec$select296 = 0, $spec$store$select = 0, $storemerge298 = 0, $sub1 = 0, $sub170 = 0, $sub218 = 0, $sub225 = 0, $sub238 = 0, $sub245 = 0, $sub263 = 0, $sub284 = 0, $sub294 = 0, $sub307 = 0, $sub308 = 0, $sub328 = 0, $sub348 = 0, $sub354 = 0, $sub359 = 0, $sub362 = 0, $sub37 = 0;
 var $sub37344 = 0, $sub37355 = 0, $sub416 = 0, $sub433 = 0, $sub450 = 0, $sub472 = 0, $sub487 = 0, $sub502 = 0, $sub505 = 0, $sub508 = 0.0, $sub561 = 0, $sub572 = 0.0, $sub575 = 0, $sub60 = 0, $tobool107 = 0, $tobool110 = 0, $tobool125 = 0, $tobool138 = 0, $tobool180 = 0, $tobool247 = 0;
 var $tobool252 = 0, $tobool281 = 0, $tobool289 = 0, $tobool337 = 0, $tobool351 = 0, $tobool428 = 0, $tobool439 = 0, $tobool522 = 0, $tobool56 = 0, $tobool566 = 0, $tobool600 = 0, $tobool95 = 0, $tobool98 = 0, $tobool98271 = 0, $tobool98276 = 0, $tobool98277279 = 0, $x = 0, $y$0323 = 0.0, $y$1 = 0.0, $y$2 = 0.0;
 var $y$3 = 0.0, $z$0 = 0, $z$1 = 0, $z$11322 = 0, $z$12 = 0, $z$3 = 0, $z$3$ph = 0, $z$3$ph407 = 0, $z$4 = 0, $z$6 = 0, $z$8$ph$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $x = sp;
 $0 = (($emin) + ($bits))|0;
 $sub1 = (0 - ($0))|0;
 $rpos = ((($f)) + 4|0);
 $shend = ((($f)) + 104|0);
 $c$addr$0 = $c;$gotdig$0 = 0;
 L1: while(1) {
  switch ($c$addr$0|0) {
  case 46:  {
   label = 7;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $107 = 0;$108 = 0;$c$addr$2 = $c$addr$0;$gotdig$2 = $gotdig$0;$gotrad$0 = 0;
   break L1;
  }
  }
  $1 = HEAP32[$rpos>>2]|0;
  $2 = HEAP32[$shend>>2]|0;
  $cmp2 = ($1>>>0)<($2>>>0);
  if ($cmp2) {
   $incdec$ptr = ((($1)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr;
   $3 = HEAP8[$1>>0]|0;
   $conv = $3&255;
   $c$addr$0$be = $conv;
  } else {
   $call = (___shgetc($f)|0);
   $c$addr$0$be = $call;
  }
  $c$addr$0 = $c$addr$0$be;$gotdig$0 = 1;
 }
 if ((label|0) == 7) {
  $4 = HEAP32[$rpos>>2]|0;
  $5 = HEAP32[$shend>>2]|0;
  $cmp8 = ($4>>>0)<($5>>>0);
  if ($cmp8) {
   $incdec$ptr12 = ((($4)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr12;
   $6 = HEAP8[$4>>0]|0;
   $conv13 = $6&255;
   $cond17 = $conv13;
  } else {
   $call15 = (___shgetc($f)|0);
   $cond17 = $call15;
  }
  $cmp19365 = ($cond17|0)==(48);
  if ($cmp19365) {
   $7 = 0;$8 = 0;
   while(1) {
    $9 = (_i64Add(($7|0),($8|0),-1,-1)|0);
    $10 = (getTempRet0() | 0);
    $11 = HEAP32[$rpos>>2]|0;
    $12 = HEAP32[$shend>>2]|0;
    $cmp25 = ($11>>>0)<($12>>>0);
    if ($cmp25) {
     $incdec$ptr29 = ((($11)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr29;
     $13 = HEAP8[$11>>0]|0;
     $conv30 = $13&255;
     $cond34 = $conv30;
    } else {
     $call32 = (___shgetc($f)|0);
     $cond34 = $call32;
    }
    $cmp19 = ($cond34|0)==(48);
    if ($cmp19) {
     $7 = $9;$8 = $10;
    } else {
     $107 = $9;$108 = $10;$c$addr$2 = $cond34;$gotdig$2 = 1;$gotrad$0 = 1;
     break;
    }
   }
  } else {
   $107 = 0;$108 = 0;$c$addr$2 = $cond17;$gotdig$2 = $gotdig$0;$gotrad$0 = 1;
  }
 }
 HEAP32[$x>>2] = 0;
 $sub37344 = (($c$addr$2) + -48)|0;
 $cmp38345 = ($sub37344>>>0)<(10);
 $cmp40346 = ($c$addr$2|0)==(46);
 $14 = $cmp40346 | $cmp38345;
 L22: do {
  if ($14) {
   $arrayidx77 = ((($x)) + 496|0);
   $109 = $107;$110 = $108;$15 = 0;$16 = 0;$c$addr$3354 = $c$addr$2;$cmp40356 = $cmp40346;$gotdig$3350 = $gotdig$2;$gotrad$1351 = $gotrad$0;$j$0353 = 0;$k$0352 = 0;$lnz$0349 = 0;$sub37355 = $sub37344;
   L24: while(1) {
    do {
     if ($cmp40356) {
      $cond270 = ($gotrad$1351|0)==(0);
      if ($cond270) {
       $111 = $15;$112 = $16;$113 = $15;$114 = $16;$gotdig$4 = $gotdig$3350;$gotrad$2 = 1;$j$2 = $j$0353;$k$2 = $k$0352;$lnz$2 = $lnz$0349;
      } else {
       break L24;
      }
     } else {
      $cmp48 = ($k$0352|0)<(125);
      $17 = (_i64Add(($15|0),($16|0),1,0)|0);
      $18 = (getTempRet0() | 0);
      $cmp51 = ($c$addr$3354|0)!=(48);
      if (!($cmp48)) {
       if (!($cmp51)) {
        $111 = $109;$112 = $110;$113 = $17;$114 = $18;$gotdig$4 = $gotdig$3350;$gotrad$2 = $gotrad$1351;$j$2 = $j$0353;$k$2 = $k$0352;$lnz$2 = $lnz$0349;
        break;
       }
       $20 = HEAP32[$arrayidx77>>2]|0;
       $or = $20 | 1;
       HEAP32[$arrayidx77>>2] = $or;
       $111 = $109;$112 = $110;$113 = $17;$114 = $18;$gotdig$4 = $gotdig$3350;$gotrad$2 = $gotrad$1351;$j$2 = $j$0353;$k$2 = $k$0352;$lnz$2 = 1116;
       break;
      }
      $spec$select = $cmp51 ? $17 : $lnz$0349;
      $tobool56 = ($j$0353|0)==(0);
      $arrayidx64 = (($x) + ($k$0352<<2)|0);
      if ($tobool56) {
       $storemerge298 = $sub37355;
      } else {
       $19 = HEAP32[$arrayidx64>>2]|0;
       $mul = ($19*10)|0;
       $add59 = (($c$addr$3354) + -48)|0;
       $sub60 = (($add59) + ($mul))|0;
       $storemerge298 = $sub60;
      }
      HEAP32[$arrayidx64>>2] = $storemerge298;
      $inc66 = (($j$0353) + 1)|0;
      $cmp67 = ($inc66|0)==(9);
      $inc70 = $cmp67&1;
      $spec$select259 = (($k$0352) + ($inc70))|0;
      $spec$select260 = $cmp67 ? 0 : $inc66;
      $111 = $109;$112 = $110;$113 = $17;$114 = $18;$gotdig$4 = 1;$gotrad$2 = $gotrad$1351;$j$2 = $spec$select260;$k$2 = $spec$select259;$lnz$2 = $spec$select;
     }
    } while(0);
    $21 = HEAP32[$rpos>>2]|0;
    $22 = HEAP32[$shend>>2]|0;
    $cmp84 = ($21>>>0)<($22>>>0);
    if ($cmp84) {
     $incdec$ptr88 = ((($21)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr88;
     $23 = HEAP8[$21>>0]|0;
     $conv89 = $23&255;
     $cond93 = $conv89;
    } else {
     $call91 = (___shgetc($f)|0);
     $cond93 = $call91;
    }
    $sub37 = (($cond93) + -48)|0;
    $cmp38 = ($sub37>>>0)<(10);
    $cmp40 = ($cond93|0)==(46);
    $24 = $cmp40 | $cmp38;
    if ($24) {
     $109 = $111;$110 = $112;$15 = $113;$16 = $114;$c$addr$3354 = $cond93;$cmp40356 = $cmp40;$gotdig$3350 = $gotdig$4;$gotrad$1351 = $gotrad$2;$j$0353 = $j$2;$k$0352 = $k$2;$lnz$0349 = $lnz$2;$sub37355 = $sub37;
    } else {
     $26 = $113;$27 = $111;$29 = $114;$30 = $112;$c$addr$3$lcssa = $cond93;$gotdig$3$lcssa = $gotdig$4;$gotrad$1$lcssa = $gotrad$2;$j$0$lcssa = $j$2;$k$0$lcssa = $k$2;$lnz$0$lcssa = $lnz$2;
     label = 31;
     break L22;
    }
   }
   $tobool98271 = ($gotdig$3350|0)!=(0);
   $115 = $15;$116 = $16;$117 = $109;$118 = $110;$j$0304 = $j$0353;$k$0308 = $k$0352;$lnz$0314 = $lnz$0349;$tobool98277279 = $tobool98271;
   label = 39;
  } else {
   $26 = 0;$27 = $107;$29 = 0;$30 = $108;$c$addr$3$lcssa = $c$addr$2;$gotdig$3$lcssa = $gotdig$2;$gotrad$1$lcssa = $gotrad$0;$j$0$lcssa = 0;$k$0$lcssa = 0;$lnz$0$lcssa = 0;
   label = 31;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   $tobool95 = ($gotrad$1$lcssa|0)==(0);
   $25 = $tobool95 ? $26 : $27;
   $28 = $tobool95 ? $29 : $30;
   $tobool98 = ($gotdig$3$lcssa|0)!=(0);
   $or99 = $c$addr$3$lcssa | 32;
   $cmp100 = ($or99|0)==(101);
   $or$cond262 = $tobool98 & $cmp100;
   if (!($or$cond262)) {
    $cmp121 = ($c$addr$3$lcssa|0)>(-1);
    if ($cmp121) {
     $115 = $26;$116 = $29;$117 = $25;$118 = $28;$j$0304 = $j$0$lcssa;$k$0308 = $k$0$lcssa;$lnz$0314 = $lnz$0$lcssa;$tobool98277279 = $tobool98;
     label = 39;
     break;
    } else {
     $119 = $26;$120 = $29;$121 = $25;$122 = $28;$j$0303 = $j$0$lcssa;$k$0307 = $k$0$lcssa;$lnz$0313 = $lnz$0$lcssa;$tobool98276 = $tobool98;
     label = 41;
     break;
    }
   }
   $31 = (_scanexp($f,$pok)|0);
   $32 = (getTempRet0() | 0);
   $33 = ($31|0)==(0);
   $34 = ($32|0)==(-2147483648);
   $35 = $33 & $34;
   if ($35) {
    $tobool107 = ($pok|0)==(0);
    if ($tobool107) {
     ___shlim($f,0,0);
     $retval$1 = 0.0;
     break;
    }
    $36 = HEAP32[$shend>>2]|0;
    $tobool110 = ($36|0)==(0|0);
    if ($tobool110) {
     $38 = 0;$39 = 0;
    } else {
     $37 = HEAP32[$rpos>>2]|0;
     $incdec$ptr113 = ((($37)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr113;
     $38 = 0;$39 = 0;
    }
   } else {
    $38 = $31;$39 = $32;
   }
   $40 = (_i64Add(($38|0),($39|0),($25|0),($28|0))|0);
   $41 = (getTempRet0() | 0);
   $46 = $40;$47 = $26;$49 = $41;$50 = $29;$j$0302 = $j$0$lcssa;$k$0306 = $k$0$lcssa;$lnz$0312 = $lnz$0$lcssa;
   label = 43;
  }
 } while(0);
 if ((label|0) == 39) {
  $42 = HEAP32[$shend>>2]|0;
  $tobool125 = ($42|0)==(0|0);
  if ($tobool125) {
   $119 = $115;$120 = $116;$121 = $117;$122 = $118;$j$0303 = $j$0304;$k$0307 = $k$0308;$lnz$0313 = $lnz$0314;$tobool98276 = $tobool98277279;
   label = 41;
  } else {
   $43 = HEAP32[$rpos>>2]|0;
   $incdec$ptr128 = ((($43)) + -1|0);
   HEAP32[$rpos>>2] = $incdec$ptr128;
   if ($tobool98277279) {
    $46 = $117;$47 = $115;$49 = $118;$50 = $116;$j$0302 = $j$0304;$k$0306 = $k$0308;$lnz$0312 = $lnz$0314;
    label = 43;
   } else {
    label = 42;
   }
  }
 }
 if ((label|0) == 41) {
  if ($tobool98276) {
   $46 = $121;$47 = $119;$49 = $122;$50 = $120;$j$0302 = $j$0303;$k$0306 = $k$0307;$lnz$0312 = $lnz$0313;
   label = 43;
  } else {
   label = 42;
  }
 }
 do {
  if ((label|0) == 42) {
   $call135 = (___errno_location()|0);
   HEAP32[$call135>>2] = 28;
   ___shlim($f,0,0);
   $retval$1 = 0.0;
  }
  else if ((label|0) == 43) {
   $44 = HEAP32[$x>>2]|0;
   $tobool138 = ($44|0)==(0);
   if ($tobool138) {
    $conv140 = (+($sign|0));
    $mul141 = $conv140 * 0.0;
    $retval$1 = $mul141;
    break;
   }
   $45 = ($46|0)==($47|0);
   $48 = ($49|0)==($50|0);
   $51 = $45 & $48;
   $52 = ($50|0)<(0);
   $53 = ($47>>>0)<(10);
   $54 = ($50|0)==(0);
   $55 = $54 & $53;
   $56 = $52 | $55;
   $or$cond = $56 & $51;
   if ($or$cond) {
    $cmp149 = ($bits|0)>(30);
    $shr = $44 >>> $bits;
    $cmp152 = ($shr|0)==(0);
    $or$cond263 = $cmp149 | $cmp152;
    if ($or$cond263) {
     $conv155 = (+($sign|0));
     $conv157 = (+($44>>>0));
     $mul158 = $conv155 * $conv157;
     $retval$1 = $mul158;
     break;
    }
   }
   $div = (($emin|0) / -2)&-1;
   $57 = ($div|0)<(0);
   $58 = $57 << 31 >> 31;
   $59 = ($49|0)>($58|0);
   $60 = ($46>>>0)>($div>>>0);
   $61 = ($49|0)==($58|0);
   $62 = $61 & $60;
   $63 = $59 | $62;
   if ($63) {
    $call165 = (___errno_location()|0);
    HEAP32[$call165>>2] = 68;
    $conv166 = (+($sign|0));
    $mul167 = $conv166 * 1.7976931348623157E+308;
    $mul168 = $mul167 * 1.7976931348623157E+308;
    $retval$1 = $mul168;
    break;
   }
   $sub170 = (($emin) + -106)|0;
   $64 = ($sub170|0)<(0);
   $65 = $64 << 31 >> 31;
   $66 = ($49|0)<($65|0);
   $67 = ($46>>>0)<($sub170>>>0);
   $68 = ($49|0)==($65|0);
   $69 = $68 & $67;
   $70 = $66 | $69;
   if ($70) {
    $call175 = (___errno_location()|0);
    HEAP32[$call175>>2] = 68;
    $conv176 = (+($sign|0));
    $mul177 = $conv176 * 2.2250738585072014E-308;
    $mul178 = $mul177 * 2.2250738585072014E-308;
    $retval$1 = $mul178;
    break;
   }
   $tobool180 = ($j$0302|0)==(0);
   if ($tobool180) {
    $k$3 = $k$0306;
   } else {
    $cmp183341 = ($j$0302|0)<(9);
    if ($cmp183341) {
     $arrayidx186 = (($x) + ($k$0306<<2)|0);
     $arrayidx186$promoted = HEAP32[$arrayidx186>>2]|0;
     $j$3342 = $j$0302;$mul187343 = $arrayidx186$promoted;
     while(1) {
      $mul187 = ($mul187343*10)|0;
      $inc189 = (($j$3342) + 1)|0;
      $cmp183 = ($j$3342|0)<(8);
      if ($cmp183) {
       $j$3342 = $inc189;$mul187343 = $mul187;
      } else {
       break;
      }
     }
     HEAP32[$arrayidx186>>2] = $mul187;
    }
    $inc191 = (($k$0306) + 1)|0;
    $k$3 = $inc191;
   }
   $cmp194 = ($lnz$0312|0)<(9);
   if ($cmp194) {
    $cmp197 = ($lnz$0312|0)<=($46|0);
    $cmp200 = ($46|0)<(18);
    $or$cond2 = $cmp197 & $cmp200;
    if ($or$cond2) {
     $cmp203 = ($46|0)==(9);
     if ($cmp203) {
      $conv206 = (+($sign|0));
      $71 = HEAP32[$x>>2]|0;
      $conv208 = (+($71>>>0));
      $mul209 = $conv206 * $conv208;
      $retval$1 = $mul209;
      break;
     }
     $cmp211 = ($46|0)<(9);
     if ($cmp211) {
      $conv214 = (+($sign|0));
      $72 = HEAP32[$x>>2]|0;
      $conv216 = (+($72>>>0));
      $mul217 = $conv214 * $conv216;
      $sub218 = (8 - ($46))|0;
      $arrayidx219 = (127984 + ($sub218<<2)|0);
      $73 = HEAP32[$arrayidx219>>2]|0;
      $conv220 = (+($73|0));
      $div221 = $mul217 / $conv220;
      $retval$1 = $div221;
      break;
     }
     $$neg = Math_imul($46, -3)|0;
     $mul224$neg = (($bits) + 27)|0;
     $sub225 = (($mul224$neg) + ($$neg))|0;
     $cmp226 = ($sub225|0)>(30);
     $$pre = HEAP32[$x>>2]|0;
     $shr230 = $$pre >>> $sub225;
     $cmp231 = ($shr230|0)==(0);
     $or$cond394 = $cmp226 | $cmp231;
     if ($or$cond394) {
      $conv234 = (+($sign|0));
      $conv236 = (+($$pre>>>0));
      $mul237 = $conv234 * $conv236;
      $sub238 = (($46) + -10)|0;
      $arrayidx239 = (127984 + ($sub238<<2)|0);
      $74 = HEAP32[$arrayidx239>>2]|0;
      $conv240 = (+($74|0));
      $mul241 = $mul237 * $conv240;
      $retval$1 = $mul241;
      break;
     }
    }
   }
   $z$0 = $k$3;
   while(1) {
    $sub245 = (($z$0) + -1)|0;
    $arrayidx246 = (($x) + ($sub245<<2)|0);
    $75 = HEAP32[$arrayidx246>>2]|0;
    $tobool247 = ($75|0)==(0);
    if ($tobool247) {
     $z$0 = $sub245;
    } else {
     break;
    }
   }
   $rem = (($46|0) % 9)&-1;
   $tobool252 = ($rem|0)==(0);
   if ($tobool252) {
    $a$3$ph = 0;$rp$3$ph = $46;$z$3$ph = $z$0;
   } else {
    $cmp254 = ($46|0)>(-1);
    $add260 = (($rem) + 9)|0;
    $cond262 = $cmp254 ? $rem : $add260;
    $sub263 = (8 - ($cond262))|0;
    $arrayidx264 = (127984 + ($sub263<<2)|0);
    $76 = HEAP32[$arrayidx264>>2]|0;
    $cmp266333 = ($z$0|0)==(0);
    if ($cmp266333) {
     $a$0$lcssa381 = 0;$rp$0$lcssa380 = $46;$z$1 = 0;
    } else {
     $div275 = (1000000000 / ($76|0))&-1;
     $a$0335 = 0;$carry$0337 = 0;$k$4336 = 0;$rp$0334 = $46;
     while(1) {
      $arrayidx269 = (($x) + ($k$4336<<2)|0);
      $77 = HEAP32[$arrayidx269>>2]|0;
      $div272 = (($77>>>0) / ($76>>>0))&-1;
      $78 = Math_imul($div272, $76)|0;
      $79 = (($77) - ($78))|0;
      $add273 = (($div272) + ($carry$0337))|0;
      HEAP32[$arrayidx269>>2] = $add273;
      $mul276 = Math_imul($div275, $79)|0;
      $cmp277 = ($k$4336|0)==($a$0335|0);
      $tobool281 = ($add273|0)==(0);
      $or$cond264 = $cmp277 & $tobool281;
      $add283 = (($a$0335) + 1)|0;
      $and = $add283 & 127;
      $sub284 = (($rp$0334) + -9)|0;
      $spec$select292 = $or$cond264 ? $sub284 : $rp$0334;
      $spec$select293 = $or$cond264 ? $and : $a$0335;
      $inc287 = (($k$4336) + 1)|0;
      $cmp266 = ($inc287|0)==($z$0|0);
      if ($cmp266) {
       break;
      } else {
       $a$0335 = $spec$select293;$carry$0337 = $mul276;$k$4336 = $inc287;$rp$0334 = $spec$select292;
      }
     }
     $tobool289 = ($mul276|0)==(0);
     if ($tobool289) {
      $a$0$lcssa381 = $spec$select293;$rp$0$lcssa380 = $spec$select292;$z$1 = $z$0;
     } else {
      $arrayidx292 = (($x) + ($z$0<<2)|0);
      $inc291 = (($z$0) + 1)|0;
      HEAP32[$arrayidx292>>2] = $mul276;
      $a$0$lcssa381 = $spec$select293;$rp$0$lcssa380 = $spec$select292;$z$1 = $inc291;
     }
    }
    $sub294 = (9 - ($cond262))|0;
    $add295 = (($sub294) + ($rp$0$lcssa380))|0;
    $a$3$ph = $a$0$lcssa381;$rp$3$ph = $add295;$z$3$ph = $z$1;
   }
   $a$3$ph408 = $a$3$ph;$e2$0$ph = 0;$rp$3$ph406 = $rp$3$ph;$z$3$ph407 = $z$3$ph;
   L107: while(1) {
    $cmp297 = ($rp$3$ph406|0)<(18);
    $cmp300 = ($rp$3$ph406|0)==(18);
    $arrayidx302 = (($x) + ($a$3$ph408<<2)|0);
    $e2$0 = $e2$0$ph;$z$3 = $z$3$ph407;
    while(1) {
     if (!($cmp297)) {
      if (!($cmp300)) {
       $rp$5$ph = $rp$3$ph406;
       break L107;
      }
      $80 = HEAP32[$arrayidx302>>2]|0;
      $cmp303 = ($80>>>0)<(9007199);
      if (!($cmp303)) {
       $rp$5$ph = 18;
       break L107;
      }
     }
     $sub308 = (($z$3) + 127)|0;
     $carry306$0 = 0;$k$5$in = $sub308;$z$4 = $z$3;
     while(1) {
      $k$5 = $k$5$in & 127;
      $arrayidx312 = (($x) + ($k$5<<2)|0);
      $81 = HEAP32[$arrayidx312>>2]|0;
      $82 = (_bitshift64Shl(($81|0),0,29)|0);
      $83 = (getTempRet0() | 0);
      $84 = (_i64Add(($82|0),($83|0),($carry306$0|0),0)|0);
      $85 = (getTempRet0() | 0);
      $86 = ($85>>>0)>(0);
      $87 = ($84>>>0)>(1000000000);
      $88 = ($85|0)==(0);
      $89 = $88 & $87;
      $90 = $86 | $89;
      if ($90) {
       $91 = (___udivdi3(($84|0),($85|0),1000000000,0)|0);
       $92 = (getTempRet0() | 0);
       $93 = (___muldi3(($91|0),($92|0),1000000000,0)|0);
       $94 = (getTempRet0() | 0);
       $95 = (_i64Subtract(($84|0),($85|0),($93|0),($94|0))|0);
       $96 = (getTempRet0() | 0);
       $add315$sink$off0 = $95;$carry306$1 = $91;
      } else {
       $add315$sink$off0 = $84;$carry306$1 = 0;
      }
      HEAP32[$arrayidx312>>2] = $add315$sink$off0;
      $sub328 = (($z$4) + 127)|0;
      $and329 = $sub328 & 127;
      $cmp330 = ($k$5|0)!=($and329|0);
      $cmp333 = ($k$5|0)==($a$3$ph408|0);
      $or$cond265 = $cmp330 | $cmp333;
      $tobool337 = ($add315$sink$off0|0)==(0);
      $spec$select266 = $tobool337 ? $k$5 : $z$4;
      $spec$select294 = $or$cond265 ? $z$4 : $spec$select266;
      $sub348 = (($k$5) + -1)|0;
      if ($cmp333) {
       break;
      } else {
       $carry306$0 = $carry306$1;$k$5$in = $sub348;$z$4 = $spec$select294;
      }
     }
     $sub307 = (($e2$0) + -29)|0;
     $tobool351 = ($carry306$1|0)==(0);
     if ($tobool351) {
      $e2$0 = $sub307;$z$3 = $z$4;
     } else {
      break;
     }
    }
    $add353 = (($rp$3$ph406) + 9)|0;
    $sub354 = (($a$3$ph408) + 127)|0;
    $and355 = $sub354 & 127;
    $cmp356 = ($and355|0)==($spec$select294|0);
    $sub359 = (($spec$select294) + 127)|0;
    $and360 = $sub359 & 127;
    $sub362 = (($spec$select294) + 126)|0;
    $and363 = $sub362 & 127;
    $arrayidx364 = (($x) + ($and363<<2)|0);
    if ($cmp356) {
     $arrayidx361 = (($x) + ($and360<<2)|0);
     $97 = HEAP32[$arrayidx361>>2]|0;
     $98 = HEAP32[$arrayidx364>>2]|0;
     $or365 = $98 | $97;
     HEAP32[$arrayidx364>>2] = $or365;
     $z$6 = $and360;
    } else {
     $z$6 = $z$4;
    }
    $arrayidx367 = (($x) + ($and355<<2)|0);
    HEAP32[$arrayidx367>>2] = $carry306$1;
    $a$3$ph408 = $and355;$e2$0$ph = $sub307;$rp$3$ph406 = $add353;$z$3$ph407 = $z$6;
   }
   $a$5$ph$ph = $a$3$ph408;$e2$1$ph$ph = $e2$0;$rp$5$ph405$ph = $rp$5$ph;$z$8$ph$ph = $z$3;
   L126: while(1) {
    $add441 = (($z$8$ph$ph) + 1)|0;
    $and442 = $add441 & 127;
    $sub450 = (($z$8$ph$ph) + 127)|0;
    $and451 = $sub450 & 127;
    $arrayidx452 = (($x) + ($and451<<2)|0);
    $a$5$ph = $a$5$ph$ph;$e2$1$ph = $e2$1$ph$ph;$rp$5$ph405 = $rp$5$ph405$ph;
    while(1) {
     $cmp400 = ($rp$5$ph405|0)==(18);
     $cmp404 = ($rp$5$ph405|0)>(27);
     $spec$select267 = $cmp404 ? 9 : 1;
     $a$5 = $a$5$ph;$e2$1 = $e2$1$ph;
     while(1) {
      $i$0325 = 0;
      while(1) {
       $add375 = (($i$0325) + ($a$5))|0;
       $and376 = $add375 & 127;
       $cmp377 = ($and376|0)==($z$8$ph$ph|0);
       if ($cmp377) {
        label = 94;
        break;
       }
       $arrayidx380 = (($x) + ($and376<<2)|0);
       $99 = HEAP32[$arrayidx380>>2]|0;
       $arrayidx381 = (130000 + ($i$0325<<2)|0);
       $100 = HEAP32[$arrayidx381>>2]|0;
       $cmp382 = ($99>>>0)<($100>>>0);
       if ($cmp382) {
        label = 94;
        break;
       }
       $cmp390 = ($99>>>0)>($100>>>0);
       if ($cmp390) {
        break;
       }
       $inc395 = (($i$0325) + 1)|0;
       $cmp372 = ($inc395>>>0)<(2);
       if ($cmp372) {
        $i$0325 = 1;
       } else {
        label = 94;
        break;
       }
      }
      if ((label|0) == 94) {
       label = 0;
       if ($cmp400) {
        break L126;
       }
      }
      $add408 = (($spec$select267) + ($e2$1))|0;
      $cmp410326 = ($a$5|0)==($z$8$ph$ph|0);
      if ($cmp410326) {
       $a$5 = $z$8$ph$ph;$e2$1 = $add408;
      } else {
       break;
      }
     }
     $shl415 = 1 << $spec$select267;
     $sub416 = (($shl415) + -1)|0;
     $shr422 = 1000000000 >>> $spec$select267;
     $a$6328 = $a$5;$carry370$0330 = 0;$k$6329 = $a$5;$rp$6327 = $rp$5$ph405;
     while(1) {
      $arrayidx414 = (($x) + ($k$6329<<2)|0);
      $101 = HEAP32[$arrayidx414>>2]|0;
      $and417 = $101 & $sub416;
      $shr419 = $101 >>> $spec$select267;
      $add420 = (($shr419) + ($carry370$0330))|0;
      HEAP32[$arrayidx414>>2] = $add420;
      $mul423 = Math_imul($and417, $shr422)|0;
      $cmp424 = ($k$6329|0)==($a$6328|0);
      $tobool428 = ($add420|0)==(0);
      $or$cond268 = $cmp424 & $tobool428;
      $add430 = (($a$6328) + 1)|0;
      $and431 = $add430 & 127;
      $sub433 = (($rp$6327) + -9)|0;
      $spec$select295 = $or$cond268 ? $sub433 : $rp$6327;
      $spec$select296 = $or$cond268 ? $and431 : $a$6328;
      $add436 = (($k$6329) + 1)|0;
      $and437 = $add436 & 127;
      $cmp410 = ($and437|0)==($z$8$ph$ph|0);
      if ($cmp410) {
       break;
      } else {
       $a$6328 = $spec$select296;$carry370$0330 = $mul423;$k$6329 = $and437;$rp$6327 = $spec$select295;
      }
     }
     $tobool439 = ($mul423|0)==(0);
     if (!($tobool439)) {
      $cmp443 = ($and442|0)==($spec$select296|0);
      if (!($cmp443)) {
       break;
      }
      $102 = HEAP32[$arrayidx452>>2]|0;
      $or453 = $102 | 1;
      HEAP32[$arrayidx452>>2] = $or453;
     }
     $a$5$ph = $spec$select296;$e2$1$ph = $add408;$rp$5$ph405 = $spec$select295;
    }
    $arrayidx446 = (($x) + ($z$8$ph$ph<<2)|0);
    HEAP32[$arrayidx446>>2] = $mul423;
    $a$5$ph$ph = $spec$select296;$e2$1$ph$ph = $add408;$rp$5$ph405$ph = $spec$select295;$z$8$ph$ph = $and442;
   }
   $i$4324 = 0;$y$0323 = 0.0;$z$11322 = $z$8$ph$ph;
   while(1) {
    $add465 = (($i$4324) + ($a$5))|0;
    $and466 = $add465 & 127;
    $cmp467 = ($and466|0)==($z$11322|0);
    $add470 = (($z$11322) + 1)|0;
    $and471 = $add470 & 127;
    if ($cmp467) {
     $sub472 = (($and471) + -1)|0;
     $arrayidx473 = (($x) + ($sub472<<2)|0);
     HEAP32[$arrayidx473>>2] = 0;
     $z$12 = $and471;
    } else {
     $z$12 = $z$11322;
    }
    $mul475 = $y$0323 * 1.0E+9;
    $arrayidx478 = (($x) + ($and466<<2)|0);
    $103 = HEAP32[$arrayidx478>>2]|0;
    $conv479 = (+($103>>>0));
    $add480 = $mul475 + $conv479;
    $inc482 = (($i$4324) + 1)|0;
    $exitcond = ($inc482|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $i$4324 = $inc482;$y$0323 = $add480;$z$11322 = $z$12;
    }
   }
   $conv484 = (+($sign|0));
   $mul485 = $add480 * $conv484;
   $add486 = (($e2$1) + 53)|0;
   $sub487 = (($add486) - ($emin))|0;
   $cmp488 = ($sub487|0)<($bits|0);
   $104 = ($sub487|0)>(0);
   $spec$store$select = $104 ? $sub487 : 0;
   $bits$addr$0 = $cmp488 ? $spec$store$select : $bits;
   $cmp498 = ($bits$addr$0|0)<(53);
   if ($cmp498) {
    $sub502 = (105 - ($bits$addr$0))|0;
    $call503 = (+_scalbn(1.0,$sub502));
    $call504 = (+_copysignl($call503,$mul485));
    $sub505 = (53 - ($bits$addr$0))|0;
    $call506 = (+_scalbn(1.0,$sub505));
    $call507 = (+_fmodl($mul485,$call506));
    $sub508 = $mul485 - $call507;
    $add509 = $call504 + $sub508;
    $bias$0 = $call504;$frac$0 = $call507;$y$1 = $add509;
   } else {
    $bias$0 = 0.0;$frac$0 = 0.0;$y$1 = $mul485;
   }
   $add511 = (($a$5) + 2)|0;
   $and512 = $add511 & 127;
   $cmp513 = ($and512|0)==($z$12|0);
   if ($cmp513) {
    $frac$3 = $frac$0;
   } else {
    $arrayidx518 = (($x) + ($and512<<2)|0);
    $105 = HEAP32[$arrayidx518>>2]|0;
    $cmp519 = ($105>>>0)<(500000000);
    do {
     if ($cmp519) {
      $tobool522 = ($105|0)==(0);
      if ($tobool522) {
       $add525 = (($a$5) + 3)|0;
       $and526 = $add525 & 127;
       $cmp527 = ($and526|0)==($z$12|0);
       if ($cmp527) {
        $frac$1 = $frac$0;
        break;
       }
      }
      $mul531 = $conv484 * 0.25;
      $add532 = $mul531 + $frac$0;
      $frac$1 = $add532;
     } else {
      $cmp534 = ($105|0)==(500000000);
      if (!($cmp534)) {
       $mul538 = $conv484 * 0.75;
       $add539 = $mul538 + $frac$0;
       $frac$1 = $add539;
       break;
      }
      $add545 = (($a$5) + 3)|0;
      $and546 = $add545 & 127;
      $cmp547 = ($and546|0)==($z$12|0);
      if ($cmp547) {
       $mul551 = $conv484 * 0.5;
       $add552 = $mul551 + $frac$0;
       $frac$1 = $add552;
       break;
      } else {
       $mul555 = $conv484 * 0.75;
       $add556 = $mul555 + $frac$0;
       $frac$1 = $add556;
       break;
      }
     }
    } while(0);
    $sub561 = (53 - ($bits$addr$0))|0;
    $cmp562 = ($sub561|0)>(1);
    if ($cmp562) {
     $call565 = (+_fmodl($frac$1,1.0));
     $tobool566 = $call565 != 0.0;
     if ($tobool566) {
      $frac$3 = $frac$1;
     } else {
      $inc568 = $frac$1 + 1.0;
      $frac$3 = $inc568;
     }
    } else {
     $frac$3 = $frac$1;
    }
   }
   $add571 = $y$1 + $frac$3;
   $sub572 = $add571 - $bias$0;
   $and574 = $add486 & 2147483647;
   $sub575 = (-2 - ($0))|0;
   $cmp576 = ($and574|0)>($sub575|0);
   do {
    if ($cmp576) {
     $call579 = (+Math_abs((+$sub572)));
     $cmp580 = !($call579 >= 9007199254740992.0);
     $mul591 = $sub572 * 0.5;
     $not$cmp580 = $cmp580 ^ 1;
     $inc592 = $not$cmp580&1;
     $e2$3 = (($e2$1) + ($inc592))|0;
     $y$2 = $cmp580 ? $sub572 : $mul591;
     $106 = (($e2$3) + 50)|0;
     $cmp595 = ($106|0)>($sub1|0);
     if (!($cmp595)) {
      $cmp587 = ($bits$addr$0|0)!=($sub487|0);
      $narrow = $cmp587 | $cmp580;
      $denormal$2$v = $cmp488 & $narrow;
      $tobool600 = $frac$3 != 0.0;
      $or$cond5 = $tobool600 & $denormal$2$v;
      if (!($or$cond5)) {
       $e2$4 = $e2$3;$y$3 = $y$2;
       break;
      }
     }
     $call602 = (___errno_location()|0);
     HEAP32[$call602>>2] = 68;
     $e2$4 = $e2$3;$y$3 = $y$2;
    } else {
     $e2$4 = $e2$1;$y$3 = $sub572;
    }
   } while(0);
   $call605 = (+_scalbnl($y$3,$e2$4));
   $retval$1 = $call605;
  }
 } while(0);
 STACKTOP = sp;return (+$retval$1);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $c$0 = 0, $c$146 = 0, $c$241 = 0, $call = 0, $call104 = 0, $call17 = 0, $call58 = 0, $call85 = 0, $cmp = 0, $cmp10 = 0;
 var $cmp20 = 0, $cmp32 = 0, $cmp4 = 0, $cmp44 = 0, $cmp46 = 0, $cmp51 = 0, $cmp64 = 0, $cmp6440 = 0, $cmp78 = 0, $cmp91 = 0, $cmp9138 = 0, $cmp97 = 0, $cond = 0, $cond106 = 0, $cond19 = 0, $cond60 = 0, $cond87 = 0, $conv = 0, $conv102 = 0, $conv15 = 0;
 var $conv56 = 0, $conv7 = 0, $conv83 = 0, $incdec$ptr = 0, $incdec$ptr101 = 0, $incdec$ptr112 = 0, $incdec$ptr14 = 0, $incdec$ptr27 = 0, $incdec$ptr39 = 0, $incdec$ptr55 = 0, $incdec$ptr82 = 0, $mul = 0, $neg$0 = 0, $or$cond1 = 0, $rpos = 0, $shend = 0, $sub = 0, $sub31$pre$phiZ2D = 0, $sub43 = 0, $sub48 = 0;
 var $sub63 = 0, $sub90 = 0, $tobool = 0, $tobool109 = 0, $tobool115 = 0, $tobool24 = 0, $tobool36 = 0, $x$047 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rpos = ((($f)) + 4|0);
 $0 = HEAP32[$rpos>>2]|0;
 $shend = ((($f)) + 104|0);
 $1 = HEAP32[$shend>>2]|0;
 $cmp = ($0>>>0)<($1>>>0);
 if ($cmp) {
  $incdec$ptr = ((($0)) + 1|0);
  HEAP32[$rpos>>2] = $incdec$ptr;
  $2 = HEAP8[$0>>0]|0;
  $conv = $2&255;
  $cond = $conv;
 } else {
  $call = (___shgetc($f)|0);
  $cond = $call;
 }
 switch ($cond|0) {
 case 43: case 45:  {
  $cmp4 = ($cond|0)==(45);
  $conv7 = $cmp4&1;
  $3 = HEAP32[$rpos>>2]|0;
  $4 = HEAP32[$shend>>2]|0;
  $cmp10 = ($3>>>0)<($4>>>0);
  if ($cmp10) {
   $incdec$ptr14 = ((($3)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr14;
   $5 = HEAP8[$3>>0]|0;
   $conv15 = $5&255;
   $cond19 = $conv15;
  } else {
   $call17 = (___shgetc($f)|0);
   $cond19 = $call17;
  }
  $sub = (($cond19) + -48)|0;
  $cmp20 = ($sub>>>0)>(9);
  $tobool = ($pok|0)!=(0);
  $or$cond1 = $tobool & $cmp20;
  if ($or$cond1) {
   $6 = HEAP32[$shend>>2]|0;
   $tobool24 = ($6|0)==(0|0);
   if ($tobool24) {
    $45 = -2147483648;$46 = 0;
   } else {
    $7 = HEAP32[$rpos>>2]|0;
    $incdec$ptr27 = ((($7)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr27;
    label = 14;
   }
  } else {
   $c$0 = $cond19;$neg$0 = $conv7;$sub31$pre$phiZ2D = $sub;
   label = 12;
  }
  break;
 }
 default: {
  $$pre = (($cond) + -48)|0;
  $c$0 = $cond;$neg$0 = 0;$sub31$pre$phiZ2D = $$pre;
  label = 12;
 }
 }
 if ((label|0) == 12) {
  $cmp32 = ($sub31$pre$phiZ2D>>>0)>(9);
  if ($cmp32) {
   label = 14;
  } else {
   $c$146 = $c$0;$x$047 = 0;
   while(1) {
    $mul = ($x$047*10)|0;
    $add = (($c$146) + -48)|0;
    $sub48 = (($add) + ($mul))|0;
    $9 = HEAP32[$rpos>>2]|0;
    $10 = HEAP32[$shend>>2]|0;
    $cmp51 = ($9>>>0)<($10>>>0);
    if ($cmp51) {
     $incdec$ptr55 = ((($9)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr55;
     $11 = HEAP8[$9>>0]|0;
     $conv56 = $11&255;
     $cond60 = $conv56;
    } else {
     $call58 = (___shgetc($f)|0);
     $cond60 = $call58;
    }
    $sub43 = (($cond60) + -48)|0;
    $cmp44 = ($sub43>>>0)<(10);
    $cmp46 = ($sub48|0)<(214748364);
    $12 = $cmp44 & $cmp46;
    if ($12) {
     $c$146 = $cond60;$x$047 = $sub48;
    } else {
     break;
    }
   }
   $13 = ($sub48|0)<(0);
   $14 = $13 << 31 >> 31;
   $cmp6440 = ($sub43>>>0)<(10);
   if ($cmp6440) {
    $15 = $sub48;$16 = $14;$c$241 = $cond60;
    while(1) {
     $17 = (___muldi3(($15|0),($16|0),10,0)|0);
     $18 = (getTempRet0() | 0);
     $19 = ($c$241|0)<(0);
     $20 = $19 << 31 >> 31;
     $21 = (_i64Add(($c$241|0),($20|0),-48,-1)|0);
     $22 = (getTempRet0() | 0);
     $23 = (_i64Add(($21|0),($22|0),($17|0),($18|0))|0);
     $24 = (getTempRet0() | 0);
     $25 = HEAP32[$rpos>>2]|0;
     $26 = HEAP32[$shend>>2]|0;
     $cmp78 = ($25>>>0)<($26>>>0);
     if ($cmp78) {
      $incdec$ptr82 = ((($25)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr82;
      $27 = HEAP8[$25>>0]|0;
      $conv83 = $27&255;
      $cond87 = $conv83;
     } else {
      $call85 = (___shgetc($f)|0);
      $cond87 = $call85;
     }
     $sub63 = (($cond87) + -48)|0;
     $cmp64 = ($sub63>>>0)<(10);
     $28 = ($24|0)<(21474836);
     $29 = ($23>>>0)<(2061584302);
     $30 = ($24|0)==(21474836);
     $31 = $30 & $29;
     $32 = $28 | $31;
     $33 = $cmp64 & $32;
     if ($33) {
      $15 = $23;$16 = $24;$c$241 = $cond87;
     } else {
      break;
     }
    }
    $cmp9138 = ($sub63>>>0)<(10);
    if ($cmp9138) {
     while(1) {
      $34 = HEAP32[$rpos>>2]|0;
      $35 = HEAP32[$shend>>2]|0;
      $cmp97 = ($34>>>0)<($35>>>0);
      if ($cmp97) {
       $incdec$ptr101 = ((($34)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr101;
       $36 = HEAP8[$34>>0]|0;
       $conv102 = $36&255;
       $cond106 = $conv102;
      } else {
       $call104 = (___shgetc($f)|0);
       $cond106 = $call104;
      }
      $sub90 = (($cond106) + -48)|0;
      $cmp91 = ($sub90>>>0)<(10);
      if (!($cmp91)) {
       $39 = $23;$40 = $24;
       break;
      }
     }
    } else {
     $39 = $23;$40 = $24;
    }
   } else {
    $39 = $sub48;$40 = $14;
   }
   $37 = HEAP32[$shend>>2]|0;
   $tobool109 = ($37|0)==(0|0);
   if (!($tobool109)) {
    $38 = HEAP32[$rpos>>2]|0;
    $incdec$ptr112 = ((($38)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr112;
   }
   $tobool115 = ($neg$0|0)==(0);
   $41 = (_i64Subtract(0,0,($39|0),($40|0))|0);
   $42 = (getTempRet0() | 0);
   $43 = $tobool115 ? $39 : $41;
   $44 = $tobool115 ? $40 : $42;
   $45 = $44;$46 = $43;
  }
 }
 if ((label|0) == 14) {
  $$pr = HEAP32[$shend>>2]|0;
  $tobool36 = ($$pr|0)==(0|0);
  if ($tobool36) {
   $45 = -2147483648;$46 = 0;
  } else {
   $8 = HEAP32[$rpos>>2]|0;
   $incdec$ptr39 = ((($8)) + -1|0);
   HEAP32[$rpos>>2] = $incdec$ptr39;
   $45 = -2147483648;$46 = 0;
  }
 }
 setTempRet0(($45) | 0);
 return ($46|0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $add = 0, $add14 = 0, $add21 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp8 = 0, $mul = 0.0, $mul10 = 0.0, $mul13 = 0.0, $mul22 = 0.0, $mul3 = 0.0, $n$addr$0 = 0, $spec$select = 0, $spec$select20 = 0.0;
 var $spec$select21 = 0, $spec$select22 = 0.0, $spec$store$select = 0, $spec$store$select1 = 0, $sub = 0, $sub4 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($n|0)>(1023);
 if ($cmp) {
  $mul = $x * 8.9884656743115795E+307;
  $sub = (($n) + -1023)|0;
  $cmp1 = ($n|0)>(2046);
  $mul3 = $mul * 8.9884656743115795E+307;
  $sub4 = (($n) + -2046)|0;
  $0 = ($sub4|0)<(1023);
  $spec$store$select = $0 ? $sub4 : 1023;
  $spec$select = $cmp1 ? $spec$store$select : $sub;
  $spec$select20 = $cmp1 ? $mul3 : $mul;
  $n$addr$0 = $spec$select;$y$0 = $spec$select20;
 } else {
  $cmp8 = ($n|0)<(-1022);
  if ($cmp8) {
   $mul10 = $x * 2.2250738585072014E-308;
   $add = (($n) + 1022)|0;
   $cmp11 = ($n|0)<(-2044);
   $mul13 = $mul10 * 2.2250738585072014E-308;
   $add14 = (($n) + 2044)|0;
   $1 = ($add14|0)>(-1022);
   $spec$store$select1 = $1 ? $add14 : -1022;
   $spec$select21 = $cmp11 ? $spec$store$select1 : $add;
   $spec$select22 = $cmp11 ? $mul13 : $mul10;
   $n$addr$0 = $spec$select21;$y$0 = $spec$select22;
  } else {
   $n$addr$0 = $n;$y$0 = $x;
  }
 }
 $add21 = (($n$addr$0) + 1023)|0;
 $2 = (_bitshift64Shl(($add21|0),0,52)|0);
 $3 = (getTempRet0() | 0);
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $3;$4 = +HEAPF64[tempDoublePtr>>3];
 $mul22 = $y$0 * $4;
 return (+$mul22);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_copysign($x,$y));
 return (+$call);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_fmod($x,$y));
 return (+$call);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_scalbn($x,$n));
 return (+$call);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add128 = 0;
 var $add68 = 0, $cmp119 = 0, $cmp27 = 0, $cmp79 = 0, $cmp7965 = 0, $cmp85$lcssa = 0, $cmp8571 = 0, $conv = 0, $conv5 = 0, $dec = 0, $dec117 = 0, $dec64 = 0, $dec96 = 0, $div = 0.0, $ex$0$lcssa = 0, $ex$081 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$268 = 0, $ex$3$lcssa = 0;
 var $ex$362 = 0, $ey$0$lcssa = 0, $ey$077 = 0, $ey$1 = 0, $mul = 0.0, $mul107 = 0.0, $mul42 = 0.0, $mul91 = 0.0, $or$cond = 0, $retval$0 = 0.0, $spec$select = 0.0, $tobool = 0, $tobool54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = (getTempRet0() | 0);
 $conv = $4 & 2047;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = (getTempRet0() | 0);
 $conv5 = $6 & 2047;
 $8 = $1 & -2147483648;
 $9 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $10 = (getTempRet0() | 0);
 $11 = ($9|0)==(0);
 $12 = ($10|0)==(0);
 $13 = $11 & $12;
 L1: do {
  if ($13) {
   label = 3;
  } else {
   $14 = (___DOUBLE_BITS_389($y)|0);
   $15 = (getTempRet0() | 0);
   $16 = $15 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($14>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $cmp27 = ($conv|0)==(2047);
   $or$cond = $cmp27 | $21;
   if ($or$cond) {
    label = 3;
   } else {
    $22 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $23 = (getTempRet0() | 0);
    $24 = ($23>>>0)>($10>>>0);
    $25 = ($22>>>0)>($9>>>0);
    $26 = ($23|0)==($10|0);
    $27 = $26 & $25;
    $28 = $24 | $27;
    if (!($28)) {
     $29 = ($22|0)==($9|0);
     $30 = ($23|0)==($10|0);
     $31 = $29 & $30;
     $mul42 = $x * 0.0;
     $spec$select = $31 ? $mul42 : $x;
     return (+$spec$select);
    }
    $tobool = ($conv|0)==(0);
    if ($tobool) {
     $32 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $33 = (getTempRet0() | 0);
     $34 = ($33|0)>(-1);
     $35 = ($32>>>0)>(4294967295);
     $36 = ($33|0)==(-1);
     $37 = $36 & $35;
     $38 = $34 | $37;
     if ($38) {
      $39 = $32;$40 = $33;$ex$081 = 0;
      while(1) {
       $dec = (($ex$081) + -1)|0;
       $41 = (_bitshift64Shl(($39|0),($40|0),1)|0);
       $42 = (getTempRet0() | 0);
       $43 = ($42|0)>(-1);
       $44 = ($41>>>0)>(4294967295);
       $45 = ($42|0)==(-1);
       $46 = $45 & $44;
       $47 = $43 | $46;
       if ($47) {
        $39 = $41;$40 = $42;$ex$081 = $dec;
       } else {
        $ex$0$lcssa = $dec;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $add = (1 - ($ex$0$lcssa))|0;
     $48 = (_bitshift64Shl(($0|0),($1|0),($add|0))|0);
     $49 = (getTempRet0() | 0);
     $72 = $48;$73 = $49;$ex$1 = $ex$0$lcssa;
    } else {
     $50 = $1 & 1048575;
     $51 = $50 | 1048576;
     $72 = $0;$73 = $51;$ex$1 = $conv;
    }
    $tobool54 = ($conv5|0)==(0);
    if ($tobool54) {
     $52 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $53 = (getTempRet0() | 0);
     $54 = ($53|0)>(-1);
     $55 = ($52>>>0)>(4294967295);
     $56 = ($53|0)==(-1);
     $57 = $56 & $55;
     $58 = $54 | $57;
     if ($58) {
      $59 = $52;$60 = $53;$ey$077 = 0;
      while(1) {
       $dec64 = (($ey$077) + -1)|0;
       $61 = (_bitshift64Shl(($59|0),($60|0),1)|0);
       $62 = (getTempRet0() | 0);
       $63 = ($62|0)>(-1);
       $64 = ($61>>>0)>(4294967295);
       $65 = ($62|0)==(-1);
       $66 = $65 & $64;
       $67 = $63 | $66;
       if ($67) {
        $59 = $61;$60 = $62;$ey$077 = $dec64;
       } else {
        $ey$0$lcssa = $dec64;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $add68 = (1 - ($ey$0$lcssa))|0;
     $68 = (_bitshift64Shl(($2|0),($3|0),($add68|0))|0);
     $69 = (getTempRet0() | 0);
     $74 = $68;$75 = $69;$ey$1 = $ey$0$lcssa;
    } else {
     $70 = $3 & 1048575;
     $71 = $70 | 1048576;
     $74 = $2;$75 = $71;$ey$1 = $conv5;
    }
    $cmp7965 = ($ex$1|0)>($ey$1|0);
    $76 = (_i64Subtract(($72|0),($73|0),($74|0),($75|0))|0);
    $77 = (getTempRet0() | 0);
    $78 = ($77|0)>(-1);
    $79 = ($76>>>0)>(4294967295);
    $80 = ($77|0)==(-1);
    $81 = $80 & $79;
    $82 = $78 | $81;
    L25: do {
     if ($cmp7965) {
      $136 = $72;$137 = $73;$84 = $76;$86 = $77;$cmp8571 = $82;$ex$268 = $ex$1;
      while(1) {
       if ($cmp8571) {
        $83 = ($84|0)==(0);
        $85 = ($86|0)==(0);
        $87 = $83 & $85;
        if ($87) {
         break;
        } else {
         $88 = $84;$89 = $86;
        }
       } else {
        $88 = $136;$89 = $137;
       }
       $90 = (_bitshift64Shl(($88|0),($89|0),1)|0);
       $91 = (getTempRet0() | 0);
       $dec96 = (($ex$268) + -1)|0;
       $cmp79 = ($dec96|0)>($ey$1|0);
       $92 = (_i64Subtract(($90|0),($91|0),($74|0),($75|0))|0);
       $93 = (getTempRet0() | 0);
       $94 = ($93|0)>(-1);
       $95 = ($92>>>0)>(4294967295);
       $96 = ($93|0)==(-1);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($cmp79) {
        $136 = $90;$137 = $91;$84 = $92;$86 = $93;$cmp8571 = $98;$ex$268 = $dec96;
       } else {
        $100 = $92;$102 = $93;$134 = $90;$135 = $91;$cmp85$lcssa = $98;$ex$2$lcssa = $dec96;
        break L25;
       }
      }
      $mul91 = $x * 0.0;
      $retval$0 = $mul91;
      break L1;
     } else {
      $100 = $76;$102 = $77;$134 = $72;$135 = $73;$cmp85$lcssa = $82;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($cmp85$lcssa) {
     $99 = ($100|0)==(0);
     $101 = ($102|0)==(0);
     $103 = $99 & $101;
     if ($103) {
      $mul107 = $x * 0.0;
      $retval$0 = $mul107;
      break;
     } else {
      $105 = $102;$107 = $100;
     }
    } else {
     $105 = $135;$107 = $134;
    }
    $104 = ($105>>>0)<(1048576);
    $106 = ($107>>>0)<(0);
    $108 = ($105|0)==(1048576);
    $109 = $108 & $106;
    $110 = $104 | $109;
    if ($110) {
     $111 = $107;$112 = $105;$ex$362 = $ex$2$lcssa;
     while(1) {
      $113 = (_bitshift64Shl(($111|0),($112|0),1)|0);
      $114 = (getTempRet0() | 0);
      $dec117 = (($ex$362) + -1)|0;
      $115 = ($114>>>0)<(1048576);
      $116 = ($113>>>0)<(0);
      $117 = ($114|0)==(1048576);
      $118 = $117 & $116;
      $119 = $115 | $118;
      if ($119) {
       $111 = $113;$112 = $114;$ex$362 = $dec117;
      } else {
       $120 = $113;$121 = $114;$ex$3$lcssa = $dec117;
       break;
      }
     }
    } else {
     $120 = $107;$121 = $105;$ex$3$lcssa = $ex$2$lcssa;
    }
    $cmp119 = ($ex$3$lcssa|0)>(0);
    if ($cmp119) {
     $122 = (_i64Add(($120|0),($121|0),0,-1048576)|0);
     $123 = (getTempRet0() | 0);
     $124 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $125 = (getTempRet0() | 0);
     $126 = $122 | $124;
     $127 = $123 | $125;
     $131 = $127;$132 = $126;
    } else {
     $add128 = (1 - ($ex$3$lcssa))|0;
     $128 = (_bitshift64Lshr(($120|0),($121|0),($add128|0))|0);
     $129 = (getTempRet0() | 0);
     $131 = $129;$132 = $128;
    }
    $130 = $131 | $8;
    HEAP32[tempDoublePtr>>2] = $132;HEAP32[tempDoublePtr+4>>2] = $130;$133 = +HEAPF64[tempDoublePtr>>3];
    $retval$0 = $133;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $mul = $x * $y;
  $div = $mul / $mul;
  $retval$0 = $div;
 }
 return (+$retval$0);
}
function ___DOUBLE_BITS_389($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $__f;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($1) | 0);
 return ($0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _atoi($s) {
 $s = $s|0;
 var $$pre = 0, $$pre13 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call6 = 0, $call69 = 0, $cond = 0, $conv = 0, $conv1 = 0, $conv10 = 0, $conv5 = 0, $conv58$pre$phiZ2D = 0, $incdec$ptr = 0, $incdec$ptr9 = 0, $mul = 0, $n$0$lcssa = 0, $n$012 = 0;
 var $neg$0 = 0, $neg$1 = 0, $s$addr$0 = 0, $s$addr$1 = 0, $s$addr$211 = 0, $sub$neg = 0, $sub11 = 0, $sub14 = 0, $tobool = 0, $tobool13 = 0, $tobool7 = 0, $tobool710 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $s$addr$0 = $s;
 while(1) {
  $0 = HEAP8[$s$addr$0>>0]|0;
  $conv = $0 << 24 >> 24;
  $call = (_isspace($conv)|0);
  $tobool = ($call|0)==(0);
  $incdec$ptr = ((($s$addr$0)) + 1|0);
  if ($tobool) {
   break;
  } else {
   $s$addr$0 = $incdec$ptr;
  }
 }
 $1 = HEAP8[$s$addr$0>>0]|0;
 $conv1 = $1 << 24 >> 24;
 switch ($conv1|0) {
 case 45:  {
  $neg$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $neg$0 = 0;
  label = 5;
  break;
 }
 default: {
  $conv58$pre$phiZ2D = $conv1;$neg$1 = 0;$s$addr$1 = $s$addr$0;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$incdec$ptr>>0]|0;
  $$pre13 = $$pre << 24 >> 24;
  $conv58$pre$phiZ2D = $$pre13;$neg$1 = $neg$0;$s$addr$1 = $incdec$ptr;
 }
 $call69 = (_isdigit($conv58$pre$phiZ2D)|0);
 $tobool710 = ($call69|0)==(0);
 if ($tobool710) {
  $n$0$lcssa = 0;
 } else {
  $n$012 = 0;$s$addr$211 = $s$addr$1;
  while(1) {
   $mul = ($n$012*10)|0;
   $incdec$ptr9 = ((($s$addr$211)) + 1|0);
   $2 = HEAP8[$s$addr$211>>0]|0;
   $conv10 = $2 << 24 >> 24;
   $sub$neg = (($mul) + 48)|0;
   $sub11 = (($sub$neg) - ($conv10))|0;
   $3 = HEAP8[$incdec$ptr9>>0]|0;
   $conv5 = $3 << 24 >> 24;
   $call6 = (_isdigit($conv5)|0);
   $tobool7 = ($call6|0)==(0);
   if ($tobool7) {
    $n$0$lcssa = $sub11;
    break;
   } else {
    $n$012 = $sub11;$s$addr$211 = $incdec$ptr9;
   }
  }
 }
 $tobool13 = ($neg$1|0)==(0);
 $sub14 = (0 - ($n$0$lcssa))|0;
 $cond = $tobool13 ? $sub14 : $n$0$lcssa;
 return ($cond|0);
}
function _mkdir($path,$mode) {
 $path = $path|0;
 $mode = $mode|0;
 var $0 = 0, $call = 0, $call1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $path;
 $call = (___syscall39(($0|0),($mode|0))|0);
 $call1 = (___syscall_ret($call)|0);
 return ($call1|0);
}
function _fputs($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var $call = 0, $call1 = 0, $cmp = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($s)|0);
 $call1 = (_fwrite($s,1,$call,$f)|0);
 $cmp = ($call1|0)!=($call|0);
 $sub = $cmp << 31 >> 31;
 return ($sub|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $call = 0, $call1 = 0, $call112 = 0, $call113 = 0, $cmp = 0, $cmp5 = 0, $cond9 = 0, $div = 0, $lock = 0, $mul = 0, $phitmp = 0, $spec$select = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = Math_imul($nmemb, $size)|0;
 $tobool = ($size|0)==(0);
 $spec$select = $tobool ? 0 : $nmemb;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  $call1 = (___fwritex($src,$mul,$f)|0);
  if ($phitmp) {
   $call113 = $call1;
  } else {
   ___unlockfile($f);
   $call113 = $call1;
  }
 } else {
  $call112 = (___fwritex($src,$mul,$f)|0);
  $call113 = $call112;
 }
 $cmp5 = ($call113|0)==($mul|0);
 if ($cmp5) {
  $cond9 = $spec$select;
 } else {
  $div = (($call113>>>0) / ($size>>>0))&-1;
  $cond9 = $div;
 }
 return ($cond9|0);
}
function ___unlist_locked_file($f) {
 $f = $f|0;
 var $$pre = 0, $$sink = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $lockcount = 0, $next_locked = 0, $next_locked10 = 0, $prev_locked4 = 0, $stdio_locks = 0, $tobool = 0, $tobool1 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lockcount = ((($f)) + 68|0);
 $0 = HEAP32[$lockcount>>2]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  $next_locked = ((($f)) + 132|0);
  $1 = HEAP32[$next_locked>>2]|0;
  $tobool1 = ($1|0)==(0|0);
  $2 = $1;
  $$pre = ((($f)) + 128|0);
  if (!($tobool1)) {
   $3 = HEAP32[$$pre>>2]|0;
   $prev_locked4 = ((($1)) + 128|0);
   HEAP32[$prev_locked4>>2] = $3;
  }
  $4 = HEAP32[$$pre>>2]|0;
  $tobool6 = ($4|0)==(0|0);
  if ($tobool6) {
   $call = (___pthread_self_670()|0);
   $stdio_locks = ((($call)) + 220|0);
   $$sink = $stdio_locks;
  } else {
   $next_locked10 = ((($4)) + 132|0);
   $$sink = $next_locked10;
  }
  HEAP32[$$sink>>2] = $2;
 }
 return;
}
function ___pthread_self_670() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c = 0, $call = 0, $call13 = 0, $cmp = 0, $cmp14 = 0, $cmp7 = 0, $conv = 0, $conv18 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $lbf = 0, $retval$0 = 0;
 var $tobool = 0, $tobool1 = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c = sp;
 $conv = $_c&255;
 HEAP8[$c>>0] = $conv;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $2 = $$pre;
   label = 4;
  } else {
   $retval$0 = -1;
  }
 } else {
  $2 = $0;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $wpos = ((($f)) + 20|0);
   $1 = HEAP32[$wpos>>2]|0;
   $cmp = ($1>>>0)<($2>>>0);
   if ($cmp) {
    $conv5 = $_c & 255;
    $lbf = ((($f)) + 75|0);
    $3 = HEAP8[$lbf>>0]|0;
    $conv6 = $3 << 24 >> 24;
    $cmp7 = ($conv5|0)==($conv6|0);
    if (!($cmp7)) {
     $incdec$ptr = ((($1)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$1>>0] = $conv;
     $retval$0 = $conv5;
     break;
    }
   }
   $write = ((($f)) + 36|0);
   $4 = HEAP32[$write>>2]|0;
   $call13 = (FUNCTION_TABLE_iiii[$4 & 255]($f,$c,1)|0);
   $cmp14 = ($call13|0)==(1);
   if ($cmp14) {
    $5 = HEAP8[$c>>0]|0;
    $conv18 = $5&255;
    $retval$0 = $conv18;
   } else {
    $retval$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $call4 = 0, $call8 = 0, $cmp = 0, $conv = 0, $or = 0, $retval$0 = 0, $tobool = 0, $tobool9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $call = (_strchr(158566,$conv)|0);
 $tobool = ($call|0)==(0|0);
 if ($tobool) {
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 28;
  $retval$0 = 0;
 } else {
  $call2 = (___fmodeflags($mode)|0);
  $1 = $filename;
  $or = $call2 | 32768;
  HEAP32[$vararg_buffer>>2] = 438;
  $call3 = (___syscall5(($1|0),($or|0),($vararg_buffer|0))|0);
  $call4 = (___syscall_ret($call3)|0);
  $cmp = ($call4|0)<(0);
  if ($cmp) {
   $retval$0 = 0;
  } else {
   $call8 = (___fdopen($call4,$mode)|0);
   $tobool9 = ($call8|0)==(0|0);
   if ($tobool9) {
    (___wasi_fd_close(($call4|0))|0);
    $retval$0 = 0;
   } else {
    $retval$0 = $call8;
   }
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $0 = 0, $call = 0, $call5 = 0, $call9 = 0, $cmp = 0, $cmp15 = 0, $cmp21 = 0, $cmp27 = 0, $flags$0 = 0, $flags$2 = 0, $flags$4 = 0, $or = 0, $or12 = 0, $or18 = 0, $or24 = 0, $or30 = 0, $spec$select = 0, $spec$select13 = 0, $spec$select14 = 0;
 var $tobool = 0, $tobool10 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strchr($mode,43)|0);
 $tobool = ($call|0)==(0|0);
 $0 = HEAP8[$mode>>0]|0;
 $cmp = ($0<<24>>24)!=(114);
 $$ = $cmp&1;
 $flags$0 = $tobool ? $$ : 2;
 $call5 = (_strchr($mode,120)|0);
 $tobool6 = ($call5|0)==(0|0);
 $or = $flags$0 | 128;
 $spec$select = $tobool6 ? $flags$0 : $or;
 $call9 = (_strchr($mode,101)|0);
 $tobool10 = ($call9|0)==(0|0);
 $or12 = $spec$select | 524288;
 $flags$2 = $tobool10 ? $spec$select : $or12;
 $cmp15 = ($0<<24>>24)==(114);
 $or18 = $flags$2 | 64;
 $spec$select13 = $cmp15 ? $flags$2 : $or18;
 $cmp21 = ($0<<24>>24)==(119);
 $or24 = $spec$select13 | 512;
 $flags$4 = $cmp21 ? $or24 : $spec$select13;
 $cmp27 = ($0<<24>>24)==(97);
 $or30 = $flags$4 | 1024;
 $spec$select14 = $cmp27 ? $or30 : $flags$4;
 return ($spec$select14|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add$ptr27 = 0, $and = 0, $and29 = 0, $buf = 0, $buf_size = 0, $call = 0, $call1 = 0, $call18 = 0, $call2 = 0, $call31 = 0, $call39 = 0, $call7 = 0;
 var $close = 0, $cmp = 0, $cmp14 = 0, $cond = 0, $conv = 0, $fd26 = 0, $lock = 0, $or = 0, $or24 = 0, $read = 0, $retval$0 = 0, $seek = 0, $tobool = 0, $tobool19 = 0, $tobool3 = 0, $tobool30 = 0, $tobool32 = 0, $tobool36 = 0, $tobool8 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer3 = 0, $write = 0, $wsz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $wsz = sp + 24|0;
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $call = (_strchr(158566,$conv)|0);
 $tobool = ($call|0)==(0|0);
 if ($tobool) {
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 28;
  $retval$0 = 0;
 } else {
  $call2 = (_malloc(1176)|0);
  $tobool3 = ($call2|0)==(0|0);
  if ($tobool3) {
   $retval$0 = 0;
  } else {
   (_memset(($call2|0),0,144)|0);
   $call7 = (_strchr($mode,43)|0);
   $tobool8 = ($call7|0)==(0|0);
   $1 = HEAP8[$mode>>0]|0;
   if ($tobool8) {
    $cmp = ($1<<24>>24)==(114);
    $cond = $cmp ? 8 : 4;
    HEAP32[$call2>>2] = $cond;
   }
   $cmp14 = ($1<<24>>24)==(97);
   if ($cmp14) {
    $call18 = (___syscall221(($fd|0),3,($vararg_buffer|0))|0);
    $and = $call18 & 1024;
    $tobool19 = ($and|0)==(0);
    if ($tobool19) {
     $or = $call18 | 1024;
     HEAP32[$vararg_buffer1>>2] = $or;
     (___syscall221(($fd|0),4,($vararg_buffer1|0))|0);
    }
    $2 = HEAP32[$call2>>2]|0;
    $or24 = $2 | 128;
    HEAP32[$call2>>2] = $or24;
    $4 = $or24;
   } else {
    $$pre = HEAP32[$call2>>2]|0;
    $4 = $$pre;
   }
   $fd26 = ((($call2)) + 60|0);
   HEAP32[$fd26>>2] = $fd;
   $add$ptr27 = ((($call2)) + 152|0);
   $buf = ((($call2)) + 44|0);
   HEAP32[$buf>>2] = $add$ptr27;
   $buf_size = ((($call2)) + 48|0);
   HEAP32[$buf_size>>2] = 1024;
   $3 = ((($call2)) + 75|0);
   HEAP8[$3>>0] = -1;
   $and29 = $4 & 8;
   $tobool30 = ($and29|0)==(0);
   if ($tobool30) {
    $5 = $wsz;
    HEAP32[$vararg_buffer3>>2] = $5;
    $call31 = (___syscall54(($fd|0),21523,($vararg_buffer3|0))|0);
    $tobool32 = ($call31|0)==(0);
    if ($tobool32) {
     HEAP8[$3>>0] = 10;
    }
   }
   $read = ((($call2)) + 32|0);
   HEAP32[$read>>2] = 163;
   $write = ((($call2)) + 36|0);
   HEAP32[$write>>2] = 118;
   $seek = ((($call2)) + 40|0);
   HEAP32[$seek>>2] = 121;
   $close = ((($call2)) + 12|0);
   HEAP32[$close>>2] = 120;
   $6 = HEAP32[(399480)>>2]|0;
   $tobool36 = ($6|0)==(0);
   if ($tobool36) {
    $lock = ((($call2)) + 76|0);
    HEAP32[$lock>>2] = -1;
   }
   $call39 = (___ofl_add($call2)|0);
   $retval$0 = $call2;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___ofl_add($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $call = 0, $next = 0, $prev = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___ofl_lock()|0);
 $0 = HEAP32[$call>>2]|0;
 $next = ((($f)) + 56|0);
 HEAP32[$next>>2] = $0;
 $1 = HEAP32[$call>>2]|0;
 $tobool = ($1|0)==(0|0);
 if (!($tobool)) {
  $prev = ((($1)) + 52|0);
  HEAP32[$prev>>2] = $f;
 }
 HEAP32[$call>>2] = $f;
 ___ofl_unlock();
 return ($f|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock(399548);
 return (399556|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock(399548);
 return;
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $call = 0, $call1 = 0, $call18 = 0, $call19 = 0, $close = 0, $cmp = 0, $cmp13 = 0, $cond = 0;
 var $getln_buf = 0, $lock = 0, $next5 = 0, $or = 0, $prev = 0, $prev11 = 0, $tobool = 0, $tobool2 = 0, $tobool20 = 0, $tobool26 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 ___unlist_locked_file($f);
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 1;
 $tobool = ($and|0)!=(0);
 if (!($tobool)) {
  $call1 = (___ofl_lock()|0);
  $prev = ((($f)) + 52|0);
  $2 = HEAP32[$prev>>2]|0;
  $tobool2 = ($2|0)==(0|0);
  $3 = $2;
  $$pre = ((($f)) + 56|0);
  if (!($tobool2)) {
   $4 = HEAP32[$$pre>>2]|0;
   $next5 = ((($2)) + 56|0);
   HEAP32[$next5>>2] = $4;
  }
  $5 = HEAP32[$$pre>>2]|0;
  $tobool7 = ($5|0)==(0|0);
  $6 = $5;
  if (!($tobool7)) {
   $prev11 = ((($5)) + 52|0);
   HEAP32[$prev11>>2] = $3;
  }
  $7 = HEAP32[$call1>>2]|0;
  $cmp13 = ($7|0)==($f|0);
  if ($cmp13) {
   HEAP32[$call1>>2] = $6;
  }
  ___ofl_unlock();
 }
 $call18 = (_fflush($f)|0);
 $close = ((($f)) + 12|0);
 $8 = HEAP32[$close>>2]|0;
 $call19 = (FUNCTION_TABLE_ii[$8 & 255]($f)|0);
 $or = $call19 | $call18;
 $getln_buf = ((($f)) + 96|0);
 $9 = HEAP32[$getln_buf>>2]|0;
 $tobool20 = ($9|0)==(0|0);
 if (!($tobool20)) {
  _free($9);
 }
 if ($tobool) {
  $tobool26 = ($cond|0)==(0);
  if (!($tobool26)) {
   ___unlockfile($f);
  }
 } else {
  _free($f);
 }
 return ($or|0);
}
function _fflush($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $call11 = 0, $call118 = 0, $call17 = 0, $call23 = 0, $call7 = 0, $cmp = 0, $cmp15 = 0, $cmp21 = 0, $cond10 = 0, $cond20 = 0, $f$addr$0 = 0, $f$addr$019 = 0;
 var $f$addr$022 = 0, $lock = 0, $lock14 = 0, $next = 0, $or = 0, $phitmp = 0, $r$0$lcssa = 0, $r$021 = 0, $r$1 = 0, $retval$0 = 0, $tobool = 0, $tobool12 = 0, $tobool1220 = 0, $tobool25 = 0, $tobool5 = 0, $wbase = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($f|0)==(0|0);
 do {
  if ($tobool) {
   $1 = HEAP32[32440]|0;
   $tobool5 = ($1|0)==(0|0);
   if ($tobool5) {
    $cond10 = 0;
   } else {
    $2 = HEAP32[32440]|0;
    $call7 = (_fflush($2)|0);
    $cond10 = $call7;
   }
   $call11 = (___ofl_lock()|0);
   $f$addr$019 = HEAP32[$call11>>2]|0;
   $tobool1220 = ($f$addr$019|0)==(0|0);
   if ($tobool1220) {
    $r$0$lcssa = $cond10;
   } else {
    $f$addr$022 = $f$addr$019;$r$021 = $cond10;
    while(1) {
     $lock14 = ((($f$addr$022)) + 76|0);
     $3 = HEAP32[$lock14>>2]|0;
     $cmp15 = ($3|0)>(-1);
     if ($cmp15) {
      $call17 = (___lockfile($f$addr$022)|0);
      $cond20 = $call17;
     } else {
      $cond20 = 0;
     }
     $wpos = ((($f$addr$022)) + 20|0);
     $4 = HEAP32[$wpos>>2]|0;
     $wbase = ((($f$addr$022)) + 28|0);
     $5 = HEAP32[$wbase>>2]|0;
     $cmp21 = ($4>>>0)>($5>>>0);
     if ($cmp21) {
      $call23 = (___fflush_unlocked($f$addr$022)|0);
      $or = $call23 | $r$021;
      $r$1 = $or;
     } else {
      $r$1 = $r$021;
     }
     $tobool25 = ($cond20|0)==(0);
     if (!($tobool25)) {
      ___unlockfile($f$addr$022);
     }
     $next = ((($f$addr$022)) + 56|0);
     $f$addr$0 = HEAP32[$next>>2]|0;
     $tobool12 = ($f$addr$0|0)==(0|0);
     if ($tobool12) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $f$addr$022 = $f$addr$0;$r$021 = $r$1;
     }
    }
   }
   ___ofl_unlock();
   $retval$0 = $r$0$lcssa;
  } else {
   $lock = ((($f)) + 76|0);
   $0 = HEAP32[$lock>>2]|0;
   $cmp = ($0|0)>(-1);
   if (!($cmp)) {
    $call118 = (___fflush_unlocked($f)|0);
    $retval$0 = $call118;
    break;
   }
   $call = (___lockfile($f)|0);
   $phitmp = ($call|0)==(0);
   $call1 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $retval$0 = $call1;
   } else {
    ___unlockfile($f);
    $retval$0 = $call1;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp4 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $seek = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0;
 var $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wpos = ((($f)) + 20|0);
 $0 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $1 = HEAP32[$wbase>>2]|0;
 $cmp = ($0>>>0)>($1>>>0);
 if ($cmp) {
  $write = ((($f)) + 36|0);
  $2 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$2 & 255]($f,0,0)|0);
  $3 = HEAP32[$wpos>>2]|0;
  $tobool = ($3|0)==(0|0);
  if ($tobool) {
   $retval$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $rpos = ((($f)) + 4|0);
  $4 = HEAP32[$rpos>>2]|0;
  $rend = ((($f)) + 8|0);
  $5 = HEAP32[$rend>>2]|0;
  $cmp4 = ($4>>>0)<($5>>>0);
  if ($cmp4) {
   $sub$ptr$lhs$cast = $4;
   $sub$ptr$rhs$cast = $5;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $6 = ($sub$ptr$sub|0)<(0);
   $7 = $6 << 31 >> 31;
   $seek = ((($f)) + 40|0);
   $8 = HEAP32[$seek>>2]|0;
   (FUNCTION_TABLE_iiiii[$8 & 127]($f,$sub$ptr$sub,$7,1)|0);
   $9 = (getTempRet0() | 0);
  }
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = 0;
  HEAP32[$wbase>>2] = 0;
  HEAP32[$wpos>>2] = 0;
  HEAP32[$rend>>2] = 0;
  HEAP32[$rpos>>2] = 0;
  $retval$0 = 0;
 }
 return ($retval$0|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $buf = 0, $call = 0, $cookie = 0, $f = 0, $lock = 0, $read = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $f = sp;
 _memset(($f|0),0,144)|0;
 $read = ((($f)) + 32|0);
 HEAP32[$read>>2] = 164;
 $buf = ((($f)) + 44|0);
 HEAP32[$buf>>2] = $s;
 $lock = ((($f)) + 76|0);
 HEAP32[$lock>>2] = -1;
 $cookie = ((($f)) + 84|0);
 HEAP32[$cookie>>2] = $s;
 $call = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _do_read_650($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___string_read($f,$buf,$len)|0);
 return ($call|0);
}
function _vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$compoundliteral$sroa$2$0$$sroa_idx8 = 0, $$compoundliteral333 = 0, $$ph$ph = 0, $$pr = 0, $$pr233 = 0, $$pre = 0, $$pre370 = 0, $$pre372 = 0, $$pre373 = 0, $$pre374 = 0, $$pre375 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$ptr = 0;
 var $add$ptr87 = 0, $add282 = 0, $add291 = 0, $add300 = 0, $add329 = 0, $add350 = 0, $add382 = 0, $add393 = 0, $add420 = 0, $add442 = 0, $add97 = 0, $alloc$0 = 0, $alloc$1 = 0, $alloc$2 = 0, $and = 0, $arglist_current = 0, $arglist_next = 0, $arrayidx = 0, $arrayidx213 = 0, $arrayidx218 = 0;
 var $arrayidx239 = 0, $arrayidx248 = 0, $arrayidx263 = 0, $arrayidx273 = 0, $arrayidx283 = 0, $arrayidx292 = 0, $arrayidx330 = 0, $arrayidx34 = 0, $arrayidx342 = 0, $arrayidx383 = 0, $arrayidx388 = 0, $arrayidx421 = 0, $arrayidx426 = 0, $arrayidx443 = 0, $arrayidx497 = 0, $arrayidx501 = 0, $arrayidx80 = 0, $base$0 = 0, $c$0304 = 0, $call = 0;
 var $call1 = 0, $call14 = 0, $call153 = 0, $call156 = 0, $call17 = 0, $call187 = 0, $call310 = 0, $call326 = 0, $call335 = 0, $call352 = 0, $call358 = 0, $call365 = 0, $call379 = 0, $call395 = 0, $call4 = 0, $call417 = 0, $call439 = 0, $call51 = 0, $call529 = 0.0, $call78 = 0;
 var $call86 = 0, $call93 = 0, $call93297 = 0, $cmp = 0, $cmp101 = 0, $cmp112 = 0, $cmp120 = 0, $cmp132 = 0, $cmp146 = 0, $cmp180 = 0, $cmp190 = 0, $cmp202 = 0, $cmp202$not = 0, $cmp205 = 0, $cmp223 = 0, $cmp277 = 0, $cmp277303 = 0, $cmp304 = 0, $cmp319 = 0, $cmp32 = 0;
 var $cmp346 = 0, $cmp372 = 0, $cmp389 = 0, $cmp410 = 0, $cmp432 = 0, $cmp44 = 0, $cmp520 = 0, $cmp55 = 0, $cmp65 = 0, $cmp7 = 0, $cmp82 = 0, $cond = 0, $cond155 = 0, $cond16 = 0, $cond303 = 0, $cond328 = 0, $cond381 = 0, $cond419 = 0, $cond441 = 0, $cond53 = 0;
 var $conv = 0, $conv12 = 0, $conv131 = 0, $conv151 = 0, $conv238 = 0, $conv247 = 0, $conv274 = 0, $conv276 = 0, $conv289$pre$phiZ2D = 0, $conv290 = 0, $conv3 = 0, $conv324 = 0, $conv334 = 0, $conv35 = 0, $conv377 = 0, $conv386 = 0, $conv41 = 0, $conv415 = 0, $conv424 = 0, $conv437 = 0;
 var $conv49 = 0, $conv54 = 0, $conv544 = 0.0, $conv85 = 0, $conv92 = 0, $conv92296 = 0, $conv96 = 0, $dest$0 = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor235 = 0, $i$0$ph = 0, $i$0$ph$ph = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0;
 var $i$3 = 0, $i$4 = 0, $inc341 = 0, $inc387 = 0, $inc425 = 0, $inc561 = 0, $incdec$ptr106 = 0, $incdec$ptr109$pre$phiZZ2D = 0, $incdec$ptr11 = 0, $incdec$ptr115 = 0, $incdec$ptr123 = 0, $incdec$ptr150 = 0, $incdec$ptr164 = 0, $incdec$ptr184 = 0, $incdec$ptr198 = 0, $incdec$ptr221 = 0, $incdec$ptr226 = 0, $incdec$ptr236 = 0, $incdec$ptr245 = 0, $incdec$ptr25 = 0;
 var $incdec$ptr294 = 0, $incdec$ptr323 = 0, $incdec$ptr376 = 0, $incdec$ptr414 = 0, $incdec$ptr436 = 0, $incdec$ptr454 = 0, $incdec$ptr48 = 0, $incdec$ptr564 = 0, $incdec$ptr62 = 0, $incdec$ptr76 = 0, $incdec$ptr99 = 0, $invert$0 = 0, $k$0$ph$ph = 0, $k$2$ph = 0, $lnot$ext = 0, $lock = 0, $matches$0308 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0;
 var $mul = 0, $mul309 = 0, $mul351 = 0, $or = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond221 = 0, $p$0312 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$12 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$3299 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0;
 var $p$8 = 0, $p$9 = 0, $rend = 0, $rpos42 = 0, $s$0306 = 0, $s$1 = 0, $s$10 = 0, $s$2$ph = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $scanset = 0, $shcnt = 0, $shend43 = 0, $size$0 = 0, $spec$select = 0, $spec$select219 = 0, $spec$select220 = 0;
 var $spec$select222 = 0, $spec$select223 = 0, $spec$select224 = 0, $spec$select225 = 0, $spec$select226 = 0, $st = 0, $sub = 0, $sub$ptr$sub = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub462 = 0, $sub$ptr$sub514 = 0, $sub$ptr$sub535 = 0, $sub$ptr$sub555 = 0, $sub237 = 0, $sub246 = 0, $sub98 = 0, $tobool = 0, $tobool104 = 0, $tobool157 = 0, $tobool161 = 0;
 var $tobool18 = 0, $tobool195 = 0, $tobool2 = 0, $tobool22 = 0, $tobool305 = 0, $tobool307 = 0, $tobool311 = 0, $tobool331 = 0, $tobool339 = 0, $tobool353 = 0, $tobool359 = 0, $tobool366 = 0, $tobool384 = 0, $tobool396 = 0, $tobool405 = 0, $tobool422 = 0, $tobool444 = 0, $tobool451 = 0, $tobool495 = 0, $tobool499 = 0;
 var $tobool5 = 0, $tobool523 = 0, $tobool541 = 0, $tobool559 = 0, $tobool567 = 0, $tobool567$old = 0, $tobool570 = 0, $tobool574 = 0, $tobool59 = 0, $tobool79 = 0, $tobool94 = 0, $tobool94298 = 0, $trunc = 0, $wc = 0, $wcs$6 = 0, $width$0$lcssa = 0, $width$0300 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $st = sp + 264|0;
 $scanset = sp;
 $wc = sp + 260|0;
 $$compoundliteral333 = sp + 272|0;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 $1 = HEAP8[$fmt>>0]|0;
 $tobool305 = ($1<<24>>24)==(0);
 L4: do {
  if ($tobool305) {
   $matches$3 = 0;
  } else {
   $rpos42 = ((($f)) + 4|0);
   $shend43 = ((($f)) + 104|0);
   $shcnt = ((($f)) + 120|0);
   $rend = ((($f)) + 8|0);
   $arrayidx213 = ((($scanset)) + 10|0);
   $arrayidx218 = ((($scanset)) + 33|0);
   $arrayidx239 = ((($scanset)) + 46|0);
   $arrayidx248 = ((($scanset)) + 94|0);
   $$compoundliteral$sroa$2$0$$sroa_idx8 = ((($st)) + 4|0);
   $178 = 0;$2 = $1;$20 = 0;$21 = 0;$matches$0308 = 0;$p$0312 = $fmt;$s$0306 = 0;
   L6: while(1) {
    $conv = $2&255;
    $call1 = (_isspace($conv)|0);
    $tobool2 = ($call1|0)==(0);
    L8: do {
     if ($tobool2) {
      $26 = HEAP8[$p$0312>>0]|0;
      $cmp32 = ($26<<24>>24)==(37);
      L10: do {
       if ($cmp32) {
        $arrayidx34 = ((($p$0312)) + 1|0);
        $27 = HEAP8[$arrayidx34>>0]|0;
        L12: do {
         switch ($27<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $incdec$ptr76 = ((($p$0312)) + 2|0);
          $dest$0 = 0;$p$2 = $incdec$ptr76;
          break;
         }
         default: {
          $conv35 = $27&255;
          $call78 = (_isdigit($conv35)|0);
          $tobool79 = ($call78|0)==(0);
          if (!($tobool79)) {
           $arrayidx80 = ((($p$0312)) + 2|0);
           $36 = HEAP8[$arrayidx80>>0]|0;
           $cmp82 = ($36<<24>>24)==(36);
           if ($cmp82) {
            $37 = HEAP8[$arrayidx34>>0]|0;
            $conv85 = $37&255;
            $sub = (($conv85) + -48)|0;
            $call86 = (_arg_n($ap,$sub)|0);
            $add$ptr87 = ((($p$0312)) + 3|0);
            $dest$0 = $call86;$p$2 = $add$ptr87;
            break L12;
           }
          }
          $arglist_current = HEAP32[$ap>>2]|0;
          $38 = $arglist_current;
          $39 = ((0) + 4|0);
          $expanded1 = $39;
          $expanded = (($expanded1) - 1)|0;
          $40 = (($38) + ($expanded))|0;
          $41 = ((0) + 4|0);
          $expanded5 = $41;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $42 = $40 & $expanded3;
          $43 = $42;
          $44 = HEAP32[$43>>2]|0;
          $arglist_next = ((($43)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next;
          $dest$0 = $44;$p$2 = $arrayidx34;
         }
         }
        } while(0);
        $45 = HEAP8[$p$2>>0]|0;
        $conv92296 = $45&255;
        $call93297 = (_isdigit($conv92296)|0);
        $tobool94298 = ($call93297|0)==(0);
        if ($tobool94298) {
         $p$3$lcssa = $p$2;$width$0$lcssa = 0;
        } else {
         $p$3299 = $p$2;$width$0300 = 0;
         while(1) {
          $mul = ($width$0300*10)|0;
          $46 = HEAP8[$p$3299>>0]|0;
          $conv96 = $46&255;
          $add97 = (($mul) + -48)|0;
          $sub98 = (($add97) + ($conv96))|0;
          $incdec$ptr99 = ((($p$3299)) + 1|0);
          $47 = HEAP8[$incdec$ptr99>>0]|0;
          $conv92 = $47&255;
          $call93 = (_isdigit($conv92)|0);
          $tobool94 = ($call93|0)==(0);
          if ($tobool94) {
           $p$3$lcssa = $incdec$ptr99;$width$0$lcssa = $sub98;
           break;
          } else {
           $p$3299 = $incdec$ptr99;$width$0300 = $sub98;
          }
         }
        }
        $48 = HEAP8[$p$3$lcssa>>0]|0;
        $cmp101 = ($48<<24>>24)==(109);
        $incdec$ptr106 = ((($p$3$lcssa)) + 1|0);
        if ($cmp101) {
         $tobool104 = ($dest$0|0)!=(0|0);
         $lnot$ext = $tobool104&1;
         $$pr = HEAP8[$incdec$ptr106>>0]|0;
         $$pre373 = ((($p$3$lcssa)) + 2|0);
         $183 = 0;$49 = $$pr;$alloc$0 = $lnot$ext;$incdec$ptr109$pre$phiZZ2D = $$pre373;$p$4 = $incdec$ptr106;$s$1 = 0;
        } else {
         $183 = $178;$49 = $48;$alloc$0 = 0;$incdec$ptr109$pre$phiZZ2D = $incdec$ptr106;$p$4 = $p$3$lcssa;$s$1 = $s$0306;
        }
        switch ($49<<24>>24) {
        case 104:  {
         $50 = HEAP8[$incdec$ptr109$pre$phiZZ2D>>0]|0;
         $cmp112 = ($50<<24>>24)==(104);
         $incdec$ptr115 = ((($p$4)) + 2|0);
         $spec$select223 = $cmp112 ? $incdec$ptr115 : $incdec$ptr109$pre$phiZZ2D;
         $spec$select224 = $cmp112 ? -2 : -1;
         $p$5 = $spec$select223;$size$0 = $spec$select224;
         break;
        }
        case 108:  {
         $51 = HEAP8[$incdec$ptr109$pre$phiZZ2D>>0]|0;
         $cmp120 = ($51<<24>>24)==(108);
         $incdec$ptr123 = ((($p$4)) + 2|0);
         $spec$select225 = $cmp120 ? $incdec$ptr123 : $incdec$ptr109$pre$phiZZ2D;
         $spec$select226 = $cmp120 ? 3 : 1;
         $p$5 = $spec$select225;$size$0 = $spec$select226;
         break;
        }
        case 106:  {
         $p$5 = $incdec$ptr109$pre$phiZZ2D;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $incdec$ptr109$pre$phiZZ2D;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $incdec$ptr109$pre$phiZZ2D;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $p$4;$size$0 = 0;
         break;
        }
        default: {
         $184 = $183;$s$8 = $s$1;
         label = 143;
         break L6;
        }
        }
        $52 = HEAP8[$p$5>>0]|0;
        $conv131 = $52&255;
        $and = $conv131 & 47;
        $cmp132 = ($and|0)==(3);
        $or = $conv131 | 32;
        $spec$select = $cmp132 ? $or : $conv131;
        $spec$select219 = $cmp132 ? 1 : $size$0;
        $trunc = $spec$select&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $53 = ($width$0$lcssa|0)>(1);
         $spec$select220 = $53 ? $width$0$lcssa : 1;
         $170 = $20;$171 = $21;$width$1 = $spec$select220;
         break;
        }
        case 91:  {
         $170 = $20;$171 = $21;$width$1 = $width$0$lcssa;
         break;
        }
        case 110:  {
         _store_int($dest$0,$spec$select219,$20,$21);
         $179 = $183;$180 = $20;$181 = $21;$matches$1 = $matches$0308;$p$12 = $p$5;$s$7 = $s$1;
         break L8;
         break;
        }
        default: {
         ___shlim($f,0,0);
         while(1) {
          $54 = HEAP32[$rpos42>>2]|0;
          $55 = HEAP32[$shend43>>2]|0;
          $cmp146 = ($54>>>0)<($55>>>0);
          if ($cmp146) {
           $incdec$ptr150 = ((($54)) + 1|0);
           HEAP32[$rpos42>>2] = $incdec$ptr150;
           $56 = HEAP8[$54>>0]|0;
           $conv151 = $56&255;
           $cond155 = $conv151;
          } else {
           $call153 = (___shgetc($f)|0);
           $cond155 = $call153;
          }
          $call156 = (_isspace($cond155)|0);
          $tobool157 = ($call156|0)==(0);
          if ($tobool157) {
           break;
          }
         }
         $57 = HEAP32[$shend43>>2]|0;
         $tobool161 = ($57|0)==(0|0);
         if ($tobool161) {
          $$pre370 = HEAP32[$rpos42>>2]|0;
          $67 = $$pre370;
         } else {
          $58 = HEAP32[$rpos42>>2]|0;
          $incdec$ptr164 = ((($58)) + -1|0);
          HEAP32[$rpos42>>2] = $incdec$ptr164;
          $59 = $incdec$ptr164;
          $67 = $59;
         }
         $60 = $shcnt;
         $61 = $60;
         $62 = HEAP32[$61>>2]|0;
         $63 = (($60) + 4)|0;
         $64 = $63;
         $65 = HEAP32[$64>>2]|0;
         $66 = HEAP32[$rend>>2]|0;
         $sub$ptr$sub172 = (($67) - ($66))|0;
         $68 = ($sub$ptr$sub172|0)<(0);
         $69 = $68 << 31 >> 31;
         $70 = (_i64Add(($62|0),($65|0),($20|0),($21|0))|0);
         $71 = (getTempRet0() | 0);
         $72 = (_i64Add(($70|0),($71|0),($sub$ptr$sub172|0),($69|0))|0);
         $73 = (getTempRet0() | 0);
         $170 = $72;$171 = $73;$width$1 = $width$0$lcssa;
        }
        }
        $74 = ($width$1|0)<(0);
        $75 = $74 << 31 >> 31;
        ___shlim($f,$width$1,$75);
        $76 = HEAP32[$rpos42>>2]|0;
        $77 = HEAP32[$shend43>>2]|0;
        $cmp180 = ($76>>>0)<($77>>>0);
        if ($cmp180) {
         $incdec$ptr184 = ((($76)) + 1|0);
         HEAP32[$rpos42>>2] = $incdec$ptr184;
         $78 = $77;
        } else {
         $call187 = (___shgetc($f)|0);
         $cmp190 = ($call187|0)<(0);
         if ($cmp190) {
          $184 = $183;$s$8 = $s$1;
          label = 143;
          break L6;
         }
         $$pr233 = HEAP32[$shend43>>2]|0;
         $78 = $$pr233;
        }
        $tobool195 = ($78|0)==(0|0);
        if (!($tobool195)) {
         $79 = HEAP32[$rpos42>>2]|0;
         $incdec$ptr198 = ((($79)) + -1|0);
         HEAP32[$rpos42>>2] = $incdec$ptr198;
        }
        L59: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $cmp202 = ($spec$select|0)==(99);
          $80 = $spec$select | 16;
          $81 = ($80|0)==(115);
          L61: do {
           if ($81) {
            $cmp205 = ($spec$select|0)==(115);
            (_memset(($scanset|0),-1,257)|0);
            HEAP8[$scanset>>0] = 0;
            if ($cmp205) {
             HEAP8[$arrayidx218>>0] = 0;
             ;HEAP16[$arrayidx213>>1]=0|0;HEAP16[$arrayidx213+2>>1]=0|0;HEAP8[$arrayidx213+4>>0]=0|0;
             $p$10 = $p$5;
            } else {
             $p$10 = $p$5;
            }
           } else {
            $incdec$ptr221 = ((($p$5)) + 1|0);
            $82 = HEAP8[$incdec$ptr221>>0]|0;
            $cmp223 = ($82<<24>>24)==(94);
            $incdec$ptr226 = ((($p$5)) + 2|0);
            $invert$0 = $cmp223&1;
            $p$6 = $cmp223 ? $incdec$ptr226 : $incdec$ptr221;
            (_memset(($scanset|0),($invert$0|0),257)|0);
            HEAP8[$scanset>>0] = 0;
            $83 = HEAP8[$p$6>>0]|0;
            switch ($83<<24>>24) {
            case 45:  {
             $incdec$ptr236 = ((($p$6)) + 1|0);
             $sub237 = $invert$0 ^ 1;
             $conv238 = $sub237&255;
             HEAP8[$arrayidx239>>0] = $conv238;
             $conv289$pre$phiZ2D = $conv238;$p$7 = $incdec$ptr236;
             break;
            }
            case 93:  {
             $incdec$ptr245 = ((($p$6)) + 1|0);
             $sub246 = $invert$0 ^ 1;
             $conv247 = $sub246&255;
             HEAP8[$arrayidx248>>0] = $conv247;
             $conv289$pre$phiZ2D = $conv247;$p$7 = $incdec$ptr245;
             break;
            }
            default: {
             $$pre374 = $invert$0 ^ 1;
             $$pre375 = $$pre374&255;
             $conv289$pre$phiZ2D = $$pre375;$p$7 = $p$6;
            }
            }
            $p$8 = $p$7;
            while(1) {
             $84 = HEAP8[$p$8>>0]|0;
             L72: do {
              switch ($84<<24>>24) {
              case 0:  {
               $184 = $183;$s$8 = $s$1;
               label = 143;
               break L6;
               break;
              }
              case 93:  {
               $p$10 = $p$8;
               break L61;
               break;
              }
              case 45:  {
               $arrayidx263 = ((($p$8)) + 1|0);
               $85 = HEAP8[$arrayidx263>>0]|0;
               switch ($85<<24>>24) {
               case 93: case 0:  {
                $88 = 45;$p$9 = $p$8;
                break L72;
                break;
               }
               default: {
               }
               }
               $arrayidx273 = ((($p$8)) + -1|0);
               $86 = HEAP8[$arrayidx273>>0]|0;
               $cmp277303 = ($86&255)<($85&255);
               if ($cmp277303) {
                $conv274 = $86&255;
                $c$0304 = $conv274;
                while(1) {
                 $add282 = (($c$0304) + 1)|0;
                 $arrayidx283 = (($scanset) + ($add282)|0);
                 HEAP8[$arrayidx283>>0] = $conv289$pre$phiZ2D;
                 $87 = HEAP8[$arrayidx263>>0]|0;
                 $conv276 = $87&255;
                 $cmp277 = ($add282>>>0)<($conv276>>>0);
                 if ($cmp277) {
                  $c$0304 = $add282;
                 } else {
                  $88 = $87;$p$9 = $arrayidx263;
                  break;
                 }
                }
               } else {
                $88 = $85;$p$9 = $arrayidx263;
               }
               break;
              }
              default: {
               $88 = $84;$p$9 = $p$8;
              }
              }
             } while(0);
             $conv290 = $88&255;
             $add291 = (($conv290) + 1)|0;
             $arrayidx292 = (($scanset) + ($add291)|0);
             HEAP8[$arrayidx292>>0] = $conv289$pre$phiZ2D;
             $incdec$ptr294 = ((($p$9)) + 1|0);
             $p$8 = $incdec$ptr294;
            }
           }
          } while(0);
          $add300 = (($width$1) + 1)|0;
          $cond303 = $cmp202 ? $add300 : 31;
          $cmp304 = ($spec$select219|0)==(1);
          $tobool307 = ($alloc$0|0)!=(0);
          L80: do {
           if ($cmp304) {
            if ($tobool307) {
             $mul309 = $cond303 << 2;
             $call310 = (_malloc($mul309)|0);
             $tobool311 = ($call310|0)==(0|0);
             if ($tobool311) {
              $184 = 0;$s$8 = 0;
              label = 143;
              break L6;
             } else {
              $186 = $call310;
             }
            } else {
             $186 = $dest$0;
            }
            HEAP32[$st>>2] = 0;
            HEAP32[$$compoundliteral$sroa$2$0$$sroa_idx8>>2] = 0;
            $$ph$ph = $186;$i$0$ph$ph = 0;$k$0$ph$ph = $cond303;
            L85: while(1) {
             $tobool339 = ($$ph$ph|0)==(0|0);
             $i$0$ph = $i$0$ph$ph;
             while(1) {
              L89: while(1) {
               $89 = HEAP32[$rpos42>>2]|0;
               $90 = HEAP32[$shend43>>2]|0;
               $cmp319 = ($89>>>0)<($90>>>0);
               if ($cmp319) {
                $incdec$ptr323 = ((($89)) + 1|0);
                HEAP32[$rpos42>>2] = $incdec$ptr323;
                $91 = HEAP8[$89>>0]|0;
                $conv324 = $91&255;
                $cond328 = $conv324;
               } else {
                $call326 = (___shgetc($f)|0);
                $cond328 = $call326;
               }
               $add329 = (($cond328) + 1)|0;
               $arrayidx330 = (($scanset) + ($add329)|0);
               $92 = HEAP8[$arrayidx330>>0]|0;
               $tobool331 = ($92<<24>>24)==(0);
               if ($tobool331) {
                break L85;
               }
               $conv334 = $cond328&255;
               HEAP8[$$compoundliteral333>>0] = $conv334;
               $call335 = (_mbrtowc($wc,$$compoundliteral333,1,$st)|0);
               switch ($call335|0) {
               case -1:  {
                $184 = $$ph$ph;$s$8 = 0;
                label = 143;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L89;
               }
               }
              }
              if ($tobool339) {
               $i$1 = $i$0$ph;
              } else {
               $arrayidx342 = (($$ph$ph) + ($i$0$ph<<2)|0);
               $inc341 = (($i$0$ph) + 1)|0;
               $93 = HEAP32[$wc>>2]|0;
               HEAP32[$arrayidx342>>2] = $93;
               $i$1 = $inc341;
              }
              $cmp346 = ($i$1|0)==($k$0$ph$ph|0);
              $or$cond = $tobool307 & $cmp346;
              if ($or$cond) {
               break;
              } else {
               $i$0$ph = $i$1;
              }
             }
             $factor235 = $k$0$ph$ph << 1;
             $add350 = $factor235 | 1;
             $mul351 = $add350 << 2;
             $call352 = (_realloc($$ph$ph,$mul351)|0);
             $tobool353 = ($call352|0)==(0|0);
             if ($tobool353) {
              $184 = $$ph$ph;$s$8 = 0;
              label = 143;
              break L6;
             } else {
              $$ph$ph = $call352;$i$0$ph$ph = $i$1;$k$0$ph$ph = $add350;
             }
            }
            $call358 = (_mbsinit($st)|0);
            $tobool359 = ($call358|0)==(0);
            if ($tobool359) {
             $184 = $$ph$ph;$s$8 = 0;
             label = 143;
             break L6;
            } else {
             $187 = $$ph$ph;$i$4 = $i$0$ph;$s$5 = 0;$wcs$6 = $$ph$ph;
            }
           } else {
            if ($tobool307) {
             $call365 = (_malloc($cond303)|0);
             $tobool366 = ($call365|0)==(0|0);
             if ($tobool366) {
              $184 = 0;$s$8 = 0;
              label = 143;
              break L6;
             }
             $i$2$ph = 0;$k$2$ph = $cond303;$s$2$ph = $call365;
             while(1) {
              $i$2 = $i$2$ph;
              while(1) {
               $94 = HEAP32[$rpos42>>2]|0;
               $95 = HEAP32[$shend43>>2]|0;
               $cmp372 = ($94>>>0)<($95>>>0);
               if ($cmp372) {
                $incdec$ptr376 = ((($94)) + 1|0);
                HEAP32[$rpos42>>2] = $incdec$ptr376;
                $96 = HEAP8[$94>>0]|0;
                $conv377 = $96&255;
                $cond381 = $conv377;
               } else {
                $call379 = (___shgetc($f)|0);
                $cond381 = $call379;
               }
               $add382 = (($cond381) + 1)|0;
               $arrayidx383 = (($scanset) + ($add382)|0);
               $97 = HEAP8[$arrayidx383>>0]|0;
               $tobool384 = ($97<<24>>24)==(0);
               if ($tobool384) {
                $187 = 0;$i$4 = $i$2;$s$5 = $s$2$ph;$wcs$6 = 0;
                break L80;
               }
               $conv386 = $cond381&255;
               $inc387 = (($i$2) + 1)|0;
               $arrayidx388 = (($s$2$ph) + ($i$2)|0);
               HEAP8[$arrayidx388>>0] = $conv386;
               $cmp389 = ($inc387|0)==($k$2$ph|0);
               if ($cmp389) {
                break;
               } else {
                $i$2 = $inc387;
               }
              }
              $factor = $k$2$ph << 1;
              $add393 = $factor | 1;
              $call395 = (_realloc($s$2$ph,$add393)|0);
              $tobool396 = ($call395|0)==(0|0);
              if ($tobool396) {
               $184 = 0;$s$8 = $s$2$ph;
               label = 143;
               break L6;
              } else {
               $i$2$ph = $inc387;$k$2$ph = $add393;$s$2$ph = $call395;
              }
             }
            }
            $tobool405 = ($dest$0|0)==(0|0);
            if ($tobool405) {
             while(1) {
              $102 = HEAP32[$rpos42>>2]|0;
              $103 = HEAP32[$shend43>>2]|0;
              $cmp432 = ($102>>>0)<($103>>>0);
              if ($cmp432) {
               $incdec$ptr436 = ((($102)) + 1|0);
               HEAP32[$rpos42>>2] = $incdec$ptr436;
               $104 = HEAP8[$102>>0]|0;
               $conv437 = $104&255;
               $cond441 = $conv437;
              } else {
               $call439 = (___shgetc($f)|0);
               $cond441 = $call439;
              }
              $add442 = (($cond441) + 1)|0;
              $arrayidx443 = (($scanset) + ($add442)|0);
              $105 = HEAP8[$arrayidx443>>0]|0;
              $tobool444 = ($105<<24>>24)==(0);
              if ($tobool444) {
               $187 = 0;$i$4 = 0;$s$5 = 0;$wcs$6 = 0;
               break L80;
              }
             }
            }
            $i$3 = 0;
            while(1) {
             $98 = HEAP32[$rpos42>>2]|0;
             $99 = HEAP32[$shend43>>2]|0;
             $cmp410 = ($98>>>0)<($99>>>0);
             if ($cmp410) {
              $incdec$ptr414 = ((($98)) + 1|0);
              HEAP32[$rpos42>>2] = $incdec$ptr414;
              $100 = HEAP8[$98>>0]|0;
              $conv415 = $100&255;
              $cond419 = $conv415;
             } else {
              $call417 = (___shgetc($f)|0);
              $cond419 = $call417;
             }
             $add420 = (($cond419) + 1)|0;
             $arrayidx421 = (($scanset) + ($add420)|0);
             $101 = HEAP8[$arrayidx421>>0]|0;
             $tobool422 = ($101<<24>>24)==(0);
             if ($tobool422) {
              $187 = 0;$i$4 = $i$3;$s$5 = $dest$0;$wcs$6 = 0;
              break L80;
             }
             $conv424 = $cond419&255;
             $inc425 = (($i$3) + 1)|0;
             $arrayidx426 = (($dest$0) + ($i$3)|0);
             HEAP8[$arrayidx426>>0] = $conv424;
             $i$3 = $inc425;
            }
           }
          } while(0);
          $106 = HEAP32[$shend43>>2]|0;
          $tobool451 = ($106|0)==(0|0);
          if ($tobool451) {
           $$pre372 = HEAP32[$rpos42>>2]|0;
           $116 = $$pre372;
          } else {
           $107 = HEAP32[$rpos42>>2]|0;
           $incdec$ptr454 = ((($107)) + -1|0);
           HEAP32[$rpos42>>2] = $incdec$ptr454;
           $108 = $incdec$ptr454;
           $116 = $108;
          }
          $109 = $shcnt;
          $110 = $109;
          $111 = HEAP32[$110>>2]|0;
          $112 = (($109) + 4)|0;
          $113 = $112;
          $114 = HEAP32[$113>>2]|0;
          $115 = HEAP32[$rend>>2]|0;
          $sub$ptr$sub462 = (($116) - ($115))|0;
          $117 = ($sub$ptr$sub462|0)<(0);
          $118 = $117 << 31 >> 31;
          $119 = (_i64Add(($111|0),($114|0),($sub$ptr$sub462|0),($118|0))|0);
          $120 = (getTempRet0() | 0);
          $121 = ($119|0)==(0);
          $122 = ($120|0)==(0);
          $123 = $121 & $122;
          if ($123) {
           $177 = $187;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$5;
           break L6;
          }
          $cmp202$not = $cmp202 ^ 1;
          $124 = ($119|0)==($width$1|0);
          $125 = ($120|0)==($75|0);
          $126 = $124 & $125;
          $or$cond221 = $126 | $cmp202$not;
          if (!($or$cond221)) {
           $177 = $187;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$5;
           break L6;
          }
          do {
           if ($tobool307) {
            if ($cmp304) {
             HEAP32[$dest$0>>2] = $wcs$6;
             break;
            } else {
             HEAP32[$dest$0>>2] = $s$5;
             break;
            }
           }
          } while(0);
          if ($cmp202) {
           $185 = $187;$p$11 = $p$10;$s$6 = $s$5;
          } else {
           $tobool495 = ($wcs$6|0)==(0|0);
           if (!($tobool495)) {
            $arrayidx497 = (($wcs$6) + ($i$4<<2)|0);
            HEAP32[$arrayidx497>>2] = 0;
           }
           $tobool499 = ($s$5|0)==(0|0);
           if ($tobool499) {
            $185 = $187;$p$11 = $p$10;$s$6 = 0;
            break L59;
           }
           $arrayidx501 = (($s$5) + ($i$4)|0);
           HEAP8[$arrayidx501>>0] = 0;
           $185 = $187;$p$11 = $p$10;$s$6 = $s$5;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0 = 16;
          label = 131;
          break;
         }
         case 111:  {
          $base$0 = 8;
          label = 131;
          break;
         }
         case 117: case 100:  {
          $base$0 = 10;
          label = 131;
          break;
         }
         case 105:  {
          $base$0 = 0;
          label = 131;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $call529 = (+___floatscan($f,$spec$select219,0));
          $145 = $shcnt;
          $146 = $145;
          $147 = HEAP32[$146>>2]|0;
          $148 = (($145) + 4)|0;
          $149 = $148;
          $150 = HEAP32[$149>>2]|0;
          $151 = HEAP32[$rpos42>>2]|0;
          $152 = HEAP32[$rend>>2]|0;
          $sub$ptr$sub535 = (($151) - ($152))|0;
          $153 = ($sub$ptr$sub535|0)<(0);
          $154 = $153 << 31 >> 31;
          $155 = (_i64Subtract(0,0,($sub$ptr$sub535|0),($154|0))|0);
          $156 = (getTempRet0() | 0);
          $157 = ($147|0)==($155|0);
          $158 = ($150|0)==($156|0);
          $159 = $157 & $158;
          if ($159) {
           $177 = $183;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$1;
           break L6;
          }
          $tobool541 = ($dest$0|0)==(0|0);
          if ($tobool541) {
           $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
          } else {
           switch ($spec$select219|0) {
           case 0:  {
            $conv544 = $call529;
            HEAPF32[$dest$0>>2] = $conv544;
            $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
            break L59;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0>>3] = $call529;
            $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
            break L59;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0>>3] = $call529;
            $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
            break L59;
            break;
           }
           default: {
            $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
            break L59;
           }
           }
          }
          break;
         }
         default: {
          $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
         }
         }
        } while(0);
        do {
         if ((label|0) == 131) {
          label = 0;
          $127 = (___intscan($f,$base$0,0,-1,-1)|0);
          $128 = (getTempRet0() | 0);
          $129 = $shcnt;
          $130 = $129;
          $131 = HEAP32[$130>>2]|0;
          $132 = (($129) + 4)|0;
          $133 = $132;
          $134 = HEAP32[$133>>2]|0;
          $135 = HEAP32[$rpos42>>2]|0;
          $136 = HEAP32[$rend>>2]|0;
          $sub$ptr$sub514 = (($135) - ($136))|0;
          $137 = ($sub$ptr$sub514|0)<(0);
          $138 = $137 << 31 >> 31;
          $139 = (_i64Subtract(0,0,($sub$ptr$sub514|0),($138|0))|0);
          $140 = (getTempRet0() | 0);
          $141 = ($131|0)==($139|0);
          $142 = ($134|0)==($140|0);
          $143 = $141 & $142;
          if ($143) {
           $177 = $183;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$1;
           break L6;
          }
          $cmp520 = ($spec$select|0)==(112);
          $tobool523 = ($dest$0|0)!=(0|0);
          $or$cond1 = $tobool523 & $cmp520;
          if ($or$cond1) {
           $144 = $127;
           HEAP32[$dest$0>>2] = $144;
           $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
           break;
          } else {
           _store_int($dest$0,$spec$select219,$127,$128);
           $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
           break;
          }
         }
        } while(0);
        $160 = $shcnt;
        $161 = $160;
        $162 = HEAP32[$161>>2]|0;
        $163 = (($160) + 4)|0;
        $164 = $163;
        $165 = HEAP32[$164>>2]|0;
        $166 = HEAP32[$rpos42>>2]|0;
        $167 = HEAP32[$rend>>2]|0;
        $sub$ptr$sub555 = (($166) - ($167))|0;
        $168 = ($sub$ptr$sub555|0)<(0);
        $169 = $168 << 31 >> 31;
        $172 = (_i64Add(($162|0),($165|0),($170|0),($171|0))|0);
        $173 = (getTempRet0() | 0);
        $174 = (_i64Add(($172|0),($173|0),($sub$ptr$sub555|0),($169|0))|0);
        $175 = (getTempRet0() | 0);
        $tobool559 = ($dest$0|0)!=(0|0);
        $inc561 = $tobool559&1;
        $spec$select222 = (($matches$0308) + ($inc561))|0;
        $179 = $185;$180 = $174;$181 = $175;$matches$1 = $spec$select222;$p$12 = $p$11;$s$7 = $s$6;
        break L8;
       }
      } while(0);
      $conv41 = $cmp32&1;
      $add$ptr = (($p$0312) + ($conv41)|0);
      ___shlim($f,0,0);
      $28 = HEAP32[$rpos42>>2]|0;
      $29 = HEAP32[$shend43>>2]|0;
      $cmp44 = ($28>>>0)<($29>>>0);
      if ($cmp44) {
       $incdec$ptr48 = ((($28)) + 1|0);
       HEAP32[$rpos42>>2] = $incdec$ptr48;
       $30 = HEAP8[$28>>0]|0;
       $conv49 = $30&255;
       $cond53 = $conv49;
      } else {
       $call51 = (___shgetc($f)|0);
       $cond53 = $call51;
      }
      $31 = HEAP8[$add$ptr>>0]|0;
      $conv54 = $31&255;
      $cmp55 = ($cond53|0)==($conv54|0);
      if (!($cmp55)) {
       label = 23;
       break L6;
      }
      $34 = (_i64Add(($20|0),($21|0),1,0)|0);
      $35 = (getTempRet0() | 0);
      $179 = $178;$180 = $34;$181 = $35;$matches$1 = $matches$0308;$p$12 = $add$ptr;$s$7 = $s$0306;
     } else {
      $p$1 = $p$0312;
      while(1) {
       $arrayidx = ((($p$1)) + 1|0);
       $3 = HEAP8[$arrayidx>>0]|0;
       $conv3 = $3&255;
       $call4 = (_isspace($conv3)|0);
       $tobool5 = ($call4|0)==(0);
       if ($tobool5) {
        break;
       } else {
        $p$1 = $arrayidx;
       }
      }
      ___shlim($f,0,0);
      while(1) {
       $4 = HEAP32[$rpos42>>2]|0;
       $5 = HEAP32[$shend43>>2]|0;
       $cmp7 = ($4>>>0)<($5>>>0);
       if ($cmp7) {
        $incdec$ptr11 = ((($4)) + 1|0);
        HEAP32[$rpos42>>2] = $incdec$ptr11;
        $6 = HEAP8[$4>>0]|0;
        $conv12 = $6&255;
        $cond16 = $conv12;
       } else {
        $call14 = (___shgetc($f)|0);
        $cond16 = $call14;
       }
       $call17 = (_isspace($cond16)|0);
       $tobool18 = ($call17|0)==(0);
       if ($tobool18) {
        break;
       }
      }
      $7 = HEAP32[$shend43>>2]|0;
      $tobool22 = ($7|0)==(0|0);
      if ($tobool22) {
       $$pre = HEAP32[$rpos42>>2]|0;
       $17 = $$pre;
      } else {
       $8 = HEAP32[$rpos42>>2]|0;
       $incdec$ptr25 = ((($8)) + -1|0);
       HEAP32[$rpos42>>2] = $incdec$ptr25;
       $9 = $incdec$ptr25;
       $17 = $9;
      }
      $10 = $shcnt;
      $11 = $10;
      $12 = HEAP32[$11>>2]|0;
      $13 = (($10) + 4)|0;
      $14 = $13;
      $15 = HEAP32[$14>>2]|0;
      $16 = HEAP32[$rend>>2]|0;
      $sub$ptr$sub = (($17) - ($16))|0;
      $18 = ($sub$ptr$sub|0)<(0);
      $19 = $18 << 31 >> 31;
      $22 = (_i64Add(($12|0),($15|0),($20|0),($21|0))|0);
      $23 = (getTempRet0() | 0);
      $24 = (_i64Add(($22|0),($23|0),($sub$ptr$sub|0),($19|0))|0);
      $25 = (getTempRet0() | 0);
      $179 = $178;$180 = $24;$181 = $25;$matches$1 = $matches$0308;$p$12 = $p$1;$s$7 = $s$0306;
     }
    } while(0);
    $incdec$ptr564 = ((($p$12)) + 1|0);
    $176 = HEAP8[$incdec$ptr564>>0]|0;
    $tobool = ($176<<24>>24)==(0);
    if ($tobool) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $178 = $179;$2 = $176;$20 = $180;$21 = $181;$matches$0308 = $matches$1;$p$0312 = $incdec$ptr564;$s$0306 = $s$7;
    }
   }
   if ((label|0) == 23) {
    $32 = HEAP32[$shend43>>2]|0;
    $tobool59 = ($32|0)==(0|0);
    if (!($tobool59)) {
     $33 = HEAP32[$rpos42>>2]|0;
     $incdec$ptr62 = ((($33)) + -1|0);
     HEAP32[$rpos42>>2] = $incdec$ptr62;
    }
    $cmp65 = ($cond53|0)>(-1);
    $tobool567 = ($matches$0308|0)!=(0);
    $or$cond2 = $tobool567 | $cmp65;
    if ($or$cond2) {
     $matches$3 = $matches$0308;
     break;
    } else {
     $182 = $178;$alloc$1 = 0;$s$9 = $s$0306;
     label = 144;
    }
   }
   else if ((label|0) == 143) {
    $tobool567$old = ($matches$0308|0)==(0);
    if ($tobool567$old) {
     $182 = $184;$alloc$1 = $alloc$0;$s$9 = $s$8;
     label = 144;
    } else {
     $177 = $184;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$8;
    }
   }
   if ((label|0) == 144) {
    $177 = $182;$alloc$2 = $alloc$1;$matches$2 = -1;$s$10 = $s$9;
   }
   $tobool570 = ($alloc$2|0)==(0);
   if ($tobool570) {
    $matches$3 = $matches$2;
   } else {
    _free($s$10);
    _free($177);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $tobool574 = ($cond|0)==(0);
 if (!($tobool574)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function _arg_n($ap,$n) {
 $ap = $ap|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $ap2 = 0, $arglist_current = 0, $arglist_next = 0, $cmp = 0, $dec = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $i$0 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap2 = sp;
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $i$0 = $n;
 while(1) {
  $cmp = ($i$0>>>0)>(1);
  $arglist_current = HEAP32[$ap2>>2]|0;
  $0 = $arglist_current;
  $1 = ((0) + 4|0);
  $expanded1 = $1;
  $expanded = (($expanded1) - 1)|0;
  $2 = (($0) + ($expanded))|0;
  $3 = ((0) + 4|0);
  $expanded5 = $3;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $4 = $2 & $expanded3;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $arglist_next = ((($5)) + 4|0);
  HEAP32[$ap2>>2] = $arglist_next;
  $dec = (($i$0) + -1)|0;
  if ($cmp) {
   $i$0 = $dec;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($6|0);
}
function _store_int($dest,$size,$0,$1) {
 $dest = $dest|0;
 $size = $size|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($dest|0)==(0|0);
 L1: do {
  if (!($tobool)) {
   switch ($size|0) {
   case -2:  {
    $2 = $0&255;
    HEAP8[$dest>>0] = $2;
    break L1;
    break;
   }
   case -1:  {
    $3 = $0&65535;
    HEAP16[$dest>>1] = $3;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$dest>>2] = $0;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$dest>>2] = $0;
    break L1;
    break;
   }
   case 3:  {
    $4 = $dest;
    $5 = $4;
    HEAP32[$5>>2] = $0;
    $6 = (($4) + 4)|0;
    $7 = $6;
    HEAP32[$7>>2] = $1;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $add = 0, $add$ptr = 0, $add$ptr4 = 0, $call = 0, $cmp = 0, $cookie = 0, $k$0 = 0, $rend = 0, $rpos = 0, $spec$select = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cookie = ((($f)) + 84|0);
 $0 = HEAP32[$cookie>>2]|0;
 $add = (($len) + 256)|0;
 $call = (_memchr($0,0,$add)|0);
 $tobool = ($call|0)==(0|0);
 $sub$ptr$lhs$cast = $call;
 $sub$ptr$rhs$cast = $0;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $k$0 = $tobool ? $add : $sub$ptr$sub;
 $cmp = ($k$0>>>0)<($len>>>0);
 $spec$select = $cmp ? $k$0 : $len;
 (_memcpy(($buf|0),($0|0),($spec$select|0))|0);
 $add$ptr = (($0) + ($spec$select)|0);
 $rpos = ((($f)) + 4|0);
 HEAP32[$rpos>>2] = $add$ptr;
 $add$ptr4 = (($0) + ($k$0)|0);
 $rend = ((($f)) + 8|0);
 HEAP32[$rend>>2] = $add$ptr4;
 HEAP32[$cookie>>2] = $add$ptr4;
 return ($spec$select|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($off|0)<(0);
 $1 = $0 << 31 >> 31;
 $2 = (___fseeko($f,$off,$1,$whence)|0);
 return ($2|0);
}
function ___fseeko($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var $2 = 0, $3 = 0, $4 = 0, $call = 0, $call17 = 0, $cmp = 0, $lock = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $2 = HEAP32[$lock>>2]|0;
 $cmp = ($2|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  $4 = (___fseeko_unlocked($f,$0,$1,$whence)|0);
  if ($phitmp) {
   $call17 = $4;
  } else {
   ___unlockfile($f);
   $call17 = $4;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$0,$1,$whence)|0);
  $call17 = $3;
 }
 return ($call17|0);
}
function ___fseeko_unlocked($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $cmp = 0, $cmp1 = 0, $rend = 0;
 var $rend15 = 0, $retval$0 = 0, $rpos = 0, $rpos16 = 0, $seek = 0, $sub$ptr$sub = 0, $tobool = 0, $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($whence|0)==(1);
 if ($cmp) {
  $rend = ((($f)) + 8|0);
  $2 = HEAP32[$rend>>2]|0;
  $rpos = ((($f)) + 4|0);
  $3 = HEAP32[$rpos>>2]|0;
  $sub$ptr$sub = (($2) - ($3))|0;
  $4 = ($sub$ptr$sub|0)<(0);
  $5 = $4 << 31 >> 31;
  $6 = (_i64Subtract(($0|0),($1|0),($sub$ptr$sub|0),($5|0))|0);
  $7 = (getTempRet0() | 0);
  $13 = $6;$14 = $7;
 } else {
  $13 = $0;$14 = $1;
 }
 $wpos = ((($f)) + 20|0);
 $8 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $9 = HEAP32[$wbase>>2]|0;
 $cmp1 = ($8>>>0)>($9>>>0);
 if ($cmp1) {
  $write = ((($f)) + 36|0);
  $10 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$10 & 255]($f,0,0)|0);
  $11 = HEAP32[$wpos>>2]|0;
  $tobool = ($11|0)==(0|0);
  if ($tobool) {
   $retval$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = 0;
  HEAP32[$wbase>>2] = 0;
  HEAP32[$wpos>>2] = 0;
  $seek = ((($f)) + 40|0);
  $12 = HEAP32[$seek>>2]|0;
  (FUNCTION_TABLE_iiiii[$12 & 127]($f,$13,$14,$whence)|0);
  $15 = (getTempRet0() | 0);
  $16 = ($15|0)<(0);
  if ($16) {
   $retval$0 = -1;
  } else {
   $rend15 = ((($f)) + 8|0);
   HEAP32[$rend15>>2] = 0;
   $rpos16 = ((($f)) + 4|0);
   HEAP32[$rpos16>>2] = 0;
   $17 = HEAP32[$f>>2]|0;
   $and = $17 & -17;
   HEAP32[$f>>2] = $and;
   $retval$0 = 0;
  }
 }
 return ($retval$0|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $cmp = 0, $lock = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  $3 = (___ftello_unlocked($f)|0);
  $4 = (getTempRet0() | 0);
  if ($phitmp) {
   $5 = $4;$6 = $3;
  } else {
   ___unlockfile($f);
   $5 = $4;$6 = $3;
  }
 } else {
  $1 = (___ftello_unlocked($f)|0);
  $2 = (getTempRet0() | 0);
  $5 = $2;$6 = $1;
 }
 setTempRet0(($5) | 0);
 return ($6|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $and = 0, $cmp = 0, $phitmp = 0, $rend = 0, $rpos = 0, $seek = 0, $sub$ptr$sub = 0, $sub$ptr$sub6 = 0, $tobool = 0, $wbase = 0, $wbase3 = 0, $wpos = 0, $wpos2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $seek = ((($f)) + 40|0);
 $0 = HEAP32[$seek>>2]|0;
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 128;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $4 = 1;
 } else {
  $wpos = ((($f)) + 20|0);
  $2 = HEAP32[$wpos>>2]|0;
  $wbase = ((($f)) + 28|0);
  $3 = HEAP32[$wbase>>2]|0;
  $cmp = ($2>>>0)>($3>>>0);
  $phitmp = $cmp ? 2 : 1;
  $4 = $phitmp;
 }
 $5 = (FUNCTION_TABLE_iiiii[$0 & 127]($f,0,0,$4)|0);
 $6 = (getTempRet0() | 0);
 $7 = ($6|0)<(0);
 if ($7) {
  $20 = $6;$21 = $5;
 } else {
  $rend = ((($f)) + 8|0);
  $8 = HEAP32[$rend>>2]|0;
  $rpos = ((($f)) + 4|0);
  $9 = HEAP32[$rpos>>2]|0;
  $sub$ptr$sub = (($8) - ($9))|0;
  $10 = ($sub$ptr$sub|0)<(0);
  $11 = $10 << 31 >> 31;
  $12 = (_i64Subtract(($5|0),($6|0),($sub$ptr$sub|0),($11|0))|0);
  $13 = (getTempRet0() | 0);
  $wpos2 = ((($f)) + 20|0);
  $14 = HEAP32[$wpos2>>2]|0;
  $wbase3 = ((($f)) + 28|0);
  $15 = HEAP32[$wbase3>>2]|0;
  $sub$ptr$sub6 = (($14) - ($15))|0;
  $16 = ($sub$ptr$sub6|0)<(0);
  $17 = $16 << 31 >> 31;
  $18 = (_i64Add(($12|0),($13|0),($sub$ptr$sub6|0),($17|0))|0);
  $19 = (getTempRet0() | 0);
  $20 = $19;$21 = $18;
 }
 setTempRet0(($20) | 0);
 return ($21|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call10 = 0, $call28 = 0, $cmp = 0, $cmp15 = 0, $cmp20 = 0, $cmp3 = 0, $cmp5 = 0, $cond30 = 0, $conv = 0, $conv1 = 0, $conv11 = 0, $conv12 = 0;
 var $conv14 = 0, $conv2 = 0, $incdec$ptr = 0, $incdec$ptr25 = 0, $lbf = 0, $lbf13 = 0, $lock = 0, $retval$0 = 0, $tobool = 0, $wend = 0, $wend19 = 0, $wpos = 0, $wpos18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)<(0);
 if ($cmp) {
  label = 3;
 } else {
  $call = (___lockfile($f)|0);
  $tobool = ($call|0)==(0);
  if ($tobool) {
   label = 3;
  } else {
   $conv11 = $c&255;
   $conv12 = $c & 255;
   $lbf13 = ((($f)) + 75|0);
   $4 = HEAP8[$lbf13>>0]|0;
   $conv14 = $4 << 24 >> 24;
   $cmp15 = ($conv12|0)==($conv14|0);
   if ($cmp15) {
    label = 10;
   } else {
    $wpos18 = ((($f)) + 20|0);
    $5 = HEAP32[$wpos18>>2]|0;
    $wend19 = ((($f)) + 16|0);
    $6 = HEAP32[$wend19>>2]|0;
    $cmp20 = ($5>>>0)<($6>>>0);
    if ($cmp20) {
     $incdec$ptr25 = ((($5)) + 1|0);
     HEAP32[$wpos18>>2] = $incdec$ptr25;
     HEAP8[$5>>0] = $conv11;
     $cond30 = $conv12;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $call28 = (___overflow($f,$c)|0);
    $cond30 = $call28;
   }
   ___unlockfile($f);
   $retval$0 = $cond30;
  }
 }
 do {
  if ((label|0) == 3) {
   $conv = $c&255;
   $conv1 = $c & 255;
   $lbf = ((($f)) + 75|0);
   $1 = HEAP8[$lbf>>0]|0;
   $conv2 = $1 << 24 >> 24;
   $cmp3 = ($conv1|0)==($conv2|0);
   if (!($cmp3)) {
    $wpos = ((($f)) + 20|0);
    $2 = HEAP32[$wpos>>2]|0;
    $wend = ((($f)) + 16|0);
    $3 = HEAP32[$wend>>2]|0;
    $cmp5 = ($2>>>0)<($3>>>0);
    if ($cmp5) {
     $incdec$ptr = ((($2)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$2>>0] = $conv;
     $retval$0 = $conv1;
     break;
    }
   }
   $call10 = (___overflow($f,$c)|0);
   $retval$0 = $call10;
  }
 } while(0);
 return ($retval$0|0);
}
function _putchar($c) {
 $c = $c|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32439]|0;
 $call = (_fputc($c,$0)|0);
 return ($call|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $add$ptr = 0, $add$ptr26 = 0, $add$ptr46 = 0, $call = 0, $call30 = 0, $call34 = 0, $cmp = 0, $cmp12 = 0, $cmp37 = 0, $cmp4 = 0, $cond = 0, $conv = 0;
 var $conv3 = 0, $dest$0 = 0, $dest$146 = 0, $div = 0, $l$0 = 0, $l$147 = 0, $lock = 0, $mode = 0, $mul = 0, $or = 0, $read = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $spec$select = 0, $sub = 0, $sub$ptr$sub = 0, $sub$ptr$sub$mul = 0, $sub27 = 0, $sub43 = 0;
 var $sub45 = 0, $tobool = 0, $tobool29 = 0, $tobool2945 = 0, $tobool31 = 0, $tobool40 = 0, $tobool47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = Math_imul($nmemb, $size)|0;
 $tobool = ($size|0)==(0);
 $spec$select = $tobool ? 0 : $nmemb;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 $mode = ((($f)) + 74|0);
 $1 = HEAP8[$mode>>0]|0;
 $conv = $1 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $rend = ((($f)) + 8|0);
 $2 = HEAP32[$rend>>2]|0;
 $rpos = ((($f)) + 4|0);
 $3 = HEAP32[$rpos>>2]|0;
 $sub$ptr$sub = (($2) - ($3))|0;
 $cmp4 = ($sub$ptr$sub|0)>(0);
 if ($cmp4) {
  $4 = $3;
  $cmp12 = ($sub$ptr$sub>>>0)<($mul>>>0);
  $sub$ptr$sub$mul = $cmp12 ? $sub$ptr$sub : $mul;
  (_memcpy(($destv|0),($4|0),($sub$ptr$sub$mul|0))|0);
  $5 = HEAP32[$rpos>>2]|0;
  $add$ptr = (($5) + ($sub$ptr$sub$mul)|0);
  HEAP32[$rpos>>2] = $add$ptr;
  $add$ptr26 = (($destv) + ($sub$ptr$sub$mul)|0);
  $sub27 = (($mul) - ($sub$ptr$sub$mul))|0;
  $dest$0 = $add$ptr26;$l$0 = $sub27;
 } else {
  $dest$0 = $destv;$l$0 = $mul;
 }
 $tobool2945 = ($l$0|0)==(0);
 L7: do {
  if ($tobool2945) {
   label = 13;
  } else {
   $read = ((($f)) + 32|0);
   $dest$146 = $dest$0;$l$147 = $l$0;
   while(1) {
    $call30 = (___toread($f)|0);
    $tobool31 = ($call30|0)==(0);
    if (!($tobool31)) {
     break;
    }
    $6 = HEAP32[$read>>2]|0;
    $call34 = (FUNCTION_TABLE_iiii[$6 & 255]($f,$dest$146,$l$147)|0);
    $add = (($call34) + 1)|0;
    $cmp37 = ($add>>>0)<(2);
    if ($cmp37) {
     break;
    }
    $sub45 = (($l$147) - ($call34))|0;
    $add$ptr46 = (($dest$146) + ($call34)|0);
    $tobool29 = ($sub45|0)==(0);
    if ($tobool29) {
     label = 13;
     break L7;
    } else {
     $dest$146 = $add$ptr46;$l$147 = $sub45;
    }
   }
   $tobool40 = ($cond|0)==(0);
   if (!($tobool40)) {
    ___unlockfile($f);
   }
   $sub43 = (($mul) - ($l$147))|0;
   $div = (($sub43>>>0) / ($size>>>0))&-1;
   $retval$0 = $div;
  }
 } while(0);
 if ((label|0) == 13) {
  $tobool47 = ($cond|0)==(0);
  if ($tobool47) {
   $retval$0 = $spec$select;
  } else {
   ___unlockfile($f);
   $retval$0 = $spec$select;
  }
 }
 return ($retval$0|0);
}
function _remove($path) {
 $path = $path|0;
 var $0 = 0, $call = 0, $call1 = 0, $call2 = 0, $cmp = 0, $r$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $path;
 $call = (___syscall10(($0|0))|0);
 $cmp = ($call|0)==(-31);
 if ($cmp) {
  $call1 = (___syscall40(($0|0))|0);
  $r$0 = $call1;
 } else {
  $r$0 = $call;
 }
 $call2 = (___syscall_ret($r$0)|0);
 return ($call2|0);
}
function _rename($old,$new) {
 $old = $old|0;
 $new = $new|0;
 var $0 = 0, $1 = 0, $call = 0, $call1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $old;
 $1 = $new;
 $call = (___syscall38(($0|0),($1|0))|0);
 $call1 = (___syscall_ret($call)|0);
 return ($call1|0);
}
function _puts($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $call10 = 0, $call10$lobit = 0, $cmp = 0, $cmp2 = 0, $cmp3 = 0, $cmp5 = 0, $cond = 0, $incdec$ptr = 0, $lbf = 0, $lock = 0, $tobool = 0, $wend = 0;
 var $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32439]|0;
 $lock = ((($0)) + 76|0);
 $1 = HEAP32[$lock>>2]|0;
 $cmp = ($1|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($0)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 $call1 = (_fputs($s,$0)|0);
 $cmp2 = ($call1|0)<(0);
 do {
  if ($cmp2) {
   $5 = -1;
  } else {
   $lbf = ((($0)) + 75|0);
   $2 = HEAP8[$lbf>>0]|0;
   $cmp3 = ($2<<24>>24)==(10);
   if (!($cmp3)) {
    $wpos = ((($0)) + 20|0);
    $3 = HEAP32[$wpos>>2]|0;
    $wend = ((($0)) + 16|0);
    $4 = HEAP32[$wend>>2]|0;
    $cmp5 = ($3>>>0)<($4>>>0);
    if ($cmp5) {
     $incdec$ptr = ((($3)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$3>>0] = 10;
     $5 = 0;
     break;
    }
   }
   $call10 = (___overflow($0,10)|0);
   $call10$lobit = $call10 >> 31;
   $5 = $call10$lobit;
  }
 } while(0);
 $tobool = ($cond|0)==(0);
 if (!($tobool)) {
  ___unlockfile($0);
 }
 return ($5|0);
}
function _ftell($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call1 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ftello($f)|0);
 $1 = (getTempRet0() | 0);
 $2 = ($1|0)>(0);
 $3 = ($0>>>0)>(2147483647);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 61;
  $retval$0 = -1;
 } else {
  $retval$0 = $0;
 }
 return ($retval$0|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[32439]|0;
 $call = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function ___emscripten_environ_constructor() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___buildEnvironment((399560|0));
 return;
}
function __get_environ() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (399560|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i134 = 0, $$pre$i194 = 0, $$pre$i31$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i195Z2D = 0, $$pre$phi$i32$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F290$0$i = 0, $I252$0$i$i = 0, $I316$0$i = 0, $I57$0$i$i = 0, $K105$010$i$i = 0;
 var $K305$08$i$i = 0, $K373$015$i = 0, $R$1$i = 0, $R$1$i$be = 0, $R$1$i$i = 0, $R$1$i$i$be = 0, $R$1$i$i$ph = 0, $R$1$i$ph = 0, $R$1$i183 = 0, $R$1$i183$be = 0, $R$1$i183$ph = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i188 = 0, $RP$1$i = 0, $RP$1$i$be = 0, $RP$1$i$i = 0, $RP$1$i$i$be = 0, $RP$1$i$i$ph = 0, $RP$1$i$ph = 0;
 var $RP$1$i182 = 0, $RP$1$i182$be = 0, $RP$1$i182$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i34$i = 0, $T$014$i = 0, $T$07$i$i = 0, $T$09$i$i = 0, $add$i = 0, $add$i$i = 0, $add$i135 = 0, $add$i155 = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i141 = 0, $add$ptr$i174 = 0, $add$ptr$i2$i$i = 0;
 var $add$ptr$i35$i = 0, $add$ptr$i43$i = 0, $add$ptr$i57$i = 0, $add$ptr14$i$i = 0, $add$ptr15$i$i = 0, $add$ptr16$i$i = 0, $add$ptr166 = 0, $add$ptr169 = 0, $add$ptr17$i$i = 0, $add$ptr178 = 0, $add$ptr181$i = 0, $add$ptr182 = 0, $add$ptr189$i = 0, $add$ptr190$i = 0, $add$ptr193 = 0, $add$ptr199 = 0, $add$ptr2$i$i = 0, $add$ptr205$i$i = 0, $add$ptr212$i$i = 0, $add$ptr225$i = 0;
 var $add$ptr227$i = 0, $add$ptr24$i$i = 0, $add$ptr262$i = 0, $add$ptr269$i = 0, $add$ptr273$i = 0, $add$ptr282$i = 0, $add$ptr3$i$i = 0, $add$ptr30$i$i = 0, $add$ptr369$i$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i41$i = 0, $add$ptr4$i49$i = 0, $add$ptr441$i = 0, $add$ptr5$i$i = 0, $add$ptr6$i$i = 0, $add$ptr6$i$i$i = 0, $add$ptr6$i53$i = 0, $add$ptr7$i$i = 0, $add$ptr81$i$i = 0;
 var $add$ptr95 = 0, $add$ptr98 = 0, $add10$i = 0, $add101$i = 0, $add110$i = 0, $add13$i = 0, $add14$i = 0, $add140$i = 0, $add144 = 0, $add150$i = 0, $add17$i = 0, $add17$i158 = 0, $add177$i = 0, $add18$i = 0, $add19$i = 0, $add2 = 0, $add20$i = 0, $add206$i$i = 0, $add212$i = 0, $add215$i = 0;
 var $add22$i = 0, $add246$i = 0, $add26$i$i = 0, $add268$i = 0, $add269$i$i = 0, $add274$i$i = 0, $add278$i$i = 0, $add280$i$i = 0, $add283$i$i = 0, $add337$i = 0, $add342$i = 0, $add346$i = 0, $add348$i = 0, $add351$i = 0, $add46$i = 0, $add50 = 0, $add51$i = 0, $add54 = 0, $add54$i = 0, $add58 = 0;
 var $add62 = 0, $add64 = 0, $add74$i$i = 0, $add77$i = 0, $add78$i = 0, $add79$i$i = 0, $add8 = 0, $add82$i = 0, $add83$i$i = 0, $add85$i$i = 0, $add86$i = 0, $add88$i$i = 0, $add9$i = 0, $add90$i = 0, $add92$i = 0, $and = 0, $and$i = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i14$i = 0;
 var $and$i152 = 0, $and$i36$i = 0, $and$i44$i = 0, $and100$i = 0, $and103$i = 0, $and104$i = 0, $and106 = 0, $and11$i = 0, $and119$i$i = 0, $and1197$i$i = 0, $and12$i = 0, $and13$i = 0, $and13$i$i = 0, $and133$i$i = 0, $and14 = 0, $and145 = 0, $and17$i = 0, $and194$i = 0, $and194$i191 = 0, $and199$i = 0;
 var $and209$i$i = 0, $and21$i = 0, $and21$i159 = 0, $and227$i$i = 0, $and236$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and282$i$i = 0, $and29$i = 0, $and292$i = 0, $and295$i$i = 0, $and3$i = 0, $and3$i$i = 0, $and3$i$i$i = 0, $and3$i39$i = 0, $and3$i47$i = 0, $and30$i = 0, $and318$i$i = 0, $and3185$i$i = 0;
 var $and32$i = 0, $and32$i$i = 0, $and33$i$i = 0, $and331$i = 0, $and336$i = 0, $and341$i = 0, $and350$i = 0, $and363$i = 0, $and37$i$i = 0, $and387$i = 0, $and38712$i = 0, $and4 = 0, $and40$i$i = 0, $and41 = 0, $and42$i = 0, $and43 = 0, $and46 = 0, $and49 = 0, $and49$i = 0, $and49$i$i = 0;
 var $and53 = 0, $and57 = 0, $and6$i = 0, $and6$i$i = 0, $and6$i13$i = 0, $and6$i18$i = 0, $and61 = 0, $and64$i = 0, $and68$i = 0, $and69$i$i = 0, $and7 = 0, $and73$i = 0, $and73$i$i = 0, $and74 = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and81$i = 0, $and85$i = 0;
 var $and87$i$i = 0, $and89$i = 0, $and9$i = 0, $and96$i$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i160 = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx106$i = 0, $arrayidx107$i$i = 0, $arrayidx113$i = 0, $arrayidx113$i173 = 0, $arrayidx121$i = 0, $arrayidx121$i$sink = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx137$i = 0, $arrayidx143$i$i = 0;
 var $arrayidx148$i = 0, $arrayidx151$i = 0, $arrayidx151$i$i = 0, $arrayidx151$i$i$sink = 0, $arrayidx154$i = 0, $arrayidx155$i = 0, $arrayidx161$i = 0, $arrayidx165$i = 0, $arrayidx165$i185 = 0, $arrayidx178$i$i = 0, $arrayidx184$i = 0, $arrayidx184$i$i = 0, $arrayidx195$i$i = 0, $arrayidx196$i = 0, $arrayidx204$i = 0, $arrayidx212$i = 0, $arrayidx212$i$sink = 0, $arrayidx223$i$i = 0, $arrayidx228$i = 0, $arrayidx23$i = 0;
 var $arrayidx239$i = 0, $arrayidx245$i = 0, $arrayidx256$i = 0, $arrayidx27$i = 0, $arrayidx287$i$i = 0, $arrayidx289$i = 0, $arrayidx290$i$i = 0, $arrayidx325$i$i = 0, $arrayidx355$i = 0, $arrayidx358$i = 0, $arrayidx394$i = 0, $arrayidx40$i = 0, $arrayidx44$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx92$i$i = 0;
 var $arrayidx94$i = 0, $arrayidx94$i170 = 0, $arrayidx96$i$i = 0, $bk$i = 0, $bk$i$i = 0, $bk$i176 = 0, $bk$i26$i = 0, $bk102$i$i = 0, $bk122 = 0, $bk124 = 0, $bk139$i$i = 0, $bk145$i = 0, $bk158$i$i = 0, $bk161$i$i = 0, $bk18 = 0, $bk218$i = 0, $bk220$i = 0, $bk246$i$i = 0, $bk248$i$i = 0, $bk302$i$i = 0;
 var $bk311$i = 0, $bk313$i = 0, $bk338$i$i = 0, $bk357$i$i = 0, $bk360$i$i = 0, $bk370$i = 0, $bk407$i = 0, $bk429$i = 0, $bk432$i = 0, $bk55$i$i = 0, $bk56$i = 0, $bk67$i$i = 0, $bk74$i$i = 0, $bk85 = 0, $bk91$i$i = 0, $br$2$ph$i = 0, $call107$i = 0, $call131$i = 0, $call132$i = 0, $call275$i = 0;
 var $call37$i = 0, $call68$i = 0, $call83$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child357$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i12$i = 0, $cmp$i133 = 0, $cmp$i149 = 0, $cmp$i15$i = 0, $cmp$i3$i$i = 0, $cmp$i37$i = 0, $cmp$i45$i = 0, $cmp$i55$i = 0, $cmp1 = 0, $cmp1$i = 0;
 var $cmp10 = 0, $cmp100$i$i = 0, $cmp102$i = 0, $cmp104$i$i = 0, $cmp105$i = 0, $cmp106$i$i = 0, $cmp107$i = 0, $cmp108$i = 0, $cmp108$i$i = 0, $cmp114$i = 0, $cmp116$i = 0, $cmp118$i = 0, $cmp119$i = 0, $cmp12$i = 0, $cmp120$i$i = 0, $cmp120$i28$i = 0, $cmp1208$i$i = 0, $cmp123$i = 0, $cmp124$i$i = 0, $cmp126$i = 0;
 var $cmp127$i = 0, $cmp128 = 0, $cmp128$i = 0, $cmp128$i$i = 0, $cmp133$i = 0, $cmp135$i = 0, $cmp137$i = 0, $cmp138$i = 0, $cmp139 = 0, $cmp141$i = 0, $cmp144$i$i = 0, $cmp146 = 0, $cmp147$i = 0, $cmp14799$i = 0, $cmp15$i = 0, $cmp151$i = 0, $cmp152$i = 0, $cmp155$i = 0, $cmp156 = 0, $cmp156$i = 0;
 var $cmp156$i$i = 0, $cmp157$i = 0, $cmp159$i = 0, $cmp162 = 0, $cmp162$i = 0, $cmp162$i184 = 0, $cmp166$i = 0, $cmp168$i$i = 0, $cmp174$i = 0, $cmp180$i = 0, $cmp185$i = 0, $cmp185$i$i = 0, $cmp186 = 0, $cmp186$i = 0, $cmp19$i = 0, $cmp190$i = 0, $cmp191$i = 0, $cmp2$i$i = 0, $cmp2$i$i$i = 0, $cmp20$i$i = 0;
 var $cmp203$i = 0, $cmp205$i = 0, $cmp209$i = 0, $cmp21$i = 0, $cmp215$i$i = 0, $cmp217$i = 0, $cmp218$i = 0, $cmp224$i = 0, $cmp228$i = 0, $cmp229$i = 0, $cmp24$i = 0, $cmp24$i$i = 0, $cmp246$i = 0, $cmp254$i$i = 0, $cmp257$i = 0, $cmp258$i$i = 0, $cmp26$i = 0, $cmp265$i = 0, $cmp27$i$i = 0, $cmp28$i = 0;
 var $cmp28$i$i = 0, $cmp284$i = 0, $cmp29 = 0, $cmp3$i$i = 0, $cmp306$i$i = 0, $cmp31 = 0, $cmp319$i = 0, $cmp319$i$i = 0, $cmp3196$i$i = 0, $cmp32$i = 0, $cmp32$i138 = 0, $cmp323$i = 0, $cmp327$i$i = 0, $cmp34$i = 0, $cmp34$i$i = 0, $cmp35$i = 0, $cmp36$i = 0, $cmp36$i$i = 0, $cmp374$i = 0, $cmp38$i = 0;
 var $cmp38$i$i = 0, $cmp388$i = 0, $cmp38813$i = 0, $cmp396$i = 0, $cmp40$i = 0, $cmp43$i = 0, $cmp45$i = 0, $cmp46$i = 0, $cmp46$i$i = 0, $cmp49$i = 0, $cmp5 = 0, $cmp55$i = 0, $cmp55$i166 = 0, $cmp57$i = 0, $cmp57$i167 = 0, $cmp59$i$i = 0, $cmp60$i = 0, $cmp62$i = 0, $cmp63$i = 0, $cmp63$i$i = 0;
 var $cmp65$i = 0, $cmp66$i = 0, $cmp66$i140 = 0, $cmp69$i = 0, $cmp7$i$i = 0, $cmp70 = 0, $cmp72$i = 0, $cmp75$i$i = 0, $cmp76$i = 0, $cmp81$i = 0, $cmp85$i = 0, $cmp89$i = 0, $cmp9$i$i = 0, $cmp90$i = 0, $cmp91$i = 0, $cmp93$i = 0, $cmp95$i = 0, $cmp96$i = 0, $cmp97$i = 0, $cmp97$i$i = 0;
 var $cmp9716$i = 0, $cmp99 = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i17$i = 0, $cond$i40$i = 0, $cond$i48$i = 0, $cond1$i$i = 0, $cond115$i = 0, $cond115$i$i = 0, $cond13$i$i = 0, $cond15$i$i = 0, $cond2$i = 0, $cond3$i = 0, $cond315$i$i = 0, $cond383$i = 0, $cond4$i = 0, $fd$i = 0;
 var $fd$i$i = 0, $fd$i177 = 0, $fd103$i$i = 0, $fd123 = 0, $fd140$i$i = 0, $fd146$i = 0, $fd148$i$i = 0, $fd160$i$i = 0, $fd219$i = 0, $fd247$i$i = 0, $fd303$i$i = 0, $fd312$i = 0, $fd339$i$i = 0, $fd344$i$i = 0, $fd359$i$i = 0, $fd371$i = 0, $fd408$i = 0, $fd416$i = 0, $fd431$i = 0, $fd54$i$i = 0;
 var $fd57$i = 0, $fd68$i$i = 0, $fd69 = 0, $fd78$i$i = 0, $fd9 = 0, $fd92$i$i = 0, $head = 0, $head$i = 0, $head$i$i = 0, $head$i$i$i = 0, $head$i164 = 0, $head$i22$i = 0, $head$i42$i = 0, $head$i52$i = 0, $head118$i$i = 0, $head1186$i$i = 0, $head168 = 0, $head173 = 0, $head177 = 0, $head179 = 0;
 var $head179$i = 0, $head182$i = 0, $head187$i = 0, $head189$i = 0, $head195 = 0, $head198 = 0, $head208$i$i = 0, $head211$i$i = 0, $head23$i$i = 0, $head25 = 0, $head26$i$i = 0, $head265$i = 0, $head268$i = 0, $head271$i = 0, $head274$i = 0, $head279$i = 0, $head281$i = 0, $head29$i = 0, $head29$i$i = 0, $head317$i$i = 0;
 var $head3174$i$i = 0, $head32$i$i = 0, $head34$i$i = 0, $head386$i = 0, $head38611$i = 0, $head7$i$i = 0, $head7$i$i$i = 0, $head7$i54$i = 0, $head94 = 0, $head97 = 0, $head99$i = 0, $idx$0$i = 0, $index$i = 0, $index$i$i = 0, $index$i189 = 0, $index$i29$i = 0, $index288$i$i = 0, $index356$i = 0, $magic$i$i = 0, $nb$0 = 0;
 var $neg = 0, $neg$i = 0, $neg$i$i = 0, $neg$i137 = 0, $neg$i190 = 0, $neg103$i = 0, $neg13 = 0, $neg132$i$i = 0, $neg48$i = 0, $neg73 = 0, $next$i = 0, $next$i$i = 0, $next$i$i$i = 0, $next231$i = 0, $not$cmp141$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i168 = 0, $or$cond1$i = 0, $or$cond1$i165 = 0;
 var $or$cond11$i = 0, $or$cond2$i = 0, $or$cond4$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $or$cond97$i = 0, $or$cond98$i = 0, $or$i = 0, $or$i$i = 0, $or$i$i$i = 0, $or$i169 = 0, $or$i51$i = 0, $or101$i$i = 0, $or110 = 0, $or167 = 0, $or172 = 0, $or176 = 0, $or178$i = 0;
 var $or180 = 0, $or183$i = 0, $or186$i = 0, $or188$i = 0, $or19$i$i = 0, $or194 = 0, $or197 = 0, $or204$i = 0, $or210$i$i = 0, $or22$i$i = 0, $or23 = 0, $or232$i$i = 0, $or26 = 0, $or264$i = 0, $or267$i = 0, $or270$i = 0, $or275$i = 0, $or278$i = 0, $or28$i$i = 0, $or280$i = 0;
 var $or297$i = 0, $or300$i$i = 0, $or33$i$i = 0, $or368$i = 0, $or40 = 0, $or44$i$i = 0, $or93 = 0, $or96 = 0, $parent$i = 0, $parent$i$i = 0, $parent$i175 = 0, $parent$i27$i = 0, $parent135$i = 0, $parent138$i$i = 0, $parent149$i = 0, $parent162$i$i = 0, $parent165$i$i = 0, $parent166$i = 0, $parent179$i$i = 0, $parent196$i$i = 0;
 var $parent226$i = 0, $parent240$i = 0, $parent257$i = 0, $parent301$i$i = 0, $parent337$i$i = 0, $parent361$i$i = 0, $parent369$i = 0, $parent406$i = 0, $parent433$i = 0, $qsize$0$i$i = 0, $retval$0 = 0, $rsize$0$i = 0, $rsize$0$i162 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$418$i = 0, $rsize$418$i$ph = 0, $rst$0$i = 0, $rst$1$i = 0;
 var $sflags193$i = 0, $sflags235$i = 0, $shl = 0, $shl$i = 0, $shl$i$i = 0, $shl$i153 = 0, $shl102 = 0, $shl105 = 0, $shl116$i$i = 0, $shl12 = 0, $shl127$i$i = 0, $shl131$i$i = 0, $shl15$i = 0, $shl18$i = 0, $shl192$i = 0, $shl195$i = 0, $shl198$i = 0, $shl22 = 0, $shl222$i$i = 0, $shl226$i$i = 0;
 var $shl265$i$i = 0, $shl270$i$i = 0, $shl276$i$i = 0, $shl279$i$i = 0, $shl288$i = 0, $shl291$i = 0, $shl294$i$i = 0, $shl31$i = 0, $shl316$i$i = 0, $shl326$i$i = 0, $shl333$i = 0, $shl338$i = 0, $shl344$i = 0, $shl347$i = 0, $shl35 = 0, $shl362$i = 0, $shl37 = 0, $shl384$i = 0, $shl39$i$i = 0, $shl395$i = 0;
 var $shl48$i$i = 0, $shl60$i = 0, $shl65 = 0, $shl70$i$i = 0, $shl72 = 0, $shl75$i$i = 0, $shl81$i$i = 0, $shl84$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i = 0, $shr$i$i = 0, $shr$i148 = 0, $shr$i25$i = 0, $shr101 = 0, $shr11$i = 0, $shr11$i156 = 0, $shr110$i$i = 0;
 var $shr12$i = 0, $shr124$i$i = 0, $shr15$i = 0, $shr16$i = 0, $shr16$i157 = 0, $shr19$i = 0, $shr194$i = 0, $shr20$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr263$i$i = 0, $shr267$i$i = 0, $shr27$i = 0, $shr272$i$i = 0, $shr277$i$i = 0, $shr281$i$i = 0, $shr283$i = 0, $shr3 = 0, $shr310$i$i = 0, $shr318$i = 0;
 var $shr323$i$i = 0, $shr330$i = 0, $shr335$i = 0, $shr340$i = 0, $shr345$i = 0, $shr349$i = 0, $shr378$i = 0, $shr392$i = 0, $shr4$i = 0, $shr42$i = 0, $shr45 = 0, $shr47 = 0, $shr48 = 0, $shr5$i = 0, $shr5$i151 = 0, $shr51 = 0, $shr52 = 0, $shr55 = 0, $shr56 = 0, $shr58$i$i = 0;
 var $shr59 = 0, $shr60 = 0, $shr63 = 0, $shr68$i$i = 0, $shr7$i = 0, $shr7$i154 = 0, $shr72$i = 0, $shr72$i$i = 0, $shr75$i = 0, $shr76$i = 0, $shr77$i$i = 0, $shr79$i = 0, $shr8$i = 0, $shr80$i = 0, $shr82$i$i = 0, $shr83$i = 0, $shr84$i = 0, $shr86$i$i = 0, $shr87$i = 0, $shr88$i = 0;
 var $shr91$i = 0, $size$i$i = 0, $size$i$i$i = 0, $size$i$i$le = 0, $size188$i = 0, $size188$i$le = 0, $size245$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0112$i = 0, $sp$1111$i = 0, $spec$select$i = 0, $spec$select$i171 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select5$i = 0, $spec$select9$i = 0, $spec$select96$i = 0, $ssize$2$ph$i = 0;
 var $sub = 0, $sub$i = 0, $sub$i$i = 0, $sub$i$i$i = 0, $sub$i136 = 0, $sub$i147 = 0, $sub$i16$i = 0, $sub$i38$i = 0, $sub$i46$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$lhs$cast$i19$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$rhs$cast$i20$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i21$i = 0, $sub10$i = 0, $sub101$i = 0;
 var $sub112$i = 0, $sub113$i$i = 0, $sub118$i = 0, $sub12$i$i = 0, $sub14$i = 0, $sub16$i$i = 0, $sub160 = 0, $sub172$i = 0, $sub18$i$i = 0, $sub190 = 0, $sub2$i = 0, $sub22$i = 0, $sub260$i = 0, $sub262$i$i = 0, $sub266$i$i = 0, $sub271$i$i = 0, $sub275$i$i = 0, $sub30$i = 0, $sub31$i = 0, $sub313$i$i = 0;
 var $sub329$i = 0, $sub33$i = 0, $sub334$i = 0, $sub339$i = 0, $sub343$i = 0, $sub381$i = 0, $sub4$i = 0, $sub41$i = 0, $sub42 = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i50$i = 0, $sub50$i = 0, $sub6$i = 0, $sub63$i = 0, $sub67$i = 0, $sub67$i$i = 0, $sub70$i = 0, $sub71$i$i = 0;
 var $sub76$i$i = 0, $sub80$i$i = 0, $sub91 = 0, $sub99$i = 0, $t$0$i = 0, $t$0$i161 = 0, $t$2$i = 0, $t$4$i = 0, $t$517$i = 0, $t$517$i$ph = 0, $tbase$795$i = 0, $tobool$i$i = 0, $tobool107 = 0, $tobool195$i = 0, $tobool200$i = 0, $tobool228$i$i = 0, $tobool237$i = 0, $tobool293$i = 0, $tobool296$i$i = 0, $tobool30$i = 0;
 var $tobool364$i = 0, $tobool97$i$i = 0, $tsize$2647482$i = 0, $tsize$4$i = 0, $tsize$794$i = 0, $v$0$i = 0, $v$0$i163 = 0, $v$1$i = 0, $v$3$i = 0, $v$3$i204 = 0, $v$4$lcssa$i = 0, $v$419$i = 0, $v$419$i$ph = 0, $xor$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $magic$i$i = sp;
 $cmp = ($bytes>>>0)<(245);
 do {
  if ($cmp) {
   $cmp1 = ($bytes>>>0)<(11);
   $add2 = (($bytes) + 11)|0;
   $and = $add2 & -8;
   $cond = $cmp1 ? 16 : $and;
   $shr = $cond >>> 3;
   $0 = HEAP32[99891]|0;
   $shr3 = $0 >>> $shr;
   $and4 = $shr3 & 3;
   $cmp5 = ($and4|0)==(0);
   if (!($cmp5)) {
    $neg = $shr3 & 1;
    $and7 = $neg ^ 1;
    $add8 = (($and7) + ($shr))|0;
    $shl = $add8 << 1;
    $arrayidx = (399604 + ($shl<<2)|0);
    $1 = ((($arrayidx)) + 8|0);
    $2 = HEAP32[$1>>2]|0;
    $fd9 = ((($2)) + 8|0);
    $3 = HEAP32[$fd9>>2]|0;
    $cmp10 = ($3|0)==($arrayidx|0);
    if ($cmp10) {
     $shl12 = 1 << $add8;
     $neg13 = $shl12 ^ -1;
     $and14 = $0 & $neg13;
     HEAP32[99891] = $and14;
    } else {
     $bk18 = ((($3)) + 12|0);
     HEAP32[$bk18>>2] = $arrayidx;
     HEAP32[$1>>2] = $3;
    }
    $shl22 = $add8 << 3;
    $or23 = $shl22 | 3;
    $head = ((($2)) + 4|0);
    HEAP32[$head>>2] = $or23;
    $add$ptr = (($2) + ($shl22)|0);
    $head25 = ((($add$ptr)) + 4|0);
    $4 = HEAP32[$head25>>2]|0;
    $or26 = $4 | 1;
    HEAP32[$head25>>2] = $or26;
    $retval$0 = $fd9;
    STACKTOP = sp;return ($retval$0|0);
   }
   $5 = HEAP32[(399572)>>2]|0;
   $cmp29 = ($cond>>>0)>($5>>>0);
   if ($cmp29) {
    $cmp31 = ($shr3|0)==(0);
    if (!($cmp31)) {
     $shl35 = $shr3 << $shr;
     $shl37 = 2 << $shr;
     $sub = (0 - ($shl37))|0;
     $or40 = $shl37 | $sub;
     $and41 = $shl35 & $or40;
     $sub42 = (0 - ($and41))|0;
     $and43 = $and41 & $sub42;
     $sub44 = (($and43) + -1)|0;
     $shr45 = $sub44 >>> 12;
     $and46 = $shr45 & 16;
     $shr47 = $sub44 >>> $and46;
     $shr48 = $shr47 >>> 5;
     $and49 = $shr48 & 8;
     $add50 = $and49 | $and46;
     $shr51 = $shr47 >>> $and49;
     $shr52 = $shr51 >>> 2;
     $and53 = $shr52 & 4;
     $add54 = $add50 | $and53;
     $shr55 = $shr51 >>> $and53;
     $shr56 = $shr55 >>> 1;
     $and57 = $shr56 & 2;
     $add58 = $add54 | $and57;
     $shr59 = $shr55 >>> $and57;
     $shr60 = $shr59 >>> 1;
     $and61 = $shr60 & 1;
     $add62 = $add58 | $and61;
     $shr63 = $shr59 >>> $and61;
     $add64 = (($add62) + ($shr63))|0;
     $shl65 = $add64 << 1;
     $arrayidx66 = (399604 + ($shl65<<2)|0);
     $6 = ((($arrayidx66)) + 8|0);
     $7 = HEAP32[$6>>2]|0;
     $fd69 = ((($7)) + 8|0);
     $8 = HEAP32[$fd69>>2]|0;
     $cmp70 = ($8|0)==($arrayidx66|0);
     if ($cmp70) {
      $shl72 = 1 << $add64;
      $neg73 = $shl72 ^ -1;
      $and74 = $0 & $neg73;
      HEAP32[99891] = $and74;
      $10 = $and74;
     } else {
      $bk85 = ((($8)) + 12|0);
      HEAP32[$bk85>>2] = $arrayidx66;
      HEAP32[$6>>2] = $8;
      $10 = $0;
     }
     $shl90 = $add64 << 3;
     $sub91 = (($shl90) - ($cond))|0;
     $or93 = $cond | 3;
     $head94 = ((($7)) + 4|0);
     HEAP32[$head94>>2] = $or93;
     $add$ptr95 = (($7) + ($cond)|0);
     $or96 = $sub91 | 1;
     $head97 = ((($add$ptr95)) + 4|0);
     HEAP32[$head97>>2] = $or96;
     $add$ptr98 = (($7) + ($shl90)|0);
     HEAP32[$add$ptr98>>2] = $sub91;
     $cmp99 = ($5|0)==(0);
     if (!($cmp99)) {
      $9 = HEAP32[(399584)>>2]|0;
      $shr101 = $5 >>> 3;
      $shl102 = $shr101 << 1;
      $arrayidx103 = (399604 + ($shl102<<2)|0);
      $shl105 = 1 << $shr101;
      $and106 = $10 & $shl105;
      $tobool107 = ($and106|0)==(0);
      if ($tobool107) {
       $or110 = $10 | $shl105;
       HEAP32[99891] = $or110;
       $$pre = ((($arrayidx103)) + 8|0);
       $$pre$phiZ2D = $$pre;$F104$0 = $arrayidx103;
      } else {
       $11 = ((($arrayidx103)) + 8|0);
       $12 = HEAP32[$11>>2]|0;
       $$pre$phiZ2D = $11;$F104$0 = $12;
      }
      HEAP32[$$pre$phiZ2D>>2] = $9;
      $bk122 = ((($F104$0)) + 12|0);
      HEAP32[$bk122>>2] = $9;
      $fd123 = ((($9)) + 8|0);
      HEAP32[$fd123>>2] = $F104$0;
      $bk124 = ((($9)) + 12|0);
      HEAP32[$bk124>>2] = $arrayidx103;
     }
     HEAP32[(399572)>>2] = $sub91;
     HEAP32[(399584)>>2] = $add$ptr95;
     $retval$0 = $fd69;
     STACKTOP = sp;return ($retval$0|0);
    }
    $13 = HEAP32[(399568)>>2]|0;
    $cmp128 = ($13|0)==(0);
    if ($cmp128) {
     $nb$0 = $cond;
    } else {
     $sub$i = (0 - ($13))|0;
     $and$i = $13 & $sub$i;
     $sub2$i = (($and$i) + -1)|0;
     $shr$i = $sub2$i >>> 12;
     $and3$i = $shr$i & 16;
     $shr4$i = $sub2$i >>> $and3$i;
     $shr5$i = $shr4$i >>> 5;
     $and6$i = $shr5$i & 8;
     $add$i = $and6$i | $and3$i;
     $shr7$i = $shr4$i >>> $and6$i;
     $shr8$i = $shr7$i >>> 2;
     $and9$i = $shr8$i & 4;
     $add10$i = $add$i | $and9$i;
     $shr11$i = $shr7$i >>> $and9$i;
     $shr12$i = $shr11$i >>> 1;
     $and13$i = $shr12$i & 2;
     $add14$i = $add10$i | $and13$i;
     $shr15$i = $shr11$i >>> $and13$i;
     $shr16$i = $shr15$i >>> 1;
     $and17$i = $shr16$i & 1;
     $add18$i = $add14$i | $and17$i;
     $shr19$i = $shr15$i >>> $and17$i;
     $add20$i = (($add18$i) + ($shr19$i))|0;
     $arrayidx$i = (399868 + ($add20$i<<2)|0);
     $14 = HEAP32[$arrayidx$i>>2]|0;
     $head$i = ((($14)) + 4|0);
     $15 = HEAP32[$head$i>>2]|0;
     $and21$i = $15 & -8;
     $sub22$i = (($and21$i) - ($cond))|0;
     $rsize$0$i = $sub22$i;$t$0$i = $14;$v$0$i = $14;
     while(1) {
      $arrayidx23$i = ((($t$0$i)) + 16|0);
      $16 = HEAP32[$arrayidx23$i>>2]|0;
      $cmp$i = ($16|0)==(0|0);
      if ($cmp$i) {
       $arrayidx27$i = ((($t$0$i)) + 20|0);
       $17 = HEAP32[$arrayidx27$i>>2]|0;
       $cmp28$i = ($17|0)==(0|0);
       if ($cmp28$i) {
        break;
       } else {
        $cond4$i = $17;
       }
      } else {
       $cond4$i = $16;
      }
      $head29$i = ((($cond4$i)) + 4|0);
      $18 = HEAP32[$head29$i>>2]|0;
      $and30$i = $18 & -8;
      $sub31$i = (($and30$i) - ($cond))|0;
      $cmp32$i = ($sub31$i>>>0)<($rsize$0$i>>>0);
      $spec$select$i = $cmp32$i ? $sub31$i : $rsize$0$i;
      $spec$select1$i = $cmp32$i ? $cond4$i : $v$0$i;
      $rsize$0$i = $spec$select$i;$t$0$i = $cond4$i;$v$0$i = $spec$select1$i;
     }
     $add$ptr$i = (($v$0$i) + ($cond)|0);
     $cmp35$i = ($add$ptr$i>>>0)>($v$0$i>>>0);
     if ($cmp35$i) {
      $parent$i = ((($v$0$i)) + 24|0);
      $19 = HEAP32[$parent$i>>2]|0;
      $bk$i = ((($v$0$i)) + 12|0);
      $20 = HEAP32[$bk$i>>2]|0;
      $cmp40$i = ($20|0)==($v$0$i|0);
      do {
       if ($cmp40$i) {
        $arrayidx61$i = ((($v$0$i)) + 20|0);
        $22 = HEAP32[$arrayidx61$i>>2]|0;
        $cmp62$i = ($22|0)==(0|0);
        if ($cmp62$i) {
         $arrayidx65$i = ((($v$0$i)) + 16|0);
         $23 = HEAP32[$arrayidx65$i>>2]|0;
         $cmp66$i = ($23|0)==(0|0);
         if ($cmp66$i) {
          $R$3$i = 0;
          break;
         } else {
          $R$1$i$ph = $23;$RP$1$i$ph = $arrayidx65$i;
         }
        } else {
         $R$1$i$ph = $22;$RP$1$i$ph = $arrayidx61$i;
        }
        $R$1$i = $R$1$i$ph;$RP$1$i = $RP$1$i$ph;
        while(1) {
         $arrayidx71$i = ((($R$1$i)) + 20|0);
         $24 = HEAP32[$arrayidx71$i>>2]|0;
         $cmp72$i = ($24|0)==(0|0);
         if ($cmp72$i) {
          $arrayidx75$i = ((($R$1$i)) + 16|0);
          $25 = HEAP32[$arrayidx75$i>>2]|0;
          $cmp76$i = ($25|0)==(0|0);
          if ($cmp76$i) {
           break;
          } else {
           $R$1$i$be = $25;$RP$1$i$be = $arrayidx75$i;
          }
         } else {
          $R$1$i$be = $24;$RP$1$i$be = $arrayidx71$i;
         }
         $R$1$i = $R$1$i$be;$RP$1$i = $RP$1$i$be;
        }
        HEAP32[$RP$1$i>>2] = 0;
        $R$3$i = $R$1$i;
       } else {
        $fd$i = ((($v$0$i)) + 8|0);
        $21 = HEAP32[$fd$i>>2]|0;
        $bk56$i = ((($21)) + 12|0);
        HEAP32[$bk56$i>>2] = $20;
        $fd57$i = ((($20)) + 8|0);
        HEAP32[$fd57$i>>2] = $21;
        $R$3$i = $20;
       }
      } while(0);
      $cmp90$i = ($19|0)==(0|0);
      do {
       if (!($cmp90$i)) {
        $index$i = ((($v$0$i)) + 28|0);
        $26 = HEAP32[$index$i>>2]|0;
        $arrayidx94$i = (399868 + ($26<<2)|0);
        $27 = HEAP32[$arrayidx94$i>>2]|0;
        $cmp95$i = ($v$0$i|0)==($27|0);
        if ($cmp95$i) {
         HEAP32[$arrayidx94$i>>2] = $R$3$i;
         $cond2$i = ($R$3$i|0)==(0|0);
         if ($cond2$i) {
          $shl$i = 1 << $26;
          $neg$i = $shl$i ^ -1;
          $and103$i = $13 & $neg$i;
          HEAP32[(399568)>>2] = $and103$i;
          break;
         }
        } else {
         $arrayidx113$i = ((($19)) + 16|0);
         $28 = HEAP32[$arrayidx113$i>>2]|0;
         $cmp114$i = ($28|0)==($v$0$i|0);
         $arrayidx121$i = ((($19)) + 20|0);
         $arrayidx121$i$sink = $cmp114$i ? $arrayidx113$i : $arrayidx121$i;
         HEAP32[$arrayidx121$i$sink>>2] = $R$3$i;
         $cmp126$i = ($R$3$i|0)==(0|0);
         if ($cmp126$i) {
          break;
         }
        }
        $parent135$i = ((($R$3$i)) + 24|0);
        HEAP32[$parent135$i>>2] = $19;
        $arrayidx137$i = ((($v$0$i)) + 16|0);
        $29 = HEAP32[$arrayidx137$i>>2]|0;
        $cmp138$i = ($29|0)==(0|0);
        if (!($cmp138$i)) {
         $arrayidx148$i = ((($R$3$i)) + 16|0);
         HEAP32[$arrayidx148$i>>2] = $29;
         $parent149$i = ((($29)) + 24|0);
         HEAP32[$parent149$i>>2] = $R$3$i;
        }
        $arrayidx154$i = ((($v$0$i)) + 20|0);
        $30 = HEAP32[$arrayidx154$i>>2]|0;
        $cmp155$i = ($30|0)==(0|0);
        if (!($cmp155$i)) {
         $arrayidx165$i = ((($R$3$i)) + 20|0);
         HEAP32[$arrayidx165$i>>2] = $30;
         $parent166$i = ((($30)) + 24|0);
         HEAP32[$parent166$i>>2] = $R$3$i;
        }
       }
      } while(0);
      $cmp174$i = ($rsize$0$i>>>0)<(16);
      if ($cmp174$i) {
       $add177$i = (($rsize$0$i) + ($cond))|0;
       $or178$i = $add177$i | 3;
       $head179$i = ((($v$0$i)) + 4|0);
       HEAP32[$head179$i>>2] = $or178$i;
       $add$ptr181$i = (($v$0$i) + ($add177$i)|0);
       $head182$i = ((($add$ptr181$i)) + 4|0);
       $31 = HEAP32[$head182$i>>2]|0;
       $or183$i = $31 | 1;
       HEAP32[$head182$i>>2] = $or183$i;
      } else {
       $or186$i = $cond | 3;
       $head187$i = ((($v$0$i)) + 4|0);
       HEAP32[$head187$i>>2] = $or186$i;
       $or188$i = $rsize$0$i | 1;
       $head189$i = ((($add$ptr$i)) + 4|0);
       HEAP32[$head189$i>>2] = $or188$i;
       $add$ptr190$i = (($add$ptr$i) + ($rsize$0$i)|0);
       HEAP32[$add$ptr190$i>>2] = $rsize$0$i;
       $cmp191$i = ($5|0)==(0);
       if (!($cmp191$i)) {
        $32 = HEAP32[(399584)>>2]|0;
        $shr194$i = $5 >>> 3;
        $shl195$i = $shr194$i << 1;
        $arrayidx196$i = (399604 + ($shl195$i<<2)|0);
        $shl198$i = 1 << $shr194$i;
        $and199$i = $shl198$i & $0;
        $tobool200$i = ($and199$i|0)==(0);
        if ($tobool200$i) {
         $or204$i = $shl198$i | $0;
         HEAP32[99891] = $or204$i;
         $$pre$i = ((($arrayidx196$i)) + 8|0);
         $$pre$phi$iZ2D = $$pre$i;$F197$0$i = $arrayidx196$i;
        } else {
         $33 = ((($arrayidx196$i)) + 8|0);
         $34 = HEAP32[$33>>2]|0;
         $$pre$phi$iZ2D = $33;$F197$0$i = $34;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $32;
        $bk218$i = ((($F197$0$i)) + 12|0);
        HEAP32[$bk218$i>>2] = $32;
        $fd219$i = ((($32)) + 8|0);
        HEAP32[$fd219$i>>2] = $F197$0$i;
        $bk220$i = ((($32)) + 12|0);
        HEAP32[$bk220$i>>2] = $arrayidx196$i;
       }
       HEAP32[(399572)>>2] = $rsize$0$i;
       HEAP32[(399584)>>2] = $add$ptr$i;
      }
      $add$ptr225$i = ((($v$0$i)) + 8|0);
      $retval$0 = $add$ptr225$i;
      STACKTOP = sp;return ($retval$0|0);
     } else {
      $nb$0 = $cond;
     }
    }
   } else {
    $nb$0 = $cond;
   }
  } else {
   $cmp139 = ($bytes>>>0)>(4294967231);
   if ($cmp139) {
    $nb$0 = -1;
   } else {
    $add144 = (($bytes) + 11)|0;
    $and145 = $add144 & -8;
    $35 = HEAP32[(399568)>>2]|0;
    $cmp146 = ($35|0)==(0);
    if ($cmp146) {
     $nb$0 = $and145;
    } else {
     $sub$i147 = (0 - ($and145))|0;
     $shr$i148 = $add144 >>> 8;
     $cmp$i149 = ($shr$i148|0)==(0);
     if ($cmp$i149) {
      $idx$0$i = 0;
     } else {
      $cmp1$i = ($and145>>>0)>(16777215);
      if ($cmp1$i) {
       $idx$0$i = 31;
      } else {
       $sub4$i = (($shr$i148) + 1048320)|0;
       $shr5$i151 = $sub4$i >>> 16;
       $and$i152 = $shr5$i151 & 8;
       $shl$i153 = $shr$i148 << $and$i152;
       $sub6$i = (($shl$i153) + 520192)|0;
       $shr7$i154 = $sub6$i >>> 16;
       $and8$i = $shr7$i154 & 4;
       $add$i155 = $and8$i | $and$i152;
       $shl9$i = $shl$i153 << $and8$i;
       $sub10$i = (($shl9$i) + 245760)|0;
       $shr11$i156 = $sub10$i >>> 16;
       $and12$i = $shr11$i156 & 2;
       $add13$i = $add$i155 | $and12$i;
       $sub14$i = (14 - ($add13$i))|0;
       $shl15$i = $shl9$i << $and12$i;
       $shr16$i157 = $shl15$i >>> 15;
       $add17$i158 = (($sub14$i) + ($shr16$i157))|0;
       $shl18$i = $add17$i158 << 1;
       $add19$i = (($add17$i158) + 7)|0;
       $shr20$i = $and145 >>> $add19$i;
       $and21$i159 = $shr20$i & 1;
       $add22$i = $and21$i159 | $shl18$i;
       $idx$0$i = $add22$i;
      }
     }
     $arrayidx$i160 = (399868 + ($idx$0$i<<2)|0);
     $36 = HEAP32[$arrayidx$i160>>2]|0;
     $cmp24$i = ($36|0)==(0|0);
     L79: do {
      if ($cmp24$i) {
       $rsize$3$i = $sub$i147;$t$2$i = 0;$v$3$i = 0;
       label = 61;
      } else {
       $cmp26$i = ($idx$0$i|0)==(31);
       $shr27$i = $idx$0$i >>> 1;
       $sub30$i = (25 - ($shr27$i))|0;
       $cond$i = $cmp26$i ? 0 : $sub30$i;
       $shl31$i = $and145 << $cond$i;
       $rsize$0$i162 = $sub$i147;$rst$0$i = 0;$sizebits$0$i = $shl31$i;$t$0$i161 = $36;$v$0$i163 = 0;
       while(1) {
        $head$i164 = ((($t$0$i161)) + 4|0);
        $37 = HEAP32[$head$i164>>2]|0;
        $and32$i = $37 & -8;
        $sub33$i = (($and32$i) - ($and145))|0;
        $cmp34$i = ($sub33$i>>>0)<($rsize$0$i162>>>0);
        if ($cmp34$i) {
         $cmp36$i = ($sub33$i|0)==(0);
         if ($cmp36$i) {
          $rsize$418$i$ph = 0;$t$517$i$ph = $t$0$i161;$v$419$i$ph = $t$0$i161;
          label = 65;
          break L79;
         } else {
          $rsize$1$i = $sub33$i;$v$1$i = $t$0$i161;
         }
        } else {
         $rsize$1$i = $rsize$0$i162;$v$1$i = $v$0$i163;
        }
        $arrayidx40$i = ((($t$0$i161)) + 20|0);
        $38 = HEAP32[$arrayidx40$i>>2]|0;
        $shr42$i = $sizebits$0$i >>> 31;
        $arrayidx44$i = (((($t$0$i161)) + 16|0) + ($shr42$i<<2)|0);
        $39 = HEAP32[$arrayidx44$i>>2]|0;
        $cmp45$i = ($38|0)==(0|0);
        $cmp46$i = ($38|0)==($39|0);
        $or$cond1$i165 = $cmp45$i | $cmp46$i;
        $rst$1$i = $or$cond1$i165 ? $rst$0$i : $38;
        $cmp49$i = ($39|0)==(0|0);
        $spec$select5$i = $sizebits$0$i << 1;
        if ($cmp49$i) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 61;
         break;
        } else {
         $rsize$0$i162 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $spec$select5$i;$t$0$i161 = $39;$v$0$i163 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $cmp55$i166 = ($t$2$i|0)==(0|0);
      $cmp57$i167 = ($v$3$i|0)==(0|0);
      $or$cond$i168 = $cmp55$i166 & $cmp57$i167;
      if ($or$cond$i168) {
       $shl60$i = 2 << $idx$0$i;
       $sub63$i = (0 - ($shl60$i))|0;
       $or$i169 = $shl60$i | $sub63$i;
       $and64$i = $or$i169 & $35;
       $cmp65$i = ($and64$i|0)==(0);
       if ($cmp65$i) {
        $nb$0 = $and145;
        break;
       }
       $sub67$i = (0 - ($and64$i))|0;
       $and68$i = $and64$i & $sub67$i;
       $sub70$i = (($and68$i) + -1)|0;
       $shr72$i = $sub70$i >>> 12;
       $and73$i = $shr72$i & 16;
       $shr75$i = $sub70$i >>> $and73$i;
       $shr76$i = $shr75$i >>> 5;
       $and77$i = $shr76$i & 8;
       $add78$i = $and77$i | $and73$i;
       $shr79$i = $shr75$i >>> $and77$i;
       $shr80$i = $shr79$i >>> 2;
       $and81$i = $shr80$i & 4;
       $add82$i = $add78$i | $and81$i;
       $shr83$i = $shr79$i >>> $and81$i;
       $shr84$i = $shr83$i >>> 1;
       $and85$i = $shr84$i & 2;
       $add86$i = $add82$i | $and85$i;
       $shr87$i = $shr83$i >>> $and85$i;
       $shr88$i = $shr87$i >>> 1;
       $and89$i = $shr88$i & 1;
       $add90$i = $add86$i | $and89$i;
       $shr91$i = $shr87$i >>> $and89$i;
       $add92$i = (($add90$i) + ($shr91$i))|0;
       $arrayidx94$i170 = (399868 + ($add92$i<<2)|0);
       $40 = HEAP32[$arrayidx94$i170>>2]|0;
       $t$4$i = $40;$v$3$i204 = 0;
      } else {
       $t$4$i = $t$2$i;$v$3$i204 = $v$3$i;
      }
      $cmp9716$i = ($t$4$i|0)==(0|0);
      if ($cmp9716$i) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i204;
      } else {
       $rsize$418$i$ph = $rsize$3$i;$t$517$i$ph = $t$4$i;$v$419$i$ph = $v$3$i204;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $rsize$418$i = $rsize$418$i$ph;$t$517$i = $t$517$i$ph;$v$419$i = $v$419$i$ph;
      while(1) {
       $head99$i = ((($t$517$i)) + 4|0);
       $41 = HEAP32[$head99$i>>2]|0;
       $and100$i = $41 & -8;
       $sub101$i = (($and100$i) - ($and145))|0;
       $cmp102$i = ($sub101$i>>>0)<($rsize$418$i>>>0);
       $spec$select$i171 = $cmp102$i ? $sub101$i : $rsize$418$i;
       $spec$select2$i = $cmp102$i ? $t$517$i : $v$419$i;
       $arrayidx106$i = ((($t$517$i)) + 16|0);
       $42 = HEAP32[$arrayidx106$i>>2]|0;
       $cmp107$i = ($42|0)==(0|0);
       if ($cmp107$i) {
        $arrayidx113$i173 = ((($t$517$i)) + 20|0);
        $43 = HEAP32[$arrayidx113$i173>>2]|0;
        $cond115$i = $43;
       } else {
        $cond115$i = $42;
       }
       $cmp97$i = ($cond115$i|0)==(0|0);
       if ($cmp97$i) {
        $rsize$4$lcssa$i = $spec$select$i171;$v$4$lcssa$i = $spec$select2$i;
        break;
       } else {
        $rsize$418$i = $spec$select$i171;$t$517$i = $cond115$i;$v$419$i = $spec$select2$i;
       }
      }
     }
     $cmp116$i = ($v$4$lcssa$i|0)==(0|0);
     if ($cmp116$i) {
      $nb$0 = $and145;
     } else {
      $44 = HEAP32[(399572)>>2]|0;
      $sub118$i = (($44) - ($and145))|0;
      $cmp119$i = ($rsize$4$lcssa$i>>>0)<($sub118$i>>>0);
      if ($cmp119$i) {
       $add$ptr$i174 = (($v$4$lcssa$i) + ($and145)|0);
       $cmp123$i = ($add$ptr$i174>>>0)>($v$4$lcssa$i>>>0);
       if ($cmp123$i) {
        $parent$i175 = ((($v$4$lcssa$i)) + 24|0);
        $45 = HEAP32[$parent$i175>>2]|0;
        $bk$i176 = ((($v$4$lcssa$i)) + 12|0);
        $46 = HEAP32[$bk$i176>>2]|0;
        $cmp128$i = ($46|0)==($v$4$lcssa$i|0);
        do {
         if ($cmp128$i) {
          $arrayidx151$i = ((($v$4$lcssa$i)) + 20|0);
          $48 = HEAP32[$arrayidx151$i>>2]|0;
          $cmp152$i = ($48|0)==(0|0);
          if ($cmp152$i) {
           $arrayidx155$i = ((($v$4$lcssa$i)) + 16|0);
           $49 = HEAP32[$arrayidx155$i>>2]|0;
           $cmp156$i = ($49|0)==(0|0);
           if ($cmp156$i) {
            $R$3$i188 = 0;
            break;
           } else {
            $R$1$i183$ph = $49;$RP$1$i182$ph = $arrayidx155$i;
           }
          } else {
           $R$1$i183$ph = $48;$RP$1$i182$ph = $arrayidx151$i;
          }
          $R$1$i183 = $R$1$i183$ph;$RP$1$i182 = $RP$1$i182$ph;
          while(1) {
           $arrayidx161$i = ((($R$1$i183)) + 20|0);
           $50 = HEAP32[$arrayidx161$i>>2]|0;
           $cmp162$i184 = ($50|0)==(0|0);
           if ($cmp162$i184) {
            $arrayidx165$i185 = ((($R$1$i183)) + 16|0);
            $51 = HEAP32[$arrayidx165$i185>>2]|0;
            $cmp166$i = ($51|0)==(0|0);
            if ($cmp166$i) {
             break;
            } else {
             $R$1$i183$be = $51;$RP$1$i182$be = $arrayidx165$i185;
            }
           } else {
            $R$1$i183$be = $50;$RP$1$i182$be = $arrayidx161$i;
           }
           $R$1$i183 = $R$1$i183$be;$RP$1$i182 = $RP$1$i182$be;
          }
          HEAP32[$RP$1$i182>>2] = 0;
          $R$3$i188 = $R$1$i183;
         } else {
          $fd$i177 = ((($v$4$lcssa$i)) + 8|0);
          $47 = HEAP32[$fd$i177>>2]|0;
          $bk145$i = ((($47)) + 12|0);
          HEAP32[$bk145$i>>2] = $46;
          $fd146$i = ((($46)) + 8|0);
          HEAP32[$fd146$i>>2] = $47;
          $R$3$i188 = $46;
         }
        } while(0);
        $cmp180$i = ($45|0)==(0|0);
        do {
         if ($cmp180$i) {
          $61 = $35;
         } else {
          $index$i189 = ((($v$4$lcssa$i)) + 28|0);
          $52 = HEAP32[$index$i189>>2]|0;
          $arrayidx184$i = (399868 + ($52<<2)|0);
          $53 = HEAP32[$arrayidx184$i>>2]|0;
          $cmp185$i = ($v$4$lcssa$i|0)==($53|0);
          if ($cmp185$i) {
           HEAP32[$arrayidx184$i>>2] = $R$3$i188;
           $cond3$i = ($R$3$i188|0)==(0|0);
           if ($cond3$i) {
            $shl192$i = 1 << $52;
            $neg$i190 = $shl192$i ^ -1;
            $and194$i191 = $35 & $neg$i190;
            HEAP32[(399568)>>2] = $and194$i191;
            $61 = $and194$i191;
            break;
           }
          } else {
           $arrayidx204$i = ((($45)) + 16|0);
           $54 = HEAP32[$arrayidx204$i>>2]|0;
           $cmp205$i = ($54|0)==($v$4$lcssa$i|0);
           $arrayidx212$i = ((($45)) + 20|0);
           $arrayidx212$i$sink = $cmp205$i ? $arrayidx204$i : $arrayidx212$i;
           HEAP32[$arrayidx212$i$sink>>2] = $R$3$i188;
           $cmp217$i = ($R$3$i188|0)==(0|0);
           if ($cmp217$i) {
            $61 = $35;
            break;
           }
          }
          $parent226$i = ((($R$3$i188)) + 24|0);
          HEAP32[$parent226$i>>2] = $45;
          $arrayidx228$i = ((($v$4$lcssa$i)) + 16|0);
          $55 = HEAP32[$arrayidx228$i>>2]|0;
          $cmp229$i = ($55|0)==(0|0);
          if (!($cmp229$i)) {
           $arrayidx239$i = ((($R$3$i188)) + 16|0);
           HEAP32[$arrayidx239$i>>2] = $55;
           $parent240$i = ((($55)) + 24|0);
           HEAP32[$parent240$i>>2] = $R$3$i188;
          }
          $arrayidx245$i = ((($v$4$lcssa$i)) + 20|0);
          $56 = HEAP32[$arrayidx245$i>>2]|0;
          $cmp246$i = ($56|0)==(0|0);
          if ($cmp246$i) {
           $61 = $35;
          } else {
           $arrayidx256$i = ((($R$3$i188)) + 20|0);
           HEAP32[$arrayidx256$i>>2] = $56;
           $parent257$i = ((($56)) + 24|0);
           HEAP32[$parent257$i>>2] = $R$3$i188;
           $61 = $35;
          }
         }
        } while(0);
        $cmp265$i = ($rsize$4$lcssa$i>>>0)<(16);
        L128: do {
         if ($cmp265$i) {
          $add268$i = (($rsize$4$lcssa$i) + ($and145))|0;
          $or270$i = $add268$i | 3;
          $head271$i = ((($v$4$lcssa$i)) + 4|0);
          HEAP32[$head271$i>>2] = $or270$i;
          $add$ptr273$i = (($v$4$lcssa$i) + ($add268$i)|0);
          $head274$i = ((($add$ptr273$i)) + 4|0);
          $57 = HEAP32[$head274$i>>2]|0;
          $or275$i = $57 | 1;
          HEAP32[$head274$i>>2] = $or275$i;
         } else {
          $or278$i = $and145 | 3;
          $head279$i = ((($v$4$lcssa$i)) + 4|0);
          HEAP32[$head279$i>>2] = $or278$i;
          $or280$i = $rsize$4$lcssa$i | 1;
          $head281$i = ((($add$ptr$i174)) + 4|0);
          HEAP32[$head281$i>>2] = $or280$i;
          $add$ptr282$i = (($add$ptr$i174) + ($rsize$4$lcssa$i)|0);
          HEAP32[$add$ptr282$i>>2] = $rsize$4$lcssa$i;
          $shr283$i = $rsize$4$lcssa$i >>> 3;
          $cmp284$i = ($rsize$4$lcssa$i>>>0)<(256);
          if ($cmp284$i) {
           $shl288$i = $shr283$i << 1;
           $arrayidx289$i = (399604 + ($shl288$i<<2)|0);
           $58 = HEAP32[99891]|0;
           $shl291$i = 1 << $shr283$i;
           $and292$i = $58 & $shl291$i;
           $tobool293$i = ($and292$i|0)==(0);
           if ($tobool293$i) {
            $or297$i = $58 | $shl291$i;
            HEAP32[99891] = $or297$i;
            $$pre$i194 = ((($arrayidx289$i)) + 8|0);
            $$pre$phi$i195Z2D = $$pre$i194;$F290$0$i = $arrayidx289$i;
           } else {
            $59 = ((($arrayidx289$i)) + 8|0);
            $60 = HEAP32[$59>>2]|0;
            $$pre$phi$i195Z2D = $59;$F290$0$i = $60;
           }
           HEAP32[$$pre$phi$i195Z2D>>2] = $add$ptr$i174;
           $bk311$i = ((($F290$0$i)) + 12|0);
           HEAP32[$bk311$i>>2] = $add$ptr$i174;
           $fd312$i = ((($add$ptr$i174)) + 8|0);
           HEAP32[$fd312$i>>2] = $F290$0$i;
           $bk313$i = ((($add$ptr$i174)) + 12|0);
           HEAP32[$bk313$i>>2] = $arrayidx289$i;
           break;
          }
          $shr318$i = $rsize$4$lcssa$i >>> 8;
          $cmp319$i = ($shr318$i|0)==(0);
          if ($cmp319$i) {
           $I316$0$i = 0;
          } else {
           $cmp323$i = ($rsize$4$lcssa$i>>>0)>(16777215);
           if ($cmp323$i) {
            $I316$0$i = 31;
           } else {
            $sub329$i = (($shr318$i) + 1048320)|0;
            $shr330$i = $sub329$i >>> 16;
            $and331$i = $shr330$i & 8;
            $shl333$i = $shr318$i << $and331$i;
            $sub334$i = (($shl333$i) + 520192)|0;
            $shr335$i = $sub334$i >>> 16;
            $and336$i = $shr335$i & 4;
            $add337$i = $and336$i | $and331$i;
            $shl338$i = $shl333$i << $and336$i;
            $sub339$i = (($shl338$i) + 245760)|0;
            $shr340$i = $sub339$i >>> 16;
            $and341$i = $shr340$i & 2;
            $add342$i = $add337$i | $and341$i;
            $sub343$i = (14 - ($add342$i))|0;
            $shl344$i = $shl338$i << $and341$i;
            $shr345$i = $shl344$i >>> 15;
            $add346$i = (($sub343$i) + ($shr345$i))|0;
            $shl347$i = $add346$i << 1;
            $add348$i = (($add346$i) + 7)|0;
            $shr349$i = $rsize$4$lcssa$i >>> $add348$i;
            $and350$i = $shr349$i & 1;
            $add351$i = $and350$i | $shl347$i;
            $I316$0$i = $add351$i;
           }
          }
          $arrayidx355$i = (399868 + ($I316$0$i<<2)|0);
          $index356$i = ((($add$ptr$i174)) + 28|0);
          HEAP32[$index356$i>>2] = $I316$0$i;
          $child357$i = ((($add$ptr$i174)) + 16|0);
          $arrayidx358$i = ((($child357$i)) + 4|0);
          HEAP32[$arrayidx358$i>>2] = 0;
          HEAP32[$child357$i>>2] = 0;
          $shl362$i = 1 << $I316$0$i;
          $and363$i = $61 & $shl362$i;
          $tobool364$i = ($and363$i|0)==(0);
          if ($tobool364$i) {
           $or368$i = $61 | $shl362$i;
           HEAP32[(399568)>>2] = $or368$i;
           HEAP32[$arrayidx355$i>>2] = $add$ptr$i174;
           $parent369$i = ((($add$ptr$i174)) + 24|0);
           HEAP32[$parent369$i>>2] = $arrayidx355$i;
           $bk370$i = ((($add$ptr$i174)) + 12|0);
           HEAP32[$bk370$i>>2] = $add$ptr$i174;
           $fd371$i = ((($add$ptr$i174)) + 8|0);
           HEAP32[$fd371$i>>2] = $add$ptr$i174;
           break;
          }
          $62 = HEAP32[$arrayidx355$i>>2]|0;
          $head38611$i = ((($62)) + 4|0);
          $63 = HEAP32[$head38611$i>>2]|0;
          $and38712$i = $63 & -8;
          $cmp38813$i = ($and38712$i|0)==($rsize$4$lcssa$i|0);
          L145: do {
           if ($cmp38813$i) {
            $T$0$lcssa$i = $62;
           } else {
            $cmp374$i = ($I316$0$i|0)==(31);
            $shr378$i = $I316$0$i >>> 1;
            $sub381$i = (25 - ($shr378$i))|0;
            $cond383$i = $cmp374$i ? 0 : $sub381$i;
            $shl384$i = $rsize$4$lcssa$i << $cond383$i;
            $K373$015$i = $shl384$i;$T$014$i = $62;
            while(1) {
             $shr392$i = $K373$015$i >>> 31;
             $arrayidx394$i = (((($T$014$i)) + 16|0) + ($shr392$i<<2)|0);
             $64 = HEAP32[$arrayidx394$i>>2]|0;
             $cmp396$i = ($64|0)==(0|0);
             if ($cmp396$i) {
              break;
             }
             $shl395$i = $K373$015$i << 1;
             $head386$i = ((($64)) + 4|0);
             $65 = HEAP32[$head386$i>>2]|0;
             $and387$i = $65 & -8;
             $cmp388$i = ($and387$i|0)==($rsize$4$lcssa$i|0);
             if ($cmp388$i) {
              $T$0$lcssa$i = $64;
              break L145;
             } else {
              $K373$015$i = $shl395$i;$T$014$i = $64;
             }
            }
            HEAP32[$arrayidx394$i>>2] = $add$ptr$i174;
            $parent406$i = ((($add$ptr$i174)) + 24|0);
            HEAP32[$parent406$i>>2] = $T$014$i;
            $bk407$i = ((($add$ptr$i174)) + 12|0);
            HEAP32[$bk407$i>>2] = $add$ptr$i174;
            $fd408$i = ((($add$ptr$i174)) + 8|0);
            HEAP32[$fd408$i>>2] = $add$ptr$i174;
            break L128;
           }
          } while(0);
          $fd416$i = ((($T$0$lcssa$i)) + 8|0);
          $66 = HEAP32[$fd416$i>>2]|0;
          $bk429$i = ((($66)) + 12|0);
          HEAP32[$bk429$i>>2] = $add$ptr$i174;
          HEAP32[$fd416$i>>2] = $add$ptr$i174;
          $fd431$i = ((($add$ptr$i174)) + 8|0);
          HEAP32[$fd431$i>>2] = $66;
          $bk432$i = ((($add$ptr$i174)) + 12|0);
          HEAP32[$bk432$i>>2] = $T$0$lcssa$i;
          $parent433$i = ((($add$ptr$i174)) + 24|0);
          HEAP32[$parent433$i>>2] = 0;
         }
        } while(0);
        $add$ptr441$i = ((($v$4$lcssa$i)) + 8|0);
        $retval$0 = $add$ptr441$i;
        STACKTOP = sp;return ($retval$0|0);
       } else {
        $nb$0 = $and145;
       }
      } else {
       $nb$0 = $and145;
      }
     }
    }
   }
  }
 } while(0);
 $67 = HEAP32[(399572)>>2]|0;
 $cmp156 = ($67>>>0)<($nb$0>>>0);
 if (!($cmp156)) {
  $sub160 = (($67) - ($nb$0))|0;
  $68 = HEAP32[(399584)>>2]|0;
  $cmp162 = ($sub160>>>0)>(15);
  if ($cmp162) {
   $add$ptr166 = (($68) + ($nb$0)|0);
   HEAP32[(399584)>>2] = $add$ptr166;
   HEAP32[(399572)>>2] = $sub160;
   $or167 = $sub160 | 1;
   $head168 = ((($add$ptr166)) + 4|0);
   HEAP32[$head168>>2] = $or167;
   $add$ptr169 = (($68) + ($67)|0);
   HEAP32[$add$ptr169>>2] = $sub160;
   $or172 = $nb$0 | 3;
   $head173 = ((($68)) + 4|0);
   HEAP32[$head173>>2] = $or172;
  } else {
   HEAP32[(399572)>>2] = 0;
   HEAP32[(399584)>>2] = 0;
   $or176 = $67 | 3;
   $head177 = ((($68)) + 4|0);
   HEAP32[$head177>>2] = $or176;
   $add$ptr178 = (($68) + ($67)|0);
   $head179 = ((($add$ptr178)) + 4|0);
   $69 = HEAP32[$head179>>2]|0;
   $or180 = $69 | 1;
   HEAP32[$head179>>2] = $or180;
  }
  $add$ptr182 = ((($68)) + 8|0);
  $retval$0 = $add$ptr182;
  STACKTOP = sp;return ($retval$0|0);
 }
 $70 = HEAP32[(399576)>>2]|0;
 $cmp186 = ($70>>>0)>($nb$0>>>0);
 if ($cmp186) {
  $sub190 = (($70) - ($nb$0))|0;
  HEAP32[(399576)>>2] = $sub190;
  $71 = HEAP32[(399588)>>2]|0;
  $add$ptr193 = (($71) + ($nb$0)|0);
  HEAP32[(399588)>>2] = $add$ptr193;
  $or194 = $sub190 | 1;
  $head195 = ((($add$ptr193)) + 4|0);
  HEAP32[$head195>>2] = $or194;
  $or197 = $nb$0 | 3;
  $head198 = ((($71)) + 4|0);
  HEAP32[$head198>>2] = $or197;
  $add$ptr199 = ((($71)) + 8|0);
  $retval$0 = $add$ptr199;
  STACKTOP = sp;return ($retval$0|0);
 }
 $72 = HEAP32[100009]|0;
 $cmp$i133 = ($72|0)==(0);
 if ($cmp$i133) {
  HEAP32[(400044)>>2] = 4096;
  HEAP32[(400040)>>2] = 4096;
  HEAP32[(400048)>>2] = -1;
  HEAP32[(400052)>>2] = -1;
  HEAP32[(400056)>>2] = 0;
  HEAP32[(400008)>>2] = 0;
  $73 = $magic$i$i;
  $xor$i$i = $73 & -16;
  $and6$i$i = $xor$i$i ^ 1431655768;
  HEAP32[100009] = $and6$i$i;
  $74 = 4096;
 } else {
  $$pre$i134 = HEAP32[(400044)>>2]|0;
  $74 = $$pre$i134;
 }
 $add$i135 = (($nb$0) + 48)|0;
 $sub$i136 = (($nb$0) + 47)|0;
 $add9$i = (($74) + ($sub$i136))|0;
 $neg$i137 = (0 - ($74))|0;
 $and11$i = $add9$i & $neg$i137;
 $cmp12$i = ($and11$i>>>0)>($nb$0>>>0);
 if (!($cmp12$i)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $75 = HEAP32[(400004)>>2]|0;
 $cmp15$i = ($75|0)==(0);
 if (!($cmp15$i)) {
  $76 = HEAP32[(399996)>>2]|0;
  $add17$i = (($76) + ($and11$i))|0;
  $cmp19$i = ($add17$i>>>0)<=($76>>>0);
  $cmp21$i = ($add17$i>>>0)>($75>>>0);
  $or$cond1$i = $cmp19$i | $cmp21$i;
  if ($or$cond1$i) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $77 = HEAP32[(400008)>>2]|0;
 $and29$i = $77 & 4;
 $tobool30$i = ($and29$i|0)==(0);
 L178: do {
  if ($tobool30$i) {
   $78 = HEAP32[(399588)>>2]|0;
   $cmp32$i138 = ($78|0)==(0|0);
   L180: do {
    if ($cmp32$i138) {
     label = 128;
    } else {
     $sp$0$i$i = (400012);
     while(1) {
      $79 = HEAP32[$sp$0$i$i>>2]|0;
      $cmp$i55$i = ($79>>>0)>($78>>>0);
      if (!($cmp$i55$i)) {
       $size$i$i = ((($sp$0$i$i)) + 4|0);
       $80 = HEAP32[$size$i$i>>2]|0;
       $add$ptr$i57$i = (($79) + ($80)|0);
       $cmp2$i$i = ($add$ptr$i57$i>>>0)>($78>>>0);
       if ($cmp2$i$i) {
        break;
       }
      }
      $next$i$i = ((($sp$0$i$i)) + 8|0);
      $81 = HEAP32[$next$i$i>>2]|0;
      $cmp3$i$i = ($81|0)==(0|0);
      if ($cmp3$i$i) {
       label = 128;
       break L180;
      } else {
       $sp$0$i$i = $81;
      }
     }
     $add77$i = (($add9$i) - ($70))|0;
     $and80$i = $add77$i & $neg$i137;
     $cmp81$i = ($and80$i>>>0)<(2147483647);
     if ($cmp81$i) {
      $size$i$i$le = ((($sp$0$i$i)) + 4|0);
      $call83$i = (_sbrk($and80$i)|0);
      $86 = HEAP32[$sp$0$i$i>>2]|0;
      $87 = HEAP32[$size$i$i$le>>2]|0;
      $add$ptr$i141 = (($86) + ($87)|0);
      $cmp85$i = ($call83$i|0)==($add$ptr$i141|0);
      if ($cmp85$i) {
       $cmp89$i = ($call83$i|0)==((-1)|0);
       if ($cmp89$i) {
        $tsize$2647482$i = $and80$i;
       } else {
        $tbase$795$i = $call83$i;$tsize$794$i = $and80$i;
        label = 145;
        break L178;
       }
      } else {
       $br$2$ph$i = $call83$i;$ssize$2$ph$i = $and80$i;
       label = 136;
      }
     } else {
      $tsize$2647482$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $call37$i = (_sbrk(0)|0);
     $cmp38$i = ($call37$i|0)==((-1)|0);
     if ($cmp38$i) {
      $tsize$2647482$i = 0;
     } else {
      $82 = $call37$i;
      $83 = HEAP32[(400040)>>2]|0;
      $sub41$i = (($83) + -1)|0;
      $and42$i = $sub41$i & $82;
      $cmp43$i = ($and42$i|0)==(0);
      $add46$i = (($sub41$i) + ($82))|0;
      $neg48$i = (0 - ($83))|0;
      $and49$i = $add46$i & $neg48$i;
      $sub50$i = (($and49$i) - ($82))|0;
      $add51$i = $cmp43$i ? 0 : $sub50$i;
      $spec$select96$i = (($add51$i) + ($and11$i))|0;
      $84 = HEAP32[(399996)>>2]|0;
      $add54$i = (($spec$select96$i) + ($84))|0;
      $cmp55$i = ($spec$select96$i>>>0)>($nb$0>>>0);
      $cmp57$i = ($spec$select96$i>>>0)<(2147483647);
      $or$cond$i = $cmp55$i & $cmp57$i;
      if ($or$cond$i) {
       $85 = HEAP32[(400004)>>2]|0;
       $cmp60$i = ($85|0)==(0);
       if (!($cmp60$i)) {
        $cmp63$i = ($add54$i>>>0)<=($84>>>0);
        $cmp66$i140 = ($add54$i>>>0)>($85>>>0);
        $or$cond2$i = $cmp63$i | $cmp66$i140;
        if ($or$cond2$i) {
         $tsize$2647482$i = 0;
         break;
        }
       }
       $call68$i = (_sbrk($spec$select96$i)|0);
       $cmp69$i = ($call68$i|0)==($call37$i|0);
       if ($cmp69$i) {
        $tbase$795$i = $call37$i;$tsize$794$i = $spec$select96$i;
        label = 145;
        break L178;
       } else {
        $br$2$ph$i = $call68$i;$ssize$2$ph$i = $spec$select96$i;
        label = 136;
       }
      } else {
       $tsize$2647482$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $sub112$i = (0 - ($ssize$2$ph$i))|0;
     $cmp91$i = ($br$2$ph$i|0)!=((-1)|0);
     $cmp93$i = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond5$i = $cmp93$i & $cmp91$i;
     $cmp96$i = ($add$i135>>>0)>($ssize$2$ph$i>>>0);
     $or$cond7$i = $cmp96$i & $or$cond5$i;
     if (!($or$cond7$i)) {
      $cmp118$i = ($br$2$ph$i|0)==((-1)|0);
      if ($cmp118$i) {
       $tsize$2647482$i = 0;
       break;
      } else {
       $tbase$795$i = $br$2$ph$i;$tsize$794$i = $ssize$2$ph$i;
       label = 145;
       break L178;
      }
     }
     $88 = HEAP32[(400044)>>2]|0;
     $sub99$i = (($sub$i136) - ($ssize$2$ph$i))|0;
     $add101$i = (($sub99$i) + ($88))|0;
     $neg103$i = (0 - ($88))|0;
     $and104$i = $add101$i & $neg103$i;
     $cmp105$i = ($and104$i>>>0)<(2147483647);
     if (!($cmp105$i)) {
      $tbase$795$i = $br$2$ph$i;$tsize$794$i = $ssize$2$ph$i;
      label = 145;
      break L178;
     }
     $call107$i = (_sbrk($and104$i)|0);
     $cmp108$i = ($call107$i|0)==((-1)|0);
     if ($cmp108$i) {
      (_sbrk($sub112$i)|0);
      $tsize$2647482$i = 0;
      break;
     } else {
      $add110$i = (($and104$i) + ($ssize$2$ph$i))|0;
      $tbase$795$i = $br$2$ph$i;$tsize$794$i = $add110$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $89 = HEAP32[(400008)>>2]|0;
   $or$i = $89 | 4;
   HEAP32[(400008)>>2] = $or$i;
   $tsize$4$i = $tsize$2647482$i;
   label = 143;
  } else {
   $tsize$4$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $cmp127$i = ($and11$i>>>0)<(2147483647);
  if ($cmp127$i) {
   $call131$i = (_sbrk($and11$i)|0);
   $call132$i = (_sbrk(0)|0);
   $cmp133$i = ($call131$i|0)!=((-1)|0);
   $cmp135$i = ($call132$i|0)!=((-1)|0);
   $or$cond4$i = $cmp133$i & $cmp135$i;
   $cmp137$i = ($call131$i>>>0)<($call132$i>>>0);
   $or$cond8$i = $cmp137$i & $or$cond4$i;
   $sub$ptr$lhs$cast$i = $call132$i;
   $sub$ptr$rhs$cast$i = $call131$i;
   $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
   $add140$i = (($nb$0) + 40)|0;
   $cmp141$i = ($sub$ptr$sub$i>>>0)>($add140$i>>>0);
   $spec$select9$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $cmp14799$i = ($call131$i|0)==((-1)|0);
   $not$cmp141$i = $cmp141$i ^ 1;
   $cmp147$i = $cmp14799$i | $not$cmp141$i;
   $or$cond97$i = $cmp147$i | $or$cond8$not$i;
   if (!($or$cond97$i)) {
    $tbase$795$i = $call131$i;$tsize$794$i = $spec$select9$i;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $90 = HEAP32[(399996)>>2]|0;
  $add150$i = (($90) + ($tsize$794$i))|0;
  HEAP32[(399996)>>2] = $add150$i;
  $91 = HEAP32[(400000)>>2]|0;
  $cmp151$i = ($add150$i>>>0)>($91>>>0);
  if ($cmp151$i) {
   HEAP32[(400000)>>2] = $add150$i;
  }
  $92 = HEAP32[(399588)>>2]|0;
  $cmp157$i = ($92|0)==(0|0);
  L215: do {
   if ($cmp157$i) {
    $93 = HEAP32[(399580)>>2]|0;
    $cmp159$i = ($93|0)==(0|0);
    $cmp162$i = ($tbase$795$i>>>0)<($93>>>0);
    $or$cond11$i = $cmp159$i | $cmp162$i;
    if ($or$cond11$i) {
     HEAP32[(399580)>>2] = $tbase$795$i;
    }
    HEAP32[(400012)>>2] = $tbase$795$i;
    HEAP32[(400016)>>2] = $tsize$794$i;
    HEAP32[(400024)>>2] = 0;
    $94 = HEAP32[100009]|0;
    HEAP32[(399600)>>2] = $94;
    HEAP32[(399596)>>2] = -1;
    HEAP32[(399616)>>2] = (399604);
    HEAP32[(399612)>>2] = (399604);
    HEAP32[(399624)>>2] = (399612);
    HEAP32[(399620)>>2] = (399612);
    HEAP32[(399632)>>2] = (399620);
    HEAP32[(399628)>>2] = (399620);
    HEAP32[(399640)>>2] = (399628);
    HEAP32[(399636)>>2] = (399628);
    HEAP32[(399648)>>2] = (399636);
    HEAP32[(399644)>>2] = (399636);
    HEAP32[(399656)>>2] = (399644);
    HEAP32[(399652)>>2] = (399644);
    HEAP32[(399664)>>2] = (399652);
    HEAP32[(399660)>>2] = (399652);
    HEAP32[(399672)>>2] = (399660);
    HEAP32[(399668)>>2] = (399660);
    HEAP32[(399680)>>2] = (399668);
    HEAP32[(399676)>>2] = (399668);
    HEAP32[(399688)>>2] = (399676);
    HEAP32[(399684)>>2] = (399676);
    HEAP32[(399696)>>2] = (399684);
    HEAP32[(399692)>>2] = (399684);
    HEAP32[(399704)>>2] = (399692);
    HEAP32[(399700)>>2] = (399692);
    HEAP32[(399712)>>2] = (399700);
    HEAP32[(399708)>>2] = (399700);
    HEAP32[(399720)>>2] = (399708);
    HEAP32[(399716)>>2] = (399708);
    HEAP32[(399728)>>2] = (399716);
    HEAP32[(399724)>>2] = (399716);
    HEAP32[(399736)>>2] = (399724);
    HEAP32[(399732)>>2] = (399724);
    HEAP32[(399744)>>2] = (399732);
    HEAP32[(399740)>>2] = (399732);
    HEAP32[(399752)>>2] = (399740);
    HEAP32[(399748)>>2] = (399740);
    HEAP32[(399760)>>2] = (399748);
    HEAP32[(399756)>>2] = (399748);
    HEAP32[(399768)>>2] = (399756);
    HEAP32[(399764)>>2] = (399756);
    HEAP32[(399776)>>2] = (399764);
    HEAP32[(399772)>>2] = (399764);
    HEAP32[(399784)>>2] = (399772);
    HEAP32[(399780)>>2] = (399772);
    HEAP32[(399792)>>2] = (399780);
    HEAP32[(399788)>>2] = (399780);
    HEAP32[(399800)>>2] = (399788);
    HEAP32[(399796)>>2] = (399788);
    HEAP32[(399808)>>2] = (399796);
    HEAP32[(399804)>>2] = (399796);
    HEAP32[(399816)>>2] = (399804);
    HEAP32[(399812)>>2] = (399804);
    HEAP32[(399824)>>2] = (399812);
    HEAP32[(399820)>>2] = (399812);
    HEAP32[(399832)>>2] = (399820);
    HEAP32[(399828)>>2] = (399820);
    HEAP32[(399840)>>2] = (399828);
    HEAP32[(399836)>>2] = (399828);
    HEAP32[(399848)>>2] = (399836);
    HEAP32[(399844)>>2] = (399836);
    HEAP32[(399856)>>2] = (399844);
    HEAP32[(399852)>>2] = (399844);
    HEAP32[(399864)>>2] = (399852);
    HEAP32[(399860)>>2] = (399852);
    $sub172$i = (($tsize$794$i) + -40)|0;
    $add$ptr$i43$i = ((($tbase$795$i)) + 8|0);
    $95 = $add$ptr$i43$i;
    $and$i44$i = $95 & 7;
    $cmp$i45$i = ($and$i44$i|0)==(0);
    $sub$i46$i = (0 - ($95))|0;
    $and3$i47$i = $sub$i46$i & 7;
    $cond$i48$i = $cmp$i45$i ? 0 : $and3$i47$i;
    $add$ptr4$i49$i = (($tbase$795$i) + ($cond$i48$i)|0);
    $sub5$i50$i = (($sub172$i) - ($cond$i48$i))|0;
    HEAP32[(399588)>>2] = $add$ptr4$i49$i;
    HEAP32[(399576)>>2] = $sub5$i50$i;
    $or$i51$i = $sub5$i50$i | 1;
    $head$i52$i = ((($add$ptr4$i49$i)) + 4|0);
    HEAP32[$head$i52$i>>2] = $or$i51$i;
    $add$ptr6$i53$i = (($tbase$795$i) + ($sub172$i)|0);
    $head7$i54$i = ((($add$ptr6$i53$i)) + 4|0);
    HEAP32[$head7$i54$i>>2] = 40;
    $96 = HEAP32[(400052)>>2]|0;
    HEAP32[(399592)>>2] = $96;
   } else {
    $sp$0112$i = (400012);
    while(1) {
     $97 = HEAP32[$sp$0112$i>>2]|0;
     $size188$i = ((($sp$0112$i)) + 4|0);
     $98 = HEAP32[$size188$i>>2]|0;
     $add$ptr189$i = (($97) + ($98)|0);
     $cmp190$i = ($tbase$795$i|0)==($add$ptr189$i|0);
     if ($cmp190$i) {
      label = 154;
      break;
     }
     $next$i = ((($sp$0112$i)) + 8|0);
     $99 = HEAP32[$next$i>>2]|0;
     $cmp186$i = ($99|0)==(0|0);
     if ($cmp186$i) {
      break;
     } else {
      $sp$0112$i = $99;
     }
    }
    if ((label|0) == 154) {
     $size188$i$le = ((($sp$0112$i)) + 4|0);
     $sflags193$i = ((($sp$0112$i)) + 12|0);
     $100 = HEAP32[$sflags193$i>>2]|0;
     $and194$i = $100 & 8;
     $tobool195$i = ($and194$i|0)==(0);
     if ($tobool195$i) {
      $cmp203$i = ($97>>>0)<=($92>>>0);
      $cmp209$i = ($tbase$795$i>>>0)>($92>>>0);
      $or$cond98$i = $cmp209$i & $cmp203$i;
      if ($or$cond98$i) {
       $add212$i = (($98) + ($tsize$794$i))|0;
       HEAP32[$size188$i$le>>2] = $add212$i;
       $101 = HEAP32[(399576)>>2]|0;
       $add215$i = (($101) + ($tsize$794$i))|0;
       $add$ptr$i35$i = ((($92)) + 8|0);
       $102 = $add$ptr$i35$i;
       $and$i36$i = $102 & 7;
       $cmp$i37$i = ($and$i36$i|0)==(0);
       $sub$i38$i = (0 - ($102))|0;
       $and3$i39$i = $sub$i38$i & 7;
       $cond$i40$i = $cmp$i37$i ? 0 : $and3$i39$i;
       $add$ptr4$i41$i = (($92) + ($cond$i40$i)|0);
       $sub5$i$i = (($add215$i) - ($cond$i40$i))|0;
       HEAP32[(399588)>>2] = $add$ptr4$i41$i;
       HEAP32[(399576)>>2] = $sub5$i$i;
       $or$i$i = $sub5$i$i | 1;
       $head$i42$i = ((($add$ptr4$i41$i)) + 4|0);
       HEAP32[$head$i42$i>>2] = $or$i$i;
       $add$ptr6$i$i = (($92) + ($add215$i)|0);
       $head7$i$i = ((($add$ptr6$i$i)) + 4|0);
       HEAP32[$head7$i$i>>2] = 40;
       $103 = HEAP32[(400052)>>2]|0;
       HEAP32[(399592)>>2] = $103;
       break;
      }
     }
    }
    $104 = HEAP32[(399580)>>2]|0;
    $cmp218$i = ($tbase$795$i>>>0)<($104>>>0);
    if ($cmp218$i) {
     HEAP32[(399580)>>2] = $tbase$795$i;
    }
    $add$ptr227$i = (($tbase$795$i) + ($tsize$794$i)|0);
    $sp$1111$i = (400012);
    while(1) {
     $105 = HEAP32[$sp$1111$i>>2]|0;
     $cmp228$i = ($105|0)==($add$ptr227$i|0);
     if ($cmp228$i) {
      label = 162;
      break;
     }
     $next231$i = ((($sp$1111$i)) + 8|0);
     $106 = HEAP32[$next231$i>>2]|0;
     $cmp224$i = ($106|0)==(0|0);
     if ($cmp224$i) {
      break;
     } else {
      $sp$1111$i = $106;
     }
    }
    if ((label|0) == 162) {
     $sflags235$i = ((($sp$1111$i)) + 12|0);
     $107 = HEAP32[$sflags235$i>>2]|0;
     $and236$i = $107 & 8;
     $tobool237$i = ($and236$i|0)==(0);
     if ($tobool237$i) {
      HEAP32[$sp$1111$i>>2] = $tbase$795$i;
      $size245$i = ((($sp$1111$i)) + 4|0);
      $108 = HEAP32[$size245$i>>2]|0;
      $add246$i = (($108) + ($tsize$794$i))|0;
      HEAP32[$size245$i>>2] = $add246$i;
      $add$ptr$i$i = ((($tbase$795$i)) + 8|0);
      $109 = $add$ptr$i$i;
      $and$i14$i = $109 & 7;
      $cmp$i15$i = ($and$i14$i|0)==(0);
      $sub$i16$i = (0 - ($109))|0;
      $and3$i$i = $sub$i16$i & 7;
      $cond$i17$i = $cmp$i15$i ? 0 : $and3$i$i;
      $add$ptr4$i$i = (($tbase$795$i) + ($cond$i17$i)|0);
      $add$ptr5$i$i = ((($add$ptr227$i)) + 8|0);
      $110 = $add$ptr5$i$i;
      $and6$i18$i = $110 & 7;
      $cmp7$i$i = ($and6$i18$i|0)==(0);
      $sub12$i$i = (0 - ($110))|0;
      $and13$i$i = $sub12$i$i & 7;
      $cond15$i$i = $cmp7$i$i ? 0 : $and13$i$i;
      $add$ptr16$i$i = (($add$ptr227$i) + ($cond15$i$i)|0);
      $sub$ptr$lhs$cast$i19$i = $add$ptr16$i$i;
      $sub$ptr$rhs$cast$i20$i = $add$ptr4$i$i;
      $sub$ptr$sub$i21$i = (($sub$ptr$lhs$cast$i19$i) - ($sub$ptr$rhs$cast$i20$i))|0;
      $add$ptr17$i$i = (($add$ptr4$i$i) + ($nb$0)|0);
      $sub18$i$i = (($sub$ptr$sub$i21$i) - ($nb$0))|0;
      $or19$i$i = $nb$0 | 3;
      $head$i22$i = ((($add$ptr4$i$i)) + 4|0);
      HEAP32[$head$i22$i>>2] = $or19$i$i;
      $cmp20$i$i = ($92|0)==($add$ptr16$i$i|0);
      L238: do {
       if ($cmp20$i$i) {
        $111 = HEAP32[(399576)>>2]|0;
        $add$i$i = (($111) + ($sub18$i$i))|0;
        HEAP32[(399576)>>2] = $add$i$i;
        HEAP32[(399588)>>2] = $add$ptr17$i$i;
        $or22$i$i = $add$i$i | 1;
        $head23$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head23$i$i>>2] = $or22$i$i;
       } else {
        $112 = HEAP32[(399584)>>2]|0;
        $cmp24$i$i = ($112|0)==($add$ptr16$i$i|0);
        if ($cmp24$i$i) {
         $113 = HEAP32[(399572)>>2]|0;
         $add26$i$i = (($113) + ($sub18$i$i))|0;
         HEAP32[(399572)>>2] = $add26$i$i;
         HEAP32[(399584)>>2] = $add$ptr17$i$i;
         $or28$i$i = $add26$i$i | 1;
         $head29$i$i = ((($add$ptr17$i$i)) + 4|0);
         HEAP32[$head29$i$i>>2] = $or28$i$i;
         $add$ptr30$i$i = (($add$ptr17$i$i) + ($add26$i$i)|0);
         HEAP32[$add$ptr30$i$i>>2] = $add26$i$i;
         break;
        }
        $head32$i$i = ((($add$ptr16$i$i)) + 4|0);
        $114 = HEAP32[$head32$i$i>>2]|0;
        $and33$i$i = $114 & 3;
        $cmp34$i$i = ($and33$i$i|0)==(1);
        if ($cmp34$i$i) {
         $and37$i$i = $114 & -8;
         $shr$i25$i = $114 >>> 3;
         $cmp38$i$i = ($114>>>0)<(256);
         L246: do {
          if ($cmp38$i$i) {
           $fd$i$i = ((($add$ptr16$i$i)) + 8|0);
           $115 = HEAP32[$fd$i$i>>2]|0;
           $bk$i26$i = ((($add$ptr16$i$i)) + 12|0);
           $116 = HEAP32[$bk$i26$i>>2]|0;
           $cmp46$i$i = ($116|0)==($115|0);
           if ($cmp46$i$i) {
            $shl48$i$i = 1 << $shr$i25$i;
            $neg$i$i = $shl48$i$i ^ -1;
            $117 = HEAP32[99891]|0;
            $and49$i$i = $117 & $neg$i$i;
            HEAP32[99891] = $and49$i$i;
            break;
           } else {
            $bk67$i$i = ((($115)) + 12|0);
            HEAP32[$bk67$i$i>>2] = $116;
            $fd68$i$i = ((($116)) + 8|0);
            HEAP32[$fd68$i$i>>2] = $115;
            break;
           }
          } else {
           $parent$i27$i = ((($add$ptr16$i$i)) + 24|0);
           $118 = HEAP32[$parent$i27$i>>2]|0;
           $bk74$i$i = ((($add$ptr16$i$i)) + 12|0);
           $119 = HEAP32[$bk74$i$i>>2]|0;
           $cmp75$i$i = ($119|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp75$i$i) {
             $child$i$i = ((($add$ptr16$i$i)) + 16|0);
             $arrayidx96$i$i = ((($child$i$i)) + 4|0);
             $121 = HEAP32[$arrayidx96$i$i>>2]|0;
             $cmp97$i$i = ($121|0)==(0|0);
             if ($cmp97$i$i) {
              $122 = HEAP32[$child$i$i>>2]|0;
              $cmp100$i$i = ($122|0)==(0|0);
              if ($cmp100$i$i) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i$ph = $122;$RP$1$i$i$ph = $child$i$i;
              }
             } else {
              $R$1$i$i$ph = $121;$RP$1$i$i$ph = $arrayidx96$i$i;
             }
             $R$1$i$i = $R$1$i$i$ph;$RP$1$i$i = $RP$1$i$i$ph;
             while(1) {
              $arrayidx103$i$i = ((($R$1$i$i)) + 20|0);
              $123 = HEAP32[$arrayidx103$i$i>>2]|0;
              $cmp104$i$i = ($123|0)==(0|0);
              if ($cmp104$i$i) {
               $arrayidx107$i$i = ((($R$1$i$i)) + 16|0);
               $124 = HEAP32[$arrayidx107$i$i>>2]|0;
               $cmp108$i$i = ($124|0)==(0|0);
               if ($cmp108$i$i) {
                break;
               } else {
                $R$1$i$i$be = $124;$RP$1$i$i$be = $arrayidx107$i$i;
               }
              } else {
               $R$1$i$i$be = $123;$RP$1$i$i$be = $arrayidx103$i$i;
              }
              $R$1$i$i = $R$1$i$i$be;$RP$1$i$i = $RP$1$i$i$be;
             }
             HEAP32[$RP$1$i$i>>2] = 0;
             $R$3$i$i = $R$1$i$i;
            } else {
             $fd78$i$i = ((($add$ptr16$i$i)) + 8|0);
             $120 = HEAP32[$fd78$i$i>>2]|0;
             $bk91$i$i = ((($120)) + 12|0);
             HEAP32[$bk91$i$i>>2] = $119;
             $fd92$i$i = ((($119)) + 8|0);
             HEAP32[$fd92$i$i>>2] = $120;
             $R$3$i$i = $119;
            }
           } while(0);
           $cmp120$i28$i = ($118|0)==(0|0);
           if ($cmp120$i28$i) {
            break;
           }
           $index$i29$i = ((($add$ptr16$i$i)) + 28|0);
           $125 = HEAP32[$index$i29$i>>2]|0;
           $arrayidx123$i$i = (399868 + ($125<<2)|0);
           $126 = HEAP32[$arrayidx123$i$i>>2]|0;
           $cmp124$i$i = ($126|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp124$i$i) {
             HEAP32[$arrayidx123$i$i>>2] = $R$3$i$i;
             $cond1$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond1$i$i)) {
              break;
             }
             $shl131$i$i = 1 << $125;
             $neg132$i$i = $shl131$i$i ^ -1;
             $127 = HEAP32[(399568)>>2]|0;
             $and133$i$i = $127 & $neg132$i$i;
             HEAP32[(399568)>>2] = $and133$i$i;
             break L246;
            } else {
             $arrayidx143$i$i = ((($118)) + 16|0);
             $128 = HEAP32[$arrayidx143$i$i>>2]|0;
             $cmp144$i$i = ($128|0)==($add$ptr16$i$i|0);
             $arrayidx151$i$i = ((($118)) + 20|0);
             $arrayidx151$i$i$sink = $cmp144$i$i ? $arrayidx143$i$i : $arrayidx151$i$i;
             HEAP32[$arrayidx151$i$i$sink>>2] = $R$3$i$i;
             $cmp156$i$i = ($R$3$i$i|0)==(0|0);
             if ($cmp156$i$i) {
              break L246;
             }
            }
           } while(0);
           $parent165$i$i = ((($R$3$i$i)) + 24|0);
           HEAP32[$parent165$i$i>>2] = $118;
           $child166$i$i = ((($add$ptr16$i$i)) + 16|0);
           $129 = HEAP32[$child166$i$i>>2]|0;
           $cmp168$i$i = ($129|0)==(0|0);
           if (!($cmp168$i$i)) {
            $arrayidx178$i$i = ((($R$3$i$i)) + 16|0);
            HEAP32[$arrayidx178$i$i>>2] = $129;
            $parent179$i$i = ((($129)) + 24|0);
            HEAP32[$parent179$i$i>>2] = $R$3$i$i;
           }
           $arrayidx184$i$i = ((($child166$i$i)) + 4|0);
           $130 = HEAP32[$arrayidx184$i$i>>2]|0;
           $cmp185$i$i = ($130|0)==(0|0);
           if ($cmp185$i$i) {
            break;
           }
           $arrayidx195$i$i = ((($R$3$i$i)) + 20|0);
           HEAP32[$arrayidx195$i$i>>2] = $130;
           $parent196$i$i = ((($130)) + 24|0);
           HEAP32[$parent196$i$i>>2] = $R$3$i$i;
          }
         } while(0);
         $add$ptr205$i$i = (($add$ptr16$i$i) + ($and37$i$i)|0);
         $add206$i$i = (($and37$i$i) + ($sub18$i$i))|0;
         $oldfirst$0$i$i = $add$ptr205$i$i;$qsize$0$i$i = $add206$i$i;
        } else {
         $oldfirst$0$i$i = $add$ptr16$i$i;$qsize$0$i$i = $sub18$i$i;
        }
        $head208$i$i = ((($oldfirst$0$i$i)) + 4|0);
        $131 = HEAP32[$head208$i$i>>2]|0;
        $and209$i$i = $131 & -2;
        HEAP32[$head208$i$i>>2] = $and209$i$i;
        $or210$i$i = $qsize$0$i$i | 1;
        $head211$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head211$i$i>>2] = $or210$i$i;
        $add$ptr212$i$i = (($add$ptr17$i$i) + ($qsize$0$i$i)|0);
        HEAP32[$add$ptr212$i$i>>2] = $qsize$0$i$i;
        $shr214$i$i = $qsize$0$i$i >>> 3;
        $cmp215$i$i = ($qsize$0$i$i>>>0)<(256);
        if ($cmp215$i$i) {
         $shl222$i$i = $shr214$i$i << 1;
         $arrayidx223$i$i = (399604 + ($shl222$i$i<<2)|0);
         $132 = HEAP32[99891]|0;
         $shl226$i$i = 1 << $shr214$i$i;
         $and227$i$i = $132 & $shl226$i$i;
         $tobool228$i$i = ($and227$i$i|0)==(0);
         if ($tobool228$i$i) {
          $or232$i$i = $132 | $shl226$i$i;
          HEAP32[99891] = $or232$i$i;
          $$pre$i31$i = ((($arrayidx223$i$i)) + 8|0);
          $$pre$phi$i32$iZ2D = $$pre$i31$i;$F224$0$i$i = $arrayidx223$i$i;
         } else {
          $133 = ((($arrayidx223$i$i)) + 8|0);
          $134 = HEAP32[$133>>2]|0;
          $$pre$phi$i32$iZ2D = $133;$F224$0$i$i = $134;
         }
         HEAP32[$$pre$phi$i32$iZ2D>>2] = $add$ptr17$i$i;
         $bk246$i$i = ((($F224$0$i$i)) + 12|0);
         HEAP32[$bk246$i$i>>2] = $add$ptr17$i$i;
         $fd247$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd247$i$i>>2] = $F224$0$i$i;
         $bk248$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk248$i$i>>2] = $arrayidx223$i$i;
         break;
        }
        $shr253$i$i = $qsize$0$i$i >>> 8;
        $cmp254$i$i = ($shr253$i$i|0)==(0);
        do {
         if ($cmp254$i$i) {
          $I252$0$i$i = 0;
         } else {
          $cmp258$i$i = ($qsize$0$i$i>>>0)>(16777215);
          if ($cmp258$i$i) {
           $I252$0$i$i = 31;
           break;
          }
          $sub262$i$i = (($shr253$i$i) + 1048320)|0;
          $shr263$i$i = $sub262$i$i >>> 16;
          $and264$i$i = $shr263$i$i & 8;
          $shl265$i$i = $shr253$i$i << $and264$i$i;
          $sub266$i$i = (($shl265$i$i) + 520192)|0;
          $shr267$i$i = $sub266$i$i >>> 16;
          $and268$i$i = $shr267$i$i & 4;
          $add269$i$i = $and268$i$i | $and264$i$i;
          $shl270$i$i = $shl265$i$i << $and268$i$i;
          $sub271$i$i = (($shl270$i$i) + 245760)|0;
          $shr272$i$i = $sub271$i$i >>> 16;
          $and273$i$i = $shr272$i$i & 2;
          $add274$i$i = $add269$i$i | $and273$i$i;
          $sub275$i$i = (14 - ($add274$i$i))|0;
          $shl276$i$i = $shl270$i$i << $and273$i$i;
          $shr277$i$i = $shl276$i$i >>> 15;
          $add278$i$i = (($sub275$i$i) + ($shr277$i$i))|0;
          $shl279$i$i = $add278$i$i << 1;
          $add280$i$i = (($add278$i$i) + 7)|0;
          $shr281$i$i = $qsize$0$i$i >>> $add280$i$i;
          $and282$i$i = $shr281$i$i & 1;
          $add283$i$i = $and282$i$i | $shl279$i$i;
          $I252$0$i$i = $add283$i$i;
         }
        } while(0);
        $arrayidx287$i$i = (399868 + ($I252$0$i$i<<2)|0);
        $index288$i$i = ((($add$ptr17$i$i)) + 28|0);
        HEAP32[$index288$i$i>>2] = $I252$0$i$i;
        $child289$i$i = ((($add$ptr17$i$i)) + 16|0);
        $arrayidx290$i$i = ((($child289$i$i)) + 4|0);
        HEAP32[$arrayidx290$i$i>>2] = 0;
        HEAP32[$child289$i$i>>2] = 0;
        $135 = HEAP32[(399568)>>2]|0;
        $shl294$i$i = 1 << $I252$0$i$i;
        $and295$i$i = $135 & $shl294$i$i;
        $tobool296$i$i = ($and295$i$i|0)==(0);
        if ($tobool296$i$i) {
         $or300$i$i = $135 | $shl294$i$i;
         HEAP32[(399568)>>2] = $or300$i$i;
         HEAP32[$arrayidx287$i$i>>2] = $add$ptr17$i$i;
         $parent301$i$i = ((($add$ptr17$i$i)) + 24|0);
         HEAP32[$parent301$i$i>>2] = $arrayidx287$i$i;
         $bk302$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk302$i$i>>2] = $add$ptr17$i$i;
         $fd303$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd303$i$i>>2] = $add$ptr17$i$i;
         break;
        }
        $136 = HEAP32[$arrayidx287$i$i>>2]|0;
        $head3174$i$i = ((($136)) + 4|0);
        $137 = HEAP32[$head3174$i$i>>2]|0;
        $and3185$i$i = $137 & -8;
        $cmp3196$i$i = ($and3185$i$i|0)==($qsize$0$i$i|0);
        L291: do {
         if ($cmp3196$i$i) {
          $T$0$lcssa$i34$i = $136;
         } else {
          $cmp306$i$i = ($I252$0$i$i|0)==(31);
          $shr310$i$i = $I252$0$i$i >>> 1;
          $sub313$i$i = (25 - ($shr310$i$i))|0;
          $cond315$i$i = $cmp306$i$i ? 0 : $sub313$i$i;
          $shl316$i$i = $qsize$0$i$i << $cond315$i$i;
          $K305$08$i$i = $shl316$i$i;$T$07$i$i = $136;
          while(1) {
           $shr323$i$i = $K305$08$i$i >>> 31;
           $arrayidx325$i$i = (((($T$07$i$i)) + 16|0) + ($shr323$i$i<<2)|0);
           $138 = HEAP32[$arrayidx325$i$i>>2]|0;
           $cmp327$i$i = ($138|0)==(0|0);
           if ($cmp327$i$i) {
            break;
           }
           $shl326$i$i = $K305$08$i$i << 1;
           $head317$i$i = ((($138)) + 4|0);
           $139 = HEAP32[$head317$i$i>>2]|0;
           $and318$i$i = $139 & -8;
           $cmp319$i$i = ($and318$i$i|0)==($qsize$0$i$i|0);
           if ($cmp319$i$i) {
            $T$0$lcssa$i34$i = $138;
            break L291;
           } else {
            $K305$08$i$i = $shl326$i$i;$T$07$i$i = $138;
           }
          }
          HEAP32[$arrayidx325$i$i>>2] = $add$ptr17$i$i;
          $parent337$i$i = ((($add$ptr17$i$i)) + 24|0);
          HEAP32[$parent337$i$i>>2] = $T$07$i$i;
          $bk338$i$i = ((($add$ptr17$i$i)) + 12|0);
          HEAP32[$bk338$i$i>>2] = $add$ptr17$i$i;
          $fd339$i$i = ((($add$ptr17$i$i)) + 8|0);
          HEAP32[$fd339$i$i>>2] = $add$ptr17$i$i;
          break L238;
         }
        } while(0);
        $fd344$i$i = ((($T$0$lcssa$i34$i)) + 8|0);
        $140 = HEAP32[$fd344$i$i>>2]|0;
        $bk357$i$i = ((($140)) + 12|0);
        HEAP32[$bk357$i$i>>2] = $add$ptr17$i$i;
        HEAP32[$fd344$i$i>>2] = $add$ptr17$i$i;
        $fd359$i$i = ((($add$ptr17$i$i)) + 8|0);
        HEAP32[$fd359$i$i>>2] = $140;
        $bk360$i$i = ((($add$ptr17$i$i)) + 12|0);
        HEAP32[$bk360$i$i>>2] = $T$0$lcssa$i34$i;
        $parent361$i$i = ((($add$ptr17$i$i)) + 24|0);
        HEAP32[$parent361$i$i>>2] = 0;
       }
      } while(0);
      $add$ptr369$i$i = ((($add$ptr4$i$i)) + 8|0);
      $retval$0 = $add$ptr369$i$i;
      STACKTOP = sp;return ($retval$0|0);
     }
    }
    $sp$0$i$i$i = (400012);
    while(1) {
     $141 = HEAP32[$sp$0$i$i$i>>2]|0;
     $cmp$i$i$i = ($141>>>0)>($92>>>0);
     if (!($cmp$i$i$i)) {
      $size$i$i$i = ((($sp$0$i$i$i)) + 4|0);
      $142 = HEAP32[$size$i$i$i>>2]|0;
      $add$ptr$i$i$i = (($141) + ($142)|0);
      $cmp2$i$i$i = ($add$ptr$i$i$i>>>0)>($92>>>0);
      if ($cmp2$i$i$i) {
       break;
      }
     }
     $next$i$i$i = ((($sp$0$i$i$i)) + 8|0);
     $143 = HEAP32[$next$i$i$i>>2]|0;
     $sp$0$i$i$i = $143;
    }
    $add$ptr2$i$i = ((($add$ptr$i$i$i)) + -47|0);
    $add$ptr3$i$i = ((($add$ptr2$i$i)) + 8|0);
    $144 = $add$ptr3$i$i;
    $and$i$i = $144 & 7;
    $cmp$i12$i = ($and$i$i|0)==(0);
    $sub$i$i = (0 - ($144))|0;
    $and6$i13$i = $sub$i$i & 7;
    $cond$i$i = $cmp$i12$i ? 0 : $and6$i13$i;
    $add$ptr7$i$i = (($add$ptr2$i$i) + ($cond$i$i)|0);
    $add$ptr81$i$i = ((($92)) + 16|0);
    $cmp9$i$i = ($add$ptr7$i$i>>>0)<($add$ptr81$i$i>>>0);
    $cond13$i$i = $cmp9$i$i ? $92 : $add$ptr7$i$i;
    $add$ptr14$i$i = ((($cond13$i$i)) + 8|0);
    $add$ptr15$i$i = ((($cond13$i$i)) + 24|0);
    $sub16$i$i = (($tsize$794$i) + -40)|0;
    $add$ptr$i2$i$i = ((($tbase$795$i)) + 8|0);
    $145 = $add$ptr$i2$i$i;
    $and$i$i$i = $145 & 7;
    $cmp$i3$i$i = ($and$i$i$i|0)==(0);
    $sub$i$i$i = (0 - ($145))|0;
    $and3$i$i$i = $sub$i$i$i & 7;
    $cond$i$i$i = $cmp$i3$i$i ? 0 : $and3$i$i$i;
    $add$ptr4$i$i$i = (($tbase$795$i) + ($cond$i$i$i)|0);
    $sub5$i$i$i = (($sub16$i$i) - ($cond$i$i$i))|0;
    HEAP32[(399588)>>2] = $add$ptr4$i$i$i;
    HEAP32[(399576)>>2] = $sub5$i$i$i;
    $or$i$i$i = $sub5$i$i$i | 1;
    $head$i$i$i = ((($add$ptr4$i$i$i)) + 4|0);
    HEAP32[$head$i$i$i>>2] = $or$i$i$i;
    $add$ptr6$i$i$i = (($tbase$795$i) + ($sub16$i$i)|0);
    $head7$i$i$i = ((($add$ptr6$i$i$i)) + 4|0);
    HEAP32[$head7$i$i$i>>2] = 40;
    $146 = HEAP32[(400052)>>2]|0;
    HEAP32[(399592)>>2] = $146;
    $head$i$i = ((($cond13$i$i)) + 4|0);
    HEAP32[$head$i$i>>2] = 27;
    ;HEAP32[$add$ptr14$i$i>>2]=HEAP32[(400012)>>2]|0;HEAP32[$add$ptr14$i$i+4>>2]=HEAP32[(400012)+4>>2]|0;HEAP32[$add$ptr14$i$i+8>>2]=HEAP32[(400012)+8>>2]|0;HEAP32[$add$ptr14$i$i+12>>2]=HEAP32[(400012)+12>>2]|0;
    HEAP32[(400012)>>2] = $tbase$795$i;
    HEAP32[(400016)>>2] = $tsize$794$i;
    HEAP32[(400024)>>2] = 0;
    HEAP32[(400020)>>2] = $add$ptr14$i$i;
    $147 = $add$ptr15$i$i;
    while(1) {
     $add$ptr24$i$i = ((($147)) + 4|0);
     HEAP32[$add$ptr24$i$i>>2] = 7;
     $head26$i$i = ((($147)) + 8|0);
     $cmp27$i$i = ($head26$i$i>>>0)<($add$ptr$i$i$i>>>0);
     if ($cmp27$i$i) {
      $147 = $add$ptr24$i$i;
     } else {
      break;
     }
    }
    $cmp28$i$i = ($cond13$i$i|0)==($92|0);
    if (!($cmp28$i$i)) {
     $sub$ptr$lhs$cast$i$i = $cond13$i$i;
     $sub$ptr$rhs$cast$i$i = $92;
     $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
     $148 = HEAP32[$head$i$i>>2]|0;
     $and32$i$i = $148 & -2;
     HEAP32[$head$i$i>>2] = $and32$i$i;
     $or33$i$i = $sub$ptr$sub$i$i | 1;
     $head34$i$i = ((($92)) + 4|0);
     HEAP32[$head34$i$i>>2] = $or33$i$i;
     HEAP32[$cond13$i$i>>2] = $sub$ptr$sub$i$i;
     $shr$i$i = $sub$ptr$sub$i$i >>> 3;
     $cmp36$i$i = ($sub$ptr$sub$i$i>>>0)<(256);
     if ($cmp36$i$i) {
      $shl$i$i = $shr$i$i << 1;
      $arrayidx$i$i = (399604 + ($shl$i$i<<2)|0);
      $149 = HEAP32[99891]|0;
      $shl39$i$i = 1 << $shr$i$i;
      $and40$i$i = $149 & $shl39$i$i;
      $tobool$i$i = ($and40$i$i|0)==(0);
      if ($tobool$i$i) {
       $or44$i$i = $149 | $shl39$i$i;
       HEAP32[99891] = $or44$i$i;
       $$pre$i$i = ((($arrayidx$i$i)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $arrayidx$i$i;
      } else {
       $150 = ((($arrayidx$i$i)) + 8|0);
       $151 = HEAP32[$150>>2]|0;
       $$pre$phi$i$iZ2D = $150;$F$0$i$i = $151;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $92;
      $bk$i$i = ((($F$0$i$i)) + 12|0);
      HEAP32[$bk$i$i>>2] = $92;
      $fd54$i$i = ((($92)) + 8|0);
      HEAP32[$fd54$i$i>>2] = $F$0$i$i;
      $bk55$i$i = ((($92)) + 12|0);
      HEAP32[$bk55$i$i>>2] = $arrayidx$i$i;
      break;
     }
     $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
     $cmp59$i$i = ($shr58$i$i|0)==(0);
     if ($cmp59$i$i) {
      $I57$0$i$i = 0;
     } else {
      $cmp63$i$i = ($sub$ptr$sub$i$i>>>0)>(16777215);
      if ($cmp63$i$i) {
       $I57$0$i$i = 31;
      } else {
       $sub67$i$i = (($shr58$i$i) + 1048320)|0;
       $shr68$i$i = $sub67$i$i >>> 16;
       $and69$i$i = $shr68$i$i & 8;
       $shl70$i$i = $shr58$i$i << $and69$i$i;
       $sub71$i$i = (($shl70$i$i) + 520192)|0;
       $shr72$i$i = $sub71$i$i >>> 16;
       $and73$i$i = $shr72$i$i & 4;
       $add74$i$i = $and73$i$i | $and69$i$i;
       $shl75$i$i = $shl70$i$i << $and73$i$i;
       $sub76$i$i = (($shl75$i$i) + 245760)|0;
       $shr77$i$i = $sub76$i$i >>> 16;
       $and78$i$i = $shr77$i$i & 2;
       $add79$i$i = $add74$i$i | $and78$i$i;
       $sub80$i$i = (14 - ($add79$i$i))|0;
       $shl81$i$i = $shl75$i$i << $and78$i$i;
       $shr82$i$i = $shl81$i$i >>> 15;
       $add83$i$i = (($sub80$i$i) + ($shr82$i$i))|0;
       $shl84$i$i = $add83$i$i << 1;
       $add85$i$i = (($add83$i$i) + 7)|0;
       $shr86$i$i = $sub$ptr$sub$i$i >>> $add85$i$i;
       $and87$i$i = $shr86$i$i & 1;
       $add88$i$i = $and87$i$i | $shl84$i$i;
       $I57$0$i$i = $add88$i$i;
      }
     }
     $arrayidx91$i$i = (399868 + ($I57$0$i$i<<2)|0);
     $index$i$i = ((($92)) + 28|0);
     HEAP32[$index$i$i>>2] = $I57$0$i$i;
     $arrayidx92$i$i = ((($92)) + 20|0);
     HEAP32[$arrayidx92$i$i>>2] = 0;
     HEAP32[$add$ptr81$i$i>>2] = 0;
     $152 = HEAP32[(399568)>>2]|0;
     $shl95$i$i = 1 << $I57$0$i$i;
     $and96$i$i = $152 & $shl95$i$i;
     $tobool97$i$i = ($and96$i$i|0)==(0);
     if ($tobool97$i$i) {
      $or101$i$i = $152 | $shl95$i$i;
      HEAP32[(399568)>>2] = $or101$i$i;
      HEAP32[$arrayidx91$i$i>>2] = $92;
      $parent$i$i = ((($92)) + 24|0);
      HEAP32[$parent$i$i>>2] = $arrayidx91$i$i;
      $bk102$i$i = ((($92)) + 12|0);
      HEAP32[$bk102$i$i>>2] = $92;
      $fd103$i$i = ((($92)) + 8|0);
      HEAP32[$fd103$i$i>>2] = $92;
      break;
     }
     $153 = HEAP32[$arrayidx91$i$i>>2]|0;
     $head1186$i$i = ((($153)) + 4|0);
     $154 = HEAP32[$head1186$i$i>>2]|0;
     $and1197$i$i = $154 & -8;
     $cmp1208$i$i = ($and1197$i$i|0)==($sub$ptr$sub$i$i|0);
     L325: do {
      if ($cmp1208$i$i) {
       $T$0$lcssa$i$i = $153;
      } else {
       $cmp106$i$i = ($I57$0$i$i|0)==(31);
       $shr110$i$i = $I57$0$i$i >>> 1;
       $sub113$i$i = (25 - ($shr110$i$i))|0;
       $cond115$i$i = $cmp106$i$i ? 0 : $sub113$i$i;
       $shl116$i$i = $sub$ptr$sub$i$i << $cond115$i$i;
       $K105$010$i$i = $shl116$i$i;$T$09$i$i = $153;
       while(1) {
        $shr124$i$i = $K105$010$i$i >>> 31;
        $arrayidx126$i$i = (((($T$09$i$i)) + 16|0) + ($shr124$i$i<<2)|0);
        $155 = HEAP32[$arrayidx126$i$i>>2]|0;
        $cmp128$i$i = ($155|0)==(0|0);
        if ($cmp128$i$i) {
         break;
        }
        $shl127$i$i = $K105$010$i$i << 1;
        $head118$i$i = ((($155)) + 4|0);
        $156 = HEAP32[$head118$i$i>>2]|0;
        $and119$i$i = $156 & -8;
        $cmp120$i$i = ($and119$i$i|0)==($sub$ptr$sub$i$i|0);
        if ($cmp120$i$i) {
         $T$0$lcssa$i$i = $155;
         break L325;
        } else {
         $K105$010$i$i = $shl127$i$i;$T$09$i$i = $155;
        }
       }
       HEAP32[$arrayidx126$i$i>>2] = $92;
       $parent138$i$i = ((($92)) + 24|0);
       HEAP32[$parent138$i$i>>2] = $T$09$i$i;
       $bk139$i$i = ((($92)) + 12|0);
       HEAP32[$bk139$i$i>>2] = $92;
       $fd140$i$i = ((($92)) + 8|0);
       HEAP32[$fd140$i$i>>2] = $92;
       break L215;
      }
     } while(0);
     $fd148$i$i = ((($T$0$lcssa$i$i)) + 8|0);
     $157 = HEAP32[$fd148$i$i>>2]|0;
     $bk158$i$i = ((($157)) + 12|0);
     HEAP32[$bk158$i$i>>2] = $92;
     HEAP32[$fd148$i$i>>2] = $92;
     $fd160$i$i = ((($92)) + 8|0);
     HEAP32[$fd160$i$i>>2] = $157;
     $bk161$i$i = ((($92)) + 12|0);
     HEAP32[$bk161$i$i>>2] = $T$0$lcssa$i$i;
     $parent162$i$i = ((($92)) + 24|0);
     HEAP32[$parent162$i$i>>2] = 0;
    }
   }
  } while(0);
  $158 = HEAP32[(399576)>>2]|0;
  $cmp257$i = ($158>>>0)>($nb$0>>>0);
  if ($cmp257$i) {
   $sub260$i = (($158) - ($nb$0))|0;
   HEAP32[(399576)>>2] = $sub260$i;
   $159 = HEAP32[(399588)>>2]|0;
   $add$ptr262$i = (($159) + ($nb$0)|0);
   HEAP32[(399588)>>2] = $add$ptr262$i;
   $or264$i = $sub260$i | 1;
   $head265$i = ((($add$ptr262$i)) + 4|0);
   HEAP32[$head265$i>>2] = $or264$i;
   $or267$i = $nb$0 | 3;
   $head268$i = ((($159)) + 4|0);
   HEAP32[$head268$i>>2] = $or267$i;
   $add$ptr269$i = ((($159)) + 8|0);
   $retval$0 = $add$ptr269$i;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $call275$i = (___errno_location()|0);
 HEAP32[$call275$i>>2] = 48;
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $F510$0 = 0, $I534$0 = 0, $K583$0266 = 0;
 var $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R332$1 = 0, $R332$1$be = 0, $R332$1$ph = 0, $R332$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP360$1 = 0, $RP360$1$be = 0, $RP360$1$ph = 0, $T$0$lcssa = 0, $T$0265 = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr217 = 0, $add$ptr261 = 0;
 var $add$ptr482 = 0, $add$ptr498 = 0, $add$ptr6 = 0, $add17 = 0, $add246 = 0, $add258 = 0, $add267 = 0, $add550 = 0, $add555 = 0, $add559 = 0, $add561 = 0, $add564 = 0, $and12 = 0, $and140 = 0, $and210 = 0, $and215 = 0, $and232 = 0, $and240 = 0, $and266 = 0, $and301 = 0;
 var $and410 = 0, $and46 = 0, $and495 = 0, $and5 = 0, $and512 = 0, $and545 = 0, $and549 = 0, $and554 = 0, $and563 = 0, $and574 = 0, $and592 = 0, $and592263 = 0, $and8 = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx157 = 0, $arrayidx157$sink = 0, $arrayidx182 = 0;
 var $arrayidx188 = 0, $arrayidx198 = 0, $arrayidx362 = 0, $arrayidx374 = 0, $arrayidx379 = 0, $arrayidx400 = 0, $arrayidx419 = 0, $arrayidx427 = 0, $arrayidx427$sink = 0, $arrayidx454 = 0, $arrayidx460 = 0, $arrayidx470 = 0, $arrayidx509 = 0, $arrayidx567 = 0, $arrayidx570 = 0, $arrayidx599 = 0, $arrayidx99 = 0, $bk = 0, $bk275 = 0, $bk321 = 0;
 var $bk333 = 0, $bk355 = 0, $bk529 = 0, $bk531 = 0, $bk580 = 0, $bk611 = 0, $bk631 = 0, $bk634 = 0, $bk66 = 0, $bk73 = 0, $bk94 = 0, $child = 0, $child171 = 0, $child361 = 0, $child443 = 0, $child569 = 0, $cmp = 0, $cmp$i = 0, $cmp100 = 0, $cmp104 = 0;
 var $cmp109 = 0, $cmp114 = 0, $cmp127 = 0, $cmp13 = 0, $cmp131 = 0, $cmp150 = 0, $cmp162 = 0, $cmp173 = 0, $cmp18 = 0, $cmp189 = 0, $cmp211 = 0, $cmp22 = 0, $cmp228 = 0, $cmp243 = 0, $cmp249 = 0, $cmp25 = 0, $cmp255 = 0, $cmp269 = 0, $cmp296 = 0, $cmp334 = 0;
 var $cmp363 = 0, $cmp368 = 0, $cmp375 = 0, $cmp380 = 0, $cmp395 = 0, $cmp401 = 0, $cmp42 = 0, $cmp420 = 0, $cmp432 = 0, $cmp445 = 0, $cmp461 = 0, $cmp484 = 0, $cmp502 = 0, $cmp536 = 0, $cmp540 = 0, $cmp584 = 0, $cmp593 = 0, $cmp593264 = 0, $cmp601 = 0, $cmp640 = 0;
 var $cmp74 = 0, $cond = 0, $cond254 = 0, $cond255 = 0, $dec = 0, $fd = 0, $fd273 = 0, $fd322 = 0, $fd338 = 0, $fd356 = 0, $fd530 = 0, $fd581 = 0, $fd612 = 0, $fd620 = 0, $fd633 = 0, $fd67 = 0, $fd78 = 0, $fd95 = 0, $head209 = 0, $head216 = 0;
 var $head231 = 0, $head248 = 0, $head260 = 0, $head4 = 0, $head481 = 0, $head497 = 0, $head591 = 0, $head591262 = 0, $idx$neg = 0, $index = 0, $index399 = 0, $index568 = 0, $neg = 0, $neg139 = 0, $neg300 = 0, $neg409 = 0, $next4$i = 0, $or = 0, $or247 = 0, $or259 = 0;
 var $or480 = 0, $or496 = 0, $or516 = 0, $or578 = 0, $p$1 = 0, $parent = 0, $parent170 = 0, $parent183 = 0, $parent199 = 0, $parent331 = 0, $parent442 = 0, $parent455 = 0, $parent471 = 0, $parent579 = 0, $parent610 = 0, $parent635 = 0, $psize$1 = 0, $psize$2 = 0, $shl138 = 0, $shl299 = 0;
 var $shl408 = 0, $shl45 = 0, $shl508 = 0, $shl511 = 0, $shl546 = 0, $shl551 = 0, $shl557 = 0, $shl560 = 0, $shl573 = 0, $shl590 = 0, $shl600 = 0, $shr = 0, $shr268 = 0, $shr501 = 0, $shr535 = 0, $shr544 = 0, $shr548 = 0, $shr553 = 0, $shr558 = 0, $shr562 = 0;
 var $shr586 = 0, $shr597 = 0, $sp$0$i = 0, $sp$0$in$i = 0, $sub = 0, $sub547 = 0, $sub552 = 0, $sub556 = 0, $sub589 = 0, $tobool233 = 0, $tobool241 = 0, $tobool513 = 0, $tobool575 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($mem|0)==(0|0);
 if ($cmp) {
  return;
 }
 $add$ptr = ((($mem)) + -8|0);
 $0 = HEAP32[(399580)>>2]|0;
 $head4 = ((($mem)) + -4|0);
 $1 = HEAP32[$head4>>2]|0;
 $and5 = $1 & -8;
 $add$ptr6 = (($add$ptr) + ($and5)|0);
 $and8 = $1 & 1;
 $tobool9 = ($and8|0)==(0);
 do {
  if ($tobool9) {
   $2 = HEAP32[$add$ptr>>2]|0;
   $and12 = $1 & 3;
   $cmp13 = ($and12|0)==(0);
   if ($cmp13) {
    return;
   }
   $idx$neg = (0 - ($2))|0;
   $add$ptr16 = (($add$ptr) + ($idx$neg)|0);
   $add17 = (($2) + ($and5))|0;
   $cmp18 = ($add$ptr16>>>0)<($0>>>0);
   if ($cmp18) {
    return;
   }
   $3 = HEAP32[(399584)>>2]|0;
   $cmp22 = ($3|0)==($add$ptr16|0);
   if ($cmp22) {
    $head209 = ((($add$ptr6)) + 4|0);
    $20 = HEAP32[$head209>>2]|0;
    $and210 = $20 & 3;
    $cmp211 = ($and210|0)==(3);
    if (!($cmp211)) {
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
    $add$ptr217 = (($add$ptr16) + ($add17)|0);
    $head216 = ((($add$ptr16)) + 4|0);
    $or = $add17 | 1;
    $and215 = $20 & -2;
    HEAP32[(399572)>>2] = $add17;
    HEAP32[$head209>>2] = $and215;
    HEAP32[$head216>>2] = $or;
    HEAP32[$add$ptr217>>2] = $add17;
    return;
   }
   $shr = $2 >>> 3;
   $cmp25 = ($2>>>0)<(256);
   if ($cmp25) {
    $fd = ((($add$ptr16)) + 8|0);
    $4 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr16)) + 12|0);
    $5 = HEAP32[$bk>>2]|0;
    $cmp42 = ($5|0)==($4|0);
    if ($cmp42) {
     $shl45 = 1 << $shr;
     $neg = $shl45 ^ -1;
     $6 = HEAP32[99891]|0;
     $and46 = $6 & $neg;
     HEAP32[99891] = $and46;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    } else {
     $bk66 = ((($4)) + 12|0);
     HEAP32[$bk66>>2] = $5;
     $fd67 = ((($5)) + 8|0);
     HEAP32[$fd67>>2] = $4;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
   }
   $parent = ((($add$ptr16)) + 24|0);
   $7 = HEAP32[$parent>>2]|0;
   $bk73 = ((($add$ptr16)) + 12|0);
   $8 = HEAP32[$bk73>>2]|0;
   $cmp74 = ($8|0)==($add$ptr16|0);
   do {
    if ($cmp74) {
     $child = ((($add$ptr16)) + 16|0);
     $arrayidx99 = ((($child)) + 4|0);
     $10 = HEAP32[$arrayidx99>>2]|0;
     $cmp100 = ($10|0)==(0|0);
     if ($cmp100) {
      $11 = HEAP32[$child>>2]|0;
      $cmp104 = ($11|0)==(0|0);
      if ($cmp104) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $11;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $10;$RP$1$ph = $arrayidx99;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx108 = ((($R$1)) + 20|0);
      $12 = HEAP32[$arrayidx108>>2]|0;
      $cmp109 = ($12|0)==(0|0);
      if ($cmp109) {
       $arrayidx113 = ((($R$1)) + 16|0);
       $13 = HEAP32[$arrayidx113>>2]|0;
       $cmp114 = ($13|0)==(0|0);
       if ($cmp114) {
        break;
       } else {
        $R$1$be = $13;$RP$1$be = $arrayidx113;
       }
      } else {
       $R$1$be = $12;$RP$1$be = $arrayidx108;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd78 = ((($add$ptr16)) + 8|0);
     $9 = HEAP32[$fd78>>2]|0;
     $bk94 = ((($9)) + 12|0);
     HEAP32[$bk94>>2] = $8;
     $fd95 = ((($8)) + 8|0);
     HEAP32[$fd95>>2] = $9;
     $R$3 = $8;
    }
   } while(0);
   $cmp127 = ($7|0)==(0|0);
   if ($cmp127) {
    $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
   } else {
    $index = ((($add$ptr16)) + 28|0);
    $14 = HEAP32[$index>>2]|0;
    $arrayidx130 = (399868 + ($14<<2)|0);
    $15 = HEAP32[$arrayidx130>>2]|0;
    $cmp131 = ($15|0)==($add$ptr16|0);
    if ($cmp131) {
     HEAP32[$arrayidx130>>2] = $R$3;
     $cond254 = ($R$3|0)==(0|0);
     if ($cond254) {
      $shl138 = 1 << $14;
      $neg139 = $shl138 ^ -1;
      $16 = HEAP32[(399568)>>2]|0;
      $and140 = $16 & $neg139;
      HEAP32[(399568)>>2] = $and140;
      $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    } else {
     $arrayidx149 = ((($7)) + 16|0);
     $17 = HEAP32[$arrayidx149>>2]|0;
     $cmp150 = ($17|0)==($add$ptr16|0);
     $arrayidx157 = ((($7)) + 20|0);
     $arrayidx157$sink = $cmp150 ? $arrayidx149 : $arrayidx157;
     HEAP32[$arrayidx157$sink>>2] = $R$3;
     $cmp162 = ($R$3|0)==(0|0);
     if ($cmp162) {
      $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    }
    $parent170 = ((($R$3)) + 24|0);
    HEAP32[$parent170>>2] = $7;
    $child171 = ((($add$ptr16)) + 16|0);
    $18 = HEAP32[$child171>>2]|0;
    $cmp173 = ($18|0)==(0|0);
    if (!($cmp173)) {
     $arrayidx182 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx182>>2] = $18;
     $parent183 = ((($18)) + 24|0);
     HEAP32[$parent183>>2] = $R$3;
    }
    $arrayidx188 = ((($child171)) + 4|0);
    $19 = HEAP32[$arrayidx188>>2]|0;
    $cmp189 = ($19|0)==(0|0);
    if ($cmp189) {
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    } else {
     $arrayidx198 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx198>>2] = $19;
     $parent199 = ((($19)) + 24|0);
     HEAP32[$parent199>>2] = $R$3;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    }
   }
  } else {
   $21 = $add$ptr;$p$1 = $add$ptr;$psize$1 = $and5;
  }
 } while(0);
 $cmp228 = ($21>>>0)<($add$ptr6>>>0);
 if (!($cmp228)) {
  return;
 }
 $head231 = ((($add$ptr6)) + 4|0);
 $22 = HEAP32[$head231>>2]|0;
 $and232 = $22 & 1;
 $tobool233 = ($and232|0)==(0);
 if ($tobool233) {
  return;
 }
 $and240 = $22 & 2;
 $tobool241 = ($and240|0)==(0);
 if ($tobool241) {
  $23 = HEAP32[(399588)>>2]|0;
  $cmp243 = ($23|0)==($add$ptr6|0);
  if ($cmp243) {
   $24 = HEAP32[(399576)>>2]|0;
   $add246 = (($24) + ($psize$1))|0;
   HEAP32[(399576)>>2] = $add246;
   HEAP32[(399588)>>2] = $p$1;
   $or247 = $add246 | 1;
   $head248 = ((($p$1)) + 4|0);
   HEAP32[$head248>>2] = $or247;
   $25 = HEAP32[(399584)>>2]|0;
   $cmp249 = ($p$1|0)==($25|0);
   if (!($cmp249)) {
    return;
   }
   HEAP32[(399584)>>2] = 0;
   HEAP32[(399572)>>2] = 0;
   return;
  }
  $26 = HEAP32[(399584)>>2]|0;
  $cmp255 = ($26|0)==($add$ptr6|0);
  if ($cmp255) {
   $27 = HEAP32[(399572)>>2]|0;
   $add258 = (($27) + ($psize$1))|0;
   HEAP32[(399572)>>2] = $add258;
   HEAP32[(399584)>>2] = $21;
   $or259 = $add258 | 1;
   $head260 = ((($p$1)) + 4|0);
   HEAP32[$head260>>2] = $or259;
   $add$ptr261 = (($21) + ($add258)|0);
   HEAP32[$add$ptr261>>2] = $add258;
   return;
  }
  $and266 = $22 & -8;
  $add267 = (($and266) + ($psize$1))|0;
  $shr268 = $22 >>> 3;
  $cmp269 = ($22>>>0)<(256);
  do {
   if ($cmp269) {
    $fd273 = ((($add$ptr6)) + 8|0);
    $28 = HEAP32[$fd273>>2]|0;
    $bk275 = ((($add$ptr6)) + 12|0);
    $29 = HEAP32[$bk275>>2]|0;
    $cmp296 = ($29|0)==($28|0);
    if ($cmp296) {
     $shl299 = 1 << $shr268;
     $neg300 = $shl299 ^ -1;
     $30 = HEAP32[99891]|0;
     $and301 = $30 & $neg300;
     HEAP32[99891] = $and301;
     break;
    } else {
     $bk321 = ((($28)) + 12|0);
     HEAP32[$bk321>>2] = $29;
     $fd322 = ((($29)) + 8|0);
     HEAP32[$fd322>>2] = $28;
     break;
    }
   } else {
    $parent331 = ((($add$ptr6)) + 24|0);
    $31 = HEAP32[$parent331>>2]|0;
    $bk333 = ((($add$ptr6)) + 12|0);
    $32 = HEAP32[$bk333>>2]|0;
    $cmp334 = ($32|0)==($add$ptr6|0);
    do {
     if ($cmp334) {
      $child361 = ((($add$ptr6)) + 16|0);
      $arrayidx362 = ((($child361)) + 4|0);
      $34 = HEAP32[$arrayidx362>>2]|0;
      $cmp363 = ($34|0)==(0|0);
      if ($cmp363) {
       $35 = HEAP32[$child361>>2]|0;
       $cmp368 = ($35|0)==(0|0);
       if ($cmp368) {
        $R332$3 = 0;
        break;
       } else {
        $R332$1$ph = $35;$RP360$1$ph = $child361;
       }
      } else {
       $R332$1$ph = $34;$RP360$1$ph = $arrayidx362;
      }
      $R332$1 = $R332$1$ph;$RP360$1 = $RP360$1$ph;
      while(1) {
       $arrayidx374 = ((($R332$1)) + 20|0);
       $36 = HEAP32[$arrayidx374>>2]|0;
       $cmp375 = ($36|0)==(0|0);
       if ($cmp375) {
        $arrayidx379 = ((($R332$1)) + 16|0);
        $37 = HEAP32[$arrayidx379>>2]|0;
        $cmp380 = ($37|0)==(0|0);
        if ($cmp380) {
         break;
        } else {
         $R332$1$be = $37;$RP360$1$be = $arrayidx379;
        }
       } else {
        $R332$1$be = $36;$RP360$1$be = $arrayidx374;
       }
       $R332$1 = $R332$1$be;$RP360$1 = $RP360$1$be;
      }
      HEAP32[$RP360$1>>2] = 0;
      $R332$3 = $R332$1;
     } else {
      $fd338 = ((($add$ptr6)) + 8|0);
      $33 = HEAP32[$fd338>>2]|0;
      $bk355 = ((($33)) + 12|0);
      HEAP32[$bk355>>2] = $32;
      $fd356 = ((($32)) + 8|0);
      HEAP32[$fd356>>2] = $33;
      $R332$3 = $32;
     }
    } while(0);
    $cmp395 = ($31|0)==(0|0);
    if (!($cmp395)) {
     $index399 = ((($add$ptr6)) + 28|0);
     $38 = HEAP32[$index399>>2]|0;
     $arrayidx400 = (399868 + ($38<<2)|0);
     $39 = HEAP32[$arrayidx400>>2]|0;
     $cmp401 = ($39|0)==($add$ptr6|0);
     if ($cmp401) {
      HEAP32[$arrayidx400>>2] = $R332$3;
      $cond255 = ($R332$3|0)==(0|0);
      if ($cond255) {
       $shl408 = 1 << $38;
       $neg409 = $shl408 ^ -1;
       $40 = HEAP32[(399568)>>2]|0;
       $and410 = $40 & $neg409;
       HEAP32[(399568)>>2] = $and410;
       break;
      }
     } else {
      $arrayidx419 = ((($31)) + 16|0);
      $41 = HEAP32[$arrayidx419>>2]|0;
      $cmp420 = ($41|0)==($add$ptr6|0);
      $arrayidx427 = ((($31)) + 20|0);
      $arrayidx427$sink = $cmp420 ? $arrayidx419 : $arrayidx427;
      HEAP32[$arrayidx427$sink>>2] = $R332$3;
      $cmp432 = ($R332$3|0)==(0|0);
      if ($cmp432) {
       break;
      }
     }
     $parent442 = ((($R332$3)) + 24|0);
     HEAP32[$parent442>>2] = $31;
     $child443 = ((($add$ptr6)) + 16|0);
     $42 = HEAP32[$child443>>2]|0;
     $cmp445 = ($42|0)==(0|0);
     if (!($cmp445)) {
      $arrayidx454 = ((($R332$3)) + 16|0);
      HEAP32[$arrayidx454>>2] = $42;
      $parent455 = ((($42)) + 24|0);
      HEAP32[$parent455>>2] = $R332$3;
     }
     $arrayidx460 = ((($child443)) + 4|0);
     $43 = HEAP32[$arrayidx460>>2]|0;
     $cmp461 = ($43|0)==(0|0);
     if (!($cmp461)) {
      $arrayidx470 = ((($R332$3)) + 20|0);
      HEAP32[$arrayidx470>>2] = $43;
      $parent471 = ((($43)) + 24|0);
      HEAP32[$parent471>>2] = $R332$3;
     }
    }
   }
  } while(0);
  $or480 = $add267 | 1;
  $head481 = ((($p$1)) + 4|0);
  HEAP32[$head481>>2] = $or480;
  $add$ptr482 = (($21) + ($add267)|0);
  HEAP32[$add$ptr482>>2] = $add267;
  $44 = HEAP32[(399584)>>2]|0;
  $cmp484 = ($p$1|0)==($44|0);
  if ($cmp484) {
   HEAP32[(399572)>>2] = $add267;
   return;
  } else {
   $psize$2 = $add267;
  }
 } else {
  $and495 = $22 & -2;
  HEAP32[$head231>>2] = $and495;
  $or496 = $psize$1 | 1;
  $head497 = ((($p$1)) + 4|0);
  HEAP32[$head497>>2] = $or496;
  $add$ptr498 = (($21) + ($psize$1)|0);
  HEAP32[$add$ptr498>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $shr501 = $psize$2 >>> 3;
 $cmp502 = ($psize$2>>>0)<(256);
 if ($cmp502) {
  $shl508 = $shr501 << 1;
  $arrayidx509 = (399604 + ($shl508<<2)|0);
  $45 = HEAP32[99891]|0;
  $shl511 = 1 << $shr501;
  $and512 = $45 & $shl511;
  $tobool513 = ($and512|0)==(0);
  if ($tobool513) {
   $or516 = $45 | $shl511;
   HEAP32[99891] = $or516;
   $$pre = ((($arrayidx509)) + 8|0);
   $$pre$phiZ2D = $$pre;$F510$0 = $arrayidx509;
  } else {
   $46 = ((($arrayidx509)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $$pre$phiZ2D = $46;$F510$0 = $47;
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $bk529 = ((($F510$0)) + 12|0);
  HEAP32[$bk529>>2] = $p$1;
  $fd530 = ((($p$1)) + 8|0);
  HEAP32[$fd530>>2] = $F510$0;
  $bk531 = ((($p$1)) + 12|0);
  HEAP32[$bk531>>2] = $arrayidx509;
  return;
 }
 $shr535 = $psize$2 >>> 8;
 $cmp536 = ($shr535|0)==(0);
 if ($cmp536) {
  $I534$0 = 0;
 } else {
  $cmp540 = ($psize$2>>>0)>(16777215);
  if ($cmp540) {
   $I534$0 = 31;
  } else {
   $sub = (($shr535) + 1048320)|0;
   $shr544 = $sub >>> 16;
   $and545 = $shr544 & 8;
   $shl546 = $shr535 << $and545;
   $sub547 = (($shl546) + 520192)|0;
   $shr548 = $sub547 >>> 16;
   $and549 = $shr548 & 4;
   $add550 = $and549 | $and545;
   $shl551 = $shl546 << $and549;
   $sub552 = (($shl551) + 245760)|0;
   $shr553 = $sub552 >>> 16;
   $and554 = $shr553 & 2;
   $add555 = $add550 | $and554;
   $sub556 = (14 - ($add555))|0;
   $shl557 = $shl551 << $and554;
   $shr558 = $shl557 >>> 15;
   $add559 = (($sub556) + ($shr558))|0;
   $shl560 = $add559 << 1;
   $add561 = (($add559) + 7)|0;
   $shr562 = $psize$2 >>> $add561;
   $and563 = $shr562 & 1;
   $add564 = $and563 | $shl560;
   $I534$0 = $add564;
  }
 }
 $arrayidx567 = (399868 + ($I534$0<<2)|0);
 $index568 = ((($p$1)) + 28|0);
 HEAP32[$index568>>2] = $I534$0;
 $child569 = ((($p$1)) + 16|0);
 $arrayidx570 = ((($p$1)) + 20|0);
 HEAP32[$arrayidx570>>2] = 0;
 HEAP32[$child569>>2] = 0;
 $48 = HEAP32[(399568)>>2]|0;
 $shl573 = 1 << $I534$0;
 $and574 = $48 & $shl573;
 $tobool575 = ($and574|0)==(0);
 L112: do {
  if ($tobool575) {
   $or578 = $48 | $shl573;
   HEAP32[(399568)>>2] = $or578;
   HEAP32[$arrayidx567>>2] = $p$1;
   $parent579 = ((($p$1)) + 24|0);
   HEAP32[$parent579>>2] = $arrayidx567;
   $bk580 = ((($p$1)) + 12|0);
   HEAP32[$bk580>>2] = $p$1;
   $fd581 = ((($p$1)) + 8|0);
   HEAP32[$fd581>>2] = $p$1;
  } else {
   $49 = HEAP32[$arrayidx567>>2]|0;
   $head591262 = ((($49)) + 4|0);
   $50 = HEAP32[$head591262>>2]|0;
   $and592263 = $50 & -8;
   $cmp593264 = ($and592263|0)==($psize$2|0);
   L115: do {
    if ($cmp593264) {
     $T$0$lcssa = $49;
    } else {
     $cmp584 = ($I534$0|0)==(31);
     $shr586 = $I534$0 >>> 1;
     $sub589 = (25 - ($shr586))|0;
     $cond = $cmp584 ? 0 : $sub589;
     $shl590 = $psize$2 << $cond;
     $K583$0266 = $shl590;$T$0265 = $49;
     while(1) {
      $shr597 = $K583$0266 >>> 31;
      $arrayidx599 = (((($T$0265)) + 16|0) + ($shr597<<2)|0);
      $51 = HEAP32[$arrayidx599>>2]|0;
      $cmp601 = ($51|0)==(0|0);
      if ($cmp601) {
       break;
      }
      $shl600 = $K583$0266 << 1;
      $head591 = ((($51)) + 4|0);
      $52 = HEAP32[$head591>>2]|0;
      $and592 = $52 & -8;
      $cmp593 = ($and592|0)==($psize$2|0);
      if ($cmp593) {
       $T$0$lcssa = $51;
       break L115;
      } else {
       $K583$0266 = $shl600;$T$0265 = $51;
      }
     }
     HEAP32[$arrayidx599>>2] = $p$1;
     $parent610 = ((($p$1)) + 24|0);
     HEAP32[$parent610>>2] = $T$0265;
     $bk611 = ((($p$1)) + 12|0);
     HEAP32[$bk611>>2] = $p$1;
     $fd612 = ((($p$1)) + 8|0);
     HEAP32[$fd612>>2] = $p$1;
     break L112;
    }
   } while(0);
   $fd620 = ((($T$0$lcssa)) + 8|0);
   $53 = HEAP32[$fd620>>2]|0;
   $bk631 = ((($53)) + 12|0);
   HEAP32[$bk631>>2] = $p$1;
   HEAP32[$fd620>>2] = $p$1;
   $fd633 = ((($p$1)) + 8|0);
   HEAP32[$fd633>>2] = $53;
   $bk634 = ((($p$1)) + 12|0);
   HEAP32[$bk634>>2] = $T$0$lcssa;
   $parent635 = ((($p$1)) + 24|0);
   HEAP32[$parent635>>2] = 0;
  }
 } while(0);
 $54 = HEAP32[(399596)>>2]|0;
 $dec = (($54) + -1)|0;
 HEAP32[(399596)>>2] = $dec;
 $cmp640 = ($dec|0)==(0);
 if (!($cmp640)) {
  return;
 }
 $sp$0$in$i = (400020);
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $cmp$i = ($sp$0$i|0)==(0|0);
  $next4$i = ((($sp$0$i)) + 8|0);
  if ($cmp$i) {
   break;
  } else {
   $sp$0$in$i = $next4$i;
  }
 }
 HEAP32[(399596)>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $0 = 0, $and6 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp4 = 0, $cmp7 = 0, $div = 0, $head = 0, $mul = 0, $or = 0, $req$0 = 0, $spec$select = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($n_elements|0)==(0);
 if ($cmp) {
  $req$0 = 0;
 } else {
  $mul = Math_imul($elem_size, $n_elements)|0;
  $or = $elem_size | $n_elements;
  $tobool = ($or>>>0)>(65535);
  if ($tobool) {
   $div = (($mul>>>0) / ($n_elements>>>0))&-1;
   $cmp1 = ($div|0)==($elem_size|0);
   $spec$select = $cmp1 ? $mul : -1;
   $req$0 = $spec$select;
  } else {
   $req$0 = $mul;
  }
 }
 $call = (_malloc($req$0)|0);
 $cmp4 = ($call|0)==(0|0);
 if ($cmp4) {
  return ($call|0);
 }
 $head = ((($call)) + -4|0);
 $0 = HEAP32[$head>>2]|0;
 $and6 = $0 & 3;
 $cmp7 = ($and6|0)==(0);
 if ($cmp7) {
  return ($call|0);
 }
 (_memset(($call|0),0,($req$0|0))|0);
 return ($call|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $add$ptr = 0, $add$ptr10 = 0, $add6 = 0, $and = 0, $and15 = 0, $and17 = 0, $call = 0, $call12 = 0, $call3 = 0, $call7 = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp18 = 0, $cmp20 = 0, $cmp5 = 0, $cmp8 = 0, $cond = 0, $cond19 = 0;
 var $cond24 = 0, $head = 0, $mem$1 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($oldmem|0)==(0|0);
 if ($cmp) {
  $call = (_malloc($bytes)|0);
  $mem$1 = $call;
  return ($mem$1|0);
 }
 $cmp1 = ($bytes>>>0)>(4294967231);
 if ($cmp1) {
  $call3 = (___errno_location()|0);
  HEAP32[$call3>>2] = 48;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $cmp5 = ($bytes>>>0)<(11);
 $add6 = (($bytes) + 11)|0;
 $and = $add6 & -8;
 $cond = $cmp5 ? 16 : $and;
 $add$ptr = ((($oldmem)) + -8|0);
 $call7 = (_try_realloc_chunk($add$ptr,$cond)|0);
 $cmp8 = ($call7|0)==(0|0);
 if (!($cmp8)) {
  $add$ptr10 = ((($call7)) + 8|0);
  $mem$1 = $add$ptr10;
  return ($mem$1|0);
 }
 $call12 = (_malloc($bytes)|0);
 $cmp13 = ($call12|0)==(0|0);
 if ($cmp13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $head = ((($oldmem)) + -4|0);
 $0 = HEAP32[$head>>2]|0;
 $and15 = $0 & -8;
 $and17 = $0 & 3;
 $cmp18 = ($and17|0)==(0);
 $cond19 = $cmp18 ? 8 : 4;
 $sub = (($and15) - ($cond19))|0;
 $cmp20 = ($sub>>>0)<($bytes>>>0);
 $cond24 = $cmp20 ? $sub : $bytes;
 (_memcpy(($call12|0),($oldmem|0),($cond24|0))|0);
 _free($oldmem);
 $mem$1 = $call12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr298 = 0;
 var $add$ptr303 = 0, $add$ptr317 = 0, $add$ptr41 = 0, $add$ptr66 = 0, $add$ptr67 = 0, $add$ptr91 = 0, $add105 = 0, $add58 = 0, $and = 0, $and10 = 0, $and100 = 0, $and104 = 0, $and128 = 0, $and19 = 0, $and216 = 0, $and294 = 0, $and305 = 0, $and43 = 0, $and69 = 0, $and80 = 0;
 var $and87 = 0, $arrayidx179 = 0, $arrayidx186 = 0, $arrayidx190 = 0, $arrayidx206 = 0, $arrayidx226 = 0, $arrayidx234 = 0, $arrayidx234$sink = 0, $arrayidx261 = 0, $arrayidx267 = 0, $arrayidx278 = 0, $bk = 0, $bk147 = 0, $bk155 = 0, $bk174 = 0, $child = 0, $child249 = 0, $cmp$i = 0, $cmp1$i = 0, $cmp106 = 0;
 var $cmp11 = 0, $cmp111 = 0, $cmp125 = 0, $cmp13 = 0, $cmp15 = 0, $cmp156 = 0, $cmp180 = 0, $cmp183 = 0, $cmp187 = 0, $cmp191 = 0, $cmp2$i = 0, $cmp203 = 0, $cmp207 = 0, $cmp227 = 0, $cmp239 = 0, $cmp251 = 0, $cmp268 = 0, $cmp288 = 0, $cmp34 = 0, $cmp36 = 0;
 var $cmp56 = 0, $cmp59 = 0, $cmp63 = 0, $cond = 0, $fd = 0, $fd148 = 0, $fd159 = 0, $fd175 = 0, $head = 0, $head23 = 0, $head299 = 0, $head31 = 0, $head310 = 0, $head318 = 0, $head48 = 0, $head74 = 0, $head79 = 0, $head92 = 0, $head99 = 0, $index = 0;
 var $neg = 0, $neg215 = 0, $newp$2 = 0, $or = 0, $or20 = 0, $or28 = 0, $or295 = 0, $or296 = 0, $or300 = 0, $or306 = 0, $or307 = 0, $or315 = 0, $or319 = 0, $or32 = 0, $or44 = 0, $or45 = 0, $or50 = 0, $or70 = 0, $or71 = 0, $or76 = 0;
 var $or88 = 0, $or89 = 0, $or93 = 0, $parent = 0, $parent248 = 0, $parent262 = 0, $parent279 = 0, $shl$i = 0, $shl127 = 0, $shl214 = 0, $shr = 0, $storemerge = 0, $storemerge1 = 0, $sub = 0, $sub$i = 0, $sub110 = 0, $sub40 = 0, $sub62 = 0, $tobool101 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $head = ((($p)) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & -8;
 $add$ptr = (($p) + ($and)|0);
 $and10 = $0 & 3;
 $cmp11 = ($and10|0)==(0);
 if ($cmp11) {
  $cmp$i = ($nb>>>0)<(256);
  if ($cmp$i) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $add$i = (($nb) + 4)|0;
  $cmp1$i = ($and>>>0)<($add$i>>>0);
  if (!($cmp1$i)) {
   $sub$i = (($and) - ($nb))|0;
   $1 = HEAP32[(400044)>>2]|0;
   $shl$i = $1 << 1;
   $cmp2$i = ($sub$i>>>0)>($shl$i>>>0);
   if (!($cmp2$i)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $cmp13 = ($and>>>0)<($nb>>>0);
 if (!($cmp13)) {
  $sub = (($and) - ($nb))|0;
  $cmp15 = ($sub>>>0)>(15);
  if (!($cmp15)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $add$ptr17 = (($p) + ($nb)|0);
  $and19 = $0 & 1;
  $or = $and19 | $nb;
  $or20 = $or | 2;
  HEAP32[$head>>2] = $or20;
  $head23 = ((($add$ptr17)) + 4|0);
  $or28 = $sub | 3;
  HEAP32[$head23>>2] = $or28;
  $head31 = ((($add$ptr)) + 4|0);
  $2 = HEAP32[$head31>>2]|0;
  $or32 = $2 | 1;
  HEAP32[$head31>>2] = $or32;
  _dispose_chunk($add$ptr17,$sub);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $3 = HEAP32[(399588)>>2]|0;
 $cmp34 = ($3|0)==($add$ptr|0);
 if ($cmp34) {
  $4 = HEAP32[(399576)>>2]|0;
  $add = (($4) + ($and))|0;
  $cmp36 = ($add>>>0)>($nb>>>0);
  $sub40 = (($add) - ($nb))|0;
  $add$ptr41 = (($p) + ($nb)|0);
  if (!($cmp36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $or50 = $sub40 | 1;
  $head48 = ((($add$ptr41)) + 4|0);
  $and43 = $0 & 1;
  $or44 = $and43 | $nb;
  $or45 = $or44 | 2;
  HEAP32[$head>>2] = $or45;
  HEAP32[$head48>>2] = $or50;
  HEAP32[(399588)>>2] = $add$ptr41;
  HEAP32[(399576)>>2] = $sub40;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $5 = HEAP32[(399584)>>2]|0;
 $cmp56 = ($5|0)==($add$ptr|0);
 if ($cmp56) {
  $6 = HEAP32[(399572)>>2]|0;
  $add58 = (($6) + ($and))|0;
  $cmp59 = ($add58>>>0)<($nb>>>0);
  if ($cmp59) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $sub62 = (($add58) - ($nb))|0;
  $cmp63 = ($sub62>>>0)>(15);
  if ($cmp63) {
   $add$ptr66 = (($p) + ($nb)|0);
   $add$ptr67 = (($p) + ($add58)|0);
   $and69 = $0 & 1;
   $or70 = $and69 | $nb;
   $or71 = $or70 | 2;
   HEAP32[$head>>2] = $or71;
   $head74 = ((($add$ptr66)) + 4|0);
   $or76 = $sub62 | 1;
   HEAP32[$head74>>2] = $or76;
   HEAP32[$add$ptr67>>2] = $sub62;
   $head79 = ((($add$ptr67)) + 4|0);
   $7 = HEAP32[$head79>>2]|0;
   $and80 = $7 & -2;
   HEAP32[$head79>>2] = $and80;
   $storemerge = $add$ptr66;$storemerge1 = $sub62;
  } else {
   $and87 = $0 & 1;
   $or88 = $and87 | $add58;
   $or89 = $or88 | 2;
   HEAP32[$head>>2] = $or89;
   $add$ptr91 = (($p) + ($add58)|0);
   $head92 = ((($add$ptr91)) + 4|0);
   $8 = HEAP32[$head92>>2]|0;
   $or93 = $8 | 1;
   HEAP32[$head92>>2] = $or93;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(399572)>>2] = $storemerge1;
  HEAP32[(399584)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $head99 = ((($add$ptr)) + 4|0);
 $9 = HEAP32[$head99>>2]|0;
 $and100 = $9 & 2;
 $tobool101 = ($and100|0)==(0);
 if (!($tobool101)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $and104 = $9 & -8;
 $add105 = (($and104) + ($and))|0;
 $cmp106 = ($add105>>>0)<($nb>>>0);
 if ($cmp106) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $sub110 = (($add105) - ($nb))|0;
 $shr = $9 >>> 3;
 $cmp111 = ($9>>>0)<(256);
 do {
  if ($cmp111) {
   $fd = ((($add$ptr)) + 8|0);
   $10 = HEAP32[$fd>>2]|0;
   $bk = ((($add$ptr)) + 12|0);
   $11 = HEAP32[$bk>>2]|0;
   $cmp125 = ($11|0)==($10|0);
   if ($cmp125) {
    $shl127 = 1 << $shr;
    $neg = $shl127 ^ -1;
    $12 = HEAP32[99891]|0;
    $and128 = $12 & $neg;
    HEAP32[99891] = $and128;
    break;
   } else {
    $bk147 = ((($10)) + 12|0);
    HEAP32[$bk147>>2] = $11;
    $fd148 = ((($11)) + 8|0);
    HEAP32[$fd148>>2] = $10;
    break;
   }
  } else {
   $parent = ((($add$ptr)) + 24|0);
   $13 = HEAP32[$parent>>2]|0;
   $bk155 = ((($add$ptr)) + 12|0);
   $14 = HEAP32[$bk155>>2]|0;
   $cmp156 = ($14|0)==($add$ptr|0);
   do {
    if ($cmp156) {
     $child = ((($add$ptr)) + 16|0);
     $arrayidx179 = ((($child)) + 4|0);
     $16 = HEAP32[$arrayidx179>>2]|0;
     $cmp180 = ($16|0)==(0|0);
     if ($cmp180) {
      $17 = HEAP32[$child>>2]|0;
      $cmp183 = ($17|0)==(0|0);
      if ($cmp183) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $17;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $16;$RP$1$ph = $arrayidx179;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx186 = ((($R$1)) + 20|0);
      $18 = HEAP32[$arrayidx186>>2]|0;
      $cmp187 = ($18|0)==(0|0);
      if ($cmp187) {
       $arrayidx190 = ((($R$1)) + 16|0);
       $19 = HEAP32[$arrayidx190>>2]|0;
       $cmp191 = ($19|0)==(0|0);
       if ($cmp191) {
        break;
       } else {
        $R$1$be = $19;$RP$1$be = $arrayidx190;
       }
      } else {
       $R$1$be = $18;$RP$1$be = $arrayidx186;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd159 = ((($add$ptr)) + 8|0);
     $15 = HEAP32[$fd159>>2]|0;
     $bk174 = ((($15)) + 12|0);
     HEAP32[$bk174>>2] = $14;
     $fd175 = ((($14)) + 8|0);
     HEAP32[$fd175>>2] = $15;
     $R$3 = $14;
    }
   } while(0);
   $cmp203 = ($13|0)==(0|0);
   if (!($cmp203)) {
    $index = ((($add$ptr)) + 28|0);
    $20 = HEAP32[$index>>2]|0;
    $arrayidx206 = (399868 + ($20<<2)|0);
    $21 = HEAP32[$arrayidx206>>2]|0;
    $cmp207 = ($21|0)==($add$ptr|0);
    if ($cmp207) {
     HEAP32[$arrayidx206>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $shl214 = 1 << $20;
      $neg215 = $shl214 ^ -1;
      $22 = HEAP32[(399568)>>2]|0;
      $and216 = $22 & $neg215;
      HEAP32[(399568)>>2] = $and216;
      break;
     }
    } else {
     $arrayidx226 = ((($13)) + 16|0);
     $23 = HEAP32[$arrayidx226>>2]|0;
     $cmp227 = ($23|0)==($add$ptr|0);
     $arrayidx234 = ((($13)) + 20|0);
     $arrayidx234$sink = $cmp227 ? $arrayidx226 : $arrayidx234;
     HEAP32[$arrayidx234$sink>>2] = $R$3;
     $cmp239 = ($R$3|0)==(0|0);
     if ($cmp239) {
      break;
     }
    }
    $parent248 = ((($R$3)) + 24|0);
    HEAP32[$parent248>>2] = $13;
    $child249 = ((($add$ptr)) + 16|0);
    $24 = HEAP32[$child249>>2]|0;
    $cmp251 = ($24|0)==(0|0);
    if (!($cmp251)) {
     $arrayidx261 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx261>>2] = $24;
     $parent262 = ((($24)) + 24|0);
     HEAP32[$parent262>>2] = $R$3;
    }
    $arrayidx267 = ((($child249)) + 4|0);
    $25 = HEAP32[$arrayidx267>>2]|0;
    $cmp268 = ($25|0)==(0|0);
    if (!($cmp268)) {
     $arrayidx278 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx278>>2] = $25;
     $parent279 = ((($25)) + 24|0);
     HEAP32[$parent279>>2] = $R$3;
    }
   }
  }
 } while(0);
 $cmp288 = ($sub110>>>0)<(16);
 if ($cmp288) {
  $and294 = $0 & 1;
  $or295 = $and294 | $add105;
  $or296 = $or295 | 2;
  HEAP32[$head>>2] = $or296;
  $add$ptr298 = (($p) + ($add105)|0);
  $head299 = ((($add$ptr298)) + 4|0);
  $26 = HEAP32[$head299>>2]|0;
  $or300 = $26 | 1;
  HEAP32[$head299>>2] = $or300;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $add$ptr303 = (($p) + ($nb)|0);
  $and305 = $0 & 1;
  $or306 = $and305 | $nb;
  $or307 = $or306 | 2;
  HEAP32[$head>>2] = $or307;
  $head310 = ((($add$ptr303)) + 4|0);
  $or315 = $sub110 | 3;
  HEAP32[$head310>>2] = $or315;
  $add$ptr317 = (($p) + ($add105)|0);
  $head318 = ((($add$ptr317)) + 4|0);
  $27 = HEAP32[$head318>>2]|0;
  $or319 = $27 | 1;
  HEAP32[$head318>>2] = $or319;
  _dispose_chunk($add$ptr303,$sub110);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $F517$0 = 0, $I545$0 = 0, $K597$010 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0;
 var $R$3 = 0, $R328$1 = 0, $R328$1$be = 0, $R328$1$ph = 0, $R328$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP357$1 = 0, $RP357$1$be = 0, $RP357$1$ph = 0, $T$0$lcssa = 0, $T$09 = 0, $add$ptr = 0, $add$ptr252 = 0, $add$ptr486 = 0, $add$ptr5 = 0, $add$ptr504 = 0, $add230 = 0, $add248 = 0;
 var $add258 = 0, $add561 = 0, $add566 = 0, $add570 = 0, $add572 = 0, $add575 = 0, $add6 = 0, $and = 0, $and128 = 0, $and2 = 0, $and202 = 0, $and207 = 0, $and224 = 0, $and257 = 0, $and295 = 0, $and32 = 0, $and410 = 0, $and501 = 0, $and520 = 0, $and556 = 0;
 var $and560 = 0, $and565 = 0, $and574 = 0, $and587 = 0, $and606 = 0, $and6067 = 0, $arrayidx100 = 0, $arrayidx118 = 0, $arrayidx138 = 0, $arrayidx146 = 0, $arrayidx146$sink = 0, $arrayidx173 = 0, $arrayidx179 = 0, $arrayidx190 = 0, $arrayidx359 = 0, $arrayidx371 = 0, $arrayidx376 = 0, $arrayidx399 = 0, $arrayidx420 = 0, $arrayidx428 = 0;
 var $arrayidx428$sink = 0, $arrayidx457 = 0, $arrayidx463 = 0, $arrayidx474 = 0, $arrayidx516 = 0, $arrayidx579 = 0, $arrayidx582 = 0, $arrayidx613 = 0, $arrayidx86 = 0, $arrayidx95 = 0, $bk = 0, $bk266 = 0, $bk317 = 0, $bk329 = 0, $bk352 = 0, $bk52 = 0, $bk539 = 0, $bk541 = 0, $bk594 = 0, $bk60 = 0;
 var $bk626 = 0, $bk648 = 0, $bk651 = 0, $bk81 = 0, $child = 0, $child161 = 0, $child358 = 0, $child445 = 0, $child581 = 0, $cmp = 0, $cmp10 = 0, $cmp101 = 0, $cmp115 = 0, $cmp119 = 0, $cmp13 = 0, $cmp139 = 0, $cmp151 = 0, $cmp163 = 0, $cmp180 = 0, $cmp203 = 0;
 var $cmp227 = 0, $cmp235 = 0, $cmp244 = 0, $cmp260 = 0, $cmp28 = 0, $cmp289 = 0, $cmp330 = 0, $cmp360 = 0, $cmp365 = 0, $cmp372 = 0, $cmp377 = 0, $cmp393 = 0, $cmp400 = 0, $cmp421 = 0, $cmp433 = 0, $cmp447 = 0, $cmp464 = 0, $cmp489 = 0, $cmp508 = 0, $cmp547 = 0;
 var $cmp551 = 0, $cmp598 = 0, $cmp607 = 0, $cmp6078 = 0, $cmp61 = 0, $cmp615 = 0, $cmp87 = 0, $cmp91 = 0, $cmp96 = 0, $cond = 0, $cond2 = 0, $cond3 = 0, $fd = 0, $fd264 = 0, $fd318 = 0, $fd334 = 0, $fd353 = 0, $fd53 = 0, $fd540 = 0, $fd595 = 0;
 var $fd627 = 0, $fd635 = 0, $fd65 = 0, $fd650 = 0, $fd82 = 0, $head = 0, $head201 = 0, $head208 = 0, $head223 = 0, $head233 = 0, $head251 = 0, $head485 = 0, $head503 = 0, $head605 = 0, $head6056 = 0, $idx$neg = 0, $index = 0, $index398 = 0, $index580 = 0, $neg = 0;
 var $neg127 = 0, $neg293 = 0, $neg408 = 0, $or = 0, $or232 = 0, $or250 = 0, $or484 = 0, $or502 = 0, $or525 = 0, $or592 = 0, $p$addr$1 = 0, $parent = 0, $parent160 = 0, $parent174 = 0, $parent191 = 0, $parent327 = 0, $parent444 = 0, $parent458 = 0, $parent475 = 0, $parent593 = 0;
 var $parent625 = 0, $parent652 = 0, $psize$addr$1 = 0, $psize$addr$2 = 0, $shl126 = 0, $shl292 = 0, $shl31 = 0, $shl407 = 0, $shl515 = 0, $shl519 = 0, $shl557 = 0, $shl562 = 0, $shl568 = 0, $shl571 = 0, $shl586 = 0, $shl604 = 0, $shl614 = 0, $shr = 0, $shr259 = 0, $shr507 = 0;
 var $shr546 = 0, $shr555 = 0, $shr559 = 0, $shr564 = 0, $shr569 = 0, $shr573 = 0, $shr600 = 0, $shr611 = 0, $sub = 0, $sub558 = 0, $sub563 = 0, $sub567 = 0, $sub603 = 0, $tobool = 0, $tobool225 = 0, $tobool521 = 0, $tobool588 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add$ptr = (($p) + ($psize)|0);
 $head = ((($p)) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 do {
  if ($tobool) {
   $1 = HEAP32[$p>>2]|0;
   $and2 = $0 & 3;
   $cmp = ($and2|0)==(0);
   if ($cmp) {
    return;
   }
   $idx$neg = (0 - ($1))|0;
   $add$ptr5 = (($p) + ($idx$neg)|0);
   $add6 = (($1) + ($psize))|0;
   $2 = HEAP32[(399584)>>2]|0;
   $cmp10 = ($2|0)==($add$ptr5|0);
   if ($cmp10) {
    $head201 = ((($add$ptr)) + 4|0);
    $19 = HEAP32[$head201>>2]|0;
    $and202 = $19 & 3;
    $cmp203 = ($and202|0)==(3);
    if (!($cmp203)) {
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    }
    $head208 = ((($add$ptr5)) + 4|0);
    $or = $add6 | 1;
    $and207 = $19 & -2;
    HEAP32[(399572)>>2] = $add6;
    HEAP32[$head201>>2] = $and207;
    HEAP32[$head208>>2] = $or;
    HEAP32[$add$ptr>>2] = $add6;
    return;
   }
   $shr = $1 >>> 3;
   $cmp13 = ($1>>>0)<(256);
   if ($cmp13) {
    $fd = ((($add$ptr5)) + 8|0);
    $3 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr5)) + 12|0);
    $4 = HEAP32[$bk>>2]|0;
    $cmp28 = ($4|0)==($3|0);
    if ($cmp28) {
     $shl31 = 1 << $shr;
     $neg = $shl31 ^ -1;
     $5 = HEAP32[99891]|0;
     $and32 = $5 & $neg;
     HEAP32[99891] = $and32;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    } else {
     $bk52 = ((($3)) + 12|0);
     HEAP32[$bk52>>2] = $4;
     $fd53 = ((($4)) + 8|0);
     HEAP32[$fd53>>2] = $3;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    }
   }
   $parent = ((($add$ptr5)) + 24|0);
   $6 = HEAP32[$parent>>2]|0;
   $bk60 = ((($add$ptr5)) + 12|0);
   $7 = HEAP32[$bk60>>2]|0;
   $cmp61 = ($7|0)==($add$ptr5|0);
   do {
    if ($cmp61) {
     $child = ((($add$ptr5)) + 16|0);
     $arrayidx86 = ((($child)) + 4|0);
     $9 = HEAP32[$arrayidx86>>2]|0;
     $cmp87 = ($9|0)==(0|0);
     if ($cmp87) {
      $10 = HEAP32[$child>>2]|0;
      $cmp91 = ($10|0)==(0|0);
      if ($cmp91) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $10;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $9;$RP$1$ph = $arrayidx86;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx95 = ((($R$1)) + 20|0);
      $11 = HEAP32[$arrayidx95>>2]|0;
      $cmp96 = ($11|0)==(0|0);
      if ($cmp96) {
       $arrayidx100 = ((($R$1)) + 16|0);
       $12 = HEAP32[$arrayidx100>>2]|0;
       $cmp101 = ($12|0)==(0|0);
       if ($cmp101) {
        break;
       } else {
        $R$1$be = $12;$RP$1$be = $arrayidx100;
       }
      } else {
       $R$1$be = $11;$RP$1$be = $arrayidx95;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd65 = ((($add$ptr5)) + 8|0);
     $8 = HEAP32[$fd65>>2]|0;
     $bk81 = ((($8)) + 12|0);
     HEAP32[$bk81>>2] = $7;
     $fd82 = ((($7)) + 8|0);
     HEAP32[$fd82>>2] = $8;
     $R$3 = $7;
    }
   } while(0);
   $cmp115 = ($6|0)==(0|0);
   if ($cmp115) {
    $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
   } else {
    $index = ((($add$ptr5)) + 28|0);
    $13 = HEAP32[$index>>2]|0;
    $arrayidx118 = (399868 + ($13<<2)|0);
    $14 = HEAP32[$arrayidx118>>2]|0;
    $cmp119 = ($14|0)==($add$ptr5|0);
    if ($cmp119) {
     HEAP32[$arrayidx118>>2] = $R$3;
     $cond2 = ($R$3|0)==(0|0);
     if ($cond2) {
      $shl126 = 1 << $13;
      $neg127 = $shl126 ^ -1;
      $15 = HEAP32[(399568)>>2]|0;
      $and128 = $15 & $neg127;
      HEAP32[(399568)>>2] = $and128;
      $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
      break;
     }
    } else {
     $arrayidx138 = ((($6)) + 16|0);
     $16 = HEAP32[$arrayidx138>>2]|0;
     $cmp139 = ($16|0)==($add$ptr5|0);
     $arrayidx146 = ((($6)) + 20|0);
     $arrayidx146$sink = $cmp139 ? $arrayidx138 : $arrayidx146;
     HEAP32[$arrayidx146$sink>>2] = $R$3;
     $cmp151 = ($R$3|0)==(0|0);
     if ($cmp151) {
      $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
      break;
     }
    }
    $parent160 = ((($R$3)) + 24|0);
    HEAP32[$parent160>>2] = $6;
    $child161 = ((($add$ptr5)) + 16|0);
    $17 = HEAP32[$child161>>2]|0;
    $cmp163 = ($17|0)==(0|0);
    if (!($cmp163)) {
     $arrayidx173 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx173>>2] = $17;
     $parent174 = ((($17)) + 24|0);
     HEAP32[$parent174>>2] = $R$3;
    }
    $arrayidx179 = ((($child161)) + 4|0);
    $18 = HEAP32[$arrayidx179>>2]|0;
    $cmp180 = ($18|0)==(0|0);
    if ($cmp180) {
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
    } else {
     $arrayidx190 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx190>>2] = $18;
     $parent191 = ((($18)) + 24|0);
     HEAP32[$parent191>>2] = $R$3;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
    }
   }
  } else {
   $p$addr$1 = $p;$psize$addr$1 = $psize;
  }
 } while(0);
 $head223 = ((($add$ptr)) + 4|0);
 $20 = HEAP32[$head223>>2]|0;
 $and224 = $20 & 2;
 $tobool225 = ($and224|0)==(0);
 if ($tobool225) {
  $21 = HEAP32[(399588)>>2]|0;
  $cmp227 = ($21|0)==($add$ptr|0);
  if ($cmp227) {
   $22 = HEAP32[(399576)>>2]|0;
   $add230 = (($22) + ($psize$addr$1))|0;
   HEAP32[(399576)>>2] = $add230;
   HEAP32[(399588)>>2] = $p$addr$1;
   $or232 = $add230 | 1;
   $head233 = ((($p$addr$1)) + 4|0);
   HEAP32[$head233>>2] = $or232;
   $23 = HEAP32[(399584)>>2]|0;
   $cmp235 = ($p$addr$1|0)==($23|0);
   if (!($cmp235)) {
    return;
   }
   HEAP32[(399584)>>2] = 0;
   HEAP32[(399572)>>2] = 0;
   return;
  }
  $24 = HEAP32[(399584)>>2]|0;
  $cmp244 = ($24|0)==($add$ptr|0);
  if ($cmp244) {
   $25 = HEAP32[(399572)>>2]|0;
   $add248 = (($25) + ($psize$addr$1))|0;
   HEAP32[(399572)>>2] = $add248;
   HEAP32[(399584)>>2] = $p$addr$1;
   $or250 = $add248 | 1;
   $head251 = ((($p$addr$1)) + 4|0);
   HEAP32[$head251>>2] = $or250;
   $add$ptr252 = (($p$addr$1) + ($add248)|0);
   HEAP32[$add$ptr252>>2] = $add248;
   return;
  }
  $and257 = $20 & -8;
  $add258 = (($and257) + ($psize$addr$1))|0;
  $shr259 = $20 >>> 3;
  $cmp260 = ($20>>>0)<(256);
  do {
   if ($cmp260) {
    $fd264 = ((($add$ptr)) + 8|0);
    $26 = HEAP32[$fd264>>2]|0;
    $bk266 = ((($add$ptr)) + 12|0);
    $27 = HEAP32[$bk266>>2]|0;
    $cmp289 = ($27|0)==($26|0);
    if ($cmp289) {
     $shl292 = 1 << $shr259;
     $neg293 = $shl292 ^ -1;
     $28 = HEAP32[99891]|0;
     $and295 = $28 & $neg293;
     HEAP32[99891] = $and295;
     break;
    } else {
     $bk317 = ((($26)) + 12|0);
     HEAP32[$bk317>>2] = $27;
     $fd318 = ((($27)) + 8|0);
     HEAP32[$fd318>>2] = $26;
     break;
    }
   } else {
    $parent327 = ((($add$ptr)) + 24|0);
    $29 = HEAP32[$parent327>>2]|0;
    $bk329 = ((($add$ptr)) + 12|0);
    $30 = HEAP32[$bk329>>2]|0;
    $cmp330 = ($30|0)==($add$ptr|0);
    do {
     if ($cmp330) {
      $child358 = ((($add$ptr)) + 16|0);
      $arrayidx359 = ((($child358)) + 4|0);
      $32 = HEAP32[$arrayidx359>>2]|0;
      $cmp360 = ($32|0)==(0|0);
      if ($cmp360) {
       $33 = HEAP32[$child358>>2]|0;
       $cmp365 = ($33|0)==(0|0);
       if ($cmp365) {
        $R328$3 = 0;
        break;
       } else {
        $R328$1$ph = $33;$RP357$1$ph = $child358;
       }
      } else {
       $R328$1$ph = $32;$RP357$1$ph = $arrayidx359;
      }
      $R328$1 = $R328$1$ph;$RP357$1 = $RP357$1$ph;
      while(1) {
       $arrayidx371 = ((($R328$1)) + 20|0);
       $34 = HEAP32[$arrayidx371>>2]|0;
       $cmp372 = ($34|0)==(0|0);
       if ($cmp372) {
        $arrayidx376 = ((($R328$1)) + 16|0);
        $35 = HEAP32[$arrayidx376>>2]|0;
        $cmp377 = ($35|0)==(0|0);
        if ($cmp377) {
         break;
        } else {
         $R328$1$be = $35;$RP357$1$be = $arrayidx376;
        }
       } else {
        $R328$1$be = $34;$RP357$1$be = $arrayidx371;
       }
       $R328$1 = $R328$1$be;$RP357$1 = $RP357$1$be;
      }
      HEAP32[$RP357$1>>2] = 0;
      $R328$3 = $R328$1;
     } else {
      $fd334 = ((($add$ptr)) + 8|0);
      $31 = HEAP32[$fd334>>2]|0;
      $bk352 = ((($31)) + 12|0);
      HEAP32[$bk352>>2] = $30;
      $fd353 = ((($30)) + 8|0);
      HEAP32[$fd353>>2] = $31;
      $R328$3 = $30;
     }
    } while(0);
    $cmp393 = ($29|0)==(0|0);
    if (!($cmp393)) {
     $index398 = ((($add$ptr)) + 28|0);
     $36 = HEAP32[$index398>>2]|0;
     $arrayidx399 = (399868 + ($36<<2)|0);
     $37 = HEAP32[$arrayidx399>>2]|0;
     $cmp400 = ($37|0)==($add$ptr|0);
     if ($cmp400) {
      HEAP32[$arrayidx399>>2] = $R328$3;
      $cond3 = ($R328$3|0)==(0|0);
      if ($cond3) {
       $shl407 = 1 << $36;
       $neg408 = $shl407 ^ -1;
       $38 = HEAP32[(399568)>>2]|0;
       $and410 = $38 & $neg408;
       HEAP32[(399568)>>2] = $and410;
       break;
      }
     } else {
      $arrayidx420 = ((($29)) + 16|0);
      $39 = HEAP32[$arrayidx420>>2]|0;
      $cmp421 = ($39|0)==($add$ptr|0);
      $arrayidx428 = ((($29)) + 20|0);
      $arrayidx428$sink = $cmp421 ? $arrayidx420 : $arrayidx428;
      HEAP32[$arrayidx428$sink>>2] = $R328$3;
      $cmp433 = ($R328$3|0)==(0|0);
      if ($cmp433) {
       break;
      }
     }
     $parent444 = ((($R328$3)) + 24|0);
     HEAP32[$parent444>>2] = $29;
     $child445 = ((($add$ptr)) + 16|0);
     $40 = HEAP32[$child445>>2]|0;
     $cmp447 = ($40|0)==(0|0);
     if (!($cmp447)) {
      $arrayidx457 = ((($R328$3)) + 16|0);
      HEAP32[$arrayidx457>>2] = $40;
      $parent458 = ((($40)) + 24|0);
      HEAP32[$parent458>>2] = $R328$3;
     }
     $arrayidx463 = ((($child445)) + 4|0);
     $41 = HEAP32[$arrayidx463>>2]|0;
     $cmp464 = ($41|0)==(0|0);
     if (!($cmp464)) {
      $arrayidx474 = ((($R328$3)) + 20|0);
      HEAP32[$arrayidx474>>2] = $41;
      $parent475 = ((($41)) + 24|0);
      HEAP32[$parent475>>2] = $R328$3;
     }
    }
   }
  } while(0);
  $or484 = $add258 | 1;
  $head485 = ((($p$addr$1)) + 4|0);
  HEAP32[$head485>>2] = $or484;
  $add$ptr486 = (($p$addr$1) + ($add258)|0);
  HEAP32[$add$ptr486>>2] = $add258;
  $42 = HEAP32[(399584)>>2]|0;
  $cmp489 = ($p$addr$1|0)==($42|0);
  if ($cmp489) {
   HEAP32[(399572)>>2] = $add258;
   return;
  } else {
   $psize$addr$2 = $add258;
  }
 } else {
  $and501 = $20 & -2;
  HEAP32[$head223>>2] = $and501;
  $or502 = $psize$addr$1 | 1;
  $head503 = ((($p$addr$1)) + 4|0);
  HEAP32[$head503>>2] = $or502;
  $add$ptr504 = (($p$addr$1) + ($psize$addr$1)|0);
  HEAP32[$add$ptr504>>2] = $psize$addr$1;
  $psize$addr$2 = $psize$addr$1;
 }
 $shr507 = $psize$addr$2 >>> 3;
 $cmp508 = ($psize$addr$2>>>0)<(256);
 if ($cmp508) {
  $shl515 = $shr507 << 1;
  $arrayidx516 = (399604 + ($shl515<<2)|0);
  $43 = HEAP32[99891]|0;
  $shl519 = 1 << $shr507;
  $and520 = $43 & $shl519;
  $tobool521 = ($and520|0)==(0);
  if ($tobool521) {
   $or525 = $43 | $shl519;
   HEAP32[99891] = $or525;
   $$pre = ((($arrayidx516)) + 8|0);
   $$pre$phiZ2D = $$pre;$F517$0 = $arrayidx516;
  } else {
   $44 = ((($arrayidx516)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $$pre$phiZ2D = $44;$F517$0 = $45;
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$addr$1;
  $bk539 = ((($F517$0)) + 12|0);
  HEAP32[$bk539>>2] = $p$addr$1;
  $fd540 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd540>>2] = $F517$0;
  $bk541 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk541>>2] = $arrayidx516;
  return;
 }
 $shr546 = $psize$addr$2 >>> 8;
 $cmp547 = ($shr546|0)==(0);
 if ($cmp547) {
  $I545$0 = 0;
 } else {
  $cmp551 = ($psize$addr$2>>>0)>(16777215);
  if ($cmp551) {
   $I545$0 = 31;
  } else {
   $sub = (($shr546) + 1048320)|0;
   $shr555 = $sub >>> 16;
   $and556 = $shr555 & 8;
   $shl557 = $shr546 << $and556;
   $sub558 = (($shl557) + 520192)|0;
   $shr559 = $sub558 >>> 16;
   $and560 = $shr559 & 4;
   $add561 = $and560 | $and556;
   $shl562 = $shl557 << $and560;
   $sub563 = (($shl562) + 245760)|0;
   $shr564 = $sub563 >>> 16;
   $and565 = $shr564 & 2;
   $add566 = $add561 | $and565;
   $sub567 = (14 - ($add566))|0;
   $shl568 = $shl562 << $and565;
   $shr569 = $shl568 >>> 15;
   $add570 = (($sub567) + ($shr569))|0;
   $shl571 = $add570 << 1;
   $add572 = (($add570) + 7)|0;
   $shr573 = $psize$addr$2 >>> $add572;
   $and574 = $shr573 & 1;
   $add575 = $and574 | $shl571;
   $I545$0 = $add575;
  }
 }
 $arrayidx579 = (399868 + ($I545$0<<2)|0);
 $index580 = ((($p$addr$1)) + 28|0);
 HEAP32[$index580>>2] = $I545$0;
 $child581 = ((($p$addr$1)) + 16|0);
 $arrayidx582 = ((($p$addr$1)) + 20|0);
 HEAP32[$arrayidx582>>2] = 0;
 HEAP32[$child581>>2] = 0;
 $46 = HEAP32[(399568)>>2]|0;
 $shl586 = 1 << $I545$0;
 $and587 = $46 & $shl586;
 $tobool588 = ($and587|0)==(0);
 if ($tobool588) {
  $or592 = $46 | $shl586;
  HEAP32[(399568)>>2] = $or592;
  HEAP32[$arrayidx579>>2] = $p$addr$1;
  $parent593 = ((($p$addr$1)) + 24|0);
  HEAP32[$parent593>>2] = $arrayidx579;
  $bk594 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk594>>2] = $p$addr$1;
  $fd595 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd595>>2] = $p$addr$1;
  return;
 }
 $47 = HEAP32[$arrayidx579>>2]|0;
 $head6056 = ((($47)) + 4|0);
 $48 = HEAP32[$head6056>>2]|0;
 $and6067 = $48 & -8;
 $cmp6078 = ($and6067|0)==($psize$addr$2|0);
 L104: do {
  if ($cmp6078) {
   $T$0$lcssa = $47;
  } else {
   $cmp598 = ($I545$0|0)==(31);
   $shr600 = $I545$0 >>> 1;
   $sub603 = (25 - ($shr600))|0;
   $cond = $cmp598 ? 0 : $sub603;
   $shl604 = $psize$addr$2 << $cond;
   $K597$010 = $shl604;$T$09 = $47;
   while(1) {
    $shr611 = $K597$010 >>> 31;
    $arrayidx613 = (((($T$09)) + 16|0) + ($shr611<<2)|0);
    $49 = HEAP32[$arrayidx613>>2]|0;
    $cmp615 = ($49|0)==(0|0);
    if ($cmp615) {
     break;
    }
    $shl614 = $K597$010 << 1;
    $head605 = ((($49)) + 4|0);
    $50 = HEAP32[$head605>>2]|0;
    $and606 = $50 & -8;
    $cmp607 = ($and606|0)==($psize$addr$2|0);
    if ($cmp607) {
     $T$0$lcssa = $49;
     break L104;
    } else {
     $K597$010 = $shl614;$T$09 = $49;
    }
   }
   HEAP32[$arrayidx613>>2] = $p$addr$1;
   $parent625 = ((($p$addr$1)) + 24|0);
   HEAP32[$parent625>>2] = $T$09;
   $bk626 = ((($p$addr$1)) + 12|0);
   HEAP32[$bk626>>2] = $p$addr$1;
   $fd627 = ((($p$addr$1)) + 8|0);
   HEAP32[$fd627>>2] = $p$addr$1;
   return;
  }
 } while(0);
 $fd635 = ((($T$0$lcssa)) + 8|0);
 $51 = HEAP32[$fd635>>2]|0;
 $bk648 = ((($51)) + 12|0);
 HEAP32[$bk648>>2] = $p$addr$1;
 HEAP32[$fd635>>2] = $p$addr$1;
 $fd650 = ((($p$addr$1)) + 8|0);
 HEAP32[$fd650>>2] = $51;
 $bk651 = ((($p$addr$1)) + 12|0);
 HEAP32[$bk651>>2] = $T$0$lcssa;
 $parent652 = ((($p$addr$1)) + 24|0);
 HEAP32[$parent652>>2] = 0;
 return;
}
function _sbrk($increment) {
 $increment = $increment|0;
 var $0 = 0, $1 = 0, $add = 0, $add1 = 0, $and = 0, $call = 0, $call10 = 0, $call3 = 0, $call6 = 0, $cmp = 0, $cmp2 = 0, $cmp4 = 0, $or$cond = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add = (($increment) + 3)|0;
 $and = $add & -4;
 $call = (_emscripten_get_sbrk_ptr()|0);
 $0 = HEAP32[$call>>2]|0;
 $add1 = (($0) + ($and))|0;
 $cmp = ($and|0)<(1);
 $cmp2 = ($add1>>>0)>($0>>>0);
 $or$cond = $cmp | $cmp2;
 do {
  if ($or$cond) {
   $call3 = (_emscripten_get_heap_size()|0);
   $cmp4 = ($add1>>>0)>($call3>>>0);
   if ($cmp4) {
    $call6 = (_emscripten_resize_heap(($add1|0))|0);
    $tobool = ($call6|0)==(0);
    if ($tobool) {
     break;
    }
   }
   HEAP32[$call>>2] = $add1;
   $1 = $0;
   $retval$0 = $1;
   return ($retval$0|0);
  }
 } while(0);
 $call10 = (___errno_location()|0);
 HEAP32[$call10>>2] = 48;
 $retval$0 = (-1);
 return ($retval$0|0);
}
function stackSave() {
    return STACKTOP|0;
}
function stackAlloc(size) {
    size = size|0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size)|0;
    STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);
    return ret|0;
}
function stackRestore(top) {
    top = top|0;
    STACKTOP = top;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
    $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
    $4$1 = (getTempRet0() | 0);
    $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
    $7$0 = $2$0 ^ $1$0;
    $7$1 = $2$1 ^ $1$1;
    $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, (getTempRet0() | 0), 0) | 0;
    $10$0 = _i64Subtract($8$0 ^ $7$0 | 0, (getTempRet0() | 0) ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
    return $10$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _emscripten_get_sbrk_ptr() {
    return 400176;
}
function _llvm_bswap_i16(x) {
    x = x|0;
    return (((x&0xff)<<8) | ((x>>8)&0xff))|0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.copyWithin() becomes faster to use.
    if ((num|0) >= 512) {
      _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      return dest|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      block_aligned_end = (aligned_end - 64)|0;

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}

  
function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&127]()|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&255](a1|0)|0;
}


function dynCall_iidiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iidiiii[index&255](a1|0,+a2,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&127](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&255]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&255](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
}

function b0() {
 ; nullFunc_i(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_ii(1);return 0;
}
function b2(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(2);return 0;
}
function b3(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(3);return 0;
}
function b4(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(4);return 0;
}
function b5() {
 ; nullFunc_v(5);
}
function b6(p0) {
 p0 = p0|0; nullFunc_vi(6);
}
function b7(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(7);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,_G_CheckDemoStatus,b0];
var FUNCTION_TABLE_ii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_W_StdC_OpenFile,b1,b1,___emscripten_stdout_close,b1
,b1,___stdio_close,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_PIT_VileCheck,b1,b1,b1,b1,b1,_PIT_StompThing,_PIT_CheckThing,_PIT_CheckLine,_PTR_SlideTraverse,_PTR_AimTraverse,_PTR_ShootTraverse
,_PTR_UseTraverse,_PIT_RadiusAttack,_PIT_ChangeSector,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iidiiii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_fmt_fp,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iiii = [b3,b3,b3,b3,b3,_wipe_initColorXForm,_wipe_doColorXForm,_wipe_exitColorXForm,_wipe_initMelt,_wipe_doMelt,_wipe_exitMelt,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,___stdio_write
,b3,b3,b3,_sn_write,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,___stdio_read,_do_read_650,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_W_StdC_Read,b4,b4
,___emscripten_stdout_seek,b4,___stdio_seek,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_v = [b5,_D_ProcessEvents,b5,b5,_M_Ticker,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,_M_DrawReadThis1,_M_DrawMainMenu,b5,_M_DrawReadThis2,b5,_M_DrawSave,b5,b5,_M_DrawLoad,_M_DrawOptions,b5,b5,b5,b5,b5,b5,_M_DrawSound,b5,b5,_M_DrawNewGame,_M_DrawEpisode,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,_D_QuitNetGame,_D_Endoom,_M_SaveDefaults,b5,_StatDump,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,_R_DrawColumn,_R_DrawColumnLow,_R_DrawFuzzColumn,_R_DrawFuzzColumnLow,_R_DrawTranslatedColumn,_R_DrawTranslatedColumnLow,_R_DrawSpan,_R_DrawSpanLow,_S_Shutdown,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_vi = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,_A_BFGSpray,_A_Explode,_A_Pain,_A_PlayerScream,_A_Fall,_A_XScream,_A_Look,_A_Chase,_A_FaceTarget,_A_PosAttack,_A_Scream,_A_SPosAttack,_A_VileChase,_A_VileStart,_A_VileTarget,_A_VileAttack,_A_StartFire,_A_Fire,_A_FireCrackle,_A_Tracer,_A_SkelWhoosh,_A_SkelFist,_A_SkelMissile,_A_FatRaise,_A_FatAttack1,_A_FatAttack2
,_A_FatAttack3,_A_BossDeath,_A_CPosAttack,_A_CPosRefire,_A_TroopAttack,_A_SargAttack,_A_HeadAttack,_A_BruisAttack,_A_SkullAttack,_A_Metal,_A_SpidRefire,_A_BabyMetal,_A_BspiAttack,_A_Hoof,_A_CyberAttack,_A_PainAttack,_A_PainDie,_A_KeenDie,_A_BrainPain,_A_BrainScream,_A_BrainDie,_A_BrainAwake,_A_BrainSpit,_A_SpawnSound,_A_SpawnFly,_A_BrainExplode,_M_NewGame,_M_Options,_M_LoadGame,_M_SaveGame
,_M_ReadThis,_M_QuitDOOM,b6,b6,_M_ReadThis2,b6,_M_FinishReadThis,b6,_M_LoadSelect,_M_SaveSelect,b6,b6,_M_EndGame,_M_ChangeMessages,_M_ChangeDetail,_M_SizeDisplay,_M_ChangeSensitivity,_M_Sound,b6,_M_SfxVol,_M_MusicVol,b6,b6,_M_Episode,_M_ChooseSkill,b6,_W_StdC_CloseFile,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,_M_QuitResponse,_M_EndGameResponse,_M_VerifyNightmare,_M_QuickSaveResponse,_M_QuickLoadResponse,_T_MoveCeiling,_T_VerticalDoor,_T_PlatRaise,_P_MobjThinker,b6,_T_MoveFloor,_T_FireFlicker,_T_LightFlash,_T_StrobeFlash,_T_Glow,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_vii = [b7,b7,_G_BuildTiccmd,_RunTic,b7,b7,b7,b7,b7,b7,b7,_A_Light0,_A_WeaponReady,_A_Lower,_A_Raise,_A_Punch,_A_ReFire,_A_FirePistol,_A_Light1,_A_FireShotgun,_A_Light2,_A_FireShotgun2,_A_CheckReload,_A_OpenShotgun2,_A_LoadShotgun2,_A_CloseShotgun2,_A_FireCGun,_A_GunFlash,_A_FireMissile
,_A_Saw,_A_FirePlasma,_A_BFGsound,_A_FireBFG,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_pop_arg_long_double,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];

  return { ___divdi3: ___divdi3, ___emscripten_environ_constructor: ___emscripten_environ_constructor, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, __get_environ: __get_environ, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _doomjs_tick: _doomjs_tick, _emscripten_get_sbrk_ptr: _emscripten_get_sbrk_ptr, _fflush: _fflush, _free: _free, _htonl: _htonl, _htons: _htons, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _key_to_doomkey: _key_to_doomkey, _llvm_bswap_i16: _llvm_bswap_i16, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _ntohs: _ntohs, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

/** @type {function(...*):?} */
var ___divdi3 = Module["___divdi3"] = createExportWrapper("___divdi3", asm);

/** @type {function(...*):?} */
var ___emscripten_environ_constructor = Module["___emscripten_environ_constructor"] = createExportWrapper("___emscripten_environ_constructor", asm);

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("___errno_location", asm);

/** @type {function(...*):?} */
var ___muldi3 = Module["___muldi3"] = createExportWrapper("___muldi3", asm);

/** @type {function(...*):?} */
var ___udivdi3 = Module["___udivdi3"] = createExportWrapper("___udivdi3", asm);

/** @type {function(...*):?} */
var __get_environ = Module["__get_environ"] = createExportWrapper("__get_environ", asm);

/** @type {function(...*):?} */
var _bitshift64Lshr = Module["_bitshift64Lshr"] = createExportWrapper("_bitshift64Lshr", asm);

/** @type {function(...*):?} */
var _bitshift64Shl = Module["_bitshift64Shl"] = createExportWrapper("_bitshift64Shl", asm);

/** @type {function(...*):?} */
var _doomjs_tick = Module["_doomjs_tick"] = createExportWrapper("_doomjs_tick", asm);

/** @type {function(...*):?} */
var _emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = createExportWrapper("_emscripten_get_sbrk_ptr", asm);

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("_fflush", asm);

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("_free", asm);

/** @type {function(...*):?} */
var _htonl = Module["_htonl"] = createExportWrapper("_htonl", asm);

/** @type {function(...*):?} */
var _htons = Module["_htons"] = createExportWrapper("_htons", asm);

/** @type {function(...*):?} */
var _i64Add = Module["_i64Add"] = createExportWrapper("_i64Add", asm);

/** @type {function(...*):?} */
var _i64Subtract = Module["_i64Subtract"] = createExportWrapper("_i64Subtract", asm);

/** @type {function(...*):?} */
var _key_to_doomkey = Module["_key_to_doomkey"] = createExportWrapper("_key_to_doomkey", asm);

/** @type {function(...*):?} */
var _llvm_bswap_i16 = Module["_llvm_bswap_i16"] = createExportWrapper("_llvm_bswap_i16", asm);

/** @type {function(...*):?} */
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = createExportWrapper("_llvm_bswap_i32", asm);

/** @type {function(...*):?} */
var _main = Module["_main"] = createExportWrapper("_main", asm);

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("_malloc", asm);

/** @type {function(...*):?} */
var _memcpy = Module["_memcpy"] = createExportWrapper("_memcpy", asm);

/** @type {function(...*):?} */
var _memset = Module["_memset"] = createExportWrapper("_memset", asm);

/** @type {function(...*):?} */
var _ntohs = Module["_ntohs"] = createExportWrapper("_ntohs", asm);

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc", asm);

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore", asm);

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave", asm);

/** @type {function(...*):?} */
var dynCall_i = Module["dynCall_i"] = createExportWrapper("dynCall_i", asm);

/** @type {function(...*):?} */
var dynCall_ii = Module["dynCall_ii"] = createExportWrapper("dynCall_ii", asm);

/** @type {function(...*):?} */
var dynCall_iidiiii = Module["dynCall_iidiiii"] = createExportWrapper("dynCall_iidiiii", asm);

/** @type {function(...*):?} */
var dynCall_iiii = Module["dynCall_iiii"] = createExportWrapper("dynCall_iiii", asm);

/** @type {function(...*):?} */
var dynCall_iiiii = Module["dynCall_iiiii"] = createExportWrapper("dynCall_iiiii", asm);

/** @type {function(...*):?} */
var dynCall_v = Module["dynCall_v"] = createExportWrapper("dynCall_v", asm);

/** @type {function(...*):?} */
var dynCall_vi = Module["dynCall_vi"] = createExportWrapper("dynCall_vi", asm);

/** @type {function(...*):?} */
var dynCall_vii = Module["dynCall_vii"] = createExportWrapper("dynCall_vii", asm);
Module['_str'] = 130951;;




// === Auto-generated postamble setup entry stuff ===

// asm.js startup is synchronous
Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getMemory")) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory")) Module["abortOnCannotGrowMemory"] = function() { abort("'abortOnCannotGrowMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() { abort("'listenOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() { abort("'autoResumeAudioContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortStackOverflow")) Module["abortStackOverflow"] = function() { abort("'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() { abort("'writeGLArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = readBinary(memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    };
    var doBrowserLoad = function() {
      readAsync(memoryInitializer, applyMemoryInitializer, function() {
        var e = new Error('could not load memory initializer ' + memoryInitializer);
          throw e;
      });
    };
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      };
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}


var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  var entryFunction = Module['_main'];


  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(thisProgram);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;

  try {


    var ret = entryFunction(argc, argv);


    // In PROXY_TO_PTHREAD builds, we should never exit the runtime below, as execution is asynchronously handed
    // off to a pthread.
    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'unwind') {
      // running an evented main loop, don't immediately exit
      noExitRuntime = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      quit_(1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      err(msg);
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;


  noExitRuntime = true;

run();






// {{MODULE_ADDITIONS}}



